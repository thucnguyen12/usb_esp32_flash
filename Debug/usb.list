
usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a23c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000288c  0801a3cc  0801a3cc  0002a3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc58  0801cc58  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  0801cc58  0801cc58  0002cc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cc60  0801cc60  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cc60  0801cc60  0002cc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cc64  0801cc64  0002cc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0801cc68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030220  2**0
                  CONTENTS
 10 .bss          0000936c  20000220  20000220  00030220  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000958c  2000958c  00030220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003976b  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009012  00000000  00000000  000699bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c60  00000000  00000000  000729d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002990  00000000  00000000  00075630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031fd4  00000000  00000000  00077fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00040349  00000000  00000000  000a9f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8016  00000000  00000000  000ea2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e22f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c0e4  00000000  00000000  001e2344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a3b4 	.word	0x0801a3b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0801a3b4 	.word	0x0801a3b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2105      	movs	r1, #5
 80005ca:	2038      	movs	r0, #56	; 0x38
 80005cc:	f001 f836 	bl	800163c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005d0:	2038      	movs	r0, #56	; 0x38
 80005d2:	f001 f85f 	bl	8001694 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2105      	movs	r1, #5
 80005da:	203b      	movs	r0, #59	; 0x3b
 80005dc:	f001 f82e 	bl	800163c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005e0:	203b      	movs	r0, #59	; 0x3b
 80005e2:	f001 f857 	bl	8001694 <HAL_NVIC_EnableIRQ>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <__NVIC_SystemReset+0x24>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000606:	4904      	ldr	r1, [pc, #16]	; (8000618 <__NVIC_SystemReset+0x24>)
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_SystemReset+0x28>)
 800060a:	4313      	orrs	r3, r2
 800060c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <__NVIC_SystemReset+0x20>
 8000618:	e000ed00 	.word	0xe000ed00
 800061c:	05fa0004 	.word	0x05fa0004

08000620 <tud_cdc_n_write_str>:
{
  return tud_cdc_n_write(itf, &ch, 1);
}

static inline uint32_t tud_cdc_n_write_str (uint8_t itf, char const* str)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
  return tud_cdc_n_write(itf, str, strlen(str));
 800062c:	6838      	ldr	r0, [r7, #0]
 800062e:	f7ff fdd9 	bl	80001e4 <strlen>
 8000632:	4602      	mov	r2, r0
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f012 f8f1 	bl	8012820 <tud_cdc_n_write>
 800063e:	4603      	mov	r3, r0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <tud_cdc_connected>:

static inline bool tud_cdc_connected (void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 800064c:	2000      	movs	r0, #0
 800064e:	f012 f86b 	bl	8012728 <tud_cdc_n_connected>
 8000652:	4603      	mov	r3, r0
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}

08000658 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 800065c:	2000      	movs	r0, #0
 800065e:	f012 f8a3 	bl	80127a8 <tud_cdc_n_available>
 8000662:	4603      	mov	r3, r0
}
 8000664:	4618      	mov	r0, r3
 8000666:	bd80      	pop	{r7, pc}

08000668 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	2000      	movs	r0, #0
 8000678:	f012 f8ae 	bl	80127d8 <tud_cdc_n_read>
 800067c:	4603      	mov	r3, r0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	2000      	movs	r0, #0
 8000696:	f012 f8c3 	bl	8012820 <tud_cdc_n_write>
 800069a:	4603      	mov	r3, r0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <tud_cdc_write_str>:

static inline uint32_t tud_cdc_write_str (char const* str)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  return tud_cdc_n_write_str(0, str);
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ffb6 	bl	8000620 <tud_cdc_n_write_str>
 80006b4:	4603      	mov	r3, r0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <tud_cdc_write_flush>:

static inline uint32_t tud_cdc_write_flush (void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f012 f8d8 	bl	8012878 <tud_cdc_n_write_flush>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	bd80      	pop	{r7, pc}

080006ce <tud_cdc_write_available>:

static inline uint32_t tud_cdc_write_available(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_available(0);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f012 f956 	bl	8012984 <tud_cdc_n_write_available>
 80006d8:	4603      	mov	r3, r0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <vApplicationGetIdleTaskMemory+0x2c>)
 80006f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <vApplicationGetIdleTaskMemory+0x30>)
 80006f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	200014f8 	.word	0x200014f8
 8000710:	200015ac 	.word	0x200015ac

08000714 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_FREERTOS_Init+0x30>)
 800071c:	1d3c      	adds	r4, r7, #4
 800071e:	461d      	mov	r5, r3
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f00c f82a 	bl	800c78a <osThreadCreate>
 8000736:	4603      	mov	r3, r0
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <MX_FREERTOS_Init+0x34>)
 800073a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bdb0      	pop	{r4, r5, r7, pc}
 8000744:	0801a3d8 	.word	0x0801a3d8
 8000748:	2000023c 	.word	0x2000023c

0800074c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af04      	add	r7, sp, #16
 8000752:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  /* USER CODE BEGIN StartDefaultTask */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000764:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077a:	4619      	mov	r1, r3
 800077c:	485d      	ldr	r0, [pc, #372]	; (80008f4 <StartDefaultTask+0x1a8>)
 800077e:	f001 fd1d 	bl	80021bc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	485a      	ldr	r0, [pc, #360]	; (80008f4 <StartDefaultTask+0x1a8>)
 800078a:	f001 fff9 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	4857      	ldr	r0, [pc, #348]	; (80008f4 <StartDefaultTask+0x1a8>)
 8000796:	f001 fff3 	bl	8002780 <HAL_GPIO_WritePin>

    MX_FATFS_Init();
 800079a:	f007 f91d 	bl	80079d8 <MX_FATFS_Init>

    vTaskDelay(500);		// time for usb renum
 800079e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a2:	f00d fb87 	bl	800deb4 <vTaskDelay>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4851      	ldr	r0, [pc, #324]	; (80008f4 <StartDefaultTask+0x1a8>)
 80007ae:	f001 ffe7 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b8:	484e      	ldr	r0, [pc, #312]	; (80008f4 <StartDefaultTask+0x1a8>)
 80007ba:	f001 ffe1 	bl	8002780 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	4847      	ldr	r0, [pc, #284]	; (80008f4 <StartDefaultTask+0x1a8>)
 80007d8:	f001 fcf0 	bl	80021bc <HAL_GPIO_Init>

    MX_USB_DEVICE_Init();
 80007dc:	f010 fb8c 	bl	8010ef8 <MX_USB_DEVICE_Init>
    DEBUG_INFO("tusb_init\r\n");
 80007e0:	f010 ff5e 	bl	80116a0 <app_debug_get_ms>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4a44      	ldr	r2, [pc, #272]	; (80008f8 <StartDefaultTask+0x1ac>)
 80007e8:	4619      	mov	r1, r3
 80007ea:	4844      	ldr	r0, [pc, #272]	; (80008fc <StartDefaultTask+0x1b0>)
 80007ec:	f011 f8d4 	bl	8011998 <app_debug_print_raw>


    flash_res = f_mount(&USERFatFS, USERPath, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	4943      	ldr	r1, [pc, #268]	; (8000900 <StartDefaultTask+0x1b4>)
 80007f4:	4843      	ldr	r0, [pc, #268]	; (8000904 <StartDefaultTask+0x1b8>)
 80007f6:	f00a ffaf 	bl	800b758 <f_mount>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b42      	ldr	r3, [pc, #264]	; (8000908 <StartDefaultTask+0x1bc>)
 8000800:	701a      	strb	r2, [r3, #0]
	if (flash_res != FR_OK)
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <StartDefaultTask+0x1bc>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d033      	beq.n	8000872 <StartDefaultTask+0x126>
	{
		DEBUG_WARN("Mount flash fail\r\n");
 800080a:	f010 ff49 	bl	80116a0 <app_debug_get_ms>
 800080e:	4603      	mov	r3, r0
 8000810:	4a39      	ldr	r2, [pc, #228]	; (80008f8 <StartDefaultTask+0x1ac>)
 8000812:	4619      	mov	r1, r3
 8000814:	483d      	ldr	r0, [pc, #244]	; (800090c <StartDefaultTask+0x1c0>)
 8000816:	f011 f8bf 	bl	8011998 <app_debug_print_raw>
		flash_res = f_mkfs(USERPath, FM_ANY, 0, gFSWork, sizeof gFSWork);
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <StartDefaultTask+0x1c4>)
 8000822:	2200      	movs	r2, #0
 8000824:	2107      	movs	r1, #7
 8000826:	4836      	ldr	r0, [pc, #216]	; (8000900 <StartDefaultTask+0x1b4>)
 8000828:	f00b f9c0 	bl	800bbac <f_mkfs>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b35      	ldr	r3, [pc, #212]	; (8000908 <StartDefaultTask+0x1bc>)
 8000832:	701a      	strb	r2, [r3, #0]
		flash_res = f_mount(&USERFatFS, USERPath, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	4932      	ldr	r1, [pc, #200]	; (8000900 <StartDefaultTask+0x1b4>)
 8000838:	4832      	ldr	r0, [pc, #200]	; (8000904 <StartDefaultTask+0x1b8>)
 800083a:	f00a ff8d 	bl	800b758 <f_mount>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b31      	ldr	r3, [pc, #196]	; (8000908 <StartDefaultTask+0x1bc>)
 8000844:	701a      	strb	r2, [r3, #0]
		if (flash_res == FR_OK)
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <StartDefaultTask+0x1bc>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d108      	bne.n	8000860 <StartDefaultTask+0x114>
		{
			DEBUG_INFO ("format disk and mount again\r\n");
 800084e:	f010 ff27 	bl	80116a0 <app_debug_get_ms>
 8000852:	4603      	mov	r3, r0
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <StartDefaultTask+0x1ac>)
 8000856:	4619      	mov	r1, r3
 8000858:	482e      	ldr	r0, [pc, #184]	; (8000914 <StartDefaultTask+0x1c8>)
 800085a:	f011 f89d 	bl	8011998 <app_debug_print_raw>
 800085e:	e010      	b.n	8000882 <StartDefaultTask+0x136>
		}
		else
		{
			DEBUG_ERROR("Mount flash error\r\n");
 8000860:	f010 ff1e 	bl	80116a0 <app_debug_get_ms>
 8000864:	4603      	mov	r3, r0
 8000866:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <StartDefaultTask+0x1ac>)
 8000868:	4619      	mov	r1, r3
 800086a:	482b      	ldr	r0, [pc, #172]	; (8000918 <StartDefaultTask+0x1cc>)
 800086c:	f011 f894 	bl	8011998 <app_debug_print_raw>
 8000870:	e007      	b.n	8000882 <StartDefaultTask+0x136>
		}
	}
	else
	{
		DEBUG_INFO ("Mount flash ok\r\n");
 8000872:	f010 ff15 	bl	80116a0 <app_debug_get_ms>
 8000876:	4603      	mov	r3, r0
 8000878:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <StartDefaultTask+0x1ac>)
 800087a:	4619      	mov	r1, r3
 800087c:	4827      	ldr	r0, [pc, #156]	; (800091c <StartDefaultTask+0x1d0>)
 800087e:	f011 f88b 	bl	8011998 <app_debug_print_raw>
	}
	TCHAR label[32];
	f_getlabel(USERPath, label, 0);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	481d      	ldr	r0, [pc, #116]	; (8000900 <StartDefaultTask+0x1b4>)
 800088c:	f00a ffc8 	bl	800b820 <f_getlabel>
	DEBUG_INFO("Label %s\r\n", label);
 8000890:	f010 ff06 	bl	80116a0 <app_debug_get_ms>
 8000894:	4601      	mov	r1, r0
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <StartDefaultTask+0x1ac>)
 800089c:	4820      	ldr	r0, [pc, #128]	; (8000920 <StartDefaultTask+0x1d4>)
 800089e:	f011 f87b 	bl	8011998 <app_debug_print_raw>
	if (strcmp(label, "BSAFE JIG"))
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	491f      	ldr	r1, [pc, #124]	; (8000924 <StartDefaultTask+0x1d8>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fc91 	bl	80001d0 <strcmp>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00a      	beq.n	80008ca <StartDefaultTask+0x17e>
	{
		DEBUG_INFO("Set label\r\n");
 80008b4:	f010 fef4 	bl	80116a0 <app_debug_get_ms>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <StartDefaultTask+0x1ac>)
 80008bc:	4619      	mov	r1, r3
 80008be:	481a      	ldr	r0, [pc, #104]	; (8000928 <StartDefaultTask+0x1dc>)
 80008c0:	f011 f86a 	bl	8011998 <app_debug_print_raw>
		f_setlabel("BSAFE JIG");
 80008c4:	4817      	ldr	r0, [pc, #92]	; (8000924 <StartDefaultTask+0x1d8>)
 80008c6:	f00b f84d 	bl	800b964 <f_setlabel>
	}

    tusb_init();
 80008ca:	f018 f875 	bl	80189b8 <tusb_init>
  // Create CDC task
  (void) xTaskCreateStatic(cdc_task, "cdc", CDC_STACK_SZIE, NULL, configMAX_PRIORITIES-2, cdc_stack, &cdc_taskdef);
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <StartDefaultTask+0x1e0>)
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <StartDefaultTask+0x1e4>)
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	2305      	movs	r3, #5
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	4915      	ldr	r1, [pc, #84]	; (8000934 <StartDefaultTask+0x1e8>)
 80008e0:	4815      	ldr	r0, [pc, #84]	; (8000938 <StartDefaultTask+0x1ec>)
 80008e2:	f00d f8bf 	bl	800da64 <xTaskCreateStatic>

  /* Infinite loop */
  for(;;)
  {
    tud_task();
 80008e6:	f014 fdc1 	bl	801546c <tud_task>
    osDelay(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f00b ff99 	bl	800c822 <osDelay>
    tud_task();
 80008f0:	e7f9      	b.n	80008e6 <StartDefaultTask+0x19a>
 80008f2:	bf00      	nop
 80008f4:	40020000 	.word	0x40020000
 80008f8:	0801a3f4 	.word	0x0801a3f4
 80008fc:	0801a3f8 	.word	0x0801a3f8
 8000900:	20001d78 	.word	0x20001d78
 8000904:	20001d7c 	.word	0x20001d7c
 8000908:	20001240 	.word	0x20001240
 800090c:	0801a41c 	.word	0x0801a41c
 8000910:	20000240 	.word	0x20000240
 8000914:	0801a448 	.word	0x0801a448
 8000918:	0801a480 	.word	0x0801a480
 800091c:	0801a4ac 	.word	0x0801a4ac
 8000920:	0801a4d4 	.word	0x0801a4d4
 8000924:	0801a4f8 	.word	0x0801a4f8
 8000928:	0801a504 	.word	0x0801a504
 800092c:	20001444 	.word	0x20001444
 8000930:	20001244 	.word	0x20001244
 8000934:	0801a528 	.word	0x0801a528
 8000938:	08000961 	.word	0x08000961

0800093c <cdc_tx>:

static bool m_cdc_debug_register = false;
static lwrb_t m_ringbuffer_usb_cdc_tx;
static uint8_t m_lwrb_tx_raw_buffer[USB_CDC_TX_RING_BUFFER_SIZE];
uint32_t cdc_tx(const void *buffer, uint32_t size)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	lwrb_write(&m_ringbuffer_usb_cdc_tx, buffer, size);
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <cdc_tx+0x20>)
 800094c:	f011 fd19 	bl	8012382 <lwrb_write>
	return size;
 8000950:	683b      	ldr	r3, [r7, #0]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200017b0 	.word	0x200017b0

08000960 <cdc_task>:

void cdc_task(void* params)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b096      	sub	sp, #88	; 0x58
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	lwrb_init(&m_ringbuffer_usb_cdc_tx, m_lwrb_tx_raw_buffer, USB_CDC_TX_RING_BUFFER_SIZE);
 8000968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096c:	4938      	ldr	r1, [pc, #224]	; (8000a50 <cdc_task+0xf0>)
 800096e:	4839      	ldr	r0, [pc, #228]	; (8000a54 <cdc_task+0xf4>)
 8000970:	f011 fce6 	bl	8012340 <lwrb_init>
	for (;;)
	{
//	    // connected() check for DTR bit
//	    // Most but not all terminal client set this when making connection
	    if (tud_cdc_connected())
 8000974:	f7ff fe68 	bl	8000648 <tud_cdc_connected>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d031      	beq.n	80009e2 <cdc_task+0x82>
		{
	    	if (m_cdc_debug_register == false)
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <cdc_task+0xf8>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	f083 0301 	eor.w	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d005      	beq.n	8000998 <cdc_task+0x38>
	    	{
	    		m_cdc_debug_register = true;
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <cdc_task+0xf8>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
	    		app_debug_register_callback_print(cdc_tx);
 8000992:	4832      	ldr	r0, [pc, #200]	; (8000a5c <cdc_task+0xfc>)
 8000994:	f011 fa46 	bl	8011e24 <app_debug_register_callback_print>
	    	}
			// There are data available
			if (tud_cdc_available())
 8000998:	f7ff fe5e 	bl	8000658 <tud_cdc_available>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d034      	beq.n	8000a0c <cdc_task+0xac>
			{
				uint8_t buf[64];

				// read and echo back
				uint32_t count = tud_cdc_read(buf, sizeof(buf));
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe5d 	bl	8000668 <tud_cdc_read>
 80009ae:	6538      	str	r0, [r7, #80]	; 0x50
				(void) count;

				if (count && strstr((char*)buf, "RESET"))
 80009b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d02a      	beq.n	8000a0c <cdc_task+0xac>
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4929      	ldr	r1, [pc, #164]	; (8000a60 <cdc_task+0x100>)
 80009bc:	4618      	mov	r0, r3
 80009be:	f018 fd70 	bl	80194a2 <strstr>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d021      	beq.n	8000a0c <cdc_task+0xac>
				{
					tud_cdc_write_flush();
 80009c8:	f7ff fe79 	bl	80006be <tud_cdc_write_flush>
					tud_cdc_write_str("System reset\r\n");
 80009cc:	4825      	ldr	r0, [pc, #148]	; (8000a64 <cdc_task+0x104>)
 80009ce:	f7ff fe69 	bl	80006a4 <tud_cdc_write_str>
					tud_cdc_write_flush();
 80009d2:	f7ff fe74 	bl	80006be <tud_cdc_write_flush>
					vTaskDelay(1000);
 80009d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009da:	f00d fa6b 	bl	800deb4 <vTaskDelay>
					NVIC_SystemReset();
 80009de:	f7ff fe09 	bl	80005f4 <__NVIC_SystemReset>
//				tud_cdc_write_flush();
			}
		}
	    else
	    {
	    	if (m_cdc_debug_register)
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <cdc_task+0xf8>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d010      	beq.n	8000a0c <cdc_task+0xac>
	    	{
	    		m_cdc_debug_register = false;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <cdc_task+0xf8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	    		app_debug_unregister_callback_print(cdc_tx);
 80009f0:	481a      	ldr	r0, [pc, #104]	; (8000a5c <cdc_task+0xfc>)
 80009f2:	f011 fa5f 	bl	8011eb4 <app_debug_unregister_callback_print>
		    	// Flush all cdc tx buffer
		    	char tmp[1];
		    	while (lwrb_read(&m_ringbuffer_usb_cdc_tx, tmp, 1))
 80009f6:	bf00      	nop
 80009f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009fc:	2201      	movs	r2, #1
 80009fe:	4619      	mov	r1, r3
 8000a00:	4814      	ldr	r0, [pc, #80]	; (8000a54 <cdc_task+0xf4>)
 8000a02:	f011 fd35 	bl	8012470 <lwrb_read>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1f5      	bne.n	80009f8 <cdc_task+0x98>

	    char buffer[ (TUD_OPT_HIGH_SPEED ? 512 : 64)];
	    uint32_t size;
	    while (1)
	    {
	    	uint32_t avai = tud_cdc_write_available();
 8000a0c:	f7ff fe5f 	bl	80006ce <tud_cdc_write_available>
 8000a10:	6578      	str	r0, [r7, #84]	; 0x54
	    	if (avai >= sizeof(buffer))
 8000a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a14:	2b3f      	cmp	r3, #63	; 0x3f
 8000a16:	d901      	bls.n	8000a1c <cdc_task+0xbc>
	    	{
	    		avai = sizeof(buffer);
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
	    	}
			size = lwrb_read(&m_ringbuffer_usb_cdc_tx, buffer, avai);
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <cdc_task+0xf4>)
 8000a26:	f011 fd23 	bl	8012470 <lwrb_read>
 8000a2a:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (size)
 8000a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d008      	beq.n	8000a44 <cdc_task+0xe4>
			{
				tud_cdc_write(buffer, size);
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe24 	bl	8000686 <tud_cdc_write>
				tud_cdc_write_flush();
 8000a3e:	f7ff fe3e 	bl	80006be <tud_cdc_write_flush>
	    {
 8000a42:	e7e3      	b.n	8000a0c <cdc_task+0xac>
			}
			else
			{
				break;
 8000a44:	bf00      	nop
			}
	    }
	    vTaskDelay(pdMS_TO_TICKS(1));
 8000a46:	2001      	movs	r0, #1
 8000a48:	f00d fa34 	bl	800deb4 <vTaskDelay>
	{
 8000a4c:	e792      	b.n	8000974 <cdc_task+0x14>
 8000a4e:	bf00      	nop
 8000a50:	200017c4 	.word	0x200017c4
 8000a54:	200017b0 	.word	0x200017b0
 8000a58:	200017ac 	.word	0x200017ac
 8000a5c:	0800093d 	.word	0x0800093d
 8000a60:	0801a52c 	.word	0x0801a52c
 8000a64:	0801a534 	.word	0x0801a534

08000a68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a41      	ldr	r2, [pc, #260]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000aa4:	f043 0320 	orr.w	r3, r3, #32
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0320 	and.w	r3, r3, #32
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a3a      	ldr	r2, [pc, #232]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a33      	ldr	r2, [pc, #204]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a2c      	ldr	r2, [pc, #176]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_GPIO_Init+0x140>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_RST_Pin|ESP32_IO0_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	210c      	movs	r1, #12
 8000b0e:	4827      	ldr	r0, [pc, #156]	; (8000bac <MX_GPIO_Init+0x144>)
 8000b10:	f001 fe36 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_SUCCESS_Pin|LED_BUSY_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0x148>)
 8000b1c:	f001 fe30 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b26:	4823      	ldr	r0, [pc, #140]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000b28:	f001 fe2a 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin|ESP32_IO0_Pin;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	481a      	ldr	r0, [pc, #104]	; (8000bac <MX_GPIO_Init+0x144>)
 8000b44:	f001 fb3a 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED_SUCCESS_Pin|LED_BUSY_Pin;
 8000b48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MX_GPIO_Init+0x148>)
 8000b62:	f001 fb2b 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000b66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000b80:	f001 fb1c 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000b9a:	f001 fb0f 	bl	80021bc <HAL_GPIO_Init>

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40021400 	.word	0x40021400
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbc:	f000 fc0a 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc0:	f000 f82c 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc4:	f7ff ff50 	bl	8000a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc8:	f7ff fcec 	bl	80005a4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000bcc:	f000 f8ea 	bl	8000da4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000bd0:	f006 ff02 	bl	80079d8 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000bd4:	f000 fb5a 	bl	800128c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	m_lock_debug = xSemaphoreCreateMutex();
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f00c f908 	bl	800cdee <xQueueCreateMutex>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <main+0x54>)
 8000be2:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(m_lock_debug);
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <main+0x54>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	f00c f931 	bl	800ce54 <xQueueGenericSend>
	app_debug_init(sys_get_ms, lock_debug);
 8000bf2:	4907      	ldr	r1, [pc, #28]	; (8000c10 <main+0x58>)
 8000bf4:	4807      	ldr	r0, [pc, #28]	; (8000c14 <main+0x5c>)
 8000bf6:	f010 fd3d 	bl	8011674 <app_debug_init>
	app_debug_register_callback_print(rtt_tx);
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <main+0x60>)
 8000bfc:	f011 f912 	bl	8011e24 <app_debug_register_callback_print>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c00:	f7ff fd88 	bl	8000714 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c04:	f00b fdba 	bl	800c77c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <main+0x50>
 8000c0a:	bf00      	nop
 8000c0c:	20001bc4 	.word	0x20001bc4
 8000c10:	08000d1d 	.word	0x08000d1d
 8000c14:	08000cf1 	.word	0x08000cf1
 8000c18:	08000cff 	.word	0x08000cff

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b094      	sub	sp, #80	; 0x50
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0320 	add.w	r3, r7, #32
 8000c26:	2230      	movs	r2, #48	; 0x30
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f018 fa1b 	bl	8019066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <SystemClock_Config+0xcc>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <SystemClock_Config+0xcc>)
 8000c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <SystemClock_Config+0xcc>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <SystemClock_Config+0xd0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a21      	ldr	r2, [pc, #132]	; (8000cec <SystemClock_Config+0xd0>)
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <SystemClock_Config+0xd0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c90:	23a8      	movs	r3, #168	; 0xa8
 8000c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 f9a1 	bl	8002fe8 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cac:	f000 f869 	bl	8000d82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2105      	movs	r1, #5
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fcb2 	bl	8003638 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cda:	f000 f852 	bl	8000d82 <Error_Handler>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3750      	adds	r7, #80	; 0x50
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40007000 	.word	0x40007000

08000cf0 <sys_get_ms>:

/* USER CODE BEGIN 4 */
uint32_t sys_get_ms(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000cf4:	f000 fba4 	bl	8001440 <HAL_GetTick>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <rtt_tx>:

uint32_t rtt_tx(const void *buffer, uint32_t size)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
    return SEGGER_RTT_Write(0, buffer, size);
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f00e fcf7 	bl	800f700 <SEGGER_RTT_Write>
 8000d12:	4603      	mov	r3, r0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <lock_debug>:


bool lock_debug(bool lock, uint32_t timeout_ms)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
	if (lock)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00c      	beq.n	8000d48 <lock_debug+0x2c>
		return xSemaphoreTake(m_lock_debug, timeout_ms);
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <lock_debug+0x44>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6839      	ldr	r1, [r7, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f00c fb93 	bl	800d460 <xQueueSemaphoreTake>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	e007      	b.n	8000d58 <lock_debug+0x3c>
	xSemaphoreGive(m_lock_debug);
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <lock_debug+0x44>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	f00c f87f 	bl	800ce54 <xQueueGenericSend>
	return true;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20001bc4 	.word	0x20001bc4

08000d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d74:	d101      	bne.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d76:	f000 fb4f 	bl	8001418 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d86:	b672      	cpsid	i
}
 8000d88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <Error_Handler+0x8>

08000d8c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <MX_SPI1_Init+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000db0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000dd8:	2208      	movs	r2, #8
 8000dda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000df0:	220a      	movs	r2, #10
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_SPI1_Init+0x64>)
 8000df6:	f002 ff19 	bl	8003c2c <HAL_SPI_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e00:	f7ff ffbf 	bl	8000d82 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20001bc8 	.word	0x20001bc8
 8000e0c:	40013000 	.word	0x40013000

08000e10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a4b      	ldr	r2, [pc, #300]	; (8000f5c <HAL_SPI_MspInit+0x14c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	f040 8090 	bne.w	8000f54 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <HAL_SPI_MspInit+0x150>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3c:	4a48      	ldr	r2, [pc, #288]	; (8000f60 <HAL_SPI_MspInit+0x150>)
 8000e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e42:	6453      	str	r3, [r2, #68]	; 0x44
 8000e44:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_SPI_MspInit+0x150>)
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <HAL_SPI_MspInit+0x150>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a41      	ldr	r2, [pc, #260]	; (8000f60 <HAL_SPI_MspInit+0x150>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <HAL_SPI_MspInit+0x150>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e6c:	2338      	movs	r3, #56	; 0x38
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4837      	ldr	r0, [pc, #220]	; (8000f64 <HAL_SPI_MspInit+0x154>)
 8000e88:	f001 f998 	bl	80021bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000e8e:	4a37      	ldr	r2, [pc, #220]	; (8000f6c <HAL_SPI_MspInit+0x15c>)
 8000e90:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000e94:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e98:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea0:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ecc:	4826      	ldr	r0, [pc, #152]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000ece:	f000 fbf9 	bl	80016c4 <HAL_DMA_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000ed8:	f7ff ff53 	bl	8000d82 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000ee0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ee2:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <HAL_SPI_MspInit+0x158>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <HAL_SPI_MspInit+0x164>)
 8000eec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000ef0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ef4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f08:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000f2a:	f000 fbcb 	bl	80016c4 <HAL_DMA_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000f34:	f7ff ff25 	bl	8000d82 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000f3c:	649a      	str	r2, [r3, #72]	; 0x48
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_SPI_MspInit+0x160>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2105      	movs	r1, #5
 8000f48:	2023      	movs	r0, #35	; 0x23
 8000f4a:	f000 fb77 	bl	800163c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f4e:	2023      	movs	r0, #35	; 0x23
 8000f50:	f000 fba0 	bl	8001694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40013000 	.word	0x40013000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400
 8000f68:	20001c20 	.word	0x20001c20
 8000f6c:	40026410 	.word	0x40026410
 8000f70:	20001c80 	.word	0x20001c80
 8000f74:	40026458 	.word	0x40026458

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_MspInit+0x54>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_MspInit+0x54>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_MspInit+0x54>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_MspInit+0x54>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_MspInit+0x54>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_MspInit+0x54>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	210f      	movs	r1, #15
 8000fba:	f06f 0001 	mvn.w	r0, #1
 8000fbe:	f000 fb3d 	bl	800163c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	201c      	movs	r0, #28
 8000fe6:	f000 fb29 	bl	800163c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fea:	201c      	movs	r0, #28
 8000fec:	f000 fb52 	bl	8001694 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <HAL_InitTick+0xa8>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <HAL_InitTick+0xa8>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_InitTick+0xa8>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800100c:	f107 0210 	add.w	r2, r7, #16
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fdd6 	bl	8003bc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800101c:	f002 fdac 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8001020:	4603      	mov	r3, r0
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_InitTick+0xac>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0c9b      	lsrs	r3, r3, #18
 8001030:	3b01      	subs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0xb0>)
 8001036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_InitTick+0xb0>)
 800103e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001042:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_InitTick+0xb0>)
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_InitTick+0xb0>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_InitTick+0xb0>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <HAL_InitTick+0xb0>)
 8001058:	f003 ff96 	bl	8004f88 <HAL_TIM_Base_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d104      	bne.n	800106c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001062:	4807      	ldr	r0, [pc, #28]	; (8001080 <HAL_InitTick+0xb0>)
 8001064:	f004 f88a 	bl	800517c <HAL_TIM_Base_Start_IT>
 8001068:	4603      	mov	r3, r0
 800106a:	e000      	b.n	800106e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	431bde83 	.word	0x431bde83
 8001080:	20001ce0 	.word	0x20001ce0

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <TIM2_IRQHandler+0x10>)
 80010b6:	f004 f927 	bl	8005308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20001ce0 	.word	0x20001ce0

080010c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <SPI1_IRQHandler+0x10>)
 80010ca:	f003 fbb7 	bl	800483c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20001bc8 	.word	0x20001bc8

080010d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <USART3_IRQHandler+0x10>)
 80010de:	f004 fbc7 	bl	8005870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20001d2c 	.word	0x20001d2c

080010ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <DMA2_Stream0_IRQHandler+0x10>)
 80010f2:	f000 fdf9 	bl	8001ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20001c20 	.word	0x20001c20

08001100 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <DMA2_Stream3_IRQHandler+0x10>)
 8001106:	f000 fdef 	bl	8001ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20001c80 	.word	0x20001c80

08001114 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
    tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8001118:	2000      	movs	r0, #0
 800111a:	f017 fb3f 	bl	801879c <dcd_int_handler>
    return;
 800111e:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001120:	bd80      	pop	{r7, pc}

08001122 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e00a      	b.n	800114a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001134:	f3af 8000 	nop.w
 8001138:	4601      	mov	r1, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	b2ca      	uxtb	r2, r1
 8001142:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	dbf0      	blt.n	8001134 <_read+0x12>
	}

return len;
 8001152:	687b      	ldr	r3, [r7, #4]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e009      	b.n	8001182 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	60ba      	str	r2, [r7, #8]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	dbf1      	blt.n	800116e <_write+0x12>
	}
	return len;
 800118a:	687b      	ldr	r3, [r7, #4]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_close>:

int _close(int file)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	return -1;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011bc:	605a      	str	r2, [r3, #4]
	return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_isatty>:

int _isatty(int file)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
	return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f017 fdd0 	bl	8018dd0 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20020000 	.word	0x20020000
 800125c:	00000400 	.word	0x00000400
 8001260:	20001d28 	.word	0x20001d28
 8001264:	20009590 	.word	0x20009590

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_USART3_UART_Init+0x4c>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <MX_USART3_UART_Init+0x50>)
 8001294:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_USART3_UART_Init+0x4c>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012c4:	f004 fa04 	bl	80056d0 <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012ce:	f7ff fd58 	bl	8000d82 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20001d2c 	.word	0x20001d2c
 80012dc:	40004800 	.word	0x40004800

080012e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <HAL_UART_MspInit+0x94>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d134      	bne.n	800136c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_UART_MspInit+0x98>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800133a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800134c:	2307      	movs	r3, #7
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4809      	ldr	r0, [pc, #36]	; (800137c <HAL_UART_MspInit+0x9c>)
 8001358:	f000 ff30 	bl	80021bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2105      	movs	r1, #5
 8001360:	2027      	movs	r0, #39	; 0x27
 8001362:	f000 f96b 	bl	800163c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001366:	2027      	movs	r0, #39	; 0x27
 8001368:	f000 f994 	bl	8001694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40004800 	.word	0x40004800
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001386:	490e      	ldr	r1, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800139c:	4c0b      	ldr	r4, [pc, #44]	; (80013cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013aa:	f7ff ff5d 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ae:	f017 fe0b 	bl	8018fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff fc01 	bl	8000bb8 <main>
  bx  lr    
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80013c4:	0801cc68 	.word	0x0801cc68
  ldr r2, =_sbss
 80013c8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80013cc:	2000958c 	.word	0x2000958c

080013d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <HAL_Init+0x40>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_Init+0x40>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x40>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f8fd 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	200f      	movs	r0, #15
 8001404:	f7ff fde4 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fdb6 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008
 800143c:	20001d70 	.word	0x20001d70

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20001d70 	.word	0x20001d70

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffde 	bl	8001440 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008

080014a0 <__NVIC_SetPriorityGrouping>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4907      	ldr	r1, [pc, #28]	; (800153c <__NVIC_EnableIRQ+0x38>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b07      	cmp	r3, #7
 8001608:	d00f      	beq.n	800162a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b06      	cmp	r3, #6
 800160e:	d00c      	beq.n	800162a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d009      	beq.n	800162a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b04      	cmp	r3, #4
 800161a:	d006      	beq.n	800162a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d003      	beq.n	800162a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001622:	2190      	movs	r1, #144	; 0x90
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001626:	f7ff fbb1 	bl	8000d8c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff38 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	0801a544 	.word	0x0801a544

0800163c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d903      	bls.n	800165c <HAL_NVIC_SetPriority+0x20>
 8001654:	21a8      	movs	r1, #168	; 0xa8
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <HAL_NVIC_SetPriority+0x54>)
 8001658:	f7ff fb98 	bl	8000d8c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	d903      	bls.n	800166a <HAL_NVIC_SetPriority+0x2e>
 8001662:	21a9      	movs	r1, #169	; 0xa9
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <HAL_NVIC_SetPriority+0x54>)
 8001666:	f7ff fb91 	bl	8000d8c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166a:	f7ff ff3d 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 800166e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	6978      	ldr	r0, [r7, #20]
 8001676:	f7ff ff8d 	bl	8001594 <NVIC_EncodePriority>
 800167a:	4602      	mov	r2, r0
 800167c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff5c 	bl	8001540 <__NVIC_SetPriority>
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	0801a544 	.word	0x0801a544

08001694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da03      	bge.n	80016ae <HAL_NVIC_EnableIRQ+0x1a>
 80016a6:	21bc      	movs	r1, #188	; 0xbc
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_NVIC_EnableIRQ+0x2c>)
 80016aa:	f7ff fb6f 	bl	8000d8c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff26 	bl	8001504 <__NVIC_EnableIRQ>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	0801a544 	.word	0x0801a544

080016c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff feb6 	bl	8001440 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e203      	b.n	8001ae8 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a8b      	ldr	r2, [pc, #556]	; (8001914 <HAL_DMA_Init+0x250>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d04e      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a8a      	ldr	r2, [pc, #552]	; (8001918 <HAL_DMA_Init+0x254>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d049      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a88      	ldr	r2, [pc, #544]	; (800191c <HAL_DMA_Init+0x258>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d044      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a87      	ldr	r2, [pc, #540]	; (8001920 <HAL_DMA_Init+0x25c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d03f      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a85      	ldr	r2, [pc, #532]	; (8001924 <HAL_DMA_Init+0x260>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d03a      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a84      	ldr	r2, [pc, #528]	; (8001928 <HAL_DMA_Init+0x264>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d035      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a82      	ldr	r2, [pc, #520]	; (800192c <HAL_DMA_Init+0x268>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d030      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a81      	ldr	r2, [pc, #516]	; (8001930 <HAL_DMA_Init+0x26c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d02b      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a7f      	ldr	r2, [pc, #508]	; (8001934 <HAL_DMA_Init+0x270>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d026      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7e      	ldr	r2, [pc, #504]	; (8001938 <HAL_DMA_Init+0x274>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d021      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7c      	ldr	r2, [pc, #496]	; (800193c <HAL_DMA_Init+0x278>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01c      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7b      	ldr	r2, [pc, #492]	; (8001940 <HAL_DMA_Init+0x27c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d017      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a79      	ldr	r2, [pc, #484]	; (8001944 <HAL_DMA_Init+0x280>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d012      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a78      	ldr	r2, [pc, #480]	; (8001948 <HAL_DMA_Init+0x284>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00d      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a76      	ldr	r2, [pc, #472]	; (800194c <HAL_DMA_Init+0x288>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d008      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a75      	ldr	r2, [pc, #468]	; (8001950 <HAL_DMA_Init+0x28c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d003      	beq.n	8001788 <HAL_DMA_Init+0xc4>
 8001780:	21b7      	movs	r1, #183	; 0xb7
 8001782:	4874      	ldr	r0, [pc, #464]	; (8001954 <HAL_DMA_Init+0x290>)
 8001784:	f7ff fb02 	bl	8000d8c <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d026      	beq.n	80017de <HAL_DMA_Init+0x11a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001798:	d021      	beq.n	80017de <HAL_DMA_Init+0x11a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017a2:	d01c      	beq.n	80017de <HAL_DMA_Init+0x11a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80017ac:	d017      	beq.n	80017de <HAL_DMA_Init+0x11a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017b6:	d012      	beq.n	80017de <HAL_DMA_Init+0x11a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80017c0:	d00d      	beq.n	80017de <HAL_DMA_Init+0x11a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80017ca:	d008      	beq.n	80017de <HAL_DMA_Init+0x11a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80017d4:	d003      	beq.n	80017de <HAL_DMA_Init+0x11a>
 80017d6:	21b8      	movs	r1, #184	; 0xb8
 80017d8:	485e      	ldr	r0, [pc, #376]	; (8001954 <HAL_DMA_Init+0x290>)
 80017da:	f7ff fad7 	bl	8000d8c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_DMA_Init+0x13a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b40      	cmp	r3, #64	; 0x40
 80017ec:	d007      	beq.n	80017fe <HAL_DMA_Init+0x13a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b80      	cmp	r3, #128	; 0x80
 80017f4:	d003      	beq.n	80017fe <HAL_DMA_Init+0x13a>
 80017f6:	21b9      	movs	r1, #185	; 0xb9
 80017f8:	4856      	ldr	r0, [pc, #344]	; (8001954 <HAL_DMA_Init+0x290>)
 80017fa:	f7ff fac7 	bl	8000d8c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001806:	d007      	beq.n	8001818 <HAL_DMA_Init+0x154>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_DMA_Init+0x154>
 8001810:	21ba      	movs	r1, #186	; 0xba
 8001812:	4850      	ldr	r0, [pc, #320]	; (8001954 <HAL_DMA_Init+0x290>)
 8001814:	f7ff faba 	bl	8000d8c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001820:	d007      	beq.n	8001832 <HAL_DMA_Init+0x16e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_DMA_Init+0x16e>
 800182a:	21bb      	movs	r1, #187	; 0xbb
 800182c:	4849      	ldr	r0, [pc, #292]	; (8001954 <HAL_DMA_Init+0x290>)
 800182e:	f7ff faad 	bl	8000d8c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00d      	beq.n	8001856 <HAL_DMA_Init+0x192>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001842:	d008      	beq.n	8001856 <HAL_DMA_Init+0x192>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800184c:	d003      	beq.n	8001856 <HAL_DMA_Init+0x192>
 800184e:	21bc      	movs	r1, #188	; 0xbc
 8001850:	4840      	ldr	r0, [pc, #256]	; (8001954 <HAL_DMA_Init+0x290>)
 8001852:	f7ff fa9b 	bl	8000d8c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00d      	beq.n	800187a <HAL_DMA_Init+0x1b6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001866:	d008      	beq.n	800187a <HAL_DMA_Init+0x1b6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001870:	d003      	beq.n	800187a <HAL_DMA_Init+0x1b6>
 8001872:	21bd      	movs	r1, #189	; 0xbd
 8001874:	4837      	ldr	r0, [pc, #220]	; (8001954 <HAL_DMA_Init+0x290>)
 8001876:	f7ff fa89 	bl	8000d8c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00c      	beq.n	800189c <HAL_DMA_Init+0x1d8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800188a:	d007      	beq.n	800189c <HAL_DMA_Init+0x1d8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b20      	cmp	r3, #32
 8001892:	d003      	beq.n	800189c <HAL_DMA_Init+0x1d8>
 8001894:	21be      	movs	r1, #190	; 0xbe
 8001896:	482f      	ldr	r0, [pc, #188]	; (8001954 <HAL_DMA_Init+0x290>)
 8001898:	f7ff fa78 	bl	8000d8c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d012      	beq.n	80018ca <HAL_DMA_Init+0x206>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d00d      	beq.n	80018ca <HAL_DMA_Init+0x206>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018b6:	d008      	beq.n	80018ca <HAL_DMA_Init+0x206>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80018c0:	d003      	beq.n	80018ca <HAL_DMA_Init+0x206>
 80018c2:	21bf      	movs	r1, #191	; 0xbf
 80018c4:	4823      	ldr	r0, [pc, #140]	; (8001954 <HAL_DMA_Init+0x290>)
 80018c6:	f7ff fa61 	bl	8000d8c <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <HAL_DMA_Init+0x21e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d003      	beq.n	80018e2 <HAL_DMA_Init+0x21e>
 80018da:	21c0      	movs	r1, #192	; 0xc0
 80018dc:	481d      	ldr	r0, [pc, #116]	; (8001954 <HAL_DMA_Init+0x290>)
 80018de:	f7ff fa55 	bl	8000d8c <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d064      	beq.n	80019b4 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d032      	beq.n	8001958 <HAL_DMA_Init+0x294>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d02e      	beq.n	8001958 <HAL_DMA_Init+0x294>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d02a      	beq.n	8001958 <HAL_DMA_Init+0x294>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	2b03      	cmp	r3, #3
 8001908:	d026      	beq.n	8001958 <HAL_DMA_Init+0x294>
 800190a:	21c5      	movs	r1, #197	; 0xc5
 800190c:	4811      	ldr	r0, [pc, #68]	; (8001954 <HAL_DMA_Init+0x290>)
 800190e:	f7ff fa3d 	bl	8000d8c <assert_failed>
 8001912:	e021      	b.n	8001958 <HAL_DMA_Init+0x294>
 8001914:	40026010 	.word	0x40026010
 8001918:	40026028 	.word	0x40026028
 800191c:	40026040 	.word	0x40026040
 8001920:	40026058 	.word	0x40026058
 8001924:	40026070 	.word	0x40026070
 8001928:	40026088 	.word	0x40026088
 800192c:	400260a0 	.word	0x400260a0
 8001930:	400260b8 	.word	0x400260b8
 8001934:	40026410 	.word	0x40026410
 8001938:	40026428 	.word	0x40026428
 800193c:	40026440 	.word	0x40026440
 8001940:	40026458 	.word	0x40026458
 8001944:	40026470 	.word	0x40026470
 8001948:	40026488 	.word	0x40026488
 800194c:	400264a0 	.word	0x400264a0
 8001950:	400264b8 	.word	0x400264b8
 8001954:	0801a580 	.word	0x0801a580
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	2b00      	cmp	r3, #0
 800195e:	d012      	beq.n	8001986 <HAL_DMA_Init+0x2c2>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001968:	d00d      	beq.n	8001986 <HAL_DMA_Init+0x2c2>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001972:	d008      	beq.n	8001986 <HAL_DMA_Init+0x2c2>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800197c:	d003      	beq.n	8001986 <HAL_DMA_Init+0x2c2>
 800197e:	21c6      	movs	r1, #198	; 0xc6
 8001980:	485b      	ldr	r0, [pc, #364]	; (8001af0 <HAL_DMA_Init+0x42c>)
 8001982:	f7ff fa03 	bl	8000d8c <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	2b00      	cmp	r3, #0
 800198c:	d012      	beq.n	80019b4 <HAL_DMA_Init+0x2f0>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001996:	d00d      	beq.n	80019b4 <HAL_DMA_Init+0x2f0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019a0:	d008      	beq.n	80019b4 <HAL_DMA_Init+0x2f0>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80019aa:	d003      	beq.n	80019b4 <HAL_DMA_Init+0x2f0>
 80019ac:	21c7      	movs	r1, #199	; 0xc7
 80019ae:	4850      	ldr	r0, [pc, #320]	; (8001af0 <HAL_DMA_Init+0x42c>)
 80019b0:	f7ff f9ec 	bl	8000d8c <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d4:	e00f      	b.n	80019f6 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d6:	f7ff fd33 	bl	8001440 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d908      	bls.n	80019f6 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e078      	b.n	8001ae8 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e8      	bne.n	80019d6 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <HAL_DMA_Init+0x430>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f023 0307 	bic.w	r3, r3, #7
 8001a76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d117      	bne.n	8001aba <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00e      	beq.n	8001aba <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fb11 	bl	80020c4 <DMA_CheckFifoParam>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e016      	b.n	8001ae8 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fac8 	bl	8002058 <DMA_CalcBaseAndBitshift>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	223f      	movs	r2, #63	; 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	0801a580 	.word	0x0801a580
 8001af4:	f010803f 	.word	0xf010803f

08001af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_DMA_Start_IT+0x26>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d304      	bcc.n	8001b28 <HAL_DMA_Start_IT+0x30>
 8001b1e:	f240 11cb 	movw	r1, #459	; 0x1cb
 8001b22:	4827      	ldr	r0, [pc, #156]	; (8001bc0 <HAL_DMA_Start_IT+0xc8>)
 8001b24:	f7ff f932 	bl	8000d8c <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Start_IT+0x3e>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e040      	b.n	8001bb8 <HAL_DMA_Start_IT+0xc0>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d12f      	bne.n	8001baa <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 fa4c 	bl	8001ffc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	223f      	movs	r2, #63	; 0x3f
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0216 	orr.w	r2, r2, #22
 8001b7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0208 	orr.w	r2, r2, #8
 8001b96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e005      	b.n	8001bb6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	0801a580 	.word	0x0801a580

08001bc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bd2:	f7ff fc35 	bl	8001440 <HAL_GetTick>
 8001bd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d008      	beq.n	8001bf6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e052      	b.n	8001c9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0216 	bic.w	r2, r2, #22
 8001c04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <HAL_DMA_Abort+0x62>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0208 	bic.w	r2, r2, #8
 8001c34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c46:	e013      	b.n	8001c70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c48:	f7ff fbfa 	bl	8001440 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d90c      	bls.n	8001c70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e015      	b.n	8001c9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1e4      	bne.n	8001c48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	223f      	movs	r2, #63	; 0x3f
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00c      	b.n	8001cdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf4:	4b8e      	ldr	r3, [pc, #568]	; (8001f30 <HAL_DMA_IRQHandler+0x248>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a8e      	ldr	r2, [pc, #568]	; (8001f34 <HAL_DMA_IRQHandler+0x24c>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0a9b      	lsrs	r3, r3, #10
 8001d00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2208      	movs	r2, #8
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01a      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0204 	bic.w	r2, r2, #4
 8001d3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2208      	movs	r2, #8
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2201      	movs	r2, #1
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d76:	2201      	movs	r2, #1
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f043 0202 	orr.w	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2204      	movs	r2, #4
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d012      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	2204      	movs	r2, #4
 8001dae:	409a      	lsls	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	f043 0204 	orr.w	r2, r3, #4
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d043      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03c      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	2210      	movs	r2, #16
 8001de4:	409a      	lsls	r2, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d018      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d108      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d024      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	4798      	blx	r3
 8001e16:	e01f      	b.n	8001e58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01b      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
 8001e28:	e016      	b.n	8001e58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0208 	bic.w	r2, r2, #8
 8001e46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 808f 	beq.w	8001f88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8087 	beq.w	8001f88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2220      	movs	r2, #32
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d136      	bne.n	8001f00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0216 	bic.w	r2, r2, #22
 8001ea0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d103      	bne.n	8001ec2 <HAL_DMA_IRQHandler+0x1da>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0208 	bic.w	r2, r2, #8
 8001ed0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	223f      	movs	r2, #63	; 0x3f
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d07e      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4798      	blx	r3
        }
        return;
 8001efe:	e079      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01d      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d031      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
 8001f2c:	e02c      	b.n	8001f88 <HAL_DMA_IRQHandler+0x2a0>
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000
 8001f34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d023      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
 8001f48:	e01e      	b.n	8001f88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10f      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0210 	bic.w	r2, r2, #16
 8001f66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d032      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d022      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2205      	movs	r2, #5
 8001fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d307      	bcc.n	8001fd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f2      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x2cc>
 8001fce:	e000      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	4798      	blx	r3
 8001ff2:	e000      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ff4:	bf00      	nop
    }
  }
}
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002018:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b40      	cmp	r3, #64	; 0x40
 8002028:	d108      	bne.n	800203c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800203a:	e007      	b.n	800204c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3b10      	subs	r3, #16
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <DMA_CalcBaseAndBitshift+0x64>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002072:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d909      	bls.n	800209a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800208e:	f023 0303 	bic.w	r3, r3, #3
 8002092:	1d1a      	adds	r2, r3, #4
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	659a      	str	r2, [r3, #88]	; 0x58
 8002098:	e007      	b.n	80020aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	aaaaaaab 	.word	0xaaaaaaab
 80020c0:	0801c2b0 	.word	0x0801c2b0

080020c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d11f      	bne.n	800211e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d856      	bhi.n	8002192 <DMA_CheckFifoParam+0xce>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <DMA_CheckFifoParam+0x28>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	080020fd 	.word	0x080020fd
 80020f0:	0800210f 	.word	0x0800210f
 80020f4:	080020fd 	.word	0x080020fd
 80020f8:	08002193 	.word	0x08002193
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d046      	beq.n	8002196 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210c:	e043      	b.n	8002196 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002116:	d140      	bne.n	800219a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800211c:	e03d      	b.n	800219a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002126:	d121      	bne.n	800216c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d837      	bhi.n	800219e <DMA_CheckFifoParam+0xda>
 800212e:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <DMA_CheckFifoParam+0x70>)
 8002130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002134:	08002145 	.word	0x08002145
 8002138:	0800214b 	.word	0x0800214b
 800213c:	08002145 	.word	0x08002145
 8002140:	0800215d 	.word	0x0800215d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      break;
 8002148:	e030      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d025      	beq.n	80021a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215a:	e022      	b.n	80021a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002164:	d11f      	bne.n	80021a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800216a:	e01c      	b.n	80021a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d903      	bls.n	800217a <DMA_CheckFifoParam+0xb6>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d003      	beq.n	8002180 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002178:	e018      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
      break;
 800217e:	e015      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00e      	beq.n	80021aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      break;
 8002190:	e00b      	b.n	80021aa <DMA_CheckFifoParam+0xe6>
      break;
 8002192:	bf00      	nop
 8002194:	e00a      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e008      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e006      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e004      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
 80021a4:	e002      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;   
 80021a6:	bf00      	nop
 80021a8:	e000      	b.n	80021ac <DMA_CheckFifoParam+0xe8>
      break;
 80021aa:	bf00      	nop
    }
  } 
  
  return status; 
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a39      	ldr	r2, [pc, #228]	; (80022bc <HAL_GPIO_Init+0x100>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d023      	beq.n	8002222 <HAL_GPIO_Init+0x66>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a38      	ldr	r2, [pc, #224]	; (80022c0 <HAL_GPIO_Init+0x104>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01f      	beq.n	8002222 <HAL_GPIO_Init+0x66>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a37      	ldr	r2, [pc, #220]	; (80022c4 <HAL_GPIO_Init+0x108>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01b      	beq.n	8002222 <HAL_GPIO_Init+0x66>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <HAL_GPIO_Init+0x10c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d017      	beq.n	8002222 <HAL_GPIO_Init+0x66>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a35      	ldr	r2, [pc, #212]	; (80022cc <HAL_GPIO_Init+0x110>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0x66>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a34      	ldr	r2, [pc, #208]	; (80022d0 <HAL_GPIO_Init+0x114>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00f      	beq.n	8002222 <HAL_GPIO_Init+0x66>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a33      	ldr	r2, [pc, #204]	; (80022d4 <HAL_GPIO_Init+0x118>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00b      	beq.n	8002222 <HAL_GPIO_Init+0x66>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a32      	ldr	r2, [pc, #200]	; (80022d8 <HAL_GPIO_Init+0x11c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x66>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a31      	ldr	r2, [pc, #196]	; (80022dc <HAL_GPIO_Init+0x120>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x66>
 800221a:	21ac      	movs	r1, #172	; 0xac
 800221c:	4830      	ldr	r0, [pc, #192]	; (80022e0 <HAL_GPIO_Init+0x124>)
 800221e:	f7fe fdb5 	bl	8000d8c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_GPIO_Init+0x7c>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x84>
 8002238:	21ad      	movs	r1, #173	; 0xad
 800223a:	4829      	ldr	r0, [pc, #164]	; (80022e0 <HAL_GPIO_Init+0x124>)
 800223c:	f7fe fda6 	bl	8000d8c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d035      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d031      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b11      	cmp	r3, #17
 8002256:	d02d      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d029      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b12      	cmp	r3, #18
 8002266:	d025      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002270:	d020      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800227a:	d01b      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002284:	d016      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800228e:	d011      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002298:	d00c      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80022a2:	d007      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0xf8>
 80022ac:	21ae      	movs	r1, #174	; 0xae
 80022ae:	480c      	ldr	r0, [pc, #48]	; (80022e0 <HAL_GPIO_Init+0x124>)
 80022b0:	f7fe fd6c 	bl	8000d8c <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	e242      	b.n	8002740 <HAL_GPIO_Init+0x584>
 80022ba:	bf00      	nop
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40020c00 	.word	0x40020c00
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40021400 	.word	0x40021400
 80022d4:	40021800 	.word	0x40021800
 80022d8:	40021c00 	.word	0x40021c00
 80022dc:	40022000 	.word	0x40022000
 80022e0:	0801a5b8 	.word	0x0801a5b8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 821c 	bne.w	800273a <HAL_GPIO_Init+0x57e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d005      	beq.n	800231a <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	2b02      	cmp	r3, #2
 8002318:	d144      	bne.n	80023a4 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00f      	beq.n	8002342 <HAL_GPIO_Init+0x186>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d00b      	beq.n	8002342 <HAL_GPIO_Init+0x186>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x186>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x186>
 800233a:	21c0      	movs	r1, #192	; 0xc0
 800233c:	4881      	ldr	r0, [pc, #516]	; (8002544 <HAL_GPIO_Init+0x388>)
 800233e:	f7fe fd25 	bl	8000d8c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 0201 	and.w	r2, r3, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d027      	beq.n	8002400 <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00b      	beq.n	80023d0 <HAL_GPIO_Init+0x214>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d007      	beq.n	80023d0 <HAL_GPIO_Init+0x214>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x214>
 80023c8:	21d1      	movs	r1, #209	; 0xd1
 80023ca:	485e      	ldr	r0, [pc, #376]	; (8002544 <HAL_GPIO_Init+0x388>)
 80023cc:	f7fe fcde 	bl	8000d8c <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b02      	cmp	r3, #2
 800240a:	f040 80c1 	bne.w	8002590 <HAL_GPIO_Init+0x3d4>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8098 	beq.w	8002548 <HAL_GPIO_Init+0x38c>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b09      	cmp	r3, #9
 800241e:	f000 8093 	beq.w	8002548 <HAL_GPIO_Init+0x38c>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 808e 	beq.w	8002548 <HAL_GPIO_Init+0x38c>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8089 	beq.w	8002548 <HAL_GPIO_Init+0x38c>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8084 	beq.w	8002548 <HAL_GPIO_Init+0x38c>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d07f      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d07b      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d077      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d073      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d06f      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d06b      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d067      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d063      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d05f      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d05b      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d057      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d053      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	d04f      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d04b      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d047      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	2b07      	cmp	r3, #7
 80024be:	d043      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b07      	cmp	r3, #7
 80024c6:	d03f      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b07      	cmp	r3, #7
 80024ce:	d03b      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d037      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d033      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d02f      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	d02b      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d027      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b0a      	cmp	r3, #10
 80024fe:	d023      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b0a      	cmp	r3, #10
 8002506:	d01f      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b0b      	cmp	r3, #11
 800250e:	d01b      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d013      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b0d      	cmp	r3, #13
 8002526:	d00f      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d00b      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d007      	beq.n	8002548 <HAL_GPIO_Init+0x38c>
 8002538:	21de      	movs	r1, #222	; 0xde
 800253a:	4802      	ldr	r0, [pc, #8]	; (8002544 <HAL_GPIO_Init+0x388>)
 800253c:	f7fe fc26 	bl	8000d8c <assert_failed>
 8002540:	e002      	b.n	8002548 <HAL_GPIO_Init+0x38c>
 8002542:	bf00      	nop
 8002544:	0801a5b8 	.word	0x0801a5b8
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80b4 	beq.w	800273a <HAL_GPIO_Init+0x57e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_GPIO_Init+0x598>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a5e      	ldr	r2, [pc, #376]	; (8002754 <HAL_GPIO_Init+0x598>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_GPIO_Init+0x598>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ee:	4a5a      	ldr	r2, [pc, #360]	; (8002758 <HAL_GPIO_Init+0x59c>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_GPIO_Init+0x5a0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d02b      	beq.n	8002672 <HAL_GPIO_Init+0x4b6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a50      	ldr	r2, [pc, #320]	; (8002760 <HAL_GPIO_Init+0x5a4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d025      	beq.n	800266e <HAL_GPIO_Init+0x4b2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4f      	ldr	r2, [pc, #316]	; (8002764 <HAL_GPIO_Init+0x5a8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <HAL_GPIO_Init+0x4ae>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4e      	ldr	r2, [pc, #312]	; (8002768 <HAL_GPIO_Init+0x5ac>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x4aa>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4d      	ldr	r2, [pc, #308]	; (800276c <HAL_GPIO_Init+0x5b0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x4a6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_GPIO_Init+0x5b4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x4a2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4b      	ldr	r2, [pc, #300]	; (8002774 <HAL_GPIO_Init+0x5b8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x49e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <HAL_GPIO_Init+0x5bc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x49a>
 8002652:	2307      	movs	r3, #7
 8002654:	e00e      	b.n	8002674 <HAL_GPIO_Init+0x4b8>
 8002656:	2308      	movs	r3, #8
 8002658:	e00c      	b.n	8002674 <HAL_GPIO_Init+0x4b8>
 800265a:	2306      	movs	r3, #6
 800265c:	e00a      	b.n	8002674 <HAL_GPIO_Init+0x4b8>
 800265e:	2305      	movs	r3, #5
 8002660:	e008      	b.n	8002674 <HAL_GPIO_Init+0x4b8>
 8002662:	2304      	movs	r3, #4
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x4b8>
 8002666:	2303      	movs	r3, #3
 8002668:	e004      	b.n	8002674 <HAL_GPIO_Init+0x4b8>
 800266a:	2302      	movs	r3, #2
 800266c:	e002      	b.n	8002674 <HAL_GPIO_Init+0x4b8>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x4b8>
 8002672:	2300      	movs	r3, #0
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f002 0203 	and.w	r2, r2, #3
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	4093      	lsls	r3, r2
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002684:	4934      	ldr	r1, [pc, #208]	; (8002758 <HAL_GPIO_Init+0x59c>)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002692:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_GPIO_Init+0x5c0>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x4fa>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b6:	4a31      	ldr	r2, [pc, #196]	; (800277c <HAL_GPIO_Init+0x5c0>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_GPIO_Init+0x5c0>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x524>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e0:	4a26      	ldr	r2, [pc, #152]	; (800277c <HAL_GPIO_Init+0x5c0>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026e6:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_GPIO_Init+0x5c0>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x54e>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_GPIO_Init+0x5c0>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_GPIO_Init+0x5c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x578>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_GPIO_Init+0x5c0>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	f67f adce 	bls.w	80022e4 <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40013800 	.word	0x40013800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40021400 	.word	0x40021400
 8002774:	40021800 	.word	0x40021800
 8002778:	40021c00 	.word	0x40021c00
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_GPIO_WritePin+0x20>
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <HAL_GPIO_WritePin+0x2a>
 80027a0:	f240 119d 	movw	r1, #413	; 0x19d
 80027a4:	480e      	ldr	r0, [pc, #56]	; (80027e0 <HAL_GPIO_WritePin+0x60>)
 80027a6:	f7fe faf1 	bl	8000d8c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80027aa:	787b      	ldrb	r3, [r7, #1]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_GPIO_WritePin+0x40>
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d004      	beq.n	80027c0 <HAL_GPIO_WritePin+0x40>
 80027b6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80027ba:	4809      	ldr	r0, [pc, #36]	; (80027e0 <HAL_GPIO_WritePin+0x60>)
 80027bc:	f7fe fae6 	bl	8000d8c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	0801a5b8 	.word	0x0801a5b8

080027e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	b08f      	sub	sp, #60	; 0x3c
 80027e8:	af0a      	add	r7, sp, #40	; 0x28
 80027ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e11d      	b.n	8002a32 <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fe:	d008      	beq.n	8002812 <HAL_PCD_Init+0x2e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a8d      	ldr	r2, [pc, #564]	; (8002a3c <HAL_PCD_Init+0x258>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <HAL_PCD_Init+0x2e>
 800280a:	2187      	movs	r1, #135	; 0x87
 800280c:	488c      	ldr	r0, [pc, #560]	; (8002a40 <HAL_PCD_Init+0x25c>)
 800280e:	f7fe fabd 	bl	8000d8c <assert_failed>

  USBx = hpcd->Instance;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f00e fd07 	bl	8011240 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f003 ff8b 	bl	800676c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	687e      	ldr	r6, [r7, #4]
 800285e:	466d      	mov	r5, sp
 8002860:	f106 0410 	add.w	r4, r6, #16
 8002864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002870:	e885 0003 	stmia.w	r5, {r0, r1}
 8002874:	1d33      	adds	r3, r6, #4
 8002876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002878:	6838      	ldr	r0, [r7, #0]
 800287a:	f003 ff05 	bl	8006688 <USB_CoreInit>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0d0      	b.n	8002a32 <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f003 ff79 	bl	800678e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e04a      	b.n	8002938 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	333d      	adds	r3, #61	; 0x3d
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	333c      	adds	r3, #60	; 0x3c
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	b298      	uxth	r0, r3
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3344      	adds	r3, #68	; 0x44
 80028de:	4602      	mov	r2, r0
 80028e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3340      	adds	r3, #64	; 0x40
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3348      	adds	r3, #72	; 0x48
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	334c      	adds	r3, #76	; 0x4c
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3354      	adds	r3, #84	; 0x54
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	3301      	adds	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3af      	bcc.n	80028a2 <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e044      	b.n	80029d2 <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	3301      	adds	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3b5      	bcc.n	8002948 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	687e      	ldr	r6, [r7, #4]
 80029e4:	466d      	mov	r5, sp
 80029e6:	f106 0410 	add.w	r4, r6, #16
 80029ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029fa:	1d33      	adds	r3, r6, #4
 80029fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029fe:	6838      	ldr	r0, [r7, #0]
 8002a00:	f003 ff12 	bl	8006828 <USB_DevInit>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00d      	b.n	8002a32 <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 ff13 	bl	8007856 <USB_DevDisconnect>

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40040000 	.word	0x40040000
 8002a40:	0801a5f4 	.word	0x0801a5f4

08002a44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_PCD_Start+0x1c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e020      	b.n	8002aa2 <HAL_PCD_Start+0x5e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d109      	bne.n	8002a84 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d005      	beq.n	8002a84 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 fe5e 	bl	800674a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f004 febe 	bl	8007814 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	4608      	mov	r0, r1
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4603      	mov	r3, r0
 8002aba:	70fb      	strb	r3, [r7, #3]
 8002abc:	460b      	mov	r3, r1
 8002abe:	803b      	strh	r3, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	da0f      	bge.n	8002af0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 020f 	and.w	r2, r3, #15
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	3338      	adds	r3, #56	; 0x38
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	705a      	strb	r2, [r3, #1]
 8002aee:	e00f      	b.n	8002b10 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 020f 	and.w	r2, r3, #15
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b1c:	883a      	ldrh	r2, [r7, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	78ba      	ldrb	r2, [r7, #2]
 8002b26:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	785b      	ldrb	r3, [r3, #1]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b3a:	78bb      	ldrb	r3, [r7, #2]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d102      	bne.n	8002b46 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_PCD_EP_Open+0xaa>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e00e      	b.n	8002b72 <HAL_PCD_EP_Open+0xc8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 f841 	bl	8006bea <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b70:	7afb      	ldrb	r3, [r7, #11]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da0f      	bge.n	8002bae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	3338      	adds	r3, #56	; 0x38
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	705a      	strb	r2, [r3, #1]
 8002bac:	e00f      	b.n	8002bce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	f003 020f 	and.w	r2, r3, #15
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_PCD_EP_Close+0x6e>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e00e      	b.n	8002c06 <HAL_PCD_EP_Close+0x8c>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 f87e 	bl	8006cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c1e:	7afb      	ldrb	r3, [r7, #11]
 8002c20:	f003 020f 	and.w	r2, r3, #15
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	3304      	adds	r3, #4
 8002c36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2200      	movs	r2, #0
 8002c48:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d102      	bne.n	8002c6a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	6979      	ldr	r1, [r7, #20]
 8002c82:	f004 fb5d 	bl	8007340 <USB_EP0StartXfer>
 8002c86:	e008      	b.n	8002c9a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	6979      	ldr	r1, [r7, #20]
 8002c96:	f004 f90b 	bl	8006eb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce4:	7afb      	ldrb	r3, [r7, #11]
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	3338      	adds	r3, #56	; 0x38
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2201      	movs	r2, #1
 8002d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	6979      	ldr	r1, [r7, #20]
 8002d46:	f004 fafb 	bl	8007340 <USB_EP0StartXfer>
 8002d4a:	e008      	b.n	8002d5e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	6979      	ldr	r1, [r7, #20]
 8002d5a:	f004 f8a9 	bl	8006eb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 020f 	and.w	r2, r3, #15
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d901      	bls.n	8002d86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e050      	b.n	8002e28 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	da0f      	bge.n	8002dae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 020f 	and.w	r2, r3, #15
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	3338      	adds	r3, #56	; 0x38
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	3304      	adds	r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	705a      	strb	r2, [r3, #1]
 8002dac:	e00d      	b.n	8002dca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_PCD_EP_SetStall+0x82>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e01e      	b.n	8002e28 <HAL_PCD_EP_SetStall+0xc0>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68f9      	ldr	r1, [r7, #12]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f004 fc37 	bl	800766c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	b2d9      	uxtb	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f004 fd4b 	bl	80078b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 020f 	and.w	r2, r3, #15
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d901      	bls.n	8002e4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e042      	b.n	8002ed4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da0f      	bge.n	8002e76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	3338      	adds	r3, #56	; 0x38
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	705a      	strb	r2, [r3, #1]
 8002e74:	e00f      	b.n	8002e96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 020f 	and.w	r2, r3, #15
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_PCD_EP_ClrStall+0x86>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e00e      	b.n	8002ed4 <HAL_PCD_EP_ClrStall+0xa4>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68f9      	ldr	r1, [r7, #12]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f004 fc3f 	bl	8007748 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_PCD_EP_Flush+0x1a>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e01b      	b.n	8002f2e <HAL_PCD_EP_Flush+0x52>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	da09      	bge.n	8002f1a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f003 fdec 	bl	8006af0 <USB_FlushTxFifo>
 8002f18:	e004      	b.n	8002f24 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f003 fe1a 	bl	8006b58 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	70fb      	strb	r3, [r7, #3]
 8002f42:	4613      	mov	r3, r2
 8002f44:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f54:	883b      	ldrh	r3, [r7, #0]
 8002f56:	0419      	lsls	r1, r3, #16
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
 8002f62:	e028      	b.n	8002fb6 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	e00d      	b.n	8002f94 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	3340      	adds	r3, #64	; 0x40
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	3301      	adds	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3ec      	bcc.n	8002f78 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f9e:	883b      	ldrh	r3, [r7, #0]
 8002fa0:	0418      	lsls	r0, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	4302      	orrs	r2, r0
 8002fae:	3340      	adds	r3, #64	; 0x40
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e314      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	d903      	bls.n	800300a <HAL_RCC_OscConfig+0x22>
 8003002:	21e6      	movs	r1, #230	; 0xe6
 8003004:	4897      	ldr	r0, [pc, #604]	; (8003264 <HAL_RCC_OscConfig+0x27c>)
 8003006:	f7fd fec1 	bl	8000d8c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8088 	beq.w	8003128 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <HAL_RCC_OscConfig+0x54>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003028:	d008      	beq.n	800303c <HAL_RCC_OscConfig+0x54>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003032:	d003      	beq.n	800303c <HAL_RCC_OscConfig+0x54>
 8003034:	21eb      	movs	r1, #235	; 0xeb
 8003036:	488b      	ldr	r0, [pc, #556]	; (8003264 <HAL_RCC_OscConfig+0x27c>)
 8003038:	f7fd fea8 	bl	8000d8c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303c:	4b8a      	ldr	r3, [pc, #552]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b04      	cmp	r3, #4
 8003046:	d00c      	beq.n	8003062 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003048:	4b87      	ldr	r3, [pc, #540]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003050:	2b08      	cmp	r3, #8
 8003052:	d112      	bne.n	800307a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003054:	4b84      	ldr	r3, [pc, #528]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003060:	d10b      	bne.n	800307a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003062:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d05b      	beq.n	8003126 <HAL_RCC_OscConfig+0x13e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d157      	bne.n	8003126 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e2d4      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0xaa>
 8003084:	4b78      	ldr	r3, [pc, #480]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a77      	ldr	r2, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800308a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e01d      	b.n	80030ce <HAL_RCC_OscConfig+0xe6>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309a:	d10c      	bne.n	80030b6 <HAL_RCC_OscConfig+0xce>
 800309c:	4b72      	ldr	r3, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a71      	ldr	r2, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6e      	ldr	r2, [pc, #440]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e00b      	b.n	80030ce <HAL_RCC_OscConfig+0xe6>
 80030b6:	4b6c      	ldr	r3, [pc, #432]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6b      	ldr	r2, [pc, #428]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b69      	ldr	r3, [pc, #420]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a68      	ldr	r2, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d013      	beq.n	80030fe <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fe f9b3 	bl	8001440 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030de:	f7fe f9af 	bl	8001440 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	; 0x64
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e299      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f0:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0xf6>
 80030fc:	e014      	b.n	8003128 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe f99f 	bl	8001440 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003106:	f7fe f99b 	bl	8001440 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b64      	cmp	r3, #100	; 0x64
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e285      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x11e>
 8003124:	e000      	b.n	8003128 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003126:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d079      	beq.n	8003228 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_OscConfig+0x166>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d004      	beq.n	800314e <HAL_RCC_OscConfig+0x166>
 8003144:	f240 111d 	movw	r1, #285	; 0x11d
 8003148:	4846      	ldr	r0, [pc, #280]	; (8003264 <HAL_RCC_OscConfig+0x27c>)
 800314a:	f7fd fe1f 	bl	8000d8c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b1f      	cmp	r3, #31
 8003154:	d904      	bls.n	8003160 <HAL_RCC_OscConfig+0x178>
 8003156:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800315a:	4842      	ldr	r0, [pc, #264]	; (8003264 <HAL_RCC_OscConfig+0x27c>)
 800315c:	f7fd fe16 	bl	8000d8c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003160:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316c:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003174:	2b08      	cmp	r3, #8
 8003176:	d11c      	bne.n	80031b2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003178:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d116      	bne.n	80031b2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003184:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_OscConfig+0x1b4>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e243      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b32      	ldr	r3, [pc, #200]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	492f      	ldr	r1, [pc, #188]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b0:	e03a      	b.n	8003228 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d020      	beq.n	80031fc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ba:	4b2c      	ldr	r3, [pc, #176]	; (800326c <HAL_RCC_OscConfig+0x284>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe f93e 	bl	8001440 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe f93a 	bl	8001440 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e224      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	491c      	ldr	r1, [pc, #112]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
 80031fa:	e015      	b.n	8003228 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x284>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7fe f91d 	bl	8001440 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320a:	f7fe f919 	bl	8001440 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e203      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_OscConfig+0x280>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d045      	beq.n	80032c0 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_OscConfig+0x266>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d004      	beq.n	800324e <HAL_RCC_OscConfig+0x266>
 8003244:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003248:	4806      	ldr	r0, [pc, #24]	; (8003264 <HAL_RCC_OscConfig+0x27c>)
 800324a:	f7fd fd9f 	bl	8000d8c <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01e      	beq.n	8003294 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_OscConfig+0x288>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325c:	f7fe f8f0 	bl	8001440 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	e010      	b.n	8003286 <HAL_RCC_OscConfig+0x29e>
 8003264:	0801a62c 	.word	0x0801a62c
 8003268:	40023800 	.word	0x40023800
 800326c:	42470000 	.word	0x42470000
 8003270:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003274:	f7fe f8e4 	bl	8001440 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1ce      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	4b5e      	ldr	r3, [pc, #376]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 8003288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x28c>
 8003292:	e015      	b.n	80032c0 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003294:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <HAL_RCC_OscConfig+0x41c>)
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329a:	f7fe f8d1 	bl	8001440 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a2:	f7fe f8cd 	bl	8001440 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1b7      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	4b52      	ldr	r3, [pc, #328]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80b0 	beq.w	800342e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00c      	beq.n	80032f4 <HAL_RCC_OscConfig+0x30c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d008      	beq.n	80032f4 <HAL_RCC_OscConfig+0x30c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d004      	beq.n	80032f4 <HAL_RCC_OscConfig+0x30c>
 80032ea:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80032ee:	4846      	ldr	r0, [pc, #280]	; (8003408 <HAL_RCC_OscConfig+0x420>)
 80032f0:	f7fd fd4c 	bl	8000d8c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f4:	4b42      	ldr	r3, [pc, #264]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10f      	bne.n	8003320 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	4a3d      	ldr	r2, [pc, #244]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6413      	str	r3, [r2, #64]	; 0x40
 8003310:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331c:	2301      	movs	r3, #1
 800331e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	4b3a      	ldr	r3, [pc, #232]	; (800340c <HAL_RCC_OscConfig+0x424>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d118      	bne.n	800335e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332c:	4b37      	ldr	r3, [pc, #220]	; (800340c <HAL_RCC_OscConfig+0x424>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a36      	ldr	r2, [pc, #216]	; (800340c <HAL_RCC_OscConfig+0x424>)
 8003332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003338:	f7fe f882 	bl	8001440 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003340:	f7fe f87e 	bl	8001440 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e168      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCC_OscConfig+0x424>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d106      	bne.n	8003374 <HAL_RCC_OscConfig+0x38c>
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a25      	ldr	r2, [pc, #148]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
 8003372:	e01c      	b.n	80033ae <HAL_RCC_OscConfig+0x3c6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d10c      	bne.n	8003396 <HAL_RCC_OscConfig+0x3ae>
 800337c:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
 8003394:	e00b      	b.n	80033ae <HAL_RCC_OscConfig+0x3c6>
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a16      	ldr	r2, [pc, #88]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d015      	beq.n	80033e2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b6:	f7fe f843 	bl	8001440 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe f83f 	bl	8001440 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e127      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_RCC_OscConfig+0x418>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ee      	beq.n	80033be <HAL_RCC_OscConfig+0x3d6>
 80033e0:	e01c      	b.n	800341c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe f82d 	bl	8001440 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e012      	b.n	8003410 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe f829 	bl	8001440 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d909      	bls.n	8003410 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e111      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
 8003400:	40023800 	.word	0x40023800
 8003404:	42470e80 	.word	0x42470e80
 8003408:	0801a62c 	.word	0x0801a62c
 800340c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003410:	4b86      	ldr	r3, [pc, #536]	; (800362c <HAL_RCC_OscConfig+0x644>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e6      	bne.n	80033ea <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d105      	bne.n	800342e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003422:	4b82      	ldr	r3, [pc, #520]	; (800362c <HAL_RCC_OscConfig+0x644>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a81      	ldr	r2, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x644>)
 8003428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_RCC_OscConfig+0x468>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d008      	beq.n	8003450 <HAL_RCC_OscConfig+0x468>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d004      	beq.n	8003450 <HAL_RCC_OscConfig+0x468>
 8003446:	f240 11cd 	movw	r1, #461	; 0x1cd
 800344a:	4879      	ldr	r0, [pc, #484]	; (8003630 <HAL_RCC_OscConfig+0x648>)
 800344c:	f7fd fc9e 	bl	8000d8c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80e4 	beq.w	8003622 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800345a:	4b74      	ldr	r3, [pc, #464]	; (800362c <HAL_RCC_OscConfig+0x644>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b08      	cmp	r3, #8
 8003464:	f000 80a5 	beq.w	80035b2 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b02      	cmp	r3, #2
 800346e:	f040 8089 	bne.w	8003584 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <HAL_RCC_OscConfig+0x4a6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003482:	d004      	beq.n	800348e <HAL_RCC_OscConfig+0x4a6>
 8003484:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8003488:	4869      	ldr	r0, [pc, #420]	; (8003630 <HAL_RCC_OscConfig+0x648>)
 800348a:	f7fd fc7f 	bl	8000d8c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	2b3f      	cmp	r3, #63	; 0x3f
 8003494:	d904      	bls.n	80034a0 <HAL_RCC_OscConfig+0x4b8>
 8003496:	f240 11d7 	movw	r1, #471	; 0x1d7
 800349a:	4865      	ldr	r0, [pc, #404]	; (8003630 <HAL_RCC_OscConfig+0x648>)
 800349c:	f7fd fc76 	bl	8000d8c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2b31      	cmp	r3, #49	; 0x31
 80034a6:	d904      	bls.n	80034b2 <HAL_RCC_OscConfig+0x4ca>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80034b0:	d904      	bls.n	80034bc <HAL_RCC_OscConfig+0x4d4>
 80034b2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80034b6:	485e      	ldr	r0, [pc, #376]	; (8003630 <HAL_RCC_OscConfig+0x648>)
 80034b8:	f7fd fc68 	bl	8000d8c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_OscConfig+0x4fe>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d00c      	beq.n	80034e6 <HAL_RCC_OscConfig+0x4fe>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	2b06      	cmp	r3, #6
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_OscConfig+0x4fe>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d004      	beq.n	80034e6 <HAL_RCC_OscConfig+0x4fe>
 80034dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80034e0:	4853      	ldr	r0, [pc, #332]	; (8003630 <HAL_RCC_OscConfig+0x648>)
 80034e2:	f7fd fc53 	bl	8000d8c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d903      	bls.n	80034f6 <HAL_RCC_OscConfig+0x50e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	d904      	bls.n	8003500 <HAL_RCC_OscConfig+0x518>
 80034f6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80034fa:	484d      	ldr	r0, [pc, #308]	; (8003630 <HAL_RCC_OscConfig+0x648>)
 80034fc:	f7fd fc46 	bl	8000d8c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003500:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <HAL_RCC_OscConfig+0x64c>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003506:	f7fd ff9b 	bl	8001440 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350e:	f7fd ff97 	bl	8001440 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e081      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003520:	4b42      	ldr	r3, [pc, #264]	; (800362c <HAL_RCC_OscConfig+0x644>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	019b      	lsls	r3, r3, #6
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	3b01      	subs	r3, #1
 8003546:	041b      	lsls	r3, r3, #16
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	061b      	lsls	r3, r3, #24
 8003550:	4936      	ldr	r1, [pc, #216]	; (800362c <HAL_RCC_OscConfig+0x644>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_RCC_OscConfig+0x64c>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fd ff70 	bl	8001440 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003564:	f7fd ff6c 	bl	8001440 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e056      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	4b2d      	ldr	r3, [pc, #180]	; (800362c <HAL_RCC_OscConfig+0x644>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x57c>
 8003582:	e04e      	b.n	8003622 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCC_OscConfig+0x64c>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fd ff59 	bl	8001440 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fd ff55 	bl	8001440 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e03f      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <HAL_RCC_OscConfig+0x644>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x5aa>
 80035b0:	e037      	b.n	8003622 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e032      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x644>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d028      	beq.n	800361e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d121      	bne.n	800361e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d11a      	bne.n	800361e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035ee:	4013      	ands	r3, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d111      	bne.n	800361e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d107      	bne.n	800361e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	0801a62c 	.word	0x0801a62c
 8003634:	42470060 	.word	0x42470060

08003638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e174      	b.n	8003936 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_RCC_ClockConfig+0x24>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b0f      	cmp	r3, #15
 800365a:	d904      	bls.n	8003666 <HAL_RCC_ClockConfig+0x2e>
 800365c:	f240 215a 	movw	r1, #602	; 0x25a
 8003660:	487b      	ldr	r0, [pc, #492]	; (8003850 <HAL_RCC_ClockConfig+0x218>)
 8003662:	f7fd fb93 	bl	8000d8c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d019      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d016      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d013      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d010      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d00d      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b05      	cmp	r3, #5
 8003688:	d00a      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d007      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b07      	cmp	r3, #7
 8003694:	d004      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
 8003696:	f240 215b 	movw	r1, #603	; 0x25b
 800369a:	486d      	ldr	r0, [pc, #436]	; (8003850 <HAL_RCC_ClockConfig+0x218>)
 800369c:	f7fd fb76 	bl	8000d8c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <HAL_RCC_ClockConfig+0x21c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d90c      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b69      	ldr	r3, [pc, #420]	; (8003854 <HAL_RCC_ClockConfig+0x21c>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b67      	ldr	r3, [pc, #412]	; (8003854 <HAL_RCC_ClockConfig+0x21c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e136      	b.n	8003936 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d049      	beq.n	8003768 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e0:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 80036e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f8:	4b57      	ldr	r3, [pc, #348]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a56      	ldr	r2, [pc, #344]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 80036fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d024      	beq.n	8003756 <HAL_RCC_ClockConfig+0x11e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	d020      	beq.n	8003756 <HAL_RCC_ClockConfig+0x11e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b90      	cmp	r3, #144	; 0x90
 800371a:	d01c      	beq.n	8003756 <HAL_RCC_ClockConfig+0x11e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2ba0      	cmp	r3, #160	; 0xa0
 8003722:	d018      	beq.n	8003756 <HAL_RCC_ClockConfig+0x11e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2bb0      	cmp	r3, #176	; 0xb0
 800372a:	d014      	beq.n	8003756 <HAL_RCC_ClockConfig+0x11e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2bc0      	cmp	r3, #192	; 0xc0
 8003732:	d010      	beq.n	8003756 <HAL_RCC_ClockConfig+0x11e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2bd0      	cmp	r3, #208	; 0xd0
 800373a:	d00c      	beq.n	8003756 <HAL_RCC_ClockConfig+0x11e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2be0      	cmp	r3, #224	; 0xe0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_ClockConfig+0x11e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2bf0      	cmp	r3, #240	; 0xf0
 800374a:	d004      	beq.n	8003756 <HAL_RCC_ClockConfig+0x11e>
 800374c:	f240 217e 	movw	r1, #638	; 0x27e
 8003750:	483f      	ldr	r0, [pc, #252]	; (8003850 <HAL_RCC_ClockConfig+0x218>)
 8003752:	f7fd fb1b 	bl	8000d8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003756:	4b40      	ldr	r3, [pc, #256]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	493d      	ldr	r1, [pc, #244]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d059      	beq.n	8003828 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d010      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d00c      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d004      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
 8003794:	f240 2185 	movw	r1, #645	; 0x285
 8003798:	482d      	ldr	r0, [pc, #180]	; (8003850 <HAL_RCC_ClockConfig+0x218>)
 800379a:	f7fd faf7 	bl	8000d8c <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d119      	bne.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e0bf      	b.n	8003936 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0af      	b.n	8003936 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0a7      	b.n	8003936 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4919      	ldr	r1, [pc, #100]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f8:	f7fd fe22 	bl	8001440 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7fd fe1e 	bl	8001440 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e08f      	b.n	8003936 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <HAL_RCC_ClockConfig+0x220>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 020c 	and.w	r2, r3, #12
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	429a      	cmp	r2, r3
 8003826:	d1eb      	bne.n	8003800 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <HAL_RCC_ClockConfig+0x21c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d212      	bcs.n	800385c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <HAL_RCC_ClockConfig+0x21c>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_ClockConfig+0x21c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d007      	beq.n	800385c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e072      	b.n	8003936 <HAL_RCC_ClockConfig+0x2fe>
 8003850:	0801a62c 	.word	0x0801a62c
 8003854:	40023c00 	.word	0x40023c00
 8003858:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d025      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d018      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x26a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003878:	d013      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x26a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003882:	d00e      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x26a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x26a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003896:	d004      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x26a>
 8003898:	f240 21c3 	movw	r1, #707	; 0x2c3
 800389c:	4828      	ldr	r0, [pc, #160]	; (8003940 <HAL_RCC_ClockConfig+0x308>)
 800389e:	f7fd fa75 	bl	8000d8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a2:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCC_ClockConfig+0x30c>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	4925      	ldr	r1, [pc, #148]	; (8003944 <HAL_RCC_ClockConfig+0x30c>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d026      	beq.n	800390e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d018      	beq.n	80038fa <HAL_RCC_ClockConfig+0x2c2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d0:	d013      	beq.n	80038fa <HAL_RCC_ClockConfig+0x2c2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038da:	d00e      	beq.n	80038fa <HAL_RCC_ClockConfig+0x2c2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x2c2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80038ee:	d004      	beq.n	80038fa <HAL_RCC_ClockConfig+0x2c2>
 80038f0:	f240 21ca 	movw	r1, #714	; 0x2ca
 80038f4:	4812      	ldr	r0, [pc, #72]	; (8003940 <HAL_RCC_ClockConfig+0x308>)
 80038f6:	f7fd fa49 	bl	8000d8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_RCC_ClockConfig+0x30c>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	490e      	ldr	r1, [pc, #56]	; (8003944 <HAL_RCC_ClockConfig+0x30c>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800390e:	f000 f821 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8003912:	4602      	mov	r2, r0
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_ClockConfig+0x30c>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	490a      	ldr	r1, [pc, #40]	; (8003948 <HAL_RCC_ClockConfig+0x310>)
 8003920:	5ccb      	ldrb	r3, [r1, r3]
 8003922:	fa22 f303 	lsr.w	r3, r2, r3
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x314>)
 8003928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x318>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fb4e 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	0801a62c 	.word	0x0801a62c
 8003944:	40023800 	.word	0x40023800
 8003948:	0801c298 	.word	0x0801c298
 800394c:	20000000 	.word	0x20000000
 8003950:	20000004 	.word	0x20000004

08003954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003958:	b094      	sub	sp, #80	; 0x50
 800395a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
 8003960:	2300      	movs	r3, #0
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003964:	2300      	movs	r3, #0
 8003966:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800396c:	4b79      	ldr	r3, [pc, #484]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b08      	cmp	r3, #8
 8003976:	d00d      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x40>
 8003978:	2b08      	cmp	r3, #8
 800397a:	f200 80e1 	bhi.w	8003b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x34>
 8003982:	2b04      	cmp	r3, #4
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x3a>
 8003986:	e0db      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4b73      	ldr	r3, [pc, #460]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800398a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800398c:	e0db      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800398e:	4b73      	ldr	r3, [pc, #460]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8003990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003992:	e0d8      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003994:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800399e:	4b6d      	ldr	r3, [pc, #436]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d063      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039aa:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	2200      	movs	r2, #0
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
 80039be:	2300      	movs	r3, #0
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
 80039c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039c6:	4622      	mov	r2, r4
 80039c8:	462b      	mov	r3, r5
 80039ca:	f04f 0000 	mov.w	r0, #0
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	0159      	lsls	r1, r3, #5
 80039d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d8:	0150      	lsls	r0, r2, #5
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4621      	mov	r1, r4
 80039e0:	1a51      	subs	r1, r2, r1
 80039e2:	6139      	str	r1, [r7, #16]
 80039e4:	4629      	mov	r1, r5
 80039e6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f8:	4659      	mov	r1, fp
 80039fa:	018b      	lsls	r3, r1, #6
 80039fc:	4651      	mov	r1, sl
 80039fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a02:	4651      	mov	r1, sl
 8003a04:	018a      	lsls	r2, r1, #6
 8003a06:	4651      	mov	r1, sl
 8003a08:	ebb2 0801 	subs.w	r8, r2, r1
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a26:	4690      	mov	r8, r2
 8003a28:	4699      	mov	r9, r3
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	eb18 0303 	adds.w	r3, r8, r3
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	462b      	mov	r3, r5
 8003a34:	eb49 0303 	adc.w	r3, r9, r3
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a46:	4629      	mov	r1, r5
 8003a48:	024b      	lsls	r3, r1, #9
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a50:	4621      	mov	r1, r4
 8003a52:	024a      	lsls	r2, r1, #9
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a64:	f7fc fc1c 	bl	80002a0 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	e058      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a72:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a82:	623b      	str	r3, [r7, #32]
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
 8003a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	f04f 0000 	mov.w	r0, #0
 8003a94:	f04f 0100 	mov.w	r1, #0
 8003a98:	0159      	lsls	r1, r3, #5
 8003a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a9e:	0150      	lsls	r0, r2, #5
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aaa:	4649      	mov	r1, r9
 8003aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	00eb      	lsls	r3, r5, #3
 8003ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ada:	00e2      	lsls	r2, r4, #3
 8003adc:	4614      	mov	r4, r2
 8003ade:	461d      	mov	r5, r3
 8003ae0:	4643      	mov	r3, r8
 8003ae2:	18e3      	adds	r3, r4, r3
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	eb45 0303 	adc.w	r3, r5, r3
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afa:	4629      	mov	r1, r5
 8003afc:	028b      	lsls	r3, r1, #10
 8003afe:	4621      	mov	r1, r4
 8003b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b04:	4621      	mov	r1, r4
 8003b06:	028a      	lsls	r2, r1, #10
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	61fa      	str	r2, [r7, #28]
 8003b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b18:	f7fc fbc2 	bl	80002a0 <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4613      	mov	r3, r2
 8003b22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b3e:	e002      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3750      	adds	r7, #80	; 0x50
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	007a1200 	.word	0x007a1200

08003b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000000 	.word	0x20000000

08003b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b7c:	f7ff fff0 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0a9b      	lsrs	r3, r3, #10
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4903      	ldr	r1, [pc, #12]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	0801c2a8 	.word	0x0801c2a8

08003ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ba4:	f7ff ffdc 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0b5b      	lsrs	r3, r3, #13
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4903      	ldr	r1, [pc, #12]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	0801c2a8 	.word	0x0801c2a8

08003bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	220f      	movs	r2, #15
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_RCC_GetClockConfig+0x5c>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0203 	and.w	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <HAL_RCC_GetClockConfig+0x5c>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_RCC_GetClockConfig+0x5c>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCC_GetClockConfig+0x5c>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	08db      	lsrs	r3, r3, #3
 8003c02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <HAL_RCC_GetClockConfig+0x60>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0207 	and.w	r2, r3, #7
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40023c00 	.word	0x40023c00

08003c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e17e      	b.n	8003f3c <HAL_SPI_Init+0x310>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a70      	ldr	r2, [pc, #448]	; (8003e04 <HAL_SPI_Init+0x1d8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_SPI_Init+0x3a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a6e      	ldr	r2, [pc, #440]	; (8003e08 <HAL_SPI_Init+0x1dc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_SPI_Init+0x3a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6d      	ldr	r2, [pc, #436]	; (8003e0c <HAL_SPI_Init+0x1e0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_SPI_Init+0x3a>
 8003c5c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c60:	486b      	ldr	r0, [pc, #428]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003c62:	f7fd f893 	bl	8000d8c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d009      	beq.n	8003c82 <HAL_SPI_Init+0x56>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c76:	d004      	beq.n	8003c82 <HAL_SPI_Init+0x56>
 8003c78:	f240 1141 	movw	r1, #321	; 0x141
 8003c7c:	4864      	ldr	r0, [pc, #400]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003c7e:	f7fd f885 	bl	8000d8c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <HAL_SPI_Init+0x7c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c92:	d009      	beq.n	8003ca8 <HAL_SPI_Init+0x7c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9c:	d004      	beq.n	8003ca8 <HAL_SPI_Init+0x7c>
 8003c9e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003ca2:	485b      	ldr	r0, [pc, #364]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003ca4:	f7fd f872 	bl	8000d8c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb0:	d008      	beq.n	8003cc4 <HAL_SPI_Init+0x98>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <HAL_SPI_Init+0x98>
 8003cba:	f240 1143 	movw	r1, #323	; 0x143
 8003cbe:	4854      	ldr	r0, [pc, #336]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003cc0:	f7fd f864 	bl	8000d8c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ccc:	d00d      	beq.n	8003cea <HAL_SPI_Init+0xbe>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_SPI_Init+0xbe>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cde:	d004      	beq.n	8003cea <HAL_SPI_Init+0xbe>
 8003ce0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003ce4:	484a      	ldr	r0, [pc, #296]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003ce6:	f7fd f851 	bl	8000d8c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d020      	beq.n	8003d34 <HAL_SPI_Init+0x108>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d01c      	beq.n	8003d34 <HAL_SPI_Init+0x108>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d018      	beq.n	8003d34 <HAL_SPI_Init+0x108>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	2b18      	cmp	r3, #24
 8003d08:	d014      	beq.n	8003d34 <HAL_SPI_Init+0x108>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d010      	beq.n	8003d34 <HAL_SPI_Init+0x108>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	2b28      	cmp	r3, #40	; 0x28
 8003d18:	d00c      	beq.n	8003d34 <HAL_SPI_Init+0x108>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2b30      	cmp	r3, #48	; 0x30
 8003d20:	d008      	beq.n	8003d34 <HAL_SPI_Init+0x108>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	2b38      	cmp	r3, #56	; 0x38
 8003d28:	d004      	beq.n	8003d34 <HAL_SPI_Init+0x108>
 8003d2a:	f240 1145 	movw	r1, #325	; 0x145
 8003d2e:	4838      	ldr	r0, [pc, #224]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003d30:	f7fd f82c 	bl	8000d8c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_SPI_Init+0x122>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	2b80      	cmp	r3, #128	; 0x80
 8003d42:	d004      	beq.n	8003d4e <HAL_SPI_Init+0x122>
 8003d44:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003d48:	4831      	ldr	r0, [pc, #196]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003d4a:	f7fd f81f 	bl	8000d8c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_SPI_Init+0x13c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d004      	beq.n	8003d68 <HAL_SPI_Init+0x13c>
 8003d5e:	f240 1147 	movw	r1, #327	; 0x147
 8003d62:	482b      	ldr	r0, [pc, #172]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003d64:	f7fd f812 	bl	8000d8c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d151      	bne.n	8003e14 <HAL_SPI_Init+0x1e8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_SPI_Init+0x15e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d004      	beq.n	8003d8a <HAL_SPI_Init+0x15e>
 8003d80:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003d84:	4822      	ldr	r0, [pc, #136]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003d86:	f7fd f801 	bl	8000d8c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_SPI_Init+0x178>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d004      	beq.n	8003da4 <HAL_SPI_Init+0x178>
 8003d9a:	f240 114b 	movw	r1, #331	; 0x14b
 8003d9e:	481c      	ldr	r0, [pc, #112]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003da0:	f7fc fff4 	bl	8000d8c <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dac:	d125      	bne.n	8003dfa <HAL_SPI_Init+0x1ce>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d059      	beq.n	8003e6a <HAL_SPI_Init+0x23e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d055      	beq.n	8003e6a <HAL_SPI_Init+0x23e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d051      	beq.n	8003e6a <HAL_SPI_Init+0x23e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	2b18      	cmp	r3, #24
 8003dcc:	d04d      	beq.n	8003e6a <HAL_SPI_Init+0x23e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d049      	beq.n	8003e6a <HAL_SPI_Init+0x23e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	2b28      	cmp	r3, #40	; 0x28
 8003ddc:	d045      	beq.n	8003e6a <HAL_SPI_Init+0x23e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	2b30      	cmp	r3, #48	; 0x30
 8003de4:	d041      	beq.n	8003e6a <HAL_SPI_Init+0x23e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	2b38      	cmp	r3, #56	; 0x38
 8003dec:	d03d      	beq.n	8003e6a <HAL_SPI_Init+0x23e>
 8003dee:	f240 114f 	movw	r1, #335	; 0x14f
 8003df2:	4807      	ldr	r0, [pc, #28]	; (8003e10 <HAL_SPI_Init+0x1e4>)
 8003df4:	f7fc ffca 	bl	8000d8c <assert_failed>
 8003df8:	e037      	b.n	8003e6a <HAL_SPI_Init+0x23e>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	61da      	str	r2, [r3, #28]
 8003e00:	e033      	b.n	8003e6a <HAL_SPI_Init+0x23e>
 8003e02:	bf00      	nop
 8003e04:	40013000 	.word	0x40013000
 8003e08:	40003800 	.word	0x40003800
 8003e0c:	40003c00 	.word	0x40003c00
 8003e10:	0801a664 	.word	0x0801a664
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_SPI_Init+0x232>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d01c      	beq.n	8003e5e <HAL_SPI_Init+0x232>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d018      	beq.n	8003e5e <HAL_SPI_Init+0x232>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b18      	cmp	r3, #24
 8003e32:	d014      	beq.n	8003e5e <HAL_SPI_Init+0x232>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d010      	beq.n	8003e5e <HAL_SPI_Init+0x232>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	2b28      	cmp	r3, #40	; 0x28
 8003e42:	d00c      	beq.n	8003e5e <HAL_SPI_Init+0x232>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b30      	cmp	r3, #48	; 0x30
 8003e4a:	d008      	beq.n	8003e5e <HAL_SPI_Init+0x232>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	2b38      	cmp	r3, #56	; 0x38
 8003e52:	d004      	beq.n	8003e5e <HAL_SPI_Init+0x232>
 8003e54:	f240 1159 	movw	r1, #345	; 0x159
 8003e58:	483a      	ldr	r0, [pc, #232]	; (8003f44 <HAL_SPI_Init+0x318>)
 8003e5a:	f7fc ff97 	bl	8000d8c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_SPI_Init+0x25e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fc ffc3 	bl	8000e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	ea42 0103 	orr.w	r1, r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	f003 0104 	and.w	r1, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f003 0210 	and.w	r2, r3, #16
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	0801a664 	.word	0x0801a664

08003f48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	; 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f56:	2301      	movs	r3, #1
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0x2a>
 8003f68:	f240 417c 	movw	r1, #1148	; 0x47c
 8003f6c:	4884      	ldr	r0, [pc, #528]	; (8004180 <HAL_SPI_TransmitReceive+0x238>)
 8003f6e:	f7fc ff0d 	bl	8000d8c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x38>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e18d      	b.n	800429c <HAL_SPI_TransmitReceive+0x354>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f88:	f7fd fa5a 	bl	8001440 <HAL_GetTick>
 8003f8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d00f      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x82>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb0:	d107      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x7a>
 8003fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d003      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fc8:	e15e      	b.n	8004288 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x94>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x94>
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fe2:	e151      	b.n	8004288 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d003      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2205      	movs	r2, #5
 8003ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	887a      	ldrh	r2, [r7, #2]
 800401a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d007      	beq.n	800404c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004054:	d178      	bne.n	8004148 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x11c>
 800405e:	8b7b      	ldrh	r3, [r7, #26]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d166      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	881a      	ldrh	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	1c9a      	adds	r2, r3, #2
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004088:	e053      	b.n	8004132 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b02      	cmp	r3, #2
 8004096:	d11b      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x188>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d016      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x188>
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d113      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	881a      	ldrh	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	1c9a      	adds	r2, r3, #2
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d119      	bne.n	8004112 <HAL_SPI_TransmitReceive+0x1ca>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d014      	beq.n	8004112 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	b292      	uxth	r2, r2
 80040f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	1c9a      	adds	r2, r3, #2
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800410e:	2301      	movs	r3, #1
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004112:	f7fd f995 	bl	8001440 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800411e:	429a      	cmp	r2, r3
 8004120:	d807      	bhi.n	8004132 <HAL_SPI_TransmitReceive+0x1ea>
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d003      	beq.n	8004132 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004130:	e0aa      	b.n	8004288 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1a6      	bne.n	800408a <HAL_SPI_TransmitReceive+0x142>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1a1      	bne.n	800408a <HAL_SPI_TransmitReceive+0x142>
 8004146:	e07f      	b.n	8004248 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_SPI_TransmitReceive+0x20e>
 8004150:	8b7b      	ldrh	r3, [r7, #26]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d16e      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	7812      	ldrb	r2, [r2, #0]
 8004162:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800417c:	e05a      	b.n	8004234 <HAL_SPI_TransmitReceive+0x2ec>
 800417e:	bf00      	nop
 8004180:	0801a664 	.word	0x0801a664
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b02      	cmp	r3, #2
 8004190:	d11c      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x284>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d017      	beq.n	80041cc <HAL_SPI_TransmitReceive+0x284>
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d114      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	7812      	ldrb	r2, [r2, #0]
 80041ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d119      	bne.n	800420e <HAL_SPI_TransmitReceive+0x2c6>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d014      	beq.n	800420e <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420a:	2301      	movs	r3, #1
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800420e:	f7fd f917 	bl	8001440 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800421a:	429a      	cmp	r2, r3
 800421c:	d803      	bhi.n	8004226 <HAL_SPI_TransmitReceive+0x2de>
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d102      	bne.n	800422c <HAL_SPI_TransmitReceive+0x2e4>
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004232:	e029      	b.n	8004288 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1a2      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x23c>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d19d      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fe59 	bl	8004f04 <SPI_EndRxTxTransaction>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d006      	beq.n	8004266 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004264:	e010      	b.n	8004288 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	e000      	b.n	8004288 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8004286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800429c:	4618      	mov	r0, r3
 800429e:	3730      	adds	r7, #48	; 0x30
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	75fb      	strb	r3, [r7, #23]

  /* Check tx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <HAL_SPI_Transmit_DMA+0x24>
 80042be:	f240 615c 	movw	r1, #1628	; 0x65c
 80042c2:	485c      	ldr	r0, [pc, #368]	; (8004434 <HAL_SPI_Transmit_DMA+0x190>)
 80042c4:	f7fc fd62 	bl	8000d8c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <HAL_SPI_Transmit_DMA+0x40>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d8:	d004      	beq.n	80042e4 <HAL_SPI_Transmit_DMA+0x40>
 80042da:	f240 615f 	movw	r1, #1631	; 0x65f
 80042de:	4855      	ldr	r0, [pc, #340]	; (8004434 <HAL_SPI_Transmit_DMA+0x190>)
 80042e0:	f7fc fd54 	bl	8000d8c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_SPI_Transmit_DMA+0x4e>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e09b      	b.n	800442a <HAL_SPI_Transmit_DMA+0x186>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d002      	beq.n	800430c <HAL_SPI_Transmit_DMA+0x68>
  {
    errorcode = HAL_BUSY;
 8004306:	2302      	movs	r3, #2
 8004308:	75fb      	strb	r3, [r7, #23]
    goto error;
 800430a:	e089      	b.n	8004420 <HAL_SPI_Transmit_DMA+0x17c>
  }

  if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Transmit_DMA+0x74>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <HAL_SPI_Transmit_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800431c:	e080      	b.n	8004420 <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2203      	movs	r2, #3
 8004322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	88fa      	ldrh	r2, [r7, #6]
 8004336:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004364:	d10f      	bne.n	8004386 <HAL_SPI_Transmit_DMA+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438a:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <HAL_SPI_Transmit_DMA+0x194>)
 800438c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_SPI_Transmit_DMA+0x198>)
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439a:	4a29      	ldr	r2, [pc, #164]	; (8004440 <HAL_SPI_Transmit_DMA+0x19c>)
 800439c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a2:	2200      	movs	r2, #0
 80043a4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	4619      	mov	r1, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80043be:	f7fd fb9b 	bl	8001af8 <HAL_DMA_Start_IT>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0210 	orr.w	r2, r3, #16
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80043e0:	e01e      	b.n	8004420 <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d007      	beq.n	8004400 <HAL_SPI_Transmit_DMA+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043fe:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0220 	orr.w	r2, r2, #32
 800440e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0202 	orr.w	r2, r2, #2
 800441e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004428:	7dfb      	ldrb	r3, [r7, #23]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	0801a664 	.word	0x0801a664
 8004438:	08004c6d 	.word	0x08004c6d
 800443c:	08004a8d 	.word	0x08004a8d
 8004440:	08004cc1 	.word	0x08004cc1

08004444 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	4613      	mov	r3, r2
 8004450:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d104      	bne.n	8004468 <HAL_SPI_Receive_DMA+0x24>
 800445e:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
 8004462:	4862      	ldr	r0, [pc, #392]	; (80045ec <HAL_SPI_Receive_DMA+0x1a8>)
 8004464:	f7fc fc92 	bl	8000d8c <assert_failed>

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d119      	bne.n	80044a4 <HAL_SPI_Receive_DMA+0x60>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004478:	d114      	bne.n	80044a4 <HAL_SPI_Receive_DMA+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2204      	movs	r2, #4
 800447e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_SPI_Receive_DMA+0x50>
 800448a:	f240 61cf 	movw	r1, #1743	; 0x6cf
 800448e:	4857      	ldr	r0, [pc, #348]	; (80045ec <HAL_SPI_Receive_DMA+0x1a8>)
 8004490:	f7fc fc7c 	bl	8000d8c <assert_failed>

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f8ae 	bl	80045fc <HAL_SPI_TransmitReceive_DMA>
 80044a0:	4603      	mov	r3, r0
 80044a2:	e09f      	b.n	80045e4 <HAL_SPI_Receive_DMA+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_SPI_Receive_DMA+0x6e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e098      	b.n	80045e4 <HAL_SPI_Receive_DMA+0x1a0>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d002      	beq.n	80044cc <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
 80044c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044ca:	e086      	b.n	80045da <HAL_SPI_Receive_DMA+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_Receive_DMA+0x94>
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_SPI_Receive_DMA+0x9a>
  {
    errorcode = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044dc:	e07d      	b.n	80045da <HAL_SPI_Receive_DMA+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2204      	movs	r2, #4
 80044e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451e:	d10f      	bne.n	8004540 <HAL_SPI_Receive_DMA+0xfc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800453e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <HAL_SPI_Receive_DMA+0x1ac>)
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454c:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <HAL_SPI_Receive_DMA+0x1b0>)
 800454e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004554:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <HAL_SPI_Receive_DMA+0x1b4>)
 8004556:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455c:	2200      	movs	r2, #0
 800455e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	4619      	mov	r1, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004576:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004578:	f7fd fabe 	bl	8001af8 <HAL_DMA_Start_IT>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00c      	beq.n	800459c <HAL_SPI_Receive_DMA+0x158>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f043 0210 	orr.w	r2, r3, #16
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800459a:	e01e      	b.n	80045da <HAL_SPI_Receive_DMA+0x196>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d007      	beq.n	80045ba <HAL_SPI_Receive_DMA+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0220 	orr.w	r2, r2, #32
 80045c8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	0801a664 	.word	0x0801a664
 80045f0:	08004c89 	.word	0x08004c89
 80045f4:	08004b35 	.word	0x08004b35
 80045f8:	08004cc1 	.word	0x08004cc1

080045fc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <HAL_SPI_TransmitReceive_DMA+0x24>
 8004616:	f240 713e 	movw	r1, #1854	; 0x73e
 800461a:	4882      	ldr	r0, [pc, #520]	; (8004824 <HAL_SPI_TransmitReceive_DMA+0x228>)
 800461c:	f7fc fbb6 	bl	8000d8c <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <HAL_SPI_TransmitReceive_DMA+0x36>
 8004628:	f240 713f 	movw	r1, #1855	; 0x73f
 800462c:	487d      	ldr	r0, [pc, #500]	; (8004824 <HAL_SPI_TransmitReceive_DMA+0x228>)
 800462e:	f7fc fbad 	bl	8000d8c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d004      	beq.n	8004644 <HAL_SPI_TransmitReceive_DMA+0x48>
 800463a:	f240 7142 	movw	r1, #1858	; 0x742
 800463e:	4879      	ldr	r0, [pc, #484]	; (8004824 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8004640:	f7fc fba4 	bl	8000d8c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_SPI_TransmitReceive_DMA+0x56>
 800464e:	2302      	movs	r3, #2
 8004650:	e0e3      	b.n	800481a <HAL_SPI_TransmitReceive_DMA+0x21e>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004660:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004668:	7dbb      	ldrb	r3, [r7, #22]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d00d      	beq.n	800468a <HAL_SPI_TransmitReceive_DMA+0x8e>
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004674:	d106      	bne.n	8004684 <HAL_SPI_TransmitReceive_DMA+0x88>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <HAL_SPI_TransmitReceive_DMA+0x88>
 800467e:	7dbb      	ldrb	r3, [r7, #22]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d002      	beq.n	800468a <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_BUSY;
 8004684:	2302      	movs	r3, #2
 8004686:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004688:	e0c2      	b.n	8004810 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_SPI_TransmitReceive_DMA+0xa0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_SPI_TransmitReceive_DMA+0xa0>
 8004696:	887b      	ldrh	r3, [r7, #2]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <HAL_SPI_TransmitReceive_DMA+0xa6>
  {
    errorcode = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046a0:	e0b6      	b.n	8004810 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d003      	beq.n	80046b6 <HAL_SPI_TransmitReceive_DMA+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2205      	movs	r2, #5
 80046b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	887a      	ldrh	r2, [r7, #2]
 80046c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	887a      	ldrh	r2, [r7, #2]
 80046cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	887a      	ldrh	r2, [r7, #2]
 80046de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d108      	bne.n	800470a <HAL_SPI_TransmitReceive_DMA+0x10e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fc:	4a4a      	ldr	r2, [pc, #296]	; (8004828 <HAL_SPI_TransmitReceive_DMA+0x22c>)
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004704:	4a49      	ldr	r2, [pc, #292]	; (800482c <HAL_SPI_TransmitReceive_DMA+0x230>)
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c
 8004708:	e007      	b.n	800471a <HAL_SPI_TransmitReceive_DMA+0x11e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	4a48      	ldr	r2, [pc, #288]	; (8004830 <HAL_SPI_TransmitReceive_DMA+0x234>)
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004716:	4a47      	ldr	r2, [pc, #284]	; (8004834 <HAL_SPI_TransmitReceive_DMA+0x238>)
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	4a46      	ldr	r2, [pc, #280]	; (8004838 <HAL_SPI_TransmitReceive_DMA+0x23c>)
 8004720:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004726:	2200      	movs	r2, #0
 8004728:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	4619      	mov	r1, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004740:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004742:	f7fd f9d9 	bl	8001af8 <HAL_DMA_Start_IT>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00c      	beq.n	8004766 <HAL_SPI_TransmitReceive_DMA+0x16a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	f043 0210 	orr.w	r2, r3, #16
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004764:	e054      	b.n	8004810 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477a:	2200      	movs	r2, #0
 800477c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004782:	2200      	movs	r2, #0
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478a:	2200      	movs	r2, #0
 800478c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004792:	2200      	movs	r2, #0
 8004794:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	4619      	mov	r1, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047ae:	f7fd f9a3 	bl	8001af8 <HAL_DMA_Start_IT>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00c      	beq.n	80047d2 <HAL_SPI_TransmitReceive_DMA+0x1d6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	f043 0210 	orr.w	r2, r3, #16
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80047d0:	e01e      	b.n	8004810 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	d007      	beq.n	80047f0 <HAL_SPI_TransmitReceive_DMA+0x1f4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ee:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0220 	orr.w	r2, r2, #32
 80047fe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0202 	orr.w	r2, r2, #2
 800480e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	0801a664 	.word	0x0801a664
 8004828:	08004c89 	.word	0x08004c89
 800482c:	08004b35 	.word	0x08004b35
 8004830:	08004ca5 	.word	0x08004ca5
 8004834:	08004bdd 	.word	0x08004bdd
 8004838:	08004cc1 	.word	0x08004cc1

0800483c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10f      	bne.n	8004880 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d004      	beq.n	8004880 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	4798      	blx	r3
    return;
 800487e:	e0d7      	b.n	8004a30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_SPI_IRQHandler+0x66>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	09db      	lsrs	r3, r3, #7
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
    return;
 80048a0:	e0c6      	b.n	8004a30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10c      	bne.n	80048c8 <HAL_SPI_IRQHandler+0x8c>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80b4 	beq.w	8004a30 <HAL_SPI_IRQHandler+0x1f4>
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80ad 	beq.w	8004a30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d023      	beq.n	800492a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d011      	beq.n	8004912 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f043 0204 	orr.w	r2, r3, #4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	e00b      	b.n	800492a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	693b      	ldr	r3, [r7, #16]
        return;
 8004928:	e082      	b.n	8004a30 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d014      	beq.n	8004960 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	f043 0201 	orr.w	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	f043 0208 	orr.w	r2, r3, #8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004978:	2300      	movs	r3, #0
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	2b00      	cmp	r3, #0
 800498c:	d04f      	beq.n	8004a2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800499c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d104      	bne.n	80049ba <HAL_SPI_IRQHandler+0x17e>
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d034      	beq.n	8004a24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0203 	bic.w	r2, r2, #3
 80049c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d011      	beq.n	80049f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d6:	4a18      	ldr	r2, [pc, #96]	; (8004a38 <HAL_SPI_IRQHandler+0x1fc>)
 80049d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd f960 	bl	8001ca4 <HAL_DMA_Abort_IT>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <HAL_SPI_IRQHandler+0x1fc>)
 8004a04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fd f94a 	bl	8001ca4 <HAL_DMA_Abort_IT>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004a22:	e003      	b.n	8004a2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f827 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a2a:	e000      	b.n	8004a2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004a2c:	bf00      	nop
    return;
 8004a2e:	bf00      	nop
  }
}
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	08004d01 	.word	0x08004d01

08004a3c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a9a:	f7fc fcd1 	bl	8001440 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	d03b      	beq.n	8004b28 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0220 	bic.w	r2, r2, #32
 8004abe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0202 	bic.w	r2, r2, #2
 8004ace:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	2164      	movs	r1, #100	; 0x64
 8004ad4:	6978      	ldr	r0, [r7, #20]
 8004ad6:	f000 fa15 	bl	8004f04 <SPI_EndRxTxTransaction>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b20:	6978      	ldr	r0, [r7, #20]
 8004b22:	f7ff ffa9 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b26:	e002      	b.n	8004b2e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004b28:	6978      	ldr	r0, [r7, #20]
 8004b2a:	f00a fe2d 	bl	800f788 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b42:	f7fc fc7d 	bl	8001440 <HAL_GetTick>
 8004b46:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b56:	d03b      	beq.n	8004bd0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0220 	bic.w	r2, r2, #32
 8004b66:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10d      	bne.n	8004b8c <SPI_DMAReceiveCplt+0x58>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b78:	d108      	bne.n	8004b8c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0203 	bic.w	r2, r2, #3
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	e007      	b.n	8004b9c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	2164      	movs	r1, #100	; 0x64
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f949 	bl	8004e38 <SPI_EndRxTransaction>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff ff55 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004bce:	e002      	b.n	8004bd6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f00a fded 	bl	800f7b0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bea:	f7fc fc29 	bl	8001440 <HAL_GetTick>
 8004bee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d02f      	beq.n	8004c60 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0220 	bic.w	r2, r2, #32
 8004c0e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	2164      	movs	r1, #100	; 0x64
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f975 	bl	8004f04 <SPI_EndRxTxTransaction>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c24:	f043 0220 	orr.w	r2, r3, #32
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0203 	bic.w	r2, r2, #3
 8004c3a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff ff0d 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c5e:	e002      	b.n	8004c66 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f00a fd9b 	bl	800f79c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff fede 	bl	8004a3c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f7ff feda 	bl	8004a50 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7ff fed6 	bl	8004a64 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0203 	bic.w	r2, r2, #3
 8004cdc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	f043 0210 	orr.w	r2, r3, #16
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff fec0 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff feac 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d38:	f7fc fb82 	bl	8001440 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d48:	f7fc fb7a 	bl	8001440 <HAL_GetTick>
 8004d4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d4e:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	015b      	lsls	r3, r3, #5
 8004d54:	0d1b      	lsrs	r3, r3, #20
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d5e:	e054      	b.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d050      	beq.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d68:	f7fc fb6a 	bl	8001440 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d902      	bls.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d13d      	bne.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d96:	d111      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da0:	d004      	beq.n	8004dac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004daa:	d107      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc4:	d10f      	bne.n	8004de6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e017      	b.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4013      	ands	r3, r2
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d19b      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000000 	.word	0x20000000

08004e38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4c:	d111      	bne.n	8004e72 <SPI_EndRxTransaction+0x3a>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e56:	d004      	beq.n	8004e62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e60:	d107      	bne.n	8004e72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7a:	d12a      	bne.n	8004ed2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e84:	d012      	beq.n	8004eac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2180      	movs	r1, #128	; 0x80
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7ff ff49 	bl	8004d28 <SPI_WaitFlagStateUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02d      	beq.n	8004ef8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea0:	f043 0220 	orr.w	r2, r3, #32
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e026      	b.n	8004efa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7ff ff36 	bl	8004d28 <SPI_WaitFlagStateUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01a      	beq.n	8004ef8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e013      	b.n	8004efa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2101      	movs	r1, #1
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff ff23 	bl	8004d28 <SPI_WaitFlagStateUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e000      	b.n	8004efa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f10:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <SPI_EndRxTxTransaction+0x7c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <SPI_EndRxTxTransaction+0x80>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	0d5b      	lsrs	r3, r3, #21
 8004f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2e:	d112      	bne.n	8004f56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2200      	movs	r2, #0
 8004f38:	2180      	movs	r1, #128	; 0x80
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7ff fef4 	bl	8004d28 <SPI_WaitFlagStateUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d016      	beq.n	8004f74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e00f      	b.n	8004f76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d0f2      	beq.n	8004f56 <SPI_EndRxTxTransaction+0x52>
 8004f70:	e000      	b.n	8004f74 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f72:	bf00      	nop
  }

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000000 	.word	0x20000000
 8004f84:	165e9f81 	.word	0x165e9f81

08004f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0c5      	b.n	8005126 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a64      	ldr	r2, [pc, #400]	; (8005130 <HAL_TIM_Base_Init+0x1a8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d045      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d040      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a60      	ldr	r2, [pc, #384]	; (8005134 <HAL_TIM_Base_Init+0x1ac>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d03b      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a5e      	ldr	r2, [pc, #376]	; (8005138 <HAL_TIM_Base_Init+0x1b0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d036      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a5d      	ldr	r2, [pc, #372]	; (800513c <HAL_TIM_Base_Init+0x1b4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d031      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a5b      	ldr	r2, [pc, #364]	; (8005140 <HAL_TIM_Base_Init+0x1b8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d02c      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a5a      	ldr	r2, [pc, #360]	; (8005144 <HAL_TIM_Base_Init+0x1bc>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d027      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a58      	ldr	r2, [pc, #352]	; (8005148 <HAL_TIM_Base_Init+0x1c0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d022      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a57      	ldr	r2, [pc, #348]	; (800514c <HAL_TIM_Base_Init+0x1c4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d01d      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a55      	ldr	r2, [pc, #340]	; (8005150 <HAL_TIM_Base_Init+0x1c8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d018      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a54      	ldr	r2, [pc, #336]	; (8005154 <HAL_TIM_Base_Init+0x1cc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a52      	ldr	r2, [pc, #328]	; (8005158 <HAL_TIM_Base_Init+0x1d0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a51      	ldr	r2, [pc, #324]	; (800515c <HAL_TIM_Base_Init+0x1d4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a4f      	ldr	r2, [pc, #316]	; (8005160 <HAL_TIM_Base_Init+0x1d8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <HAL_TIM_Base_Init+0xa8>
 8005026:	f240 1113 	movw	r1, #275	; 0x113
 800502a:	484e      	ldr	r0, [pc, #312]	; (8005164 <HAL_TIM_Base_Init+0x1dc>)
 800502c:	f7fb feae 	bl	8000d8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d014      	beq.n	8005062 <HAL_TIM_Base_Init+0xda>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b10      	cmp	r3, #16
 800503e:	d010      	beq.n	8005062 <HAL_TIM_Base_Init+0xda>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b20      	cmp	r3, #32
 8005046:	d00c      	beq.n	8005062 <HAL_TIM_Base_Init+0xda>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d008      	beq.n	8005062 <HAL_TIM_Base_Init+0xda>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b60      	cmp	r3, #96	; 0x60
 8005056:	d004      	beq.n	8005062 <HAL_TIM_Base_Init+0xda>
 8005058:	f44f 718a 	mov.w	r1, #276	; 0x114
 800505c:	4841      	ldr	r0, [pc, #260]	; (8005164 <HAL_TIM_Base_Init+0x1dc>)
 800505e:	f7fb fe95 	bl	8000d8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <HAL_TIM_Base_Init+0x100>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005072:	d009      	beq.n	8005088 <HAL_TIM_Base_Init+0x100>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507c:	d004      	beq.n	8005088 <HAL_TIM_Base_Init+0x100>
 800507e:	f240 1115 	movw	r1, #277	; 0x115
 8005082:	4838      	ldr	r0, [pc, #224]	; (8005164 <HAL_TIM_Base_Init+0x1dc>)
 8005084:	f7fb fe82 	bl	8000d8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_TIM_Base_Init+0x11a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b80      	cmp	r3, #128	; 0x80
 8005096:	d004      	beq.n	80050a2 <HAL_TIM_Base_Init+0x11a>
 8005098:	f44f 718b 	mov.w	r1, #278	; 0x116
 800509c:	4831      	ldr	r0, [pc, #196]	; (8005164 <HAL_TIM_Base_Init+0x1dc>)
 800509e:	f7fb fe75 	bl	8000d8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f856 	bl	8005168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 fa4a 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40001000 	.word	0x40001000
 8005144:	40001400 	.word	0x40001400
 8005148:	40010400 	.word	0x40010400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800
 8005158:	40001800 	.word	0x40001800
 800515c:	40001c00 	.word	0x40001c00
 8005160:	40002000 	.word	0x40002000
 8005164:	0801a69c 	.word	0x0801a69c

08005168 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a51      	ldr	r2, [pc, #324]	; (80052d0 <HAL_TIM_Base_Start_IT+0x154>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d045      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005196:	d040      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a4d      	ldr	r2, [pc, #308]	; (80052d4 <HAL_TIM_Base_Start_IT+0x158>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d03b      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a4c      	ldr	r2, [pc, #304]	; (80052d8 <HAL_TIM_Base_Start_IT+0x15c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d036      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a4a      	ldr	r2, [pc, #296]	; (80052dc <HAL_TIM_Base_Start_IT+0x160>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d031      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a49      	ldr	r2, [pc, #292]	; (80052e0 <HAL_TIM_Base_Start_IT+0x164>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d02c      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a47      	ldr	r2, [pc, #284]	; (80052e4 <HAL_TIM_Base_Start_IT+0x168>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d027      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a46      	ldr	r2, [pc, #280]	; (80052e8 <HAL_TIM_Base_Start_IT+0x16c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d022      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a44      	ldr	r2, [pc, #272]	; (80052ec <HAL_TIM_Base_Start_IT+0x170>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01d      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a43      	ldr	r2, [pc, #268]	; (80052f0 <HAL_TIM_Base_Start_IT+0x174>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d018      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a41      	ldr	r2, [pc, #260]	; (80052f4 <HAL_TIM_Base_Start_IT+0x178>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a40      	ldr	r2, [pc, #256]	; (80052f8 <HAL_TIM_Base_Start_IT+0x17c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00e      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a3e      	ldr	r2, [pc, #248]	; (80052fc <HAL_TIM_Base_Start_IT+0x180>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a3d      	ldr	r2, [pc, #244]	; (8005300 <HAL_TIM_Base_Start_IT+0x184>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x9e>
 8005210:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005214:	483b      	ldr	r0, [pc, #236]	; (8005304 <HAL_TIM_Base_Start_IT+0x188>)
 8005216:	f7fb fdb9 	bl	8000d8c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b01      	cmp	r3, #1
 8005224:	d001      	beq.n	800522a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e04e      	b.n	80052c8 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <HAL_TIM_Base_Start_IT+0x154>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d022      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0x116>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005254:	d01d      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0x116>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <HAL_TIM_Base_Start_IT+0x158>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d018      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0x116>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <HAL_TIM_Base_Start_IT+0x15c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0x116>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <HAL_TIM_Base_Start_IT+0x160>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0x116>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <HAL_TIM_Base_Start_IT+0x16c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0x116>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <HAL_TIM_Base_Start_IT+0x170>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0x116>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1a      	ldr	r2, [pc, #104]	; (80052f8 <HAL_TIM_Base_Start_IT+0x17c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d111      	bne.n	80052b6 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d010      	beq.n	80052c6 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	e007      	b.n	80052c6 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40001000 	.word	0x40001000
 80052e4:	40001400 	.word	0x40001400
 80052e8:	40010400 	.word	0x40010400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800
 80052f8:	40001800 	.word	0x40001800
 80052fc:	40001c00 	.word	0x40001c00
 8005300:	40002000 	.word	0x40002000
 8005304:	0801a69c 	.word	0x0801a69c

08005308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d122      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d11b      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0202 	mvn.w	r2, #2
 8005334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8ee 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8e0 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8f1 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b04      	cmp	r3, #4
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0204 	mvn.w	r2, #4
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f8c4 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f8b6 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8c7 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0208 	mvn.w	r2, #8
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2204      	movs	r2, #4
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f89a 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f88c 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f89d 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b10      	cmp	r3, #16
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b10      	cmp	r3, #16
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0210 	mvn.w	r2, #16
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2208      	movs	r2, #8
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f870 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f862 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f873 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d10e      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d107      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0201 	mvn.w	r2, #1
 8005484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fb fc6c 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f902 	bl	80056bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f838 	bl	8005554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0220 	mvn.w	r2, #32
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8cc 	bl	80056a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a40      	ldr	r2, [pc, #256]	; (800567c <TIM_Base_SetConfig+0x114>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d013      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005586:	d00f      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a3d      	ldr	r2, [pc, #244]	; (8005680 <TIM_Base_SetConfig+0x118>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00b      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a3c      	ldr	r2, [pc, #240]	; (8005684 <TIM_Base_SetConfig+0x11c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d007      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a3b      	ldr	r2, [pc, #236]	; (8005688 <TIM_Base_SetConfig+0x120>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a3a      	ldr	r2, [pc, #232]	; (800568c <TIM_Base_SetConfig+0x124>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d108      	bne.n	80055ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2f      	ldr	r2, [pc, #188]	; (800567c <TIM_Base_SetConfig+0x114>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02b      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c8:	d027      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a2c      	ldr	r2, [pc, #176]	; (8005680 <TIM_Base_SetConfig+0x118>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d023      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2b      	ldr	r2, [pc, #172]	; (8005684 <TIM_Base_SetConfig+0x11c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01f      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2a      	ldr	r2, [pc, #168]	; (8005688 <TIM_Base_SetConfig+0x120>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01b      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a29      	ldr	r2, [pc, #164]	; (800568c <TIM_Base_SetConfig+0x124>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d017      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a28      	ldr	r2, [pc, #160]	; (8005690 <TIM_Base_SetConfig+0x128>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a27      	ldr	r2, [pc, #156]	; (8005694 <TIM_Base_SetConfig+0x12c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00f      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a26      	ldr	r2, [pc, #152]	; (8005698 <TIM_Base_SetConfig+0x130>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a25      	ldr	r2, [pc, #148]	; (800569c <TIM_Base_SetConfig+0x134>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <TIM_Base_SetConfig+0x138>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a23      	ldr	r2, [pc, #140]	; (80056a4 <TIM_Base_SetConfig+0x13c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a0a      	ldr	r2, [pc, #40]	; (800567c <TIM_Base_SetConfig+0x114>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0xf8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0c      	ldr	r2, [pc, #48]	; (800568c <TIM_Base_SetConfig+0x124>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d103      	bne.n	8005668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	615a      	str	r2, [r3, #20]
}
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40010000 	.word	0x40010000
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40000c00 	.word	0x40000c00
 800568c:	40010400 	.word	0x40010400
 8005690:	40014000 	.word	0x40014000
 8005694:	40014400 	.word	0x40014400
 8005698:	40014800 	.word	0x40014800
 800569c:	40001800 	.word	0x40001800
 80056a0:	40001c00 	.word	0x40001c00
 80056a4:	40002000 	.word	0x40002000

080056a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0b4      	b.n	800584c <HAL_UART_Init+0x17c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d031      	beq.n	800574e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a59      	ldr	r2, [pc, #356]	; (8005854 <HAL_UART_Init+0x184>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <HAL_UART_Init+0x4c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a57      	ldr	r2, [pc, #348]	; (8005858 <HAL_UART_Init+0x188>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00e      	beq.n	800571c <HAL_UART_Init+0x4c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a56      	ldr	r2, [pc, #344]	; (800585c <HAL_UART_Init+0x18c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_UART_Init+0x4c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a54      	ldr	r2, [pc, #336]	; (8005860 <HAL_UART_Init+0x190>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_UART_Init+0x4c>
 8005712:	f240 1173 	movw	r1, #371	; 0x173
 8005716:	4853      	ldr	r0, [pc, #332]	; (8005864 <HAL_UART_Init+0x194>)
 8005718:	f7fb fb38 	bl	8000d8c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d037      	beq.n	8005794 <HAL_UART_Init+0xc4>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572c:	d032      	beq.n	8005794 <HAL_UART_Init+0xc4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005736:	d02d      	beq.n	8005794 <HAL_UART_Init+0xc4>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005740:	d028      	beq.n	8005794 <HAL_UART_Init+0xc4>
 8005742:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8005746:	4847      	ldr	r0, [pc, #284]	; (8005864 <HAL_UART_Init+0x194>)
 8005748:	f7fb fb20 	bl	8000d8c <assert_failed>
 800574c:	e022      	b.n	8005794 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a40      	ldr	r2, [pc, #256]	; (8005854 <HAL_UART_Init+0x184>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d01d      	beq.n	8005794 <HAL_UART_Init+0xc4>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a3e      	ldr	r2, [pc, #248]	; (8005858 <HAL_UART_Init+0x188>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d018      	beq.n	8005794 <HAL_UART_Init+0xc4>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a3d      	ldr	r2, [pc, #244]	; (800585c <HAL_UART_Init+0x18c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d013      	beq.n	8005794 <HAL_UART_Init+0xc4>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a3d      	ldr	r2, [pc, #244]	; (8005868 <HAL_UART_Init+0x198>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00e      	beq.n	8005794 <HAL_UART_Init+0xc4>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a3c      	ldr	r2, [pc, #240]	; (800586c <HAL_UART_Init+0x19c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d009      	beq.n	8005794 <HAL_UART_Init+0xc4>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a36      	ldr	r2, [pc, #216]	; (8005860 <HAL_UART_Init+0x190>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_UART_Init+0xc4>
 800578a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800578e:	4835      	ldr	r0, [pc, #212]	; (8005864 <HAL_UART_Init+0x194>)
 8005790:	f7fb fafc 	bl	8000d8c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <HAL_UART_Init+0xe0>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a4:	d004      	beq.n	80057b0 <HAL_UART_Init+0xe0>
 80057a6:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80057aa:	482e      	ldr	r0, [pc, #184]	; (8005864 <HAL_UART_Init+0x194>)
 80057ac:	f7fb faee 	bl	8000d8c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d009      	beq.n	80057cc <HAL_UART_Init+0xfc>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c0:	d004      	beq.n	80057cc <HAL_UART_Init+0xfc>
 80057c2:	f240 117b 	movw	r1, #379	; 0x17b
 80057c6:	4827      	ldr	r0, [pc, #156]	; (8005864 <HAL_UART_Init+0x194>)
 80057c8:	f7fb fae0 	bl	8000d8c <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fb fd7d 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2224      	movs	r2, #36	; 0x24
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fc88 	bl	8006114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005812:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005822:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005832:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40011000 	.word	0x40011000
 8005858:	40004400 	.word	0x40004400
 800585c:	40004800 	.word	0x40004800
 8005860:	40011400 	.word	0x40011400
 8005864:	0801a6d4 	.word	0x0801a6d4
 8005868:	40004c00 	.word	0x40004c00
 800586c:	40005000 	.word	0x40005000

08005870 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b0ba      	sub	sp, #232	; 0xe8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005896:	2300      	movs	r3, #0
 8005898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800589c:	2300      	movs	r3, #0
 800589e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10f      	bne.n	80058d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <HAL_UART_IRQHandler+0x66>
 80058c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fb65 	bl	8005f9e <UART_Receive_IT>
      return;
 80058d4:	e256      	b.n	8005d84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 80de 	beq.w	8005a9c <HAL_UART_IRQHandler+0x22c>
 80058e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80d1 	beq.w	8005a9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <HAL_UART_IRQHandler+0xae>
 8005906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f043 0201 	orr.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HAL_UART_IRQHandler+0xd2>
 800592a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f043 0202 	orr.w	r2, r3, #2
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_UART_IRQHandler+0xf6>
 800594e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f043 0204 	orr.w	r2, r3, #4
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d011      	beq.n	8005996 <HAL_UART_IRQHandler+0x126>
 8005972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d105      	bne.n	800598a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800597e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f043 0208 	orr.w	r2, r3, #8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 81ed 	beq.w	8005d7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_UART_IRQHandler+0x14e>
 80059ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 faf0 	bl	8005f9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	bf0c      	ite	eq
 80059cc:	2301      	moveq	r3, #1
 80059ce:	2300      	movne	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <HAL_UART_IRQHandler+0x17a>
 80059e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d04f      	beq.n	8005a8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9f8 	bl	8005de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b40      	cmp	r3, #64	; 0x40
 80059fc:	d141      	bne.n	8005a82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3314      	adds	r3, #20
 8005a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3314      	adds	r3, #20
 8005a26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1d9      	bne.n	80059fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d013      	beq.n	8005a7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	4a7d      	ldr	r2, [pc, #500]	; (8005c4c <HAL_UART_IRQHandler+0x3dc>)
 8005a58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fc f920 	bl	8001ca4 <HAL_DMA_Abort_IT>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a74:	4610      	mov	r0, r2
 8005a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	e00e      	b.n	8005a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f99a 	bl	8005db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	e00a      	b.n	8005a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f996 	bl	8005db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	e006      	b.n	8005a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f992 	bl	8005db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a96:	e170      	b.n	8005d7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a98:	bf00      	nop
    return;
 8005a9a:	e16e      	b.n	8005d7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	f040 814a 	bne.w	8005d3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8143 	beq.w	8005d3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 813c 	beq.w	8005d3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	f040 80b4 	bne.w	8005c50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005af4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8140 	beq.w	8005d7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b06:	429a      	cmp	r2, r3
 8005b08:	f080 8139 	bcs.w	8005d7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b1e:	f000 8088 	beq.w	8005c32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	330c      	adds	r3, #12
 8005b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1d9      	bne.n	8005b22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3314      	adds	r3, #20
 8005b74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e1      	bne.n	8005b6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3314      	adds	r3, #20
 8005bb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e3      	bne.n	8005baa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c02:	f023 0310 	bic.w	r3, r3, #16
 8005c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c14:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e3      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fb ffc9 	bl	8001bc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f8c0 	bl	8005dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c48:	e099      	b.n	8005d7e <HAL_UART_IRQHandler+0x50e>
 8005c4a:	bf00      	nop
 8005c4c:	08005ea7 	.word	0x08005ea7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 808b 	beq.w	8005d82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8086 	beq.w	8005d82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	330c      	adds	r3, #12
 8005c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c9a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e3      	bne.n	8005c76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cd2:	633a      	str	r2, [r7, #48]	; 0x30
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e3      	bne.n	8005cae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0310 	bic.w	r3, r3, #16
 8005d0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d18:	61fa      	str	r2, [r7, #28]
 8005d1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	69b9      	ldr	r1, [r7, #24]
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	617b      	str	r3, [r7, #20]
   return(result);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e3      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f848 	bl	8005dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d38:	e023      	b.n	8005d82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_UART_IRQHandler+0x4ea>
 8005d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8bb 	bl	8005ece <UART_Transmit_IT>
    return;
 8005d58:	e014      	b.n	8005d84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <HAL_UART_IRQHandler+0x514>
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d008      	beq.n	8005d84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f8fb 	bl	8005f6e <UART_EndTransmit_IT>
    return;
 8005d78:	e004      	b.n	8005d84 <HAL_UART_IRQHandler+0x514>
    return;
 8005d7a:	bf00      	nop
 8005d7c:	e002      	b.n	8005d84 <HAL_UART_IRQHandler+0x514>
      return;
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <HAL_UART_IRQHandler+0x514>
      return;
 8005d82:	bf00      	nop
  }
}
 8005d84:	37e8      	adds	r7, #232	; 0xe8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop

08005d8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b095      	sub	sp, #84	; 0x54
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e08:	643a      	str	r2, [r7, #64]	; 0x40
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e5      	bne.n	8005de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3314      	adds	r3, #20
 8005e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3314      	adds	r3, #20
 8005e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e5      	bne.n	8005e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d119      	bne.n	8005e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 0310 	bic.w	r3, r3, #16
 8005e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	330c      	adds	r3, #12
 8005e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e78:	61ba      	str	r2, [r7, #24]
 8005e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	613b      	str	r3, [r7, #16]
   return(result);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e5      	bne.n	8005e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e9a:	bf00      	nop
 8005e9c:	3754      	adds	r7, #84	; 0x54
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ff77 	bl	8005db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b21      	cmp	r3, #33	; 0x21
 8005ee0:	d13e      	bne.n	8005f60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d114      	bne.n	8005f16 <UART_Transmit_IT+0x48>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d110      	bne.n	8005f16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	1c9a      	adds	r2, r3, #2
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	621a      	str	r2, [r3, #32]
 8005f14:	e008      	b.n	8005f28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6211      	str	r1, [r2, #32]
 8005f20:	781a      	ldrb	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	4619      	mov	r1, r3
 8005f36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10f      	bne.n	8005f5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e000      	b.n	8005f62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff fefc 	bl	8005d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b08c      	sub	sp, #48	; 0x30
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b22      	cmp	r3, #34	; 0x22
 8005fb0:	f040 80ab 	bne.w	800610a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fbc:	d117      	bne.n	8005fee <UART_Receive_IT+0x50>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d113      	bne.n	8005fee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	1c9a      	adds	r2, r3, #2
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28
 8005fec:	e026      	b.n	800603c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006000:	d007      	beq.n	8006012 <UART_Receive_IT+0x74>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <UART_Receive_IT+0x82>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	e008      	b.n	8006032 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602c:	b2da      	uxtb	r2, r3
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29b      	uxth	r3, r3
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4619      	mov	r1, r3
 800604a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800604c:	2b00      	cmp	r3, #0
 800604e:	d15a      	bne.n	8006106 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0220 	bic.w	r2, r2, #32
 800605e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800606e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	2b01      	cmp	r3, #1
 800608e:	d135      	bne.n	80060fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	613b      	str	r3, [r7, #16]
   return(result);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f023 0310 	bic.w	r3, r3, #16
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b6:	623a      	str	r2, [r7, #32]
 80060b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	69f9      	ldr	r1, [r7, #28]
 80060bc:	6a3a      	ldr	r2, [r7, #32]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e5      	bne.n	8006096 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d10a      	bne.n	80060ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fe67 	bl	8005dc8 <HAL_UARTEx_RxEventCallback>
 80060fa:	e002      	b.n	8006102 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff fe4f 	bl	8005da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	e002      	b.n	800610c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3730      	adds	r7, #48	; 0x30
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006118:	b0c0      	sub	sp, #256	; 0x100
 800611a:	af00      	add	r7, sp, #0
 800611c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	4bcf      	ldr	r3, [pc, #828]	; (8006464 <UART_SetConfig+0x350>)
 8006128:	429a      	cmp	r2, r3
 800612a:	d904      	bls.n	8006136 <UART_SetConfig+0x22>
 800612c:	f640 6161 	movw	r1, #3681	; 0xe61
 8006130:	48cd      	ldr	r0, [pc, #820]	; (8006468 <UART_SetConfig+0x354>)
 8006132:	f7fa fe2b 	bl	8000d8c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <UART_SetConfig+0x42>
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614a:	d004      	beq.n	8006156 <UART_SetConfig+0x42>
 800614c:	f640 6162 	movw	r1, #3682	; 0xe62
 8006150:	48c5      	ldr	r0, [pc, #788]	; (8006468 <UART_SetConfig+0x354>)
 8006152:	f7fa fe1b 	bl	8000d8c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <UART_SetConfig+0x6e>
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616a:	d00a      	beq.n	8006182 <UART_SetConfig+0x6e>
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006176:	d004      	beq.n	8006182 <UART_SetConfig+0x6e>
 8006178:	f640 6163 	movw	r1, #3683	; 0xe63
 800617c:	48ba      	ldr	r0, [pc, #744]	; (8006468 <UART_SetConfig+0x354>)
 800617e:	f7fa fe05 	bl	8000d8c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <UART_SetConfig+0x88>
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <UART_SetConfig+0x92>
 800619c:	f640 6164 	movw	r1, #3684	; 0xe64
 80061a0:	48b1      	ldr	r0, [pc, #708]	; (8006468 <UART_SetConfig+0x354>)
 80061a2:	f7fa fdf3 	bl	8000d8c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b6:	68d9      	ldr	r1, [r3, #12]
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	ea40 0301 	orr.w	r3, r0, r1
 80061c2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	431a      	orrs	r2, r3
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	431a      	orrs	r2, r3
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061f2:	f021 010c 	bic.w	r1, r1, #12
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006200:	430b      	orrs	r3, r1
 8006202:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006214:	6999      	ldr	r1, [r3, #24]
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	ea40 0301 	orr.w	r3, r0, r1
 8006220:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4b90      	ldr	r3, [pc, #576]	; (800646c <UART_SetConfig+0x358>)
 800622a:	429a      	cmp	r2, r3
 800622c:	d005      	beq.n	800623a <UART_SetConfig+0x126>
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b8e      	ldr	r3, [pc, #568]	; (8006470 <UART_SetConfig+0x35c>)
 8006236:	429a      	cmp	r2, r3
 8006238:	d104      	bne.n	8006244 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800623a:	f7fd fcb1 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 800623e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006242:	e003      	b.n	800624c <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006244:	f7fd fc98 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8006248:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006256:	f040 810f 	bne.w	8006478 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800625a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006264:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006268:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800626c:	4622      	mov	r2, r4
 800626e:	462b      	mov	r3, r5
 8006270:	1891      	adds	r1, r2, r2
 8006272:	65b9      	str	r1, [r7, #88]	; 0x58
 8006274:	415b      	adcs	r3, r3
 8006276:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006278:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800627c:	4621      	mov	r1, r4
 800627e:	eb12 0801 	adds.w	r8, r2, r1
 8006282:	4629      	mov	r1, r5
 8006284:	eb43 0901 	adc.w	r9, r3, r1
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006294:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006298:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800629c:	4690      	mov	r8, r2
 800629e:	4699      	mov	r9, r3
 80062a0:	4623      	mov	r3, r4
 80062a2:	eb18 0303 	adds.w	r3, r8, r3
 80062a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062aa:	462b      	mov	r3, r5
 80062ac:	eb49 0303 	adc.w	r3, r9, r3
 80062b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062c0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80062c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062c8:	460b      	mov	r3, r1
 80062ca:	18db      	adds	r3, r3, r3
 80062cc:	653b      	str	r3, [r7, #80]	; 0x50
 80062ce:	4613      	mov	r3, r2
 80062d0:	eb42 0303 	adc.w	r3, r2, r3
 80062d4:	657b      	str	r3, [r7, #84]	; 0x54
 80062d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062da:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062de:	f7f9 ffdf 	bl	80002a0 <__aeabi_uldivmod>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4b63      	ldr	r3, [pc, #396]	; (8006474 <UART_SetConfig+0x360>)
 80062e8:	fba3 2302 	umull	r2, r3, r3, r2
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	011c      	lsls	r4, r3, #4
 80062f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062fa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062fe:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006302:	4642      	mov	r2, r8
 8006304:	464b      	mov	r3, r9
 8006306:	1891      	adds	r1, r2, r2
 8006308:	64b9      	str	r1, [r7, #72]	; 0x48
 800630a:	415b      	adcs	r3, r3
 800630c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800630e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006312:	4641      	mov	r1, r8
 8006314:	eb12 0a01 	adds.w	sl, r2, r1
 8006318:	4649      	mov	r1, r9
 800631a:	eb43 0b01 	adc.w	fp, r3, r1
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800632a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800632e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006332:	4692      	mov	sl, r2
 8006334:	469b      	mov	fp, r3
 8006336:	4643      	mov	r3, r8
 8006338:	eb1a 0303 	adds.w	r3, sl, r3
 800633c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006340:	464b      	mov	r3, r9
 8006342:	eb4b 0303 	adc.w	r3, fp, r3
 8006346:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800634a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006356:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800635a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800635e:	460b      	mov	r3, r1
 8006360:	18db      	adds	r3, r3, r3
 8006362:	643b      	str	r3, [r7, #64]	; 0x40
 8006364:	4613      	mov	r3, r2
 8006366:	eb42 0303 	adc.w	r3, r2, r3
 800636a:	647b      	str	r3, [r7, #68]	; 0x44
 800636c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006370:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006374:	f7f9 ff94 	bl	80002a0 <__aeabi_uldivmod>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4611      	mov	r1, r2
 800637e:	4b3d      	ldr	r3, [pc, #244]	; (8006474 <UART_SetConfig+0x360>)
 8006380:	fba3 2301 	umull	r2, r3, r3, r1
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	2264      	movs	r2, #100	; 0x64
 8006388:	fb02 f303 	mul.w	r3, r2, r3
 800638c:	1acb      	subs	r3, r1, r3
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006394:	4b37      	ldr	r3, [pc, #220]	; (8006474 <UART_SetConfig+0x360>)
 8006396:	fba3 2302 	umull	r2, r3, r3, r2
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063a2:	441c      	add	r4, r3
 80063a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063ae:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063b2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063b6:	4642      	mov	r2, r8
 80063b8:	464b      	mov	r3, r9
 80063ba:	1891      	adds	r1, r2, r2
 80063bc:	63b9      	str	r1, [r7, #56]	; 0x38
 80063be:	415b      	adcs	r3, r3
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063c6:	4641      	mov	r1, r8
 80063c8:	1851      	adds	r1, r2, r1
 80063ca:	6339      	str	r1, [r7, #48]	; 0x30
 80063cc:	4649      	mov	r1, r9
 80063ce:	414b      	adcs	r3, r1
 80063d0:	637b      	str	r3, [r7, #52]	; 0x34
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063de:	4659      	mov	r1, fp
 80063e0:	00cb      	lsls	r3, r1, #3
 80063e2:	4651      	mov	r1, sl
 80063e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e8:	4651      	mov	r1, sl
 80063ea:	00ca      	lsls	r2, r1, #3
 80063ec:	4610      	mov	r0, r2
 80063ee:	4619      	mov	r1, r3
 80063f0:	4603      	mov	r3, r0
 80063f2:	4642      	mov	r2, r8
 80063f4:	189b      	adds	r3, r3, r2
 80063f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063fa:	464b      	mov	r3, r9
 80063fc:	460a      	mov	r2, r1
 80063fe:	eb42 0303 	adc.w	r3, r2, r3
 8006402:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006412:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006416:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800641a:	460b      	mov	r3, r1
 800641c:	18db      	adds	r3, r3, r3
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006420:	4613      	mov	r3, r2
 8006422:	eb42 0303 	adc.w	r3, r2, r3
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800642c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006430:	f7f9 ff36 	bl	80002a0 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <UART_SetConfig+0x360>)
 800643a:	fba3 1302 	umull	r1, r3, r3, r2
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	2164      	movs	r1, #100	; 0x64
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	3332      	adds	r3, #50	; 0x32
 800644c:	4a09      	ldr	r2, [pc, #36]	; (8006474 <UART_SetConfig+0x360>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	f003 0207 	and.w	r2, r3, #7
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4422      	add	r2, r4
 8006460:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006462:	e108      	b.n	8006676 <UART_SetConfig+0x562>
 8006464:	00a037a0 	.word	0x00a037a0
 8006468:	0801a6d4 	.word	0x0801a6d4
 800646c:	40011000 	.word	0x40011000
 8006470:	40011400 	.word	0x40011400
 8006474:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647c:	2200      	movs	r2, #0
 800647e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006482:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006486:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800648a:	4642      	mov	r2, r8
 800648c:	464b      	mov	r3, r9
 800648e:	1891      	adds	r1, r2, r2
 8006490:	6239      	str	r1, [r7, #32]
 8006492:	415b      	adcs	r3, r3
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
 8006496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800649a:	4641      	mov	r1, r8
 800649c:	1854      	adds	r4, r2, r1
 800649e:	4649      	mov	r1, r9
 80064a0:	eb43 0501 	adc.w	r5, r3, r1
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	00eb      	lsls	r3, r5, #3
 80064ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064b2:	00e2      	lsls	r2, r4, #3
 80064b4:	4614      	mov	r4, r2
 80064b6:	461d      	mov	r5, r3
 80064b8:	4643      	mov	r3, r8
 80064ba:	18e3      	adds	r3, r4, r3
 80064bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064c0:	464b      	mov	r3, r9
 80064c2:	eb45 0303 	adc.w	r3, r5, r3
 80064c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064e6:	4629      	mov	r1, r5
 80064e8:	008b      	lsls	r3, r1, #2
 80064ea:	4621      	mov	r1, r4
 80064ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f0:	4621      	mov	r1, r4
 80064f2:	008a      	lsls	r2, r1, #2
 80064f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064f8:	f7f9 fed2 	bl	80002a0 <__aeabi_uldivmod>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4b60      	ldr	r3, [pc, #384]	; (8006684 <UART_SetConfig+0x570>)
 8006502:	fba3 2302 	umull	r2, r3, r3, r2
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	011c      	lsls	r4, r3, #4
 800650a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800650e:	2200      	movs	r2, #0
 8006510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006514:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006518:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800651c:	4642      	mov	r2, r8
 800651e:	464b      	mov	r3, r9
 8006520:	1891      	adds	r1, r2, r2
 8006522:	61b9      	str	r1, [r7, #24]
 8006524:	415b      	adcs	r3, r3
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800652c:	4641      	mov	r1, r8
 800652e:	1851      	adds	r1, r2, r1
 8006530:	6139      	str	r1, [r7, #16]
 8006532:	4649      	mov	r1, r9
 8006534:	414b      	adcs	r3, r1
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006544:	4659      	mov	r1, fp
 8006546:	00cb      	lsls	r3, r1, #3
 8006548:	4651      	mov	r1, sl
 800654a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800654e:	4651      	mov	r1, sl
 8006550:	00ca      	lsls	r2, r1, #3
 8006552:	4610      	mov	r0, r2
 8006554:	4619      	mov	r1, r3
 8006556:	4603      	mov	r3, r0
 8006558:	4642      	mov	r2, r8
 800655a:	189b      	adds	r3, r3, r2
 800655c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006560:	464b      	mov	r3, r9
 8006562:	460a      	mov	r2, r1
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	67bb      	str	r3, [r7, #120]	; 0x78
 8006576:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006584:	4649      	mov	r1, r9
 8006586:	008b      	lsls	r3, r1, #2
 8006588:	4641      	mov	r1, r8
 800658a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800658e:	4641      	mov	r1, r8
 8006590:	008a      	lsls	r2, r1, #2
 8006592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006596:	f7f9 fe83 	bl	80002a0 <__aeabi_uldivmod>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4b39      	ldr	r3, [pc, #228]	; (8006684 <UART_SetConfig+0x570>)
 80065a0:	fba3 1302 	umull	r1, r3, r3, r2
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	2164      	movs	r1, #100	; 0x64
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	3332      	adds	r3, #50	; 0x32
 80065b2:	4a34      	ldr	r2, [pc, #208]	; (8006684 <UART_SetConfig+0x570>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065be:	441c      	add	r4, r3
 80065c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c4:	2200      	movs	r2, #0
 80065c6:	673b      	str	r3, [r7, #112]	; 0x70
 80065c8:	677a      	str	r2, [r7, #116]	; 0x74
 80065ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80065ce:	4642      	mov	r2, r8
 80065d0:	464b      	mov	r3, r9
 80065d2:	1891      	adds	r1, r2, r2
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	415b      	adcs	r3, r3
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065de:	4641      	mov	r1, r8
 80065e0:	1851      	adds	r1, r2, r1
 80065e2:	6039      	str	r1, [r7, #0]
 80065e4:	4649      	mov	r1, r9
 80065e6:	414b      	adcs	r3, r1
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065f6:	4659      	mov	r1, fp
 80065f8:	00cb      	lsls	r3, r1, #3
 80065fa:	4651      	mov	r1, sl
 80065fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006600:	4651      	mov	r1, sl
 8006602:	00ca      	lsls	r2, r1, #3
 8006604:	4610      	mov	r0, r2
 8006606:	4619      	mov	r1, r3
 8006608:	4603      	mov	r3, r0
 800660a:	4642      	mov	r2, r8
 800660c:	189b      	adds	r3, r3, r2
 800660e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006610:	464b      	mov	r3, r9
 8006612:	460a      	mov	r2, r1
 8006614:	eb42 0303 	adc.w	r3, r2, r3
 8006618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	663b      	str	r3, [r7, #96]	; 0x60
 8006624:	667a      	str	r2, [r7, #100]	; 0x64
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006632:	4649      	mov	r1, r9
 8006634:	008b      	lsls	r3, r1, #2
 8006636:	4641      	mov	r1, r8
 8006638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663c:	4641      	mov	r1, r8
 800663e:	008a      	lsls	r2, r1, #2
 8006640:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006644:	f7f9 fe2c 	bl	80002a0 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <UART_SetConfig+0x570>)
 800664e:	fba3 1302 	umull	r1, r3, r3, r2
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	2164      	movs	r1, #100	; 0x64
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	3332      	adds	r3, #50	; 0x32
 8006660:	4a08      	ldr	r2, [pc, #32]	; (8006684 <UART_SetConfig+0x570>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	f003 020f 	and.w	r2, r3, #15
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4422      	add	r2, r4
 8006674:	609a      	str	r2, [r3, #8]
}
 8006676:	bf00      	nop
 8006678:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800667c:	46bd      	mov	sp, r7
 800667e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006682:	bf00      	nop
 8006684:	51eb851f 	.word	0x51eb851f

08006688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006688:	b084      	sub	sp, #16
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	f107 001c 	add.w	r0, r7, #28
 8006696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	2b01      	cmp	r3, #1
 800669e:	d122      	bne.n	80066e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d105      	bne.n	80066da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 f948 	bl	8007970 <USB_CoreReset>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
 80066e4:	e01a      	b.n	800671c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 f93c 	bl	8007970 <USB_CoreReset>
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
 800670e:	e005      	b.n	800671c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	2b01      	cmp	r3, #1
 8006720:	d10b      	bne.n	800673a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f043 0206 	orr.w	r2, r3, #6
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006746:	b004      	add	sp, #16
 8006748:	4770      	bx	lr

0800674a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f043 0201 	orr.w	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f023 0201 	bic.w	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	460b      	mov	r3, r1
 8006798:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d115      	bne.n	80067dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067bc:	2001      	movs	r0, #1
 80067be:	f7fa fe4b 	bl	8001458 <HAL_Delay>
      ms++;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 f865 	bl	8007898 <USB_GetMode>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d01e      	beq.n	8006812 <USB_SetCurrentMode+0x84>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b31      	cmp	r3, #49	; 0x31
 80067d8:	d9f0      	bls.n	80067bc <USB_SetCurrentMode+0x2e>
 80067da:	e01a      	b.n	8006812 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d115      	bne.n	800680e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067ee:	2001      	movs	r0, #1
 80067f0:	f7fa fe32 	bl	8001458 <HAL_Delay>
      ms++;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3301      	adds	r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 f84c 	bl	8007898 <USB_GetMode>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <USB_SetCurrentMode+0x84>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b31      	cmp	r3, #49	; 0x31
 800680a:	d9f0      	bls.n	80067ee <USB_SetCurrentMode+0x60>
 800680c:	e001      	b.n	8006812 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e005      	b.n	800681e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b32      	cmp	r3, #50	; 0x32
 8006816:	d101      	bne.n	800681c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006828:	b084      	sub	sp, #16
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e009      	b.n	800685c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3340      	adds	r3, #64	; 0x40
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	2200      	movs	r2, #0
 8006854:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	3301      	adds	r3, #1
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2b0e      	cmp	r3, #14
 8006860:	d9f2      	bls.n	8006848 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11c      	bne.n	80068a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006876:	f043 0302 	orr.w	r3, r3, #2
 800687a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
 80068a0:	e00b      	b.n	80068ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068c0:	461a      	mov	r2, r3
 80068c2:	2300      	movs	r3, #0
 80068c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	4619      	mov	r1, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d4:	461a      	mov	r2, r3
 80068d6:	680b      	ldr	r3, [r1, #0]
 80068d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d10c      	bne.n	80068fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068e6:	2100      	movs	r1, #0
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f965 	bl	8006bb8 <USB_SetDevSpeed>
 80068ee:	e008      	b.n	8006902 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068f0:	2101      	movs	r1, #1
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f960 	bl	8006bb8 <USB_SetDevSpeed>
 80068f8:	e003      	b.n	8006902 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068fa:	2103      	movs	r1, #3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f95b 	bl	8006bb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006902:	2110      	movs	r1, #16
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f8f3 	bl	8006af0 <USB_FlushTxFifo>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f91f 	bl	8006b58 <USB_FlushRxFifo>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	461a      	mov	r2, r3
 800692c:	2300      	movs	r3, #0
 800692e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006936:	461a      	mov	r2, r3
 8006938:	2300      	movs	r3, #0
 800693a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006942:	461a      	mov	r2, r3
 8006944:	2300      	movs	r3, #0
 8006946:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006948:	2300      	movs	r3, #0
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	e043      	b.n	80069d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006964:	d118      	bne.n	8006998 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	461a      	mov	r2, r3
 800697a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	e013      	b.n	80069aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698e:	461a      	mov	r2, r3
 8006990:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e008      	b.n	80069aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	461a      	mov	r2, r3
 80069a6:	2300      	movs	r3, #0
 80069a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b6:	461a      	mov	r2, r3
 80069b8:	2300      	movs	r3, #0
 80069ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	461a      	mov	r2, r3
 80069ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	3301      	adds	r3, #1
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d3b7      	bcc.n	800694e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	e043      	b.n	8006a6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fa:	d118      	bne.n	8006a2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	e013      	b.n	8006a40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a24:	461a      	mov	r2, r3
 8006a26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	e008      	b.n	8006a40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d3b7      	bcc.n	80069e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d105      	bne.n	8006aa8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f043 0210 	orr.w	r2, r3, #16
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699a      	ldr	r2, [r3, #24]
 8006aac:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <USB_DevInit+0x2c4>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f043 0208 	orr.w	r2, r3, #8
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d107      	bne.n	8006adc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ad4:	f043 0304 	orr.w	r3, r3, #4
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ae8:	b004      	add	sp, #16
 8006aea:	4770      	bx	lr
 8006aec:	803c3800 	.word	0x803c3800

08006af0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3301      	adds	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <USB_FlushTxFifo+0x64>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d901      	bls.n	8006b10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e01b      	b.n	8006b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	daf2      	bge.n	8006afe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	019b      	lsls	r3, r3, #6
 8006b20:	f043 0220 	orr.w	r2, r3, #32
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <USB_FlushTxFifo+0x64>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d901      	bls.n	8006b3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e006      	b.n	8006b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d0f0      	beq.n	8006b28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	00030d40 	.word	0x00030d40

08006b58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4a11      	ldr	r2, [pc, #68]	; (8006bb4 <USB_FlushRxFifo+0x5c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d901      	bls.n	8006b76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e018      	b.n	8006ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	daf2      	bge.n	8006b64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2210      	movs	r2, #16
 8006b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a08      	ldr	r2, [pc, #32]	; (8006bb4 <USB_FlushRxFifo+0x5c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d901      	bls.n	8006b9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e006      	b.n	8006ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	2b10      	cmp	r3, #16
 8006ba4:	d0f0      	beq.n	8006b88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	00030d40 	.word	0x00030d40

08006bb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b085      	sub	sp, #20
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	785b      	ldrb	r3, [r3, #1]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d13a      	bne.n	8006c7c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	2101      	movs	r1, #1
 8006c18:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c24:	4313      	orrs	r3, r2
 8006c26:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d155      	bne.n	8006cea <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	791b      	ldrb	r3, [r3, #4]
 8006c58:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c5a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	059b      	lsls	r3, r3, #22
 8006c60:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c62:	4313      	orrs	r3, r2
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	e036      	b.n	8006cea <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	68f9      	ldr	r1, [r7, #12]
 8006c96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11a      	bne.n	8006cea <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	791b      	ldrb	r3, [r3, #4]
 8006cce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce8:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d161      	bne.n	8006dd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d2a:	d11f      	bne.n	8006d6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	43db      	mvns	r3, r3
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	2101      	movs	r1, #1
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006db0:	4013      	ands	r3, r2
 8006db2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	0159      	lsls	r1, r3, #5
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	440b      	add	r3, r1
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4b35      	ldr	r3, [pc, #212]	; (8006ea8 <USB_DeactivateEndpoint+0x1b0>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]
 8006dd6:	e060      	b.n	8006e9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dee:	d11f      	bne.n	8006e30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	041b      	lsls	r3, r3, #16
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e50:	4013      	ands	r3, r2
 8006e52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	2101      	movs	r1, #1
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e74:	4013      	ands	r3, r2
 8006e76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	0159      	lsls	r1, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	440b      	add	r3, r1
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	4619      	mov	r1, r3
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <USB_DeactivateEndpoint+0x1b4>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	ec337800 	.word	0xec337800
 8006eac:	eff37800 	.word	0xeff37800

08006eb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	f040 815c 	bne.w	800718a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d132      	bne.n	8006f40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ef8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f38:	0cdb      	lsrs	r3, r3, #19
 8006f3a:	04db      	lsls	r3, r3, #19
 8006f3c:	6113      	str	r3, [r2, #16]
 8006f3e:	e074      	b.n	800702a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5a:	0cdb      	lsrs	r3, r3, #19
 8006f5c:	04db      	lsls	r3, r3, #19
 8006f5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6999      	ldr	r1, [r3, #24]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	1e59      	subs	r1, r3, #1
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fa6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006fa8:	4b9d      	ldr	r3, [pc, #628]	; (8007220 <USB_EPStartXfer+0x370>)
 8006faa:	400b      	ands	r3, r1
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	0148      	lsls	r0, r1, #5
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	4401      	add	r1, r0
 8006fb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fd2:	69b9      	ldr	r1, [r7, #24]
 8006fd4:	0148      	lsls	r0, r1, #5
 8006fd6:	69f9      	ldr	r1, [r7, #28]
 8006fd8:	4401      	add	r1, r0
 8006fda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	791b      	ldrb	r3, [r3, #4]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d11f      	bne.n	800702a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007004:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007008:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007028:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d14b      	bne.n	80070c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007044:	461a      	mov	r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	791b      	ldrb	r3, [r3, #4]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d128      	bne.n	80070a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d110      	bne.n	8007086 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e00f      	b.n	80070a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e133      	b.n	8007330 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	0151      	lsls	r1, r2, #5
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	440a      	add	r2, r1
 80070de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d015      	beq.n	800711c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 811b 	beq.w	8007330 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	2101      	movs	r1, #1
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007116:	4313      	orrs	r3, r2
 8007118:	634b      	str	r3, [r1, #52]	; 0x34
 800711a:	e109      	b.n	8007330 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d110      	bne.n	800714e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	e00f      	b.n	800716e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	440a      	add	r2, r1
 8007164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800716c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6919      	ldr	r1, [r3, #16]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	b298      	uxth	r0, r3
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4603      	mov	r3, r0
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fa34 	bl	80075f0 <USB_WritePacket>
 8007188:	e0d2      	b.n	8007330 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a4:	0cdb      	lsrs	r3, r3, #19
 80071a6:	04db      	lsls	r3, r3, #19
 80071a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	0151      	lsls	r1, r2, #5
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	440a      	add	r2, r1
 80071c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d126      	bne.n	8007224 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ec:	69b9      	ldr	r1, [r7, #24]
 80071ee:	0148      	lsls	r0, r1, #5
 80071f0:	69f9      	ldr	r1, [r7, #28]
 80071f2:	4401      	add	r1, r0
 80071f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071f8:	4313      	orrs	r3, r2
 80071fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800721a:	6113      	str	r3, [r2, #16]
 800721c:	e03a      	b.n	8007294 <USB_EPStartXfer+0x3e4>
 800721e:	bf00      	nop
 8007220:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	4413      	add	r3, r2
 800722e:	1e5a      	subs	r2, r3, #1
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	fbb2 f3f3 	udiv	r3, r2, r3
 8007238:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	8afa      	ldrh	r2, [r7, #22]
 8007240:	fb03 f202 	mul.w	r2, r3, r2
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	8afb      	ldrh	r3, [r7, #22]
 8007258:	04d9      	lsls	r1, r3, #19
 800725a:	4b38      	ldr	r3, [pc, #224]	; (800733c <USB_EPStartXfer+0x48c>)
 800725c:	400b      	ands	r3, r1
 800725e:	69b9      	ldr	r1, [r7, #24]
 8007260:	0148      	lsls	r0, r1, #5
 8007262:	69f9      	ldr	r1, [r7, #28]
 8007264:	4401      	add	r1, r0
 8007266:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800726a:	4313      	orrs	r3, r2
 800726c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	4401      	add	r1, r0
 800728c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007290:	4313      	orrs	r3, r2
 8007292:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10d      	bne.n	80072b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	6919      	ldr	r1, [r3, #16]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	460a      	mov	r2, r1
 80072b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	791b      	ldrb	r3, [r3, #4]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d128      	bne.n	8007310 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d110      	bne.n	80072f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	e00f      	b.n	8007310 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800730e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	0151      	lsls	r1, r2, #5
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	440a      	add	r2, r1
 8007326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800732e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	1ff80000 	.word	0x1ff80000

08007340 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 80ce 	bne.w	80074fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d132      	bne.n	80073d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800738c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c8:	0cdb      	lsrs	r3, r3, #19
 80073ca:	04db      	lsls	r3, r3, #19
 80073cc:	6113      	str	r3, [r2, #16]
 80073ce:	e04e      	b.n	800746e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ea:	0cdb      	lsrs	r3, r3, #19
 80073ec:	04db      	lsls	r3, r3, #19
 80073ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800740e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007412:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	429a      	cmp	r2, r3
 800741e:	d903      	bls.n	8007428 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745e:	6939      	ldr	r1, [r7, #16]
 8007460:	0148      	lsls	r0, r1, #5
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	4401      	add	r1, r0
 8007466:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800746a:	4313      	orrs	r3, r2
 800746c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d11e      	bne.n	80074b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007488:	461a      	mov	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e097      	b.n	80075e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8083 	beq.w	80075e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	2101      	movs	r1, #1
 80074ee:	fa01 f303 	lsl.w	r3, r1, r3
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074f8:	4313      	orrs	r3, r2
 80074fa:	634b      	str	r3, [r1, #52]	; 0x34
 80074fc:	e071      	b.n	80075e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	440a      	add	r2, r1
 8007514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007518:	0cdb      	lsrs	r3, r3, #19
 800751a:	04db      	lsls	r3, r3, #19
 800751c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800753c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007540:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	68da      	ldr	r2, [r3, #12]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	0151      	lsls	r1, r2, #5
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	440a      	add	r2, r1
 8007570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007590:	6939      	ldr	r1, [r7, #16]
 8007592:	0148      	lsls	r0, r1, #5
 8007594:	6979      	ldr	r1, [r7, #20]
 8007596:	4401      	add	r1, r0
 8007598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800759c:	4313      	orrs	r3, r2
 800759e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d10d      	bne.n	80075c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6919      	ldr	r1, [r3, #16]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075be:	460a      	mov	r2, r1
 80075c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b089      	sub	sp, #36	; 0x24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4611      	mov	r1, r2
 80075fc:	461a      	mov	r2, r3
 80075fe:	460b      	mov	r3, r1
 8007600:	71fb      	strb	r3, [r7, #7]
 8007602:	4613      	mov	r3, r2
 8007604:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800760e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007612:	2b00      	cmp	r3, #0
 8007614:	d123      	bne.n	800765e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007616:	88bb      	ldrh	r3, [r7, #4]
 8007618:	3303      	adds	r3, #3
 800761a:	089b      	lsrs	r3, r3, #2
 800761c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800761e:	2300      	movs	r3, #0
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	e018      	b.n	8007656 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	031a      	lsls	r2, r3, #12
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	4413      	add	r3, r2
 800762c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007630:	461a      	mov	r2, r3
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	3301      	adds	r3, #1
 800763c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	3301      	adds	r3, #1
 8007642:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	3301      	adds	r3, #1
 8007648:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	3301      	adds	r3, #1
 800764e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	3301      	adds	r3, #1
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	429a      	cmp	r2, r3
 800765c:	d3e2      	bcc.n	8007624 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3724      	adds	r7, #36	; 0x24
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d12c      	bne.n	80076e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	db12      	blt.n	80076c0 <USB_EPSetStall+0x54>
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00f      	beq.n	80076c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	0151      	lsls	r1, r2, #5
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	440a      	add	r2, r1
 80076d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	e02b      	b.n	800773a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	db12      	blt.n	800771a <USB_EPSetStall+0xae>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00f      	beq.n	800771a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	440a      	add	r2, r1
 8007710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007714:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007718:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007738:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d128      	bne.n	80077b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	440a      	add	r2, r1
 800777a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007782:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	791b      	ldrb	r3, [r3, #4]
 8007788:	2b03      	cmp	r3, #3
 800778a:	d003      	beq.n	8007794 <USB_EPClearStall+0x4c>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	791b      	ldrb	r3, [r3, #4]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d138      	bne.n	8007806 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	0151      	lsls	r1, r2, #5
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	440a      	add	r2, r1
 80077aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	e027      	b.n	8007806 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d003      	beq.n	80077e6 <USB_EPClearStall+0x9e>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	791b      	ldrb	r3, [r3, #4]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d10f      	bne.n	8007806 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007804:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800782e:	f023 0303 	bic.w	r3, r3, #3
 8007832:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007842:	f023 0302 	bic.w	r3, r3, #2
 8007846:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007884:	f043 0302 	orr.w	r3, r3, #2
 8007888:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	f003 0301 	and.w	r3, r3, #1
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	460b      	mov	r3, r1
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	333c      	adds	r3, #60	; 0x3c
 80078ca:	3304      	adds	r3, #4
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4a26      	ldr	r2, [pc, #152]	; (800796c <USB_EP0_OutStart+0xb8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d90a      	bls.n	80078ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078e8:	d101      	bne.n	80078ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e037      	b.n	800795e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f4:	461a      	mov	r2, r3
 80078f6:	2300      	movs	r3, #0
 80078f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800790c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791c:	f043 0318 	orr.w	r3, r3, #24
 8007920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007930:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007934:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d10f      	bne.n	800795c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	461a      	mov	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007956:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800795a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	4f54300a 	.word	0x4f54300a

08007970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4a13      	ldr	r2, [pc, #76]	; (80079d4 <USB_CoreReset+0x64>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d901      	bls.n	800798e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e01b      	b.n	80079c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	daf2      	bge.n	800797c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f043 0201 	orr.w	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4a09      	ldr	r2, [pc, #36]	; (80079d4 <USB_CoreReset+0x64>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d901      	bls.n	80079b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e006      	b.n	80079c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d0f0      	beq.n	80079a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	00030d40 	.word	0x00030d40

080079d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80079dc:	4904      	ldr	r1, [pc, #16]	; (80079f0 <MX_FATFS_Init+0x18>)
 80079de:	4805      	ldr	r0, [pc, #20]	; (80079f4 <MX_FATFS_Init+0x1c>)
 80079e0:	f004 fd80 	bl	800c4e4 <FATFS_LinkDriver>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461a      	mov	r2, r3
 80079e8:	4b03      	ldr	r3, [pc, #12]	; (80079f8 <MX_FATFS_Init+0x20>)
 80079ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80079ec:	bf00      	nop
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20001d78 	.word	0x20001d78
 80079f4:	2000000c 	.word	0x2000000c
 80079f8:	20001d74 	.word	0x20001d74

080079fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007a00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <spi_flash_delay>:
static app_flash_drv_t m_spi_flash;
static void spi_flash_delay(void *arg, uint32_t ms);
//static QueueHandle_t m_cmd_queue;

static void spi_flash_delay(void *arg, uint32_t ms)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
    uint32_t now = xTaskGetTickCount();
 8007a16:	f006 fb95 	bl	800e144 <xTaskGetTickCount>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	60fb      	str	r3, [r7, #12]
    vTaskDelayUntil(&now, ms);
 8007a1e:	f107 030c 	add.w	r3, r7, #12
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f006 f9c7 	bl	800ddb8 <vTaskDelayUntil>
}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <storage_flash_initialize>:


void storage_flash_initialize(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
    app_drv_spi_initialize();
 8007a38:	f007 fec4 	bl	800f7c4 <app_drv_spi_initialize>
    m_spi_flash.error = false;
 8007a3c:	4b17      	ldr	r3, [pc, #92]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    m_spi_flash.spi = &hspi1;
 8007a44:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a46:	4a16      	ldr	r2, [pc, #88]	; (8007aa0 <storage_flash_initialize+0x6c>)
 8007a48:	601a      	str	r2, [r3, #0]
    m_spi_flash.callback.spi_cs = app_drv_spi_cs;
 8007a4a:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a4c:	4a15      	ldr	r2, [pc, #84]	; (8007aa4 <storage_flash_initialize+0x70>)
 8007a4e:	615a      	str	r2, [r3, #20]
    m_spi_flash.callback.spi_rx_buffer = app_drv_spi_receive_frame;
 8007a50:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a52:	4a15      	ldr	r2, [pc, #84]	; (8007aa8 <storage_flash_initialize+0x74>)
 8007a54:	609a      	str	r2, [r3, #8]
    m_spi_flash.callback.spi_tx_buffer = app_drv_spi_transmit_frame;
 8007a56:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a58:	4a14      	ldr	r2, [pc, #80]	; (8007aac <storage_flash_initialize+0x78>)
 8007a5a:	605a      	str	r2, [r3, #4]
    m_spi_flash.callback.spi_tx_rx = app_drv_spi_transmit_receive_frame;
 8007a5c:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a5e:	4a14      	ldr	r2, [pc, #80]	; (8007ab0 <storage_flash_initialize+0x7c>)
 8007a60:	60da      	str	r2, [r3, #12]
    m_spi_flash.callback.spi_tx_byte = app_drv_spi_transmit_byte;
 8007a62:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a64:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <storage_flash_initialize+0x80>)
 8007a66:	611a      	str	r2, [r3, #16]
    m_spi_flash.callback.delay_ms = spi_flash_delay;
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a6a:	4a13      	ldr	r2, [pc, #76]	; (8007ab8 <storage_flash_initialize+0x84>)
 8007a6c:	619a      	str	r2, [r3, #24]

    if (app_spi_flash_initialize(&m_spi_flash) == false)
 8007a6e:	480b      	ldr	r0, [pc, #44]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a70:	f007 ff66 	bl	800f940 <app_spi_flash_initialize>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f083 0301 	eor.w	r3, r3, #1
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <storage_flash_initialize+0x64>
    {
        m_spi_flash.error = true;
 8007a80:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <storage_flash_initialize+0x68>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        DEBUG_ERROR("SPI flash error\r\n");
 8007a88:	f009 fe0a 	bl	80116a0 <app_debug_get_ms>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	4a0b      	ldr	r2, [pc, #44]	; (8007abc <storage_flash_initialize+0x88>)
 8007a90:	4619      	mov	r1, r3
 8007a92:	480b      	ldr	r0, [pc, #44]	; (8007ac0 <storage_flash_initialize+0x8c>)
 8007a94:	f009 ff80 	bl	8011998 <app_debug_print_raw>

//    if (!m_cmd_queue)
//    {
//        m_cmd_queue = xQueueCreate(4, sizeof(uint8_t));
//    }
}
 8007a98:	bf00      	nop
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20002db8 	.word	0x20002db8
 8007aa0:	20001bc8 	.word	0x20001bc8
 8007aa4:	0800f8e5 	.word	0x0800f8e5
 8007aa8:	0800f829 	.word	0x0800f829
 8007aac:	0800f7e9 	.word	0x0800f7e9
 8007ab0:	0800f869 	.word	0x0800f869
 8007ab4:	0800f8b1 	.word	0x0800f8b1
 8007ab8:	08007a0d 	.word	0x08007a0d
 8007abc:	0801a710 	.word	0x0801a710
 8007ac0:	0801a714 	.word	0x0801a714

08007ac4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = RES_OK;
 8007ace:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <USER_initialize+0x24>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	701a      	strb	r2, [r3, #0]
    storage_flash_initialize();
 8007ad4:	f7ff ffae 	bl	8007a34 <storage_flash_initialize>
    return Stat;
 8007ad8:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <USER_initialize+0x24>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000009 	.word	0x20000009

08007aec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007af6:	4b06      	ldr	r3, [pc, #24]	; (8007b10 <USER_status+0x24>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <USER_status+0x24>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20000009 	.word	0x20000009

08007b14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	uint32_t i;
	uint32_t addr = sector * APP_SPI_FLASH_SECTOR_SIZE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	031b      	lsls	r3, r3, #12
 8007b28:	613b      	str	r3, [r7, #16]
	DEBUG_VERBOSE("Read data at sector %d to %d\r\n", sector, sector + count);
	for (i=0; i<count; i++)
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	e014      	b.n	8007b5a <USER_read+0x46>
	{
		app_spi_flash_read_bytes(&m_spi_flash, addr, buff, APP_SPI_FLASH_SECTOR_SIZE);
 8007b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	6939      	ldr	r1, [r7, #16]
 8007b38:	480c      	ldr	r0, [pc, #48]	; (8007b6c <USER_read+0x58>)
 8007b3a:	f008 f9d1 	bl	800fee0 <app_spi_flash_read_bytes>
		sector++;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3301      	adds	r3, #1
 8007b42:	607b      	str	r3, [r7, #4]
		buff += APP_SPI_FLASH_SECTOR_SIZE;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4a:	60bb      	str	r3, [r7, #8]
		addr += APP_SPI_FLASH_SECTOR_SIZE;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b52:	613b      	str	r3, [r7, #16]
	for (i=0; i<count; i++)
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	3301      	adds	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d3e6      	bcc.n	8007b30 <USER_read+0x1c>
	}
    return RES_OK;
 8007b62:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20002db8 	.word	0x20002db8

08007b70 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	  /* USER CODE HERE */
	uint32_t i;
	uint32_t addr = sector * APP_SPI_FLASH_SECTOR_SIZE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	031b      	lsls	r3, r3, #12
 8007b84:	613b      	str	r3, [r7, #16]
	for (i=0; i<count ;i++)
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	e018      	b.n	8007bbe <USER_write+0x4e>
	{
		app_spi_flash_erase_sector_4k(&m_spi_flash, sector);
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	4810      	ldr	r0, [pc, #64]	; (8007bd0 <USER_write+0x60>)
 8007b90:	f008 fa58 	bl	8010044 <app_spi_flash_erase_sector_4k>
		app_spi_flash_write(&m_spi_flash, addr, buff, APP_SPI_FLASH_SECTOR_SIZE);
 8007b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	6939      	ldr	r1, [r7, #16]
 8007b9c:	480c      	ldr	r0, [pc, #48]	; (8007bd0 <USER_write+0x60>)
 8007b9e:	f008 f925 	bl	800fdec <app_spi_flash_write>
		sector++;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	607b      	str	r3, [r7, #4]
		buff += APP_SPI_FLASH_SECTOR_SIZE;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bae:	60bb      	str	r3, [r7, #8]
		addr += APP_SPI_FLASH_SECTOR_SIZE;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb6:	613b      	str	r3, [r7, #16]
	for (i=0; i<count ;i++)
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d3e2      	bcc.n	8007b8c <USER_write+0x1c>
	}

    return RES_OK;
 8007bc6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20002db8 	.word	0x20002db8

08007bd4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	603a      	str	r2, [r7, #0]
 8007bde:	71fb      	strb	r3, [r7, #7]
 8007be0:	460b      	mov	r3, r1
 8007be2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	75fb      	strb	r3, [r7, #23]
	switch(cmd)
 8007be8:	79bb      	ldrb	r3, [r7, #6]
 8007bea:	2b19      	cmp	r3, #25
 8007bec:	d876      	bhi.n	8007cdc <USER_ioctl+0x108>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <USER_ioctl+0x20>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c5d 	.word	0x08007c5d
 8007bf8:	08007c7f 	.word	0x08007c7f
 8007bfc:	08007c71 	.word	0x08007c71
 8007c00:	08007c63 	.word	0x08007c63
 8007c04:	08007cdd 	.word	0x08007cdd
 8007c08:	08007cdd 	.word	0x08007cdd
 8007c0c:	08007cdd 	.word	0x08007cdd
 8007c10:	08007cdd 	.word	0x08007cdd
 8007c14:	08007cdd 	.word	0x08007cdd
 8007c18:	08007cdd 	.word	0x08007cdd
 8007c1c:	08007cdd 	.word	0x08007cdd
 8007c20:	08007cdd 	.word	0x08007cdd
 8007c24:	08007cdd 	.word	0x08007cdd
 8007c28:	08007cdd 	.word	0x08007cdd
 8007c2c:	08007cdd 	.word	0x08007cdd
 8007c30:	08007cdd 	.word	0x08007cdd
 8007c34:	08007cdd 	.word	0x08007cdd
 8007c38:	08007cdd 	.word	0x08007cdd
 8007c3c:	08007cdd 	.word	0x08007cdd
 8007c40:	08007cdd 	.word	0x08007cdd
 8007c44:	08007cdd 	.word	0x08007cdd
 8007c48:	08007cdd 	.word	0x08007cdd
 8007c4c:	08007cdd 	.word	0x08007cdd
 8007c50:	08007c8f 	.word	0x08007c8f
 8007c54:	08007ca7 	.word	0x08007ca7
 8007c58:	08007ccd 	.word	0x08007ccd
	{
		case CTRL_SYNC :
			res = RES_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	75fb      	strb	r3, [r7, #23]
			break;
 8007c60:	e03f      	b.n	8007ce2 <USER_ioctl+0x10e>
//				W25X_Erase_Sector(i);
//
//			break;

		case GET_BLOCK_SIZE:
			*(DWORD*)buff = 65536;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007c68:	601a      	str	r2, [r3, #0]
//			DEBUG_INFO ("get block size \r\n");
			res = RES_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	75fb      	strb	r3, [r7, #23]
		//	buf[1] = (u8)(FLASH_BLOCK_SIZE & 0xFF);
		//	buf[0] = (u8)(FLASH_BLOCK_SIZE >> 8);
			break;
 8007c6e:	e038      	b.n	8007ce2 <USER_ioctl+0x10e>


		case GET_SECTOR_SIZE:
			*(DWORD*)buff = APP_SPI_FLASH_SECTOR_SIZE;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007c76:	601a      	str	r2, [r3, #0]
//			DEBUG_INFO ("get sector size \r\n");
			res = RES_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75fb      	strb	r3, [r7, #23]
		//	buf[0] = (u8)(FLASH_SECTOR_SIZE & 0xFF);
		//	buf[1] = (u8)(FLASH_SECTOR_SIZE >> 8);
			break;
 8007c7c:	e031      	b.n	8007ce2 <USER_ioctl+0x10e>

		case GET_SECTOR_COUNT:
			*(DWORD*)buff = m_spi_flash.info.size/APP_SPI_FLASH_SECTOR_SIZE;
 8007c7e:	4b1b      	ldr	r3, [pc, #108]	; (8007cec <USER_ioctl+0x118>)
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	0b1a      	lsrs	r2, r3, #12
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	601a      	str	r2, [r3, #0]
			DEBUG_VERBOSE("User diskio sector count %u\r\n", *(DWORD*)buff);
			res = RES_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]
		//	buf[0] = (u8)(FLASH_SECTOR_COUNT & 0xFF);
		//	buf[1] = (u8)(FLASH_SECTOR_COUNT >> 8);
			break;
 8007c8c:	e029      	b.n	8007ce2 <USER_ioctl+0x10e>

		case DISKIO_CMD_WRITE_RAW:
		{
			user_diskio_raw_cmd_t *cmd = (user_diskio_raw_cmd_t*)buff;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	60bb      	str	r3, [r7, #8]
			app_spi_flash_write(&m_spi_flash, cmd->addr, cmd->buffer, cmd->size);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6819      	ldr	r1, [r3, #0]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	889b      	ldrh	r3, [r3, #4]
 8007c9e:	4813      	ldr	r0, [pc, #76]	; (8007cec <USER_ioctl+0x118>)
 8007ca0:	f008 f8a4 	bl	800fdec <app_spi_flash_write>
		}
			break;
 8007ca4:	e01d      	b.n	8007ce2 <USER_ioctl+0x10e>
		case DISKIO_CMD_READ_RAW:
		{
			user_diskio_raw_cmd_t *cmd = (user_diskio_raw_cmd_t*)buff;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	60fb      	str	r3, [r7, #12]
			app_spi_flash_erase_sector_4k(&m_spi_flash, cmd->addr/APP_SPI_FLASH_SECTOR_SIZE);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	0b1b      	lsrs	r3, r3, #12
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	480e      	ldr	r0, [pc, #56]	; (8007cec <USER_ioctl+0x118>)
 8007cb4:	f008 f9c6 	bl	8010044 <app_spi_flash_erase_sector_4k>
			app_spi_flash_read_bytes(&m_spi_flash, cmd->addr, cmd->buffer, cmd->size);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6819      	ldr	r1, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	889b      	ldrh	r3, [r3, #4]
 8007cc4:	4809      	ldr	r0, [pc, #36]	; (8007cec <USER_ioctl+0x118>)
 8007cc6:	f008 f90b 	bl	800fee0 <app_spi_flash_read_bytes>
		}
			break;
 8007cca:	e00a      	b.n	8007ce2 <USER_ioctl+0x10e>

		case DISKIO_CMD_ERASE:
		{
			DWORD sector = *(DWORD*)buff;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	613b      	str	r3, [r7, #16]
			app_spi_flash_erase_sector_4k(&m_spi_flash, sector);
 8007cd2:	6939      	ldr	r1, [r7, #16]
 8007cd4:	4805      	ldr	r0, [pc, #20]	; (8007cec <USER_ioctl+0x118>)
 8007cd6:	f008 f9b5 	bl	8010044 <app_spi_flash_erase_sector_4k>
		}
			break;
 8007cda:	e002      	b.n	8007ce2 <USER_ioctl+0x10e>

		default:
			res = RES_PARERR;
 8007cdc:	2304      	movs	r3, #4
 8007cde:	75fb      	strb	r3, [r7, #23]
			break;
 8007ce0:	bf00      	nop
	}
	return res;
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END IOCTL */
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20002db8 	.word	0x20002db8

08007cf0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8007cfc:	f241 0074 	movw	r0, #4212	; 0x1074
 8007d00:	f009 fc50 	bl	80115a4 <USBD_static_malloc>
 8007d04:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d109      	bne.n	8007d20 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	32b0      	adds	r2, #176	; 0xb0
 8007d16:	2100      	movs	r1, #0
 8007d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e06e      	b.n	8007dfe <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	32b0      	adds	r2, #176	; 0xb0
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	32b0      	adds	r2, #176	; 0xb0
 8007d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	7c1b      	ldrb	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d12b      	bne.n	8007da4 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007d4c:	4b2e      	ldr	r3, [pc, #184]	; (8007e08 <USBD_MSC_Init+0x118>)
 8007d4e:	7819      	ldrb	r1, [r3, #0]
 8007d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d54:	2202      	movs	r2, #2
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f009 fb2d 	bl	80113b6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007d5c:	4b2a      	ldr	r3, [pc, #168]	; (8007e08 <USBD_MSC_Init+0x118>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f003 020f 	and.w	r2, r3, #15
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	440b      	add	r3, r1
 8007d70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d74:	2201      	movs	r2, #1
 8007d76:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007d78:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <USBD_MSC_Init+0x11c>)
 8007d7a:	7819      	ldrb	r1, [r3, #0]
 8007d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d80:	2202      	movs	r2, #2
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f009 fb17 	bl	80113b6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007d88:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <USBD_MSC_Init+0x11c>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	f003 020f 	and.w	r2, r3, #15
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	3324      	adds	r3, #36	; 0x24
 8007d9e:	2201      	movs	r2, #1
 8007da0:	801a      	strh	r2, [r3, #0]
 8007da2:	e028      	b.n	8007df6 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007da4:	4b18      	ldr	r3, [pc, #96]	; (8007e08 <USBD_MSC_Init+0x118>)
 8007da6:	7819      	ldrb	r1, [r3, #0]
 8007da8:	2340      	movs	r3, #64	; 0x40
 8007daa:	2202      	movs	r2, #2
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f009 fb02 	bl	80113b6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <USBD_MSC_Init+0x118>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	f003 020f 	and.w	r2, r3, #15
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007dca:	2201      	movs	r2, #1
 8007dcc:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007dce:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <USBD_MSC_Init+0x11c>)
 8007dd0:	7819      	ldrb	r1, [r3, #0]
 8007dd2:	2340      	movs	r3, #64	; 0x40
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f009 faed 	bl	80113b6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007ddc:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <USBD_MSC_Init+0x11c>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	f003 020f 	and.w	r2, r3, #15
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	3324      	adds	r3, #36	; 0x24
 8007df2:	2201      	movs	r2, #1
 8007df4:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa2c 	bl	8008254 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000083 	.word	0x20000083
 8007e0c:	20000082 	.word	0x20000082

08007e10 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8007e1c:	4b26      	ldr	r3, [pc, #152]	; (8007eb8 <USBD_MSC_DeInit+0xa8>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f009 faed 	bl	8011402 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8007e28:	4b23      	ldr	r3, [pc, #140]	; (8007eb8 <USBD_MSC_DeInit+0xa8>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	f003 020f 	and.w	r2, r3, #15
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e40:	2200      	movs	r2, #0
 8007e42:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8007e44:	4b1d      	ldr	r3, [pc, #116]	; (8007ebc <USBD_MSC_DeInit+0xac>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f009 fad9 	bl	8011402 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8007e50:	4b1a      	ldr	r3, [pc, #104]	; (8007ebc <USBD_MSC_DeInit+0xac>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	f003 020f 	and.w	r2, r3, #15
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	440b      	add	r3, r1
 8007e64:	3324      	adds	r3, #36	; 0x24
 8007e66:	2200      	movs	r2, #0
 8007e68:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	32b0      	adds	r2, #176	; 0xb0
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d018      	beq.n	8007eae <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fa6f 	bl	8008360 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	32b0      	adds	r2, #176	; 0xb0
 8007e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f009 fb95 	bl	80115c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	32b0      	adds	r2, #176	; 0xb0
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000083 	.word	0x20000083
 8007ebc:	20000082 	.word	0x20000082

08007ec0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	32b0      	adds	r2, #176	; 0xb0
 8007ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e0e1      	b.n	80080b0 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d053      	beq.n	8007fa0 <USBD_MSC_Setup+0xe0>
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	f040 80d1 	bne.w	80080a0 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2bfe      	cmp	r3, #254	; 0xfe
 8007f04:	d002      	beq.n	8007f0c <USBD_MSC_Setup+0x4c>
 8007f06:	2bff      	cmp	r3, #255	; 0xff
 8007f08:	d02a      	beq.n	8007f60 <USBD_MSC_Setup+0xa0>
 8007f0a:	e041      	b.n	8007f90 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	885b      	ldrh	r3, [r3, #2]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d11e      	bne.n	8007f52 <USBD_MSC_Setup+0x92>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	88db      	ldrh	r3, [r3, #6]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d11a      	bne.n	8007f52 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	da15      	bge.n	8007f52 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	33b0      	adds	r3, #176	; 0xb0
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	4798      	blx	r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2201      	movs	r2, #1
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f002 f8a0 	bl	800a08e <USBD_CtlSendData>
 8007f4e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f50:	e025      	b.n	8007f9e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f002 f829 	bl	8009fac <USBD_CtlError>
            ret = USBD_FAIL;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f5e:	e01e      	b.n	8007f9e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	885b      	ldrh	r3, [r3, #2]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10c      	bne.n	8007f82 <USBD_MSC_Setup+0xc2>
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	88db      	ldrh	r3, [r3, #6]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d108      	bne.n	8007f82 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	db03      	blt.n	8007f82 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f9bc 	bl	80082f8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f80:	e00d      	b.n	8007f9e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f002 f811 	bl	8009fac <USBD_CtlError>
            ret = USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8e:	e006      	b.n	8007f9e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f002 f80a 	bl	8009fac <USBD_CtlError>
          ret = USBD_FAIL;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8007f9c:	bf00      	nop
      }
      break;
 8007f9e:	e086      	b.n	80080ae <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b0b      	cmp	r3, #11
 8007fa6:	d872      	bhi.n	800808e <USBD_MSC_Setup+0x1ce>
 8007fa8:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <USBD_MSC_Setup+0xf0>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08007fe1 	.word	0x08007fe1
 8007fb4:	0800805d 	.word	0x0800805d
 8007fb8:	0800808f 	.word	0x0800808f
 8007fbc:	0800808f 	.word	0x0800808f
 8007fc0:	0800808f 	.word	0x0800808f
 8007fc4:	0800808f 	.word	0x0800808f
 8007fc8:	0800808f 	.word	0x0800808f
 8007fcc:	0800808f 	.word	0x0800808f
 8007fd0:	0800808f 	.word	0x0800808f
 8007fd4:	0800808f 	.word	0x0800808f
 8007fd8:	0800800b 	.word	0x0800800b
 8007fdc:	08008035 	.word	0x08008035
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d107      	bne.n	8007ffc <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007fec:	f107 030e 	add.w	r3, r7, #14
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f002 f84a 	bl	800a08e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ffa:	e050      	b.n	800809e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 ffd4 	bl	8009fac <USBD_CtlError>
            ret = USBD_FAIL;
 8008004:	2303      	movs	r3, #3
 8008006:	75fb      	strb	r3, [r7, #23]
          break;
 8008008:	e049      	b.n	800809e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b03      	cmp	r3, #3
 8008014:	d107      	bne.n	8008026 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	3304      	adds	r3, #4
 800801a:	2201      	movs	r2, #1
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f002 f835 	bl	800a08e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008024:	e03b      	b.n	800809e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 ffbf 	bl	8009fac <USBD_CtlError>
            ret = USBD_FAIL;
 800802e:	2303      	movs	r3, #3
 8008030:	75fb      	strb	r3, [r7, #23]
          break;
 8008032:	e034      	b.n	800809e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b03      	cmp	r3, #3
 800803e:	d106      	bne.n	800804e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	885b      	ldrh	r3, [r3, #2]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800804c:	e027      	b.n	800809e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 ffab 	bl	8009fac <USBD_CtlError>
            ret = USBD_FAIL;
 8008056:	2303      	movs	r3, #3
 8008058:	75fb      	strb	r3, [r7, #23]
          break;
 800805a:	e020      	b.n	800809e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b03      	cmp	r3, #3
 8008066:	d119      	bne.n	800809c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	885b      	ldrh	r3, [r3, #2]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d115      	bne.n	800809c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	889b      	ldrh	r3, [r3, #4]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f009 f9e1 	bl	8011440 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	889b      	ldrh	r3, [r3, #4]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fb54 	bl	8008734 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800808c:	e006      	b.n	800809c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 ff8b 	bl	8009fac <USBD_CtlError>
          ret = USBD_FAIL;
 8008096:	2303      	movs	r3, #3
 8008098:	75fb      	strb	r3, [r7, #23]
          break;
 800809a:	e000      	b.n	800809e <USBD_MSC_Setup+0x1de>
          break;
 800809c:	bf00      	nop
      }
      break;
 800809e:	e006      	b.n	80080ae <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 ff82 	bl	8009fac <USBD_CtlError>
      ret = USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	75fb      	strb	r3, [r7, #23]
      break;
 80080ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f961 	bl	8008390 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f98d 	bl	8008408 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008100:	2181      	movs	r1, #129	; 0x81
 8008102:	4812      	ldr	r0, [pc, #72]	; (800814c <USBD_MSC_GetHSCfgDesc+0x54>)
 8008104:	f001 fefb 	bl	8009efe <USBD_GetEpDesc>
 8008108:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800810a:	2101      	movs	r1, #1
 800810c:	480f      	ldr	r0, [pc, #60]	; (800814c <USBD_MSC_GetHSCfgDesc+0x54>)
 800810e:	f001 fef6 	bl	8009efe <USBD_GetEpDesc>
 8008112:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d006      	beq.n	8008128 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	711a      	strb	r2, [r3, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f042 0202 	orr.w	r2, r2, #2
 8008126:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d006      	beq.n	800813c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2200      	movs	r2, #0
 8008132:	711a      	strb	r2, [r3, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f042 0202 	orr.w	r2, r2, #2
 800813a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008142:	4b02      	ldr	r3, [pc, #8]	; (800814c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20000058 	.word	0x20000058

08008150 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008158:	2181      	movs	r1, #129	; 0x81
 800815a:	4812      	ldr	r0, [pc, #72]	; (80081a4 <USBD_MSC_GetFSCfgDesc+0x54>)
 800815c:	f001 fecf 	bl	8009efe <USBD_GetEpDesc>
 8008160:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008162:	2101      	movs	r1, #1
 8008164:	480f      	ldr	r0, [pc, #60]	; (80081a4 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008166:	f001 feca 	bl	8009efe <USBD_GetEpDesc>
 800816a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d006      	beq.n	8008180 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800817a:	711a      	strb	r2, [r3, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d006      	beq.n	8008194 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2200      	movs	r2, #0
 800818a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800818e:	711a      	strb	r2, [r3, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800819a:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000058 	.word	0x20000058

080081a8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80081b0:	2181      	movs	r1, #129	; 0x81
 80081b2:	4812      	ldr	r0, [pc, #72]	; (80081fc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80081b4:	f001 fea3 	bl	8009efe <USBD_GetEpDesc>
 80081b8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80081ba:	2101      	movs	r1, #1
 80081bc:	480f      	ldr	r0, [pc, #60]	; (80081fc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80081be:	f001 fe9e 	bl	8009efe <USBD_GetEpDesc>
 80081c2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d006      	beq.n	80081d8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081d2:	711a      	strb	r2, [r3, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d006      	beq.n	80081ec <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081e6:	711a      	strb	r2, [r3, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80081f2:	4b02      	ldr	r3, [pc, #8]	; (80081fc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000058 	.word	0x20000058

08008200 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	220a      	movs	r2, #10
 800820c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	20000078 	.word	0x20000078

08008220 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	e009      	b.n	8008248 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	33b0      	adds	r3, #176	; 0xb0
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32b0      	adds	r2, #176	; 0xb0
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d039      	beq.n	80082e6 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	33b0      	adds	r3, #176	; 0xb0
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2000      	movs	r0, #0
 80082b6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80082b8:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <MSC_BOT_Init+0x9c>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f009 f8be 	bl	8011440 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <MSC_BOT_Init+0xa0>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f009 f8b8 	bl	8011440 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80082d0:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <MSC_BOT_Init+0x9c>)
 80082d2:	7819      	ldrb	r1, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80082da:	3210      	adds	r2, #16
 80082dc:	231f      	movs	r3, #31
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f009 f92c 	bl	801153c <USBD_LL_PrepareReceive>
 80082e4:	e000      	b.n	80082e8 <MSC_BOT_Init+0x94>
    return;
 80082e6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000083 	.word	0x20000083
 80082f4:	20000082 	.word	0x20000082

080082f8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	32b0      	adds	r2, #176	; 0xb0
 800830a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d01c      	beq.n	8008350 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8008322:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <MSC_BOT_Reset+0x60>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f009 f8c7 	bl	80114bc <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800832e:	4b0b      	ldr	r3, [pc, #44]	; (800835c <MSC_BOT_Reset+0x64>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f009 f8c1 	bl	80114bc <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800833a:	4b08      	ldr	r3, [pc, #32]	; (800835c <MSC_BOT_Reset+0x64>)
 800833c:	7819      	ldrb	r1, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008344:	3210      	adds	r2, #16
 8008346:	231f      	movs	r3, #31
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f009 f8f7 	bl	801153c <USBD_LL_PrepareReceive>
 800834e:	e000      	b.n	8008352 <MSC_BOT_Reset+0x5a>
    return;
 8008350:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20000082 	.word	0x20000082
 800835c:	20000083 	.word	0x20000083

08008360 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	32b0      	adds	r2, #176	; 0xb0
 8008372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008376:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	721a      	strb	r2, [r3, #8]
  }
}
 8008384:	bf00      	nop
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	32b0      	adds	r2, #176	; 0xb0
 80083a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d022      	beq.n	80083f8 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	7a1b      	ldrb	r3, [r3, #8]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d005      	beq.n	80083c6 <MSC_BOT_DataIn+0x36>
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	db1e      	blt.n	80083fc <MSC_BOT_DataIn+0x6c>
 80083be:	3b03      	subs	r3, #3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d81b      	bhi.n	80083fc <MSC_BOT_DataIn+0x6c>
 80083c4:	e013      	b.n	80083ee <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083cc:	7f59      	ldrb	r1, [r3, #29]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d4:	331f      	adds	r3, #31
 80083d6:	461a      	mov	r2, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f9e5 	bl	80087a8 <SCSI_ProcessCmd>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da0d      	bge.n	8008400 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80083e4:	2101      	movs	r1, #1
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f920 	bl	800862c <MSC_BOT_SendCSW>
      }
      break;
 80083ec:	e008      	b.n	8008400 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f91b 	bl	800862c <MSC_BOT_SendCSW>
      break;
 80083f6:	e004      	b.n	8008402 <MSC_BOT_DataIn+0x72>
    return;
 80083f8:	bf00      	nop
 80083fa:	e002      	b.n	8008402 <MSC_BOT_DataIn+0x72>

    default:
      break;
 80083fc:	bf00      	nop
 80083fe:	e000      	b.n	8008402 <MSC_BOT_DataIn+0x72>
      break;
 8008400:	bf00      	nop
  }
}
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	32b0      	adds	r2, #176	; 0xb0
 800841e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008422:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01e      	beq.n	8008468 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	7a1b      	ldrb	r3, [r3, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <MSC_BOT_DataOut+0x30>
 8008432:	2b01      	cmp	r3, #1
 8008434:	d004      	beq.n	8008440 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8008436:	e01a      	b.n	800846e <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f81b 	bl	8008474 <MSC_BOT_CBW_Decode>
      break;
 800843e:	e016      	b.n	800846e <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008446:	7f59      	ldrb	r1, [r3, #29]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800844e:	331f      	adds	r3, #31
 8008450:	461a      	mov	r2, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f9a8 	bl	80087a8 <SCSI_ProcessCmd>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	da06      	bge.n	800846c <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800845e:	2101      	movs	r1, #1
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f8e3 	bl	800862c <MSC_BOT_SendCSW>
      break;
 8008466:	e001      	b.n	800846c <MSC_BOT_DataOut+0x64>
    return;
 8008468:	bf00      	nop
 800846a:	e000      	b.n	800846e <MSC_BOT_DataOut+0x66>
      break;
 800846c:	bf00      	nop
  }
}
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	32b0      	adds	r2, #176	; 0xb0
 8008486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8085 	beq.w	800859e <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084a2:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084b2:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80084b4:	4b3d      	ldr	r3, [pc, #244]	; (80085ac <MSC_BOT_CBW_Decode+0x138>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f009 f85f 	bl	801157e <USBD_LL_GetRxDataSize>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b1f      	cmp	r3, #31
 80084c4:	d118      	bne.n	80084f8 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084cc:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80084ce:	4a38      	ldr	r2, [pc, #224]	; (80085b0 <MSC_BOT_CBW_Decode+0x13c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d111      	bne.n	80084f8 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084da:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d80b      	bhi.n	80084f8 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e6:	7f9b      	ldrb	r3, [r3, #30]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d005      	beq.n	80084f8 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f2:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d90f      	bls.n	8008518 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084fe:	7f59      	ldrb	r1, [r3, #29]
 8008500:	2320      	movs	r3, #32
 8008502:	2205      	movs	r2, #5
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fe79 	bl	80091fc <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2202      	movs	r2, #2
 800850e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f8cb 	bl	80086ac <MSC_BOT_Abort>
 8008516:	e045      	b.n	80085a4 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851e:	7f59      	ldrb	r1, [r3, #29]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008526:	331f      	adds	r3, #31
 8008528:	461a      	mov	r2, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f93c 	bl	80087a8 <SCSI_ProcessCmd>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	da0c      	bge.n	8008550 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	7a1b      	ldrb	r3, [r3, #8]
 800853a:	2b05      	cmp	r3, #5
 800853c:	d104      	bne.n	8008548 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800853e:	2101      	movs	r1, #1
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f873 	bl	800862c <MSC_BOT_SendCSW>
 8008546:	e02d      	b.n	80085a4 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f8af 	bl	80086ac <MSC_BOT_Abort>
 800854e:	e029      	b.n	80085a4 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	7a1b      	ldrb	r3, [r3, #8]
 8008554:	2b02      	cmp	r3, #2
 8008556:	d024      	beq.n	80085a2 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800855c:	2b01      	cmp	r3, #1
 800855e:	d020      	beq.n	80085a2 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008564:	2b03      	cmp	r3, #3
 8008566:	d01c      	beq.n	80085a2 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f103 0110 	add.w	r1, r3, #16
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	461a      	mov	r2, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f819 	bl	80085b4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8008582:	e00f      	b.n	80085a4 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800858c:	2100      	movs	r1, #0
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f84c 	bl	800862c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8008594:	e006      	b.n	80085a4 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f888 	bl	80086ac <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800859c:	e002      	b.n	80085a4 <MSC_BOT_CBW_Decode+0x130>
    return;
 800859e:	bf00      	nop
 80085a0:	e000      	b.n	80085a4 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 80085a2:	bf00      	nop
    }
  }
}
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000083 	.word	0x20000083
 80085b0:	43425355 	.word	0x43425355

080085b4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	32b0      	adds	r2, #176	; 0xb0
 80085ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ce:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d023      	beq.n	800861e <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4293      	cmp	r3, r2
 80085e2:	bf28      	it	cs
 80085e4:	4613      	movcs	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085fa:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008602:	2200      	movs	r2, #0
 8008604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2204      	movs	r2, #4
 800860c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800860e:	4b06      	ldr	r3, [pc, #24]	; (8008628 <MSC_BOT_SendData+0x74>)
 8008610:	7819      	ldrb	r1, [r3, #0]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f008 ff6f 	bl	80114fa <USBD_LL_Transmit>
 800861c:	e000      	b.n	8008620 <MSC_BOT_SendData+0x6c>
    return;
 800861e:	bf00      	nop
}
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000082 	.word	0x20000082

0800862c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	32b0      	adds	r2, #176	; 0xb0
 8008642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008646:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d024      	beq.n	8008698 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008654:	461a      	mov	r2, r3
 8008656:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <MSC_BOT_SendCSW+0x74>)
 8008658:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008660:	461a      	mov	r2, r3
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <MSC_BOT_SendCSW+0x78>)
 8008670:	7819      	ldrb	r1, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8008678:	3210      	adds	r2, #16
 800867a:	230d      	movs	r3, #13
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f008 ff3c 	bl	80114fa <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <MSC_BOT_SendCSW+0x7c>)
 8008684:	7819      	ldrb	r1, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800868c:	3210      	adds	r2, #16
 800868e:	231f      	movs	r3, #31
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f008 ff53 	bl	801153c <USBD_LL_PrepareReceive>
 8008696:	e000      	b.n	800869a <MSC_BOT_SendCSW+0x6e>
    return;
 8008698:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	53425355 	.word	0x53425355
 80086a4:	20000082 	.word	0x20000082
 80086a8:	20000083 	.word	0x20000083

080086ac <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	32b0      	adds	r2, #176	; 0xb0
 80086be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d02c      	beq.n	8008724 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d0:	7f1b      	ldrb	r3, [r3, #28]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10f      	bne.n	80086f6 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086dc:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d009      	beq.n	80086f6 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d105      	bne.n	80086f6 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80086ea:	4b10      	ldr	r3, [pc, #64]	; (800872c <MSC_BOT_Abort+0x80>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f008 fec4 	bl	801147e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80086f6:	4b0e      	ldr	r3, [pc, #56]	; (8008730 <MSC_BOT_Abort+0x84>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f008 febe 	bl	801147e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	7a5b      	ldrb	r3, [r3, #9]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d10d      	bne.n	8008726 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800870a:	4b09      	ldr	r3, [pc, #36]	; (8008730 <MSC_BOT_Abort+0x84>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f008 feb4 	bl	801147e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008716:	4b05      	ldr	r3, [pc, #20]	; (800872c <MSC_BOT_Abort+0x80>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f008 feae 	bl	801147e <USBD_LL_StallEP>
 8008722:	e000      	b.n	8008726 <MSC_BOT_Abort+0x7a>
    return;
 8008724:	bf00      	nop
  }
}
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	20000083 	.word	0x20000083
 8008730:	20000082 	.word	0x20000082

08008734 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	32b0      	adds	r2, #176	; 0xb0
 800874a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01d      	beq.n	8008792 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	7a5b      	ldrb	r3, [r3, #9]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d10c      	bne.n	8008778 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800875e:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <MSC_BOT_CplClrFeature+0x6c>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f008 fe8a 	bl	801147e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800876a:	4b0e      	ldr	r3, [pc, #56]	; (80087a4 <MSC_BOT_CplClrFeature+0x70>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f008 fe84 	bl	801147e <USBD_LL_StallEP>
 8008776:	e00f      	b.n	8008798 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800877c:	2b00      	cmp	r3, #0
 800877e:	da0a      	bge.n	8008796 <MSC_BOT_CplClrFeature+0x62>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	7a5b      	ldrb	r3, [r3, #9]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d006      	beq.n	8008796 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008788:	2101      	movs	r1, #1
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff ff4e 	bl	800862c <MSC_BOT_SendCSW>
 8008790:	e002      	b.n	8008798 <MSC_BOT_CplClrFeature+0x64>
    return;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8008796:	bf00      	nop
  }
}
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000082 	.word	0x20000082
 80087a4:	20000083 	.word	0x20000083

080087a8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	460b      	mov	r3, r1
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	32b0      	adds	r2, #176	; 0xb0
 80087c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80087cc:	f04f 33ff 	mov.w	r3, #4294967295
 80087d0:	e168      	b.n	8008aa4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2baa      	cmp	r3, #170	; 0xaa
 80087d8:	f000 8144 	beq.w	8008a64 <SCSI_ProcessCmd+0x2bc>
 80087dc:	2baa      	cmp	r3, #170	; 0xaa
 80087de:	f300 8153 	bgt.w	8008a88 <SCSI_ProcessCmd+0x2e0>
 80087e2:	2ba8      	cmp	r3, #168	; 0xa8
 80087e4:	f000 812c 	beq.w	8008a40 <SCSI_ProcessCmd+0x298>
 80087e8:	2ba8      	cmp	r3, #168	; 0xa8
 80087ea:	f300 814d 	bgt.w	8008a88 <SCSI_ProcessCmd+0x2e0>
 80087ee:	2b5a      	cmp	r3, #90	; 0x5a
 80087f0:	f300 80c0 	bgt.w	8008974 <SCSI_ProcessCmd+0x1cc>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f2c0 8147 	blt.w	8008a88 <SCSI_ProcessCmd+0x2e0>
 80087fa:	2b5a      	cmp	r3, #90	; 0x5a
 80087fc:	f200 8144 	bhi.w	8008a88 <SCSI_ProcessCmd+0x2e0>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <SCSI_ProcessCmd+0x60>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800897b 	.word	0x0800897b
 800880c:	08008a89 	.word	0x08008a89
 8008810:	08008a89 	.word	0x08008a89
 8008814:	0800898d 	.word	0x0800898d
 8008818:	08008a89 	.word	0x08008a89
 800881c:	08008a89 	.word	0x08008a89
 8008820:	08008a89 	.word	0x08008a89
 8008824:	08008a89 	.word	0x08008a89
 8008828:	08008a89 	.word	0x08008a89
 800882c:	08008a89 	.word	0x08008a89
 8008830:	08008a89 	.word	0x08008a89
 8008834:	08008a89 	.word	0x08008a89
 8008838:	08008a89 	.word	0x08008a89
 800883c:	08008a89 	.word	0x08008a89
 8008840:	08008a89 	.word	0x08008a89
 8008844:	08008a89 	.word	0x08008a89
 8008848:	08008a89 	.word	0x08008a89
 800884c:	08008a89 	.word	0x08008a89
 8008850:	0800899f 	.word	0x0800899f
 8008854:	08008a89 	.word	0x08008a89
 8008858:	08008a89 	.word	0x08008a89
 800885c:	08008a89 	.word	0x08008a89
 8008860:	08008a89 	.word	0x08008a89
 8008864:	08008a89 	.word	0x08008a89
 8008868:	08008a89 	.word	0x08008a89
 800886c:	08008a89 	.word	0x08008a89
 8008870:	080089d5 	.word	0x080089d5
 8008874:	080089b1 	.word	0x080089b1
 8008878:	08008a89 	.word	0x08008a89
 800887c:	08008a89 	.word	0x08008a89
 8008880:	080089c3 	.word	0x080089c3
 8008884:	08008a89 	.word	0x08008a89
 8008888:	08008a89 	.word	0x08008a89
 800888c:	08008a89 	.word	0x08008a89
 8008890:	08008a89 	.word	0x08008a89
 8008894:	080089f9 	.word	0x080089f9
 8008898:	08008a89 	.word	0x08008a89
 800889c:	08008a0b 	.word	0x08008a0b
 80088a0:	08008a89 	.word	0x08008a89
 80088a4:	08008a89 	.word	0x08008a89
 80088a8:	08008a2f 	.word	0x08008a2f
 80088ac:	08008a89 	.word	0x08008a89
 80088b0:	08008a53 	.word	0x08008a53
 80088b4:	08008a89 	.word	0x08008a89
 80088b8:	08008a89 	.word	0x08008a89
 80088bc:	08008a89 	.word	0x08008a89
 80088c0:	08008a89 	.word	0x08008a89
 80088c4:	08008a77 	.word	0x08008a77
 80088c8:	08008a89 	.word	0x08008a89
 80088cc:	08008a89 	.word	0x08008a89
 80088d0:	08008a89 	.word	0x08008a89
 80088d4:	08008a89 	.word	0x08008a89
 80088d8:	08008a89 	.word	0x08008a89
 80088dc:	08008a89 	.word	0x08008a89
 80088e0:	08008a89 	.word	0x08008a89
 80088e4:	08008a89 	.word	0x08008a89
 80088e8:	08008a89 	.word	0x08008a89
 80088ec:	08008a89 	.word	0x08008a89
 80088f0:	08008a89 	.word	0x08008a89
 80088f4:	08008a89 	.word	0x08008a89
 80088f8:	08008a89 	.word	0x08008a89
 80088fc:	08008a89 	.word	0x08008a89
 8008900:	08008a89 	.word	0x08008a89
 8008904:	08008a89 	.word	0x08008a89
 8008908:	08008a89 	.word	0x08008a89
 800890c:	08008a89 	.word	0x08008a89
 8008910:	08008a89 	.word	0x08008a89
 8008914:	08008a89 	.word	0x08008a89
 8008918:	08008a89 	.word	0x08008a89
 800891c:	08008a89 	.word	0x08008a89
 8008920:	08008a89 	.word	0x08008a89
 8008924:	08008a89 	.word	0x08008a89
 8008928:	08008a89 	.word	0x08008a89
 800892c:	08008a89 	.word	0x08008a89
 8008930:	08008a89 	.word	0x08008a89
 8008934:	08008a89 	.word	0x08008a89
 8008938:	08008a89 	.word	0x08008a89
 800893c:	08008a89 	.word	0x08008a89
 8008940:	08008a89 	.word	0x08008a89
 8008944:	08008a89 	.word	0x08008a89
 8008948:	08008a89 	.word	0x08008a89
 800894c:	08008a89 	.word	0x08008a89
 8008950:	08008a89 	.word	0x08008a89
 8008954:	08008a89 	.word	0x08008a89
 8008958:	08008a89 	.word	0x08008a89
 800895c:	08008a89 	.word	0x08008a89
 8008960:	08008a89 	.word	0x08008a89
 8008964:	08008a89 	.word	0x08008a89
 8008968:	08008a89 	.word	0x08008a89
 800896c:	08008a89 	.word	0x08008a89
 8008970:	080089e7 	.word	0x080089e7
 8008974:	2b9e      	cmp	r3, #158	; 0x9e
 8008976:	d051      	beq.n	8008a1c <SCSI_ProcessCmd+0x274>
 8008978:	e086      	b.n	8008a88 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800897a:	7afb      	ldrb	r3, [r7, #11]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	4619      	mov	r1, r3
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f893 	bl	8008aac <SCSI_TestUnitReady>
 8008986:	4603      	mov	r3, r0
 8008988:	75fb      	strb	r3, [r7, #23]
      break;
 800898a:	e089      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	4619      	mov	r1, r3
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 fb98 	bl	80090c8 <SCSI_RequestSense>
 8008998:	4603      	mov	r3, r0
 800899a:	75fb      	strb	r3, [r7, #23]
      break;
 800899c:	e080      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800899e:	7afb      	ldrb	r3, [r7, #11]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	4619      	mov	r1, r3
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f8df 	bl	8008b68 <SCSI_Inquiry>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75fb      	strb	r3, [r7, #23]
      break;
 80089ae:	e077      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	4619      	mov	r1, r3
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fc7c 	bl	80092b4 <SCSI_StartStopUnit>
 80089bc:	4603      	mov	r3, r0
 80089be:	75fb      	strb	r3, [r7, #23]
      break;
 80089c0:	e06e      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80089c2:	7afb      	ldrb	r3, [r7, #11]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	4619      	mov	r1, r3
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fcd0 	bl	800936e <SCSI_AllowPreventRemovable>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]
      break;
 80089d2:	e065      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	4619      	mov	r1, r3
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fb14 	bl	8009008 <SCSI_ModeSense6>
 80089e0:	4603      	mov	r3, r0
 80089e2:	75fb      	strb	r3, [r7, #23]
      break;
 80089e4:	e05c      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80089e6:	7afb      	ldrb	r3, [r7, #11]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	4619      	mov	r1, r3
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 fb3b 	bl	8009068 <SCSI_ModeSense10>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]
      break;
 80089f6:	e053      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4619      	mov	r1, r3
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fa85 	bl	8008f0e <SCSI_ReadFormatCapacity>
 8008a04:	4603      	mov	r3, r0
 8008a06:	75fb      	strb	r3, [r7, #23]
      break;
 8008a08:	e04a      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 f929 	bl	8008c68 <SCSI_ReadCapacity10>
 8008a16:	4603      	mov	r3, r0
 8008a18:	75fb      	strb	r3, [r7, #23]
      break;
 8008a1a:	e041      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8008a1c:	7afb      	ldrb	r3, [r7, #11]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	4619      	mov	r1, r3
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 f9af 	bl	8008d86 <SCSI_ReadCapacity16>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a2c:	e038      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	4619      	mov	r1, r3
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 fccb 	bl	80093d0 <SCSI_Read10>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a3e:	e02f      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8008a40:	7afb      	ldrb	r3, [r7, #11]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	4619      	mov	r1, r3
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fd79 	bl	800953e <SCSI_Read12>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a50:	e026      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	4619      	mov	r1, r3
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fe31 	bl	80096c0 <SCSI_Write10>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	75fb      	strb	r3, [r7, #23]
      break;
 8008a62:	e01d      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 ff0c 	bl	8009888 <SCSI_Write12>
 8008a70:	4603      	mov	r3, r0
 8008a72:	75fb      	strb	r3, [r7, #23]
      break;
 8008a74:	e014      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8008a76:	7afb      	ldrb	r3, [r7, #11]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 fff7 	bl	8009a70 <SCSI_Verify10>
 8008a82:	4603      	mov	r3, r0
 8008a84:	75fb      	strb	r3, [r7, #23]
      break;
 8008a86:	e00b      	b.n	8008aa0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8008a88:	7af9      	ldrb	r1, [r7, #11]
 8008a8a:	2320      	movs	r3, #32
 8008a8c:	2205      	movs	r2, #5
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 fbb4 	bl	80091fc <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2202      	movs	r2, #2
 8008a98:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8008a9a:	23ff      	movs	r3, #255	; 0xff
 8008a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a9e:	bf00      	nop
  }

  return ret;
 8008aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	32b0      	adds	r2, #176	; 0xb0
 8008ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad4:	e043      	b.n	8008b5e <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00b      	beq.n	8008afa <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae8:	7f59      	ldrb	r1, [r3, #29]
 8008aea:	2320      	movs	r3, #32
 8008aec:	2205      	movs	r2, #5
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fb84 	bl	80091fc <SCSI_SenseCode>

    return -1;
 8008af4:	f04f 33ff 	mov.w	r3, #4294967295
 8008af8:	e031      	b.n	8008b5e <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b00:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d10b      	bne.n	8008b20 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008b08:	7af9      	ldrb	r1, [r7, #11]
 8008b0a:	233a      	movs	r3, #58	; 0x3a
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fb74 	bl	80091fc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2205      	movs	r2, #5
 8008b18:	721a      	strb	r2, [r3, #8]
    return -1;
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1e:	e01e      	b.n	8008b5e <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	33b0      	adds	r3, #176	; 0xb0
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	7afa      	ldrb	r2, [r7, #11]
 8008b34:	4610      	mov	r0, r2
 8008b36:	4798      	blx	r3
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00b      	beq.n	8008b56 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008b3e:	7af9      	ldrb	r1, [r7, #11]
 8008b40:	233a      	movs	r3, #58	; 0x3a
 8008b42:	2202      	movs	r2, #2
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 fb59 	bl	80091fc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2205      	movs	r2, #5
 8008b4e:	721a      	strb	r2, [r3, #8]

    return -1;
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295
 8008b54:	e003      	b.n	8008b5e <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	60da      	str	r2, [r3, #12]

  return 0;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	460b      	mov	r3, r1
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	32b0      	adds	r2, #176	; 0xb0
 8008b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b84:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8008b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b90:	e062      	b.n	8008c58 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10b      	bne.n	8008bb6 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba4:	7f59      	ldrb	r1, [r3, #29]
 8008ba6:	2320      	movs	r3, #32
 8008ba8:	2205      	movs	r2, #5
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 fb26 	bl	80091fc <SCSI_SenseCode>
    return -1;
 8008bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb4:	e050      	b.n	8008c58 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d021      	beq.n	8008c08 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3302      	adds	r3, #2
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d105      	bne.n	8008bda <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8008bce:	2206      	movs	r2, #6
 8008bd0:	4923      	ldr	r1, [pc, #140]	; (8008c60 <SCSI_Inquiry+0xf8>)
 8008bd2:	69b8      	ldr	r0, [r7, #24]
 8008bd4:	f001 f8f8 	bl	8009dc8 <SCSI_UpdateBotData>
 8008bd8:	e03d      	b.n	8008c56 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3302      	adds	r3, #2
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b80      	cmp	r3, #128	; 0x80
 8008be2:	d105      	bne.n	8008bf0 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8008be4:	2208      	movs	r2, #8
 8008be6:	491f      	ldr	r1, [pc, #124]	; (8008c64 <SCSI_Inquiry+0xfc>)
 8008be8:	69b8      	ldr	r0, [r7, #24]
 8008bea:	f001 f8ed 	bl	8009dc8 <SCSI_UpdateBotData>
 8008bee:	e032      	b.n	8008c56 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf6:	7f59      	ldrb	r1, [r3, #29]
 8008bf8:	2324      	movs	r3, #36	; 0x24
 8008bfa:	2205      	movs	r2, #5
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fafd 	bl	80091fc <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8008c02:	f04f 33ff 	mov.w	r3, #4294967295
 8008c06:	e027      	b.n	8008c58 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	33b0      	adds	r3, #176	; 0xb0
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	69d9      	ldr	r1, [r3, #28]
 8008c1a:	7afa      	ldrb	r2, [r7, #11]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3305      	adds	r3, #5
 8008c32:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3304      	adds	r3, #4
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	8bfa      	ldrh	r2, [r7, #30]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d303      	bcc.n	8008c4a <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3304      	adds	r3, #4
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8008c4a:	8bfb      	ldrh	r3, [r7, #30]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	6979      	ldr	r1, [r7, #20]
 8008c50:	69b8      	ldr	r0, [r7, #24]
 8008c52:	f001 f8b9 	bl	8009dc8 <SCSI_UpdateBotData>
  }

  return 0;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3720      	adds	r7, #32
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20000084 	.word	0x20000084
 8008c64:	2000008c 	.word	0x2000008c

08008c68 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	460b      	mov	r3, r1
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	32b0      	adds	r2, #176	; 0xb0
 8008c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c84:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d102      	bne.n	8008c92 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8008c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c90:	e075      	b.n	8008d7e <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	33b0      	adds	r3, #176	; 0xb0
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	685c      	ldr	r4, [r3, #4]
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8008caa:	3308      	adds	r3, #8
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8008cb2:	3204      	adds	r2, #4
 8008cb4:	7af8      	ldrb	r0, [r7, #11]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	47a0      	blx	r4
 8008cba:	4603      	mov	r3, r0
 8008cbc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008cbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d106      	bne.n	8008cd4 <SCSI_ReadCapacity10+0x6c>
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ccc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d108      	bne.n	8008ce6 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008cd4:	7af9      	ldrb	r1, [r7, #11]
 8008cd6:	233a      	movs	r3, #58	; 0x3a
 8008cd8:	2202      	movs	r2, #2
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 fa8e 	bl	80091fc <SCSI_SenseCode>
    return -1;
 8008ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce4:	e04b      	b.n	8008d7e <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	0e1b      	lsrs	r3, r3, #24
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d00:	3b01      	subs	r3, #1
 8008d02:	0c1b      	lsrs	r3, r3, #16
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d12:	3b01      	subs	r3, #1
 8008d14:	0a1b      	lsrs	r3, r3, #8
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d38:	161b      	asrs	r3, r3, #24
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d4a:	141b      	asrs	r3, r3, #16
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d5c:	0a1b      	lsrs	r3, r3, #8
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d6c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2208      	movs	r2, #8
 8008d7a:	60da      	str	r2, [r3, #12]

  return 0;
 8008d7c:	2300      	movs	r3, #0

}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd90      	pop	{r4, r7, pc}

08008d86 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008d86:	b590      	push	{r4, r7, lr}
 8008d88:	b089      	sub	sp, #36	; 0x24
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	607a      	str	r2, [r7, #4]
 8008d92:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	32b0      	adds	r2, #176	; 0xb0
 8008d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d102      	bne.n	8008db0 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8008daa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dae:	e0aa      	b.n	8008f06 <SCSI_ReadCapacity16+0x180>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	33b0      	adds	r3, #176	; 0xb0
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	685c      	ldr	r4, [r3, #4]
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8008dc8:	3308      	adds	r3, #8
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8008dd0:	3204      	adds	r2, #4
 8008dd2:	7af8      	ldrb	r0, [r7, #11]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	47a0      	blx	r4
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d106      	bne.n	8008df2 <SCSI_ReadCapacity16+0x6c>
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d108      	bne.n	8008e04 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008df2:	7af9      	ldrb	r1, [r7, #11]
 8008df4:	233a      	movs	r3, #58	; 0x3a
 8008df6:	2202      	movs	r2, #2
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 f9ff 	bl	80091fc <SCSI_SenseCode>
    return -1;
 8008dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008e02:	e080      	b.n	8008f06 <SCSI_ReadCapacity16+0x180>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	330a      	adds	r3, #10
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	330b      	adds	r3, #11
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008e14:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	330c      	adds	r3, #12
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008e1e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	320d      	adds	r2, #13
 8008e24:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008e26:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	77fb      	strb	r3, [r7, #31]
 8008e30:	e007      	b.n	8008e42 <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 8008e32:	7ffb      	ldrb	r3, [r7, #31]
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	4413      	add	r3, r2
 8008e38:	2200      	movs	r2, #0
 8008e3a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008e3c:	7ffb      	ldrb	r3, [r7, #31]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	77fb      	strb	r3, [r7, #31]
 8008e42:	7ffa      	ldrb	r2, [r7, #31]
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d3f2      	bcc.n	8008e32 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e54:	3b01      	subs	r3, #1
 8008e56:	0e1b      	lsrs	r3, r3, #24
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e66:	3b01      	subs	r3, #1
 8008e68:	0c1b      	lsrs	r3, r3, #16
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008e9e:	161b      	asrs	r3, r3, #24
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008eb0:	141b      	asrs	r3, r3, #16
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ebe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008ec2:	0a1b      	lsrs	r3, r3, #8
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	330a      	adds	r3, #10
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	330b      	adds	r3, #11
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008eec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	330c      	adds	r3, #12
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008ef6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	320d      	adds	r2, #13
 8008efc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008efe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	60da      	str	r2, [r3, #12]

  return 0;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3724      	adds	r7, #36	; 0x24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd90      	pop	{r4, r7, pc}

08008f0e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b088      	sub	sp, #32
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	460b      	mov	r3, r1
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	32b0      	adds	r2, #176	; 0xb0
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d102      	bne.n	8008f38 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8008f32:	f04f 33ff 	mov.w	r3, #4294967295
 8008f36:	e063      	b.n	8009000 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	33b0      	adds	r3, #176	; 0xb0
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f107 0214 	add.w	r2, r7, #20
 8008f4e:	f107 0110 	add.w	r1, r7, #16
 8008f52:	7af8      	ldrb	r0, [r7, #11]
 8008f54:	4798      	blx	r3
 8008f56:	4603      	mov	r3, r0
 8008f58:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d106      	bne.n	8008f70 <SCSI_ReadFormatCapacity+0x62>
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f68:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d108      	bne.n	8008f82 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008f70:	7af9      	ldrb	r1, [r7, #11]
 8008f72:	233a      	movs	r3, #58	; 0x3a
 8008f74:	2202      	movs	r2, #2
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 f940 	bl	80091fc <SCSI_SenseCode>
    return -1;
 8008f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f80:	e03e      	b.n	8009000 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8008f82:	2300      	movs	r3, #0
 8008f84:	83fb      	strh	r3, [r7, #30]
 8008f86:	e007      	b.n	8008f98 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8008f88:	8bfb      	ldrh	r3, [r7, #30]
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8008f92:	8bfb      	ldrh	r3, [r7, #30]
 8008f94:	3301      	adds	r3, #1
 8008f96:	83fb      	strh	r3, [r7, #30]
 8008f98:	8bfb      	ldrh	r3, [r7, #30]
 8008f9a:	2b0b      	cmp	r3, #11
 8008f9c:	d9f4      	bls.n	8008f88 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	2208      	movs	r2, #8
 8008fa2:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	0e1b      	lsrs	r3, r3, #24
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	0c1b      	lsrs	r3, r3, #16
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	0a1b      	lsrs	r3, r3, #8
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8008fda:	8abb      	ldrh	r3, [r7, #20]
 8008fdc:	141b      	asrs	r3, r3, #16
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8008fe4:	8abb      	ldrh	r3, [r7, #20]
 8008fe6:	0a1b      	lsrs	r3, r3, #8
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8008ff0:	8abb      	ldrh	r3, [r7, #20]
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	220c      	movs	r2, #12
 8008ffc:	60da      	str	r2, [r3, #12]

  return 0;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3720      	adds	r7, #32
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	460b      	mov	r3, r1
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	32b0      	adds	r2, #176	; 0xb0
 8009020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009024:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8009026:	2317      	movs	r3, #23
 8009028:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d102      	bne.n	8009036 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8009030:	f04f 33ff 	mov.w	r3, #4294967295
 8009034:	e011      	b.n	800905a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3304      	adds	r3, #4
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	b29b      	uxth	r3, r3
 800903e:	8afa      	ldrh	r2, [r7, #22]
 8009040:	429a      	cmp	r2, r3
 8009042:	d303      	bcc.n	800904c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3304      	adds	r3, #4
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800904c:	8afb      	ldrh	r3, [r7, #22]
 800904e:	461a      	mov	r2, r3
 8009050:	4904      	ldr	r1, [pc, #16]	; (8009064 <SCSI_ModeSense6+0x5c>)
 8009052:	6938      	ldr	r0, [r7, #16]
 8009054:	f000 feb8 	bl	8009dc8 <SCSI_UpdateBotData>

  return 0;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20000094 	.word	0x20000094

08009068 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	460b      	mov	r3, r1
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	32b0      	adds	r2, #176	; 0xb0
 8009080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009084:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8009086:	231b      	movs	r3, #27
 8009088:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8009090:	f04f 33ff 	mov.w	r3, #4294967295
 8009094:	e011      	b.n	80090ba <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3308      	adds	r3, #8
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	b29b      	uxth	r3, r3
 800909e:	8afa      	ldrh	r2, [r7, #22]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d303      	bcc.n	80090ac <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3308      	adds	r3, #8
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80090ac:	8afb      	ldrh	r3, [r7, #22]
 80090ae:	461a      	mov	r2, r3
 80090b0:	4904      	ldr	r1, [pc, #16]	; (80090c4 <SCSI_ModeSense10+0x5c>)
 80090b2:	6938      	ldr	r0, [r7, #16]
 80090b4:	f000 fe88 	bl	8009dc8 <SCSI_UpdateBotData>

  return 0;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	200000ac 	.word	0x200000ac

080090c8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	460b      	mov	r3, r1
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	32b0      	adds	r2, #176	; 0xb0
 80090e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d102      	bne.n	80090f2 <SCSI_RequestSense+0x2a>
  {
    return -1;
 80090ec:	f04f 33ff 	mov.w	r3, #4294967295
 80090f0:	e080      	b.n	80091f4 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10b      	bne.n	8009116 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009104:	7f59      	ldrb	r1, [r3, #29]
 8009106:	2320      	movs	r3, #32
 8009108:	2205      	movs	r2, #5
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 f876 	bl	80091fc <SCSI_SenseCode>
    return -1;
 8009110:	f04f 33ff 	mov.w	r3, #4294967295
 8009114:	e06e      	b.n	80091f4 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]
 800911a:	e007      	b.n	800912c <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4413      	add	r3, r2
 8009122:	2200      	movs	r2, #0
 8009124:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	3301      	adds	r3, #1
 800912a:	75fb      	strb	r3, [r7, #23]
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	2b11      	cmp	r3, #17
 8009130:	d9f4      	bls.n	800911c <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2270      	movs	r2, #112	; 0x70
 8009136:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	220c      	movs	r2, #12
 800913c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009144:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800914e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009152:	429a      	cmp	r2, r3
 8009154:	d03f      	beq.n	80091d6 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800915c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009160:	461a      	mov	r2, r3
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8009168:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009176:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009180:	00db      	lsls	r3, r3, #3
 8009182:	4413      	add	r3, r2
 8009184:	791a      	ldrb	r2, [r3, #4]
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009190:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	4413      	add	r3, r2
 800919e:	795a      	ldrb	r2, [r3, #5]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091aa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80091ae:	3301      	adds	r3, #1
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091c2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d105      	bne.n	80091d6 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2212      	movs	r2, #18
 80091da:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3304      	adds	r3, #4
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b12      	cmp	r3, #18
 80091e4:	d805      	bhi.n	80091f2 <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3304      	adds	r3, #4
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	4608      	mov	r0, r1
 8009206:	4611      	mov	r1, r2
 8009208:	461a      	mov	r2, r3
 800920a:	4603      	mov	r3, r0
 800920c:	70fb      	strb	r3, [r7, #3]
 800920e:	460b      	mov	r3, r1
 8009210:	70bb      	strb	r3, [r7, #2]
 8009212:	4613      	mov	r3, r2
 8009214:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	32b0      	adds	r2, #176	; 0xb0
 8009220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009224:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d03d      	beq.n	80092a8 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009232:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009236:	461a      	mov	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800923e:	78b9      	ldrb	r1, [r7, #2]
 8009240:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	4413      	add	r3, r2
 8009258:	787a      	ldrb	r2, [r7, #1]
 800925a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009262:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	4413      	add	r3, r2
 8009270:	2200      	movs	r2, #0
 8009272:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800927e:	3301      	adds	r3, #1
 8009280:	b2da      	uxtb	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009288:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009292:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009296:	2b04      	cmp	r3, #4
 8009298:	d107      	bne.n	80092aa <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80092a6:	e000      	b.n	80092aa <SCSI_SenseCode+0xae>
    return;
 80092a8:	bf00      	nop
  }
}
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	460b      	mov	r3, r1
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	32b0      	adds	r2, #176	; 0xb0
 80092cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d102      	bne.n	80092de <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	e043      	b.n	8009366 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d10f      	bne.n	800930c <SCSI_StartStopUnit+0x58>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3304      	adds	r3, #4
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d108      	bne.n	800930c <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80092fa:	7af9      	ldrb	r1, [r7, #11]
 80092fc:	2324      	movs	r3, #36	; 0x24
 80092fe:	2205      	movs	r2, #5
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7ff ff7b 	bl	80091fc <SCSI_SenseCode>

    return -1;
 8009306:	f04f 33ff 	mov.w	r3, #4294967295
 800930a:	e02c      	b.n	8009366 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3304      	adds	r3, #4
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	f003 0303 	and.w	r3, r3, #3
 8009316:	2b01      	cmp	r3, #1
 8009318:	d106      	bne.n	8009328 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009326:	e01a      	b.n	800935e <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3304      	adds	r3, #4
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	2b02      	cmp	r3, #2
 8009334:	d106      	bne.n	8009344 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800933c:	2202      	movs	r2, #2
 800933e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009342:	e00c      	b.n	800935e <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3304      	adds	r3, #4
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	2b03      	cmp	r3, #3
 8009350:	d105      	bne.n	800935e <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2200      	movs	r2, #0
 8009362:	60da      	str	r2, [r3, #12]

  return 0;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800936e:	b480      	push	{r7}
 8009370:	b087      	sub	sp, #28
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	460b      	mov	r3, r1
 8009378:	607a      	str	r2, [r7, #4]
 800937a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	32b0      	adds	r2, #176	; 0xb0
 8009386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d102      	bne.n	8009398 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8009392:	f04f 33ff 	mov.w	r3, #4294967295
 8009396:	e015      	b.n	80093c4 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3304      	adds	r3, #4
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d106      	bne.n	80093b0 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80093ae:	e005      	b.n	80093bc <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2200      	movs	r2, #0
 80093c0:	60da      	str	r2, [r3, #12]

  return 0;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	371c      	adds	r7, #28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	460b      	mov	r3, r1
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	32b0      	adds	r2, #176	; 0xb0
 80093e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <SCSI_Read10+0x2a>
  {
    return -1;
 80093f4:	f04f 33ff 	mov.w	r3, #4294967295
 80093f8:	e09d      	b.n	8009536 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	7a1b      	ldrb	r3, [r3, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f040 808f 	bne.w	8009522 <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800940a:	7f1b      	ldrb	r3, [r3, #28]
 800940c:	b25b      	sxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	db0b      	blt.n	800942a <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009418:	7f59      	ldrb	r1, [r3, #29]
 800941a:	2320      	movs	r3, #32
 800941c:	2205      	movs	r2, #5
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff feec 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009424:	f04f 33ff 	mov.w	r3, #4294967295
 8009428:	e085      	b.n	8009536 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009430:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009434:	2b02      	cmp	r3, #2
 8009436:	d108      	bne.n	800944a <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009438:	7af9      	ldrb	r1, [r7, #11]
 800943a:	233a      	movs	r3, #58	; 0x3a
 800943c:	2202      	movs	r2, #2
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff fedc 	bl	80091fc <SCSI_SenseCode>

      return -1;
 8009444:	f04f 33ff 	mov.w	r3, #4294967295
 8009448:	e075      	b.n	8009536 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	33b0      	adds	r3, #176	; 0xb0
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	7afa      	ldrb	r2, [r7, #11]
 800945e:	4610      	mov	r0, r2
 8009460:	4798      	blx	r3
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d008      	beq.n	800947a <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009468:	7af9      	ldrb	r1, [r7, #11]
 800946a:	233a      	movs	r3, #58	; 0x3a
 800946c:	2202      	movs	r2, #2
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f7ff fec4 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009474:	f04f 33ff 	mov.w	r3, #4294967295
 8009478:	e05d      	b.n	8009536 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	3302      	adds	r3, #2
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	3303      	adds	r3, #3
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800948a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3304      	adds	r3, #4
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009494:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	3205      	adds	r2, #5
 800949a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800949c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094a4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	3307      	adds	r3, #7
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	021b      	lsls	r3, r3, #8
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	3208      	adds	r2, #8
 80094b2:	7812      	ldrb	r2, [r2, #0]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094bc:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ce:	7af9      	ldrb	r1, [r7, #11]
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fb0c 	bl	8009aee <SCSI_CheckAddressRange>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da02      	bge.n	80094e2 <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80094dc:	f04f 33ff 	mov.w	r3, #4294967295
 80094e0:	e029      	b.n	8009536 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e8:	699a      	ldr	r2, [r3, #24]
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f2:	6979      	ldr	r1, [r7, #20]
 80094f4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80094f8:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 80094fc:	fb01 f303 	mul.w	r3, r1, r3
 8009500:	429a      	cmp	r2, r3
 8009502:	d00b      	beq.n	800951c <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800950a:	7f59      	ldrb	r1, [r3, #29]
 800950c:	2320      	movs	r3, #32
 800950e:	2205      	movs	r2, #5
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7ff fe73 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009516:	f04f 33ff 	mov.w	r3, #4294967295
 800951a:	e00c      	b.n	8009536 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2202      	movs	r2, #2
 8009520:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009528:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800952a:	7afb      	ldrb	r3, [r7, #11]
 800952c:	4619      	mov	r1, r3
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 fb0a 	bl	8009b48 <SCSI_ProcessRead>
 8009534:	4603      	mov	r3, r0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b086      	sub	sp, #24
 8009542:	af00      	add	r7, sp, #0
 8009544:	60f8      	str	r0, [r7, #12]
 8009546:	460b      	mov	r3, r1
 8009548:	607a      	str	r2, [r7, #4]
 800954a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	32b0      	adds	r2, #176	; 0xb0
 8009556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d102      	bne.n	8009568 <SCSI_Read12+0x2a>
  {
    return -1;
 8009562:	f04f 33ff 	mov.w	r3, #4294967295
 8009566:	e0a7      	b.n	80096b8 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	7a1b      	ldrb	r3, [r3, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8099 	bne.w	80096a4 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009578:	7f1b      	ldrb	r3, [r3, #28]
 800957a:	b25b      	sxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	db0b      	blt.n	8009598 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009586:	7f59      	ldrb	r1, [r3, #29]
 8009588:	2320      	movs	r3, #32
 800958a:	2205      	movs	r2, #5
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f7ff fe35 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009592:	f04f 33ff 	mov.w	r3, #4294967295
 8009596:	e08f      	b.n	80096b8 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d108      	bne.n	80095b8 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80095a6:	7af9      	ldrb	r1, [r7, #11]
 80095a8:	233a      	movs	r3, #58	; 0x3a
 80095aa:	2202      	movs	r2, #2
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f7ff fe25 	bl	80091fc <SCSI_SenseCode>
      return -1;
 80095b2:	f04f 33ff 	mov.w	r3, #4294967295
 80095b6:	e07f      	b.n	80096b8 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	33b0      	adds	r3, #176	; 0xb0
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	7afa      	ldrb	r2, [r7, #11]
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d008      	beq.n	80095e8 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80095d6:	7af9      	ldrb	r1, [r7, #11]
 80095d8:	233a      	movs	r3, #58	; 0x3a
 80095da:	2202      	movs	r2, #2
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f7ff fe0d 	bl	80091fc <SCSI_SenseCode>
      return -1;
 80095e2:	f04f 33ff 	mov.w	r3, #4294967295
 80095e6:	e067      	b.n	80096b8 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3302      	adds	r3, #2
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3303      	adds	r3, #3
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80095f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3304      	adds	r3, #4
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009602:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	3205      	adds	r2, #5
 8009608:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800960a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009612:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3306      	adds	r3, #6
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3307      	adds	r3, #7
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009624:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3308      	adds	r3, #8
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800962e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	3209      	adds	r2, #9
 8009634:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8009636:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800963e:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009646:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009650:	7af9      	ldrb	r1, [r7, #11]
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f000 fa4b 	bl	8009aee <SCSI_CheckAddressRange>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	da02      	bge.n	8009664 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	e029      	b.n	80096b8 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966a:	699a      	ldr	r2, [r3, #24]
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009674:	6979      	ldr	r1, [r7, #20]
 8009676:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800967a:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800967e:	fb01 f303 	mul.w	r3, r1, r3
 8009682:	429a      	cmp	r2, r3
 8009684:	d00b      	beq.n	800969e <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800968c:	7f59      	ldrb	r1, [r3, #29]
 800968e:	2320      	movs	r3, #32
 8009690:	2205      	movs	r2, #5
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff fdb2 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009698:	f04f 33ff 	mov.w	r3, #4294967295
 800969c:	e00c      	b.n	80096b8 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2202      	movs	r2, #2
 80096a2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096aa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80096ac:	7afb      	ldrb	r3, [r7, #11]
 80096ae:	4619      	mov	r1, r3
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 fa49 	bl	8009b48 <SCSI_ProcessRead>
 80096b6:	4603      	mov	r3, r0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	460b      	mov	r3, r1
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	32b0      	adds	r2, #176	; 0xb0
 80096d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096dc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d102      	bne.n	80096ea <SCSI_Write10+0x2a>
  {
    return -1;
 80096e4:	f04f 33ff 	mov.w	r3, #4294967295
 80096e8:	e0c7      	b.n	800987a <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	7a1b      	ldrb	r3, [r3, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f040 80bd 	bne.w	800986e <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10b      	bne.n	8009718 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009706:	7f59      	ldrb	r1, [r3, #29]
 8009708:	2320      	movs	r3, #32
 800970a:	2205      	movs	r2, #5
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff fd75 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009712:	f04f 33ff 	mov.w	r3, #4294967295
 8009716:	e0b0      	b.n	800987a <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971e:	7f1b      	ldrb	r3, [r3, #28]
 8009720:	b25b      	sxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	da0b      	bge.n	800973e <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800972c:	7f59      	ldrb	r1, [r3, #29]
 800972e:	2320      	movs	r3, #32
 8009730:	2205      	movs	r2, #5
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f7ff fd62 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009738:	f04f 33ff 	mov.w	r3, #4294967295
 800973c:	e09d      	b.n	800987a <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	33b0      	adds	r3, #176	; 0xb0
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	7afa      	ldrb	r2, [r7, #11]
 8009752:	4610      	mov	r0, r2
 8009754:	4798      	blx	r3
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d008      	beq.n	800976e <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800975c:	7af9      	ldrb	r1, [r7, #11]
 800975e:	233a      	movs	r3, #58	; 0x3a
 8009760:	2202      	movs	r2, #2
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff fd4a 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009768:	f04f 33ff 	mov.w	r3, #4294967295
 800976c:	e085      	b.n	800987a <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	33b0      	adds	r3, #176	; 0xb0
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	7afa      	ldrb	r2, [r7, #11]
 8009782:	4610      	mov	r0, r2
 8009784:	4798      	blx	r3
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d008      	beq.n	800979e <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800978c:	7af9      	ldrb	r1, [r7, #11]
 800978e:	2327      	movs	r3, #39	; 0x27
 8009790:	2202      	movs	r2, #2
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff fd32 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009798:	f04f 33ff 	mov.w	r3, #4294967295
 800979c:	e06d      	b.n	800987a <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3302      	adds	r3, #2
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	3303      	adds	r3, #3
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80097ae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3304      	adds	r3, #4
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80097b8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	3205      	adds	r2, #5
 80097be:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80097c0:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80097c8:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3307      	adds	r3, #7
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	3208      	adds	r2, #8
 80097d6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80097d8:	4313      	orrs	r3, r2
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80097e0:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	7af9      	ldrb	r1, [r7, #11]
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f97a 	bl	8009aee <SCSI_CheckAddressRange>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da02      	bge.n	8009806 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009800:	f04f 33ff 	mov.w	r3, #4294967295
 8009804:	e039      	b.n	800987a <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800980c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009814:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009818:	fb02 f303 	mul.w	r3, r2, r3
 800981c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	429a      	cmp	r2, r3
 800982a:	d00b      	beq.n	8009844 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009832:	7f59      	ldrb	r1, [r3, #29]
 8009834:	2320      	movs	r3, #32
 8009836:	2205      	movs	r2, #5
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff fcdf 	bl	80091fc <SCSI_SenseCode>
      return -1;
 800983e:	f04f 33ff 	mov.w	r3, #4294967295
 8009842:	e01a      	b.n	800987a <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800984a:	bf28      	it	cs
 800984c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009850:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2201      	movs	r2, #1
 8009856:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <SCSI_Write10+0x1c4>)
 800985a:	7819      	ldrb	r1, [r3, #0]
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f103 0210 	add.w	r2, r3, #16
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f007 fe69 	bl	801153c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800986a:	2300      	movs	r3, #0
 800986c:	e005      	b.n	800987a <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	4619      	mov	r1, r3
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f9fe 	bl	8009c74 <SCSI_ProcessWrite>
 8009878:	4603      	mov	r3, r0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20000083 	.word	0x20000083

08009888 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	460b      	mov	r3, r1
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	32b0      	adds	r2, #176	; 0xb0
 80098a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <SCSI_Write12+0x2a>
  {
    return -1;
 80098ac:	f04f 33ff 	mov.w	r3, #4294967295
 80098b0:	e0d7      	b.n	8009a62 <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	7a1b      	ldrb	r3, [r3, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f040 80cd 	bne.w	8009a56 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10b      	bne.n	80098e0 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ce:	7f59      	ldrb	r1, [r3, #29]
 80098d0:	2320      	movs	r3, #32
 80098d2:	2205      	movs	r2, #5
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7ff fc91 	bl	80091fc <SCSI_SenseCode>
      return -1;
 80098da:	f04f 33ff 	mov.w	r3, #4294967295
 80098de:	e0c0      	b.n	8009a62 <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e6:	7f1b      	ldrb	r3, [r3, #28]
 80098e8:	b25b      	sxtb	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	da0b      	bge.n	8009906 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098f4:	7f59      	ldrb	r1, [r3, #29]
 80098f6:	2320      	movs	r3, #32
 80098f8:	2205      	movs	r2, #5
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f7ff fc7e 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	e0ad      	b.n	8009a62 <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	33b0      	adds	r3, #176	; 0xb0
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	7afa      	ldrb	r2, [r7, #11]
 800991a:	4610      	mov	r0, r2
 800991c:	4798      	blx	r3
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009924:	7af9      	ldrb	r1, [r7, #11]
 8009926:	233a      	movs	r3, #58	; 0x3a
 8009928:	2202      	movs	r2, #2
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f7ff fc66 	bl	80091fc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	2205      	movs	r2, #5
 8009934:	721a      	strb	r2, [r3, #8]
      return -1;
 8009936:	f04f 33ff 	mov.w	r3, #4294967295
 800993a:	e092      	b.n	8009a62 <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	33b0      	adds	r3, #176	; 0xb0
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	7afa      	ldrb	r2, [r7, #11]
 8009950:	4610      	mov	r0, r2
 8009952:	4798      	blx	r3
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00b      	beq.n	8009972 <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800995a:	7af9      	ldrb	r1, [r7, #11]
 800995c:	2327      	movs	r3, #39	; 0x27
 800995e:	2202      	movs	r2, #2
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f7ff fc4b 	bl	80091fc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2205      	movs	r2, #5
 800996a:	721a      	strb	r2, [r3, #8]
      return -1;
 800996c:	f04f 33ff 	mov.w	r3, #4294967295
 8009970:	e077      	b.n	8009a62 <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3302      	adds	r3, #2
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3303      	adds	r3, #3
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009982:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800998c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	3205      	adds	r2, #5
 8009992:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8009994:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800999c:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3306      	adds	r3, #6
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3307      	adds	r3, #7
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80099ae:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3308      	adds	r3, #8
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80099b8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	3209      	adds	r2, #9
 80099be:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80099c0:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099c8:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099da:	7af9      	ldrb	r1, [r7, #11]
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 f886 	bl	8009aee <SCSI_CheckAddressRange>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	da02      	bge.n	80099ee <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	e039      	b.n	8009a62 <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099fc:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009a00:	fb02 f303 	mul.w	r3, r2, r3
 8009a04:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d00b      	beq.n	8009a2c <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a1a:	7f59      	ldrb	r1, [r3, #29]
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	2205      	movs	r2, #5
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7ff fbeb 	bl	80091fc <SCSI_SenseCode>
      return -1;
 8009a26:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2a:	e01a      	b.n	8009a62 <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a32:	bf28      	it	cs
 8009a34:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009a38:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <SCSI_Write12+0x1e4>)
 8009a42:	7819      	ldrb	r1, [r3, #0]
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	f103 0210 	add.w	r2, r3, #16
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f007 fd75 	bl	801153c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	e005      	b.n	8009a62 <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 8009a56:	7afb      	ldrb	r3, [r7, #11]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 f90a 	bl	8009c74 <SCSI_ProcessWrite>
 8009a60:	4603      	mov	r3, r0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20000083 	.word	0x20000083

08009a70 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	32b0      	adds	r2, #176	; 0xb0
 8009a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <SCSI_Verify10+0x2a>
  {
    return -1;
 8009a94:	f04f 33ff 	mov.w	r3, #4294967295
 8009a98:	e025      	b.n	8009ae6 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d008      	beq.n	8009aba <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009aa8:	7af9      	ldrb	r1, [r7, #11]
 8009aaa:	2324      	movs	r3, #36	; 0x24
 8009aac:	2205      	movs	r2, #5
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7ff fba4 	bl	80091fc <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8009ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab8:	e015      	b.n	8009ae6 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aca:	7af9      	ldrb	r1, [r7, #11]
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 f80e 	bl	8009aee <SCSI_CheckAddressRange>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	da02      	bge.n	8009ade <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 8009ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8009adc:	e003      	b.n	8009ae6 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	60da      	str	r2, [r3, #12]

  return 0;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b086      	sub	sp, #24
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
 8009afa:	460b      	mov	r3, r1
 8009afc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	32b0      	adds	r2, #176	; 0xb0
 8009b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d102      	bne.n	8009b1a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8009b14:	f04f 33ff 	mov.w	r3, #4294967295
 8009b18:	e012      	b.n	8009b40 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	441a      	add	r2, r3
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d908      	bls.n	8009b3e <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8009b2c:	7af9      	ldrb	r1, [r7, #11]
 8009b2e:	2321      	movs	r3, #33	; 0x21
 8009b30:	2205      	movs	r2, #5
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7ff fb62 	bl	80091fc <SCSI_SenseCode>
    return -1;
 8009b38:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3c:	e000      	b.n	8009b40 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009b48:	b590      	push	{r4, r7, lr}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	32b0      	adds	r2, #176	; 0xb0
 8009b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b62:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d102      	bne.n	8009b70 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8009b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6e:	e07b      	b.n	8009c68 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b7e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009b82:	fb02 f303 	mul.w	r3, r2, r3
 8009b86:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b8e:	bf28      	it	cs
 8009b90:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009b94:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	33b0      	adds	r3, #176	; 0xb0
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	691c      	ldr	r4, [r3, #16]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f103 0110 	add.w	r1, r3, #16
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	78f8      	ldrb	r0, [r7, #3]
 8009bcc:	47a0      	blx	r4
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da08      	bge.n	8009be6 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8009bd4:	78f9      	ldrb	r1, [r7, #3]
 8009bd6:	2311      	movs	r3, #17
 8009bd8:	2204      	movs	r2, #4
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff fb0e 	bl	80091fc <SCSI_SenseCode>
    return -1;
 8009be0:	f04f 33ff 	mov.w	r3, #4294967295
 8009be4:	e040      	b.n	8009c68 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8009be6:	4b22      	ldr	r3, [pc, #136]	; (8009c70 <SCSI_ProcessRead+0x128>)
 8009be8:	7819      	ldrb	r1, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f103 0210 	add.w	r2, r3, #16
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f007 fc81 	bl	80114fa <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c12:	4413      	add	r3, r2
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c1a:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009c2e:	4619      	mov	r1, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c3e:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c52:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d102      	bne.n	8009c66 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2203      	movs	r2, #3
 8009c64:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd90      	pop	{r4, r7, pc}
 8009c70:	20000082 	.word	0x20000082

08009c74 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009c74:	b590      	push	{r4, r7, lr}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	32b0      	adds	r2, #176	; 0xb0
 8009c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d102      	bne.n	8009c9c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8009c96:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9a:	e08e      	b.n	8009dba <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009caa:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009cae:	fb02 f303 	mul.w	r3, r2, r3
 8009cb2:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cba:	bf28      	it	cs
 8009cbc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009cc0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	33b0      	adds	r3, #176	; 0xb0
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	695c      	ldr	r4, [r3, #20]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f103 0110 	add.w	r1, r3, #16
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009cec:	4618      	mov	r0, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	78f8      	ldrb	r0, [r7, #3]
 8009cf8:	47a0      	blx	r4
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	da08      	bge.n	8009d12 <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8009d00:	78f9      	ldrb	r1, [r7, #3]
 8009d02:	2303      	movs	r3, #3
 8009d04:	2204      	movs	r2, #4
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fa78 	bl	80091fc <SCSI_SenseCode>
    return -1;
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d10:	e053      	b.n	8009dba <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d20:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d24:	4619      	mov	r1, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d2c:	4413      	add	r3, r2
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d34:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d48:	4619      	mov	r1, r3
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d58:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d6c:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d104      	bne.n	8009d84 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7fe fc55 	bl	800862c <MSC_BOT_SendCSW>
 8009d82:	e019      	b.n	8009db8 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d92:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009d96:	fb02 f303 	mul.w	r3, r2, r3
 8009d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d9e:	bf28      	it	cs
 8009da0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009da4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009da6:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <SCSI_ProcessWrite+0x150>)
 8009da8:	7819      	ldrb	r1, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f103 0210 	add.w	r2, r3, #16
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f007 fbc2 	bl	801153c <USBD_LL_PrepareReceive>
  }

  return 0;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd90      	pop	{r4, r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000083 	.word	0x20000083

08009dc8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d102      	bne.n	8009de6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8009de0:	f04f 33ff 	mov.w	r3, #4294967295
 8009de4:	e013      	b.n	8009e0e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8009de6:	8afa      	ldrh	r2, [r7, #22]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8009dec:	e00b      	b.n	8009e06 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8009dee:	8afb      	ldrh	r3, [r7, #22]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8009df4:	8afb      	ldrh	r3, [r7, #22]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	441a      	add	r2, r3
 8009dfa:	8afb      	ldrh	r3, [r7, #22]
 8009dfc:	7811      	ldrb	r1, [r2, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	460a      	mov	r2, r1
 8009e04:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8009e06:	8afb      	ldrh	r3, [r7, #22]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1f0      	bne.n	8009dee <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b086      	sub	sp, #24
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	4613      	mov	r3, r2
 8009e26:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e01f      	b.n	8009e72 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	79fa      	ldrb	r2, [r7, #7]
 8009e64:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f007 fa3e 	bl	80112e8 <USBD_LL_Init>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e025      	b.n	8009ede <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	32ae      	adds	r2, #174	; 0xae
 8009ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00f      	beq.n	8009ece <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	32ae      	adds	r2, #174	; 0xae
 8009eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	f107 020e 	add.w	r2, r7, #14
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	4798      	blx	r3
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f007 fa46 	bl	8011380 <USBD_LL_Start>
 8009ef4:	4603      	mov	r3, r0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b086      	sub	sp, #24
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	885b      	ldrh	r3, [r3, #2]
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d920      	bls.n	8009f68 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009f2e:	e013      	b.n	8009f58 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009f30:	f107 030a 	add.w	r3, r7, #10
 8009f34:	4619      	mov	r1, r3
 8009f36:	6978      	ldr	r0, [r7, #20]
 8009f38:	f000 f81b 	bl	8009f72 <USBD_GetNextDesc>
 8009f3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	2b05      	cmp	r3, #5
 8009f44:	d108      	bne.n	8009f58 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	789b      	ldrb	r3, [r3, #2]
 8009f4e:	78fa      	ldrb	r2, [r7, #3]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d008      	beq.n	8009f66 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	885b      	ldrh	r3, [r3, #2]
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	897b      	ldrh	r3, [r7, #10]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d8e5      	bhi.n	8009f30 <USBD_GetEpDesc+0x32>
 8009f64:	e000      	b.n	8009f68 <USBD_GetEpDesc+0x6a>
          break;
 8009f66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009f68:	693b      	ldr	r3, [r7, #16]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b085      	sub	sp, #20
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	881a      	ldrh	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	4413      	add	r3, r2
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fb6:	2180      	movs	r1, #128	; 0x80
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f007 fa60 	bl	801147e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f007 fa5c 	bl	801147e <USBD_LL_StallEP>
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d036      	beq.n	800a052 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009fe8:	6938      	ldr	r0, [r7, #16]
 8009fea:	f000 f836 	bl	800a05a <USBD_GetLen>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	4413      	add	r3, r2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	7812      	ldrb	r2, [r2, #0]
 800a006:	701a      	strb	r2, [r3, #0]
  idx++;
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	3301      	adds	r3, #1
 800a00c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	4413      	add	r3, r2
 800a014:	2203      	movs	r2, #3
 800a016:	701a      	strb	r2, [r3, #0]
  idx++;
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	3301      	adds	r3, #1
 800a01c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a01e:	e013      	b.n	800a048 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	4413      	add	r3, r2
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	7812      	ldrb	r2, [r2, #0]
 800a02a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	3301      	adds	r3, #1
 800a030:	613b      	str	r3, [r7, #16]
    idx++;
 800a032:	7dfb      	ldrb	r3, [r7, #23]
 800a034:	3301      	adds	r3, #1
 800a036:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	4413      	add	r3, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	701a      	strb	r2, [r3, #0]
    idx++;
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	3301      	adds	r3, #1
 800a046:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e7      	bne.n	800a020 <USBD_GetString+0x52>
 800a050:	e000      	b.n	800a054 <USBD_GetString+0x86>
    return;
 800a052:	bf00      	nop
  }
}
 800a054:	3718      	adds	r7, #24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b085      	sub	sp, #20
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a06a:	e005      	b.n	800a078 <USBD_GetLen+0x1e>
  {
    len++;
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	3301      	adds	r3, #1
 800a070:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	3301      	adds	r3, #1
 800a076:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1f5      	bne.n	800a06c <USBD_GetLen+0x12>
  }

  return len;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2202      	movs	r2, #2
 800a09e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f007 fa20 	bl	80114fa <USBD_LL_Transmit>

  return USBD_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	4a08      	ldr	r2, [pc, #32]	; (800a0f4 <disk_status+0x30>)
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	79fa      	ldrb	r2, [r7, #7]
 800a0dc:	4905      	ldr	r1, [pc, #20]	; (800a0f4 <disk_status+0x30>)
 800a0de:	440a      	add	r2, r1
 800a0e0:	7a12      	ldrb	r2, [r2, #8]
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4798      	blx	r3
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20002e18 	.word	0x20002e18

0800a0f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	4a0d      	ldr	r2, [pc, #52]	; (800a140 <disk_initialize+0x48>)
 800a10a:	5cd3      	ldrb	r3, [r2, r3]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d111      	bne.n	800a134 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a110:	79fb      	ldrb	r3, [r7, #7]
 800a112:	4a0b      	ldr	r2, [pc, #44]	; (800a140 <disk_initialize+0x48>)
 800a114:	2101      	movs	r1, #1
 800a116:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a118:	79fb      	ldrb	r3, [r7, #7]
 800a11a:	4a09      	ldr	r2, [pc, #36]	; (800a140 <disk_initialize+0x48>)
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	79fa      	ldrb	r2, [r7, #7]
 800a126:	4906      	ldr	r1, [pc, #24]	; (800a140 <disk_initialize+0x48>)
 800a128:	440a      	add	r2, r1
 800a12a:	7a12      	ldrb	r2, [r2, #8]
 800a12c:	4610      	mov	r0, r2
 800a12e:	4798      	blx	r3
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	20002e18 	.word	0x20002e18

0800a144 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a144:	b590      	push	{r4, r7, lr}
 800a146:	b087      	sub	sp, #28
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60b9      	str	r1, [r7, #8]
 800a14c:	607a      	str	r2, [r7, #4]
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	4a0a      	ldr	r2, [pc, #40]	; (800a180 <disk_read+0x3c>)
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	689c      	ldr	r4, [r3, #8]
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	4a07      	ldr	r2, [pc, #28]	; (800a180 <disk_read+0x3c>)
 800a164:	4413      	add	r3, r2
 800a166:	7a18      	ldrb	r0, [r3, #8]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	47a0      	blx	r4
 800a170:	4603      	mov	r3, r0
 800a172:	75fb      	strb	r3, [r7, #23]
  return res;
 800a174:	7dfb      	ldrb	r3, [r7, #23]
}
 800a176:	4618      	mov	r0, r3
 800a178:	371c      	adds	r7, #28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd90      	pop	{r4, r7, pc}
 800a17e:	bf00      	nop
 800a180:	20002e18 	.word	0x20002e18

0800a184 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a184:	b590      	push	{r4, r7, lr}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60b9      	str	r1, [r7, #8]
 800a18c:	607a      	str	r2, [r7, #4]
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a194:	7bfb      	ldrb	r3, [r7, #15]
 800a196:	4a0a      	ldr	r2, [pc, #40]	; (800a1c0 <disk_write+0x3c>)
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	68dc      	ldr	r4, [r3, #12]
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	4a07      	ldr	r2, [pc, #28]	; (800a1c0 <disk_write+0x3c>)
 800a1a4:	4413      	add	r3, r2
 800a1a6:	7a18      	ldrb	r0, [r3, #8]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	47a0      	blx	r4
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd90      	pop	{r4, r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20002e18 	.word	0x20002e18

0800a1c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	603a      	str	r2, [r7, #0]
 800a1ce:	71fb      	strb	r3, [r7, #7]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a1d4:	79fb      	ldrb	r3, [r7, #7]
 800a1d6:	4a09      	ldr	r2, [pc, #36]	; (800a1fc <disk_ioctl+0x38>)
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	79fa      	ldrb	r2, [r7, #7]
 800a1e2:	4906      	ldr	r1, [pc, #24]	; (800a1fc <disk_ioctl+0x38>)
 800a1e4:	440a      	add	r2, r1
 800a1e6:	7a10      	ldrb	r0, [r2, #8]
 800a1e8:	79b9      	ldrb	r1, [r7, #6]
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	4798      	blx	r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  return res;
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20002e18 	.word	0x20002e18

0800a200 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3301      	adds	r3, #1
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a210:	89fb      	ldrh	r3, [r7, #14]
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	b21a      	sxth	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	b21b      	sxth	r3, r3
 800a21c:	4313      	orrs	r3, r2
 800a21e:	b21b      	sxth	r3, r3
 800a220:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a222:	89fb      	ldrh	r3, [r7, #14]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3303      	adds	r3, #3
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	3202      	adds	r2, #2
 800a248:	7812      	ldrb	r2, [r2, #0]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	3201      	adds	r2, #1
 800a256:	7812      	ldrb	r2, [r2, #0]
 800a258:	4313      	orrs	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	021b      	lsls	r3, r3, #8
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	7812      	ldrb	r2, [r2, #0]
 800a264:	4313      	orrs	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
	return rv;
 800a268:	68fb      	ldr	r3, [r7, #12]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	460b      	mov	r3, r1
 800a280:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	887a      	ldrh	r2, [r7, #2]
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	887b      	ldrh	r3, [r7, #2]
 800a290:	0a1b      	lsrs	r3, r3, #8
 800a292:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	607a      	str	r2, [r7, #4]
 800a29a:	887a      	ldrh	r2, [r7, #2]
 800a29c:	b2d2      	uxtb	r2, r2
 800a29e:	701a      	strb	r2, [r3, #0]
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	1c5a      	adds	r2, r3, #1
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	b2d2      	uxtb	r2, r2
 800a2c0:	701a      	strb	r2, [r3, #0]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	0a1b      	lsrs	r3, r3, #8
 800a2c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	607a      	str	r2, [r7, #4]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	b2d2      	uxtb	r2, r2
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	0a1b      	lsrs	r3, r3, #8
 800a2d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	0a1b      	lsrs	r3, r3, #8
 800a2ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	607a      	str	r2, [r7, #4]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	b2d2      	uxtb	r2, r2
 800a2f6:	701a      	strb	r2, [r3, #0]
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00d      	beq.n	800a33a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	1c53      	adds	r3, r2, #1
 800a322:	613b      	str	r3, [r7, #16]
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	1c59      	adds	r1, r3, #1
 800a328:	6179      	str	r1, [r7, #20]
 800a32a:	7812      	ldrb	r2, [r2, #0]
 800a32c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3b01      	subs	r3, #1
 800a332:	607b      	str	r3, [r7, #4]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1f1      	bne.n	800a31e <mem_cpy+0x1a>
	}
}
 800a33a:	bf00      	nop
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a346:	b480      	push	{r7}
 800a348:	b087      	sub	sp, #28
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	617a      	str	r2, [r7, #20]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	b2d2      	uxtb	r2, r2
 800a360:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3b01      	subs	r3, #1
 800a366:	607b      	str	r3, [r7, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1f3      	bne.n	800a356 <mem_set+0x10>
}
 800a36e:	bf00      	nop
 800a370:	bf00      	nop
 800a372:	371c      	adds	r7, #28
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <chk_chr>:
	return r;
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a386:	e002      	b.n	800a38e <chk_chr+0x12>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3301      	adds	r3, #1
 800a38c:	607b      	str	r3, [r7, #4]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <chk_chr+0x26>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d1f2      	bne.n	800a388 <chk_chr+0xc>
	return *str;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d009      	beq.n	800a3d4 <lock_fs+0x22>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f002 f98f 	bl	800c6e8 <ff_req_grant>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <lock_fs+0x22>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e000      	b.n	800a3d6 <lock_fs+0x24>
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00d      	beq.n	800a40c <unlock_fs+0x2e>
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	2b0c      	cmp	r3, #12
 800a3f4:	d00a      	beq.n	800a40c <unlock_fs+0x2e>
 800a3f6:	78fb      	ldrb	r3, [r7, #3]
 800a3f8:	2b0b      	cmp	r3, #11
 800a3fa:	d007      	beq.n	800a40c <unlock_fs+0x2e>
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	2b0f      	cmp	r3, #15
 800a400:	d004      	beq.n	800a40c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	4618      	mov	r0, r3
 800a408:	f002 f983 	bl	800c712 <ff_rel_grant>
	}
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e010      	b.n	800a444 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a422:	4a0d      	ldr	r2, [pc, #52]	; (800a458 <clear_lock+0x44>)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	011b      	lsls	r3, r3, #4
 800a428:	4413      	add	r3, r2
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d105      	bne.n	800a43e <clear_lock+0x2a>
 800a432:	4a09      	ldr	r2, [pc, #36]	; (800a458 <clear_lock+0x44>)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	011b      	lsls	r3, r3, #4
 800a438:	4413      	add	r3, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3301      	adds	r3, #1
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d9eb      	bls.n	800a422 <clear_lock+0xe>
	}
}
 800a44a:	bf00      	nop
 800a44c:	bf00      	nop
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	20002df8 	.word	0x20002df8

0800a45c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	78db      	ldrb	r3, [r3, #3]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d034      	beq.n	800a4da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	7858      	ldrb	r0, [r3, #1]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a480:	2301      	movs	r3, #1
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	f7ff fe7e 	bl	800a184 <disk_write>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a48e:	2301      	movs	r3, #1
 800a490:	73fb      	strb	r3, [r7, #15]
 800a492:	e022      	b.n	800a4da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	1ad2      	subs	r2, r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d217      	bcs.n	800a4da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	789b      	ldrb	r3, [r3, #2]
 800a4ae:	613b      	str	r3, [r7, #16]
 800a4b0:	e010      	b.n	800a4d4 <sync_window+0x78>
					wsect += fs->fsize;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	7858      	ldrb	r0, [r3, #1]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	f7ff fe5b 	bl	800a184 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	613b      	str	r3, [r7, #16]
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d8eb      	bhi.n	800a4b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d01b      	beq.n	800a534 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff ffad 	bl	800a45c <sync_window>
 800a502:	4603      	mov	r3, r0
 800a504:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d113      	bne.n	800a534 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	7858      	ldrb	r0, [r3, #1]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a516:	2301      	movs	r3, #1
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	f7ff fe13 	bl	800a144 <disk_read>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d004      	beq.n	800a52e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7ff ff87 	bl	800a45c <sync_window>
 800a54e:	4603      	mov	r3, r0
 800a550:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d159      	bne.n	800a60c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	d149      	bne.n	800a5f4 <sync_fs+0xb4>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	791b      	ldrb	r3, [r3, #4]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d145      	bne.n	800a5f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	899b      	ldrh	r3, [r3, #12]
 800a572:	461a      	mov	r2, r3
 800a574:	2100      	movs	r1, #0
 800a576:	f7ff fee6 	bl	800a346 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	333c      	adds	r3, #60	; 0x3c
 800a57e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a582:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a586:	4618      	mov	r0, r3
 800a588:	f7ff fe75 	bl	800a276 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	333c      	adds	r3, #60	; 0x3c
 800a590:	4921      	ldr	r1, [pc, #132]	; (800a618 <sync_fs+0xd8>)
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff fe8a 	bl	800a2ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	333c      	adds	r3, #60	; 0x3c
 800a59c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a5a0:	491e      	ldr	r1, [pc, #120]	; (800a61c <sync_fs+0xdc>)
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7ff fe82 	bl	800a2ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	333c      	adds	r3, #60	; 0x3c
 800a5ac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f7ff fe78 	bl	800a2ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	333c      	adds	r3, #60	; 0x3c
 800a5c0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f7ff fe6e 	bl	800a2ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	7858      	ldrb	r0, [r3, #1]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	f7ff fdcb 	bl	800a184 <disk_write>
			fs->fsi_flag = 0;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	785b      	ldrb	r3, [r3, #1]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fde1 	bl	800a1c4 <disk_ioctl>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <sync_fs+0xcc>
 800a608:	2301      	movs	r3, #1
 800a60a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	41615252 	.word	0x41615252
 800a61c:	61417272 	.word	0x61417272

0800a620 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	3b02      	subs	r3, #2
 800a62e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	3b02      	subs	r3, #2
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d301      	bcc.n	800a640 <clust2sect+0x20>
 800a63c:	2300      	movs	r3, #0
 800a63e:	e008      	b.n	800a652 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	895b      	ldrh	r3, [r3, #10]
 800a644:	461a      	mov	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	fb03 f202 	mul.w	r2, r3, r2
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a650:	4413      	add	r3, r2
}
 800a652:	4618      	mov	r0, r3
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b086      	sub	sp, #24
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d904      	bls.n	800a67e <get_fat+0x20>
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d302      	bcc.n	800a684 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a67e:	2301      	movs	r3, #1
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	e0bb      	b.n	800a7fc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a684:	f04f 33ff 	mov.w	r3, #4294967295
 800a688:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b03      	cmp	r3, #3
 800a690:	f000 8083 	beq.w	800a79a <get_fat+0x13c>
 800a694:	2b03      	cmp	r3, #3
 800a696:	f300 80a7 	bgt.w	800a7e8 <get_fat+0x18a>
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d002      	beq.n	800a6a4 <get_fat+0x46>
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d056      	beq.n	800a750 <get_fat+0xf2>
 800a6a2:	e0a1      	b.n	800a7e8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	085b      	lsrs	r3, r3, #1
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	899b      	ldrh	r3, [r3, #12]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6c2:	4413      	add	r3, r2
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6938      	ldr	r0, [r7, #16]
 800a6c8:	f7ff ff0c 	bl	800a4e4 <move_window>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f040 808d 	bne.w	800a7ee <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	60fa      	str	r2, [r7, #12]
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	8992      	ldrh	r2, [r2, #12]
 800a6de:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6e2:	fb01 f202 	mul.w	r2, r1, r2
 800a6e6:	1a9b      	subs	r3, r3, r2
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	899b      	ldrh	r3, [r3, #12]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800a702:	4413      	add	r3, r2
 800a704:	4619      	mov	r1, r3
 800a706:	6938      	ldr	r0, [r7, #16]
 800a708:	f7ff feec 	bl	800a4e4 <move_window>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d16f      	bne.n	800a7f2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	899b      	ldrh	r3, [r3, #12]
 800a716:	461a      	mov	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a71e:	fb01 f202 	mul.w	r2, r1, r2
 800a722:	1a9b      	subs	r3, r3, r2
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	4413      	add	r3, r2
 800a728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a72c:	021b      	lsls	r3, r3, #8
 800a72e:	461a      	mov	r2, r3
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4313      	orrs	r3, r2
 800a734:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <get_fat+0xe8>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	091b      	lsrs	r3, r3, #4
 800a744:	e002      	b.n	800a74c <get_fat+0xee>
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a74c:	617b      	str	r3, [r7, #20]
			break;
 800a74e:	e055      	b.n	800a7fc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	899b      	ldrh	r3, [r3, #12]
 800a758:	085b      	lsrs	r3, r3, #1
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4619      	mov	r1, r3
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	fbb3 f3f1 	udiv	r3, r3, r1
 800a764:	4413      	add	r3, r2
 800a766:	4619      	mov	r1, r3
 800a768:	6938      	ldr	r0, [r7, #16]
 800a76a:	f7ff febb 	bl	800a4e4 <move_window>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d140      	bne.n	800a7f6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	005b      	lsls	r3, r3, #1
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	8992      	ldrh	r2, [r2, #12]
 800a782:	fbb3 f0f2 	udiv	r0, r3, r2
 800a786:	fb00 f202 	mul.w	r2, r0, r2
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	440b      	add	r3, r1
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fd36 	bl	800a200 <ld_word>
 800a794:	4603      	mov	r3, r0
 800a796:	617b      	str	r3, [r7, #20]
			break;
 800a798:	e030      	b.n	800a7fc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	899b      	ldrh	r3, [r3, #12]
 800a7a2:	089b      	lsrs	r3, r3, #2
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7ae:	4413      	add	r3, r2
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6938      	ldr	r0, [r7, #16]
 800a7b4:	f7ff fe96 	bl	800a4e4 <move_window>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d11d      	bne.n	800a7fa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	8992      	ldrh	r2, [r2, #12]
 800a7cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7d0:	fb00 f202 	mul.w	r2, r0, r2
 800a7d4:	1a9b      	subs	r3, r3, r2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff fd29 	bl	800a230 <ld_dword>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7e4:	617b      	str	r3, [r7, #20]
			break;
 800a7e6:	e009      	b.n	800a7fc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	e006      	b.n	800a7fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7ee:	bf00      	nop
 800a7f0:	e004      	b.n	800a7fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7f2:	bf00      	nop
 800a7f4:	e002      	b.n	800a7fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7f6:	bf00      	nop
 800a7f8:	e000      	b.n	800a7fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7fa:	bf00      	nop
		}
	}

	return val;
 800a7fc:	697b      	ldr	r3, [r7, #20]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a806:	b590      	push	{r4, r7, lr}
 800a808:	b089      	sub	sp, #36	; 0x24
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a812:	2302      	movs	r3, #2
 800a814:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	f240 8102 	bls.w	800aa22 <put_fat+0x21c>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	429a      	cmp	r2, r3
 800a826:	f080 80fc 	bcs.w	800aa22 <put_fat+0x21c>
		switch (fs->fs_type) {
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b03      	cmp	r3, #3
 800a830:	f000 80b6 	beq.w	800a9a0 <put_fat+0x19a>
 800a834:	2b03      	cmp	r3, #3
 800a836:	f300 80fd 	bgt.w	800aa34 <put_fat+0x22e>
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d003      	beq.n	800a846 <put_fat+0x40>
 800a83e:	2b02      	cmp	r3, #2
 800a840:	f000 8083 	beq.w	800a94a <put_fat+0x144>
 800a844:	e0f6      	b.n	800aa34 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	61bb      	str	r3, [r7, #24]
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	085b      	lsrs	r3, r3, #1
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	4413      	add	r3, r2
 800a852:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	899b      	ldrh	r3, [r3, #12]
 800a85c:	4619      	mov	r1, r3
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	fbb3 f3f1 	udiv	r3, r3, r1
 800a864:	4413      	add	r3, r2
 800a866:	4619      	mov	r1, r3
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f7ff fe3b 	bl	800a4e4 <move_window>
 800a86e:	4603      	mov	r3, r0
 800a870:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a872:	7ffb      	ldrb	r3, [r7, #31]
 800a874:	2b00      	cmp	r3, #0
 800a876:	f040 80d6 	bne.w	800aa26 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	61ba      	str	r2, [r7, #24]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	8992      	ldrh	r2, [r2, #12]
 800a88a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a88e:	fb00 f202 	mul.w	r2, r0, r2
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	440b      	add	r3, r1
 800a896:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00d      	beq.n	800a8be <put_fat+0xb8>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	b25b      	sxtb	r3, r3
 800a8a8:	f003 030f 	and.w	r3, r3, #15
 800a8ac:	b25a      	sxtb	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	b25b      	sxtb	r3, r3
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	b25b      	sxtb	r3, r3
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	e001      	b.n	800a8c2 <put_fat+0xbc>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	899b      	ldrh	r3, [r3, #12]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8dc:	4413      	add	r3, r2
 800a8de:	4619      	mov	r1, r3
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f7ff fdff 	bl	800a4e4 <move_window>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8ea:	7ffb      	ldrb	r3, [r7, #31]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f040 809c 	bne.w	800aa2a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	899b      	ldrh	r3, [r3, #12]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	fbb3 f0f2 	udiv	r0, r3, r2
 800a904:	fb00 f202 	mul.w	r2, r0, r2
 800a908:	1a9b      	subs	r3, r3, r2
 800a90a:	440b      	add	r3, r1
 800a90c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <put_fat+0x11a>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	091b      	lsrs	r3, r3, #4
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	e00e      	b.n	800a93e <put_fat+0x138>
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	b25b      	sxtb	r3, r3
 800a926:	f023 030f 	bic.w	r3, r3, #15
 800a92a:	b25a      	sxtb	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	0a1b      	lsrs	r3, r3, #8
 800a930:	b25b      	sxtb	r3, r3
 800a932:	f003 030f 	and.w	r3, r3, #15
 800a936:	b25b      	sxtb	r3, r3
 800a938:	4313      	orrs	r3, r2
 800a93a:	b25b      	sxtb	r3, r3
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	70da      	strb	r2, [r3, #3]
			break;
 800a948:	e074      	b.n	800aa34 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	899b      	ldrh	r3, [r3, #12]
 800a952:	085b      	lsrs	r3, r3, #1
 800a954:	b29b      	uxth	r3, r3
 800a956:	4619      	mov	r1, r3
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a95e:	4413      	add	r3, r2
 800a960:	4619      	mov	r1, r3
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f7ff fdbe 	bl	800a4e4 <move_window>
 800a968:	4603      	mov	r3, r0
 800a96a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a96c:	7ffb      	ldrb	r3, [r7, #31]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d15d      	bne.n	800aa2e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	8992      	ldrh	r2, [r2, #12]
 800a980:	fbb3 f0f2 	udiv	r0, r3, r2
 800a984:	fb00 f202 	mul.w	r2, r0, r2
 800a988:	1a9b      	subs	r3, r3, r2
 800a98a:	440b      	add	r3, r1
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	b292      	uxth	r2, r2
 800a990:	4611      	mov	r1, r2
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff fc6f 	bl	800a276 <st_word>
			fs->wflag = 1;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2201      	movs	r2, #1
 800a99c:	70da      	strb	r2, [r3, #3]
			break;
 800a99e:	e049      	b.n	800aa34 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	899b      	ldrh	r3, [r3, #12]
 800a9a8:	089b      	lsrs	r3, r3, #2
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9b4:	4413      	add	r3, r2
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff fd93 	bl	800a4e4 <move_window>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9c2:	7ffb      	ldrb	r3, [r7, #31]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d134      	bne.n	800aa32 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	8992      	ldrh	r2, [r2, #12]
 800a9dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9e0:	fb00 f202 	mul.w	r2, r0, r2
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	440b      	add	r3, r1
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff fc21 	bl	800a230 <ld_dword>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9f4:	4323      	orrs	r3, r4
 800a9f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	8992      	ldrh	r2, [r2, #12]
 800aa06:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa0a:	fb00 f202 	mul.w	r2, r0, r2
 800aa0e:	1a9b      	subs	r3, r3, r2
 800aa10:	440b      	add	r3, r1
 800aa12:	6879      	ldr	r1, [r7, #4]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff fc49 	bl	800a2ac <st_dword>
			fs->wflag = 1;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	70da      	strb	r2, [r3, #3]
			break;
 800aa20:	e008      	b.n	800aa34 <put_fat+0x22e>
		}
	}
 800aa22:	bf00      	nop
 800aa24:	e006      	b.n	800aa34 <put_fat+0x22e>
			if (res != FR_OK) break;
 800aa26:	bf00      	nop
 800aa28:	e004      	b.n	800aa34 <put_fat+0x22e>
			if (res != FR_OK) break;
 800aa2a:	bf00      	nop
 800aa2c:	e002      	b.n	800aa34 <put_fat+0x22e>
			if (res != FR_OK) break;
 800aa2e:	bf00      	nop
 800aa30:	e000      	b.n	800aa34 <put_fat+0x22e>
			if (res != FR_OK) break;
 800aa32:	bf00      	nop
	return res;
 800aa34:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3724      	adds	r7, #36	; 0x24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd90      	pop	{r4, r7, pc}

0800aa3e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b088      	sub	sp, #32
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10d      	bne.n	800aa70 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d004      	beq.n	800aa6a <create_chain+0x2c>
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d31b      	bcc.n	800aaa2 <create_chain+0x64>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	61bb      	str	r3, [r7, #24]
 800aa6e:	e018      	b.n	800aaa2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7ff fdf3 	bl	800a65e <get_fat>
 800aa78:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d801      	bhi.n	800aa84 <create_chain+0x46>
 800aa80:	2301      	movs	r3, #1
 800aa82:	e070      	b.n	800ab66 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8a:	d101      	bne.n	800aa90 <create_chain+0x52>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	e06a      	b.n	800ab66 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d201      	bcs.n	800aa9e <create_chain+0x60>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	e063      	b.n	800ab66 <create_chain+0x128>
		scl = clst;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	69fa      	ldr	r2, [r7, #28]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d307      	bcc.n	800aac6 <create_chain+0x88>
				ncl = 2;
 800aab6:	2302      	movs	r3, #2
 800aab8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aaba:	69fa      	ldr	r2, [r7, #28]
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d901      	bls.n	800aac6 <create_chain+0x88>
 800aac2:	2300      	movs	r3, #0
 800aac4:	e04f      	b.n	800ab66 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aac6:	69f9      	ldr	r1, [r7, #28]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff fdc8 	bl	800a65e <get_fat>
 800aace:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00e      	beq.n	800aaf4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d003      	beq.n	800aae4 <create_chain+0xa6>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae2:	d101      	bne.n	800aae8 <create_chain+0xaa>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	e03e      	b.n	800ab66 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aae8:	69fa      	ldr	r2, [r7, #28]
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d1da      	bne.n	800aaa6 <create_chain+0x68>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	e038      	b.n	800ab66 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aaf4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aaf6:	f04f 32ff 	mov.w	r2, #4294967295
 800aafa:	69f9      	ldr	r1, [r7, #28]
 800aafc:	6938      	ldr	r0, [r7, #16]
 800aafe:	f7ff fe82 	bl	800a806 <put_fat>
 800ab02:	4603      	mov	r3, r0
 800ab04:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d109      	bne.n	800ab20 <create_chain+0xe2>
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d006      	beq.n	800ab20 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ab12:	69fa      	ldr	r2, [r7, #28]
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6938      	ldr	r0, [r7, #16]
 800ab18:	f7ff fe75 	bl	800a806 <put_fat>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d116      	bne.n	800ab54 <create_chain+0x116>
		fs->last_clst = ncl;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	69fa      	ldr	r2, [r7, #28]
 800ab2a:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	69da      	ldr	r2, [r3, #28]
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
 800ab34:	3b02      	subs	r3, #2
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d804      	bhi.n	800ab44 <create_chain+0x106>
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	1e5a      	subs	r2, r3, #1
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	791b      	ldrb	r3, [r3, #4]
 800ab48:	f043 0301 	orr.w	r3, r3, #1
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	711a      	strb	r2, [r3, #4]
 800ab52:	e007      	b.n	800ab64 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d102      	bne.n	800ab60 <create_chain+0x122>
 800ab5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5e:	e000      	b.n	800ab62 <create_chain+0x124>
 800ab60:	2301      	movs	r3, #1
 800ab62:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ab64:	69fb      	ldr	r3, [r7, #28]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3720      	adds	r7, #32
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b086      	sub	sp, #24
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab84:	d204      	bcs.n	800ab90 <dir_sdi+0x22>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	f003 031f 	and.w	r3, r3, #31
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ab90:	2302      	movs	r3, #2
 800ab92:	e071      	b.n	800ac78 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d106      	bne.n	800abb4 <dir_sdi+0x46>
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d902      	bls.n	800abb4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10c      	bne.n	800abd4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	095b      	lsrs	r3, r3, #5
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	8912      	ldrh	r2, [r2, #8]
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d301      	bcc.n	800abca <dir_sdi+0x5c>
 800abc6:	2302      	movs	r3, #2
 800abc8:	e056      	b.n	800ac78 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	61da      	str	r2, [r3, #28]
 800abd2:	e02d      	b.n	800ac30 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	895b      	ldrh	r3, [r3, #10]
 800abd8:	461a      	mov	r2, r3
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	899b      	ldrh	r3, [r3, #12]
 800abde:	fb02 f303 	mul.w	r3, r2, r3
 800abe2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abe4:	e019      	b.n	800ac1a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6979      	ldr	r1, [r7, #20]
 800abea:	4618      	mov	r0, r3
 800abec:	f7ff fd37 	bl	800a65e <get_fat>
 800abf0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf8:	d101      	bne.n	800abfe <dir_sdi+0x90>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e03c      	b.n	800ac78 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d904      	bls.n	800ac0e <dir_sdi+0xa0>
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d301      	bcc.n	800ac12 <dir_sdi+0xa4>
 800ac0e:	2302      	movs	r3, #2
 800ac10:	e032      	b.n	800ac78 <dir_sdi+0x10a>
			ofs -= csz;
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d2e1      	bcs.n	800abe6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ac22:	6979      	ldr	r1, [r7, #20]
 800ac24:	6938      	ldr	r0, [r7, #16]
 800ac26:	f7ff fcfb 	bl	800a620 <clust2sect>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <dir_sdi+0xd4>
 800ac3e:	2302      	movs	r3, #2
 800ac40:	e01a      	b.n	800ac78 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	69da      	ldr	r2, [r3, #28]
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	899b      	ldrh	r3, [r3, #12]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac52:	441a      	add	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	899b      	ldrh	r3, [r3, #12]
 800ac62:	461a      	mov	r2, r3
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac6a:	fb00 f202 	mul.w	r2, r0, r2
 800ac6e:	1a9b      	subs	r3, r3, r2
 800ac70:	18ca      	adds	r2, r1, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	3320      	adds	r3, #32
 800ac96:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <dir_next+0x28>
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aca6:	d301      	bcc.n	800acac <dir_next+0x2c>
 800aca8:	2304      	movs	r3, #4
 800acaa:	e0bb      	b.n	800ae24 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	899b      	ldrh	r3, [r3, #12]
 800acb0:	461a      	mov	r2, r3
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800acb8:	fb01 f202 	mul.w	r2, r1, r2
 800acbc:	1a9b      	subs	r3, r3, r2
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f040 809d 	bne.w	800adfe <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	69db      	ldr	r3, [r3, #28]
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10b      	bne.n	800acee <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	095b      	lsrs	r3, r3, #5
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	8912      	ldrh	r2, [r2, #8]
 800acde:	4293      	cmp	r3, r2
 800ace0:	f0c0 808d 	bcc.w	800adfe <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	61da      	str	r2, [r3, #28]
 800acea:	2304      	movs	r3, #4
 800acec:	e09a      	b.n	800ae24 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	899b      	ldrh	r3, [r3, #12]
 800acf2:	461a      	mov	r2, r3
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	fbb3 f3f2 	udiv	r3, r3, r2
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	8952      	ldrh	r2, [r2, #10]
 800acfe:	3a01      	subs	r2, #1
 800ad00:	4013      	ands	r3, r2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d17b      	bne.n	800adfe <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4610      	mov	r0, r2
 800ad10:	f7ff fca5 	bl	800a65e <get_fat>
 800ad14:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d801      	bhi.n	800ad20 <dir_next+0xa0>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	e081      	b.n	800ae24 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad26:	d101      	bne.n	800ad2c <dir_next+0xac>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e07b      	b.n	800ae24 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d359      	bcc.n	800adea <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d104      	bne.n	800ad46 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	61da      	str	r2, [r3, #28]
 800ad42:	2304      	movs	r3, #4
 800ad44:	e06e      	b.n	800ae24 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	f7ff fe75 	bl	800aa3e <create_chain>
 800ad54:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <dir_next+0xe0>
 800ad5c:	2307      	movs	r3, #7
 800ad5e:	e061      	b.n	800ae24 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d101      	bne.n	800ad6a <dir_next+0xea>
 800ad66:	2302      	movs	r3, #2
 800ad68:	e05c      	b.n	800ae24 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad70:	d101      	bne.n	800ad76 <dir_next+0xf6>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e056      	b.n	800ae24 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7ff fb70 	bl	800a45c <sync_window>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <dir_next+0x106>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e04e      	b.n	800ae24 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	899b      	ldrh	r3, [r3, #12]
 800ad90:	461a      	mov	r2, r3
 800ad92:	2100      	movs	r1, #0
 800ad94:	f7ff fad7 	bl	800a346 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad98:	2300      	movs	r3, #0
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	6979      	ldr	r1, [r7, #20]
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f7ff fc3e 	bl	800a620 <clust2sect>
 800ada4:	4602      	mov	r2, r0
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	639a      	str	r2, [r3, #56]	; 0x38
 800adaa:	e012      	b.n	800add2 <dir_next+0x152>
						fs->wflag = 1;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2201      	movs	r2, #1
 800adb0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7ff fb52 	bl	800a45c <sync_window>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <dir_next+0x142>
 800adbe:	2301      	movs	r3, #1
 800adc0:	e030      	b.n	800ae24 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	3301      	adds	r3, #1
 800adc6:	613b      	str	r3, [r7, #16]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	639a      	str	r2, [r3, #56]	; 0x38
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	895b      	ldrh	r3, [r3, #10]
 800add6:	461a      	mov	r2, r3
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	4293      	cmp	r3, r2
 800addc:	d3e6      	bcc.n	800adac <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	1ad2      	subs	r2, r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800adf0:	6979      	ldr	r1, [r7, #20]
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7ff fc14 	bl	800a620 <clust2sect>
 800adf8:	4602      	mov	r2, r0
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	899b      	ldrh	r3, [r3, #12]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae16:	fb00 f202 	mul.w	r2, r0, r2
 800ae1a:	1a9b      	subs	r3, r3, r2
 800ae1c:	18ca      	adds	r2, r1, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff fe95 	bl	800ab6e <dir_sdi>
 800ae44:	4603      	mov	r3, r0
 800ae46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d12b      	bne.n	800aea6 <dir_alloc+0x7a>
		n = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	4619      	mov	r1, r3
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f7ff fb43 	bl	800a4e4 <move_window>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d11d      	bne.n	800aea4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	2be5      	cmp	r3, #229	; 0xe5
 800ae70:	d004      	beq.n	800ae7c <dir_alloc+0x50>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d107      	bne.n	800ae8c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	613b      	str	r3, [r7, #16]
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d102      	bne.n	800ae90 <dir_alloc+0x64>
 800ae8a:	e00c      	b.n	800aea6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ae90:	2101      	movs	r1, #1
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fef4 	bl	800ac80 <dir_next>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0d7      	beq.n	800ae52 <dir_alloc+0x26>
 800aea2:	e000      	b.n	800aea6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aea4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
 800aea8:	2b04      	cmp	r3, #4
 800aeaa:	d101      	bne.n	800aeb0 <dir_alloc+0x84>
 800aeac:	2307      	movs	r3, #7
 800aeae:	75fb      	strb	r3, [r7, #23]
	return res;
 800aeb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3718      	adds	r7, #24
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
	...

0800aebc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	331a      	adds	r3, #26
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7ff f998 	bl	800a200 <ld_word>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <pick_lfn+0x1e>
 800aed6:	2300      	movs	r3, #0
 800aed8:	e04d      	b.n	800af76 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee2:	1e5a      	subs	r2, r3, #1
 800aee4:	4613      	mov	r3, r2
 800aee6:	005b      	lsls	r3, r3, #1
 800aee8:	4413      	add	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aef0:	2301      	movs	r3, #1
 800aef2:	81fb      	strh	r3, [r7, #14]
 800aef4:	2300      	movs	r3, #0
 800aef6:	613b      	str	r3, [r7, #16]
 800aef8:	e028      	b.n	800af4c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800aefa:	4a21      	ldr	r2, [pc, #132]	; (800af80 <pick_lfn+0xc4>)
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	4413      	add	r3, r2
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	4413      	add	r3, r2
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff f979 	bl	800a200 <ld_word>
 800af0e:	4603      	mov	r3, r0
 800af10:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800af12:	89fb      	ldrh	r3, [r7, #14]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00f      	beq.n	800af38 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2bfe      	cmp	r3, #254	; 0xfe
 800af1c:	d901      	bls.n	800af22 <pick_lfn+0x66>
 800af1e:	2300      	movs	r3, #0
 800af20:	e029      	b.n	800af76 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800af22:	89bb      	ldrh	r3, [r7, #12]
 800af24:	81fb      	strh	r3, [r7, #14]
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	1c5a      	adds	r2, r3, #1
 800af2a:	617a      	str	r2, [r7, #20]
 800af2c:	005b      	lsls	r3, r3, #1
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	4413      	add	r3, r2
 800af32:	89fa      	ldrh	r2, [r7, #14]
 800af34:	801a      	strh	r2, [r3, #0]
 800af36:	e006      	b.n	800af46 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800af38:	89bb      	ldrh	r3, [r7, #12]
 800af3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af3e:	4293      	cmp	r3, r2
 800af40:	d001      	beq.n	800af46 <pick_lfn+0x8a>
 800af42:	2300      	movs	r3, #0
 800af44:	e017      	b.n	800af76 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	3301      	adds	r3, #1
 800af4a:	613b      	str	r3, [r7, #16]
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	2b0c      	cmp	r3, #12
 800af50:	d9d3      	bls.n	800aefa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00a      	beq.n	800af74 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2bfe      	cmp	r3, #254	; 0xfe
 800af62:	d901      	bls.n	800af68 <pick_lfn+0xac>
 800af64:	2300      	movs	r3, #0
 800af66:	e006      	b.n	800af76 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	4413      	add	r3, r2
 800af70:	2200      	movs	r2, #0
 800af72:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800af74:	2301      	movs	r3, #1
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	0801c2b8 	.word	0x0801c2b8

0800af84 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800af90:	230b      	movs	r3, #11
 800af92:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800af94:	7bfb      	ldrb	r3, [r7, #15]
 800af96:	b2da      	uxtb	r2, r3
 800af98:	0852      	lsrs	r2, r2, #1
 800af9a:	01db      	lsls	r3, r3, #7
 800af9c:	4313      	orrs	r3, r2
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	1c59      	adds	r1, r3, #1
 800afa4:	6079      	str	r1, [r7, #4]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	4413      	add	r3, r2
 800afaa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	3b01      	subs	r3, #1
 800afb0:	60bb      	str	r3, [r7, #8]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1ed      	bne.n	800af94 <sum_sfn+0x10>
	return sum;
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b086      	sub	sp, #24
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800afd0:	2304      	movs	r3, #4
 800afd2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800afda:	23ff      	movs	r3, #255	; 0xff
 800afdc:	757b      	strb	r3, [r7, #21]
 800afde:	23ff      	movs	r3, #255	; 0xff
 800afe0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800afe2:	e081      	b.n	800b0e8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	69db      	ldr	r3, [r3, #28]
 800afe8:	4619      	mov	r1, r3
 800afea:	6938      	ldr	r0, [r7, #16]
 800afec:	f7ff fa7a 	bl	800a4e4 <move_window>
 800aff0:	4603      	mov	r3, r0
 800aff2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d17c      	bne.n	800b0f4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b002:	7dbb      	ldrb	r3, [r7, #22]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d102      	bne.n	800b00e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b008:	2304      	movs	r3, #4
 800b00a:	75fb      	strb	r3, [r7, #23]
 800b00c:	e077      	b.n	800b0fe <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	330b      	adds	r3, #11
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b01a:	73fb      	strb	r3, [r7, #15]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	7bfa      	ldrb	r2, [r7, #15]
 800b020:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b022:	7dbb      	ldrb	r3, [r7, #22]
 800b024:	2be5      	cmp	r3, #229	; 0xe5
 800b026:	d00e      	beq.n	800b046 <dir_read+0x80>
 800b028:	7dbb      	ldrb	r3, [r7, #22]
 800b02a:	2b2e      	cmp	r3, #46	; 0x2e
 800b02c:	d00b      	beq.n	800b046 <dir_read+0x80>
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
 800b030:	f023 0320 	bic.w	r3, r3, #32
 800b034:	2b08      	cmp	r3, #8
 800b036:	bf0c      	ite	eq
 800b038:	2301      	moveq	r3, #1
 800b03a:	2300      	movne	r3, #0
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	461a      	mov	r2, r3
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	4293      	cmp	r3, r2
 800b044:	d002      	beq.n	800b04c <dir_read+0x86>
				ord = 0xFF;
 800b046:	23ff      	movs	r3, #255	; 0xff
 800b048:	757b      	strb	r3, [r7, #21]
 800b04a:	e044      	b.n	800b0d6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	2b0f      	cmp	r3, #15
 800b050:	d12f      	bne.n	800b0b2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b052:	7dbb      	ldrb	r3, [r7, #22]
 800b054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00d      	beq.n	800b078 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	7b5b      	ldrb	r3, [r3, #13]
 800b062:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b064:	7dbb      	ldrb	r3, [r7, #22]
 800b066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b06a:	75bb      	strb	r3, [r7, #22]
 800b06c:	7dbb      	ldrb	r3, [r7, #22]
 800b06e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	695a      	ldr	r2, [r3, #20]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b078:	7dba      	ldrb	r2, [r7, #22]
 800b07a:	7d7b      	ldrb	r3, [r7, #21]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d115      	bne.n	800b0ac <dir_read+0xe6>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	330d      	adds	r3, #13
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	7d3a      	ldrb	r2, [r7, #20]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d10e      	bne.n	800b0ac <dir_read+0xe6>
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7ff ff0f 	bl	800aebc <pick_lfn>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d003      	beq.n	800b0ac <dir_read+0xe6>
 800b0a4:	7d7b      	ldrb	r3, [r7, #21]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	e000      	b.n	800b0ae <dir_read+0xe8>
 800b0ac:	23ff      	movs	r3, #255	; 0xff
 800b0ae:	757b      	strb	r3, [r7, #21]
 800b0b0:	e011      	b.n	800b0d6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b0b2:	7d7b      	ldrb	r3, [r7, #21]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d109      	bne.n	800b0cc <dir_read+0x106>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff ff61 	bl	800af84 <sum_sfn>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	7d3b      	ldrb	r3, [r7, #20]
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d015      	beq.n	800b0f8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800b0d4:	e010      	b.n	800b0f8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7ff fdd1 	bl	800ac80 <dir_next>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d109      	bne.n	800b0fc <dir_read+0x136>
	while (dp->sect) {
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	69db      	ldr	r3, [r3, #28]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f47f af79 	bne.w	800afe4 <dir_read+0x1e>
 800b0f2:	e004      	b.n	800b0fe <dir_read+0x138>
		if (res != FR_OK) break;
 800b0f4:	bf00      	nop
 800b0f6:	e002      	b.n	800b0fe <dir_read+0x138>
					break;
 800b0f8:	bf00      	nop
 800b0fa:	e000      	b.n	800b0fe <dir_read+0x138>
		if (res != FR_OK) break;
 800b0fc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <dir_read+0x144>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	61da      	str	r2, [r3, #28]
	return res;
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b11c:	f04f 33ff 	mov.w	r3, #4294967295
 800b120:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d031      	beq.n	800b18e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	617b      	str	r3, [r7, #20]
 800b130:	e002      	b.n	800b138 <get_ldnumber+0x24>
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	3301      	adds	r3, #1
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b1f      	cmp	r3, #31
 800b13e:	d903      	bls.n	800b148 <get_ldnumber+0x34>
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b3a      	cmp	r3, #58	; 0x3a
 800b146:	d1f4      	bne.n	800b132 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	2b3a      	cmp	r3, #58	; 0x3a
 800b14e:	d11c      	bne.n	800b18a <get_ldnumber+0x76>
			tp = *path;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	1c5a      	adds	r2, r3, #1
 800b15a:	60fa      	str	r2, [r7, #12]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	3b30      	subs	r3, #48	; 0x30
 800b160:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2b09      	cmp	r3, #9
 800b166:	d80e      	bhi.n	800b186 <get_ldnumber+0x72>
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d10a      	bne.n	800b186 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d107      	bne.n	800b186 <get_ldnumber+0x72>
					vol = (int)i;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	3301      	adds	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	e002      	b.n	800b190 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b18a:	2300      	movs	r3, #0
 800b18c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b18e:	693b      	ldr	r3, [r7, #16]
}
 800b190:	4618      	mov	r0, r3
 800b192:	371c      	adds	r7, #28
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	70da      	strb	r2, [r3, #3]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff f994 	bl	800a4e4 <move_window>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <check_fs+0x2a>
 800b1c2:	2304      	movs	r3, #4
 800b1c4:	e038      	b.n	800b238 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	333c      	adds	r3, #60	; 0x3c
 800b1ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff f816 	bl	800a200 <ld_word>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d001      	beq.n	800b1e4 <check_fs+0x48>
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e029      	b.n	800b238 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1ea:	2be9      	cmp	r3, #233	; 0xe9
 800b1ec:	d009      	beq.n	800b202 <check_fs+0x66>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1f4:	2beb      	cmp	r3, #235	; 0xeb
 800b1f6:	d11e      	bne.n	800b236 <check_fs+0x9a>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1fe:	2b90      	cmp	r3, #144	; 0x90
 800b200:	d119      	bne.n	800b236 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	333c      	adds	r3, #60	; 0x3c
 800b206:	3336      	adds	r3, #54	; 0x36
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff f811 	bl	800a230 <ld_dword>
 800b20e:	4603      	mov	r3, r0
 800b210:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b214:	4a0a      	ldr	r2, [pc, #40]	; (800b240 <check_fs+0xa4>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d101      	bne.n	800b21e <check_fs+0x82>
 800b21a:	2300      	movs	r3, #0
 800b21c:	e00c      	b.n	800b238 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	333c      	adds	r3, #60	; 0x3c
 800b222:	3352      	adds	r3, #82	; 0x52
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff f803 	bl	800a230 <ld_dword>
 800b22a:	4603      	mov	r3, r0
 800b22c:	4a05      	ldr	r2, [pc, #20]	; (800b244 <check_fs+0xa8>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d101      	bne.n	800b236 <check_fs+0x9a>
 800b232:	2300      	movs	r3, #0
 800b234:	e000      	b.n	800b238 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b236:	2302      	movs	r3, #2
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	00544146 	.word	0x00544146
 800b244:	33544146 	.word	0x33544146

0800b248 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b096      	sub	sp, #88	; 0x58
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	4613      	mov	r3, r2
 800b254:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f7ff ff59 	bl	800b114 <get_ldnumber>
 800b262:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b266:	2b00      	cmp	r3, #0
 800b268:	da01      	bge.n	800b26e <find_volume+0x26>
 800b26a:	230b      	movs	r3, #11
 800b26c:	e26a      	b.n	800b744 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b26e:	4aa3      	ldr	r2, [pc, #652]	; (800b4fc <find_volume+0x2b4>)
 800b270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b276:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <find_volume+0x3a>
 800b27e:	230c      	movs	r3, #12
 800b280:	e260      	b.n	800b744 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800b282:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b284:	f7ff f895 	bl	800a3b2 <lock_fs>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <find_volume+0x4a>
 800b28e:	230f      	movs	r3, #15
 800b290:	e258      	b.n	800b744 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b296:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b298:	79fb      	ldrb	r3, [r7, #7]
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d01a      	beq.n	800b2de <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	785b      	ldrb	r3, [r3, #1]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fe ff09 	bl	800a0c4 <disk_status>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b2b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2bc:	f003 0301 	and.w	r3, r3, #1
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10c      	bne.n	800b2de <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b2c4:	79fb      	ldrb	r3, [r7, #7]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d007      	beq.n	800b2da <find_volume+0x92>
 800b2ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2ce:	f003 0304 	and.w	r3, r3, #4
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b2d6:	230a      	movs	r3, #10
 800b2d8:	e234      	b.n	800b744 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e232      	b.n	800b744 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	785b      	ldrb	r3, [r3, #1]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fe ff01 	bl	800a0f8 <disk_initialize>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b2fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b308:	2303      	movs	r3, #3
 800b30a:	e21b      	b.n	800b744 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b30c:	79fb      	ldrb	r3, [r7, #7]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d007      	beq.n	800b322 <find_volume+0xda>
 800b312:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b316:	f003 0304 	and.w	r3, r3, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b31e:	230a      	movs	r3, #10
 800b320:	e210      	b.n	800b744 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b324:	7858      	ldrb	r0, [r3, #1]
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	330c      	adds	r3, #12
 800b32a:	461a      	mov	r2, r3
 800b32c:	2102      	movs	r1, #2
 800b32e:	f7fe ff49 	bl	800a1c4 <disk_ioctl>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <find_volume+0xf4>
 800b338:	2301      	movs	r3, #1
 800b33a:	e203      	b.n	800b744 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	899b      	ldrh	r3, [r3, #12]
 800b340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b344:	d80d      	bhi.n	800b362 <find_volume+0x11a>
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	899b      	ldrh	r3, [r3, #12]
 800b34a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b34e:	d308      	bcc.n	800b362 <find_volume+0x11a>
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	899b      	ldrh	r3, [r3, #12]
 800b354:	461a      	mov	r2, r3
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	899b      	ldrh	r3, [r3, #12]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	4013      	ands	r3, r2
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <find_volume+0x11e>
 800b362:	2301      	movs	r3, #1
 800b364:	e1ee      	b.n	800b744 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b36a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b36c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b36e:	f7ff ff15 	bl	800b19c <check_fs>
 800b372:	4603      	mov	r3, r0
 800b374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d149      	bne.n	800b414 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b380:	2300      	movs	r3, #0
 800b382:	643b      	str	r3, [r7, #64]	; 0x40
 800b384:	e01e      	b.n	800b3c4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b394:	4413      	add	r3, r2
 800b396:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39a:	3304      	adds	r3, #4
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d006      	beq.n	800b3b0 <find_volume+0x168>
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	3308      	adds	r3, #8
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe ff42 	bl	800a230 <ld_dword>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	e000      	b.n	800b3b2 <find_volume+0x16a>
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	3358      	adds	r3, #88	; 0x58
 800b3b8:	443b      	add	r3, r7
 800b3ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	643b      	str	r3, [r7, #64]	; 0x40
 800b3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d9dd      	bls.n	800b386 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <find_volume+0x192>
 800b3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	3358      	adds	r3, #88	; 0x58
 800b3e0:	443b      	add	r3, r7
 800b3e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b3e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b3e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d005      	beq.n	800b3fa <find_volume+0x1b2>
 800b3ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3f2:	f7ff fed3 	bl	800b19c <check_fs>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	e000      	b.n	800b3fc <find_volume+0x1b4>
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b404:	2b01      	cmp	r3, #1
 800b406:	d905      	bls.n	800b414 <find_volume+0x1cc>
 800b408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40a:	3301      	adds	r3, #1
 800b40c:	643b      	str	r3, [r7, #64]	; 0x40
 800b40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b410:	2b03      	cmp	r3, #3
 800b412:	d9e2      	bls.n	800b3da <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b414:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b418:	2b04      	cmp	r3, #4
 800b41a:	d101      	bne.n	800b420 <find_volume+0x1d8>
 800b41c:	2301      	movs	r3, #1
 800b41e:	e191      	b.n	800b744 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b424:	2b01      	cmp	r3, #1
 800b426:	d901      	bls.n	800b42c <find_volume+0x1e4>
 800b428:	230d      	movs	r3, #13
 800b42a:	e18b      	b.n	800b744 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	333c      	adds	r3, #60	; 0x3c
 800b430:	330b      	adds	r3, #11
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe fee4 	bl	800a200 <ld_word>
 800b438:	4603      	mov	r3, r0
 800b43a:	461a      	mov	r2, r3
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	899b      	ldrh	r3, [r3, #12]
 800b440:	429a      	cmp	r2, r3
 800b442:	d001      	beq.n	800b448 <find_volume+0x200>
 800b444:	230d      	movs	r3, #13
 800b446:	e17d      	b.n	800b744 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44a:	333c      	adds	r3, #60	; 0x3c
 800b44c:	3316      	adds	r3, #22
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe fed6 	bl	800a200 <ld_word>
 800b454:	4603      	mov	r3, r0
 800b456:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <find_volume+0x224>
 800b45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b460:	333c      	adds	r3, #60	; 0x3c
 800b462:	3324      	adds	r3, #36	; 0x24
 800b464:	4618      	mov	r0, r3
 800b466:	f7fe fee3 	bl	800a230 <ld_dword>
 800b46a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b470:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800b478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47e:	789b      	ldrb	r3, [r3, #2]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d005      	beq.n	800b490 <find_volume+0x248>
 800b484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b486:	789b      	ldrb	r3, [r3, #2]
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d001      	beq.n	800b490 <find_volume+0x248>
 800b48c:	230d      	movs	r3, #13
 800b48e:	e159      	b.n	800b744 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b492:	789b      	ldrb	r3, [r3, #2]
 800b494:	461a      	mov	r2, r3
 800b496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b498:	fb02 f303 	mul.w	r3, r2, r3
 800b49c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ac:	895b      	ldrh	r3, [r3, #10]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d008      	beq.n	800b4c4 <find_volume+0x27c>
 800b4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b4:	895b      	ldrh	r3, [r3, #10]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	895b      	ldrh	r3, [r3, #10]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	4013      	ands	r3, r2
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <find_volume+0x280>
 800b4c4:	230d      	movs	r3, #13
 800b4c6:	e13d      	b.n	800b744 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	333c      	adds	r3, #60	; 0x3c
 800b4cc:	3311      	adds	r3, #17
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe fe96 	bl	800a200 <ld_word>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	891b      	ldrh	r3, [r3, #8]
 800b4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e2:	8992      	ldrh	r2, [r2, #12]
 800b4e4:	0952      	lsrs	r2, r2, #5
 800b4e6:	b292      	uxth	r2, r2
 800b4e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4ec:	fb01 f202 	mul.w	r2, r1, r2
 800b4f0:	1a9b      	subs	r3, r3, r2
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <find_volume+0x2b8>
 800b4f8:	230d      	movs	r3, #13
 800b4fa:	e123      	b.n	800b744 <find_volume+0x4fc>
 800b4fc:	20002df0 	.word	0x20002df0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b502:	333c      	adds	r3, #60	; 0x3c
 800b504:	3313      	adds	r3, #19
 800b506:	4618      	mov	r0, r3
 800b508:	f7fe fe7a 	bl	800a200 <ld_word>
 800b50c:	4603      	mov	r3, r0
 800b50e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b512:	2b00      	cmp	r3, #0
 800b514:	d106      	bne.n	800b524 <find_volume+0x2dc>
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b518:	333c      	adds	r3, #60	; 0x3c
 800b51a:	3320      	adds	r3, #32
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fe fe87 	bl	800a230 <ld_dword>
 800b522:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	333c      	adds	r3, #60	; 0x3c
 800b528:	330e      	adds	r3, #14
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe fe68 	bl	800a200 <ld_word>
 800b530:	4603      	mov	r3, r0
 800b532:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b534:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <find_volume+0x2f6>
 800b53a:	230d      	movs	r3, #13
 800b53c:	e102      	b.n	800b744 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b53e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b542:	4413      	add	r3, r2
 800b544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b546:	8911      	ldrh	r1, [r2, #8]
 800b548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b54a:	8992      	ldrh	r2, [r2, #12]
 800b54c:	0952      	lsrs	r2, r2, #5
 800b54e:	b292      	uxth	r2, r2
 800b550:	fbb1 f2f2 	udiv	r2, r1, r2
 800b554:	b292      	uxth	r2, r2
 800b556:	4413      	add	r3, r2
 800b558:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b55a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	429a      	cmp	r2, r3
 800b560:	d201      	bcs.n	800b566 <find_volume+0x31e>
 800b562:	230d      	movs	r3, #13
 800b564:	e0ee      	b.n	800b744 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b56e:	8952      	ldrh	r2, [r2, #10]
 800b570:	fbb3 f3f2 	udiv	r3, r3, r2
 800b574:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <find_volume+0x338>
 800b57c:	230d      	movs	r3, #13
 800b57e:	e0e1      	b.n	800b744 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800b580:	2303      	movs	r3, #3
 800b582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d802      	bhi.n	800b596 <find_volume+0x34e>
 800b590:	2302      	movs	r3, #2
 800b592:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d802      	bhi.n	800b5a6 <find_volume+0x35e>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	1c9a      	adds	r2, r3, #2
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800b5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5b2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b5b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b8:	441a      	add	r2, r3
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5bc:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800b5be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c2:	441a      	add	r2, r3
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800b5c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5cc:	2b03      	cmp	r3, #3
 800b5ce:	d11e      	bne.n	800b60e <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d2:	333c      	adds	r3, #60	; 0x3c
 800b5d4:	332a      	adds	r3, #42	; 0x2a
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fe12 	bl	800a200 <ld_word>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <find_volume+0x39e>
 800b5e2:	230d      	movs	r3, #13
 800b5e4:	e0ae      	b.n	800b744 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e8:	891b      	ldrh	r3, [r3, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <find_volume+0x3aa>
 800b5ee:	230d      	movs	r3, #13
 800b5f0:	e0a8      	b.n	800b744 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f4:	333c      	adds	r3, #60	; 0x3c
 800b5f6:	332c      	adds	r3, #44	; 0x2c
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fe fe19 	bl	800a230 <ld_dword>
 800b5fe:	4602      	mov	r2, r0
 800b600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b602:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b606:	6a1b      	ldr	r3, [r3, #32]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	647b      	str	r3, [r7, #68]	; 0x44
 800b60c:	e01f      	b.n	800b64e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	891b      	ldrh	r3, [r3, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d101      	bne.n	800b61a <find_volume+0x3d2>
 800b616:	230d      	movs	r3, #13
 800b618:	e094      	b.n	800b744 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b620:	441a      	add	r2, r3
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d103      	bne.n	800b636 <find_volume+0x3ee>
 800b62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	e00a      	b.n	800b64c <find_volume+0x404>
 800b636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b638:	6a1a      	ldr	r2, [r3, #32]
 800b63a:	4613      	mov	r3, r2
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	4413      	add	r3, r2
 800b640:	085a      	lsrs	r2, r3, #1
 800b642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b64c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	899b      	ldrh	r3, [r3, #12]
 800b656:	4619      	mov	r1, r3
 800b658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b65a:	440b      	add	r3, r1
 800b65c:	3b01      	subs	r3, #1
 800b65e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b660:	8989      	ldrh	r1, [r1, #12]
 800b662:	fbb3 f3f1 	udiv	r3, r3, r1
 800b666:	429a      	cmp	r2, r3
 800b668:	d201      	bcs.n	800b66e <find_volume+0x426>
 800b66a:	230d      	movs	r3, #13
 800b66c:	e06a      	b.n	800b744 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	f04f 32ff 	mov.w	r2, #4294967295
 800b674:	61da      	str	r2, [r3, #28]
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	69da      	ldr	r2, [r3, #28]
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800b67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b680:	2280      	movs	r2, #128	; 0x80
 800b682:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d149      	bne.n	800b720 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	333c      	adds	r3, #60	; 0x3c
 800b690:	3330      	adds	r3, #48	; 0x30
 800b692:	4618      	mov	r0, r3
 800b694:	f7fe fdb4 	bl	800a200 <ld_word>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d140      	bne.n	800b720 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6a6:	f7fe ff1d 	bl	800a4e4 <move_window>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d137      	bne.n	800b720 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800b6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b8:	333c      	adds	r3, #60	; 0x3c
 800b6ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe fd9e 	bl	800a200 <ld_word>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d127      	bne.n	800b720 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d2:	333c      	adds	r3, #60	; 0x3c
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fe fdab 	bl	800a230 <ld_dword>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	4a1b      	ldr	r2, [pc, #108]	; (800b74c <find_volume+0x504>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d11e      	bne.n	800b720 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	333c      	adds	r3, #60	; 0x3c
 800b6e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe fda0 	bl	800a230 <ld_dword>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	4a17      	ldr	r2, [pc, #92]	; (800b750 <find_volume+0x508>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d113      	bne.n	800b720 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fa:	333c      	adds	r3, #60	; 0x3c
 800b6fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe fd95 	bl	800a230 <ld_dword>
 800b706:	4602      	mov	r2, r0
 800b708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	333c      	adds	r3, #60	; 0x3c
 800b710:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe fd8b 	bl	800a230 <ld_dword>
 800b71a:	4602      	mov	r2, r0
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b722:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b726:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b728:	4b0a      	ldr	r3, [pc, #40]	; (800b754 <find_volume+0x50c>)
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	3301      	adds	r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	4b08      	ldr	r3, [pc, #32]	; (800b754 <find_volume+0x50c>)
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	4b07      	ldr	r3, [pc, #28]	; (800b754 <find_volume+0x50c>)
 800b736:	881a      	ldrh	r2, [r3, #0]
 800b738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b73c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b73e:	f7fe fe69 	bl	800a414 <clear_lock>
#endif
	return FR_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3758      	adds	r7, #88	; 0x58
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	41615252 	.word	0x41615252
 800b750:	61417272 	.word	0x61417272
 800b754:	20002df4 	.word	0x20002df4

0800b758 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b76a:	f107 0310 	add.w	r3, r7, #16
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff fcd0 	bl	800b114 <get_ldnumber>
 800b774:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	da01      	bge.n	800b780 <f_mount+0x28>
 800b77c:	230b      	movs	r3, #11
 800b77e:	e048      	b.n	800b812 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b780:	4a26      	ldr	r2, [pc, #152]	; (800b81c <f_mount+0xc4>)
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b788:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00f      	beq.n	800b7b0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b790:	69b8      	ldr	r0, [r7, #24]
 800b792:	f7fe fe3f 	bl	800a414 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 ff98 	bl	800c6d0 <ff_del_syncobj>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <f_mount+0x52>
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	e033      	b.n	800b812 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00f      	beq.n	800b7d6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3314      	adds	r3, #20
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	f000 ff62 	bl	800c690 <ff_cre_syncobj>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <f_mount+0x7e>
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	e01d      	b.n	800b812 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	4910      	ldr	r1, [pc, #64]	; (800b81c <f_mount+0xc4>)
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <f_mount+0x94>
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d001      	beq.n	800b7f0 <f_mount+0x98>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	e010      	b.n	800b812 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b7f0:	f107 010c 	add.w	r1, r7, #12
 800b7f4:	f107 0308 	add.w	r3, r7, #8
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7ff fd24 	bl	800b248 <find_volume>
 800b800:	4603      	mov	r3, r0
 800b802:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	7dfa      	ldrb	r2, [r7, #23]
 800b808:	4611      	mov	r1, r2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fde7 	bl	800a3de <unlock_fs>
 800b810:	7dfb      	ldrb	r3, [r7, #23]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3720      	adds	r7, #32
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20002df0 	.word	0x20002df0

0800b820 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Path name of the logical drive number */
	TCHAR* label,		/* Pointer to a buffer to return the volume label */
	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b096      	sub	sp, #88	; 0x58
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
#if _LFN_UNICODE || _FS_EXFAT
	WCHAR w;
#endif

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b82c:	f107 0114 	add.w	r1, r7, #20
 800b830:	f107 030c 	add.w	r3, r7, #12
 800b834:	2200      	movs	r2, #0
 800b836:	4618      	mov	r0, r3
 800b838:	f7ff fd06 	bl	800b248 <find_volume>
 800b83c:	4603      	mov	r3, r0
 800b83e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Get volume label */
	if (res == FR_OK && label) {
 800b842:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b846:	2b00      	cmp	r3, #0
 800b848:	d150      	bne.n	800b8ec <f_getlabel+0xcc>
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d04d      	beq.n	800b8ec <f_getlabel+0xcc>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	61bb      	str	r3, [r7, #24]
 800b854:	2300      	movs	r3, #0
 800b856:	623b      	str	r3, [r7, #32]
		res = dir_sdi(&dj, 0);
 800b858:	f107 0318 	add.w	r3, r7, #24
 800b85c:	2100      	movs	r1, #0
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff f985 	bl	800ab6e <dir_sdi>
 800b864:	4603      	mov	r3, r0
 800b866:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) {
 800b86a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d132      	bne.n	800b8d8 <f_getlabel+0xb8>
		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
 800b872:	f107 0318 	add.w	r3, r7, #24
 800b876:	2101      	movs	r1, #1
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff fba4 	bl	800afc6 <dir_read>
 800b87e:	4603      	mov	r3, r0
 800b880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 	if (res == FR_OK) {
 800b884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d125      	bne.n	800b8d8 <f_getlabel+0xb8>
					}
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
 800b88c:	2300      	movs	r3, #0
 800b88e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b892:	653b      	str	r3, [r7, #80]	; 0x50
						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
							w = w << 8 | dj.dir[si++];
						}
						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
#else
						label[di++] = dj.dir[si++];
 800b894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b898:	1c59      	adds	r1, r3, #1
 800b89a:	6539      	str	r1, [r7, #80]	; 0x50
 800b89c:	441a      	add	r2, r3
 800b89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8a0:	1c59      	adds	r1, r3, #1
 800b8a2:	64f9      	str	r1, [r7, #76]	; 0x4c
 800b8a4:	68b9      	ldr	r1, [r7, #8]
 800b8a6:	440b      	add	r3, r1
 800b8a8:	7812      	ldrb	r2, [r2, #0]
 800b8aa:	701a      	strb	r2, [r3, #0]
#endif
					} while (di < 11);
 800b8ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ae:	2b0a      	cmp	r3, #10
 800b8b0:	d9f0      	bls.n	800b894 <f_getlabel+0x74>
					do {				/* Truncate trailing spaces */
						label[di] = 0;
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b6:	4413      	add	r3, r2
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	701a      	strb	r2, [r3, #0]
						if (di == 0) break;
 800b8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d009      	beq.n	800b8d6 <f_getlabel+0xb6>
					} while (label[--di] == ' ');
 800b8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8cc:	4413      	add	r3, r2
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b20      	cmp	r3, #32
 800b8d2:	d0ee      	beq.n	800b8b2 <f_getlabel+0x92>
 800b8d4:	e000      	b.n	800b8d8 <f_getlabel+0xb8>
						if (di == 0) break;
 800b8d6:	bf00      	nop
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
 800b8d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8dc:	2b04      	cmp	r3, #4
 800b8de:	d105      	bne.n	800b8ec <f_getlabel+0xcc>
			label[0] = 0;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	701a      	strb	r2, [r3, #0]
			res = FR_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
 800b8ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d129      	bne.n	800b948 <f_getlabel+0x128>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d026      	beq.n	800b948 <f_getlabel+0x128>
		res = move_window(fs, fs->volbase);
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b900:	4619      	mov	r1, r3
 800b902:	4610      	mov	r0, r2
 800b904:	f7fe fdee 	bl	800a4e4 <move_window>
 800b908:	4603      	mov	r3, r0
 800b90a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) {
 800b90e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b912:	2b00      	cmp	r3, #0
 800b914:	d118      	bne.n	800b948 <f_getlabel+0x128>
			switch (fs->fs_type) {
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d004      	beq.n	800b928 <f_getlabel+0x108>
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d105      	bne.n	800b92e <f_getlabel+0x10e>
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
 800b922:	2364      	movs	r3, #100	; 0x64
 800b924:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b926:	e004      	b.n	800b932 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;
 800b928:	2343      	movs	r3, #67	; 0x43
 800b92a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b92c:	e001      	b.n	800b932 <f_getlabel+0x112>

			default:
				di = BS_VolID;
 800b92e:	2327      	movs	r3, #39	; 0x27
 800b930:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			*vsn = ld_dword(fs->win + di);
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93a:	4413      	add	r3, r2
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fe fc77 	bl	800a230 <ld_dword>
 800b942:	4602      	mov	r2, r0
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	601a      	str	r2, [r3, #0]
		}
	}

	LEAVE_FF(fs, res);
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b94e:	4611      	mov	r1, r2
 800b950:	4618      	mov	r0, r3
 800b952:	f7fe fd44 	bl	800a3de <unlock_fs>
 800b956:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3758      	adds	r7, #88	; 0x58
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
	...

0800b964 <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b09c      	sub	sp, #112	; 0x70
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
	WCHAR w;
	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";


	/* Get logical drive */
	res = find_volume(&label, &fs, FA_WRITE);
 800b96c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800b970:	1d3b      	adds	r3, r7, #4
 800b972:	2202      	movs	r2, #2
 800b974:	4618      	mov	r0, r3
 800b976:	f7ff fc67 	bl	800b248 <find_volume>
 800b97a:	4603      	mov	r3, r0
 800b97c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b980:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b984:	2b00      	cmp	r3, #0
 800b986:	d009      	beq.n	800b99c <f_setlabel+0x38>
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800b98e:	4611      	mov	r1, r2
 800b990:	4618      	mov	r0, r3
 800b992:	f7fe fd24 	bl	800a3de <unlock_fs>
 800b996:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b99a:	e100      	b.n	800bb9e <f_setlabel+0x23a>
	dj.obj.fs = fs;
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Get length of given volume label */
	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	663b      	str	r3, [r7, #96]	; 0x60
 800b9a4:	e002      	b.n	800b9ac <f_setlabel+0x48>
 800b9a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	663b      	str	r3, [r7, #96]	; 0x60
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9b0:	4413      	add	r3, r2
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b1f      	cmp	r3, #31
 800b9b6:	d8f6      	bhi.n	800b9a6 <f_setlabel+0x42>
		}
		slen = j;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
 800b9b8:	e002      	b.n	800b9c0 <f_setlabel+0x5c>
 800b9ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	663b      	str	r3, [r7, #96]	; 0x60
 800b9c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d006      	beq.n	800b9d4 <f_setlabel+0x70>
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	4413      	add	r3, r2
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b20      	cmp	r3, #32
 800b9d2:	d0f2      	beq.n	800b9ba <f_setlabel+0x56>
		if (slen) {		/* Is there a volume label to be set? */
 800b9d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d071      	beq.n	800babe <f_setlabel+0x15a>
			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
 800b9da:	2300      	movs	r3, #0
 800b9dc:	733b      	strb	r3, [r7, #12]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	667b      	str	r3, [r7, #100]	; 0x64
 800b9e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9e4:	66bb      	str	r3, [r7, #104]	; 0x68
			do {
#if _LFN_UNICODE
				w = ff_convert(ff_wtoupper(label[i++]), 0);
#else
				w = (BYTE)label[i++];
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9ea:	1c59      	adds	r1, r3, #1
 800b9ec:	66b9      	str	r1, [r7, #104]	; 0x68
 800b9ee:	4413      	add	r3, r2
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				if (IsDBCS1(w)) {
					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
				}
#if _USE_LFN != 0
				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
 800b9f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f000 fd81 	bl	800c504 <ff_convert>
 800ba02:	4603      	mov	r3, r0
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 fdb9 	bl	800c57c <ff_wtoupper>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 fd78 	bl	800c504 <ff_convert>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
#else
				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 800ba1a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d012      	beq.n	800ba48 <f_setlabel+0xe4>
 800ba22:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800ba26:	4619      	mov	r1, r3
 800ba28:	485f      	ldr	r0, [pc, #380]	; (800bba8 <f_setlabel+0x244>)
 800ba2a:	f7fe fca7 	bl	800a37c <chk_chr>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d109      	bne.n	800ba48 <f_setlabel+0xe4>
 800ba34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800ba38:	2bff      	cmp	r3, #255	; 0xff
 800ba3a:	d901      	bls.n	800ba40 <f_setlabel+0xdc>
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	e000      	b.n	800ba42 <f_setlabel+0xde>
 800ba40:	220b      	movs	r2, #11
 800ba42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d806      	bhi.n	800ba56 <f_setlabel+0xf2>
					LEAVE_FF(fs, FR_INVALID_NAME);
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	2106      	movs	r1, #6
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe fcc6 	bl	800a3de <unlock_fs>
 800ba52:	2306      	movs	r3, #6
 800ba54:	e0a3      	b.n	800bb9e <f_setlabel+0x23a>
				}
				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
 800ba56:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800ba5a:	2bff      	cmp	r3, #255	; 0xff
 800ba5c:	d90b      	bls.n	800ba76 <f_setlabel+0x112>
 800ba5e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800ba62:	0a1b      	lsrs	r3, r3, #8
 800ba64:	b299      	uxth	r1, r3
 800ba66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba68:	1c5a      	adds	r2, r3, #1
 800ba6a:	667a      	str	r2, [r7, #100]	; 0x64
 800ba6c:	b2ca      	uxtb	r2, r1
 800ba6e:	3370      	adds	r3, #112	; 0x70
 800ba70:	443b      	add	r3, r7
 800ba72:	f803 2c64 	strb.w	r2, [r3, #-100]
				dirvn[j++] = (BYTE)w;
 800ba76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba78:	1c5a      	adds	r2, r3, #1
 800ba7a:	667a      	str	r2, [r7, #100]	; 0x64
 800ba7c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800ba80:	b2d2      	uxtb	r2, r2
 800ba82:	3370      	adds	r3, #112	; 0x70
 800ba84:	443b      	add	r3, r7
 800ba86:	f803 2c64 	strb.w	r2, [r3, #-100]
			} while (i < slen);
 800ba8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ba8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d3a9      	bcc.n	800b9e6 <f_setlabel+0x82>
			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
 800ba92:	e007      	b.n	800baa4 <f_setlabel+0x140>
 800ba94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	667a      	str	r2, [r7, #100]	; 0x64
 800ba9a:	3370      	adds	r3, #112	; 0x70
 800ba9c:	443b      	add	r3, r7
 800ba9e:	2220      	movs	r2, #32
 800baa0:	f803 2c64 	strb.w	r2, [r3, #-100]
 800baa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baa6:	2b0a      	cmp	r3, #10
 800baa8:	d9f4      	bls.n	800ba94 <f_setlabel+0x130>
			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 800baaa:	7b3b      	ldrb	r3, [r7, #12]
 800baac:	2be5      	cmp	r3, #229	; 0xe5
 800baae:	d106      	bne.n	800babe <f_setlabel+0x15a>
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	2106      	movs	r1, #6
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fe fc92 	bl	800a3de <unlock_fs>
 800baba:	2306      	movs	r3, #6
 800babc:	e06f      	b.n	800bb9e <f_setlabel+0x23a>
		}
	}

	/* Set volume label */
	dj.obj.sclust = 0;		/* Open root directory */
 800babe:	2300      	movs	r3, #0
 800bac0:	633b      	str	r3, [r7, #48]	; 0x30
	res = dir_sdi(&dj, 0);
 800bac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bac6:	2100      	movs	r1, #0
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff f850 	bl	800ab6e <dir_sdi>
 800bace:	4603      	mov	r3, r0
 800bad0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800bad4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d157      	bne.n	800bb8c <f_setlabel+0x228>
		res = dir_read(&dj, 1);	/* Get volume label entry */
 800badc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bae0:	2101      	movs	r1, #1
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7ff fa6f 	bl	800afc6 <dir_read>
 800bae8:	4603      	mov	r3, r0
 800baea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (res == FR_OK) {
 800baee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d118      	bne.n	800bb28 <f_setlabel+0x1c4>
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
			} else {
				if (slen) {
 800baf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d007      	beq.n	800bb0c <f_setlabel+0x1a8>
					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
 800bafc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bafe:	f107 010c 	add.w	r1, r7, #12
 800bb02:	220b      	movs	r2, #11
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fe fbfd 	bl	800a304 <mem_cpy>
 800bb0a:	e002      	b.n	800bb12 <f_setlabel+0x1ae>
				} else {
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 800bb0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb0e:	22e5      	movs	r2, #229	; 0xe5
 800bb10:	701a      	strb	r2, [r3, #0]
				}
			}
			fs->wflag = 1;
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	2201      	movs	r2, #1
 800bb16:	70da      	strb	r2, [r3, #3]
			res = sync_fs(fs);
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fe fd10 	bl	800a540 <sync_fs>
 800bb20:	4603      	mov	r3, r0
 800bb22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800bb26:	e031      	b.n	800bb8c <f_setlabel+0x228>
		} else {			/* No volume label entry is found or error */
			if (res == FR_NO_FILE) {
 800bb28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb2c:	2b04      	cmp	r3, #4
 800bb2e:	d12d      	bne.n	800bb8c <f_setlabel+0x228>
				res = FR_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (slen) {	/* Create a volume label entry */
 800bb36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d027      	beq.n	800bb8c <f_setlabel+0x228>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 800bb3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb40:	2101      	movs	r1, #1
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff f972 	bl	800ae2c <dir_alloc>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800bb4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d11a      	bne.n	800bb8c <f_setlabel+0x228>
						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
 800bb56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb58:	2220      	movs	r2, #32
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe fbf2 	bl	800a346 <mem_set>
						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
						} else {
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 800bb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb64:	330b      	adds	r3, #11
 800bb66:	2208      	movs	r2, #8
 800bb68:	701a      	strb	r2, [r3, #0]
							mem_cpy(dj.dir, dirvn, 11);
 800bb6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb6c:	f107 010c 	add.w	r1, r7, #12
 800bb70:	220b      	movs	r2, #11
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fbc6 	bl	800a304 <mem_cpy>
						}
						fs->wflag = 1;
 800bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	70da      	strb	r2, [r3, #3]
						res = sync_fs(fs);
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fe fcdd 	bl	800a540 <sync_fs>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800bb92:	4611      	mov	r1, r2
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe fc22 	bl	800a3de <unlock_fs>
 800bb9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3770      	adds	r7, #112	; 0x70
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	0801c2c8 	.word	0x0801c2c8

0800bbac <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800bbac:	b590      	push	{r4, r7, lr}
 800bbae:	b09d      	sub	sp, #116	; 0x74
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	607a      	str	r2, [r7, #4]
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800bbc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbc4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800bbc6:	f107 030c 	add.w	r3, r7, #12
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7ff faa2 	bl	800b114 <get_ldnumber>
 800bbd0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	da02      	bge.n	800bbde <f_mkfs+0x32>
 800bbd8:	230b      	movs	r3, #11
 800bbda:	f000 bc31 	b.w	800c440 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800bbde:	4aa5      	ldr	r2, [pc, #660]	; (800be74 <f_mkfs+0x2c8>)
 800bbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d005      	beq.n	800bbf6 <f_mkfs+0x4a>
 800bbea:	4aa2      	ldr	r2, [pc, #648]	; (800be74 <f_mkfs+0x2c8>)
 800bbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800bbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800bc02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fe fa76 	bl	800a0f8 <disk_initialize>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bc12:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc16:	f003 0301 	and.w	r3, r3, #1
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d002      	beq.n	800bc24 <f_mkfs+0x78>
 800bc1e:	2303      	movs	r3, #3
 800bc20:	f000 bc0e 	b.w	800c440 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bc24:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc28:	f003 0304 	and.w	r3, r3, #4
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <f_mkfs+0x8a>
 800bc30:	230a      	movs	r3, #10
 800bc32:	f000 bc05 	b.w	800c440 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800bc36:	f107 0214 	add.w	r2, r7, #20
 800bc3a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc3e:	2103      	movs	r1, #3
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fe fabf 	bl	800a1c4 <disk_ioctl>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10c      	bne.n	800bc66 <f_mkfs+0xba>
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d009      	beq.n	800bc66 <f_mkfs+0xba>
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc58:	d805      	bhi.n	800bc66 <f_mkfs+0xba>
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	1e5a      	subs	r2, r3, #1
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	4013      	ands	r3, r2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d001      	beq.n	800bc6a <f_mkfs+0xbe>
 800bc66:	2301      	movs	r3, #1
 800bc68:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800bc6a:	f107 021a 	add.w	r2, r7, #26
 800bc6e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc72:	2102      	movs	r1, #2
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fe faa5 	bl	800a1c4 <disk_ioctl>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d001      	beq.n	800bc84 <f_mkfs+0xd8>
 800bc80:	2301      	movs	r3, #1
 800bc82:	e3dd      	b.n	800c440 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800bc84:	8b7b      	ldrh	r3, [r7, #26]
 800bc86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8a:	d80a      	bhi.n	800bca2 <f_mkfs+0xf6>
 800bc8c:	8b7b      	ldrh	r3, [r7, #26]
 800bc8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc92:	d306      	bcc.n	800bca2 <f_mkfs+0xf6>
 800bc94:	8b7b      	ldrh	r3, [r7, #26]
 800bc96:	461a      	mov	r2, r3
 800bc98:	8b7b      	ldrh	r3, [r7, #26]
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <f_mkfs+0xfa>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e3cc      	b.n	800c440 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d004      	beq.n	800bcb6 <f_mkfs+0x10a>
 800bcac:	8b7b      	ldrh	r3, [r7, #26]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d309      	bcc.n	800bcca <f_mkfs+0x11e>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bcbc:	d805      	bhi.n	800bcca <f_mkfs+0x11e>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	1e5a      	subs	r2, r3, #1
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <f_mkfs+0x122>
 800bcca:	2313      	movs	r3, #19
 800bccc:	e3b8      	b.n	800c440 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 800bcce:	8b7b      	ldrh	r3, [r7, #26]
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcd8:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bcde:	8b7b      	ldrh	r3, [r7, #26]
 800bce0:	461a      	mov	r2, r3
 800bce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bce6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcea:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bcec:	8b7b      	ldrh	r3, [r7, #26]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	fb02 f303 	mul.w	r3, r2, r3
 800bcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <f_mkfs+0x156>
 800bcfe:	230e      	movs	r3, #14
 800bd00:	e39e      	b.n	800c440 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bd02:	f107 0210 	add.w	r2, r7, #16
 800bd06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe fa59 	bl	800a1c4 <disk_ioctl>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d001      	beq.n	800bd1c <f_mkfs+0x170>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e391      	b.n	800c440 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bd1c:	7afb      	ldrb	r3, [r7, #11]
 800bd1e:	f003 0308 	and.w	r3, r3, #8
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d001      	beq.n	800bd2a <f_mkfs+0x17e>
 800bd26:	2300      	movs	r3, #0
 800bd28:	e000      	b.n	800bd2c <f_mkfs+0x180>
 800bd2a:	233f      	movs	r3, #63	; 0x3f
 800bd2c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d901      	bls.n	800bd3a <f_mkfs+0x18e>
 800bd36:	230e      	movs	r3, #14
 800bd38:	e382      	b.n	800c440 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	2b7f      	cmp	r3, #127	; 0x7f
 800bd46:	d801      	bhi.n	800bd4c <f_mkfs+0x1a0>
 800bd48:	230e      	movs	r3, #14
 800bd4a:	e379      	b.n	800c440 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b80      	cmp	r3, #128	; 0x80
 800bd50:	d901      	bls.n	800bd56 <f_mkfs+0x1aa>
 800bd52:	2313      	movs	r3, #19
 800bd54:	e374      	b.n	800c440 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bd56:	7afb      	ldrb	r3, [r7, #11]
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00d      	beq.n	800bd7c <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bd60:	7afb      	ldrb	r3, [r7, #11]
 800bd62:	f003 0307 	and.w	r3, r3, #7
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d004      	beq.n	800bd74 <f_mkfs+0x1c8>
 800bd6a:	7afb      	ldrb	r3, [r7, #11]
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d103      	bne.n	800bd7c <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 800bd74:	2303      	movs	r3, #3
 800bd76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bd7a:	e009      	b.n	800bd90 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bd7c:	7afb      	ldrb	r3, [r7, #11]
 800bd7e:	f003 0301 	and.w	r3, r3, #1
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <f_mkfs+0x1de>
 800bd86:	2313      	movs	r3, #19
 800bd88:	e35a      	b.n	800c440 <f_mkfs+0x894>
		fmt = FS_FAT16;
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bd94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	d13c      	bne.n	800be16 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 800bd9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d11b      	bne.n	800bdda <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	0c5b      	lsrs	r3, r3, #17
 800bda6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bda8:	2300      	movs	r3, #0
 800bdaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdac:	2301      	movs	r3, #1
 800bdae:	653b      	str	r3, [r7, #80]	; 0x50
 800bdb0:	e005      	b.n	800bdbe <f_mkfs+0x212>
 800bdb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdba:	005b      	lsls	r3, r3, #1
 800bdbc:	653b      	str	r3, [r7, #80]	; 0x50
 800bdbe:	4a2e      	ldr	r2, [pc, #184]	; (800be78 <f_mkfs+0x2cc>)
 800bdc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d007      	beq.n	800bdda <f_mkfs+0x22e>
 800bdca:	4a2b      	ldr	r2, [pc, #172]	; (800be78 <f_mkfs+0x2cc>)
 800bdcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d2eb      	bcs.n	800bdb2 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde2:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	3302      	adds	r3, #2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	8b7a      	ldrh	r2, [r7, #26]
 800bdec:	4413      	add	r3, r2
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	8b7a      	ldrh	r2, [r7, #26]
 800bdf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdf6:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bdf8:	2320      	movs	r3, #32
 800bdfa:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be02:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800be06:	4293      	cmp	r3, r2
 800be08:	d903      	bls.n	800be12 <f_mkfs+0x266>
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	4a1b      	ldr	r2, [pc, #108]	; (800be7c <f_mkfs+0x2d0>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d954      	bls.n	800bebc <f_mkfs+0x310>
 800be12:	230e      	movs	r3, #14
 800be14:	e314      	b.n	800c440 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800be16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d11b      	bne.n	800be54 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	0b1b      	lsrs	r3, r3, #12
 800be20:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800be22:	2300      	movs	r3, #0
 800be24:	64bb      	str	r3, [r7, #72]	; 0x48
 800be26:	2301      	movs	r3, #1
 800be28:	653b      	str	r3, [r7, #80]	; 0x50
 800be2a:	e005      	b.n	800be38 <f_mkfs+0x28c>
 800be2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be2e:	3301      	adds	r3, #1
 800be30:	64bb      	str	r3, [r7, #72]	; 0x48
 800be32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	653b      	str	r3, [r7, #80]	; 0x50
 800be38:	4a11      	ldr	r2, [pc, #68]	; (800be80 <f_mkfs+0x2d4>)
 800be3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d007      	beq.n	800be54 <f_mkfs+0x2a8>
 800be44:	4a0e      	ldr	r2, [pc, #56]	; (800be80 <f_mkfs+0x2d4>)
 800be46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be4c:	461a      	mov	r2, r3
 800be4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be50:	4293      	cmp	r3, r2
 800be52:	d2eb      	bcs.n	800be2c <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be58:	fbb2 f3f3 	udiv	r3, r2, r3
 800be5c:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be64:	4293      	cmp	r3, r2
 800be66:	d90d      	bls.n	800be84 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	3302      	adds	r3, #2
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be70:	e013      	b.n	800be9a <f_mkfs+0x2ee>
 800be72:	bf00      	nop
 800be74:	20002df0 	.word	0x20002df0
 800be78:	0801c2d8 	.word	0x0801c2d8
 800be7c:	0ffffff5 	.word	0x0ffffff5
 800be80:	0801c2e8 	.word	0x0801c2e8
				} else {
					fmt = FS_FAT12;
 800be84:	2301      	movs	r3, #1
 800be86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800be8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be8c:	4613      	mov	r3, r2
 800be8e:	005b      	lsls	r3, r3, #1
 800be90:	4413      	add	r3, r2
 800be92:	3301      	adds	r3, #1
 800be94:	085b      	lsrs	r3, r3, #1
 800be96:	3303      	adds	r3, #3
 800be98:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800be9a:	8b7b      	ldrh	r3, [r7, #26]
 800be9c:	461a      	mov	r2, r3
 800be9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bea0:	4413      	add	r3, r2
 800bea2:	3b01      	subs	r3, #1
 800bea4:	8b7a      	ldrh	r2, [r7, #26]
 800bea6:	fbb3 f3f2 	udiv	r3, r3, r2
 800beaa:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800beac:	2301      	movs	r3, #1
 800beae:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800beb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beb2:	015b      	lsls	r3, r3, #5
 800beb4:	8b7a      	ldrh	r2, [r7, #26]
 800beb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800beba:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800bebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bec0:	4413      	add	r3, r2
 800bec2:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800bec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bec8:	fb03 f202 	mul.w	r2, r3, r2
 800becc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bece:	4413      	add	r3, r2
 800bed0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bed2:	4413      	add	r3, r2
 800bed4:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	4413      	add	r3, r2
 800bedc:	1e5a      	subs	r2, r3, #1
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	425b      	negs	r3, r3
 800bee2:	401a      	ands	r2, r3
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800beea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d108      	bne.n	800bf04 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 800bef2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bef6:	4413      	add	r3, r2
 800bef8:	657b      	str	r3, [r7, #84]	; 0x54
 800befa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800befc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800befe:	4413      	add	r3, r2
 800bf00:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf02:	e006      	b.n	800bf12 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800bf04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf0e:	4413      	add	r3, r2
 800bf10:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800bf12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf14:	011a      	lsls	r2, r3, #4
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	441a      	add	r2, r3
 800bf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1c:	1ad2      	subs	r2, r2, r3
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d901      	bls.n	800bf28 <f_mkfs+0x37c>
 800bf24:	230e      	movs	r3, #14
 800bf26:	e28b      	b.n	800c440 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf2c:	1ad2      	subs	r2, r2, r3
 800bf2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf32:	fb01 f303 	mul.w	r3, r1, r3
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf3a:	1ad2      	subs	r2, r2, r3
 800bf3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf42:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 800bf44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d10f      	bne.n	800bf6c <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d80a      	bhi.n	800bf6c <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d105      	bne.n	800bf68 <f_mkfs+0x3bc>
 800bf5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf5e:	085b      	lsrs	r3, r3, #1
 800bf60:	607b      	str	r3, [r7, #4]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d144      	bne.n	800bff2 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 800bf68:	230e      	movs	r3, #14
 800bf6a:	e269      	b.n	800c440 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 800bf6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d133      	bne.n	800bfdc <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d91e      	bls.n	800bfbc <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d107      	bne.n	800bf94 <f_mkfs+0x3e8>
 800bf84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	2b40      	cmp	r3, #64	; 0x40
 800bf8a:	d803      	bhi.n	800bf94 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800bf8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	607b      	str	r3, [r7, #4]
 800bf92:	e033      	b.n	800bffc <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 800bf94:	7afb      	ldrb	r3, [r7, #11]
 800bf96:	f003 0302 	and.w	r3, r3, #2
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bfa4:	e02a      	b.n	800bffc <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d105      	bne.n	800bfb8 <f_mkfs+0x40c>
 800bfac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfae:	005b      	lsls	r3, r3, #1
 800bfb0:	607b      	str	r3, [r7, #4]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b80      	cmp	r3, #128	; 0x80
 800bfb6:	d91e      	bls.n	800bff6 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 800bfb8:	230e      	movs	r3, #14
 800bfba:	e241      	b.n	800c440 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d80a      	bhi.n	800bfdc <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d105      	bne.n	800bfd8 <f_mkfs+0x42c>
 800bfcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	607b      	str	r3, [r7, #4]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2b80      	cmp	r3, #128	; 0x80
 800bfd6:	d910      	bls.n	800bffa <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 800bfd8:	230e      	movs	r3, #14
 800bfda:	e231      	b.n	800c440 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bfdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d10c      	bne.n	800bffe <f_mkfs+0x452>
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d907      	bls.n	800bffe <f_mkfs+0x452>
 800bfee:	230e      	movs	r3, #14
 800bff0:	e226      	b.n	800c440 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bff2:	bf00      	nop
 800bff4:	e6cc      	b.n	800bd90 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bff6:	bf00      	nop
 800bff8:	e6ca      	b.n	800bd90 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bffa:	bf00      	nop
			pau = au;
 800bffc:	e6c8      	b.n	800bd90 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 800bffe:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800c000:	8b7b      	ldrh	r3, [r7, #26]
 800c002:	461a      	mov	r2, r3
 800c004:	2100      	movs	r1, #0
 800c006:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c008:	f7fe f99d 	bl	800a346 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800c00c:	220b      	movs	r2, #11
 800c00e:	49b3      	ldr	r1, [pc, #716]	; (800c2dc <f_mkfs+0x730>)
 800c010:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c012:	f7fe f977 	bl	800a304 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c018:	330b      	adds	r3, #11
 800c01a:	8b7a      	ldrh	r2, [r7, #26]
 800c01c:	4611      	mov	r1, r2
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe f929 	bl	800a276 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800c024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c026:	330d      	adds	r3, #13
 800c028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c02a:	b2d2      	uxtb	r2, r2
 800c02c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c030:	330e      	adds	r3, #14
 800c032:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c034:	b292      	uxth	r2, r2
 800c036:	4611      	mov	r1, r2
 800c038:	4618      	mov	r0, r3
 800c03a:	f7fe f91c 	bl	800a276 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c040:	3310      	adds	r3, #16
 800c042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c044:	b2d2      	uxtb	r2, r2
 800c046:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c04a:	f103 0211 	add.w	r2, r3, #17
 800c04e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c052:	2b03      	cmp	r3, #3
 800c054:	d002      	beq.n	800c05c <f_mkfs+0x4b0>
 800c056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c058:	b29b      	uxth	r3, r3
 800c05a:	e000      	b.n	800c05e <f_mkfs+0x4b2>
 800c05c:	2300      	movs	r3, #0
 800c05e:	4619      	mov	r1, r3
 800c060:	4610      	mov	r0, r2
 800c062:	f7fe f908 	bl	800a276 <st_word>
		if (sz_vol < 0x10000) {
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c06c:	d208      	bcs.n	800c080 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c070:	3313      	adds	r3, #19
 800c072:	693a      	ldr	r2, [r7, #16]
 800c074:	b292      	uxth	r2, r2
 800c076:	4611      	mov	r1, r2
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fe f8fc 	bl	800a276 <st_word>
 800c07e:	e006      	b.n	800c08e <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c082:	3320      	adds	r3, #32
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	4611      	mov	r1, r2
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fe f90f 	bl	800a2ac <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c090:	3315      	adds	r3, #21
 800c092:	22f8      	movs	r2, #248	; 0xf8
 800c094:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c098:	3318      	adds	r3, #24
 800c09a:	213f      	movs	r1, #63	; 0x3f
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fe f8ea 	bl	800a276 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a4:	331a      	adds	r3, #26
 800c0a6:	21ff      	movs	r1, #255	; 0xff
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe f8e4 	bl	800a276 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b0:	331c      	adds	r3, #28
 800c0b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe f8f9 	bl	800a2ac <st_dword>
		if (fmt == FS_FAT32) {
 800c0ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d131      	bne.n	800c126 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c4:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c0c8:	f7fb fc98 	bl	80079fc <get_fattime>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f7fe f8eb 	bl	800a2ac <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d8:	3324      	adds	r3, #36	; 0x24
 800c0da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe f8e5 	bl	800a2ac <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e4:	332c      	adds	r3, #44	; 0x2c
 800c0e6:	2102      	movs	r1, #2
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe f8df 	bl	800a2ac <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f0:	3330      	adds	r3, #48	; 0x30
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fe f8be 	bl	800a276 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0fc:	3332      	adds	r3, #50	; 0x32
 800c0fe:	2106      	movs	r1, #6
 800c100:	4618      	mov	r0, r3
 800c102:	f7fe f8b8 	bl	800a276 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c108:	3340      	adds	r3, #64	; 0x40
 800c10a:	2280      	movs	r2, #128	; 0x80
 800c10c:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c110:	3342      	adds	r3, #66	; 0x42
 800c112:	2229      	movs	r2, #41	; 0x29
 800c114:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c118:	3347      	adds	r3, #71	; 0x47
 800c11a:	2213      	movs	r2, #19
 800c11c:	4970      	ldr	r1, [pc, #448]	; (800c2e0 <f_mkfs+0x734>)
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe f8f0 	bl	800a304 <mem_cpy>
 800c124:	e020      	b.n	800c168 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c128:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c12c:	f7fb fc66 	bl	80079fc <get_fattime>
 800c130:	4603      	mov	r3, r0
 800c132:	4619      	mov	r1, r3
 800c134:	4620      	mov	r0, r4
 800c136:	f7fe f8b9 	bl	800a2ac <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13c:	3316      	adds	r3, #22
 800c13e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c140:	b292      	uxth	r2, r2
 800c142:	4611      	mov	r1, r2
 800c144:	4618      	mov	r0, r3
 800c146:	f7fe f896 	bl	800a276 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14c:	3324      	adds	r3, #36	; 0x24
 800c14e:	2280      	movs	r2, #128	; 0x80
 800c150:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	3326      	adds	r3, #38	; 0x26
 800c156:	2229      	movs	r2, #41	; 0x29
 800c158:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15c:	332b      	adds	r3, #43	; 0x2b
 800c15e:	2213      	movs	r2, #19
 800c160:	4960      	ldr	r1, [pc, #384]	; (800c2e4 <f_mkfs+0x738>)
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe f8ce 	bl	800a304 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c16e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c172:	4618      	mov	r0, r3
 800c174:	f7fe f87f 	bl	800a276 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c178:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c17c:	2301      	movs	r3, #1
 800c17e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c180:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c182:	f7fd ffff 	bl	800a184 <disk_write>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <f_mkfs+0x5e4>
 800c18c:	2301      	movs	r3, #1
 800c18e:	e157      	b.n	800c440 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c190:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c194:	2b03      	cmp	r3, #3
 800c196:	d140      	bne.n	800c21a <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	1d9a      	adds	r2, r3, #6
 800c19c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1a4:	f7fd ffee 	bl	800a184 <disk_write>
			mem_set(buf, 0, ss);
 800c1a8:	8b7b      	ldrh	r3, [r7, #26]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c1b0:	f7fe f8c9 	bl	800a346 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c1b4:	494c      	ldr	r1, [pc, #304]	; (800c2e8 <f_mkfs+0x73c>)
 800c1b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c1b8:	f7fe f878 	bl	800a2ac <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c1c2:	494a      	ldr	r1, [pc, #296]	; (800c2ec <f_mkfs+0x740>)
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe f871 	bl	800a2ac <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	f7fe f868 	bl	800a2ac <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c1e2:	2102      	movs	r1, #2
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fe f861 	bl	800a2ac <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe f83e 	bl	800a276 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fc:	1dda      	adds	r2, r3, #7
 800c1fe:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c202:	2301      	movs	r3, #1
 800c204:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c206:	f7fd ffbd 	bl	800a184 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20c:	1c5a      	adds	r2, r3, #1
 800c20e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c212:	2301      	movs	r3, #1
 800c214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c216:	f7fd ffb5 	bl	800a184 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c21a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c21c:	2100      	movs	r1, #0
 800c21e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c220:	f7fe f891 	bl	800a346 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c226:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c228:	2300      	movs	r3, #0
 800c22a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c22c:	e04b      	b.n	800c2c6 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 800c22e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c232:	2b03      	cmp	r3, #3
 800c234:	d113      	bne.n	800c25e <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c236:	f06f 0107 	mvn.w	r1, #7
 800c23a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c23c:	f7fe f836 	bl	800a2ac <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c242:	3304      	adds	r3, #4
 800c244:	f04f 31ff 	mov.w	r1, #4294967295
 800c248:	4618      	mov	r0, r3
 800c24a:	f7fe f82f 	bl	800a2ac <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c250:	3308      	adds	r3, #8
 800c252:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe f828 	bl	800a2ac <st_dword>
 800c25c:	e00b      	b.n	800c276 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c25e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c262:	2b01      	cmp	r3, #1
 800c264:	d101      	bne.n	800c26a <f_mkfs+0x6be>
 800c266:	4b22      	ldr	r3, [pc, #136]	; (800c2f0 <f_mkfs+0x744>)
 800c268:	e001      	b.n	800c26e <f_mkfs+0x6c2>
 800c26a:	f06f 0307 	mvn.w	r3, #7
 800c26e:	4619      	mov	r1, r3
 800c270:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c272:	f7fe f81b 	bl	800a2ac <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c278:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c27a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	4293      	cmp	r3, r2
 800c280:	bf28      	it	cs
 800c282:	4613      	movcs	r3, r2
 800c284:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c286:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c28a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c28c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c28e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c290:	f7fd ff78 	bl	800a184 <disk_write>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d001      	beq.n	800c29e <f_mkfs+0x6f2>
 800c29a:	2301      	movs	r3, #1
 800c29c:	e0d0      	b.n	800c440 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 800c29e:	8b7b      	ldrh	r3, [r7, #26]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c2a6:	f7fe f84e 	bl	800a346 <mem_set>
				sect += n; nsect -= n;
 800c2aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2ae:	4413      	add	r3, r2
 800c2b0:	667b      	str	r3, [r7, #100]	; 0x64
 800c2b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c2ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1dc      	bne.n	800c27a <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d3af      	bcc.n	800c22e <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c2ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d10e      	bne.n	800c2f4 <f_mkfs+0x748>
 800c2d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2d8:	e00d      	b.n	800c2f6 <f_mkfs+0x74a>
 800c2da:	bf00      	nop
 800c2dc:	0801a754 	.word	0x0801a754
 800c2e0:	0801a760 	.word	0x0801a760
 800c2e4:	0801a774 	.word	0x0801a774
 800c2e8:	41615252 	.word	0x41615252
 800c2ec:	61417272 	.word	0x61417272
 800c2f0:	00fffff8 	.word	0x00fffff8
 800c2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2f6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c2f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	bf28      	it	cs
 800c300:	4613      	movcs	r3, r2
 800c302:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c304:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c30a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c30c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c30e:	f7fd ff39 	bl	800a184 <disk_write>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d001      	beq.n	800c31c <f_mkfs+0x770>
 800c318:	2301      	movs	r3, #1
 800c31a:	e091      	b.n	800c440 <f_mkfs+0x894>
			sect += n; nsect -= n;
 800c31c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c31e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c320:	4413      	add	r3, r2
 800c322:	667b      	str	r3, [r7, #100]	; 0x64
 800c324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c32c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1e2      	bne.n	800c2f8 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c332:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c336:	2b03      	cmp	r3, #3
 800c338:	d103      	bne.n	800c342 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 800c33a:	230c      	movs	r3, #12
 800c33c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c340:	e010      	b.n	800c364 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c348:	d303      	bcc.n	800c352 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c34a:	2306      	movs	r3, #6
 800c34c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c350:	e008      	b.n	800c364 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c356:	2b02      	cmp	r3, #2
 800c358:	d101      	bne.n	800c35e <f_mkfs+0x7b2>
 800c35a:	2304      	movs	r3, #4
 800c35c:	e000      	b.n	800c360 <f_mkfs+0x7b4>
 800c35e:	2301      	movs	r3, #1
 800c360:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c364:	7afb      	ldrb	r3, [r7, #11]
 800c366:	f003 0308 	and.w	r3, r3, #8
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d15b      	bne.n	800c426 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 800c36e:	8b7b      	ldrh	r3, [r7, #26]
 800c370:	461a      	mov	r2, r3
 800c372:	2100      	movs	r1, #0
 800c374:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c376:	f7fd ffe6 	bl	800a346 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c37c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c380:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c384:	4618      	mov	r0, r3
 800c386:	f7fd ff76 	bl	800a276 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c390:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	2200      	movs	r2, #0
 800c396:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	3301      	adds	r3, #1
 800c39c:	2201      	movs	r2, #1
 800c39e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	3302      	adds	r3, #2
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	3303      	adds	r3, #3
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c3b8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	441a      	add	r2, r3
 800c3c0:	4b21      	ldr	r3, [pc, #132]	; (800c448 <f_mkfs+0x89c>)
 800c3c2:	fba3 1302 	umull	r1, r3, r3, r2
 800c3c6:	1ad2      	subs	r2, r2, r3
 800c3c8:	0852      	lsrs	r2, r2, #1
 800c3ca:	4413      	add	r3, r2
 800c3cc:	0b5b      	lsrs	r3, r3, #13
 800c3ce:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	3305      	adds	r3, #5
 800c3d4:	22fe      	movs	r2, #254	; 0xfe
 800c3d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c3d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3da:	089b      	lsrs	r3, r3, #2
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	3306      	adds	r3, #6
 800c3e2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c3e6:	b2d2      	uxtb	r2, r2
 800c3e8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	3307      	adds	r3, #7
 800c3ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3f0:	b2d2      	uxtb	r2, r2
 800c3f2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fd ff56 	bl	800a2ac <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	330c      	adds	r3, #12
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	4611      	mov	r1, r2
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fd ff4f 	bl	800a2ac <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c40e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c412:	2301      	movs	r3, #1
 800c414:	2200      	movs	r2, #0
 800c416:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c418:	f7fd feb4 	bl	800a184 <disk_write>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d001      	beq.n	800c426 <f_mkfs+0x87a>
 800c422:	2301      	movs	r3, #1
 800c424:	e00c      	b.n	800c440 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c426:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c42a:	2200      	movs	r2, #0
 800c42c:	2100      	movs	r1, #0
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fd fec8 	bl	800a1c4 <disk_ioctl>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <f_mkfs+0x892>
 800c43a:	2301      	movs	r3, #1
 800c43c:	e000      	b.n	800c440 <f_mkfs+0x894>

	return FR_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3774      	adds	r7, #116	; 0x74
 800c444:	46bd      	mov	sp, r7
 800c446:	bd90      	pop	{r4, r7, pc}
 800c448:	0515565b 	.word	0x0515565b

0800c44c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b087      	sub	sp, #28
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	4613      	mov	r3, r2
 800c458:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c45a:	2301      	movs	r3, #1
 800c45c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c462:	4b1f      	ldr	r3, [pc, #124]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c464:	7a5b      	ldrb	r3, [r3, #9]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d131      	bne.n	800c4d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c46c:	4b1c      	ldr	r3, [pc, #112]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c46e:	7a5b      	ldrb	r3, [r3, #9]
 800c470:	b2db      	uxtb	r3, r3
 800c472:	461a      	mov	r2, r3
 800c474:	4b1a      	ldr	r3, [pc, #104]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c476:	2100      	movs	r1, #0
 800c478:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c47a:	4b19      	ldr	r3, [pc, #100]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c47c:	7a5b      	ldrb	r3, [r3, #9]
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	4a17      	ldr	r2, [pc, #92]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c48a:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c48c:	7a5b      	ldrb	r3, [r3, #9]
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	461a      	mov	r2, r3
 800c492:	4b13      	ldr	r3, [pc, #76]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c494:	4413      	add	r3, r2
 800c496:	79fa      	ldrb	r2, [r7, #7]
 800c498:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c49a:	4b11      	ldr	r3, [pc, #68]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c49c:	7a5b      	ldrb	r3, [r3, #9]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	b2d1      	uxtb	r1, r2
 800c4a4:	4a0e      	ldr	r2, [pc, #56]	; (800c4e0 <FATFS_LinkDriverEx+0x94>)
 800c4a6:	7251      	strb	r1, [r2, #9]
 800c4a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c4aa:	7dbb      	ldrb	r3, [r7, #22]
 800c4ac:	3330      	adds	r3, #48	; 0x30
 800c4ae:	b2da      	uxtb	r2, r3
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	223a      	movs	r2, #58	; 0x3a
 800c4ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	3302      	adds	r3, #2
 800c4c0:	222f      	movs	r2, #47	; 0x2f
 800c4c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	3303      	adds	r3, #3
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	371c      	adds	r7, #28
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	20002e18 	.word	0x20002e18

0800c4e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff ffaa 	bl	800c44c <FATFS_LinkDriverEx>
 800c4f8:	4603      	mov	r3, r0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
	...

0800c504 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	6039      	str	r1, [r7, #0]
 800c50e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c510:	88fb      	ldrh	r3, [r7, #6]
 800c512:	2b7f      	cmp	r3, #127	; 0x7f
 800c514:	d802      	bhi.n	800c51c <ff_convert+0x18>
		c = chr;
 800c516:	88fb      	ldrh	r3, [r7, #6]
 800c518:	81fb      	strh	r3, [r7, #14]
 800c51a:	e025      	b.n	800c568 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00b      	beq.n	800c53a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c522:	88fb      	ldrh	r3, [r7, #6]
 800c524:	2bff      	cmp	r3, #255	; 0xff
 800c526:	d805      	bhi.n	800c534 <ff_convert+0x30>
 800c528:	88fb      	ldrh	r3, [r7, #6]
 800c52a:	3b80      	subs	r3, #128	; 0x80
 800c52c:	4a12      	ldr	r2, [pc, #72]	; (800c578 <ff_convert+0x74>)
 800c52e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c532:	e000      	b.n	800c536 <ff_convert+0x32>
 800c534:	2300      	movs	r3, #0
 800c536:	81fb      	strh	r3, [r7, #14]
 800c538:	e016      	b.n	800c568 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c53a:	2300      	movs	r3, #0
 800c53c:	81fb      	strh	r3, [r7, #14]
 800c53e:	e009      	b.n	800c554 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c540:	89fb      	ldrh	r3, [r7, #14]
 800c542:	4a0d      	ldr	r2, [pc, #52]	; (800c578 <ff_convert+0x74>)
 800c544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c548:	88fa      	ldrh	r2, [r7, #6]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d006      	beq.n	800c55c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c54e:	89fb      	ldrh	r3, [r7, #14]
 800c550:	3301      	adds	r3, #1
 800c552:	81fb      	strh	r3, [r7, #14]
 800c554:	89fb      	ldrh	r3, [r7, #14]
 800c556:	2b7f      	cmp	r3, #127	; 0x7f
 800c558:	d9f2      	bls.n	800c540 <ff_convert+0x3c>
 800c55a:	e000      	b.n	800c55e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c55c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c55e:	89fb      	ldrh	r3, [r7, #14]
 800c560:	3380      	adds	r3, #128	; 0x80
 800c562:	b29b      	uxth	r3, r3
 800c564:	b2db      	uxtb	r3, r3
 800c566:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c568:	89fb      	ldrh	r3, [r7, #14]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	0801c2f8 	.word	0x0801c2f8

0800c57c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b087      	sub	sp, #28
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c586:	88fb      	ldrh	r3, [r7, #6]
 800c588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c58c:	d201      	bcs.n	800c592 <ff_wtoupper+0x16>
 800c58e:	4b3e      	ldr	r3, [pc, #248]	; (800c688 <ff_wtoupper+0x10c>)
 800c590:	e000      	b.n	800c594 <ff_wtoupper+0x18>
 800c592:	4b3e      	ldr	r3, [pc, #248]	; (800c68c <ff_wtoupper+0x110>)
 800c594:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	1c9a      	adds	r2, r3, #2
 800c59a:	617a      	str	r2, [r7, #20]
 800c59c:	881b      	ldrh	r3, [r3, #0]
 800c59e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c5a0:	8a7b      	ldrh	r3, [r7, #18]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d068      	beq.n	800c678 <ff_wtoupper+0xfc>
 800c5a6:	88fa      	ldrh	r2, [r7, #6]
 800c5a8:	8a7b      	ldrh	r3, [r7, #18]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d364      	bcc.n	800c678 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	1c9a      	adds	r2, r3, #2
 800c5b2:	617a      	str	r2, [r7, #20]
 800c5b4:	881b      	ldrh	r3, [r3, #0]
 800c5b6:	823b      	strh	r3, [r7, #16]
 800c5b8:	8a3b      	ldrh	r3, [r7, #16]
 800c5ba:	0a1b      	lsrs	r3, r3, #8
 800c5bc:	81fb      	strh	r3, [r7, #14]
 800c5be:	8a3b      	ldrh	r3, [r7, #16]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c5c4:	88fa      	ldrh	r2, [r7, #6]
 800c5c6:	8a79      	ldrh	r1, [r7, #18]
 800c5c8:	8a3b      	ldrh	r3, [r7, #16]
 800c5ca:	440b      	add	r3, r1
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	da49      	bge.n	800c664 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c5d0:	89fb      	ldrh	r3, [r7, #14]
 800c5d2:	2b08      	cmp	r3, #8
 800c5d4:	d84f      	bhi.n	800c676 <ff_wtoupper+0xfa>
 800c5d6:	a201      	add	r2, pc, #4	; (adr r2, 800c5dc <ff_wtoupper+0x60>)
 800c5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5dc:	0800c601 	.word	0x0800c601
 800c5e0:	0800c613 	.word	0x0800c613
 800c5e4:	0800c629 	.word	0x0800c629
 800c5e8:	0800c631 	.word	0x0800c631
 800c5ec:	0800c639 	.word	0x0800c639
 800c5f0:	0800c641 	.word	0x0800c641
 800c5f4:	0800c649 	.word	0x0800c649
 800c5f8:	0800c651 	.word	0x0800c651
 800c5fc:	0800c659 	.word	0x0800c659
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c600:	88fa      	ldrh	r2, [r7, #6]
 800c602:	8a7b      	ldrh	r3, [r7, #18]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	697a      	ldr	r2, [r7, #20]
 800c60a:	4413      	add	r3, r2
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	80fb      	strh	r3, [r7, #6]
 800c610:	e027      	b.n	800c662 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c612:	88fa      	ldrh	r2, [r7, #6]
 800c614:	8a7b      	ldrh	r3, [r7, #18]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	b29b      	uxth	r3, r3
 800c61a:	f003 0301 	and.w	r3, r3, #1
 800c61e:	b29b      	uxth	r3, r3
 800c620:	88fa      	ldrh	r2, [r7, #6]
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	80fb      	strh	r3, [r7, #6]
 800c626:	e01c      	b.n	800c662 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c628:	88fb      	ldrh	r3, [r7, #6]
 800c62a:	3b10      	subs	r3, #16
 800c62c:	80fb      	strh	r3, [r7, #6]
 800c62e:	e018      	b.n	800c662 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c630:	88fb      	ldrh	r3, [r7, #6]
 800c632:	3b20      	subs	r3, #32
 800c634:	80fb      	strh	r3, [r7, #6]
 800c636:	e014      	b.n	800c662 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c638:	88fb      	ldrh	r3, [r7, #6]
 800c63a:	3b30      	subs	r3, #48	; 0x30
 800c63c:	80fb      	strh	r3, [r7, #6]
 800c63e:	e010      	b.n	800c662 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c640:	88fb      	ldrh	r3, [r7, #6]
 800c642:	3b1a      	subs	r3, #26
 800c644:	80fb      	strh	r3, [r7, #6]
 800c646:	e00c      	b.n	800c662 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c648:	88fb      	ldrh	r3, [r7, #6]
 800c64a:	3308      	adds	r3, #8
 800c64c:	80fb      	strh	r3, [r7, #6]
 800c64e:	e008      	b.n	800c662 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c650:	88fb      	ldrh	r3, [r7, #6]
 800c652:	3b50      	subs	r3, #80	; 0x50
 800c654:	80fb      	strh	r3, [r7, #6]
 800c656:	e004      	b.n	800c662 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c658:	88fb      	ldrh	r3, [r7, #6]
 800c65a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c65e:	80fb      	strh	r3, [r7, #6]
 800c660:	bf00      	nop
			}
			break;
 800c662:	e008      	b.n	800c676 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c664:	89fb      	ldrh	r3, [r7, #14]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d195      	bne.n	800c596 <ff_wtoupper+0x1a>
 800c66a:	8a3b      	ldrh	r3, [r7, #16]
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	4413      	add	r3, r2
 800c672:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c674:	e78f      	b.n	800c596 <ff_wtoupper+0x1a>
			break;
 800c676:	bf00      	nop
	}

	return chr;
 800c678:	88fb      	ldrh	r3, [r7, #6]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	371c      	adds	r7, #28
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	0801c3f8 	.word	0x0801c3f8
 800c68c:	0801c5ec 	.word	0x0801c5ec

0800c690 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b086      	sub	sp, #24
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	6039      	str	r1, [r7, #0]
 800c69a:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c69c:	2300      	movs	r3, #0
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c6a4:	f107 030c 	add.w	r3, r7, #12
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 f8cd 	bl	800c84a <osSemaphoreCreate>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	bf14      	ite	ne
 800c6be:	2301      	movne	r3, #1
 800c6c0:	2300      	moveq	r3, #0
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	617b      	str	r3, [r7, #20]

    return ret;
 800c6c6:	697b      	ldr	r3, [r7, #20]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3718      	adds	r7, #24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f96d 	bl	800c9b8 <osSemaphoreDelete>
#endif
    return 1;
 800c6de:	2301      	movs	r3, #1
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c6f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f8d9 	bl	800c8b0 <osSemaphoreWait>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c704:	2301      	movs	r3, #1
 800c706:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c708:	68fb      	ldr	r3, [r7, #12]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f916 	bl	800c94c <osSemaphoreRelease>
#endif
}
 800c720:	bf00      	nop
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73a:	2b84      	cmp	r3, #132	; 0x84
 800c73c:	d005      	beq.n	800c74a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c73e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	4413      	add	r3, r2
 800c746:	3303      	adds	r3, #3
 800c748:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c74a:	68fb      	ldr	r3, [r7, #12]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c75e:	f3ef 8305 	mrs	r3, IPSR
 800c762:	607b      	str	r3, [r7, #4]
  return(result);
 800c764:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c766:	2b00      	cmp	r3, #0
 800c768:	bf14      	ite	ne
 800c76a:	2301      	movne	r3, #1
 800c76c:	2300      	moveq	r3, #0
 800c76e:	b2db      	uxtb	r3, r3
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c780:	f001 fbcc 	bl	800df1c <vTaskStartScheduler>
  
  return osOK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	bd80      	pop	{r7, pc}

0800c78a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c78a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c78c:	b089      	sub	sp, #36	; 0x24
 800c78e:	af04      	add	r7, sp, #16
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	695b      	ldr	r3, [r3, #20]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d020      	beq.n	800c7de <osThreadCreate+0x54>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01c      	beq.n	800c7de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685c      	ldr	r4, [r3, #4]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681d      	ldr	r5, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	691e      	ldr	r6, [r3, #16]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7ff ffb6 	bl	800c728 <makeFreeRtosPriority>
 800c7bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7c6:	9202      	str	r2, [sp, #8]
 800c7c8:	9301      	str	r3, [sp, #4]
 800c7ca:	9100      	str	r1, [sp, #0]
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f001 f946 	bl	800da64 <xTaskCreateStatic>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	e01c      	b.n	800c818 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685c      	ldr	r4, [r3, #4]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7ea:	b29e      	uxth	r6, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7ff ff98 	bl	800c728 <makeFreeRtosPriority>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	f107 030c 	add.w	r3, r7, #12
 800c7fe:	9301      	str	r3, [sp, #4]
 800c800:	9200      	str	r2, [sp, #0]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	4632      	mov	r2, r6
 800c806:	4629      	mov	r1, r5
 800c808:	4620      	mov	r0, r4
 800c80a:	f001 f988 	bl	800db1e <xTaskCreate>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b01      	cmp	r3, #1
 800c812:	d001      	beq.n	800c818 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c814:	2300      	movs	r3, #0
 800c816:	e000      	b.n	800c81a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c818:	68fb      	ldr	r3, [r7, #12]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c822 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <osDelay+0x16>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	e000      	b.n	800c83a <osDelay+0x18>
 800c838:	2301      	movs	r3, #1
 800c83a:	4618      	mov	r0, r3
 800c83c:	f001 fb3a 	bl	800deb4 <vTaskDelay>
  
  return osOK;
 800c840:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b086      	sub	sp, #24
 800c84e:	af02      	add	r7, sp, #8
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00f      	beq.n	800c87c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d10a      	bne.n	800c878 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	2203      	movs	r2, #3
 800c868:	9200      	str	r2, [sp, #0]
 800c86a:	2200      	movs	r2, #0
 800c86c:	2100      	movs	r1, #0
 800c86e:	2001      	movs	r0, #1
 800c870:	f000 f9d2 	bl	800cc18 <xQueueGenericCreateStatic>
 800c874:	4603      	mov	r3, r0
 800c876:	e016      	b.n	800c8a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c878:	2300      	movs	r3, #0
 800c87a:	e014      	b.n	800c8a6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d110      	bne.n	800c8a4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c882:	2203      	movs	r2, #3
 800c884:	2100      	movs	r1, #0
 800c886:	2001      	movs	r0, #1
 800c888:	f000 fa3e 	bl	800cd08 <xQueueGenericCreate>
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d005      	beq.n	800c8a0 <osSemaphoreCreate+0x56>
 800c894:	2300      	movs	r3, #0
 800c896:	2200      	movs	r2, #0
 800c898:	2100      	movs	r1, #0
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f000 fada 	bl	800ce54 <xQueueGenericSend>
      return sema;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	e000      	b.n	800c8a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c8a4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d101      	bne.n	800c8c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c8c4:	2380      	movs	r3, #128	; 0x80
 800c8c6:	e03a      	b.n	800c93e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d2:	d103      	bne.n	800c8dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	e009      	b.n	800c8f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d006      	beq.n	800c8f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <osSemaphoreWait+0x40>
      ticks = 1;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c8f0:	f7ff ff32 	bl	800c758 <inHandlerMode>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d017      	beq.n	800c92a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c8fa:	f107 0308 	add.w	r3, r7, #8
 800c8fe:	461a      	mov	r2, r3
 800c900:	2100      	movs	r1, #0
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 feb8 	bl	800d678 <xQueueReceiveFromISR>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d001      	beq.n	800c912 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c90e:	23ff      	movs	r3, #255	; 0xff
 800c910:	e015      	b.n	800c93e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d011      	beq.n	800c93c <osSemaphoreWait+0x8c>
 800c918:	4b0b      	ldr	r3, [pc, #44]	; (800c948 <osSemaphoreWait+0x98>)
 800c91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	e008      	b.n	800c93c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c92a:	68f9      	ldr	r1, [r7, #12]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fd97 	bl	800d460 <xQueueSemaphoreTake>
 800c932:	4603      	mov	r3, r0
 800c934:	2b01      	cmp	r3, #1
 800c936:	d001      	beq.n	800c93c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c938:	23ff      	movs	r3, #255	; 0xff
 800c93a:	e000      	b.n	800c93e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c954:	2300      	movs	r3, #0
 800c956:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c958:	2300      	movs	r3, #0
 800c95a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c95c:	f7ff fefc 	bl	800c758 <inHandlerMode>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d016      	beq.n	800c994 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c966:	f107 0308 	add.w	r3, r7, #8
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fc0a 	bl	800d186 <xQueueGiveFromISR>
 800c972:	4603      	mov	r3, r0
 800c974:	2b01      	cmp	r3, #1
 800c976:	d001      	beq.n	800c97c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c978:	23ff      	movs	r3, #255	; 0xff
 800c97a:	e017      	b.n	800c9ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d013      	beq.n	800c9aa <osSemaphoreRelease+0x5e>
 800c982:	4b0c      	ldr	r3, [pc, #48]	; (800c9b4 <osSemaphoreRelease+0x68>)
 800c984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	e00a      	b.n	800c9aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c994:	2300      	movs	r3, #0
 800c996:	2200      	movs	r2, #0
 800c998:	2100      	movs	r1, #0
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fa5a 	bl	800ce54 <xQueueGenericSend>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d001      	beq.n	800c9aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c9a6:	23ff      	movs	r3, #255	; 0xff
 800c9a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	e000ed04 	.word	0xe000ed04

0800c9b8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c9c0:	f7ff feca 	bl	800c758 <inHandlerMode>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d001      	beq.n	800c9ce <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c9ca:	2382      	movs	r3, #130	; 0x82
 800c9cc:	e003      	b.n	800c9d6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fed2 	bl	800d778 <vQueueDelete>

  return osOK; 
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3708      	adds	r7, #8
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b083      	sub	sp, #12
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f103 0208 	add.w	r2, r3, #8
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f103 0208 	add.w	r2, r3, #8
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f103 0208 	add.w	r2, r3, #8
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca12:	bf00      	nop
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca1e:	b480      	push	{r7}
 800ca20:	b083      	sub	sp, #12
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	689a      	ldr	r2, [r3, #8]
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	601a      	str	r2, [r3, #0]
}
 800ca74:	bf00      	nop
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca96:	d103      	bne.n	800caa0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	e00c      	b.n	800caba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	3308      	adds	r3, #8
 800caa4:	60fb      	str	r3, [r7, #12]
 800caa6:	e002      	b.n	800caae <vListInsert+0x2e>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d2f6      	bcs.n	800caa8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	685a      	ldr	r2, [r3, #4]
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	1c5a      	adds	r2, r3, #1
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	601a      	str	r2, [r3, #0]
}
 800cae6:	bf00      	nop
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800caf2:	b480      	push	{r7}
 800caf4:	b085      	sub	sp, #20
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6892      	ldr	r2, [r2, #8]
 800cb08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	6852      	ldr	r2, [r2, #4]
 800cb12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d103      	bne.n	800cb26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	689a      	ldr	r2, [r3, #8]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	1e5a      	subs	r2, r3, #1
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3714      	adds	r7, #20
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr
	...

0800cb48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10a      	bne.n	800cb72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb6e:	bf00      	nop
 800cb70:	e7fe      	b.n	800cb70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb72:	f002 f947 	bl	800ee04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb7e:	68f9      	ldr	r1, [r7, #12]
 800cb80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb82:	fb01 f303 	mul.w	r3, r1, r3
 800cb86:	441a      	add	r2, r3
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba2:	3b01      	subs	r3, #1
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cba8:	fb01 f303 	mul.w	r3, r1, r3
 800cbac:	441a      	add	r2, r3
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	22ff      	movs	r2, #255	; 0xff
 800cbb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	22ff      	movs	r2, #255	; 0xff
 800cbbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d114      	bne.n	800cbf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d01a      	beq.n	800cc06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	3310      	adds	r3, #16
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f001 fc03 	bl	800e3e0 <xTaskRemoveFromEventList>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d012      	beq.n	800cc06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cbe0:	4b0c      	ldr	r3, [pc, #48]	; (800cc14 <xQueueGenericReset+0xcc>)
 800cbe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbe6:	601a      	str	r2, [r3, #0]
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	e009      	b.n	800cc06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3310      	adds	r3, #16
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff fef1 	bl	800c9de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	3324      	adds	r3, #36	; 0x24
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff feec 	bl	800c9de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc06:	f002 f92d 	bl	800ee64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc0a:	2301      	movs	r3, #1
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	e000ed04 	.word	0xe000ed04

0800cc18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b08e      	sub	sp, #56	; 0x38
 800cc1c:	af02      	add	r7, sp, #8
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10a      	bne.n	800cc42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc3e:	bf00      	nop
 800cc40:	e7fe      	b.n	800cc40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d10a      	bne.n	800cc5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc5a:	bf00      	nop
 800cc5c:	e7fe      	b.n	800cc5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <xQueueGenericCreateStatic+0x52>
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <xQueueGenericCreateStatic+0x56>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e000      	b.n	800cc70 <xQueueGenericCreateStatic+0x58>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10a      	bne.n	800cc8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	623b      	str	r3, [r7, #32]
}
 800cc86:	bf00      	nop
 800cc88:	e7fe      	b.n	800cc88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d102      	bne.n	800cc96 <xQueueGenericCreateStatic+0x7e>
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <xQueueGenericCreateStatic+0x82>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e000      	b.n	800cc9c <xQueueGenericCreateStatic+0x84>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10a      	bne.n	800ccb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	61fb      	str	r3, [r7, #28]
}
 800ccb2:	bf00      	nop
 800ccb4:	e7fe      	b.n	800ccb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ccb6:	2348      	movs	r3, #72	; 0x48
 800ccb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2b48      	cmp	r3, #72	; 0x48
 800ccbe:	d00a      	beq.n	800ccd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	61bb      	str	r3, [r7, #24]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ccd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ccdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00d      	beq.n	800ccfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	2201      	movs	r2, #1
 800cce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	9300      	str	r3, [sp, #0]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	68b9      	ldr	r1, [r7, #8]
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f000 f83f 	bl	800cd7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3730      	adds	r7, #48	; 0x30
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08a      	sub	sp, #40	; 0x28
 800cd0c:	af02      	add	r7, sp, #8
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	4613      	mov	r3, r2
 800cd14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10a      	bne.n	800cd32 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd20:	f383 8811 	msr	BASEPRI, r3
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	613b      	str	r3, [r7, #16]
}
 800cd2e:	bf00      	nop
 800cd30:	e7fe      	b.n	800cd30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	fb02 f303 	mul.w	r3, r2, r3
 800cd3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	3348      	adds	r3, #72	; 0x48
 800cd40:	4618      	mov	r0, r3
 800cd42:	f002 f981 	bl	800f048 <pvPortMalloc>
 800cd46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d011      	beq.n	800cd72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	3348      	adds	r3, #72	; 0x48
 800cd56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd60:	79fa      	ldrb	r2, [r7, #7]
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	4613      	mov	r3, r2
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 f805 	bl	800cd7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd72:	69bb      	ldr	r3, [r7, #24]
	}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3720      	adds	r7, #32
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
 800cd88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d103      	bne.n	800cd98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	69ba      	ldr	r2, [r7, #24]
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	e002      	b.n	800cd9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd9e:	69bb      	ldr	r3, [r7, #24]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cdaa:	2101      	movs	r1, #1
 800cdac:	69b8      	ldr	r0, [r7, #24]
 800cdae:	f7ff fecb 	bl	800cb48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00e      	beq.n	800cde6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cdda:	2300      	movs	r3, #0
 800cddc:	2200      	movs	r2, #0
 800cdde:	2100      	movs	r1, #0
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f837 	bl	800ce54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cde6:	bf00      	nop
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b086      	sub	sp, #24
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	617b      	str	r3, [r7, #20]
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	461a      	mov	r2, r3
 800ce04:	6939      	ldr	r1, [r7, #16]
 800ce06:	6978      	ldr	r0, [r7, #20]
 800ce08:	f7ff ff7e 	bl	800cd08 <xQueueGenericCreate>
 800ce0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f7ff ffd3 	bl	800cdba <prvInitialiseMutex>

		return xNewQueue;
 800ce14:	68fb      	ldr	r3, [r7, #12]
	}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b088      	sub	sp, #32
 800ce22:	af02      	add	r7, sp, #8
 800ce24:	4603      	mov	r3, r0
 800ce26:	6039      	str	r1, [r7, #0]
 800ce28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	617b      	str	r3, [r7, #20]
 800ce2e:	2300      	movs	r3, #0
 800ce30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ce32:	79fb      	ldrb	r3, [r7, #7]
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	6939      	ldr	r1, [r7, #16]
 800ce3c:	6978      	ldr	r0, [r7, #20]
 800ce3e:	f7ff feeb 	bl	800cc18 <xQueueGenericCreateStatic>
 800ce42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f7ff ffb8 	bl	800cdba <prvInitialiseMutex>

		return xNewQueue;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
	}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b08e      	sub	sp, #56	; 0x38
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce62:	2300      	movs	r3, #0
 800ce64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10a      	bne.n	800ce86 <xQueueGenericSend+0x32>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce82:	bf00      	nop
 800ce84:	e7fe      	b.n	800ce84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d103      	bne.n	800ce94 <xQueueGenericSend+0x40>
 800ce8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d101      	bne.n	800ce98 <xQueueGenericSend+0x44>
 800ce94:	2301      	movs	r3, #1
 800ce96:	e000      	b.n	800ce9a <xQueueGenericSend+0x46>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10a      	bne.n	800ceb4 <xQueueGenericSend+0x60>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ceb0:	bf00      	nop
 800ceb2:	e7fe      	b.n	800ceb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	d103      	bne.n	800cec2 <xQueueGenericSend+0x6e>
 800ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d101      	bne.n	800cec6 <xQueueGenericSend+0x72>
 800cec2:	2301      	movs	r3, #1
 800cec4:	e000      	b.n	800cec8 <xQueueGenericSend+0x74>
 800cec6:	2300      	movs	r3, #0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10a      	bne.n	800cee2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	623b      	str	r3, [r7, #32]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cee2:	f001 fc3d 	bl	800e760 <xTaskGetSchedulerState>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <xQueueGenericSend+0x9e>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <xQueueGenericSend+0xa2>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e000      	b.n	800cef8 <xQueueGenericSend+0xa4>
 800cef6:	2300      	movs	r3, #0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <xQueueGenericSend+0xbe>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	61fb      	str	r3, [r7, #28]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf12:	f001 ff77 	bl	800ee04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d302      	bcc.n	800cf28 <xQueueGenericSend+0xd4>
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d129      	bne.n	800cf7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf28:	683a      	ldr	r2, [r7, #0]
 800cf2a:	68b9      	ldr	r1, [r7, #8]
 800cf2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf2e:	f000 fc5e 	bl	800d7ee <prvCopyDataToQueue>
 800cf32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d010      	beq.n	800cf5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3e:	3324      	adds	r3, #36	; 0x24
 800cf40:	4618      	mov	r0, r3
 800cf42:	f001 fa4d 	bl	800e3e0 <xTaskRemoveFromEventList>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d013      	beq.n	800cf74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf4c:	4b3f      	ldr	r3, [pc, #252]	; (800d04c <xQueueGenericSend+0x1f8>)
 800cf4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	e00a      	b.n	800cf74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d007      	beq.n	800cf74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf64:	4b39      	ldr	r3, [pc, #228]	; (800d04c <xQueueGenericSend+0x1f8>)
 800cf66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf6a:	601a      	str	r2, [r3, #0]
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cf74:	f001 ff76 	bl	800ee64 <vPortExitCritical>
				return pdPASS;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e063      	b.n	800d044 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d103      	bne.n	800cf8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf82:	f001 ff6f 	bl	800ee64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cf86:	2300      	movs	r3, #0
 800cf88:	e05c      	b.n	800d044 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d106      	bne.n	800cf9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf90:	f107 0314 	add.w	r3, r7, #20
 800cf94:	4618      	mov	r0, r3
 800cf96:	f001 fa85 	bl	800e4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf9e:	f001 ff61 	bl	800ee64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfa2:	f001 f825 	bl	800dff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfa6:	f001 ff2d 	bl	800ee04 <vPortEnterCritical>
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfb0:	b25b      	sxtb	r3, r3
 800cfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb6:	d103      	bne.n	800cfc0 <xQueueGenericSend+0x16c>
 800cfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfc6:	b25b      	sxtb	r3, r3
 800cfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfcc:	d103      	bne.n	800cfd6 <xQueueGenericSend+0x182>
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfd6:	f001 ff45 	bl	800ee64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfda:	1d3a      	adds	r2, r7, #4
 800cfdc:	f107 0314 	add.w	r3, r7, #20
 800cfe0:	4611      	mov	r1, r2
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f001 fa74 	bl	800e4d0 <xTaskCheckForTimeOut>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d124      	bne.n	800d038 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cfee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cff0:	f000 fcf5 	bl	800d9de <prvIsQueueFull>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d018      	beq.n	800d02c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffc:	3310      	adds	r3, #16
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	4611      	mov	r1, r2
 800d002:	4618      	mov	r0, r3
 800d004:	f001 f9c8 	bl	800e398 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d00a:	f000 fc80 	bl	800d90e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d00e:	f000 fffd 	bl	800e00c <xTaskResumeAll>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	f47f af7c 	bne.w	800cf12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d01a:	4b0c      	ldr	r3, [pc, #48]	; (800d04c <xQueueGenericSend+0x1f8>)
 800d01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	e772      	b.n	800cf12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d02c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d02e:	f000 fc6e 	bl	800d90e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d032:	f000 ffeb 	bl	800e00c <xTaskResumeAll>
 800d036:	e76c      	b.n	800cf12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d03a:	f000 fc68 	bl	800d90e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d03e:	f000 ffe5 	bl	800e00c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d044:	4618      	mov	r0, r3
 800d046:	3738      	adds	r7, #56	; 0x38
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	e000ed04 	.word	0xe000ed04

0800d050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b090      	sub	sp, #64	; 0x40
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
 800d05c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10a      	bne.n	800d07e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d103      	bne.n	800d08c <xQueueGenericSendFromISR+0x3c>
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <xQueueGenericSendFromISR+0x40>
 800d08c:	2301      	movs	r3, #1
 800d08e:	e000      	b.n	800d092 <xQueueGenericSendFromISR+0x42>
 800d090:	2300      	movs	r3, #0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10a      	bne.n	800d0ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0a8:	bf00      	nop
 800d0aa:	e7fe      	b.n	800d0aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d103      	bne.n	800d0ba <xQueueGenericSendFromISR+0x6a>
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d101      	bne.n	800d0be <xQueueGenericSendFromISR+0x6e>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e000      	b.n	800d0c0 <xQueueGenericSendFromISR+0x70>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	623b      	str	r3, [r7, #32]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0da:	f001 ff75 	bl	800efc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d0de:	f3ef 8211 	mrs	r2, BASEPRI
 800d0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	61fa      	str	r2, [r7, #28]
 800d0f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d0f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d102:	429a      	cmp	r2, r3
 800d104:	d302      	bcc.n	800d10c <xQueueGenericSendFromISR+0xbc>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d12f      	bne.n	800d16c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	68b9      	ldr	r1, [r7, #8]
 800d120:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d122:	f000 fb64 	bl	800d7ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d126:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12e:	d112      	bne.n	800d156 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d134:	2b00      	cmp	r3, #0
 800d136:	d016      	beq.n	800d166 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13a:	3324      	adds	r3, #36	; 0x24
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 f94f 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00e      	beq.n	800d166 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00b      	beq.n	800d166 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2201      	movs	r2, #1
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	e007      	b.n	800d166 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d156:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d15a:	3301      	adds	r3, #1
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	b25a      	sxtb	r2, r3
 800d160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d166:	2301      	movs	r3, #1
 800d168:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d16a:	e001      	b.n	800d170 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d16c:	2300      	movs	r3, #0
 800d16e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d172:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d17a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3740      	adds	r7, #64	; 0x40
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b08e      	sub	sp, #56	; 0x38
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10a      	bne.n	800d1b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	623b      	str	r3, [r7, #32]
}
 800d1ac:	bf00      	nop
 800d1ae:	e7fe      	b.n	800d1ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00a      	beq.n	800d1ce <xQueueGiveFromISR+0x48>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	61fb      	str	r3, [r7, #28]
}
 800d1ca:	bf00      	nop
 800d1cc:	e7fe      	b.n	800d1cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d103      	bne.n	800d1de <xQueueGiveFromISR+0x58>
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <xQueueGiveFromISR+0x5c>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e000      	b.n	800d1e4 <xQueueGiveFromISR+0x5e>
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10a      	bne.n	800d1fe <xQueueGiveFromISR+0x78>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	61bb      	str	r3, [r7, #24]
}
 800d1fa:	bf00      	nop
 800d1fc:	e7fe      	b.n	800d1fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1fe:	f001 fee3 	bl	800efc8 <vPortValidateInterruptPriority>
	__asm volatile
 800d202:	f3ef 8211 	mrs	r2, BASEPRI
 800d206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	617a      	str	r2, [r7, #20]
 800d218:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d21a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d21c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d222:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d22b      	bcs.n	800d286 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	1c5a      	adds	r2, r3, #1
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d248:	d112      	bne.n	800d270 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d016      	beq.n	800d280 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	3324      	adds	r3, #36	; 0x24
 800d256:	4618      	mov	r0, r3
 800d258:	f001 f8c2 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00e      	beq.n	800d280 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00b      	beq.n	800d280 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	2201      	movs	r2, #1
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	e007      	b.n	800d280 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d274:	3301      	adds	r3, #1
 800d276:	b2db      	uxtb	r3, r3
 800d278:	b25a      	sxtb	r2, r3
 800d27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d280:	2301      	movs	r3, #1
 800d282:	637b      	str	r3, [r7, #52]	; 0x34
 800d284:	e001      	b.n	800d28a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d286:	2300      	movs	r3, #0
 800d288:	637b      	str	r3, [r7, #52]	; 0x34
 800d28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f383 8811 	msr	BASEPRI, r3
}
 800d294:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3738      	adds	r7, #56	; 0x38
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b08c      	sub	sp, #48	; 0x30
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d10a      	bne.n	800d2d0 <xQueueReceive+0x30>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	623b      	str	r3, [r7, #32]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d103      	bne.n	800d2de <xQueueReceive+0x3e>
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d101      	bne.n	800d2e2 <xQueueReceive+0x42>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e000      	b.n	800d2e4 <xQueueReceive+0x44>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10a      	bne.n	800d2fe <xQueueReceive+0x5e>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	61fb      	str	r3, [r7, #28]
}
 800d2fa:	bf00      	nop
 800d2fc:	e7fe      	b.n	800d2fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2fe:	f001 fa2f 	bl	800e760 <xTaskGetSchedulerState>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <xQueueReceive+0x6e>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <xQueueReceive+0x72>
 800d30e:	2301      	movs	r3, #1
 800d310:	e000      	b.n	800d314 <xQueueReceive+0x74>
 800d312:	2300      	movs	r3, #0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10a      	bne.n	800d32e <xQueueReceive+0x8e>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	61bb      	str	r3, [r7, #24]
}
 800d32a:	bf00      	nop
 800d32c:	e7fe      	b.n	800d32c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d32e:	f001 fd69 	bl	800ee04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d336:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d01f      	beq.n	800d37e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d33e:	68b9      	ldr	r1, [r7, #8]
 800d340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d342:	f000 fabe 	bl	800d8c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	1e5a      	subs	r2, r3, #1
 800d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00f      	beq.n	800d376 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	3310      	adds	r3, #16
 800d35a:	4618      	mov	r0, r3
 800d35c:	f001 f840 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d007      	beq.n	800d376 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d366:	4b3d      	ldr	r3, [pc, #244]	; (800d45c <xQueueReceive+0x1bc>)
 800d368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d376:	f001 fd75 	bl	800ee64 <vPortExitCritical>
				return pdPASS;
 800d37a:	2301      	movs	r3, #1
 800d37c:	e069      	b.n	800d452 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d103      	bne.n	800d38c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d384:	f001 fd6e 	bl	800ee64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d388:	2300      	movs	r3, #0
 800d38a:	e062      	b.n	800d452 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d106      	bne.n	800d3a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d392:	f107 0310 	add.w	r3, r7, #16
 800d396:	4618      	mov	r0, r3
 800d398:	f001 f884 	bl	800e4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d39c:	2301      	movs	r3, #1
 800d39e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3a0:	f001 fd60 	bl	800ee64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3a4:	f000 fe24 	bl	800dff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3a8:	f001 fd2c 	bl	800ee04 <vPortEnterCritical>
 800d3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3b2:	b25b      	sxtb	r3, r3
 800d3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b8:	d103      	bne.n	800d3c2 <xQueueReceive+0x122>
 800d3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3c8:	b25b      	sxtb	r3, r3
 800d3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ce:	d103      	bne.n	800d3d8 <xQueueReceive+0x138>
 800d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3d8:	f001 fd44 	bl	800ee64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3dc:	1d3a      	adds	r2, r7, #4
 800d3de:	f107 0310 	add.w	r3, r7, #16
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f001 f873 	bl	800e4d0 <xTaskCheckForTimeOut>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d123      	bne.n	800d438 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3f2:	f000 fade 	bl	800d9b2 <prvIsQueueEmpty>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d017      	beq.n	800d42c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	3324      	adds	r3, #36	; 0x24
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	4611      	mov	r1, r2
 800d404:	4618      	mov	r0, r3
 800d406:	f000 ffc7 	bl	800e398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d40c:	f000 fa7f 	bl	800d90e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d410:	f000 fdfc 	bl	800e00c <xTaskResumeAll>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d189      	bne.n	800d32e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d41a:	4b10      	ldr	r3, [pc, #64]	; (800d45c <xQueueReceive+0x1bc>)
 800d41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	e780      	b.n	800d32e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d42e:	f000 fa6e 	bl	800d90e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d432:	f000 fdeb 	bl	800e00c <xTaskResumeAll>
 800d436:	e77a      	b.n	800d32e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d43a:	f000 fa68 	bl	800d90e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d43e:	f000 fde5 	bl	800e00c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d444:	f000 fab5 	bl	800d9b2 <prvIsQueueEmpty>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f43f af6f 	beq.w	800d32e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d452:	4618      	mov	r0, r3
 800d454:	3730      	adds	r7, #48	; 0x30
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	e000ed04 	.word	0xe000ed04

0800d460 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b08e      	sub	sp, #56	; 0x38
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d46a:	2300      	movs	r3, #0
 800d46c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d472:	2300      	movs	r3, #0
 800d474:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	623b      	str	r3, [r7, #32]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00a      	beq.n	800d4b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	61fb      	str	r3, [r7, #28]
}
 800d4ac:	bf00      	nop
 800d4ae:	e7fe      	b.n	800d4ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4b0:	f001 f956 	bl	800e760 <xTaskGetSchedulerState>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d102      	bne.n	800d4c0 <xQueueSemaphoreTake+0x60>
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <xQueueSemaphoreTake+0x64>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e000      	b.n	800d4c6 <xQueueSemaphoreTake+0x66>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10a      	bne.n	800d4e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	61bb      	str	r3, [r7, #24]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4e0:	f001 fc90 	bl	800ee04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d024      	beq.n	800d53a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f2:	1e5a      	subs	r2, r3, #1
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d104      	bne.n	800d50a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d500:	f001 fad6 	bl	800eab0 <pvTaskIncrementMutexHeldCount>
 800d504:	4602      	mov	r2, r0
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00f      	beq.n	800d532 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d514:	3310      	adds	r3, #16
 800d516:	4618      	mov	r0, r3
 800d518:	f000 ff62 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d007      	beq.n	800d532 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d522:	4b54      	ldr	r3, [pc, #336]	; (800d674 <xQueueSemaphoreTake+0x214>)
 800d524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d528:	601a      	str	r2, [r3, #0]
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d532:	f001 fc97 	bl	800ee64 <vPortExitCritical>
				return pdPASS;
 800d536:	2301      	movs	r3, #1
 800d538:	e097      	b.n	800d66a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d111      	bne.n	800d564 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00a      	beq.n	800d55c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	617b      	str	r3, [r7, #20]
}
 800d558:	bf00      	nop
 800d55a:	e7fe      	b.n	800d55a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d55c:	f001 fc82 	bl	800ee64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d560:	2300      	movs	r3, #0
 800d562:	e082      	b.n	800d66a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d566:	2b00      	cmp	r3, #0
 800d568:	d106      	bne.n	800d578 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d56a:	f107 030c 	add.w	r3, r7, #12
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 ff98 	bl	800e4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d574:	2301      	movs	r3, #1
 800d576:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d578:	f001 fc74 	bl	800ee64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d57c:	f000 fd38 	bl	800dff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d580:	f001 fc40 	bl	800ee04 <vPortEnterCritical>
 800d584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d58a:	b25b      	sxtb	r3, r3
 800d58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d590:	d103      	bne.n	800d59a <xQueueSemaphoreTake+0x13a>
 800d592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d594:	2200      	movs	r2, #0
 800d596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5a0:	b25b      	sxtb	r3, r3
 800d5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a6:	d103      	bne.n	800d5b0 <xQueueSemaphoreTake+0x150>
 800d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5b0:	f001 fc58 	bl	800ee64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5b4:	463a      	mov	r2, r7
 800d5b6:	f107 030c 	add.w	r3, r7, #12
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f000 ff87 	bl	800e4d0 <xTaskCheckForTimeOut>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d132      	bne.n	800d62e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5ca:	f000 f9f2 	bl	800d9b2 <prvIsQueueEmpty>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d026      	beq.n	800d622 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d109      	bne.n	800d5f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d5dc:	f001 fc12 	bl	800ee04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f001 f8d9 	bl	800e79c <xTaskPriorityInherit>
 800d5ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d5ec:	f001 fc3a 	bl	800ee64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f2:	3324      	adds	r3, #36	; 0x24
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f000 fecd 	bl	800e398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d600:	f000 f985 	bl	800d90e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d604:	f000 fd02 	bl	800e00c <xTaskResumeAll>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f47f af68 	bne.w	800d4e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d610:	4b18      	ldr	r3, [pc, #96]	; (800d674 <xQueueSemaphoreTake+0x214>)
 800d612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d616:	601a      	str	r2, [r3, #0]
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	e75e      	b.n	800d4e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d622:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d624:	f000 f973 	bl	800d90e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d628:	f000 fcf0 	bl	800e00c <xTaskResumeAll>
 800d62c:	e758      	b.n	800d4e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d62e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d630:	f000 f96d 	bl	800d90e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d634:	f000 fcea 	bl	800e00c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d63a:	f000 f9ba 	bl	800d9b2 <prvIsQueueEmpty>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	f43f af4d 	beq.w	800d4e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00d      	beq.n	800d668 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d64c:	f001 fbda 	bl	800ee04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d652:	f000 f8b4 	bl	800d7be <prvGetDisinheritPriorityAfterTimeout>
 800d656:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	689b      	ldr	r3, [r3, #8]
 800d65c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d65e:	4618      	mov	r0, r3
 800d660:	f001 f998 	bl	800e994 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d664:	f001 fbfe 	bl	800ee64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d668:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3738      	adds	r7, #56	; 0x38
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	e000ed04 	.word	0xe000ed04

0800d678 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b08e      	sub	sp, #56	; 0x38
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10a      	bne.n	800d6a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	623b      	str	r3, [r7, #32]
}
 800d6a0:	bf00      	nop
 800d6a2:	e7fe      	b.n	800d6a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d103      	bne.n	800d6b2 <xQueueReceiveFromISR+0x3a>
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d101      	bne.n	800d6b6 <xQueueReceiveFromISR+0x3e>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e000      	b.n	800d6b8 <xQueueReceiveFromISR+0x40>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10a      	bne.n	800d6d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	61fb      	str	r3, [r7, #28]
}
 800d6ce:	bf00      	nop
 800d6d0:	e7fe      	b.n	800d6d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6d2:	f001 fc79 	bl	800efc8 <vPortValidateInterruptPriority>
	__asm volatile
 800d6d6:	f3ef 8211 	mrs	r2, BASEPRI
 800d6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6de:	f383 8811 	msr	BASEPRI, r3
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	61ba      	str	r2, [r7, #24]
 800d6ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d6ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d02f      	beq.n	800d75e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d708:	68b9      	ldr	r1, [r7, #8]
 800d70a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d70c:	f000 f8d9 	bl	800d8c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d712:	1e5a      	subs	r2, r3, #1
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d720:	d112      	bne.n	800d748 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d016      	beq.n	800d758 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	3310      	adds	r3, #16
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 fe56 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00e      	beq.n	800d758 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00b      	beq.n	800d758 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2201      	movs	r2, #1
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	e007      	b.n	800d758 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d74c:	3301      	adds	r3, #1
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	b25a      	sxtb	r2, r3
 800d752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d758:	2301      	movs	r3, #1
 800d75a:	637b      	str	r3, [r7, #52]	; 0x34
 800d75c:	e001      	b.n	800d762 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d75e:	2300      	movs	r3, #0
 800d760:	637b      	str	r3, [r7, #52]	; 0x34
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	f383 8811 	msr	BASEPRI, r3
}
 800d76c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d770:	4618      	mov	r0, r3
 800d772:	3738      	adds	r7, #56	; 0x38
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10a      	bne.n	800d7a0 <vQueueDelete+0x28>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	60bb      	str	r3, [r7, #8]
}
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 f935 	bl	800da10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d102      	bne.n	800d7b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f001 fd15 	bl	800f1e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d7b6:	bf00      	nop
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d7be:	b480      	push	{r7}
 800d7c0:	b085      	sub	sp, #20
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d006      	beq.n	800d7dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f1c3 0307 	rsb	r3, r3, #7
 800d7d8:	60fb      	str	r3, [r7, #12]
 800d7da:	e001      	b.n	800d7e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
	}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3714      	adds	r7, #20
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr

0800d7ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b086      	sub	sp, #24
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	60f8      	str	r0, [r7, #12]
 800d7f6:	60b9      	str	r1, [r7, #8]
 800d7f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d802:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10d      	bne.n	800d828 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d14d      	bne.n	800d8b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	4618      	mov	r0, r3
 800d81a:	f001 f835 	bl	800e888 <xTaskPriorityDisinherit>
 800d81e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2200      	movs	r2, #0
 800d824:	609a      	str	r2, [r3, #8]
 800d826:	e043      	b.n	800d8b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d119      	bne.n	800d862 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6858      	ldr	r0, [r3, #4]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d836:	461a      	mov	r2, r3
 800d838:	68b9      	ldr	r1, [r7, #8]
 800d83a:	f00b fbec 	bl	8019016 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d846:	441a      	add	r2, r3
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	685a      	ldr	r2, [r3, #4]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	429a      	cmp	r2, r3
 800d856:	d32b      	bcc.n	800d8b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	605a      	str	r2, [r3, #4]
 800d860:	e026      	b.n	800d8b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	68d8      	ldr	r0, [r3, #12]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86a:	461a      	mov	r2, r3
 800d86c:	68b9      	ldr	r1, [r7, #8]
 800d86e:	f00b fbd2 	bl	8019016 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	68da      	ldr	r2, [r3, #12]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87a:	425b      	negs	r3, r3
 800d87c:	441a      	add	r2, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	68da      	ldr	r2, [r3, #12]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d207      	bcs.n	800d89e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	689a      	ldr	r2, [r3, #8]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d896:	425b      	negs	r3, r3
 800d898:	441a      	add	r2, r3
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d105      	bne.n	800d8b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d002      	beq.n	800d8b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	1c5a      	adds	r2, r3, #1
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d8b8:	697b      	ldr	r3, [r7, #20]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
 800d8ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d018      	beq.n	800d906 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	68da      	ldr	r2, [r3, #12]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8dc:	441a      	add	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	68da      	ldr	r2, [r3, #12]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d303      	bcc.n	800d8f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	68d9      	ldr	r1, [r3, #12]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fe:	461a      	mov	r2, r3
 800d900:	6838      	ldr	r0, [r7, #0]
 800d902:	f00b fb88 	bl	8019016 <memcpy>
	}
}
 800d906:	bf00      	nop
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d90e:	b580      	push	{r7, lr}
 800d910:	b084      	sub	sp, #16
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d916:	f001 fa75 	bl	800ee04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d920:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d922:	e011      	b.n	800d948 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d012      	beq.n	800d952 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	3324      	adds	r3, #36	; 0x24
 800d930:	4618      	mov	r0, r3
 800d932:	f000 fd55 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d93c:	f000 fe2a 	bl	800e594 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d940:	7bfb      	ldrb	r3, [r7, #15]
 800d942:	3b01      	subs	r3, #1
 800d944:	b2db      	uxtb	r3, r3
 800d946:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	dce9      	bgt.n	800d924 <prvUnlockQueue+0x16>
 800d950:	e000      	b.n	800d954 <prvUnlockQueue+0x46>
					break;
 800d952:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	22ff      	movs	r2, #255	; 0xff
 800d958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d95c:	f001 fa82 	bl	800ee64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d960:	f001 fa50 	bl	800ee04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d96a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d96c:	e011      	b.n	800d992 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d012      	beq.n	800d99c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	3310      	adds	r3, #16
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 fd30 	bl	800e3e0 <xTaskRemoveFromEventList>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d986:	f000 fe05 	bl	800e594 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d98a:	7bbb      	ldrb	r3, [r7, #14]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d996:	2b00      	cmp	r3, #0
 800d998:	dce9      	bgt.n	800d96e <prvUnlockQueue+0x60>
 800d99a:	e000      	b.n	800d99e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d99c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	22ff      	movs	r2, #255	; 0xff
 800d9a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d9a6:	f001 fa5d 	bl	800ee64 <vPortExitCritical>
}
 800d9aa:	bf00      	nop
 800d9ac:	3710      	adds	r7, #16
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b084      	sub	sp, #16
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9ba:	f001 fa23 	bl	800ee04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	60fb      	str	r3, [r7, #12]
 800d9ca:	e001      	b.n	800d9d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9d0:	f001 fa48 	bl	800ee64 <vPortExitCritical>

	return xReturn;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b084      	sub	sp, #16
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9e6:	f001 fa0d 	bl	800ee04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d102      	bne.n	800d9fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	60fb      	str	r3, [r7, #12]
 800d9fa:	e001      	b.n	800da00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da00:	f001 fa30 	bl	800ee64 <vPortExitCritical>

	return xReturn;
 800da04:	68fb      	ldr	r3, [r7, #12]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
	...

0800da10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da18:	2300      	movs	r3, #0
 800da1a:	60fb      	str	r3, [r7, #12]
 800da1c:	e016      	b.n	800da4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800da1e:	4a10      	ldr	r2, [pc, #64]	; (800da60 <vQueueUnregisterQueue+0x50>)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	00db      	lsls	r3, r3, #3
 800da24:	4413      	add	r3, r2
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d10b      	bne.n	800da46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800da2e:	4a0c      	ldr	r2, [pc, #48]	; (800da60 <vQueueUnregisterQueue+0x50>)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2100      	movs	r1, #0
 800da34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800da38:	4a09      	ldr	r2, [pc, #36]	; (800da60 <vQueueUnregisterQueue+0x50>)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	4413      	add	r3, r2
 800da40:	2200      	movs	r2, #0
 800da42:	605a      	str	r2, [r3, #4]
				break;
 800da44:	e006      	b.n	800da54 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	3301      	adds	r3, #1
 800da4a:	60fb      	str	r3, [r7, #12]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2b07      	cmp	r3, #7
 800da50:	d9e5      	bls.n	800da1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800da52:	bf00      	nop
 800da54:	bf00      	nop
 800da56:	3714      	adds	r7, #20
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr
 800da60:	20002e24 	.word	0x20002e24

0800da64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da64:	b580      	push	{r7, lr}
 800da66:	b08e      	sub	sp, #56	; 0x38
 800da68:	af04      	add	r7, sp, #16
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10a      	bne.n	800da8e <xTaskCreateStatic+0x2a>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	623b      	str	r3, [r7, #32]
}
 800da8a:	bf00      	nop
 800da8c:	e7fe      	b.n	800da8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800da8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da90:	2b00      	cmp	r3, #0
 800da92:	d10a      	bne.n	800daaa <xTaskCreateStatic+0x46>
	__asm volatile
 800da94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	61fb      	str	r3, [r7, #28]
}
 800daa6:	bf00      	nop
 800daa8:	e7fe      	b.n	800daa8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800daaa:	23b4      	movs	r3, #180	; 0xb4
 800daac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	2bb4      	cmp	r3, #180	; 0xb4
 800dab2:	d00a      	beq.n	800daca <xTaskCreateStatic+0x66>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	61bb      	str	r3, [r7, #24]
}
 800dac6:	bf00      	nop
 800dac8:	e7fe      	b.n	800dac8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800daca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d01e      	beq.n	800db10 <xTaskCreateStatic+0xac>
 800dad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d01b      	beq.n	800db10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dae0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae4:	2202      	movs	r2, #2
 800dae6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800daea:	2300      	movs	r3, #0
 800daec:	9303      	str	r3, [sp, #12]
 800daee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf0:	9302      	str	r3, [sp, #8]
 800daf2:	f107 0314 	add.w	r3, r7, #20
 800daf6:	9301      	str	r3, [sp, #4]
 800daf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	68b9      	ldr	r1, [r7, #8]
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f000 f850 	bl	800dba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db0a:	f000 f8eb 	bl	800dce4 <prvAddNewTaskToReadyList>
 800db0e:	e001      	b.n	800db14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800db10:	2300      	movs	r3, #0
 800db12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db14:	697b      	ldr	r3, [r7, #20]
	}
 800db16:	4618      	mov	r0, r3
 800db18:	3728      	adds	r7, #40	; 0x28
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b08c      	sub	sp, #48	; 0x30
 800db22:	af04      	add	r7, sp, #16
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	60b9      	str	r1, [r7, #8]
 800db28:	603b      	str	r3, [r7, #0]
 800db2a:	4613      	mov	r3, r2
 800db2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db2e:	88fb      	ldrh	r3, [r7, #6]
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4618      	mov	r0, r3
 800db34:	f001 fa88 	bl	800f048 <pvPortMalloc>
 800db38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00e      	beq.n	800db5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db40:	20b4      	movs	r0, #180	; 0xb4
 800db42:	f001 fa81 	bl	800f048 <pvPortMalloc>
 800db46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d003      	beq.n	800db56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	697a      	ldr	r2, [r7, #20]
 800db52:	631a      	str	r2, [r3, #48]	; 0x30
 800db54:	e005      	b.n	800db62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db56:	6978      	ldr	r0, [r7, #20]
 800db58:	f001 fb42 	bl	800f1e0 <vPortFree>
 800db5c:	e001      	b.n	800db62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db5e:	2300      	movs	r3, #0
 800db60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d017      	beq.n	800db98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db70:	88fa      	ldrh	r2, [r7, #6]
 800db72:	2300      	movs	r3, #0
 800db74:	9303      	str	r3, [sp, #12]
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	9302      	str	r3, [sp, #8]
 800db7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7c:	9301      	str	r3, [sp, #4]
 800db7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	68b9      	ldr	r1, [r7, #8]
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f000 f80e 	bl	800dba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db8c:	69f8      	ldr	r0, [r7, #28]
 800db8e:	f000 f8a9 	bl	800dce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db92:	2301      	movs	r3, #1
 800db94:	61bb      	str	r3, [r7, #24]
 800db96:	e002      	b.n	800db9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db98:	f04f 33ff 	mov.w	r3, #4294967295
 800db9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db9e:	69bb      	ldr	r3, [r7, #24]
	}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3720      	adds	r7, #32
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	4413      	add	r3, r2
 800dbc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	f023 0307 	bic.w	r3, r3, #7
 800dbce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	f003 0307 	and.w	r3, r3, #7
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00a      	beq.n	800dbf0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800dbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbde:	f383 8811 	msr	BASEPRI, r3
 800dbe2:	f3bf 8f6f 	isb	sy
 800dbe6:	f3bf 8f4f 	dsb	sy
 800dbea:	617b      	str	r3, [r7, #20]
}
 800dbec:	bf00      	nop
 800dbee:	e7fe      	b.n	800dbee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d01f      	beq.n	800dc36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	61fb      	str	r3, [r7, #28]
 800dbfa:	e012      	b.n	800dc22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	4413      	add	r3, r2
 800dc02:	7819      	ldrb	r1, [r3, #0]
 800dc04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	4413      	add	r3, r2
 800dc0a:	3334      	adds	r3, #52	; 0x34
 800dc0c:	460a      	mov	r2, r1
 800dc0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	4413      	add	r3, r2
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d006      	beq.n	800dc2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	61fb      	str	r3, [r7, #28]
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	2b0f      	cmp	r3, #15
 800dc26:	d9e9      	bls.n	800dbfc <prvInitialiseNewTask+0x54>
 800dc28:	e000      	b.n	800dc2c <prvInitialiseNewTask+0x84>
			{
				break;
 800dc2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc34:	e003      	b.n	800dc3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc40:	2b06      	cmp	r3, #6
 800dc42:	d901      	bls.n	800dc48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc44:	2306      	movs	r3, #6
 800dc46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc56:	2200      	movs	r2, #0
 800dc58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	3304      	adds	r3, #4
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fe fedd 	bl	800ca1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc66:	3318      	adds	r3, #24
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fe fed8 	bl	800ca1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	f1c3 0207 	rsb	r2, r3, #7
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc86:	2200      	movs	r2, #0
 800dc88:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc96:	334c      	adds	r3, #76	; 0x4c
 800dc98:	2260      	movs	r2, #96	; 0x60
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f00b f9e2 	bl	8019066 <memset>
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	4a0c      	ldr	r2, [pc, #48]	; (800dcd8 <prvInitialiseNewTask+0x130>)
 800dca6:	651a      	str	r2, [r3, #80]	; 0x50
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	4a0c      	ldr	r2, [pc, #48]	; (800dcdc <prvInitialiseNewTask+0x134>)
 800dcac:	655a      	str	r2, [r3, #84]	; 0x54
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	4a0b      	ldr	r2, [pc, #44]	; (800dce0 <prvInitialiseNewTask+0x138>)
 800dcb2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	68f9      	ldr	r1, [r7, #12]
 800dcb8:	69b8      	ldr	r0, [r7, #24]
 800dcba:	f000 ff73 	bl	800eba4 <pxPortInitialiseStack>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcd0:	bf00      	nop
 800dcd2:	3720      	adds	r7, #32
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	0801cbe0 	.word	0x0801cbe0
 800dcdc:	0801cc00 	.word	0x0801cc00
 800dce0:	0801cbc0 	.word	0x0801cbc0

0800dce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dcec:	f001 f88a 	bl	800ee04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dcf0:	4b2a      	ldr	r3, [pc, #168]	; (800dd9c <prvAddNewTaskToReadyList+0xb8>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	4a29      	ldr	r2, [pc, #164]	; (800dd9c <prvAddNewTaskToReadyList+0xb8>)
 800dcf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dcfa:	4b29      	ldr	r3, [pc, #164]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d109      	bne.n	800dd16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd02:	4a27      	ldr	r2, [pc, #156]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd08:	4b24      	ldr	r3, [pc, #144]	; (800dd9c <prvAddNewTaskToReadyList+0xb8>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d110      	bne.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd10:	f000 fc64 	bl	800e5dc <prvInitialiseTaskLists>
 800dd14:	e00d      	b.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd16:	4b23      	ldr	r3, [pc, #140]	; (800dda4 <prvAddNewTaskToReadyList+0xc0>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d109      	bne.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd1e:	4b20      	ldr	r3, [pc, #128]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d802      	bhi.n	800dd32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd2c:	4a1c      	ldr	r2, [pc, #112]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd32:	4b1d      	ldr	r3, [pc, #116]	; (800dda8 <prvAddNewTaskToReadyList+0xc4>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3301      	adds	r3, #1
 800dd38:	4a1b      	ldr	r2, [pc, #108]	; (800dda8 <prvAddNewTaskToReadyList+0xc4>)
 800dd3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd40:	2201      	movs	r2, #1
 800dd42:	409a      	lsls	r2, r3
 800dd44:	4b19      	ldr	r3, [pc, #100]	; (800ddac <prvAddNewTaskToReadyList+0xc8>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	4a18      	ldr	r2, [pc, #96]	; (800ddac <prvAddNewTaskToReadyList+0xc8>)
 800dd4c:	6013      	str	r3, [r2, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd52:	4613      	mov	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	4a15      	ldr	r2, [pc, #84]	; (800ddb0 <prvAddNewTaskToReadyList+0xcc>)
 800dd5c:	441a      	add	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	3304      	adds	r3, #4
 800dd62:	4619      	mov	r1, r3
 800dd64:	4610      	mov	r0, r2
 800dd66:	f7fe fe67 	bl	800ca38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd6a:	f001 f87b 	bl	800ee64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd6e:	4b0d      	ldr	r3, [pc, #52]	; (800dda4 <prvAddNewTaskToReadyList+0xc0>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00e      	beq.n	800dd94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd76:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <prvAddNewTaskToReadyList+0xbc>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d207      	bcs.n	800dd94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd84:	4b0b      	ldr	r3, [pc, #44]	; (800ddb4 <prvAddNewTaskToReadyList+0xd0>)
 800dd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd94:	bf00      	nop
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	20002f64 	.word	0x20002f64
 800dda0:	20002e64 	.word	0x20002e64
 800dda4:	20002f70 	.word	0x20002f70
 800dda8:	20002f80 	.word	0x20002f80
 800ddac:	20002f6c 	.word	0x20002f6c
 800ddb0:	20002e68 	.word	0x20002e68
 800ddb4:	e000ed04 	.word	0xe000ed04

0800ddb8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	; 0x28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10a      	bne.n	800dde2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	617b      	str	r3, [r7, #20]
}
 800ddde:	bf00      	nop
 800dde0:	e7fe      	b.n	800dde0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10a      	bne.n	800ddfe <vTaskDelayUntil+0x46>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddec:	f383 8811 	msr	BASEPRI, r3
 800ddf0:	f3bf 8f6f 	isb	sy
 800ddf4:	f3bf 8f4f 	dsb	sy
 800ddf8:	613b      	str	r3, [r7, #16]
}
 800ddfa:	bf00      	nop
 800ddfc:	e7fe      	b.n	800ddfc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800ddfe:	4b2a      	ldr	r3, [pc, #168]	; (800dea8 <vTaskDelayUntil+0xf0>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00a      	beq.n	800de1c <vTaskDelayUntil+0x64>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	60fb      	str	r3, [r7, #12]
}
 800de18:	bf00      	nop
 800de1a:	e7fe      	b.n	800de1a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800de1c:	f000 f8e8 	bl	800dff0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800de20:	4b22      	ldr	r3, [pc, #136]	; (800deac <vTaskDelayUntil+0xf4>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	4413      	add	r3, r2
 800de2e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	6a3a      	ldr	r2, [r7, #32]
 800de36:	429a      	cmp	r2, r3
 800de38:	d20b      	bcs.n	800de52 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	69fa      	ldr	r2, [r7, #28]
 800de40:	429a      	cmp	r2, r3
 800de42:	d211      	bcs.n	800de68 <vTaskDelayUntil+0xb0>
 800de44:	69fa      	ldr	r2, [r7, #28]
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d90d      	bls.n	800de68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800de4c:	2301      	movs	r3, #1
 800de4e:	627b      	str	r3, [r7, #36]	; 0x24
 800de50:	e00a      	b.n	800de68 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	69fa      	ldr	r2, [r7, #28]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d303      	bcc.n	800de64 <vTaskDelayUntil+0xac>
 800de5c:	69fa      	ldr	r2, [r7, #28]
 800de5e:	6a3b      	ldr	r3, [r7, #32]
 800de60:	429a      	cmp	r2, r3
 800de62:	d901      	bls.n	800de68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800de64:	2301      	movs	r3, #1
 800de66:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	69fa      	ldr	r2, [r7, #28]
 800de6c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	2b00      	cmp	r3, #0
 800de72:	d006      	beq.n	800de82 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800de74:	69fa      	ldr	r2, [r7, #28]
 800de76:	6a3b      	ldr	r3, [r7, #32]
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	2100      	movs	r1, #0
 800de7c:	4618      	mov	r0, r3
 800de7e:	f000 fe2b 	bl	800ead8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800de82:	f000 f8c3 	bl	800e00c <xTaskResumeAll>
 800de86:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d107      	bne.n	800de9e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800de8e:	4b08      	ldr	r3, [pc, #32]	; (800deb0 <vTaskDelayUntil+0xf8>)
 800de90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de94:	601a      	str	r2, [r3, #0]
 800de96:	f3bf 8f4f 	dsb	sy
 800de9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de9e:	bf00      	nop
 800dea0:	3728      	adds	r7, #40	; 0x28
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	20002f8c 	.word	0x20002f8c
 800deac:	20002f68 	.word	0x20002f68
 800deb0:	e000ed04 	.word	0xe000ed04

0800deb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800debc:	2300      	movs	r3, #0
 800debe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d017      	beq.n	800def6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dec6:	4b13      	ldr	r3, [pc, #76]	; (800df14 <vTaskDelay+0x60>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00a      	beq.n	800dee4 <vTaskDelay+0x30>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	60bb      	str	r3, [r7, #8]
}
 800dee0:	bf00      	nop
 800dee2:	e7fe      	b.n	800dee2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dee4:	f000 f884 	bl	800dff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dee8:	2100      	movs	r1, #0
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fdf4 	bl	800ead8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800def0:	f000 f88c 	bl	800e00c <xTaskResumeAll>
 800def4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d107      	bne.n	800df0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800defc:	4b06      	ldr	r3, [pc, #24]	; (800df18 <vTaskDelay+0x64>)
 800defe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df02:	601a      	str	r2, [r3, #0]
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df0c:	bf00      	nop
 800df0e:	3710      	adds	r7, #16
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	20002f8c 	.word	0x20002f8c
 800df18:	e000ed04 	.word	0xe000ed04

0800df1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b08a      	sub	sp, #40	; 0x28
 800df20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df22:	2300      	movs	r3, #0
 800df24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df2a:	463a      	mov	r2, r7
 800df2c:	1d39      	adds	r1, r7, #4
 800df2e:	f107 0308 	add.w	r3, r7, #8
 800df32:	4618      	mov	r0, r3
 800df34:	f7f2 fbd4 	bl	80006e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df38:	6839      	ldr	r1, [r7, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	9202      	str	r2, [sp, #8]
 800df40:	9301      	str	r3, [sp, #4]
 800df42:	2300      	movs	r3, #0
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	2300      	movs	r3, #0
 800df48:	460a      	mov	r2, r1
 800df4a:	4921      	ldr	r1, [pc, #132]	; (800dfd0 <vTaskStartScheduler+0xb4>)
 800df4c:	4821      	ldr	r0, [pc, #132]	; (800dfd4 <vTaskStartScheduler+0xb8>)
 800df4e:	f7ff fd89 	bl	800da64 <xTaskCreateStatic>
 800df52:	4603      	mov	r3, r0
 800df54:	4a20      	ldr	r2, [pc, #128]	; (800dfd8 <vTaskStartScheduler+0xbc>)
 800df56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df58:	4b1f      	ldr	r3, [pc, #124]	; (800dfd8 <vTaskStartScheduler+0xbc>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d002      	beq.n	800df66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df60:	2301      	movs	r3, #1
 800df62:	617b      	str	r3, [r7, #20]
 800df64:	e001      	b.n	800df6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df66:	2300      	movs	r3, #0
 800df68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d11b      	bne.n	800dfa8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800df70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	613b      	str	r3, [r7, #16]
}
 800df82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df84:	4b15      	ldr	r3, [pc, #84]	; (800dfdc <vTaskStartScheduler+0xc0>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	334c      	adds	r3, #76	; 0x4c
 800df8a:	4a15      	ldr	r2, [pc, #84]	; (800dfe0 <vTaskStartScheduler+0xc4>)
 800df8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df8e:	4b15      	ldr	r3, [pc, #84]	; (800dfe4 <vTaskStartScheduler+0xc8>)
 800df90:	f04f 32ff 	mov.w	r2, #4294967295
 800df94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df96:	4b14      	ldr	r3, [pc, #80]	; (800dfe8 <vTaskStartScheduler+0xcc>)
 800df98:	2201      	movs	r2, #1
 800df9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df9c:	4b13      	ldr	r3, [pc, #76]	; (800dfec <vTaskStartScheduler+0xd0>)
 800df9e:	2200      	movs	r2, #0
 800dfa0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfa2:	f000 fe8d 	bl	800ecc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfa6:	e00e      	b.n	800dfc6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfae:	d10a      	bne.n	800dfc6 <vTaskStartScheduler+0xaa>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	60fb      	str	r3, [r7, #12]
}
 800dfc2:	bf00      	nop
 800dfc4:	e7fe      	b.n	800dfc4 <vTaskStartScheduler+0xa8>
}
 800dfc6:	bf00      	nop
 800dfc8:	3718      	adds	r7, #24
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	0801a788 	.word	0x0801a788
 800dfd4:	0800e5ad 	.word	0x0800e5ad
 800dfd8:	20002f88 	.word	0x20002f88
 800dfdc:	20002e64 	.word	0x20002e64
 800dfe0:	200001bc 	.word	0x200001bc
 800dfe4:	20002f84 	.word	0x20002f84
 800dfe8:	20002f70 	.word	0x20002f70
 800dfec:	20002f68 	.word	0x20002f68

0800dff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dff0:	b480      	push	{r7}
 800dff2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dff4:	4b04      	ldr	r3, [pc, #16]	; (800e008 <vTaskSuspendAll+0x18>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	3301      	adds	r3, #1
 800dffa:	4a03      	ldr	r2, [pc, #12]	; (800e008 <vTaskSuspendAll+0x18>)
 800dffc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dffe:	bf00      	nop
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr
 800e008:	20002f8c 	.word	0x20002f8c

0800e00c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e012:	2300      	movs	r3, #0
 800e014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e016:	2300      	movs	r3, #0
 800e018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e01a:	4b41      	ldr	r3, [pc, #260]	; (800e120 <xTaskResumeAll+0x114>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10a      	bne.n	800e038 <xTaskResumeAll+0x2c>
	__asm volatile
 800e022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	603b      	str	r3, [r7, #0]
}
 800e034:	bf00      	nop
 800e036:	e7fe      	b.n	800e036 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e038:	f000 fee4 	bl	800ee04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e03c:	4b38      	ldr	r3, [pc, #224]	; (800e120 <xTaskResumeAll+0x114>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	3b01      	subs	r3, #1
 800e042:	4a37      	ldr	r2, [pc, #220]	; (800e120 <xTaskResumeAll+0x114>)
 800e044:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e046:	4b36      	ldr	r3, [pc, #216]	; (800e120 <xTaskResumeAll+0x114>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d161      	bne.n	800e112 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e04e:	4b35      	ldr	r3, [pc, #212]	; (800e124 <xTaskResumeAll+0x118>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d05d      	beq.n	800e112 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e056:	e02e      	b.n	800e0b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e058:	4b33      	ldr	r3, [pc, #204]	; (800e128 <xTaskResumeAll+0x11c>)
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	3318      	adds	r3, #24
 800e064:	4618      	mov	r0, r3
 800e066:	f7fe fd44 	bl	800caf2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3304      	adds	r3, #4
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe fd3f 	bl	800caf2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e078:	2201      	movs	r2, #1
 800e07a:	409a      	lsls	r2, r3
 800e07c:	4b2b      	ldr	r3, [pc, #172]	; (800e12c <xTaskResumeAll+0x120>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4313      	orrs	r3, r2
 800e082:	4a2a      	ldr	r2, [pc, #168]	; (800e12c <xTaskResumeAll+0x120>)
 800e084:	6013      	str	r3, [r2, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08a:	4613      	mov	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4413      	add	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4a27      	ldr	r2, [pc, #156]	; (800e130 <xTaskResumeAll+0x124>)
 800e094:	441a      	add	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	3304      	adds	r3, #4
 800e09a:	4619      	mov	r1, r3
 800e09c:	4610      	mov	r0, r2
 800e09e:	f7fe fccb 	bl	800ca38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a6:	4b23      	ldr	r3, [pc, #140]	; (800e134 <xTaskResumeAll+0x128>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d302      	bcc.n	800e0b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e0b0:	4b21      	ldr	r3, [pc, #132]	; (800e138 <xTaskResumeAll+0x12c>)
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0b6:	4b1c      	ldr	r3, [pc, #112]	; (800e128 <xTaskResumeAll+0x11c>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1cc      	bne.n	800e058 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e0c4:	f000 fb2c 	bl	800e720 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e0c8:	4b1c      	ldr	r3, [pc, #112]	; (800e13c <xTaskResumeAll+0x130>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d010      	beq.n	800e0f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e0d4:	f000 f846 	bl	800e164 <xTaskIncrementTick>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d002      	beq.n	800e0e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e0de:	4b16      	ldr	r3, [pc, #88]	; (800e138 <xTaskResumeAll+0x12c>)
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1f1      	bne.n	800e0d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e0f0:	4b12      	ldr	r3, [pc, #72]	; (800e13c <xTaskResumeAll+0x130>)
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e0f6:	4b10      	ldr	r3, [pc, #64]	; (800e138 <xTaskResumeAll+0x12c>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d009      	beq.n	800e112 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e0fe:	2301      	movs	r3, #1
 800e100:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e102:	4b0f      	ldr	r3, [pc, #60]	; (800e140 <xTaskResumeAll+0x134>)
 800e104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e108:	601a      	str	r2, [r3, #0]
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e112:	f000 fea7 	bl	800ee64 <vPortExitCritical>

	return xAlreadyYielded;
 800e116:	68bb      	ldr	r3, [r7, #8]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	20002f8c 	.word	0x20002f8c
 800e124:	20002f64 	.word	0x20002f64
 800e128:	20002f24 	.word	0x20002f24
 800e12c:	20002f6c 	.word	0x20002f6c
 800e130:	20002e68 	.word	0x20002e68
 800e134:	20002e64 	.word	0x20002e64
 800e138:	20002f78 	.word	0x20002f78
 800e13c:	20002f74 	.word	0x20002f74
 800e140:	e000ed04 	.word	0xe000ed04

0800e144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e14a:	4b05      	ldr	r3, [pc, #20]	; (800e160 <xTaskGetTickCount+0x1c>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e150:	687b      	ldr	r3, [r7, #4]
}
 800e152:	4618      	mov	r0, r3
 800e154:	370c      	adds	r7, #12
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr
 800e15e:	bf00      	nop
 800e160:	20002f68 	.word	0x20002f68

0800e164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e16a:	2300      	movs	r3, #0
 800e16c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e16e:	4b4e      	ldr	r3, [pc, #312]	; (800e2a8 <xTaskIncrementTick+0x144>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	f040 808e 	bne.w	800e294 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e178:	4b4c      	ldr	r3, [pc, #304]	; (800e2ac <xTaskIncrementTick+0x148>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	3301      	adds	r3, #1
 800e17e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e180:	4a4a      	ldr	r2, [pc, #296]	; (800e2ac <xTaskIncrementTick+0x148>)
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d120      	bne.n	800e1ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e18c:	4b48      	ldr	r3, [pc, #288]	; (800e2b0 <xTaskIncrementTick+0x14c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00a      	beq.n	800e1ac <xTaskIncrementTick+0x48>
	__asm volatile
 800e196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	603b      	str	r3, [r7, #0]
}
 800e1a8:	bf00      	nop
 800e1aa:	e7fe      	b.n	800e1aa <xTaskIncrementTick+0x46>
 800e1ac:	4b40      	ldr	r3, [pc, #256]	; (800e2b0 <xTaskIncrementTick+0x14c>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	4b40      	ldr	r3, [pc, #256]	; (800e2b4 <xTaskIncrementTick+0x150>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4a3e      	ldr	r2, [pc, #248]	; (800e2b0 <xTaskIncrementTick+0x14c>)
 800e1b8:	6013      	str	r3, [r2, #0]
 800e1ba:	4a3e      	ldr	r2, [pc, #248]	; (800e2b4 <xTaskIncrementTick+0x150>)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	4b3d      	ldr	r3, [pc, #244]	; (800e2b8 <xTaskIncrementTick+0x154>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	4a3c      	ldr	r2, [pc, #240]	; (800e2b8 <xTaskIncrementTick+0x154>)
 800e1c8:	6013      	str	r3, [r2, #0]
 800e1ca:	f000 faa9 	bl	800e720 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e1ce:	4b3b      	ldr	r3, [pc, #236]	; (800e2bc <xTaskIncrementTick+0x158>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	693a      	ldr	r2, [r7, #16]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d348      	bcc.n	800e26a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1d8:	4b35      	ldr	r3, [pc, #212]	; (800e2b0 <xTaskIncrementTick+0x14c>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d104      	bne.n	800e1ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e2:	4b36      	ldr	r3, [pc, #216]	; (800e2bc <xTaskIncrementTick+0x158>)
 800e1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e8:	601a      	str	r2, [r3, #0]
					break;
 800e1ea:	e03e      	b.n	800e26a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ec:	4b30      	ldr	r3, [pc, #192]	; (800e2b0 <xTaskIncrementTick+0x14c>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	429a      	cmp	r2, r3
 800e202:	d203      	bcs.n	800e20c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e204:	4a2d      	ldr	r2, [pc, #180]	; (800e2bc <xTaskIncrementTick+0x158>)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e20a:	e02e      	b.n	800e26a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	3304      	adds	r3, #4
 800e210:	4618      	mov	r0, r3
 800e212:	f7fe fc6e 	bl	800caf2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d004      	beq.n	800e228 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	3318      	adds	r3, #24
 800e222:	4618      	mov	r0, r3
 800e224:	f7fe fc65 	bl	800caf2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e22c:	2201      	movs	r2, #1
 800e22e:	409a      	lsls	r2, r3
 800e230:	4b23      	ldr	r3, [pc, #140]	; (800e2c0 <xTaskIncrementTick+0x15c>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4313      	orrs	r3, r2
 800e236:	4a22      	ldr	r2, [pc, #136]	; (800e2c0 <xTaskIncrementTick+0x15c>)
 800e238:	6013      	str	r3, [r2, #0]
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23e:	4613      	mov	r3, r2
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	4413      	add	r3, r2
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	4a1f      	ldr	r2, [pc, #124]	; (800e2c4 <xTaskIncrementTick+0x160>)
 800e248:	441a      	add	r2, r3
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	3304      	adds	r3, #4
 800e24e:	4619      	mov	r1, r3
 800e250:	4610      	mov	r0, r2
 800e252:	f7fe fbf1 	bl	800ca38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e25a:	4b1b      	ldr	r3, [pc, #108]	; (800e2c8 <xTaskIncrementTick+0x164>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e260:	429a      	cmp	r2, r3
 800e262:	d3b9      	bcc.n	800e1d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e264:	2301      	movs	r3, #1
 800e266:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e268:	e7b6      	b.n	800e1d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e26a:	4b17      	ldr	r3, [pc, #92]	; (800e2c8 <xTaskIncrementTick+0x164>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e270:	4914      	ldr	r1, [pc, #80]	; (800e2c4 <xTaskIncrementTick+0x160>)
 800e272:	4613      	mov	r3, r2
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	4413      	add	r3, r2
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	440b      	add	r3, r1
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d901      	bls.n	800e286 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e282:	2301      	movs	r3, #1
 800e284:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e286:	4b11      	ldr	r3, [pc, #68]	; (800e2cc <xTaskIncrementTick+0x168>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d007      	beq.n	800e29e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e28e:	2301      	movs	r3, #1
 800e290:	617b      	str	r3, [r7, #20]
 800e292:	e004      	b.n	800e29e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e294:	4b0e      	ldr	r3, [pc, #56]	; (800e2d0 <xTaskIncrementTick+0x16c>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3301      	adds	r3, #1
 800e29a:	4a0d      	ldr	r2, [pc, #52]	; (800e2d0 <xTaskIncrementTick+0x16c>)
 800e29c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e29e:	697b      	ldr	r3, [r7, #20]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3718      	adds	r7, #24
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	20002f8c 	.word	0x20002f8c
 800e2ac:	20002f68 	.word	0x20002f68
 800e2b0:	20002f1c 	.word	0x20002f1c
 800e2b4:	20002f20 	.word	0x20002f20
 800e2b8:	20002f7c 	.word	0x20002f7c
 800e2bc:	20002f84 	.word	0x20002f84
 800e2c0:	20002f6c 	.word	0x20002f6c
 800e2c4:	20002e68 	.word	0x20002e68
 800e2c8:	20002e64 	.word	0x20002e64
 800e2cc:	20002f78 	.word	0x20002f78
 800e2d0:	20002f74 	.word	0x20002f74

0800e2d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b087      	sub	sp, #28
 800e2d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e2da:	4b29      	ldr	r3, [pc, #164]	; (800e380 <vTaskSwitchContext+0xac>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d003      	beq.n	800e2ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e2e2:	4b28      	ldr	r3, [pc, #160]	; (800e384 <vTaskSwitchContext+0xb0>)
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e2e8:	e044      	b.n	800e374 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e2ea:	4b26      	ldr	r3, [pc, #152]	; (800e384 <vTaskSwitchContext+0xb0>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2f0:	4b25      	ldr	r3, [pc, #148]	; (800e388 <vTaskSwitchContext+0xb4>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	fab3 f383 	clz	r3, r3
 800e2fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e2fe:	7afb      	ldrb	r3, [r7, #11]
 800e300:	f1c3 031f 	rsb	r3, r3, #31
 800e304:	617b      	str	r3, [r7, #20]
 800e306:	4921      	ldr	r1, [pc, #132]	; (800e38c <vTaskSwitchContext+0xb8>)
 800e308:	697a      	ldr	r2, [r7, #20]
 800e30a:	4613      	mov	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4413      	add	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	440b      	add	r3, r1
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10a      	bne.n	800e330 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	607b      	str	r3, [r7, #4]
}
 800e32c:	bf00      	nop
 800e32e:	e7fe      	b.n	800e32e <vTaskSwitchContext+0x5a>
 800e330:	697a      	ldr	r2, [r7, #20]
 800e332:	4613      	mov	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	4a14      	ldr	r2, [pc, #80]	; (800e38c <vTaskSwitchContext+0xb8>)
 800e33c:	4413      	add	r3, r2
 800e33e:	613b      	str	r3, [r7, #16]
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	605a      	str	r2, [r3, #4]
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	685a      	ldr	r2, [r3, #4]
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	3308      	adds	r3, #8
 800e352:	429a      	cmp	r2, r3
 800e354:	d104      	bne.n	800e360 <vTaskSwitchContext+0x8c>
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	685a      	ldr	r2, [r3, #4]
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	605a      	str	r2, [r3, #4]
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	4a0a      	ldr	r2, [pc, #40]	; (800e390 <vTaskSwitchContext+0xbc>)
 800e368:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e36a:	4b09      	ldr	r3, [pc, #36]	; (800e390 <vTaskSwitchContext+0xbc>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	334c      	adds	r3, #76	; 0x4c
 800e370:	4a08      	ldr	r2, [pc, #32]	; (800e394 <vTaskSwitchContext+0xc0>)
 800e372:	6013      	str	r3, [r2, #0]
}
 800e374:	bf00      	nop
 800e376:	371c      	adds	r7, #28
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr
 800e380:	20002f8c 	.word	0x20002f8c
 800e384:	20002f78 	.word	0x20002f78
 800e388:	20002f6c 	.word	0x20002f6c
 800e38c:	20002e68 	.word	0x20002e68
 800e390:	20002e64 	.word	0x20002e64
 800e394:	200001bc 	.word	0x200001bc

0800e398 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d10a      	bne.n	800e3be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	60fb      	str	r3, [r7, #12]
}
 800e3ba:	bf00      	nop
 800e3bc:	e7fe      	b.n	800e3bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3be:	4b07      	ldr	r3, [pc, #28]	; (800e3dc <vTaskPlaceOnEventList+0x44>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3318      	adds	r3, #24
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7fe fb5a 	bl	800ca80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	6838      	ldr	r0, [r7, #0]
 800e3d0:	f000 fb82 	bl	800ead8 <prvAddCurrentTaskToDelayedList>
}
 800e3d4:	bf00      	nop
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	20002e64 	.word	0x20002e64

0800e3e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10a      	bne.n	800e40c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	60fb      	str	r3, [r7, #12]
}
 800e408:	bf00      	nop
 800e40a:	e7fe      	b.n	800e40a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	3318      	adds	r3, #24
 800e410:	4618      	mov	r0, r3
 800e412:	f7fe fb6e 	bl	800caf2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e416:	4b1d      	ldr	r3, [pc, #116]	; (800e48c <xTaskRemoveFromEventList+0xac>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d11c      	bne.n	800e458 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	3304      	adds	r3, #4
 800e422:	4618      	mov	r0, r3
 800e424:	f7fe fb65 	bl	800caf2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42c:	2201      	movs	r2, #1
 800e42e:	409a      	lsls	r2, r3
 800e430:	4b17      	ldr	r3, [pc, #92]	; (800e490 <xTaskRemoveFromEventList+0xb0>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4313      	orrs	r3, r2
 800e436:	4a16      	ldr	r2, [pc, #88]	; (800e490 <xTaskRemoveFromEventList+0xb0>)
 800e438:	6013      	str	r3, [r2, #0]
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e43e:	4613      	mov	r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4413      	add	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4a13      	ldr	r2, [pc, #76]	; (800e494 <xTaskRemoveFromEventList+0xb4>)
 800e448:	441a      	add	r2, r3
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	3304      	adds	r3, #4
 800e44e:	4619      	mov	r1, r3
 800e450:	4610      	mov	r0, r2
 800e452:	f7fe faf1 	bl	800ca38 <vListInsertEnd>
 800e456:	e005      	b.n	800e464 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	3318      	adds	r3, #24
 800e45c:	4619      	mov	r1, r3
 800e45e:	480e      	ldr	r0, [pc, #56]	; (800e498 <xTaskRemoveFromEventList+0xb8>)
 800e460:	f7fe faea 	bl	800ca38 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e468:	4b0c      	ldr	r3, [pc, #48]	; (800e49c <xTaskRemoveFromEventList+0xbc>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46e:	429a      	cmp	r2, r3
 800e470:	d905      	bls.n	800e47e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e472:	2301      	movs	r3, #1
 800e474:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e476:	4b0a      	ldr	r3, [pc, #40]	; (800e4a0 <xTaskRemoveFromEventList+0xc0>)
 800e478:	2201      	movs	r2, #1
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	e001      	b.n	800e482 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e47e:	2300      	movs	r3, #0
 800e480:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e482:	697b      	ldr	r3, [r7, #20]
}
 800e484:	4618      	mov	r0, r3
 800e486:	3718      	adds	r7, #24
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	20002f8c 	.word	0x20002f8c
 800e490:	20002f6c 	.word	0x20002f6c
 800e494:	20002e68 	.word	0x20002e68
 800e498:	20002f24 	.word	0x20002f24
 800e49c:	20002e64 	.word	0x20002e64
 800e4a0:	20002f78 	.word	0x20002f78

0800e4a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4ac:	4b06      	ldr	r3, [pc, #24]	; (800e4c8 <vTaskInternalSetTimeOutState+0x24>)
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4b4:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <vTaskInternalSetTimeOutState+0x28>)
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	605a      	str	r2, [r3, #4]
}
 800e4bc:	bf00      	nop
 800e4be:	370c      	adds	r7, #12
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr
 800e4c8:	20002f7c 	.word	0x20002f7c
 800e4cc:	20002f68 	.word	0x20002f68

0800e4d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d10a      	bne.n	800e4f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	613b      	str	r3, [r7, #16]
}
 800e4f2:	bf00      	nop
 800e4f4:	e7fe      	b.n	800e4f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10a      	bne.n	800e512 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e500:	f383 8811 	msr	BASEPRI, r3
 800e504:	f3bf 8f6f 	isb	sy
 800e508:	f3bf 8f4f 	dsb	sy
 800e50c:	60fb      	str	r3, [r7, #12]
}
 800e50e:	bf00      	nop
 800e510:	e7fe      	b.n	800e510 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e512:	f000 fc77 	bl	800ee04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e516:	4b1d      	ldr	r3, [pc, #116]	; (800e58c <xTaskCheckForTimeOut+0xbc>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	69ba      	ldr	r2, [r7, #24]
 800e522:	1ad3      	subs	r3, r2, r3
 800e524:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52e:	d102      	bne.n	800e536 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e530:	2300      	movs	r3, #0
 800e532:	61fb      	str	r3, [r7, #28]
 800e534:	e023      	b.n	800e57e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	4b15      	ldr	r3, [pc, #84]	; (800e590 <xTaskCheckForTimeOut+0xc0>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d007      	beq.n	800e552 <xTaskCheckForTimeOut+0x82>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	69ba      	ldr	r2, [r7, #24]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d302      	bcc.n	800e552 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e54c:	2301      	movs	r3, #1
 800e54e:	61fb      	str	r3, [r7, #28]
 800e550:	e015      	b.n	800e57e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	697a      	ldr	r2, [r7, #20]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d20b      	bcs.n	800e574 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	1ad2      	subs	r2, r2, r3
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f7ff ff9b 	bl	800e4a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e56e:	2300      	movs	r3, #0
 800e570:	61fb      	str	r3, [r7, #28]
 800e572:	e004      	b.n	800e57e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2200      	movs	r2, #0
 800e578:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e57a:	2301      	movs	r3, #1
 800e57c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e57e:	f000 fc71 	bl	800ee64 <vPortExitCritical>

	return xReturn;
 800e582:	69fb      	ldr	r3, [r7, #28]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3720      	adds	r7, #32
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20002f68 	.word	0x20002f68
 800e590:	20002f7c 	.word	0x20002f7c

0800e594 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e594:	b480      	push	{r7}
 800e596:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e598:	4b03      	ldr	r3, [pc, #12]	; (800e5a8 <vTaskMissedYield+0x14>)
 800e59a:	2201      	movs	r2, #1
 800e59c:	601a      	str	r2, [r3, #0]
}
 800e59e:	bf00      	nop
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr
 800e5a8:	20002f78 	.word	0x20002f78

0800e5ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5b4:	f000 f852 	bl	800e65c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5b8:	4b06      	ldr	r3, [pc, #24]	; (800e5d4 <prvIdleTask+0x28>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d9f9      	bls.n	800e5b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e5c0:	4b05      	ldr	r3, [pc, #20]	; (800e5d8 <prvIdleTask+0x2c>)
 800e5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e5d0:	e7f0      	b.n	800e5b4 <prvIdleTask+0x8>
 800e5d2:	bf00      	nop
 800e5d4:	20002e68 	.word	0x20002e68
 800e5d8:	e000ed04 	.word	0xe000ed04

0800e5dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	607b      	str	r3, [r7, #4]
 800e5e6:	e00c      	b.n	800e602 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4413      	add	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4a12      	ldr	r2, [pc, #72]	; (800e63c <prvInitialiseTaskLists+0x60>)
 800e5f4:	4413      	add	r3, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fe f9f1 	bl	800c9de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	3301      	adds	r3, #1
 800e600:	607b      	str	r3, [r7, #4]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b06      	cmp	r3, #6
 800e606:	d9ef      	bls.n	800e5e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e608:	480d      	ldr	r0, [pc, #52]	; (800e640 <prvInitialiseTaskLists+0x64>)
 800e60a:	f7fe f9e8 	bl	800c9de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e60e:	480d      	ldr	r0, [pc, #52]	; (800e644 <prvInitialiseTaskLists+0x68>)
 800e610:	f7fe f9e5 	bl	800c9de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e614:	480c      	ldr	r0, [pc, #48]	; (800e648 <prvInitialiseTaskLists+0x6c>)
 800e616:	f7fe f9e2 	bl	800c9de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e61a:	480c      	ldr	r0, [pc, #48]	; (800e64c <prvInitialiseTaskLists+0x70>)
 800e61c:	f7fe f9df 	bl	800c9de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e620:	480b      	ldr	r0, [pc, #44]	; (800e650 <prvInitialiseTaskLists+0x74>)
 800e622:	f7fe f9dc 	bl	800c9de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e626:	4b0b      	ldr	r3, [pc, #44]	; (800e654 <prvInitialiseTaskLists+0x78>)
 800e628:	4a05      	ldr	r2, [pc, #20]	; (800e640 <prvInitialiseTaskLists+0x64>)
 800e62a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e62c:	4b0a      	ldr	r3, [pc, #40]	; (800e658 <prvInitialiseTaskLists+0x7c>)
 800e62e:	4a05      	ldr	r2, [pc, #20]	; (800e644 <prvInitialiseTaskLists+0x68>)
 800e630:	601a      	str	r2, [r3, #0]
}
 800e632:	bf00      	nop
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20002e68 	.word	0x20002e68
 800e640:	20002ef4 	.word	0x20002ef4
 800e644:	20002f08 	.word	0x20002f08
 800e648:	20002f24 	.word	0x20002f24
 800e64c:	20002f38 	.word	0x20002f38
 800e650:	20002f50 	.word	0x20002f50
 800e654:	20002f1c 	.word	0x20002f1c
 800e658:	20002f20 	.word	0x20002f20

0800e65c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e662:	e019      	b.n	800e698 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e664:	f000 fbce 	bl	800ee04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e668:	4b10      	ldr	r3, [pc, #64]	; (800e6ac <prvCheckTasksWaitingTermination+0x50>)
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	3304      	adds	r3, #4
 800e674:	4618      	mov	r0, r3
 800e676:	f7fe fa3c 	bl	800caf2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e67a:	4b0d      	ldr	r3, [pc, #52]	; (800e6b0 <prvCheckTasksWaitingTermination+0x54>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	3b01      	subs	r3, #1
 800e680:	4a0b      	ldr	r2, [pc, #44]	; (800e6b0 <prvCheckTasksWaitingTermination+0x54>)
 800e682:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e684:	4b0b      	ldr	r3, [pc, #44]	; (800e6b4 <prvCheckTasksWaitingTermination+0x58>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3b01      	subs	r3, #1
 800e68a:	4a0a      	ldr	r2, [pc, #40]	; (800e6b4 <prvCheckTasksWaitingTermination+0x58>)
 800e68c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e68e:	f000 fbe9 	bl	800ee64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 f810 	bl	800e6b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e698:	4b06      	ldr	r3, [pc, #24]	; (800e6b4 <prvCheckTasksWaitingTermination+0x58>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1e1      	bne.n	800e664 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e6a0:	bf00      	nop
 800e6a2:	bf00      	nop
 800e6a4:	3708      	adds	r7, #8
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	20002f38 	.word	0x20002f38
 800e6b0:	20002f64 	.word	0x20002f64
 800e6b4:	20002f4c 	.word	0x20002f4c

0800e6b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	334c      	adds	r3, #76	; 0x4c
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f00a fe1d 	bl	8019304 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d108      	bne.n	800e6e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f000 fd81 	bl	800f1e0 <vPortFree>
				vPortFree( pxTCB );
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 fd7e 	bl	800f1e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6e4:	e018      	b.n	800e718 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d103      	bne.n	800e6f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 fd75 	bl	800f1e0 <vPortFree>
	}
 800e6f6:	e00f      	b.n	800e718 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	d00a      	beq.n	800e718 <prvDeleteTCB+0x60>
	__asm volatile
 800e702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e706:	f383 8811 	msr	BASEPRI, r3
 800e70a:	f3bf 8f6f 	isb	sy
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	60fb      	str	r3, [r7, #12]
}
 800e714:	bf00      	nop
 800e716:	e7fe      	b.n	800e716 <prvDeleteTCB+0x5e>
	}
 800e718:	bf00      	nop
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e726:	4b0c      	ldr	r3, [pc, #48]	; (800e758 <prvResetNextTaskUnblockTime+0x38>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d104      	bne.n	800e73a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e730:	4b0a      	ldr	r3, [pc, #40]	; (800e75c <prvResetNextTaskUnblockTime+0x3c>)
 800e732:	f04f 32ff 	mov.w	r2, #4294967295
 800e736:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e738:	e008      	b.n	800e74c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e73a:	4b07      	ldr	r3, [pc, #28]	; (800e758 <prvResetNextTaskUnblockTime+0x38>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	4a04      	ldr	r2, [pc, #16]	; (800e75c <prvResetNextTaskUnblockTime+0x3c>)
 800e74a:	6013      	str	r3, [r2, #0]
}
 800e74c:	bf00      	nop
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	20002f1c 	.word	0x20002f1c
 800e75c:	20002f84 	.word	0x20002f84

0800e760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e766:	4b0b      	ldr	r3, [pc, #44]	; (800e794 <xTaskGetSchedulerState+0x34>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d102      	bne.n	800e774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e76e:	2301      	movs	r3, #1
 800e770:	607b      	str	r3, [r7, #4]
 800e772:	e008      	b.n	800e786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e774:	4b08      	ldr	r3, [pc, #32]	; (800e798 <xTaskGetSchedulerState+0x38>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d102      	bne.n	800e782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e77c:	2302      	movs	r3, #2
 800e77e:	607b      	str	r3, [r7, #4]
 800e780:	e001      	b.n	800e786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e782:	2300      	movs	r3, #0
 800e784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e786:	687b      	ldr	r3, [r7, #4]
	}
 800e788:	4618      	mov	r0, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	20002f70 	.word	0x20002f70
 800e798:	20002f8c 	.word	0x20002f8c

0800e79c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d05e      	beq.n	800e870 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7b6:	4b31      	ldr	r3, [pc, #196]	; (800e87c <xTaskPriorityInherit+0xe0>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d24e      	bcs.n	800e85e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	699b      	ldr	r3, [r3, #24]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	db06      	blt.n	800e7d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7c8:	4b2c      	ldr	r3, [pc, #176]	; (800e87c <xTaskPriorityInherit+0xe0>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ce:	f1c3 0207 	rsb	r2, r3, #7
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	6959      	ldr	r1, [r3, #20]
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7de:	4613      	mov	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4413      	add	r3, r2
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	4a26      	ldr	r2, [pc, #152]	; (800e880 <xTaskPriorityInherit+0xe4>)
 800e7e8:	4413      	add	r3, r2
 800e7ea:	4299      	cmp	r1, r3
 800e7ec:	d12f      	bne.n	800e84e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	3304      	adds	r3, #4
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fe f97d 	bl	800caf2 <uxListRemove>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10a      	bne.n	800e814 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e802:	2201      	movs	r2, #1
 800e804:	fa02 f303 	lsl.w	r3, r2, r3
 800e808:	43da      	mvns	r2, r3
 800e80a:	4b1e      	ldr	r3, [pc, #120]	; (800e884 <xTaskPriorityInherit+0xe8>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4013      	ands	r3, r2
 800e810:	4a1c      	ldr	r2, [pc, #112]	; (800e884 <xTaskPriorityInherit+0xe8>)
 800e812:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e814:	4b19      	ldr	r3, [pc, #100]	; (800e87c <xTaskPriorityInherit+0xe0>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e822:	2201      	movs	r2, #1
 800e824:	409a      	lsls	r2, r3
 800e826:	4b17      	ldr	r3, [pc, #92]	; (800e884 <xTaskPriorityInherit+0xe8>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	4a15      	ldr	r2, [pc, #84]	; (800e884 <xTaskPriorityInherit+0xe8>)
 800e82e:	6013      	str	r3, [r2, #0]
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e834:	4613      	mov	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	4413      	add	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	4a10      	ldr	r2, [pc, #64]	; (800e880 <xTaskPriorityInherit+0xe4>)
 800e83e:	441a      	add	r2, r3
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	3304      	adds	r3, #4
 800e844:	4619      	mov	r1, r3
 800e846:	4610      	mov	r0, r2
 800e848:	f7fe f8f6 	bl	800ca38 <vListInsertEnd>
 800e84c:	e004      	b.n	800e858 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e84e:	4b0b      	ldr	r3, [pc, #44]	; (800e87c <xTaskPriorityInherit+0xe0>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e858:	2301      	movs	r3, #1
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	e008      	b.n	800e870 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e862:	4b06      	ldr	r3, [pc, #24]	; (800e87c <xTaskPriorityInherit+0xe0>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e868:	429a      	cmp	r2, r3
 800e86a:	d201      	bcs.n	800e870 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e86c:	2301      	movs	r3, #1
 800e86e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e870:	68fb      	ldr	r3, [r7, #12]
	}
 800e872:	4618      	mov	r0, r3
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	20002e64 	.word	0x20002e64
 800e880:	20002e68 	.word	0x20002e68
 800e884:	20002f6c 	.word	0x20002f6c

0800e888 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b086      	sub	sp, #24
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e894:	2300      	movs	r3, #0
 800e896:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d06e      	beq.n	800e97c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e89e:	4b3a      	ldr	r3, [pc, #232]	; (800e988 <xTaskPriorityDisinherit+0x100>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d00a      	beq.n	800e8be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	60fb      	str	r3, [r7, #12]
}
 800e8ba:	bf00      	nop
 800e8bc:	e7fe      	b.n	800e8bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d10a      	bne.n	800e8dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
 800e8d6:	60bb      	str	r3, [r7, #8]
}
 800e8d8:	bf00      	nop
 800e8da:	e7fe      	b.n	800e8da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8e0:	1e5a      	subs	r2, r3, #1
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d044      	beq.n	800e97c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d140      	bne.n	800e97c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe f8f7 	bl	800caf2 <uxListRemove>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d115      	bne.n	800e936 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e90e:	491f      	ldr	r1, [pc, #124]	; (800e98c <xTaskPriorityDisinherit+0x104>)
 800e910:	4613      	mov	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	440b      	add	r3, r1
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d10a      	bne.n	800e936 <xTaskPriorityDisinherit+0xae>
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e924:	2201      	movs	r2, #1
 800e926:	fa02 f303 	lsl.w	r3, r2, r3
 800e92a:	43da      	mvns	r2, r3
 800e92c:	4b18      	ldr	r3, [pc, #96]	; (800e990 <xTaskPriorityDisinherit+0x108>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4013      	ands	r3, r2
 800e932:	4a17      	ldr	r2, [pc, #92]	; (800e990 <xTaskPriorityDisinherit+0x108>)
 800e934:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e942:	f1c3 0207 	rsb	r2, r3, #7
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e94e:	2201      	movs	r2, #1
 800e950:	409a      	lsls	r2, r3
 800e952:	4b0f      	ldr	r3, [pc, #60]	; (800e990 <xTaskPriorityDisinherit+0x108>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4313      	orrs	r3, r2
 800e958:	4a0d      	ldr	r2, [pc, #52]	; (800e990 <xTaskPriorityDisinherit+0x108>)
 800e95a:	6013      	str	r3, [r2, #0]
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e960:	4613      	mov	r3, r2
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	4413      	add	r3, r2
 800e966:	009b      	lsls	r3, r3, #2
 800e968:	4a08      	ldr	r2, [pc, #32]	; (800e98c <xTaskPriorityDisinherit+0x104>)
 800e96a:	441a      	add	r2, r3
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	3304      	adds	r3, #4
 800e970:	4619      	mov	r1, r3
 800e972:	4610      	mov	r0, r2
 800e974:	f7fe f860 	bl	800ca38 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e978:	2301      	movs	r3, #1
 800e97a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e97c:	697b      	ldr	r3, [r7, #20]
	}
 800e97e:	4618      	mov	r0, r3
 800e980:	3718      	adds	r7, #24
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20002e64 	.word	0x20002e64
 800e98c:	20002e68 	.word	0x20002e68
 800e990:	20002f6c 	.word	0x20002f6c

0800e994 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e994:	b580      	push	{r7, lr}
 800e996:	b088      	sub	sp, #32
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d077      	beq.n	800ea9c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10a      	bne.n	800e9ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b8:	f383 8811 	msr	BASEPRI, r3
 800e9bc:	f3bf 8f6f 	isb	sy
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	60fb      	str	r3, [r7, #12]
}
 800e9c6:	bf00      	nop
 800e9c8:	e7fe      	b.n	800e9c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ce:	683a      	ldr	r2, [r7, #0]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d902      	bls.n	800e9da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	61fb      	str	r3, [r7, #28]
 800e9d8:	e002      	b.n	800e9e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e4:	69fa      	ldr	r2, [r7, #28]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d058      	beq.n	800ea9c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9ee:	697a      	ldr	r2, [r7, #20]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d153      	bne.n	800ea9c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e9f4:	4b2b      	ldr	r3, [pc, #172]	; (800eaa4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	69ba      	ldr	r2, [r7, #24]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d10a      	bne.n	800ea14 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	60bb      	str	r3, [r7, #8]
}
 800ea10:	bf00      	nop
 800ea12:	e7fe      	b.n	800ea12 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	69fa      	ldr	r2, [r7, #28]
 800ea1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	db04      	blt.n	800ea32 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	f1c3 0207 	rsb	r2, r3, #7
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	6959      	ldr	r1, [r3, #20]
 800ea36:	693a      	ldr	r2, [r7, #16]
 800ea38:	4613      	mov	r3, r2
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	4413      	add	r3, r2
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	4a19      	ldr	r2, [pc, #100]	; (800eaa8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ea42:	4413      	add	r3, r2
 800ea44:	4299      	cmp	r1, r3
 800ea46:	d129      	bne.n	800ea9c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	3304      	adds	r3, #4
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fe f850 	bl	800caf2 <uxListRemove>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d10a      	bne.n	800ea6e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea62:	43da      	mvns	r2, r3
 800ea64:	4b11      	ldr	r3, [pc, #68]	; (800eaac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4013      	ands	r3, r2
 800ea6a:	4a10      	ldr	r2, [pc, #64]	; (800eaac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea6c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea72:	2201      	movs	r2, #1
 800ea74:	409a      	lsls	r2, r3
 800ea76:	4b0d      	ldr	r3, [pc, #52]	; (800eaac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	4a0b      	ldr	r2, [pc, #44]	; (800eaac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea7e:	6013      	str	r3, [r2, #0]
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea84:	4613      	mov	r3, r2
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	4413      	add	r3, r2
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	4a06      	ldr	r2, [pc, #24]	; (800eaa8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ea8e:	441a      	add	r2, r3
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	3304      	adds	r3, #4
 800ea94:	4619      	mov	r1, r3
 800ea96:	4610      	mov	r0, r2
 800ea98:	f7fd ffce 	bl	800ca38 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ea9c:	bf00      	nop
 800ea9e:	3720      	adds	r7, #32
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	20002e64 	.word	0x20002e64
 800eaa8:	20002e68 	.word	0x20002e68
 800eaac:	20002f6c 	.word	0x20002f6c

0800eab0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eab0:	b480      	push	{r7}
 800eab2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eab4:	4b07      	ldr	r3, [pc, #28]	; (800ead4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d004      	beq.n	800eac6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eabc:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eac2:	3201      	adds	r2, #1
 800eac4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800eac6:	4b03      	ldr	r3, [pc, #12]	; (800ead4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eac8:	681b      	ldr	r3, [r3, #0]
	}
 800eaca:	4618      	mov	r0, r3
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	20002e64 	.word	0x20002e64

0800ead8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eae2:	4b29      	ldr	r3, [pc, #164]	; (800eb88 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eae8:	4b28      	ldr	r3, [pc, #160]	; (800eb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	3304      	adds	r3, #4
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fd ffff 	bl	800caf2 <uxListRemove>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10b      	bne.n	800eb12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eafa:	4b24      	ldr	r3, [pc, #144]	; (800eb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb00:	2201      	movs	r2, #1
 800eb02:	fa02 f303 	lsl.w	r3, r2, r3
 800eb06:	43da      	mvns	r2, r3
 800eb08:	4b21      	ldr	r3, [pc, #132]	; (800eb90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	4a20      	ldr	r2, [pc, #128]	; (800eb90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eb10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb18:	d10a      	bne.n	800eb30 <prvAddCurrentTaskToDelayedList+0x58>
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d007      	beq.n	800eb30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb20:	4b1a      	ldr	r3, [pc, #104]	; (800eb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	3304      	adds	r3, #4
 800eb26:	4619      	mov	r1, r3
 800eb28:	481a      	ldr	r0, [pc, #104]	; (800eb94 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eb2a:	f7fd ff85 	bl	800ca38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eb2e:	e026      	b.n	800eb7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4413      	add	r3, r2
 800eb36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb38:	4b14      	ldr	r3, [pc, #80]	; (800eb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68ba      	ldr	r2, [r7, #8]
 800eb3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d209      	bcs.n	800eb5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb48:	4b13      	ldr	r3, [pc, #76]	; (800eb98 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	4b0f      	ldr	r3, [pc, #60]	; (800eb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	3304      	adds	r3, #4
 800eb52:	4619      	mov	r1, r3
 800eb54:	4610      	mov	r0, r2
 800eb56:	f7fd ff93 	bl	800ca80 <vListInsert>
}
 800eb5a:	e010      	b.n	800eb7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb5c:	4b0f      	ldr	r3, [pc, #60]	; (800eb9c <prvAddCurrentTaskToDelayedList+0xc4>)
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	4b0a      	ldr	r3, [pc, #40]	; (800eb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3304      	adds	r3, #4
 800eb66:	4619      	mov	r1, r3
 800eb68:	4610      	mov	r0, r2
 800eb6a:	f7fd ff89 	bl	800ca80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb6e:	4b0c      	ldr	r3, [pc, #48]	; (800eba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d202      	bcs.n	800eb7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eb78:	4a09      	ldr	r2, [pc, #36]	; (800eba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	6013      	str	r3, [r2, #0]
}
 800eb7e:	bf00      	nop
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20002f68 	.word	0x20002f68
 800eb8c:	20002e64 	.word	0x20002e64
 800eb90:	20002f6c 	.word	0x20002f6c
 800eb94:	20002f50 	.word	0x20002f50
 800eb98:	20002f20 	.word	0x20002f20
 800eb9c:	20002f1c 	.word	0x20002f1c
 800eba0:	20002f84 	.word	0x20002f84

0800eba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3b04      	subs	r3, #4
 800ebb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ebbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3b04      	subs	r3, #4
 800ebc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	f023 0201 	bic.w	r2, r3, #1
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	3b04      	subs	r3, #4
 800ebd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ebd4:	4a0c      	ldr	r2, [pc, #48]	; (800ec08 <pxPortInitialiseStack+0x64>)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3b14      	subs	r3, #20
 800ebde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	3b04      	subs	r3, #4
 800ebea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f06f 0202 	mvn.w	r2, #2
 800ebf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	3b20      	subs	r3, #32
 800ebf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3714      	adds	r7, #20
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	0800ec0d 	.word	0x0800ec0d

0800ec0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec16:	4b12      	ldr	r3, [pc, #72]	; (800ec60 <prvTaskExitError+0x54>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec1e:	d00a      	beq.n	800ec36 <prvTaskExitError+0x2a>
	__asm volatile
 800ec20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec24:	f383 8811 	msr	BASEPRI, r3
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	f3bf 8f4f 	dsb	sy
 800ec30:	60fb      	str	r3, [r7, #12]
}
 800ec32:	bf00      	nop
 800ec34:	e7fe      	b.n	800ec34 <prvTaskExitError+0x28>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3a:	f383 8811 	msr	BASEPRI, r3
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f3bf 8f4f 	dsb	sy
 800ec46:	60bb      	str	r3, [r7, #8]
}
 800ec48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec4a:	bf00      	nop
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d0fc      	beq.n	800ec4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec52:	bf00      	nop
 800ec54:	bf00      	nop
 800ec56:	3714      	adds	r7, #20
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	200000c8 	.word	0x200000c8
	...

0800ec70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec70:	4b07      	ldr	r3, [pc, #28]	; (800ec90 <pxCurrentTCBConst2>)
 800ec72:	6819      	ldr	r1, [r3, #0]
 800ec74:	6808      	ldr	r0, [r1, #0]
 800ec76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec7a:	f380 8809 	msr	PSP, r0
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	f04f 0000 	mov.w	r0, #0
 800ec86:	f380 8811 	msr	BASEPRI, r0
 800ec8a:	4770      	bx	lr
 800ec8c:	f3af 8000 	nop.w

0800ec90 <pxCurrentTCBConst2>:
 800ec90:	20002e64 	.word	0x20002e64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec94:	bf00      	nop
 800ec96:	bf00      	nop

0800ec98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec98:	4808      	ldr	r0, [pc, #32]	; (800ecbc <prvPortStartFirstTask+0x24>)
 800ec9a:	6800      	ldr	r0, [r0, #0]
 800ec9c:	6800      	ldr	r0, [r0, #0]
 800ec9e:	f380 8808 	msr	MSP, r0
 800eca2:	f04f 0000 	mov.w	r0, #0
 800eca6:	f380 8814 	msr	CONTROL, r0
 800ecaa:	b662      	cpsie	i
 800ecac:	b661      	cpsie	f
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	f3bf 8f6f 	isb	sy
 800ecb6:	df00      	svc	0
 800ecb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ecba:	bf00      	nop
 800ecbc:	e000ed08 	.word	0xe000ed08

0800ecc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ecc6:	4b46      	ldr	r3, [pc, #280]	; (800ede0 <xPortStartScheduler+0x120>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a46      	ldr	r2, [pc, #280]	; (800ede4 <xPortStartScheduler+0x124>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d10a      	bne.n	800ece6 <xPortStartScheduler+0x26>
	__asm volatile
 800ecd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	613b      	str	r3, [r7, #16]
}
 800ece2:	bf00      	nop
 800ece4:	e7fe      	b.n	800ece4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ece6:	4b3e      	ldr	r3, [pc, #248]	; (800ede0 <xPortStartScheduler+0x120>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a3f      	ldr	r2, [pc, #252]	; (800ede8 <xPortStartScheduler+0x128>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d10a      	bne.n	800ed06 <xPortStartScheduler+0x46>
	__asm volatile
 800ecf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	60fb      	str	r3, [r7, #12]
}
 800ed02:	bf00      	nop
 800ed04:	e7fe      	b.n	800ed04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed06:	4b39      	ldr	r3, [pc, #228]	; (800edec <xPortStartScheduler+0x12c>)
 800ed08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	22ff      	movs	r2, #255	; 0xff
 800ed16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	4b31      	ldr	r3, [pc, #196]	; (800edf0 <xPortStartScheduler+0x130>)
 800ed2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed2e:	4b31      	ldr	r3, [pc, #196]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed30:	2207      	movs	r2, #7
 800ed32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed34:	e009      	b.n	800ed4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ed36:	4b2f      	ldr	r3, [pc, #188]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	4a2d      	ldr	r2, [pc, #180]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed40:	78fb      	ldrb	r3, [r7, #3]
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	005b      	lsls	r3, r3, #1
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed4a:	78fb      	ldrb	r3, [r7, #3]
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed52:	2b80      	cmp	r3, #128	; 0x80
 800ed54:	d0ef      	beq.n	800ed36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed56:	4b27      	ldr	r3, [pc, #156]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f1c3 0307 	rsb	r3, r3, #7
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d00a      	beq.n	800ed78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ed62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed66:	f383 8811 	msr	BASEPRI, r3
 800ed6a:	f3bf 8f6f 	isb	sy
 800ed6e:	f3bf 8f4f 	dsb	sy
 800ed72:	60bb      	str	r3, [r7, #8]
}
 800ed74:	bf00      	nop
 800ed76:	e7fe      	b.n	800ed76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed78:	4b1e      	ldr	r3, [pc, #120]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	021b      	lsls	r3, r3, #8
 800ed7e:	4a1d      	ldr	r2, [pc, #116]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed82:	4b1c      	ldr	r3, [pc, #112]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed8a:	4a1a      	ldr	r2, [pc, #104]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	b2da      	uxtb	r2, r3
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed96:	4b18      	ldr	r3, [pc, #96]	; (800edf8 <xPortStartScheduler+0x138>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a17      	ldr	r2, [pc, #92]	; (800edf8 <xPortStartScheduler+0x138>)
 800ed9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eda0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eda2:	4b15      	ldr	r3, [pc, #84]	; (800edf8 <xPortStartScheduler+0x138>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4a14      	ldr	r2, [pc, #80]	; (800edf8 <xPortStartScheduler+0x138>)
 800eda8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800edac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800edae:	f000 f8dd 	bl	800ef6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800edb2:	4b12      	ldr	r3, [pc, #72]	; (800edfc <xPortStartScheduler+0x13c>)
 800edb4:	2200      	movs	r2, #0
 800edb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800edb8:	f000 f8fc 	bl	800efb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edbc:	4b10      	ldr	r3, [pc, #64]	; (800ee00 <xPortStartScheduler+0x140>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a0f      	ldr	r2, [pc, #60]	; (800ee00 <xPortStartScheduler+0x140>)
 800edc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800edc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800edc8:	f7ff ff66 	bl	800ec98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800edcc:	f7ff fa82 	bl	800e2d4 <vTaskSwitchContext>
	prvTaskExitError();
 800edd0:	f7ff ff1c 	bl	800ec0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3718      	adds	r7, #24
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	e000ed00 	.word	0xe000ed00
 800ede4:	410fc271 	.word	0x410fc271
 800ede8:	410fc270 	.word	0x410fc270
 800edec:	e000e400 	.word	0xe000e400
 800edf0:	20002f90 	.word	0x20002f90
 800edf4:	20002f94 	.word	0x20002f94
 800edf8:	e000ed20 	.word	0xe000ed20
 800edfc:	200000c8 	.word	0x200000c8
 800ee00:	e000ef34 	.word	0xe000ef34

0800ee04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
	__asm volatile
 800ee0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0e:	f383 8811 	msr	BASEPRI, r3
 800ee12:	f3bf 8f6f 	isb	sy
 800ee16:	f3bf 8f4f 	dsb	sy
 800ee1a:	607b      	str	r3, [r7, #4]
}
 800ee1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee1e:	4b0f      	ldr	r3, [pc, #60]	; (800ee5c <vPortEnterCritical+0x58>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3301      	adds	r3, #1
 800ee24:	4a0d      	ldr	r2, [pc, #52]	; (800ee5c <vPortEnterCritical+0x58>)
 800ee26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee28:	4b0c      	ldr	r3, [pc, #48]	; (800ee5c <vPortEnterCritical+0x58>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d10f      	bne.n	800ee50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee30:	4b0b      	ldr	r3, [pc, #44]	; (800ee60 <vPortEnterCritical+0x5c>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00a      	beq.n	800ee50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ee3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3e:	f383 8811 	msr	BASEPRI, r3
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	f3bf 8f4f 	dsb	sy
 800ee4a:	603b      	str	r3, [r7, #0]
}
 800ee4c:	bf00      	nop
 800ee4e:	e7fe      	b.n	800ee4e <vPortEnterCritical+0x4a>
	}
}
 800ee50:	bf00      	nop
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	200000c8 	.word	0x200000c8
 800ee60:	e000ed04 	.word	0xe000ed04

0800ee64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee6a:	4b12      	ldr	r3, [pc, #72]	; (800eeb4 <vPortExitCritical+0x50>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d10a      	bne.n	800ee88 <vPortExitCritical+0x24>
	__asm volatile
 800ee72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee76:	f383 8811 	msr	BASEPRI, r3
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	f3bf 8f4f 	dsb	sy
 800ee82:	607b      	str	r3, [r7, #4]
}
 800ee84:	bf00      	nop
 800ee86:	e7fe      	b.n	800ee86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee88:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <vPortExitCritical+0x50>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	3b01      	subs	r3, #1
 800ee8e:	4a09      	ldr	r2, [pc, #36]	; (800eeb4 <vPortExitCritical+0x50>)
 800ee90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee92:	4b08      	ldr	r3, [pc, #32]	; (800eeb4 <vPortExitCritical+0x50>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d105      	bne.n	800eea6 <vPortExitCritical+0x42>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	f383 8811 	msr	BASEPRI, r3
}
 800eea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eea6:	bf00      	nop
 800eea8:	370c      	adds	r7, #12
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	200000c8 	.word	0x200000c8
	...

0800eec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eec0:	f3ef 8009 	mrs	r0, PSP
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	4b15      	ldr	r3, [pc, #84]	; (800ef20 <pxCurrentTCBConst>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	f01e 0f10 	tst.w	lr, #16
 800eed0:	bf08      	it	eq
 800eed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeda:	6010      	str	r0, [r2, #0]
 800eedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eee4:	f380 8811 	msr	BASEPRI, r0
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f7ff f9f0 	bl	800e2d4 <vTaskSwitchContext>
 800eef4:	f04f 0000 	mov.w	r0, #0
 800eef8:	f380 8811 	msr	BASEPRI, r0
 800eefc:	bc09      	pop	{r0, r3}
 800eefe:	6819      	ldr	r1, [r3, #0]
 800ef00:	6808      	ldr	r0, [r1, #0]
 800ef02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef06:	f01e 0f10 	tst.w	lr, #16
 800ef0a:	bf08      	it	eq
 800ef0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef10:	f380 8809 	msr	PSP, r0
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	f3af 8000 	nop.w

0800ef20 <pxCurrentTCBConst>:
 800ef20:	20002e64 	.word	0x20002e64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop

0800ef28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef32:	f383 8811 	msr	BASEPRI, r3
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	f3bf 8f4f 	dsb	sy
 800ef3e:	607b      	str	r3, [r7, #4]
}
 800ef40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef42:	f7ff f90f 	bl	800e164 <xTaskIncrementTick>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d003      	beq.n	800ef54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef4c:	4b06      	ldr	r3, [pc, #24]	; (800ef68 <SysTick_Handler+0x40>)
 800ef4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	2300      	movs	r3, #0
 800ef56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	f383 8811 	msr	BASEPRI, r3
}
 800ef5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef60:	bf00      	nop
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	e000ed04 	.word	0xe000ed04

0800ef6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef70:	4b0b      	ldr	r3, [pc, #44]	; (800efa0 <vPortSetupTimerInterrupt+0x34>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef76:	4b0b      	ldr	r3, [pc, #44]	; (800efa4 <vPortSetupTimerInterrupt+0x38>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef7c:	4b0a      	ldr	r3, [pc, #40]	; (800efa8 <vPortSetupTimerInterrupt+0x3c>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a0a      	ldr	r2, [pc, #40]	; (800efac <vPortSetupTimerInterrupt+0x40>)
 800ef82:	fba2 2303 	umull	r2, r3, r2, r3
 800ef86:	099b      	lsrs	r3, r3, #6
 800ef88:	4a09      	ldr	r2, [pc, #36]	; (800efb0 <vPortSetupTimerInterrupt+0x44>)
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef8e:	4b04      	ldr	r3, [pc, #16]	; (800efa0 <vPortSetupTimerInterrupt+0x34>)
 800ef90:	2207      	movs	r2, #7
 800ef92:	601a      	str	r2, [r3, #0]
}
 800ef94:	bf00      	nop
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	e000e010 	.word	0xe000e010
 800efa4:	e000e018 	.word	0xe000e018
 800efa8:	20000000 	.word	0x20000000
 800efac:	10624dd3 	.word	0x10624dd3
 800efb0:	e000e014 	.word	0xe000e014

0800efb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800efb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800efc4 <vPortEnableVFP+0x10>
 800efb8:	6801      	ldr	r1, [r0, #0]
 800efba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800efbe:	6001      	str	r1, [r0, #0]
 800efc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800efc2:	bf00      	nop
 800efc4:	e000ed88 	.word	0xe000ed88

0800efc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800efc8:	b480      	push	{r7}
 800efca:	b085      	sub	sp, #20
 800efcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800efce:	f3ef 8305 	mrs	r3, IPSR
 800efd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b0f      	cmp	r3, #15
 800efd8:	d914      	bls.n	800f004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800efda:	4a17      	ldr	r2, [pc, #92]	; (800f038 <vPortValidateInterruptPriority+0x70>)
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	4413      	add	r3, r2
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800efe4:	4b15      	ldr	r3, [pc, #84]	; (800f03c <vPortValidateInterruptPriority+0x74>)
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	7afa      	ldrb	r2, [r7, #11]
 800efea:	429a      	cmp	r2, r3
 800efec:	d20a      	bcs.n	800f004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800efee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	607b      	str	r3, [r7, #4]
}
 800f000:	bf00      	nop
 800f002:	e7fe      	b.n	800f002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f004:	4b0e      	ldr	r3, [pc, #56]	; (800f040 <vPortValidateInterruptPriority+0x78>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f00c:	4b0d      	ldr	r3, [pc, #52]	; (800f044 <vPortValidateInterruptPriority+0x7c>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	429a      	cmp	r2, r3
 800f012:	d90a      	bls.n	800f02a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	603b      	str	r3, [r7, #0]
}
 800f026:	bf00      	nop
 800f028:	e7fe      	b.n	800f028 <vPortValidateInterruptPriority+0x60>
	}
 800f02a:	bf00      	nop
 800f02c:	3714      	adds	r7, #20
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	e000e3f0 	.word	0xe000e3f0
 800f03c:	20002f90 	.word	0x20002f90
 800f040:	e000ed0c 	.word	0xe000ed0c
 800f044:	20002f94 	.word	0x20002f94

0800f048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b08a      	sub	sp, #40	; 0x28
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f050:	2300      	movs	r3, #0
 800f052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f054:	f7fe ffcc 	bl	800dff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f058:	4b5b      	ldr	r3, [pc, #364]	; (800f1c8 <pvPortMalloc+0x180>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d101      	bne.n	800f064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f060:	f000 f920 	bl	800f2a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f064:	4b59      	ldr	r3, [pc, #356]	; (800f1cc <pvPortMalloc+0x184>)
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4013      	ands	r3, r2
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f040 8093 	bne.w	800f198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d01d      	beq.n	800f0b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f078:	2208      	movs	r2, #8
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4413      	add	r3, r2
 800f07e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f003 0307 	and.w	r3, r3, #7
 800f086:	2b00      	cmp	r3, #0
 800f088:	d014      	beq.n	800f0b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f023 0307 	bic.w	r3, r3, #7
 800f090:	3308      	adds	r3, #8
 800f092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f003 0307 	and.w	r3, r3, #7
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00a      	beq.n	800f0b4 <pvPortMalloc+0x6c>
	__asm volatile
 800f09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	617b      	str	r3, [r7, #20]
}
 800f0b0:	bf00      	nop
 800f0b2:	e7fe      	b.n	800f0b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d06e      	beq.n	800f198 <pvPortMalloc+0x150>
 800f0ba:	4b45      	ldr	r3, [pc, #276]	; (800f1d0 <pvPortMalloc+0x188>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d869      	bhi.n	800f198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f0c4:	4b43      	ldr	r3, [pc, #268]	; (800f1d4 <pvPortMalloc+0x18c>)
 800f0c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f0c8:	4b42      	ldr	r3, [pc, #264]	; (800f1d4 <pvPortMalloc+0x18c>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0ce:	e004      	b.n	800f0da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d903      	bls.n	800f0ec <pvPortMalloc+0xa4>
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d1f1      	bne.n	800f0d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f0ec:	4b36      	ldr	r3, [pc, #216]	; (800f1c8 <pvPortMalloc+0x180>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d050      	beq.n	800f198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2208      	movs	r2, #8
 800f0fc:	4413      	add	r3, r2
 800f0fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	1ad2      	subs	r2, r2, r3
 800f110:	2308      	movs	r3, #8
 800f112:	005b      	lsls	r3, r3, #1
 800f114:	429a      	cmp	r2, r3
 800f116:	d91f      	bls.n	800f158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4413      	add	r3, r2
 800f11e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	f003 0307 	and.w	r3, r3, #7
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00a      	beq.n	800f140 <pvPortMalloc+0xf8>
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	613b      	str	r3, [r7, #16]
}
 800f13c:	bf00      	nop
 800f13e:	e7fe      	b.n	800f13e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	1ad2      	subs	r2, r2, r3
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f152:	69b8      	ldr	r0, [r7, #24]
 800f154:	f000 f908 	bl	800f368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f158:	4b1d      	ldr	r3, [pc, #116]	; (800f1d0 <pvPortMalloc+0x188>)
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	4a1b      	ldr	r2, [pc, #108]	; (800f1d0 <pvPortMalloc+0x188>)
 800f164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f166:	4b1a      	ldr	r3, [pc, #104]	; (800f1d0 <pvPortMalloc+0x188>)
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	4b1b      	ldr	r3, [pc, #108]	; (800f1d8 <pvPortMalloc+0x190>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d203      	bcs.n	800f17a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f172:	4b17      	ldr	r3, [pc, #92]	; (800f1d0 <pvPortMalloc+0x188>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a18      	ldr	r2, [pc, #96]	; (800f1d8 <pvPortMalloc+0x190>)
 800f178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17c:	685a      	ldr	r2, [r3, #4]
 800f17e:	4b13      	ldr	r3, [pc, #76]	; (800f1cc <pvPortMalloc+0x184>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	431a      	orrs	r2, r3
 800f184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f18e:	4b13      	ldr	r3, [pc, #76]	; (800f1dc <pvPortMalloc+0x194>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3301      	adds	r3, #1
 800f194:	4a11      	ldr	r2, [pc, #68]	; (800f1dc <pvPortMalloc+0x194>)
 800f196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f198:	f7fe ff38 	bl	800e00c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	f003 0307 	and.w	r3, r3, #7
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d00a      	beq.n	800f1bc <pvPortMalloc+0x174>
	__asm volatile
 800f1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	60fb      	str	r3, [r7, #12]
}
 800f1b8:	bf00      	nop
 800f1ba:	e7fe      	b.n	800f1ba <pvPortMalloc+0x172>
	return pvReturn;
 800f1bc:	69fb      	ldr	r3, [r7, #28]
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3728      	adds	r7, #40	; 0x28
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	20006ba0 	.word	0x20006ba0
 800f1cc:	20006bb4 	.word	0x20006bb4
 800f1d0:	20006ba4 	.word	0x20006ba4
 800f1d4:	20006b98 	.word	0x20006b98
 800f1d8:	20006ba8 	.word	0x20006ba8
 800f1dc:	20006bac 	.word	0x20006bac

0800f1e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d04d      	beq.n	800f28e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f1f2:	2308      	movs	r3, #8
 800f1f4:	425b      	negs	r3, r3
 800f1f6:	697a      	ldr	r2, [r7, #20]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	4b24      	ldr	r3, [pc, #144]	; (800f298 <vPortFree+0xb8>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4013      	ands	r3, r2
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d10a      	bne.n	800f224 <vPortFree+0x44>
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	60fb      	str	r3, [r7, #12]
}
 800f220:	bf00      	nop
 800f222:	e7fe      	b.n	800f222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00a      	beq.n	800f242 <vPortFree+0x62>
	__asm volatile
 800f22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f230:	f383 8811 	msr	BASEPRI, r3
 800f234:	f3bf 8f6f 	isb	sy
 800f238:	f3bf 8f4f 	dsb	sy
 800f23c:	60bb      	str	r3, [r7, #8]
}
 800f23e:	bf00      	nop
 800f240:	e7fe      	b.n	800f240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	685a      	ldr	r2, [r3, #4]
 800f246:	4b14      	ldr	r3, [pc, #80]	; (800f298 <vPortFree+0xb8>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4013      	ands	r3, r2
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d01e      	beq.n	800f28e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d11a      	bne.n	800f28e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	685a      	ldr	r2, [r3, #4]
 800f25c:	4b0e      	ldr	r3, [pc, #56]	; (800f298 <vPortFree+0xb8>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	43db      	mvns	r3, r3
 800f262:	401a      	ands	r2, r3
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f268:	f7fe fec2 	bl	800dff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	685a      	ldr	r2, [r3, #4]
 800f270:	4b0a      	ldr	r3, [pc, #40]	; (800f29c <vPortFree+0xbc>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4413      	add	r3, r2
 800f276:	4a09      	ldr	r2, [pc, #36]	; (800f29c <vPortFree+0xbc>)
 800f278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f27a:	6938      	ldr	r0, [r7, #16]
 800f27c:	f000 f874 	bl	800f368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f280:	4b07      	ldr	r3, [pc, #28]	; (800f2a0 <vPortFree+0xc0>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	3301      	adds	r3, #1
 800f286:	4a06      	ldr	r2, [pc, #24]	; (800f2a0 <vPortFree+0xc0>)
 800f288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f28a:	f7fe febf 	bl	800e00c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f28e:	bf00      	nop
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	20006bb4 	.word	0x20006bb4
 800f29c:	20006ba4 	.word	0x20006ba4
 800f2a0:	20006bb0 	.word	0x20006bb0

0800f2a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f2ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f2b0:	4b27      	ldr	r3, [pc, #156]	; (800f350 <prvHeapInit+0xac>)
 800f2b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f003 0307 	and.w	r3, r3, #7
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00c      	beq.n	800f2d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	3307      	adds	r3, #7
 800f2c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f023 0307 	bic.w	r3, r3, #7
 800f2ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	4a1f      	ldr	r2, [pc, #124]	; (800f350 <prvHeapInit+0xac>)
 800f2d4:	4413      	add	r3, r2
 800f2d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2dc:	4a1d      	ldr	r2, [pc, #116]	; (800f354 <prvHeapInit+0xb0>)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f2e2:	4b1c      	ldr	r3, [pc, #112]	; (800f354 <prvHeapInit+0xb0>)
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	68ba      	ldr	r2, [r7, #8]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f2f0:	2208      	movs	r2, #8
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	1a9b      	subs	r3, r3, r2
 800f2f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f023 0307 	bic.w	r3, r3, #7
 800f2fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	4a15      	ldr	r2, [pc, #84]	; (800f358 <prvHeapInit+0xb4>)
 800f304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f306:	4b14      	ldr	r3, [pc, #80]	; (800f358 <prvHeapInit+0xb4>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2200      	movs	r2, #0
 800f30c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f30e:	4b12      	ldr	r3, [pc, #72]	; (800f358 <prvHeapInit+0xb4>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2200      	movs	r2, #0
 800f314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	1ad2      	subs	r2, r2, r3
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f324:	4b0c      	ldr	r3, [pc, #48]	; (800f358 <prvHeapInit+0xb4>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	4a0a      	ldr	r2, [pc, #40]	; (800f35c <prvHeapInit+0xb8>)
 800f332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	4a09      	ldr	r2, [pc, #36]	; (800f360 <prvHeapInit+0xbc>)
 800f33a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f33c:	4b09      	ldr	r3, [pc, #36]	; (800f364 <prvHeapInit+0xc0>)
 800f33e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f342:	601a      	str	r2, [r3, #0]
}
 800f344:	bf00      	nop
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	20002f98 	.word	0x20002f98
 800f354:	20006b98 	.word	0x20006b98
 800f358:	20006ba0 	.word	0x20006ba0
 800f35c:	20006ba8 	.word	0x20006ba8
 800f360:	20006ba4 	.word	0x20006ba4
 800f364:	20006bb4 	.word	0x20006bb4

0800f368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f368:	b480      	push	{r7}
 800f36a:	b085      	sub	sp, #20
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f370:	4b28      	ldr	r3, [pc, #160]	; (800f414 <prvInsertBlockIntoFreeList+0xac>)
 800f372:	60fb      	str	r3, [r7, #12]
 800f374:	e002      	b.n	800f37c <prvInsertBlockIntoFreeList+0x14>
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	60fb      	str	r3, [r7, #12]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	429a      	cmp	r2, r3
 800f384:	d8f7      	bhi.n	800f376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	4413      	add	r3, r2
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	429a      	cmp	r2, r3
 800f396:	d108      	bne.n	800f3aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	685a      	ldr	r2, [r3, #4]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	441a      	add	r2, r3
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	441a      	add	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d118      	bne.n	800f3f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	4b15      	ldr	r3, [pc, #84]	; (800f418 <prvInsertBlockIntoFreeList+0xb0>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d00d      	beq.n	800f3e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	685a      	ldr	r2, [r3, #4]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	441a      	add	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	e008      	b.n	800f3f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f3e6:	4b0c      	ldr	r3, [pc, #48]	; (800f418 <prvInsertBlockIntoFreeList+0xb0>)
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	e003      	b.n	800f3f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d002      	beq.n	800f406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f406:	bf00      	nop
 800f408:	3714      	adds	r7, #20
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	20006b98 	.word	0x20006b98
 800f418:	20006ba0 	.word	0x20006ba0

0800f41c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800f422:	4b26      	ldr	r3, [pc, #152]	; (800f4bc <_DoInit+0xa0>)
 800f424:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800f426:	22a8      	movs	r2, #168	; 0xa8
 800f428:	2100      	movs	r1, #0
 800f42a:	6838      	ldr	r0, [r7, #0]
 800f42c:	f009 fe1b 	bl	8019066 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	2203      	movs	r2, #3
 800f434:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2203      	movs	r2, #3
 800f43a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	4a20      	ldr	r2, [pc, #128]	; (800f4c0 <_DoInit+0xa4>)
 800f440:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	4a1f      	ldr	r2, [pc, #124]	; (800f4c4 <_DoInit+0xa8>)
 800f446:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f44e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	2200      	movs	r2, #0
 800f454:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	2200      	movs	r2, #0
 800f45a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	2200      	movs	r2, #0
 800f460:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	4a16      	ldr	r2, [pc, #88]	; (800f4c0 <_DoInit+0xa4>)
 800f466:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	4a17      	ldr	r2, [pc, #92]	; (800f4c8 <_DoInit+0xac>)
 800f46c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	2210      	movs	r2, #16
 800f472:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	2200      	movs	r2, #0
 800f478:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	2200      	movs	r2, #0
 800f47e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	2200      	movs	r2, #0
 800f484:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800f486:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800f48a:	2300      	movs	r3, #0
 800f48c:	607b      	str	r3, [r7, #4]
 800f48e:	e00c      	b.n	800f4aa <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f1c3 030f 	rsb	r3, r3, #15
 800f496:	4a0d      	ldr	r2, [pc, #52]	; (800f4cc <_DoInit+0xb0>)
 800f498:	5cd1      	ldrb	r1, [r2, r3]
 800f49a:	683a      	ldr	r2, [r7, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4413      	add	r3, r2
 800f4a0:	460a      	mov	r2, r1
 800f4a2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	607b      	str	r3, [r7, #4]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b0f      	cmp	r3, #15
 800f4ae:	d9ef      	bls.n	800f490 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800f4b0:	f3bf 8f5f 	dmb	sy
}
 800f4b4:	bf00      	nop
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	20006bb8 	.word	0x20006bb8
 800f4c0:	0801a790 	.word	0x0801a790
 800f4c4:	20006c60 	.word	0x20006c60
 800f4c8:	20007460 	.word	0x20007460
 800f4cc:	0801c6a8 	.word	0x0801c6a8

0800f4d0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08a      	sub	sp, #40	; 0x28
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	691b      	ldr	r3, [r3, #16]
 800f4ea:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800f4ec:	69ba      	ldr	r2, [r7, #24]
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d905      	bls.n	800f500 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800f4f4:	69ba      	ldr	r2, [r7, #24]
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	1ad3      	subs	r3, r2, r3
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800f4fe:	e007      	b.n	800f510 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	689a      	ldr	r2, [r3, #8]
 800f504:	69b9      	ldr	r1, [r7, #24]
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	1acb      	subs	r3, r1, r3
 800f50a:	4413      	add	r3, r2
 800f50c:	3b01      	subs	r3, #1
 800f50e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	689a      	ldr	r2, [r3, #8]
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f51a:	4293      	cmp	r3, r2
 800f51c:	bf28      	it	cs
 800f51e:	4613      	movcs	r3, r2
 800f520:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800f522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4293      	cmp	r3, r2
 800f528:	bf28      	it	cs
 800f52a:	4613      	movcs	r3, r2
 800f52c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	685a      	ldr	r2, [r3, #4]
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	4413      	add	r3, r2
 800f536:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800f538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f53a:	68b9      	ldr	r1, [r7, #8]
 800f53c:	6978      	ldr	r0, [r7, #20]
 800f53e:	f009 fd6a 	bl	8019016 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800f542:	6a3a      	ldr	r2, [r7, #32]
 800f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f546:	4413      	add	r3, r2
 800f548:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54e:	4413      	add	r3, r2
 800f550:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800f55a:	69fa      	ldr	r2, [r7, #28]
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55e:	4413      	add	r3, r2
 800f560:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	69fa      	ldr	r2, [r7, #28]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d101      	bne.n	800f570 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800f56c:	2300      	movs	r3, #0
 800f56e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f570:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	69fa      	ldr	r2, [r7, #28]
 800f578:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1b2      	bne.n	800f4e6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800f580:	6a3b      	ldr	r3, [r7, #32]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3728      	adds	r7, #40	; 0x28
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b088      	sub	sp, #32
 800f58e:	af00      	add	r7, sp, #0
 800f590:	60f8      	str	r0, [r7, #12]
 800f592:	60b9      	str	r1, [r7, #8]
 800f594:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	689a      	ldr	r2, [r3, #8]
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	1ad3      	subs	r3, r2, r3
 800f5a4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800f5a6:	69ba      	ldr	r2, [r7, #24]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d911      	bls.n	800f5d2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	68b9      	ldr	r1, [r7, #8]
 800f5bc:	6938      	ldr	r0, [r7, #16]
 800f5be:	f009 fd2a 	bl	8019016 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f5c2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800f5c6:	69fa      	ldr	r2, [r7, #28]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	441a      	add	r2, r3
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800f5d0:	e01f      	b.n	800f612 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	685a      	ldr	r2, [r3, #4]
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	4413      	add	r3, r2
 800f5de:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800f5e0:	697a      	ldr	r2, [r7, #20]
 800f5e2:	68b9      	ldr	r1, [r7, #8]
 800f5e4:	6938      	ldr	r0, [r7, #16]
 800f5e6:	f009 fd16 	bl	8019016 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	1ad3      	subs	r3, r2, r3
 800f5f0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	4619      	mov	r1, r3
 800f602:	6938      	ldr	r0, [r7, #16]
 800f604:	f009 fd07 	bl	8019016 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f608:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	697a      	ldr	r2, [r7, #20]
 800f610:	60da      	str	r2, [r3, #12]
}
 800f612:	bf00      	nop
 800f614:	3720      	adds	r7, #32
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800f61a:	b480      	push	{r7}
 800f61c:	b087      	sub	sp, #28
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	429a      	cmp	r2, r3
 800f634:	d808      	bhi.n	800f648 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	689a      	ldr	r2, [r3, #8]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	1ad2      	subs	r2, r2, r3
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	4413      	add	r3, r2
 800f642:	3b01      	subs	r3, #1
 800f644:	617b      	str	r3, [r7, #20]
 800f646:	e004      	b.n	800f652 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800f648:	693a      	ldr	r2, [r7, #16]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	3b01      	subs	r3, #1
 800f650:	617b      	str	r3, [r7, #20]
  }
  return r;
 800f652:	697b      	ldr	r3, [r7, #20]
}
 800f654:	4618      	mov	r0, r3
 800f656:	371c      	adds	r7, #28
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800f660:	b580      	push	{r7, lr}
 800f662:	b088      	sub	sp, #32
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	1c5a      	adds	r2, r3, #1
 800f674:	4613      	mov	r3, r2
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	4413      	add	r3, r2
 800f67a:	00db      	lsls	r3, r3, #3
 800f67c:	4a1f      	ldr	r2, [pc, #124]	; (800f6fc <SEGGER_RTT_WriteNoLock+0x9c>)
 800f67e:	4413      	add	r3, r2
 800f680:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	695b      	ldr	r3, [r3, #20]
 800f686:	2b02      	cmp	r3, #2
 800f688:	d029      	beq.n	800f6de <SEGGER_RTT_WriteNoLock+0x7e>
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d82e      	bhi.n	800f6ec <SEGGER_RTT_WriteNoLock+0x8c>
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d002      	beq.n	800f698 <SEGGER_RTT_WriteNoLock+0x38>
 800f692:	2b01      	cmp	r3, #1
 800f694:	d013      	beq.n	800f6be <SEGGER_RTT_WriteNoLock+0x5e>
 800f696:	e029      	b.n	800f6ec <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800f698:	6978      	ldr	r0, [r7, #20]
 800f69a:	f7ff ffbe 	bl	800f61a <_GetAvailWriteSpace>
 800f69e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800f6a0:	693a      	ldr	r2, [r7, #16]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d202      	bcs.n	800f6ae <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800f6ac:	e021      	b.n	800f6f2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	69b9      	ldr	r1, [r7, #24]
 800f6b6:	6978      	ldr	r0, [r7, #20]
 800f6b8:	f7ff ff67 	bl	800f58a <_WriteNoCheck>
    break;
 800f6bc:	e019      	b.n	800f6f2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800f6be:	6978      	ldr	r0, [r7, #20]
 800f6c0:	f7ff ffab 	bl	800f61a <_GetAvailWriteSpace>
 800f6c4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	bf28      	it	cs
 800f6ce:	4613      	movcs	r3, r2
 800f6d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800f6d2:	69fa      	ldr	r2, [r7, #28]
 800f6d4:	69b9      	ldr	r1, [r7, #24]
 800f6d6:	6978      	ldr	r0, [r7, #20]
 800f6d8:	f7ff ff57 	bl	800f58a <_WriteNoCheck>
    break;
 800f6dc:	e009      	b.n	800f6f2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800f6de:	687a      	ldr	r2, [r7, #4]
 800f6e0:	69b9      	ldr	r1, [r7, #24]
 800f6e2:	6978      	ldr	r0, [r7, #20]
 800f6e4:	f7ff fef4 	bl	800f4d0 <_WriteBlocking>
 800f6e8:	61f8      	str	r0, [r7, #28]
    break;
 800f6ea:	e002      	b.n	800f6f2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	61fb      	str	r3, [r7, #28]
    break;
 800f6f0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800f6f2:	69fb      	ldr	r3, [r7, #28]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3720      	adds	r7, #32
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	20006bb8 	.word	0x20006bb8

0800f700 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800f700:	b580      	push	{r7, lr}
 800f702:	b088      	sub	sp, #32
 800f704:	af00      	add	r7, sp, #0
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800f70c:	4b0e      	ldr	r3, [pc, #56]	; (800f748 <SEGGER_RTT_Write+0x48>)
 800f70e:	61fb      	str	r3, [r7, #28]
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <SEGGER_RTT_Write+0x1e>
 800f71a:	f7ff fe7f 	bl	800f41c <_DoInit>
  SEGGER_RTT_LOCK();
 800f71e:	f3ef 8311 	mrs	r3, BASEPRI
 800f722:	f04f 0120 	mov.w	r1, #32
 800f726:	f381 8811 	msr	BASEPRI, r1
 800f72a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	68b9      	ldr	r1, [r7, #8]
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	f7ff ff95 	bl	800f660 <SEGGER_RTT_WriteNoLock>
 800f736:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800f73e:	697b      	ldr	r3, [r7, #20]
}
 800f740:	4618      	mov	r0, r3
 800f742:	3720      	adds	r7, #32
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	20006bb8 	.word	0x20006bb8

0800f74c <on_spi_done>:

void app_drv_spi_cs(void *spi, bool level);
static SemaphoreHandle_t m_sem_spi = NULL;

static inline void on_spi_done(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
    BaseType_t ctx_sw;
    xSemaphoreGiveFromISR(m_sem_spi, &ctx_sw);
 800f752:	4b0b      	ldr	r3, [pc, #44]	; (800f780 <on_spi_done+0x34>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	1d3a      	adds	r2, r7, #4
 800f758:	4611      	mov	r1, r2
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fd fd13 	bl	800d186 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(ctx_sw);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d007      	beq.n	800f776 <on_spi_done+0x2a>
 800f766:	4b07      	ldr	r3, [pc, #28]	; (800f784 <on_spi_done+0x38>)
 800f768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f76c:	601a      	str	r2, [r3, #0]
 800f76e:	f3bf 8f4f 	dsb	sy
 800f772:	f3bf 8f6f 	isb	sy
}
 800f776:	bf00      	nop
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	20007470 	.word	0x20007470
 800f784:	e000ed04 	.word	0xe000ed04

0800f788 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
    on_spi_done();
 800f790:	f7ff ffdc 	bl	800f74c <on_spi_done>
}
 800f794:	bf00      	nop
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
    on_spi_done();
 800f7a4:	f7ff ffd2 	bl	800f74c <on_spi_done>
}
 800f7a8:	bf00      	nop
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
    on_spi_done();
 800f7b8:	f7ff ffc8 	bl	800f74c <on_spi_done>
}
 800f7bc:	bf00      	nop
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <app_drv_spi_initialize>:


void app_drv_spi_initialize(void)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	af00      	add	r7, sp, #0
    if (!m_sem_spi)
 800f7c8:	4b06      	ldr	r3, [pc, #24]	; (800f7e4 <app_drv_spi_initialize+0x20>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d107      	bne.n	800f7e0 <app_drv_spi_initialize+0x1c>
    {
        m_sem_spi = xSemaphoreCreateBinary();
 800f7d0:	2203      	movs	r2, #3
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	2001      	movs	r0, #1
 800f7d6:	f7fd fa97 	bl	800cd08 <xQueueGenericCreate>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	4a01      	ldr	r2, [pc, #4]	; (800f7e4 <app_drv_spi_initialize+0x20>)
 800f7de:	6013      	str	r3, [r2, #0]
    }        
    
}
 800f7e0:	bf00      	nop
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	20007470 	.word	0x20007470

0800f7e8 <app_drv_spi_transmit_frame>:

void app_drv_spi_transmit_frame(void *spi, uint8_t *tx_data, uint32_t length)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
    if (length && tx_data)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d010      	beq.n	800f81c <app_drv_spi_transmit_frame+0x34>
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00d      	beq.n	800f81c <app_drv_spi_transmit_frame+0x34>
    {
        HAL_SPI_Transmit_DMA(spi, tx_data, length);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	b29b      	uxth	r3, r3
 800f804:	461a      	mov	r2, r3
 800f806:	68b9      	ldr	r1, [r7, #8]
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f7f4 fd4b 	bl	80042a4 <HAL_SPI_Transmit_DMA>
        xSemaphoreTake(m_sem_spi, portMAX_DELAY);
 800f80e:	4b05      	ldr	r3, [pc, #20]	; (800f824 <app_drv_spi_transmit_frame+0x3c>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f04f 31ff 	mov.w	r1, #4294967295
 800f816:	4618      	mov	r0, r3
 800f818:	f7fd fe22 	bl	800d460 <xQueueSemaphoreTake>
    }
}
 800f81c:	bf00      	nop
 800f81e:	3710      	adds	r7, #16
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	20007470 	.word	0x20007470

0800f828 <app_drv_spi_receive_frame>:

void app_drv_spi_receive_frame(void *spi, uint8_t *rx_data, uint32_t length)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	607a      	str	r2, [r7, #4]
    if (length && rx_data)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d010      	beq.n	800f85c <app_drv_spi_receive_frame+0x34>
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d00d      	beq.n	800f85c <app_drv_spi_receive_frame+0x34>
    {
        HAL_SPI_Receive_DMA(spi, rx_data, length);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	b29b      	uxth	r3, r3
 800f844:	461a      	mov	r2, r3
 800f846:	68b9      	ldr	r1, [r7, #8]
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f7f4 fdfb 	bl	8004444 <HAL_SPI_Receive_DMA>
        xSemaphoreTake(m_sem_spi, portMAX_DELAY);
 800f84e:	4b05      	ldr	r3, [pc, #20]	; (800f864 <app_drv_spi_receive_frame+0x3c>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f04f 31ff 	mov.w	r1, #4294967295
 800f856:	4618      	mov	r0, r3
 800f858:	f7fd fe02 	bl	800d460 <xQueueSemaphoreTake>
    }
}
 800f85c:	bf00      	nop
 800f85e:	3710      	adds	r7, #16
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	20007470 	.word	0x20007470

0800f868 <app_drv_spi_transmit_receive_frame>:

void app_drv_spi_transmit_receive_frame(void *spi, uint8_t *tx_data, uint8_t *rx_data, uint32_t length)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
 800f874:	603b      	str	r3, [r7, #0]
    if (length && tx_data && rx_data)
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d013      	beq.n	800f8a4 <app_drv_spi_transmit_receive_frame+0x3c>
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d010      	beq.n	800f8a4 <app_drv_spi_transmit_receive_frame+0x3c>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d00d      	beq.n	800f8a4 <app_drv_spi_transmit_receive_frame+0x3c>
    {
        HAL_SPI_TransmitReceive_DMA(spi, tx_data, rx_data, length);
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	68b9      	ldr	r1, [r7, #8]
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f7f4 feb3 	bl	80045fc <HAL_SPI_TransmitReceive_DMA>
        xSemaphoreTake(m_sem_spi, portMAX_DELAY);
 800f896:	4b05      	ldr	r3, [pc, #20]	; (800f8ac <app_drv_spi_transmit_receive_frame+0x44>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f04f 31ff 	mov.w	r1, #4294967295
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fd fdde 	bl	800d460 <xQueueSemaphoreTake>
    }
}
 800f8a4:	bf00      	nop
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	20007470 	.word	0x20007470

0800f8b0 <app_drv_spi_transmit_byte>:

uint8_t app_drv_spi_transmit_byte(void *spi, uint8_t data)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af02      	add	r7, sp, #8
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	70fb      	strb	r3, [r7, #3]
    uint8_t tmp[2] = {data, 0xFF};
 800f8bc:	78fb      	ldrb	r3, [r7, #3]
 800f8be:	733b      	strb	r3, [r7, #12]
 800f8c0:	23ff      	movs	r3, #255	; 0xff
 800f8c2:	737b      	strb	r3, [r7, #13]
    HAL_SPI_TransmitReceive(spi, tmp, tmp+1, 1, 10);
 800f8c4:	f107 020c 	add.w	r2, r7, #12
 800f8c8:	3201      	adds	r2, #1
 800f8ca:	f107 010c 	add.w	r1, r7, #12
 800f8ce:	230a      	movs	r3, #10
 800f8d0:	9300      	str	r3, [sp, #0]
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7f4 fb37 	bl	8003f48 <HAL_SPI_TransmitReceive>
    return tmp[1];
 800f8da:	7b7b      	ldrb	r3, [r7, #13]
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <app_drv_spi_cs>:

void app_drv_spi_cs(void *spi, bool level)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, level ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800f8f0:	78fb      	ldrb	r3, [r7, #3]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f8f8:	4803      	ldr	r0, [pc, #12]	; (800f908 <app_drv_spi_cs+0x24>)
 800f8fa:	f7f2 ff41 	bl	8002780 <HAL_GPIO_WritePin>
}
 800f8fe:	bf00      	nop
 800f900:	3708      	adds	r7, #8
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	40020400 	.word	0x40020400

0800f90c <lookup_flash>:
{
    NUM_CURRENT_LOOK_UP = sizeof(m_info_table) / sizeof(app_flash_info_t)
};

static app_flash_info_t *lookup_flash(app_flash_device_t id)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	4603      	mov	r3, r0
 800f914:	71fb      	strb	r3, [r7, #7]
    if (id > APP_SPI_FLASH_MAX)
 800f916:	79fb      	ldrb	r3, [r7, #7]
 800f918:	2b11      	cmp	r3, #17
 800f91a:	d901      	bls.n	800f920 <lookup_flash+0x14>
    {
        return NULL;
 800f91c:	2300      	movs	r3, #0
 800f91e:	e006      	b.n	800f92e <lookup_flash+0x22>
    }

    return (app_flash_info_t *)&m_info_table[id];
 800f920:	79fa      	ldrb	r2, [r7, #7]
 800f922:	4613      	mov	r3, r2
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	4413      	add	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	4a04      	ldr	r2, [pc, #16]	; (800f93c <lookup_flash+0x30>)
 800f92c:	4413      	add	r3, r2
}
 800f92e:	4618      	mov	r0, r3
 800f930:	370c      	adds	r7, #12
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	0801c6bc 	.word	0x0801c6bc

0800f940 <app_spi_flash_initialize>:

bool app_spi_flash_initialize(app_flash_drv_t *flash_drv)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
    // bool flash_test_status = 0;

    //	HAL_SPI_Initialize();
    app_spi_flash_wakeup();
 800f948:	f001 faa0 	bl	8010e8c <app_spi_flash_wakeup>
    if (flash_get_device_id(flash_drv))
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 fc35 	bl	80101bc <flash_get_device_id>
 800f952:	4603      	mov	r3, r0
 800f954:	2b00      	cmp	r3, #0
 800f956:	f000 80c0 	beq.w	800fada <app_spi_flash_initialize+0x19a>
    {
        app_flash_info_t *info = lookup_flash(flash_drv->info.device);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	7f1b      	ldrb	r3, [r3, #28]
 800f95e:	4618      	mov	r0, r3
 800f960:	f7ff ffd4 	bl	800f90c <lookup_flash>
 800f964:	60f8      	str	r0, [r7, #12]
        if (info)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d007      	beq.n	800f97c <app_spi_flash_initialize+0x3c>
        {
            memcpy(&flash_drv->info, info, sizeof(app_flash_info_t));
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	331c      	adds	r3, #28
 800f970:	220c      	movs	r2, #12
 800f972:	68f9      	ldr	r1, [r7, #12]
 800f974:	4618      	mov	r0, r3
 800f976:	f009 fb4e 	bl	8019016 <memcpy>
 800f97a:	e003      	b.n	800f984 <app_spi_flash_initialize+0x44>
        }
        else
        {
            flash_drv->info.type = APP_SPI_DEVICE_ERROR;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
//        DEBUG_INFO("Flash self test[OK]\r\nFlash type: ");
        switch (flash_drv->info.device)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	7f1b      	ldrb	r3, [r3, #28]
 800f988:	3b01      	subs	r3, #1
 800f98a:	2b0f      	cmp	r3, #15
 800f98c:	f200 8094 	bhi.w	800fab8 <app_spi_flash_initialize+0x178>
 800f990:	a201      	add	r2, pc, #4	; (adr r2, 800f998 <app_spi_flash_initialize+0x58>)
 800f992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f996:	bf00      	nop
 800f998:	0800f9d9 	.word	0x0800f9d9
 800f99c:	0800f9e7 	.word	0x0800f9e7
 800f9a0:	0800f9f5 	.word	0x0800f9f5
 800f9a4:	0800fa03 	.word	0x0800fa03
 800f9a8:	0800fa11 	.word	0x0800fa11
 800f9ac:	0800fa1f 	.word	0x0800fa1f
 800f9b0:	0800fa2d 	.word	0x0800fa2d
 800f9b4:	0800fa3b 	.word	0x0800fa3b
 800f9b8:	0800fa49 	.word	0x0800fa49
 800f9bc:	0800fa57 	.word	0x0800fa57
 800f9c0:	0800fa65 	.word	0x0800fa65
 800f9c4:	0800fa73 	.word	0x0800fa73
 800f9c8:	0800fa81 	.word	0x0800fa81
 800f9cc:	0800fa8f 	.word	0x0800fa8f
 800f9d0:	0800fa9d 	.word	0x0800fa9d
 800f9d4:	0800faab 	.word	0x0800faab
        {
        case APP_SPI_FLASH_FL164K: // 8MB
            DEBUG_RAW("APP_SPI_FLASH_FL164K, size %u bytes", flash_drv->info.size);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a1b      	ldr	r3, [r3, #32]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4849      	ldr	r0, [pc, #292]	; (800fb04 <app_spi_flash_initialize+0x1c4>)
 800f9e0:	f001 ffda 	bl	8011998 <app_debug_print_raw>
            break;
 800f9e4:	e06f      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_FL127S: // 16MB
            DEBUG_RAW("APP_SPI_FLASH_FL127S, size %u bytes", flash_drv->info.size);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6a1b      	ldr	r3, [r3, #32]
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4846      	ldr	r0, [pc, #280]	; (800fb08 <app_spi_flash_initialize+0x1c8>)
 800f9ee:	f001 ffd3 	bl	8011998 <app_debug_print_raw>
            break;
 800f9f2:	e068      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_FL256S: // 32MB
            DEBUG_RAW("APP_SPI_FLASH_FL256S, size %u bytes", flash_drv->info.size);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6a1b      	ldr	r3, [r3, #32]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4844      	ldr	r0, [pc, #272]	; (800fb0c <app_spi_flash_initialize+0x1cc>)
 800f9fc:	f001 ffcc 	bl	8011998 <app_debug_print_raw>
            break;
 800fa00:	e061      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_GD256: // 32MB
            DEBUG_RAW("APP_SPI_FLASH_GD256, size %u bytes", flash_drv->info.size);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6a1b      	ldr	r3, [r3, #32]
 800fa06:	4619      	mov	r1, r3
 800fa08:	4841      	ldr	r0, [pc, #260]	; (800fb10 <app_spi_flash_initialize+0x1d0>)
 800fa0a:	f001 ffc5 	bl	8011998 <app_debug_print_raw>
            break;
 800fa0e:	e05a      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q256JV: // 32MB
            DEBUG_RAW("APP_SPI_FLASH_256JV, size %u bytes", flash_drv->info.size);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a1b      	ldr	r3, [r3, #32]
 800fa14:	4619      	mov	r1, r3
 800fa16:	483f      	ldr	r0, [pc, #252]	; (800fb14 <app_spi_flash_initialize+0x1d4>)
 800fa18:	f001 ffbe 	bl	8011998 <app_debug_print_raw>
            break;
 800fa1c:	e053      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q80D:
            DEBUG_RAW("APP_SPI_FLASH_W25Q80DL, size %u bytes", flash_drv->info.size);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a1b      	ldr	r3, [r3, #32]
 800fa22:	4619      	mov	r1, r3
 800fa24:	483c      	ldr	r0, [pc, #240]	; (800fb18 <app_spi_flash_initialize+0x1d8>)
 800fa26:	f001 ffb7 	bl	8011998 <app_debug_print_raw>
            break;
 800fa2a:	e04c      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q128:
            DEBUG_RAW("APP_SPI_FLASH_W25Q128, size %u bytes", flash_drv->info.size);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a1b      	ldr	r3, [r3, #32]
 800fa30:	4619      	mov	r1, r3
 800fa32:	483a      	ldr	r0, [pc, #232]	; (800fb1c <app_spi_flash_initialize+0x1dc>)
 800fa34:	f001 ffb0 	bl	8011998 <app_debug_print_raw>
            break;
 800fa38:	e045      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q32:
            DEBUG_RAW("APP_SPI_FLASH_W25Q32FV, size %u bytes", flash_drv->info.size);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6a1b      	ldr	r3, [r3, #32]
 800fa3e:	4619      	mov	r1, r3
 800fa40:	4837      	ldr	r0, [pc, #220]	; (800fb20 <app_spi_flash_initialize+0x1e0>)
 800fa42:	f001 ffa9 	bl	8011998 <app_debug_print_raw>
            break;
 800fa46:	e03e      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q64:
            DEBUG_RAW("APP_SPI_FLASH_W25Q64, size %u bytes", flash_drv->info.size);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6a1b      	ldr	r3, [r3, #32]
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4835      	ldr	r0, [pc, #212]	; (800fb24 <app_spi_flash_initialize+0x1e4>)
 800fa50:	f001 ffa2 	bl	8011998 <app_debug_print_raw>
            break;
 800fa54:	e037      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_MB85RS16:
            DEBUG_RAW("APP_SPI_FRAM_MB85RS16, size %u bytes", flash_drv->info.size);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6a1b      	ldr	r3, [r3, #32]
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	4832      	ldr	r0, [pc, #200]	; (800fb28 <app_spi_flash_initialize+0x1e8>)
 800fa5e:	f001 ff9b 	bl	8011998 <app_debug_print_raw>
            break;
 800fa62:	e030      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_AT25SF128:
            DEBUG_RAW("APP_SPI_FLASH_AT25SF128, size %u bytes", flash_drv->info.size);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6a1b      	ldr	r3, [r3, #32]
 800fa68:	4619      	mov	r1, r3
 800fa6a:	4830      	ldr	r0, [pc, #192]	; (800fb2c <app_spi_flash_initialize+0x1ec>)
 800fa6c:	f001 ff94 	bl	8011998 <app_debug_print_raw>
            break;
 800fa70:	e029      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_FM25V02A:
            DEBUG_RAW("APP_SPI_FRAM_FM25V02A, size %u bytes", flash_drv->info.size);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6a1b      	ldr	r3, [r3, #32]
 800fa76:	4619      	mov	r1, r3
 800fa78:	482d      	ldr	r0, [pc, #180]	; (800fb30 <app_spi_flash_initialize+0x1f0>)
 800fa7a:	f001 ff8d 	bl	8011998 <app_debug_print_raw>
            break;
 800fa7e:	e022      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_MB85RS64V:
            DEBUG_RAW("APP_SPI_FRAM_MB85RS64V, size %u bytes", flash_drv->info.size);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a1b      	ldr	r3, [r3, #32]
 800fa84:	4619      	mov	r1, r3
 800fa86:	482b      	ldr	r0, [pc, #172]	; (800fb34 <app_spi_flash_initialize+0x1f4>)
 800fa88:	f001 ff86 	bl	8011998 <app_debug_print_raw>
            break;
 800fa8c:	e01b      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_FM25V01:
            DEBUG_RAW("APP_SPI_FRAM_FM25V01, size %u bytes", flash_drv->info.size);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a1b      	ldr	r3, [r3, #32]
 800fa92:	4619      	mov	r1, r3
 800fa94:	4828      	ldr	r0, [pc, #160]	; (800fb38 <app_spi_flash_initialize+0x1f8>)
 800fa96:	f001 ff7f 	bl	8011998 <app_debug_print_raw>
            break;
 800fa9a:	e014      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_FM25V10:
            DEBUG_RAW("APP_SPI_FRAM_FM25V10, size %u bytes", flash_drv->info.size);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6a1b      	ldr	r3, [r3, #32]
 800faa0:	4619      	mov	r1, r3
 800faa2:	4826      	ldr	r0, [pc, #152]	; (800fb3c <app_spi_flash_initialize+0x1fc>)
 800faa4:	f001 ff78 	bl	8011998 <app_debug_print_raw>
            break;
 800faa8:	e00d      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q16:
            DEBUG_RAW("APP_SPI_FLASH_W25Q16, size %u bytes", flash_drv->info.size);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6a1b      	ldr	r3, [r3, #32]
 800faae:	4619      	mov	r1, r3
 800fab0:	4823      	ldr	r0, [pc, #140]	; (800fb40 <app_spi_flash_initialize+0x200>)
 800fab2:	f001 ff71 	bl	8011998 <app_debug_print_raw>
            break;
 800fab6:	e006      	b.n	800fac6 <app_spi_flash_initialize+0x186>
        default:
            DEBUG_RAW("UNKNOWNN: %u", flash_drv->info.device);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	7f1b      	ldrb	r3, [r3, #28]
 800fabc:	4619      	mov	r1, r3
 800fabe:	4821      	ldr	r0, [pc, #132]	; (800fb44 <app_spi_flash_initialize+0x204>)
 800fac0:	f001 ff6a 	bl	8011998 <app_debug_print_raw>
            break;
 800fac4:	bf00      	nop
        }
        DEBUG_RAW("\r\n");
 800fac6:	4820      	ldr	r0, [pc, #128]	; (800fb48 <app_spi_flash_initialize+0x208>)
 800fac8:	f001 ff66 	bl	8011998 <app_debug_print_raw>
        flash_drv->error = true;
        flash_drv->info.size = 0;
        return false;
    }

    return flash_drv->error ? false : true;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fad2:	f083 0301 	eor.w	r3, r3, #1
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	e00f      	b.n	800fafa <app_spi_flash_initialize+0x1ba>
        DEBUG_ERROR("SPI mem init failed\r\n");
 800fada:	f001 fde1 	bl	80116a0 <app_debug_get_ms>
 800fade:	4603      	mov	r3, r0
 800fae0:	4a1a      	ldr	r2, [pc, #104]	; (800fb4c <app_spi_flash_initialize+0x20c>)
 800fae2:	4619      	mov	r1, r3
 800fae4:	481a      	ldr	r0, [pc, #104]	; (800fb50 <app_spi_flash_initialize+0x210>)
 800fae6:	f001 ff57 	bl	8011998 <app_debug_print_raw>
        flash_drv->error = true;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2201      	movs	r2, #1
 800faee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        flash_drv->info.size = 0;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	621a      	str	r2, [r3, #32]
        return false;
 800faf8:	2300      	movs	r3, #0
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	0801a79c 	.word	0x0801a79c
 800fb08:	0801a7c0 	.word	0x0801a7c0
 800fb0c:	0801a7e4 	.word	0x0801a7e4
 800fb10:	0801a808 	.word	0x0801a808
 800fb14:	0801a82c 	.word	0x0801a82c
 800fb18:	0801a850 	.word	0x0801a850
 800fb1c:	0801a878 	.word	0x0801a878
 800fb20:	0801a8a0 	.word	0x0801a8a0
 800fb24:	0801a8c8 	.word	0x0801a8c8
 800fb28:	0801a8ec 	.word	0x0801a8ec
 800fb2c:	0801a914 	.word	0x0801a914
 800fb30:	0801a93c 	.word	0x0801a93c
 800fb34:	0801a964 	.word	0x0801a964
 800fb38:	0801a98c 	.word	0x0801a98c
 800fb3c:	0801a9b0 	.word	0x0801a9b0
 800fb40:	0801a9d4 	.word	0x0801a9d4
 800fb44:	0801a9f8 	.word	0x0801a9f8
 800fb48:	0801aa08 	.word	0x0801aa08
 800fb4c:	0801aa0c 	.word	0x0801aa0c
 800fb50:	0801aa10 	.word	0x0801aa10

0800fb54 <flash_write_control>:
{
    return (flash_drv->error ? false : true);
}

static void flash_write_control(app_flash_drv_t *flash_drv, uint8_t enable)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	70fb      	strb	r3, [r7, #3]
    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	6812      	ldr	r2, [r2, #0]
 800fb68:	2100      	movs	r1, #0
 800fb6a:	4610      	mov	r0, r2
 800fb6c:	4798      	blx	r3
    if (enable)
 800fb6e:	78fb      	ldrb	r3, [r7, #3]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d007      	beq.n	800fb84 <flash_write_control+0x30>
    {
        flash_drv->callback.spi_tx_byte(flash_drv->spi, WREN_CMD);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	691b      	ldr	r3, [r3, #16]
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	6812      	ldr	r2, [r2, #0]
 800fb7c:	2106      	movs	r1, #6
 800fb7e:	4610      	mov	r0, r2
 800fb80:	4798      	blx	r3
 800fb82:	e006      	b.n	800fb92 <flash_write_control+0x3e>
    }
    else
    {
        flash_drv->callback.spi_tx_byte(flash_drv->spi, WRDI_CMD);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	687a      	ldr	r2, [r7, #4]
 800fb8a:	6812      	ldr	r2, [r2, #0]
 800fb8c:	2104      	movs	r1, #4
 800fb8e:	4610      	mov	r0, r2
 800fb90:	4798      	blx	r3
    }
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	6812      	ldr	r2, [r2, #0]
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	4610      	mov	r0, r2
 800fb9e:	4798      	blx	r3
}
 800fba0:	bf00      	nop
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <wait_write_in_process>:

static void wait_write_in_process(app_flash_drv_t *flash_drv, uint32_t timeout_ms)
{
 800fba8:	b590      	push	{r4, r7, lr}
 800fbaa:	b087      	sub	sp, #28
 800fbac:	af02      	add	r7, sp, #8
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];
    // uint8_t cmd;

    /* Read status register */
    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	695b      	ldr	r3, [r3, #20]
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	6812      	ldr	r2, [r2, #0]
 800fbba:	2100      	movs	r1, #0
 800fbbc:	4610      	mov	r0, r2
 800fbbe:	4798      	blx	r3
    uint8_t tmp[2] = {RDSR_CMD, SPI_DUMMY};
 800fbc0:	2305      	movs	r3, #5
 800fbc2:	813b      	strh	r3, [r7, #8]

    while (1)
    {
        flash_drv->callback.spi_tx_rx(flash_drv->spi, tmp, status, 2);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	68dc      	ldr	r4, [r3, #12]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6818      	ldr	r0, [r3, #0]
 800fbcc:	f107 020c 	add.w	r2, r7, #12
 800fbd0:	f107 0108 	add.w	r1, r7, #8
 800fbd4:	2302      	movs	r3, #2
 800fbd6:	47a0      	blx	r4

        if ((status[0] & 1) == 0)
 800fbd8:	7b3b      	ldrb	r3, [r7, #12]
 800fbda:	f003 0301 	and.w	r3, r3, #1
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00b      	beq.n	800fbfa <wait_write_in_process+0x52>
            break;
        if (timeout_ms)
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00a      	beq.n	800fbfe <wait_write_in_process+0x56>
        {
            timeout_ms--;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	3b01      	subs	r3, #1
 800fbec:	603b      	str	r3, [r7, #0]
            flash_drv->callback.delay_ms(flash_drv, 1);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	2101      	movs	r1, #1
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	4798      	blx	r3
        flash_drv->callback.spi_tx_rx(flash_drv->spi, tmp, status, 2);
 800fbf8:	e7e4      	b.n	800fbc4 <wait_write_in_process+0x1c>
            break;
 800fbfa:	bf00      	nop
 800fbfc:	e000      	b.n	800fc00 <wait_write_in_process+0x58>
        }
        else
        {
            break;
 800fbfe:	bf00      	nop
        }
    }

    if (timeout_ms == 0)
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d10a      	bne.n	800fc1c <wait_write_in_process+0x74>
    {
        DEBUG_ERROR("[%s-%d] error\r\n", __FUNCTION__, __LINE__);
 800fc06:	f001 fd4b 	bl	80116a0 <app_debug_get_ms>
 800fc0a:	4601      	mov	r1, r0
 800fc0c:	f240 1333 	movw	r3, #307	; 0x133
 800fc10:	9300      	str	r3, [sp, #0]
 800fc12:	4b08      	ldr	r3, [pc, #32]	; (800fc34 <wait_write_in_process+0x8c>)
 800fc14:	4a08      	ldr	r2, [pc, #32]	; (800fc38 <wait_write_in_process+0x90>)
 800fc16:	4809      	ldr	r0, [pc, #36]	; (800fc3c <wait_write_in_process+0x94>)
 800fc18:	f001 febe 	bl	8011998 <app_debug_print_raw>
    }
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	695b      	ldr	r3, [r3, #20]
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	6812      	ldr	r2, [r2, #0]
 800fc24:	2101      	movs	r1, #1
 800fc26:	4610      	mov	r0, r2
 800fc28:	4798      	blx	r3
}
 800fc2a:	bf00      	nop
 800fc2c:	3714      	adds	r7, #20
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd90      	pop	{r4, r7, pc}
 800fc32:	bf00      	nop
 800fc34:	0801c794 	.word	0x0801c794
 800fc38:	0801aa0c 	.word	0x0801aa0c
 800fc3c:	0801aa40 	.word	0x0801aa40

0800fc40 <app_spi_flash_direct_write_bytes>:

void app_spi_flash_direct_write_bytes(app_flash_drv_t *flash_drv, uint32_t addr, uint8_t *buffer, uint16_t length)
{
 800fc40:	b590      	push	{r4, r7, lr}
 800fc42:	b095      	sub	sp, #84	; 0x54
 800fc44:	af02      	add	r7, sp, #8
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
 800fc4c:	807b      	strh	r3, [r7, #2]
    if (flash_drv->error)
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	f040 80c0 	bne.w	800fdda <app_spi_flash_direct_write_bytes+0x19a>
        return;
    }
    DEBUG_VERBOSE("Flash write page addr 0x%08X, size %u\r\n", addr, length);


    flash_write_control(flash_drv, 1);
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f7ff ff79 	bl	800fb54 <flash_write_control>
    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	695b      	ldr	r3, [r3, #20]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	6812      	ldr	r2, [r2, #0]
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	4610      	mov	r0, r2
 800fc6e:	4798      	blx	r3

    uint8_t tmp[32];
    uint32_t buffer_size = 0;
 800fc70:	2300      	movs	r3, #0
 800fc72:	647b      	str	r3, [r7, #68]	; 0x44

    // uint8_t cmd;
    if (flash_drv->info.device == APP_SPI_FLASH_FL256S || flash_drv->info.device == APP_SPI_FLASH_GD256 || flash_drv->info.device == APP_SPI_FLASH_W25Q256JV)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	7f1b      	ldrb	r3, [r3, #28]
 800fc78:	2b03      	cmp	r3, #3
 800fc7a:	d007      	beq.n	800fc8c <app_spi_flash_direct_write_bytes+0x4c>
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	7f1b      	ldrb	r3, [r3, #28]
 800fc80:	2b04      	cmp	r3, #4
 800fc82:	d003      	beq.n	800fc8c <app_spi_flash_direct_write_bytes+0x4c>
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	7f1b      	ldrb	r3, [r3, #28]
 800fc88:	2b05      	cmp	r3, #5
 800fc8a:	d112      	bne.n	800fcb2 <app_spi_flash_direct_write_bytes+0x72>
    {
        /* Send write cmd */
        tmp[buffer_size++] = PP_CMD4;
 800fc8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc8e:	1c5a      	adds	r2, r3, #1
 800fc90:	647a      	str	r2, [r7, #68]	; 0x44
 800fc92:	3348      	adds	r3, #72	; 0x48
 800fc94:	443b      	add	r3, r7
 800fc96:	2212      	movs	r2, #18
 800fc98:	f803 2c30 	strb.w	r2, [r3, #-48]

        /* Send 4 byte addr */
        tmp[buffer_size++] = (addr >> 24) & 0xFF;
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	0e19      	lsrs	r1, r3, #24
 800fca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fca2:	1c5a      	adds	r2, r3, #1
 800fca4:	647a      	str	r2, [r7, #68]	; 0x44
 800fca6:	b2ca      	uxtb	r2, r1
 800fca8:	3348      	adds	r3, #72	; 0x48
 800fcaa:	443b      	add	r3, r7
 800fcac:	f803 2c30 	strb.w	r2, [r3, #-48]
 800fcb0:	e007      	b.n	800fcc2 <app_spi_flash_direct_write_bytes+0x82>
    }
    else
    {
        /* Send write cmd */
        tmp[buffer_size++] = PP_CMD;
 800fcb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcb4:	1c5a      	adds	r2, r3, #1
 800fcb6:	647a      	str	r2, [r7, #68]	; 0x44
 800fcb8:	3348      	adds	r3, #72	; 0x48
 800fcba:	443b      	add	r3, r7
 800fcbc:	2202      	movs	r2, #2
 800fcbe:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
#if 1
    if (flash_drv->info.type == APP_SPI_FLASH)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d11d      	bne.n	800fd08 <app_spi_flash_direct_write_bytes+0xc8>
    {
        /* Send 3 bytes address */
        tmp[buffer_size++] = (addr >> 16) & 0xFF;
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	0c19      	lsrs	r1, r3, #16
 800fcd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcd2:	1c5a      	adds	r2, r3, #1
 800fcd4:	647a      	str	r2, [r7, #68]	; 0x44
 800fcd6:	b2ca      	uxtb	r2, r1
 800fcd8:	3348      	adds	r3, #72	; 0x48
 800fcda:	443b      	add	r3, r7
 800fcdc:	f803 2c30 	strb.w	r2, [r3, #-48]
        tmp[buffer_size++] = (addr >> 8) & 0xFF;
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	0a19      	lsrs	r1, r3, #8
 800fce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fce6:	1c5a      	adds	r2, r3, #1
 800fce8:	647a      	str	r2, [r7, #68]	; 0x44
 800fcea:	b2ca      	uxtb	r2, r1
 800fcec:	3348      	adds	r3, #72	; 0x48
 800fcee:	443b      	add	r3, r7
 800fcf0:	f803 2c30 	strb.w	r2, [r3, #-48]
        tmp[buffer_size++] = addr & 0xFF;
 800fcf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcf6:	1c5a      	adds	r2, r3, #1
 800fcf8:	647a      	str	r2, [r7, #68]	; 0x44
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	b2d2      	uxtb	r2, r2
 800fcfe:	3348      	adds	r3, #72	; 0x48
 800fd00:	443b      	add	r3, r7
 800fd02:	f803 2c30 	strb.w	r2, [r3, #-48]
 800fd06:	e012      	b.n	800fd2e <app_spi_flash_direct_write_bytes+0xee>
    }
    else // FRAM : only 2 byte address send
    {
        /* Send 2 bytes address */
        tmp[buffer_size++] = (addr & 0xFF00) >> 8;
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	0a19      	lsrs	r1, r3, #8
 800fd0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd0e:	1c5a      	adds	r2, r3, #1
 800fd10:	647a      	str	r2, [r7, #68]	; 0x44
 800fd12:	b2ca      	uxtb	r2, r1
 800fd14:	3348      	adds	r3, #72	; 0x48
 800fd16:	443b      	add	r3, r7
 800fd18:	f803 2c30 	strb.w	r2, [r3, #-48]
        tmp[buffer_size++] = addr & 0xFF;
 800fd1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	647a      	str	r2, [r7, #68]	; 0x44
 800fd22:	68ba      	ldr	r2, [r7, #8]
 800fd24:	b2d2      	uxtb	r2, r2
 800fd26:	3348      	adds	r3, #72	; 0x48
 800fd28:	443b      	add	r3, r7
 800fd2a:	f803 2c30 	strb.w	r2, [r3, #-48]
    }

    flash_drv->callback.spi_tx_buffer(flash_drv->spi, tmp, buffer_size);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	68fa      	ldr	r2, [r7, #12]
 800fd34:	6810      	ldr	r0, [r2, #0]
 800fd36:	f107 0118 	add.w	r1, r7, #24
 800fd3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd3c:	4798      	blx	r3
    /* Send data to flash */
    flash_drv->callback.spi_tx_buffer(flash_drv->spi, buffer, length);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	6810      	ldr	r0, [r2, #0]
 800fd46:	887a      	ldrh	r2, [r7, #2]
 800fd48:	6879      	ldr	r1, [r7, #4]
 800fd4a:	4798      	blx	r3
#endif
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	695b      	ldr	r3, [r3, #20]
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	6812      	ldr	r2, [r2, #0]
 800fd54:	2101      	movs	r1, #1
 800fd56:	4610      	mov	r0, r2
 800fd58:	4798      	blx	r3

    wait_write_in_process(flash_drv, FLASH_WRITE_TIMEOUT_MS);
 800fd5a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800fd5e:	68f8      	ldr	r0, [r7, #12]
 800fd60:	f7ff ff22 	bl	800fba8 <wait_write_in_process>

#if VERIFY_FLASH
    uint32_t i = 0;
 800fd64:	2300      	movs	r3, #0
 800fd66:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t old_addr = addr;
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	63bb      	str	r3, [r7, #56]	; 0x38
    bool found_error = false;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for (i = 0; i < length; i++) // Debug only
 800fd72:	2300      	movs	r3, #0
 800fd74:	643b      	str	r3, [r7, #64]	; 0x40
 800fd76:	e02b      	b.n	800fdd0 <app_spi_flash_direct_write_bytes+0x190>
    {
        uint8_t rb;
        app_spi_flash_read_bytes(flash_drv, old_addr + i, (uint8_t *)&rb, 1);
 800fd78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd7c:	18d1      	adds	r1, r2, r3
 800fd7e:	f107 0217 	add.w	r2, r7, #23
 800fd82:	2301      	movs	r3, #1
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f000 f8ab 	bl	800fee0 <app_spi_flash_read_bytes>
        if (memcmp(&rb, buffer + i, 1))
 800fd8a:	f107 0317 	add.w	r3, r7, #23
 800fd8e:	781a      	ldrb	r2, [r3, #0]
 800fd90:	6879      	ldr	r1, [r7, #4]
 800fd92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd94:	440b      	add	r3, r1
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d016      	beq.n	800fdca <app_spi_flash_direct_write_bytes+0x18a>
        {
            found_error = true;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            DEBUG_ERROR("Flash write error at addr 0x%08X, readback 0x%02X, expect 0x%02X\r\n", old_addr + i, rb, *(buffer + i));
 800fda2:	f001 fc7d 	bl	80116a0 <app_debug_get_ms>
 800fda6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdaa:	18d1      	adds	r1, r2, r3
 800fdac:	7dfb      	ldrb	r3, [r7, #23]
 800fdae:	461c      	mov	r4, r3
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdb4:	4413      	add	r3, r2
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	9301      	str	r3, [sp, #4]
 800fdba:	9400      	str	r4, [sp, #0]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	4a09      	ldr	r2, [pc, #36]	; (800fde4 <app_spi_flash_direct_write_bytes+0x1a4>)
 800fdc0:	4601      	mov	r1, r0
 800fdc2:	4809      	ldr	r0, [pc, #36]	; (800fde8 <app_spi_flash_direct_write_bytes+0x1a8>)
 800fdc4:	f001 fde8 	bl	8011998 <app_debug_print_raw>
 800fdc8:	e008      	b.n	800fddc <app_spi_flash_direct_write_bytes+0x19c>
    for (i = 0; i < length; i++) // Debug only
 800fdca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdcc:	3301      	adds	r3, #1
 800fdce:	643b      	str	r3, [r7, #64]	; 0x40
 800fdd0:	887b      	ldrh	r3, [r7, #2]
 800fdd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d3cf      	bcc.n	800fd78 <app_spi_flash_direct_write_bytes+0x138>
 800fdd8:	e000      	b.n	800fddc <app_spi_flash_direct_write_bytes+0x19c>
        return;
 800fdda:	bf00      	nop
    {
        DEBUG_VERBOSE("Page write success\r\n");
    }
#endif
    // vPortFree(tmp);
}
 800fddc:	374c      	adds	r7, #76	; 0x4c
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd90      	pop	{r4, r7, pc}
 800fde2:	bf00      	nop
 800fde4:	0801aa0c 	.word	0x0801aa0c
 800fde8:	0801aa68 	.word	0x0801aa68

0800fdec <app_spi_flash_write>:
 * @created	:	15/01/2014
 * @version	:
 * @reviewer:
 */
void app_spi_flash_write(app_flash_drv_t *flash_drv, uint32_t addr, uint8_t *buffer, uint32_t length)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b08a      	sub	sp, #40	; 0x28
 800fdf0:	af02      	add	r7, sp, #8
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	60b9      	str	r1, [r7, #8]
 800fdf6:	607a      	str	r2, [r7, #4]
 800fdf8:	603b      	str	r3, [r7, #0]
    if (flash_drv->error)
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d164      	bne.n	800fece <app_spi_flash_write+0xe2>
    {
        return;
    }
    /* Split data into page size (256), only availble in Flash */
    uint32_t offset_addr = 0;
 800fe04:	2300      	movs	r3, #0
 800fe06:	613b      	str	r3, [r7, #16]
    uint32_t length_need_to_write = 0;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	61fb      	str	r3, [r7, #28]
    uint32_t nb_bytes_written = 0;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	61bb      	str	r3, [r7, #24]

    DEBUG_VERBOSE("Flash write %u bytes, from addr 0x%08X\r\n", length, addr);
    if (addr + length > flash_drv->info.size)
 800fe10:	68ba      	ldr	r2, [r7, #8]
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	441a      	add	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6a1b      	ldr	r3, [r3, #32]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d90f      	bls.n	800fe3e <app_spi_flash_write+0x52>
    {
        DEBUG_ERROR("Flash write from 0x%08X to 0x%08X is over flash size %u bytes\r\n",
 800fe1e:	f001 fc3f 	bl	80116a0 <app_debug_get_ms>
 800fe22:	4601      	mov	r1, r0
 800fe24:	68ba      	ldr	r2, [r7, #8]
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	4413      	add	r3, r2
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	6a12      	ldr	r2, [r2, #32]
 800fe2e:	9201      	str	r2, [sp, #4]
 800fe30:	9300      	str	r3, [sp, #0]
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	4a28      	ldr	r2, [pc, #160]	; (800fed8 <app_spi_flash_write+0xec>)
 800fe36:	4829      	ldr	r0, [pc, #164]	; (800fedc <app_spi_flash_write+0xf0>)
 800fe38:	f001 fdae 	bl	8011998 <app_debug_print_raw>
                    addr,
                    addr + length, flash_drv->info.size);
        return;
 800fe3c:	e048      	b.n	800fed0 <app_spi_flash_write+0xe4>
    }
    uint32_t max_write_size = APP_SPI_FLASH_PAGE_SIZE;
 800fe3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe42:	617b      	str	r3, [r7, #20]
    if (flash_drv->info.type == APP_SPI_FRAM)
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	d13b      	bne.n	800fec6 <app_spi_flash_write+0xda>
    {
        max_write_size = length + 1;
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	3301      	adds	r3, #1
 800fe52:	617b      	str	r3, [r7, #20]
    }
    while (length)
 800fe54:	e037      	b.n	800fec6 <app_spi_flash_write+0xda>
    {
        offset_addr = addr % max_write_size;
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe5e:	6979      	ldr	r1, [r7, #20]
 800fe60:	fb01 f202 	mul.w	r2, r1, r2
 800fe64:	1a9b      	subs	r3, r3, r2
 800fe66:	613b      	str	r3, [r7, #16]

        if (offset_addr > 0)
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00d      	beq.n	800fe8a <app_spi_flash_write+0x9e>
        {
            if (offset_addr + length > max_write_size)
 800fe6e:	693a      	ldr	r2, [r7, #16]
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	4413      	add	r3, r2
 800fe74:	697a      	ldr	r2, [r7, #20]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d204      	bcs.n	800fe84 <app_spi_flash_write+0x98>
            {
                length_need_to_write = max_write_size - offset_addr;
 800fe7a:	697a      	ldr	r2, [r7, #20]
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	1ad3      	subs	r3, r2, r3
 800fe80:	61fb      	str	r3, [r7, #28]
 800fe82:	e00b      	b.n	800fe9c <app_spi_flash_write+0xb0>
            }
            else
            {
                length_need_to_write = length;
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	61fb      	str	r3, [r7, #28]
 800fe88:	e008      	b.n	800fe9c <app_spi_flash_write+0xb0>
            }
        }
        else
        {
            if (length > max_write_size)
 800fe8a:	683a      	ldr	r2, [r7, #0]
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d902      	bls.n	800fe98 <app_spi_flash_write+0xac>
            {
                length_need_to_write = max_write_size;
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	61fb      	str	r3, [r7, #28]
 800fe96:	e001      	b.n	800fe9c <app_spi_flash_write+0xb0>
            }
            else
            {
                length_need_to_write = length;
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	61fb      	str	r3, [r7, #28]
            }
        }

        length -= length_need_to_write;
 800fe9c:	683a      	ldr	r2, [r7, #0]
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	603b      	str	r3, [r7, #0]

        app_spi_flash_direct_write_bytes(flash_drv,
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	441a      	add	r2, r3
 800feaa:	69fb      	ldr	r3, [r7, #28]
 800feac:	b29b      	uxth	r3, r3
 800feae:	68b9      	ldr	r1, [r7, #8]
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	f7ff fec5 	bl	800fc40 <app_spi_flash_direct_write_bytes>
                                         addr,
                                         &buffer[nb_bytes_written],
                                         length_need_to_write);

        nb_bytes_written += length_need_to_write;
 800feb6:	69ba      	ldr	r2, [r7, #24]
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	4413      	add	r3, r2
 800febc:	61bb      	str	r3, [r7, #24]

        addr += length_need_to_write;
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	4413      	add	r3, r2
 800fec4:	60bb      	str	r3, [r7, #8]
    while (length)
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d1c4      	bne.n	800fe56 <app_spi_flash_write+0x6a>
 800fecc:	e000      	b.n	800fed0 <app_spi_flash_write+0xe4>
        return;
 800fece:	bf00      	nop
    }
}
 800fed0:	3720      	adds	r7, #32
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	0801aa0c 	.word	0x0801aa0c
 800fedc:	0801aac4 	.word	0x0801aac4

0800fee0 <app_spi_flash_read_bytes>:

void app_spi_flash_read_bytes(app_flash_drv_t *flash_drv, uint32_t addr, uint8_t *buffer, uint16_t length)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b088      	sub	sp, #32
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
 800feec:	807b      	strh	r3, [r7, #2]
    if (flash_drv->error)
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f040 80a1 	bne.w	801003c <app_spi_flash_read_bytes+0x15c>
    {
        return;
    }

    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	695b      	ldr	r3, [r3, #20]
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	6812      	ldr	r2, [r2, #0]
 800ff02:	2100      	movs	r1, #0
 800ff04:	4610      	mov	r0, r2
 800ff06:	4798      	blx	r3
    uint8_t cmd_buffer[6];
    uint8_t index = 0;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	77fb      	strb	r3, [r7, #31]
    uint32_t next_sector_offset = 0;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	61bb      	str	r3, [r7, #24]
    if (addr + length > flash_drv->info.size)
 800ff10:	887a      	ldrh	r2, [r7, #2]
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	441a      	add	r2, r3
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	6a1b      	ldr	r3, [r3, #32]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d90d      	bls.n	800ff3a <app_spi_flash_read_bytes+0x5a>
    {
        next_sector_offset = (addr + length) - flash_drv->info.size;
 800ff1e:	887a      	ldrh	r2, [r7, #2]
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	441a      	add	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6a1b      	ldr	r3, [r3, #32]
 800ff28:	1ad3      	subs	r3, r2, r3
 800ff2a:	61bb      	str	r3, [r7, #24]
        length = flash_drv->info.size - addr;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6a1b      	ldr	r3, [r3, #32]
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	1ad3      	subs	r3, r2, r3
 800ff38:	807b      	strh	r3, [r7, #2]
    }
    while (1)
    {
        if (flash_drv->info.device == APP_SPI_FLASH_FL256S || flash_drv->info.device == APP_SPI_FLASH_GD256 || flash_drv->info.device == APP_SPI_FLASH_W25Q256JV)
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	7f1b      	ldrb	r3, [r3, #28]
 800ff3e:	2b03      	cmp	r3, #3
 800ff40:	d007      	beq.n	800ff52 <app_spi_flash_read_bytes+0x72>
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	7f1b      	ldrb	r3, [r3, #28]
 800ff46:	2b04      	cmp	r3, #4
 800ff48:	d003      	beq.n	800ff52 <app_spi_flash_read_bytes+0x72>
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	7f1b      	ldrb	r3, [r3, #28]
 800ff4e:	2b05      	cmp	r3, #5
 800ff50:	d112      	bne.n	800ff78 <app_spi_flash_read_bytes+0x98>
        {
            /* Send read cmd */
            cmd_buffer[index++] = READ_DATA_CMD4;
 800ff52:	7ffb      	ldrb	r3, [r7, #31]
 800ff54:	1c5a      	adds	r2, r3, #1
 800ff56:	77fa      	strb	r2, [r7, #31]
 800ff58:	3320      	adds	r3, #32
 800ff5a:	443b      	add	r3, r7
 800ff5c:	2213      	movs	r2, #19
 800ff5e:	f803 2c10 	strb.w	r2, [r3, #-16]
            cmd_buffer[index++] = (addr >> 24) & 0xFF;
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	0e1a      	lsrs	r2, r3, #24
 800ff66:	7ffb      	ldrb	r3, [r7, #31]
 800ff68:	1c59      	adds	r1, r3, #1
 800ff6a:	77f9      	strb	r1, [r7, #31]
 800ff6c:	b2d2      	uxtb	r2, r2
 800ff6e:	3320      	adds	r3, #32
 800ff70:	443b      	add	r3, r7
 800ff72:	f803 2c10 	strb.w	r2, [r3, #-16]
 800ff76:	e007      	b.n	800ff88 <app_spi_flash_read_bytes+0xa8>
        }
        else
        {
            /* Send read cmd*/
            cmd_buffer[index++] = READ_DATA_CMD;
 800ff78:	7ffb      	ldrb	r3, [r7, #31]
 800ff7a:	1c5a      	adds	r2, r3, #1
 800ff7c:	77fa      	strb	r2, [r7, #31]
 800ff7e:	3320      	adds	r3, #32
 800ff80:	443b      	add	r3, r7
 800ff82:	2203      	movs	r2, #3
 800ff84:	f803 2c10 	strb.w	r2, [r3, #-16]
        }

        if (flash_drv->info.type == APP_SPI_FLASH)
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d11d      	bne.n	800ffce <app_spi_flash_read_bytes+0xee>
        {
            /* Send 3 bytes address */
            cmd_buffer[index++] = (addr >> 16) & 0xFF;
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	0c1a      	lsrs	r2, r3, #16
 800ff96:	7ffb      	ldrb	r3, [r7, #31]
 800ff98:	1c59      	adds	r1, r3, #1
 800ff9a:	77f9      	strb	r1, [r7, #31]
 800ff9c:	b2d2      	uxtb	r2, r2
 800ff9e:	3320      	adds	r3, #32
 800ffa0:	443b      	add	r3, r7
 800ffa2:	f803 2c10 	strb.w	r2, [r3, #-16]
            ;
            cmd_buffer[index++] = (addr >> 8) & 0xFF;
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	0a1a      	lsrs	r2, r3, #8
 800ffaa:	7ffb      	ldrb	r3, [r7, #31]
 800ffac:	1c59      	adds	r1, r3, #1
 800ffae:	77f9      	strb	r1, [r7, #31]
 800ffb0:	b2d2      	uxtb	r2, r2
 800ffb2:	3320      	adds	r3, #32
 800ffb4:	443b      	add	r3, r7
 800ffb6:	f803 2c10 	strb.w	r2, [r3, #-16]
            cmd_buffer[index++] = addr & 0xFF;
 800ffba:	7ffb      	ldrb	r3, [r7, #31]
 800ffbc:	1c5a      	adds	r2, r3, #1
 800ffbe:	77fa      	strb	r2, [r7, #31]
 800ffc0:	68ba      	ldr	r2, [r7, #8]
 800ffc2:	b2d2      	uxtb	r2, r2
 800ffc4:	3320      	adds	r3, #32
 800ffc6:	443b      	add	r3, r7
 800ffc8:	f803 2c10 	strb.w	r2, [r3, #-16]
 800ffcc:	e012      	b.n	800fff4 <app_spi_flash_read_bytes+0x114>
        }
        else
        {
            /* Send 2 bytes address */
            cmd_buffer[index++] = (addr & 0xFF00) >> 8;
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	0a1a      	lsrs	r2, r3, #8
 800ffd2:	7ffb      	ldrb	r3, [r7, #31]
 800ffd4:	1c59      	adds	r1, r3, #1
 800ffd6:	77f9      	strb	r1, [r7, #31]
 800ffd8:	b2d2      	uxtb	r2, r2
 800ffda:	3320      	adds	r3, #32
 800ffdc:	443b      	add	r3, r7
 800ffde:	f803 2c10 	strb.w	r2, [r3, #-16]
            cmd_buffer[index++] = addr & 0xFF;
 800ffe2:	7ffb      	ldrb	r3, [r7, #31]
 800ffe4:	1c5a      	adds	r2, r3, #1
 800ffe6:	77fa      	strb	r2, [r7, #31]
 800ffe8:	68ba      	ldr	r2, [r7, #8]
 800ffea:	b2d2      	uxtb	r2, r2
 800ffec:	3320      	adds	r3, #32
 800ffee:	443b      	add	r3, r7
 800fff0:	f803 2c10 	strb.w	r2, [r3, #-16]
        }
        flash_drv->callback.spi_tx_buffer(flash_drv->spi, cmd_buffer, index);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	6810      	ldr	r0, [r2, #0]
 800fffc:	7ffa      	ldrb	r2, [r7, #31]
 800fffe:	f107 0110 	add.w	r1, r7, #16
 8010002:	4798      	blx	r3

        // Read data
        flash_drv->callback.spi_rx_buffer(flash_drv->spi, buffer, length);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	6810      	ldr	r0, [r2, #0]
 801000c:	887a      	ldrh	r2, [r7, #2]
 801000e:	6879      	ldr	r1, [r7, #4]
 8010010:	4798      	blx	r3

        if (next_sector_offset == 0)
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d008      	beq.n	801002a <app_spi_flash_read_bytes+0x14a>
        {
            break;
        }
        else
        {
            buffer += length;
 8010018:	887b      	ldrh	r3, [r7, #2]
 801001a:	687a      	ldr	r2, [r7, #4]
 801001c:	4413      	add	r3, r2
 801001e:	607b      	str	r3, [r7, #4]
            addr = next_sector_offset;
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	60bb      	str	r3, [r7, #8]
            next_sector_offset = 0;
 8010024:	2300      	movs	r3, #0
 8010026:	61bb      	str	r3, [r7, #24]
        if (flash_drv->info.device == APP_SPI_FLASH_FL256S || flash_drv->info.device == APP_SPI_FLASH_GD256 || flash_drv->info.device == APP_SPI_FLASH_W25Q256JV)
 8010028:	e787      	b.n	800ff3a <app_spi_flash_read_bytes+0x5a>
            break;
 801002a:	bf00      	nop
            continue;
        }
    }
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	695b      	ldr	r3, [r3, #20]
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	6812      	ldr	r2, [r2, #0]
 8010034:	2101      	movs	r1, #1
 8010036:	4610      	mov	r0, r2
 8010038:	4798      	blx	r3
 801003a:	e000      	b.n	801003e <app_spi_flash_read_bytes+0x15e>
        return;
 801003c:	bf00      	nop
}
 801003e:	3720      	adds	r7, #32
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <app_spi_flash_erase_sector_4k>:

void app_spi_flash_erase_sector_4k(app_flash_drv_t *flash_drv, uint32_t sector_count)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b08c      	sub	sp, #48	; 0x30
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
    if (flash_drv->info.type == APP_SPI_FRAM)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010054:	2b02      	cmp	r3, #2
 8010056:	d108      	bne.n	801006a <app_spi_flash_erase_sector_4k+0x26>
    {
        DEBUG_WARN("FRAM doesnt need to erase sector 4KB\r\n");
 8010058:	f001 fb22 	bl	80116a0 <app_debug_get_ms>
 801005c:	4603      	mov	r3, r0
 801005e:	4a52      	ldr	r2, [pc, #328]	; (80101a8 <app_spi_flash_erase_sector_4k+0x164>)
 8010060:	4619      	mov	r1, r3
 8010062:	4852      	ldr	r0, [pc, #328]	; (80101ac <app_spi_flash_erase_sector_4k+0x168>)
 8010064:	f001 fc98 	bl	8011998 <app_debug_print_raw>
        return;
 8010068:	e09b      	b.n	80101a2 <app_spi_flash_erase_sector_4k+0x15e>
    }
    if (flash_drv->error)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010070:	2b00      	cmp	r3, #0
 8010072:	f040 8095 	bne.w	80101a0 <app_spi_flash_erase_sector_4k+0x15c>
    {
        return;
    }

    DEBUG_INFO("Erase sector %u\r\n", sector_count);
 8010076:	f001 fb13 	bl	80116a0 <app_debug_get_ms>
 801007a:	4601      	mov	r1, r0
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	4a4a      	ldr	r2, [pc, #296]	; (80101a8 <app_spi_flash_erase_sector_4k+0x164>)
 8010080:	484b      	ldr	r0, [pc, #300]	; (80101b0 <app_spi_flash_erase_sector_4k+0x16c>)
 8010082:	f001 fc89 	bl	8011998 <app_debug_print_raw>
    uint32_t addr = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	62bb      	str	r3, [r7, #40]	; 0x28
    // uint32_t old_addr = 0;
    addr = sector_count * APP_SPI_FLASH_SECTOR_SIZE; // Sector 4KB
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	031b      	lsls	r3, r3, #12
 801008e:	62bb      	str	r3, [r7, #40]	; 0x28
//    old_addr = addr;

    flash_write_control(flash_drv, 1);
 8010090:	2101      	movs	r1, #1
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f7ff fd5e 	bl	800fb54 <flash_write_control>
    flash_drv->callback.delay_ms(flash_drv, 5);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	699b      	ldr	r3, [r3, #24]
 801009c:	2105      	movs	r1, #5
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	4798      	blx	r3
    uint8_t cmd_buffer[32];
    uint32_t cmd_count = 0;
 80100a2:	2300      	movs	r3, #0
 80100a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	695b      	ldr	r3, [r3, #20]
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	6812      	ldr	r2, [r2, #0]
 80100ae:	2100      	movs	r1, #0
 80100b0:	4610      	mov	r0, r2
 80100b2:	4798      	blx	r3
    if (flash_drv->info.device == APP_SPI_FLASH_FL256S || flash_drv->info.device == APP_SPI_FLASH_GD256 || flash_drv->info.device == APP_SPI_FLASH_W25Q256JV)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	7f1b      	ldrb	r3, [r3, #28]
 80100b8:	2b03      	cmp	r3, #3
 80100ba:	d007      	beq.n	80100cc <app_spi_flash_erase_sector_4k+0x88>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	7f1b      	ldrb	r3, [r3, #28]
 80100c0:	2b04      	cmp	r3, #4
 80100c2:	d003      	beq.n	80100cc <app_spi_flash_erase_sector_4k+0x88>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	7f1b      	ldrb	r3, [r3, #28]
 80100c8:	2b05      	cmp	r3, #5
 80100ca:	d112      	bne.n	80100f2 <app_spi_flash_erase_sector_4k+0xae>
    {
        /* Gui lenh */
        cmd_buffer[cmd_count++] = SE_CMD4;
 80100cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ce:	1c5a      	adds	r2, r3, #1
 80100d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80100d2:	3330      	adds	r3, #48	; 0x30
 80100d4:	443b      	add	r3, r7
 80100d6:	2221      	movs	r2, #33	; 0x21
 80100d8:	f803 2c28 	strb.w	r2, [r3, #-40]

        /* Send 4 bytes address */
        cmd_buffer[cmd_count++] = (addr >> 24) & 0xFF;
 80100dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100de:	0e19      	lsrs	r1, r3, #24
 80100e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e2:	1c5a      	adds	r2, r3, #1
 80100e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80100e6:	b2ca      	uxtb	r2, r1
 80100e8:	3330      	adds	r3, #48	; 0x30
 80100ea:	443b      	add	r3, r7
 80100ec:	f803 2c28 	strb.w	r2, [r3, #-40]
 80100f0:	e007      	b.n	8010102 <app_spi_flash_erase_sector_4k+0xbe>
    }
    else
    {
        /* Gui lenh */
        cmd_buffer[cmd_count++] = SE_CMD;
 80100f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f4:	1c5a      	adds	r2, r3, #1
 80100f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80100f8:	3330      	adds	r3, #48	; 0x30
 80100fa:	443b      	add	r3, r7
 80100fc:	2220      	movs	r2, #32
 80100fe:	f803 2c28 	strb.w	r2, [r3, #-40]
    }

    /* Send 3 byte address */
    cmd_buffer[cmd_count++] = (addr >> 16) & 0xFF;
 8010102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010104:	0c19      	lsrs	r1, r3, #16
 8010106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010108:	1c5a      	adds	r2, r3, #1
 801010a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801010c:	b2ca      	uxtb	r2, r1
 801010e:	3330      	adds	r3, #48	; 0x30
 8010110:	443b      	add	r3, r7
 8010112:	f803 2c28 	strb.w	r2, [r3, #-40]
    cmd_buffer[cmd_count++] = (addr >> 8) & 0xFF;
 8010116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010118:	0a19      	lsrs	r1, r3, #8
 801011a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011c:	1c5a      	adds	r2, r3, #1
 801011e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010120:	b2ca      	uxtb	r2, r1
 8010122:	3330      	adds	r3, #48	; 0x30
 8010124:	443b      	add	r3, r7
 8010126:	f803 2c28 	strb.w	r2, [r3, #-40]
    cmd_buffer[cmd_count++] = addr & 0xFF;
 801012a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012c:	1c5a      	adds	r2, r3, #1
 801012e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010132:	b2d2      	uxtb	r2, r2
 8010134:	3330      	adds	r3, #48	; 0x30
 8010136:	443b      	add	r3, r7
 8010138:	f803 2c28 	strb.w	r2, [r3, #-40]
    flash_drv->callback.spi_tx_buffer(flash_drv->spi, cmd_buffer, cmd_count);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	6810      	ldr	r0, [r2, #0]
 8010144:	f107 0108 	add.w	r1, r7, #8
 8010148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801014a:	4798      	blx	r3
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	695b      	ldr	r3, [r3, #20]
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	6812      	ldr	r2, [r2, #0]
 8010154:	2101      	movs	r1, #1
 8010156:	4610      	mov	r0, r2
 8010158:	4798      	blx	r3
    flash_drv->callback.delay_ms(flash_drv, SECTOR_ERASE_TIME_MS);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	4798      	blx	r3
    wait_write_in_process(flash_drv, 50);
 8010166:	2132      	movs	r1, #50	; 0x32
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f7ff fd1d 	bl	800fba8 <wait_write_in_process>
    if (app_spi_flash_is_sector_empty(flash_drv, sector_count))
 801016e:	6839      	ldr	r1, [r7, #0]
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 fe92 	bl	8010e9a <app_spi_flash_is_sector_empty>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d008      	beq.n	801018e <app_spi_flash_erase_sector_4k+0x14a>
    {
        DEBUG_INFO("Success\r\n", sector_count);
 801017c:	f001 fa90 	bl	80116a0 <app_debug_get_ms>
 8010180:	4601      	mov	r1, r0
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	4a08      	ldr	r2, [pc, #32]	; (80101a8 <app_spi_flash_erase_sector_4k+0x164>)
 8010186:	480b      	ldr	r0, [pc, #44]	; (80101b4 <app_spi_flash_erase_sector_4k+0x170>)
 8010188:	f001 fc06 	bl	8011998 <app_debug_print_raw>
 801018c:	e009      	b.n	80101a2 <app_spi_flash_erase_sector_4k+0x15e>
    }
    else
    {
        DEBUG_ERROR("Failed\r\n", sector_count);
 801018e:	f001 fa87 	bl	80116a0 <app_debug_get_ms>
 8010192:	4601      	mov	r1, r0
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	4a04      	ldr	r2, [pc, #16]	; (80101a8 <app_spi_flash_erase_sector_4k+0x164>)
 8010198:	4807      	ldr	r0, [pc, #28]	; (80101b8 <app_spi_flash_erase_sector_4k+0x174>)
 801019a:	f001 fbfd 	bl	8011998 <app_debug_print_raw>
 801019e:	e000      	b.n	80101a2 <app_spi_flash_erase_sector_4k+0x15e>
        return;
 80101a0:	bf00      	nop
    }
}
 80101a2:	3730      	adds	r7, #48	; 0x30
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	0801aa0c 	.word	0x0801aa0c
 80101ac:	0801ab1c 	.word	0x0801ab1c
 80101b0:	0801ab5c 	.word	0x0801ab5c
 80101b4:	0801ab88 	.word	0x0801ab88
 80101b8:	0801abac 	.word	0x0801abac

080101bc <flash_get_device_id>:
    wait_write_in_process(old_addr);
}
#endif

bool flash_get_device_id(app_flash_drv_t *flash_drv)
{
 80101bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101c0:	b0b2      	sub	sp, #200	; 0xc8
 80101c2:	af04      	add	r7, sp, #16
 80101c4:	6578      	str	r0, [r7, #84]	; 0x54
    uint8_t reg_status = 0;
 80101c6:	2300      	movs	r3, #0
 80101c8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    uint8_t tries;
    uint8_t cmd;
    app_spi_flash_device_id_t id;
    bool val = false;
 80101cc:	2300      	movs	r3, #0
 80101ce:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    flash_drv->error = false;
 80101d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80101d4:	2300      	movs	r3, #0
 80101d6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    flash_drv->info.device = APP_SPI_FLASH_DEVICE_INVALID;
 80101da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80101dc:	2300      	movs	r3, #0
 80101de:	7713      	strb	r3, [r2, #28]

    for (tries = 0; tries < FLASH_INIT_MAX_RETRIES; tries++)
 80101e0:	2300      	movs	r3, #0
 80101e2:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80101e6:	f000 be37 	b.w	8010e58 <flash_get_device_id+0xc9c>
    {
        flash_drv->callback.spi_cs(flash_drv->spi, 0);
 80101ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101ec:	695a      	ldr	r2, [r3, #20]
 80101ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2100      	movs	r1, #0
 80101f4:	4618      	mov	r0, r3
 80101f6:	4790      	blx	r2
#if 0
        cmd = READ_ID_CMD;
#else
        cmd = RDID_CMD;
 80101f8:	239f      	movs	r3, #159	; 0x9f
 80101fa:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
#endif
        if (cmd == READ_ID_CMD)
 80101fe:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8010202:	2b90      	cmp	r3, #144	; 0x90
 8010204:	d12f      	bne.n	8010266 <flash_get_device_id+0xaa>
        {
            uint8_t buffer_tx[6] = {READ_ID_CMD, 0x00, 0x00, 0x00, 0xFF, 0x00};
 8010206:	4a90      	ldr	r2, [pc, #576]	; (8010448 <flash_get_device_id+0x28c>)
 8010208:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801020c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010210:	6018      	str	r0, [r3, #0]
 8010212:	3304      	adds	r3, #4
 8010214:	8019      	strh	r1, [r3, #0]

			cmd = 0xFF;
			flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &id.name.manufacture_id[1], 1);
			flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &id.name.device_id[0], 1);
#else
            flash_drv->callback.spi_tx_rx(flash_drv->spi, buffer_tx, buffer_rx, 6);
 8010216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010218:	68dc      	ldr	r4, [r3, #12]
 801021a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801021c:	6818      	ldr	r0, [r3, #0]
 801021e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8010222:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010226:	2306      	movs	r3, #6
 8010228:	47a0      	blx	r4
            flash_drv->callback.spi_cs(flash_drv->spi, 1);
 801022a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801022c:	695a      	ldr	r2, [r3, #20]
 801022e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2101      	movs	r1, #1
 8010234:	4618      	mov	r0, r3
 8010236:	4790      	blx	r2
            id.name.manufacture_id[1] = buffer_rx[4];
 8010238:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801023c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
            id.name.device_id[0] = buffer_rx[4];
 8010240:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8010244:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

#endif
            DEBUG_INFO("device id: 0x0x%02, manufacture id: 0x%02X\r\n", id.name.device_id[0],
 8010248:	f001 fa2a 	bl	80116a0 <app_debug_get_ms>
 801024c:	4601      	mov	r1, r0
 801024e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010252:	461a      	mov	r2, r3
 8010254:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8010258:	9300      	str	r3, [sp, #0]
 801025a:	4613      	mov	r3, r2
 801025c:	4a7b      	ldr	r2, [pc, #492]	; (801044c <flash_get_device_id+0x290>)
 801025e:	487c      	ldr	r0, [pc, #496]	; (8010450 <flash_get_device_id+0x294>)
 8010260:	f001 fb9a 	bl	8011998 <app_debug_print_raw>
 8010264:	e093      	b.n	801038e <flash_get_device_id+0x1d2>
                       id.name.manufacture_id[1]);
        }
        else
        {
 8010266:	466b      	mov	r3, sp
 8010268:	461d      	mov	r5, r3
            uint8_t buffer_size = 1 + sizeof(app_spi_flash_device_id_t);
 801026a:	2305      	movs	r3, #5
 801026c:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            uint8_t buffer_tx[buffer_size];
 8010270:	f897 10ad 	ldrb.w	r1, [r7, #173]	; 0xad
 8010274:	460b      	mov	r3, r1
 8010276:	3b01      	subs	r3, #1
 8010278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801027c:	b2cb      	uxtb	r3, r1
 801027e:	2200      	movs	r2, #0
 8010280:	64bb      	str	r3, [r7, #72]	; 0x48
 8010282:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010284:	f04f 0200 	mov.w	r2, #0
 8010288:	f04f 0300 	mov.w	r3, #0
 801028c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801028e:	00c3      	lsls	r3, r0, #3
 8010290:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010292:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010296:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010298:	00c2      	lsls	r2, r0, #3
 801029a:	b2cb      	uxtb	r3, r1
 801029c:	2200      	movs	r2, #0
 801029e:	643b      	str	r3, [r7, #64]	; 0x40
 80102a0:	647a      	str	r2, [r7, #68]	; 0x44
 80102a2:	f04f 0200 	mov.w	r2, #0
 80102a6:	f04f 0300 	mov.w	r3, #0
 80102aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80102ac:	00c3      	lsls	r3, r0, #3
 80102ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80102b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80102b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80102b6:	00c2      	lsls	r2, r0, #3
 80102b8:	460b      	mov	r3, r1
 80102ba:	3307      	adds	r3, #7
 80102bc:	08db      	lsrs	r3, r3, #3
 80102be:	00db      	lsls	r3, r3, #3
 80102c0:	ebad 0d03 	sub.w	sp, sp, r3
 80102c4:	ab04      	add	r3, sp, #16
 80102c6:	3300      	adds	r3, #0
 80102c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            uint8_t buffer_rx[buffer_size];
 80102cc:	f897 10ad 	ldrb.w	r1, [r7, #173]	; 0xad
 80102d0:	460b      	mov	r3, r1
 80102d2:	3b01      	subs	r3, #1
 80102d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80102d8:	b2cb      	uxtb	r3, r1
 80102da:	2200      	movs	r2, #0
 80102dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80102de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80102e0:	f04f 0200 	mov.w	r2, #0
 80102e4:	f04f 0300 	mov.w	r3, #0
 80102e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80102ea:	00c3      	lsls	r3, r0, #3
 80102ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80102f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102f4:	00c2      	lsls	r2, r0, #3
 80102f6:	b2cb      	uxtb	r3, r1
 80102f8:	2200      	movs	r2, #0
 80102fa:	633b      	str	r3, [r7, #48]	; 0x30
 80102fc:	637a      	str	r2, [r7, #52]	; 0x34
 80102fe:	f04f 0200 	mov.w	r2, #0
 8010302:	f04f 0300 	mov.w	r3, #0
 8010306:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010308:	00c3      	lsls	r3, r0, #3
 801030a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801030c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010312:	00c2      	lsls	r2, r0, #3
 8010314:	460b      	mov	r3, r1
 8010316:	3307      	adds	r3, #7
 8010318:	08db      	lsrs	r3, r3, #3
 801031a:	00db      	lsls	r3, r3, #3
 801031c:	ebad 0d03 	sub.w	sp, sp, r3
 8010320:	ab04      	add	r3, sp, #16
 8010322:	3300      	adds	r3, #0
 8010324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            buffer_tx[0] = cmd;
 8010328:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801032c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010330:	7013      	strb	r3, [r2, #0]

            flash_drv->callback.spi_tx_rx(flash_drv->spi, buffer_tx, buffer_rx, buffer_size);
 8010332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010334:	68dc      	ldr	r4, [r3, #12]
 8010336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010338:	6818      	ldr	r0, [r3, #0]
 801033a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 801033e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010346:	47a0      	blx	r4
            memcpy(&id, &buffer_rx[1], sizeof(app_spi_flash_device_id_t));
 8010348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801034c:	3301      	adds	r3, #1
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	66fb      	str	r3, [r7, #108]	; 0x6c
            flash_drv->callback.spi_cs(flash_drv->spi, 1);
 8010352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010354:	695a      	ldr	r2, [r3, #20]
 8010356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2101      	movs	r1, #1
 801035c:	4618      	mov	r0, r3
 801035e:	4790      	blx	r2

            DEBUG_INFO("device id: 0x%02X%02X, manufacture id[0-1]: 0x%02X%02X\r\n", id.name.device_id[0],
 8010360:	f001 f99e 	bl	80116a0 <app_debug_get_ms>
 8010364:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010368:	461c      	mov	r4, r3
 801036a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801036e:	4619      	mov	r1, r3
 8010370:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8010374:	461a      	mov	r2, r3
 8010376:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 801037a:	9302      	str	r3, [sp, #8]
 801037c:	9201      	str	r2, [sp, #4]
 801037e:	9100      	str	r1, [sp, #0]
 8010380:	4623      	mov	r3, r4
 8010382:	4a32      	ldr	r2, [pc, #200]	; (801044c <flash_get_device_id+0x290>)
 8010384:	4601      	mov	r1, r0
 8010386:	4833      	ldr	r0, [pc, #204]	; (8010454 <flash_get_device_id+0x298>)
 8010388:	f001 fb06 	bl	8011998 <app_debug_print_raw>
 801038c:	46ad      	mov	sp, r5
                       id.name.device_id[1],
                       id.name.manufacture_id[0],
                       id.name.manufacture_id[1]);
        }

        if (cmd == READ_ID_CMD)     // read fram
 801038e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8010392:	2b90      	cmp	r3, #144	; 0x90
 8010394:	f040 8355 	bne.w	8010a42 <flash_get_device_id+0x886>
        {
            if (id.name.manufacture_id[1] == 0x01)
 8010398:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 801039c:	2b01      	cmp	r3, #1
 801039e:	d120      	bne.n	80103e2 <flash_get_device_id+0x226>
            {
                DEBUG_INFO("FRAM\r\n");
 80103a0:	f001 f97e 	bl	80116a0 <app_debug_get_ms>
 80103a4:	4603      	mov	r3, r0
 80103a6:	4a29      	ldr	r2, [pc, #164]	; (801044c <flash_get_device_id+0x290>)
 80103a8:	4619      	mov	r1, r3
 80103aa:	482b      	ldr	r0, [pc, #172]	; (8010458 <flash_get_device_id+0x29c>)
 80103ac:	f001 faf4 	bl	8011998 <app_debug_print_raw>
                if (id.name.device_id[0] == 0x16)
 80103b0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80103b4:	2b16      	cmp	r3, #22
 80103b6:	d107      	bne.n	80103c8 <flash_get_device_id+0x20c>
                {
                    flash_drv->info.device = APP_SPI_FLASH_FL164K;
 80103b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103ba:	2301      	movs	r3, #1
 80103bc:	7713      	strb	r3, [r2, #28]
                    val = true;
 80103be:	2301      	movs	r3, #1
 80103c0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80103c4:	f000 bd3f 	b.w	8010e46 <flash_get_device_id+0xc8a>
                }
                else if (id.name.device_id[0] == 0x17)
 80103c8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80103cc:	2b17      	cmp	r3, #23
 80103ce:	f040 853a 	bne.w	8010e46 <flash_get_device_id+0xc8a>
                {
                    flash_drv->info.device = APP_SPI_FLASH_FL127S;
 80103d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103d4:	2302      	movs	r3, #2
 80103d6:	7713      	strb	r3, [r2, #28]
                    val = true;
 80103d8:	2301      	movs	r3, #1
 80103da:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80103de:	f000 bd32 	b.w	8010e46 <flash_get_device_id+0xc8a>
                }
            }
            else if (id.name.manufacture_id[1] == 0xEF)
 80103e2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80103e6:	2bef      	cmp	r3, #239	; 0xef
 80103e8:	f040 80c2 	bne.w	8010570 <flash_get_device_id+0x3b4>
            {
                DEBUG_INFO("Windbond\r\n");
 80103ec:	f001 f958 	bl	80116a0 <app_debug_get_ms>
 80103f0:	4603      	mov	r3, r0
 80103f2:	4a16      	ldr	r2, [pc, #88]	; (801044c <flash_get_device_id+0x290>)
 80103f4:	4619      	mov	r1, r3
 80103f6:	4819      	ldr	r0, [pc, #100]	; (801045c <flash_get_device_id+0x2a0>)
 80103f8:	f001 face 	bl	8011998 <app_debug_print_raw>
                if (id.name.device_id[0] == 0x13)
 80103fc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010400:	2b13      	cmp	r3, #19
 8010402:	d10d      	bne.n	8010420 <flash_get_device_id+0x264>
                {
                    DEBUG_INFO("W25Q80DL\r\n");
 8010404:	f001 f94c 	bl	80116a0 <app_debug_get_ms>
 8010408:	4603      	mov	r3, r0
 801040a:	4a10      	ldr	r2, [pc, #64]	; (801044c <flash_get_device_id+0x290>)
 801040c:	4619      	mov	r1, r3
 801040e:	4814      	ldr	r0, [pc, #80]	; (8010460 <flash_get_device_id+0x2a4>)
 8010410:	f001 fac2 	bl	8011998 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q80D;
 8010414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010416:	2306      	movs	r3, #6
 8010418:	7713      	strb	r3, [r2, #28]
                    val = true;
 801041a:	2301      	movs	r3, #1
 801041c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                }
                if (id.name.device_id[0] == 0x15)
 8010420:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010424:	2b15      	cmp	r3, #21
 8010426:	d11f      	bne.n	8010468 <flash_get_device_id+0x2ac>
                {
                    DEBUG_INFO("W25Q32FV\r\n");
 8010428:	f001 f93a 	bl	80116a0 <app_debug_get_ms>
 801042c:	4603      	mov	r3, r0
 801042e:	4a07      	ldr	r2, [pc, #28]	; (801044c <flash_get_device_id+0x290>)
 8010430:	4619      	mov	r1, r3
 8010432:	480c      	ldr	r0, [pc, #48]	; (8010464 <flash_get_device_id+0x2a8>)
 8010434:	f001 fab0 	bl	8011998 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q32;
 8010438:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801043a:	2308      	movs	r3, #8
 801043c:	7713      	strb	r3, [r2, #28]
                    val = true;
 801043e:	2301      	movs	r3, #1
 8010440:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010444:	e022      	b.n	801048c <flash_get_device_id+0x2d0>
 8010446:	bf00      	nop
 8010448:	0801af98 	.word	0x0801af98
 801044c:	0801aa0c 	.word	0x0801aa0c
 8010450:	0801abcc 	.word	0x0801abcc
 8010454:	0801ac10 	.word	0x0801ac10
 8010458:	0801ac60 	.word	0x0801ac60
 801045c:	0801ac80 	.word	0x0801ac80
 8010460:	0801aca4 	.word	0x0801aca4
 8010464:	0801acc8 	.word	0x0801acc8
                }
                else if (id.name.device_id[0] == 0x17)
 8010468:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 801046c:	2b17      	cmp	r3, #23
 801046e:	d10d      	bne.n	801048c <flash_get_device_id+0x2d0>
                {
                    DEBUG_INFO("W25Q128\r\n");
 8010470:	f001 f916 	bl	80116a0 <app_debug_get_ms>
 8010474:	4603      	mov	r3, r0
 8010476:	4a81      	ldr	r2, [pc, #516]	; (801067c <flash_get_device_id+0x4c0>)
 8010478:	4619      	mov	r1, r3
 801047a:	4881      	ldr	r0, [pc, #516]	; (8010680 <flash_get_device_id+0x4c4>)
 801047c:	f001 fa8c 	bl	8011998 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q128;
 8010480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010482:	2307      	movs	r3, #7
 8010484:	7713      	strb	r3, [r2, #28]
                    val = true;
 8010486:	2301      	movs	r3, #1
 8010488:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                }
                if (id.name.device_id[0] == 0x18)
 801048c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010490:	2b18      	cmp	r3, #24
 8010492:	f040 84d8 	bne.w	8010e46 <flash_get_device_id+0xc8a>
                {
                    DEBUG_INFO("256JV\r\n");
 8010496:	f001 f903 	bl	80116a0 <app_debug_get_ms>
 801049a:	4603      	mov	r3, r0
 801049c:	4a77      	ldr	r2, [pc, #476]	; (801067c <flash_get_device_id+0x4c0>)
 801049e:	4619      	mov	r1, r3
 80104a0:	4878      	ldr	r0, [pc, #480]	; (8010684 <flash_get_device_id+0x4c8>)
 80104a2:	f001 fa79 	bl	8011998 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q256JV;
 80104a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104a8:	2305      	movs	r3, #5
 80104aa:	7713      	strb	r3, [r2, #28]
                    // Enter mode : 4 bytes address
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 80104ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104ae:	695a      	ldr	r2, [r3, #20]
 80104b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	2100      	movs	r1, #0
 80104b6:	4618      	mov	r0, r3
 80104b8:	4790      	blx	r2
                    cmd = EN4B_MODE_CMD;
 80104ba:	23b7      	movs	r3, #183	; 0xb7
 80104bc:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 80104c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104c2:	691c      	ldr	r4, [r3, #16]
 80104c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80104cc:	4619      	mov	r1, r3
 80104ce:	4610      	mov	r0, r2
 80104d0:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 80104d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104d4:	695a      	ldr	r2, [r3, #20]
 80104d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2101      	movs	r1, #1
 80104dc:	4618      	mov	r0, r3
 80104de:	4790      	blx	r2

                    flash_drv->callback.delay_ms(flash_drv, 10);
 80104e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104e2:	699b      	ldr	r3, [r3, #24]
 80104e4:	210a      	movs	r1, #10
 80104e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80104e8:	4798      	blx	r3
                    // Read status register 3, bit ADS  (S16) - bit 0
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 80104ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104ec:	695a      	ldr	r2, [r3, #20]
 80104ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	2100      	movs	r1, #0
 80104f4:	4618      	mov	r0, r3
 80104f6:	4790      	blx	r2
                    cmd = RDSR3_CMD;
 80104f8:	2315      	movs	r3, #21
 80104fa:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 80104fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010500:	691c      	ldr	r4, [r3, #16]
 8010502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801050a:	4619      	mov	r1, r3
 801050c:	4610      	mov	r0, r2
 801050e:	47a0      	blx	r4

                    cmd = SPI_DUMMY;
 8010510:	2300      	movs	r3, #0
 8010512:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &reg_status, 1);
 8010516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010518:	68dc      	ldr	r4, [r3, #12]
 801051a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801051c:	6818      	ldr	r0, [r3, #0]
 801051e:	f107 0273 	add.w	r2, r7, #115	; 0x73
 8010522:	f107 0172 	add.w	r1, r7, #114	; 0x72
 8010526:	2301      	movs	r3, #1
 8010528:	47a0      	blx	r4

                    DEBUG_INFO("status register: %02X\r\n", reg_status);
 801052a:	f001 f8b9 	bl	80116a0 <app_debug_get_ms>
 801052e:	4601      	mov	r1, r0
 8010530:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010534:	4a51      	ldr	r2, [pc, #324]	; (801067c <flash_get_device_id+0x4c0>)
 8010536:	4854      	ldr	r0, [pc, #336]	; (8010688 <flash_get_device_id+0x4cc>)
 8010538:	f001 fa2e 	bl	8011998 <app_debug_print_raw>
                    if (reg_status & 0x01)
 801053c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010540:	f003 0301 	and.w	r3, r3, #1
 8010544:	2b00      	cmp	r3, #0
 8010546:	d007      	beq.n	8010558 <flash_get_device_id+0x39c>
                    {
                        DEBUG_INFO("Address mode : 32 bit\r\n");
 8010548:	f001 f8aa 	bl	80116a0 <app_debug_get_ms>
 801054c:	4603      	mov	r3, r0
 801054e:	4a4b      	ldr	r2, [pc, #300]	; (801067c <flash_get_device_id+0x4c0>)
 8010550:	4619      	mov	r1, r3
 8010552:	484e      	ldr	r0, [pc, #312]	; (801068c <flash_get_device_id+0x4d0>)
 8010554:	f001 fa20 	bl	8011998 <app_debug_print_raw>
                    }
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 8010558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801055a:	695a      	ldr	r2, [r3, #20]
 801055c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2101      	movs	r1, #1
 8010562:	4618      	mov	r0, r3
 8010564:	4790      	blx	r2
                    val = true;
 8010566:	2301      	movs	r3, #1
 8010568:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 801056c:	f000 bc6b 	b.w	8010e46 <flash_get_device_id+0xc8a>
                }
            }
            else if (id.name.manufacture_id[1] == 0xC8) /* APP_SPI_FLASH_GD256 - GigaDevice 256Mb */
 8010570:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8010574:	2bc8      	cmp	r3, #200	; 0xc8
 8010576:	f040 808f 	bne.w	8010698 <flash_get_device_id+0x4dc>
            {
                DEBUG_INFO("Giga device\r\n");
 801057a:	f001 f891 	bl	80116a0 <app_debug_get_ms>
 801057e:	4603      	mov	r3, r0
 8010580:	4a3e      	ldr	r2, [pc, #248]	; (801067c <flash_get_device_id+0x4c0>)
 8010582:	4619      	mov	r1, r3
 8010584:	4842      	ldr	r0, [pc, #264]	; (8010690 <flash_get_device_id+0x4d4>)
 8010586:	f001 fa07 	bl	8011998 <app_debug_print_raw>
                if (id.name.device_id[0] == 0x18)
 801058a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 801058e:	2b18      	cmp	r3, #24
 8010590:	f040 8459 	bne.w	8010e46 <flash_get_device_id+0xc8a>
                {
                    flash_drv->info.device = APP_SPI_FLASH_GD256;
 8010594:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010596:	2304      	movs	r3, #4
 8010598:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("GD256\r\n");
 801059a:	f001 f881 	bl	80116a0 <app_debug_get_ms>
 801059e:	4603      	mov	r3, r0
 80105a0:	4a36      	ldr	r2, [pc, #216]	; (801067c <flash_get_device_id+0x4c0>)
 80105a2:	4619      	mov	r1, r3
 80105a4:	483b      	ldr	r0, [pc, #236]	; (8010694 <flash_get_device_id+0x4d8>)
 80105a6:	f001 f9f7 	bl	8011998 <app_debug_print_raw>

                    // Enter mode : 4 bytes address
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 80105aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105ac:	695a      	ldr	r2, [r3, #20]
 80105ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2100      	movs	r1, #0
 80105b4:	4618      	mov	r0, r3
 80105b6:	4790      	blx	r2
                    cmd = EN4B_MODE_CMD;
 80105b8:	23b7      	movs	r3, #183	; 0xb7
 80105ba:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 80105be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105c0:	691c      	ldr	r4, [r3, #16]
 80105c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80105ca:	4619      	mov	r1, r3
 80105cc:	4610      	mov	r0, r2
 80105ce:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 80105d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105d2:	695a      	ldr	r2, [r3, #20]
 80105d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2101      	movs	r1, #1
 80105da:	4618      	mov	r0, r3
 80105dc:	4790      	blx	r2

                    flash_drv->callback.delay_ms(flash_drv, 10);
 80105de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105e0:	699b      	ldr	r3, [r3, #24]
 80105e2:	210a      	movs	r1, #10
 80105e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80105e6:	4798      	blx	r3
                    // Read register status 2, bit ADS - 5
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 80105e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105ea:	695a      	ldr	r2, [r3, #20]
 80105ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2100      	movs	r1, #0
 80105f2:	4618      	mov	r0, r3
 80105f4:	4790      	blx	r2
                    cmd = RDSR2_CMD;
 80105f6:	2335      	movs	r3, #53	; 0x35
 80105f8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 80105fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105fe:	691c      	ldr	r4, [r3, #16]
 8010600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8010608:	4619      	mov	r1, r3
 801060a:	4610      	mov	r0, r2
 801060c:	47a0      	blx	r4

                    cmd = SPI_DUMMY;
 801060e:	2300      	movs	r3, #0
 8010610:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &reg_status, 1);
 8010614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010616:	68dc      	ldr	r4, [r3, #12]
 8010618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801061a:	6818      	ldr	r0, [r3, #0]
 801061c:	f107 0273 	add.w	r2, r7, #115	; 0x73
 8010620:	f107 0172 	add.w	r1, r7, #114	; 0x72
 8010624:	2301      	movs	r3, #1
 8010626:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 8010628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801062a:	695a      	ldr	r2, [r3, #20]
 801062c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2101      	movs	r1, #1
 8010632:	4618      	mov	r0, r3
 8010634:	4790      	blx	r2

                    DEBUG_INFO("status register: %02X\r\n", reg_status);
 8010636:	f001 f833 	bl	80116a0 <app_debug_get_ms>
 801063a:	4601      	mov	r1, r0
 801063c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010640:	4a0e      	ldr	r2, [pc, #56]	; (801067c <flash_get_device_id+0x4c0>)
 8010642:	4811      	ldr	r0, [pc, #68]	; (8010688 <flash_get_device_id+0x4cc>)
 8010644:	f001 f9a8 	bl	8011998 <app_debug_print_raw>
                    if (reg_status & 0x20)
 8010648:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801064c:	f003 0320 	and.w	r3, r3, #32
 8010650:	2b00      	cmp	r3, #0
 8010652:	d00b      	beq.n	801066c <flash_get_device_id+0x4b0>
                    {
                        DEBUG_INFO("Address mode : 32 bit\r\n");
 8010654:	f001 f824 	bl	80116a0 <app_debug_get_ms>
 8010658:	4603      	mov	r3, r0
 801065a:	4a08      	ldr	r2, [pc, #32]	; (801067c <flash_get_device_id+0x4c0>)
 801065c:	4619      	mov	r1, r3
 801065e:	480b      	ldr	r0, [pc, #44]	; (801068c <flash_get_device_id+0x4d0>)
 8010660:	f001 f99a 	bl	8011998 <app_debug_print_raw>
                    else
                    {
                        flash_drv->callback.delay_ms(flash_drv, 500);
                        continue;
                    }
                    val = true;
 8010664:	2301      	movs	r3, #1
 8010666:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 801066a:	e3ec      	b.n	8010e46 <flash_get_device_id+0xc8a>
                        flash_drv->callback.delay_ms(flash_drv, 500);
 801066c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801066e:	699b      	ldr	r3, [r3, #24]
 8010670:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8010674:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010676:	4798      	blx	r3
                        continue;
 8010678:	e3e9      	b.n	8010e4e <flash_get_device_id+0xc92>
 801067a:	bf00      	nop
 801067c:	0801aa0c 	.word	0x0801aa0c
 8010680:	0801acec 	.word	0x0801acec
 8010684:	0801ad10 	.word	0x0801ad10
 8010688:	0801ad30 	.word	0x0801ad30
 801068c:	0801ad60 	.word	0x0801ad60
 8010690:	0801ad90 	.word	0x0801ad90
 8010694:	0801adb8 	.word	0x0801adb8
                }
            }
            else if (id.name.manufacture_id[1] == 0x89) /* APP_SPI_FLASH_AT25SF128 */
 8010698:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 801069c:	2b89      	cmp	r3, #137	; 0x89
 801069e:	d17f      	bne.n	80107a0 <flash_get_device_id+0x5e4>
            {
                DEBUG_INFO("Adesto Technologies\r\n");
 80106a0:	f000 fffe 	bl	80116a0 <app_debug_get_ms>
 80106a4:	4603      	mov	r3, r0
 80106a6:	4aa8      	ldr	r2, [pc, #672]	; (8010948 <flash_get_device_id+0x78c>)
 80106a8:	4619      	mov	r1, r3
 80106aa:	48a8      	ldr	r0, [pc, #672]	; (801094c <flash_get_device_id+0x790>)
 80106ac:	f001 f974 	bl	8011998 <app_debug_print_raw>
                if (id.name.device_id[0] == 0x1F)
 80106b0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80106b4:	2b1f      	cmp	r3, #31
 80106b6:	f040 83c6 	bne.w	8010e46 <flash_get_device_id+0xc8a>
                {
                    flash_drv->info.device = APP_SPI_FLASH_AT25SF128;
 80106ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106bc:	230b      	movs	r3, #11
 80106be:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("AT25SF128A\r\n");
 80106c0:	f000 ffee 	bl	80116a0 <app_debug_get_ms>
 80106c4:	4603      	mov	r3, r0
 80106c6:	4aa0      	ldr	r2, [pc, #640]	; (8010948 <flash_get_device_id+0x78c>)
 80106c8:	4619      	mov	r1, r3
 80106ca:	48a1      	ldr	r0, [pc, #644]	; (8010950 <flash_get_device_id+0x794>)
 80106cc:	f001 f964 	bl	8011998 <app_debug_print_raw>

                    // Enter mode : 4 bytes address
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 80106d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106d2:	695a      	ldr	r2, [r3, #20]
 80106d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2100      	movs	r1, #0
 80106da:	4618      	mov	r0, r3
 80106dc:	4790      	blx	r2
                    cmd = EN4B_MODE_CMD;
 80106de:	23b7      	movs	r3, #183	; 0xb7
 80106e0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 80106e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106e6:	691c      	ldr	r4, [r3, #16]
 80106e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80106f0:	4619      	mov	r1, r3
 80106f2:	4610      	mov	r0, r2
 80106f4:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 80106f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106f8:	695a      	ldr	r2, [r3, #20]
 80106fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2101      	movs	r1, #1
 8010700:	4618      	mov	r0, r3
 8010702:	4790      	blx	r2

                    flash_drv->callback.delay_ms(flash_drv, 10);
 8010704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010706:	699b      	ldr	r3, [r3, #24]
 8010708:	210a      	movs	r1, #10
 801070a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801070c:	4798      	blx	r3
                    // Read register status 2, bit ADS - 5
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 801070e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010710:	695a      	ldr	r2, [r3, #20]
 8010712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2100      	movs	r1, #0
 8010718:	4618      	mov	r0, r3
 801071a:	4790      	blx	r2
                    cmd = RDSR2_CMD;
 801071c:	2335      	movs	r3, #53	; 0x35
 801071e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 8010722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010724:	691c      	ldr	r4, [r3, #16]
 8010726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801072e:	4619      	mov	r1, r3
 8010730:	4610      	mov	r0, r2
 8010732:	47a0      	blx	r4

                    cmd = SPI_DUMMY;
 8010734:	2300      	movs	r3, #0
 8010736:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &reg_status, 1);
 801073a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801073c:	68dc      	ldr	r4, [r3, #12]
 801073e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010740:	6818      	ldr	r0, [r3, #0]
 8010742:	f107 0273 	add.w	r2, r7, #115	; 0x73
 8010746:	f107 0172 	add.w	r1, r7, #114	; 0x72
 801074a:	2301      	movs	r3, #1
 801074c:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 801074e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010750:	695a      	ldr	r2, [r3, #20]
 8010752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	2101      	movs	r1, #1
 8010758:	4618      	mov	r0, r3
 801075a:	4790      	blx	r2

                    DEBUG_INFO("status register: %02X\r\n", reg_status);
 801075c:	f000 ffa0 	bl	80116a0 <app_debug_get_ms>
 8010760:	4601      	mov	r1, r0
 8010762:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010766:	4a78      	ldr	r2, [pc, #480]	; (8010948 <flash_get_device_id+0x78c>)
 8010768:	487a      	ldr	r0, [pc, #488]	; (8010954 <flash_get_device_id+0x798>)
 801076a:	f001 f915 	bl	8011998 <app_debug_print_raw>
                    if (reg_status & 0x20)
 801076e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010772:	f003 0320 	and.w	r3, r3, #32
 8010776:	2b00      	cmp	r3, #0
 8010778:	d00b      	beq.n	8010792 <flash_get_device_id+0x5d6>
                    {
                        DEBUG_INFO("Address mode : 32 bit\r\n");
 801077a:	f000 ff91 	bl	80116a0 <app_debug_get_ms>
 801077e:	4603      	mov	r3, r0
 8010780:	4a71      	ldr	r2, [pc, #452]	; (8010948 <flash_get_device_id+0x78c>)
 8010782:	4619      	mov	r1, r3
 8010784:	4874      	ldr	r0, [pc, #464]	; (8010958 <flash_get_device_id+0x79c>)
 8010786:	f001 f907 	bl	8011998 <app_debug_print_raw>
                    else
                    {
                        flash_drv->callback.delay_ms(flash_drv, 500);
                        continue;
                    }
                    val = true;
 801078a:	2301      	movs	r3, #1
 801078c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010790:	e359      	b.n	8010e46 <flash_get_device_id+0xc8a>
                        flash_drv->callback.delay_ms(flash_drv, 500);
 8010792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010794:	699b      	ldr	r3, [r3, #24]
 8010796:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801079a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801079c:	4798      	blx	r3
                        continue;
 801079e:	e356      	b.n	8010e4e <flash_get_device_id+0xc92>
                }
            }
            else if (id.name.manufacture_id[0] == 0x7F && id.name.manufacture_id[1] == 0x7F) /* APP_SPI_FLASH_AT25SF128 */
 80107a0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80107a4:	2b7f      	cmp	r3, #127	; 0x7f
 80107a6:	f040 8140 	bne.w	8010a2a <flash_get_device_id+0x86e>
 80107aa:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80107ae:	2b7f      	cmp	r3, #127	; 0x7f
 80107b0:	f040 813b 	bne.w	8010a2a <flash_get_device_id+0x86e>
            {
 80107b4:	466b      	mov	r3, sp
 80107b6:	461d      	mov	r5, r3
                DEBUG_INFO("Cypress\r\n");
 80107b8:	f000 ff72 	bl	80116a0 <app_debug_get_ms>
 80107bc:	4603      	mov	r3, r0
 80107be:	4a62      	ldr	r2, [pc, #392]	; (8010948 <flash_get_device_id+0x78c>)
 80107c0:	4619      	mov	r1, r3
 80107c2:	4866      	ldr	r0, [pc, #408]	; (801095c <flash_get_device_id+0x7a0>)
 80107c4:	f001 f8e8 	bl	8011998 <app_debug_print_raw>
                // 6 byte MSB = 7F7F7F7F7F7F
                // Byte 7 done care
                // Byte 89 = 2100 =>> FM25V01
                // Byte 89 = 2008 =>> FM25V02A

                uint8_t size = 10;
 80107c8:	230a      	movs	r3, #10
 80107ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                uint8_t cypess_manufacture_data_tx[size];
 80107ce:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 80107d2:	460b      	mov	r3, r1
 80107d4:	3b01      	subs	r3, #1
 80107d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80107da:	b2cb      	uxtb	r3, r1
 80107dc:	2200      	movs	r2, #0
 80107de:	62bb      	str	r3, [r7, #40]	; 0x28
 80107e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80107e2:	f04f 0200 	mov.w	r2, #0
 80107e6:	f04f 0300 	mov.w	r3, #0
 80107ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107ec:	00c3      	lsls	r3, r0, #3
 80107ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80107f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107f6:	00c2      	lsls	r2, r0, #3
 80107f8:	b2cb      	uxtb	r3, r1
 80107fa:	2200      	movs	r2, #0
 80107fc:	623b      	str	r3, [r7, #32]
 80107fe:	627a      	str	r2, [r7, #36]	; 0x24
 8010800:	f04f 0200 	mov.w	r2, #0
 8010804:	f04f 0300 	mov.w	r3, #0
 8010808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801080a:	00c3      	lsls	r3, r0, #3
 801080c:	6a38      	ldr	r0, [r7, #32]
 801080e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010812:	6a38      	ldr	r0, [r7, #32]
 8010814:	00c2      	lsls	r2, r0, #3
 8010816:	460b      	mov	r3, r1
 8010818:	3307      	adds	r3, #7
 801081a:	08db      	lsrs	r3, r3, #3
 801081c:	00db      	lsls	r3, r3, #3
 801081e:	ebad 0d03 	sub.w	sp, sp, r3
 8010822:	ab04      	add	r3, sp, #16
 8010824:	3300      	adds	r3, #0
 8010826:	67fb      	str	r3, [r7, #124]	; 0x7c
                uint8_t cypess_manufacture_data_rx[size];
 8010828:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 801082c:	460b      	mov	r3, r1
 801082e:	3b01      	subs	r3, #1
 8010830:	67bb      	str	r3, [r7, #120]	; 0x78
 8010832:	b2cb      	uxtb	r3, r1
 8010834:	2200      	movs	r2, #0
 8010836:	61bb      	str	r3, [r7, #24]
 8010838:	61fa      	str	r2, [r7, #28]
 801083a:	f04f 0200 	mov.w	r2, #0
 801083e:	f04f 0300 	mov.w	r3, #0
 8010842:	69f8      	ldr	r0, [r7, #28]
 8010844:	00c3      	lsls	r3, r0, #3
 8010846:	69b8      	ldr	r0, [r7, #24]
 8010848:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801084c:	69b8      	ldr	r0, [r7, #24]
 801084e:	00c2      	lsls	r2, r0, #3
 8010850:	b2cb      	uxtb	r3, r1
 8010852:	2200      	movs	r2, #0
 8010854:	4698      	mov	r8, r3
 8010856:	4691      	mov	r9, r2
 8010858:	f04f 0200 	mov.w	r2, #0
 801085c:	f04f 0300 	mov.w	r3, #0
 8010860:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010864:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010868:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801086c:	460b      	mov	r3, r1
 801086e:	3307      	adds	r3, #7
 8010870:	08db      	lsrs	r3, r3, #3
 8010872:	00db      	lsls	r3, r3, #3
 8010874:	ebad 0d03 	sub.w	sp, sp, r3
 8010878:	ab04      	add	r3, sp, #16
 801087a:	3300      	adds	r3, #0
 801087c:	677b      	str	r3, [r7, #116]	; 0x74
                cypess_manufacture_data_tx[0] = RDID_CMD;
 801087e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010880:	239f      	movs	r3, #159	; 0x9f
 8010882:	7013      	strb	r3, [r2, #0]

                flash_drv->callback.spi_cs(flash_drv->spi, 0);
 8010884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010886:	695a      	ldr	r2, [r3, #20]
 8010888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	2100      	movs	r1, #0
 801088e:	4618      	mov	r0, r3
 8010890:	4790      	blx	r2
                flash_drv->callback.spi_tx_rx(flash_drv->spi, cypess_manufacture_data_tx, cypess_manufacture_data_rx, size);
 8010892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010894:	68dc      	ldr	r4, [r3, #12]
 8010896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010898:	6818      	ldr	r0, [r3, #0]
 801089a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801089e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80108a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80108a2:	47a0      	blx	r4
                flash_drv->callback.spi_cs(flash_drv->spi, 1);
 80108a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108a6:	695a      	ldr	r2, [r3, #20]
 80108a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2101      	movs	r1, #1
 80108ae:	4618      	mov	r0, r3
 80108b0:	4790      	blx	r2
                for (uint32_t i = 1; i < size; i++)
 80108b2:	2301      	movs	r3, #1
 80108b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80108b8:	e00d      	b.n	80108d6 <flash_get_device_id+0x71a>
                {
                    DEBUG_RAW("%02X ", cypess_manufacture_data_rx[i]);
 80108ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80108bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80108c0:	4413      	add	r3, r2
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	4619      	mov	r1, r3
 80108c6:	4826      	ldr	r0, [pc, #152]	; (8010960 <flash_get_device_id+0x7a4>)
 80108c8:	f001 f866 	bl	8011998 <app_debug_print_raw>
                for (uint32_t i = 1; i < size; i++)
 80108cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80108d0:	3301      	adds	r3, #1
 80108d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80108d6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80108da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80108de:	4293      	cmp	r3, r2
 80108e0:	d3eb      	bcc.n	80108ba <flash_get_device_id+0x6fe>
                }
                DEBUG_RAW("\r\n");
 80108e2:	4820      	ldr	r0, [pc, #128]	; (8010964 <flash_get_device_id+0x7a8>)
 80108e4:	f001 f858 	bl	8011998 <app_debug_print_raw>

                if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x22 && cypess_manufacture_data_rx[9] == 0x08)
 80108e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108ea:	785b      	ldrb	r3, [r3, #1]
 80108ec:	2b7f      	cmp	r3, #127	; 0x7f
 80108ee:	d13d      	bne.n	801096c <flash_get_device_id+0x7b0>
 80108f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108f2:	789b      	ldrb	r3, [r3, #2]
 80108f4:	2b7f      	cmp	r3, #127	; 0x7f
 80108f6:	d139      	bne.n	801096c <flash_get_device_id+0x7b0>
 80108f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108fa:	78db      	ldrb	r3, [r3, #3]
 80108fc:	2b7f      	cmp	r3, #127	; 0x7f
 80108fe:	d135      	bne.n	801096c <flash_get_device_id+0x7b0>
 8010900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010902:	791b      	ldrb	r3, [r3, #4]
 8010904:	2b7f      	cmp	r3, #127	; 0x7f
 8010906:	d131      	bne.n	801096c <flash_get_device_id+0x7b0>
 8010908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801090a:	795b      	ldrb	r3, [r3, #5]
 801090c:	2b7f      	cmp	r3, #127	; 0x7f
 801090e:	d12d      	bne.n	801096c <flash_get_device_id+0x7b0>
 8010910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010912:	799b      	ldrb	r3, [r3, #6]
 8010914:	2b7f      	cmp	r3, #127	; 0x7f
 8010916:	d129      	bne.n	801096c <flash_get_device_id+0x7b0>
 8010918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801091a:	7a1b      	ldrb	r3, [r3, #8]
 801091c:	2b22      	cmp	r3, #34	; 0x22
 801091e:	d125      	bne.n	801096c <flash_get_device_id+0x7b0>
 8010920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010922:	7a5b      	ldrb	r3, [r3, #9]
 8010924:	2b08      	cmp	r3, #8
 8010926:	d121      	bne.n	801096c <flash_get_device_id+0x7b0>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V02A;
 8010928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801092a:	230c      	movs	r3, #12
 801092c:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V02A\r\n");
 801092e:	f000 feb7 	bl	80116a0 <app_debug_get_ms>
 8010932:	4603      	mov	r3, r0
 8010934:	4a04      	ldr	r2, [pc, #16]	; (8010948 <flash_get_device_id+0x78c>)
 8010936:	4619      	mov	r1, r3
 8010938:	480b      	ldr	r0, [pc, #44]	; (8010968 <flash_get_device_id+0x7ac>)
 801093a:	f001 f82d 	bl	8011998 <app_debug_print_raw>
                    val = true;
 801093e:	2301      	movs	r3, #1
 8010940:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010944:	e06f      	b.n	8010a26 <flash_get_device_id+0x86a>
 8010946:	bf00      	nop
 8010948:	0801aa0c 	.word	0x0801aa0c
 801094c:	0801add8 	.word	0x0801add8
 8010950:	0801ae08 	.word	0x0801ae08
 8010954:	0801ad30 	.word	0x0801ad30
 8010958:	0801ad60 	.word	0x0801ad60
 801095c:	0801ae2c 	.word	0x0801ae2c
 8010960:	0801ae50 	.word	0x0801ae50
 8010964:	0801aa08 	.word	0x0801aa08
 8010968:	0801ae58 	.word	0x0801ae58
                }
                else if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x21 && cypess_manufacture_data_rx[9] == 0x00)
 801096c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801096e:	785b      	ldrb	r3, [r3, #1]
 8010970:	2b7f      	cmp	r3, #127	; 0x7f
 8010972:	d12a      	bne.n	80109ca <flash_get_device_id+0x80e>
 8010974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010976:	789b      	ldrb	r3, [r3, #2]
 8010978:	2b7f      	cmp	r3, #127	; 0x7f
 801097a:	d126      	bne.n	80109ca <flash_get_device_id+0x80e>
 801097c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801097e:	78db      	ldrb	r3, [r3, #3]
 8010980:	2b7f      	cmp	r3, #127	; 0x7f
 8010982:	d122      	bne.n	80109ca <flash_get_device_id+0x80e>
 8010984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010986:	791b      	ldrb	r3, [r3, #4]
 8010988:	2b7f      	cmp	r3, #127	; 0x7f
 801098a:	d11e      	bne.n	80109ca <flash_get_device_id+0x80e>
 801098c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801098e:	795b      	ldrb	r3, [r3, #5]
 8010990:	2b7f      	cmp	r3, #127	; 0x7f
 8010992:	d11a      	bne.n	80109ca <flash_get_device_id+0x80e>
 8010994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010996:	799b      	ldrb	r3, [r3, #6]
 8010998:	2b7f      	cmp	r3, #127	; 0x7f
 801099a:	d116      	bne.n	80109ca <flash_get_device_id+0x80e>
 801099c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801099e:	7a1b      	ldrb	r3, [r3, #8]
 80109a0:	2b21      	cmp	r3, #33	; 0x21
 80109a2:	d112      	bne.n	80109ca <flash_get_device_id+0x80e>
 80109a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109a6:	7a5b      	ldrb	r3, [r3, #9]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d10e      	bne.n	80109ca <flash_get_device_id+0x80e>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V01;
 80109ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109ae:	230e      	movs	r3, #14
 80109b0:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V01\r\n");
 80109b2:	f000 fe75 	bl	80116a0 <app_debug_get_ms>
 80109b6:	4603      	mov	r3, r0
 80109b8:	4ab7      	ldr	r2, [pc, #732]	; (8010c98 <flash_get_device_id+0xadc>)
 80109ba:	4619      	mov	r1, r3
 80109bc:	48b7      	ldr	r0, [pc, #732]	; (8010c9c <flash_get_device_id+0xae0>)
 80109be:	f000 ffeb 	bl	8011998 <app_debug_print_raw>
                    val = true;
 80109c2:	2301      	movs	r3, #1
 80109c4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80109c8:	e02d      	b.n	8010a26 <flash_get_device_id+0x86a>
                }
                else if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x24 && cypess_manufacture_data_rx[9] == 0x00)
 80109ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109cc:	785b      	ldrb	r3, [r3, #1]
 80109ce:	2b7f      	cmp	r3, #127	; 0x7f
 80109d0:	d129      	bne.n	8010a26 <flash_get_device_id+0x86a>
 80109d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109d4:	789b      	ldrb	r3, [r3, #2]
 80109d6:	2b7f      	cmp	r3, #127	; 0x7f
 80109d8:	d125      	bne.n	8010a26 <flash_get_device_id+0x86a>
 80109da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109dc:	78db      	ldrb	r3, [r3, #3]
 80109de:	2b7f      	cmp	r3, #127	; 0x7f
 80109e0:	d121      	bne.n	8010a26 <flash_get_device_id+0x86a>
 80109e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109e4:	791b      	ldrb	r3, [r3, #4]
 80109e6:	2b7f      	cmp	r3, #127	; 0x7f
 80109e8:	d11d      	bne.n	8010a26 <flash_get_device_id+0x86a>
 80109ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109ec:	795b      	ldrb	r3, [r3, #5]
 80109ee:	2b7f      	cmp	r3, #127	; 0x7f
 80109f0:	d119      	bne.n	8010a26 <flash_get_device_id+0x86a>
 80109f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109f4:	799b      	ldrb	r3, [r3, #6]
 80109f6:	2b7f      	cmp	r3, #127	; 0x7f
 80109f8:	d115      	bne.n	8010a26 <flash_get_device_id+0x86a>
 80109fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109fc:	7a1b      	ldrb	r3, [r3, #8]
 80109fe:	2b24      	cmp	r3, #36	; 0x24
 8010a00:	d111      	bne.n	8010a26 <flash_get_device_id+0x86a>
 8010a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a04:	7a5b      	ldrb	r3, [r3, #9]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10d      	bne.n	8010a26 <flash_get_device_id+0x86a>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V10;
 8010a0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a0c:	230f      	movs	r3, #15
 8010a0e:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V10\r\n");
 8010a10:	f000 fe46 	bl	80116a0 <app_debug_get_ms>
 8010a14:	4603      	mov	r3, r0
 8010a16:	4aa0      	ldr	r2, [pc, #640]	; (8010c98 <flash_get_device_id+0xadc>)
 8010a18:	4619      	mov	r1, r3
 8010a1a:	48a1      	ldr	r0, [pc, #644]	; (8010ca0 <flash_get_device_id+0xae4>)
 8010a1c:	f000 ffbc 	bl	8011998 <app_debug_print_raw>
                    val = true;
 8010a20:	2301      	movs	r3, #1
 8010a22:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010a26:	46ad      	mov	sp, r5
            {
 8010a28:	e20d      	b.n	8010e46 <flash_get_device_id+0xc8a>
                }
            }
            else
            {
                DEBUG_ERROR("Unknown device\r\n");
 8010a2a:	f000 fe39 	bl	80116a0 <app_debug_get_ms>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	4a99      	ldr	r2, [pc, #612]	; (8010c98 <flash_get_device_id+0xadc>)
 8010a32:	4619      	mov	r1, r3
 8010a34:	489b      	ldr	r0, [pc, #620]	; (8010ca4 <flash_get_device_id+0xae8>)
 8010a36:	f000 ffaf 	bl	8011998 <app_debug_print_raw>
                val = false;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010a40:	e201      	b.n	8010e46 <flash_get_device_id+0xc8a>
            }
        }
        else if (cmd == RDID_CMD)
 8010a42:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8010a46:	2b9f      	cmp	r3, #159	; 0x9f
 8010a48:	f040 81fd 	bne.w	8010e46 <flash_get_device_id+0xc8a>
        {
//            if (id.name.manufacture_id[1] == 0xEF)
            if (id.name.manufacture_id[0] == 0xEF)
 8010a4c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8010a50:	2bef      	cmp	r3, #239	; 0xef
 8010a52:	d137      	bne.n	8010ac4 <flash_get_device_id+0x908>
            {
                DEBUG_INFO("Winbond\r\n");
 8010a54:	f000 fe24 	bl	80116a0 <app_debug_get_ms>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	4a8f      	ldr	r2, [pc, #572]	; (8010c98 <flash_get_device_id+0xadc>)
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	4892      	ldr	r0, [pc, #584]	; (8010ca8 <flash_get_device_id+0xaec>)
 8010a60:	f000 ff9a 	bl	8011998 <app_debug_print_raw>
//                    DEBUG_INFO("W25Q65\r\n");
//                    flash_drv->info.device = APP_SPI_FLASH_W25Q64;
//                    val = true;
//                }
                
                if (id.name.manufacture_id[1] == 0x40 && id.name.device_id[0] == 0x15)
 8010a64:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8010a68:	2b40      	cmp	r3, #64	; 0x40
 8010a6a:	d112      	bne.n	8010a92 <flash_get_device_id+0x8d6>
 8010a6c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010a70:	2b15      	cmp	r3, #21
 8010a72:	d10e      	bne.n	8010a92 <flash_get_device_id+0x8d6>
                {
                    DEBUG_INFO("W25Q16\r\n");
 8010a74:	f000 fe14 	bl	80116a0 <app_debug_get_ms>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	4a87      	ldr	r2, [pc, #540]	; (8010c98 <flash_get_device_id+0xadc>)
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	488b      	ldr	r0, [pc, #556]	; (8010cac <flash_get_device_id+0xaf0>)
 8010a80:	f000 ff8a 	bl	8011998 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q16;
 8010a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a86:	2310      	movs	r3, #16
 8010a88:	7713      	strb	r3, [r2, #28]
                    val = true;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010a90:	e1d9      	b.n	8010e46 <flash_get_device_id+0xc8a>
                }
                else if (id.name.manufacture_id[1] == 0x40 && id.name.device_id[0] == 0x17)
 8010a92:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8010a96:	2b40      	cmp	r3, #64	; 0x40
 8010a98:	f040 81d5 	bne.w	8010e46 <flash_get_device_id+0xc8a>
 8010a9c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010aa0:	2b17      	cmp	r3, #23
 8010aa2:	f040 81d0 	bne.w	8010e46 <flash_get_device_id+0xc8a>
                {
                    DEBUG_INFO("W25Q64\r\n");
 8010aa6:	f000 fdfb 	bl	80116a0 <app_debug_get_ms>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	4a7a      	ldr	r2, [pc, #488]	; (8010c98 <flash_get_device_id+0xadc>)
 8010aae:	4619      	mov	r1, r3
 8010ab0:	487f      	ldr	r0, [pc, #508]	; (8010cb0 <flash_get_device_id+0xaf4>)
 8010ab2:	f000 ff71 	bl	8011998 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q64;
 8010ab6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010ab8:	2309      	movs	r3, #9
 8010aba:	7713      	strb	r3, [r2, #28]
                    val = true;
 8010abc:	2301      	movs	r3, #1
 8010abe:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010ac2:	e1c0      	b.n	8010e46 <flash_get_device_id+0xc8a>
                }
            }
            else if (id.name.manufacture_id[0] == 0x04 && id.name.manufacture_id[1] == 0x7F)
 8010ac4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8010ac8:	2b04      	cmp	r3, #4
 8010aca:	d133      	bne.n	8010b34 <flash_get_device_id+0x978>
 8010acc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8010ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8010ad2:	d12f      	bne.n	8010b34 <flash_get_device_id+0x978>
            {
                if (id.name.device_id[0] == 0x01 && id.name.device_id[1] == 0x01)
 8010ad4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d112      	bne.n	8010b02 <flash_get_device_id+0x946>
 8010adc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d10e      	bne.n	8010b02 <flash_get_device_id+0x946>
                {
                    DEBUG_INFO("MB85RS16\r\n");
 8010ae4:	f000 fddc 	bl	80116a0 <app_debug_get_ms>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	4a6b      	ldr	r2, [pc, #428]	; (8010c98 <flash_get_device_id+0xadc>)
 8010aec:	4619      	mov	r1, r3
 8010aee:	4871      	ldr	r0, [pc, #452]	; (8010cb4 <flash_get_device_id+0xaf8>)
 8010af0:	f000 ff52 	bl	8011998 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FRAM_MB85RS16;
 8010af4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010af6:	230a      	movs	r3, #10
 8010af8:	7713      	strb	r3, [r2, #28]
                    val = true;
 8010afa:	2301      	movs	r3, #1
 8010afc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                if (id.name.device_id[0] == 0x01 && id.name.device_id[1] == 0x01)
 8010b00:	e1a0      	b.n	8010e44 <flash_get_device_id+0xc88>
                }
                else if (id.name.device_id[0] == 0x03 && id.name.device_id[1] == 0x02)
 8010b02:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010b06:	2b03      	cmp	r3, #3
 8010b08:	f040 819c 	bne.w	8010e44 <flash_get_device_id+0xc88>
 8010b0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010b10:	2b02      	cmp	r3, #2
 8010b12:	f040 8197 	bne.w	8010e44 <flash_get_device_id+0xc88>
                {
                    DEBUG_INFO("MB85RS64V\r\n");
 8010b16:	f000 fdc3 	bl	80116a0 <app_debug_get_ms>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	4a5e      	ldr	r2, [pc, #376]	; (8010c98 <flash_get_device_id+0xadc>)
 8010b1e:	4619      	mov	r1, r3
 8010b20:	4865      	ldr	r0, [pc, #404]	; (8010cb8 <flash_get_device_id+0xafc>)
 8010b22:	f000 ff39 	bl	8011998 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FRAM_MB85RS64V;
 8010b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b28:	230d      	movs	r3, #13
 8010b2a:	7713      	strb	r3, [r2, #28]
                    val = true;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                if (id.name.device_id[0] == 0x01 && id.name.device_id[1] == 0x01)
 8010b32:	e187      	b.n	8010e44 <flash_get_device_id+0xc88>
                }
            }
            else if (id.name.manufacture_id[0] == 0x1F && id.name.manufacture_id[1] == 0x89) /* APP_SPI_FLASH_AT25SF128 */
 8010b34:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8010b38:	2b1f      	cmp	r3, #31
 8010b3a:	d11a      	bne.n	8010b72 <flash_get_device_id+0x9b6>
 8010b3c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8010b40:	2b89      	cmp	r3, #137	; 0x89
 8010b42:	d116      	bne.n	8010b72 <flash_get_device_id+0x9b6>
            {
                DEBUG_INFO("Adesto Technologies\r\n");
 8010b44:	f000 fdac 	bl	80116a0 <app_debug_get_ms>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	4a53      	ldr	r2, [pc, #332]	; (8010c98 <flash_get_device_id+0xadc>)
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	485b      	ldr	r0, [pc, #364]	; (8010cbc <flash_get_device_id+0xb00>)
 8010b50:	f000 ff22 	bl	8011998 <app_debug_print_raw>
                flash_drv->info.device = APP_SPI_FLASH_AT25SF128;
 8010b54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b56:	230b      	movs	r3, #11
 8010b58:	7713      	strb	r3, [r2, #28]
                DEBUG_INFO("AT25SF128A\r\n");
 8010b5a:	f000 fda1 	bl	80116a0 <app_debug_get_ms>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	4a4d      	ldr	r2, [pc, #308]	; (8010c98 <flash_get_device_id+0xadc>)
 8010b62:	4619      	mov	r1, r3
 8010b64:	4856      	ldr	r0, [pc, #344]	; (8010cc0 <flash_get_device_id+0xb04>)
 8010b66:	f000 ff17 	bl	8011998 <app_debug_print_raw>
                val = true;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010b70:	e169      	b.n	8010e46 <flash_get_device_id+0xc8a>
            }
            else if (id.name.manufacture_id[0] == 0x7F && id.name.manufacture_id[1] == 0x7F) /* APP_SPI_FLASH_AT25SF128 */
 8010b72:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8010b76:	2b7f      	cmp	r3, #127	; 0x7f
 8010b78:	f040 8165 	bne.w	8010e46 <flash_get_device_id+0xc8a>
 8010b7c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8010b80:	2b7f      	cmp	r3, #127	; 0x7f
 8010b82:	f040 8160 	bne.w	8010e46 <flash_get_device_id+0xc8a>
            {
 8010b86:	466b      	mov	r3, sp
 8010b88:	461d      	mov	r5, r3
                DEBUG_INFO("Cypress\r\n");
 8010b8a:	f000 fd89 	bl	80116a0 <app_debug_get_ms>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	4a41      	ldr	r2, [pc, #260]	; (8010c98 <flash_get_device_id+0xadc>)
 8010b92:	4619      	mov	r1, r3
 8010b94:	484b      	ldr	r0, [pc, #300]	; (8010cc4 <flash_get_device_id+0xb08>)
 8010b96:	f000 feff 	bl	8011998 <app_debug_print_raw>
                // 6 byte MSB = 7F7F7F7F7F7F
                // Byte 7 done care
                // Byte 89 = 2100 =>> FM25V01
                // Byte 89 = 2008 =>> FM25V02A

                uint8_t size = 10;
 8010b9a:	230a      	movs	r3, #10
 8010b9c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                uint8_t cypess_manufacture_data_tx[size];
 8010ba0:	f897 109b 	ldrb.w	r1, [r7, #155]	; 0x9b
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010bac:	b2cb      	uxtb	r3, r1
 8010bae:	2200      	movs	r2, #0
 8010bb0:	613b      	str	r3, [r7, #16]
 8010bb2:	617a      	str	r2, [r7, #20]
 8010bb4:	f04f 0200 	mov.w	r2, #0
 8010bb8:	f04f 0300 	mov.w	r3, #0
 8010bbc:	6978      	ldr	r0, [r7, #20]
 8010bbe:	00c3      	lsls	r3, r0, #3
 8010bc0:	6938      	ldr	r0, [r7, #16]
 8010bc2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010bc6:	6938      	ldr	r0, [r7, #16]
 8010bc8:	00c2      	lsls	r2, r0, #3
 8010bca:	b2cb      	uxtb	r3, r1
 8010bcc:	2200      	movs	r2, #0
 8010bce:	60bb      	str	r3, [r7, #8]
 8010bd0:	60fa      	str	r2, [r7, #12]
 8010bd2:	f04f 0200 	mov.w	r2, #0
 8010bd6:	f04f 0300 	mov.w	r3, #0
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	00c3      	lsls	r3, r0, #3
 8010bde:	68b8      	ldr	r0, [r7, #8]
 8010be0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010be4:	68b8      	ldr	r0, [r7, #8]
 8010be6:	00c2      	lsls	r2, r0, #3
 8010be8:	460b      	mov	r3, r1
 8010bea:	3307      	adds	r3, #7
 8010bec:	08db      	lsrs	r3, r3, #3
 8010bee:	00db      	lsls	r3, r3, #3
 8010bf0:	ebad 0d03 	sub.w	sp, sp, r3
 8010bf4:	ab04      	add	r3, sp, #16
 8010bf6:	3300      	adds	r3, #0
 8010bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                uint8_t cypess_manufacture_data_rx[size];
 8010bfc:	f897 109b 	ldrb.w	r1, [r7, #155]	; 0x9b
 8010c00:	460b      	mov	r3, r1
 8010c02:	3b01      	subs	r3, #1
 8010c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010c08:	b2cb      	uxtb	r3, r1
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	603b      	str	r3, [r7, #0]
 8010c0e:	607a      	str	r2, [r7, #4]
 8010c10:	f04f 0200 	mov.w	r2, #0
 8010c14:	f04f 0300 	mov.w	r3, #0
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	00c3      	lsls	r3, r0, #3
 8010c1c:	6838      	ldr	r0, [r7, #0]
 8010c1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010c22:	6838      	ldr	r0, [r7, #0]
 8010c24:	00c2      	lsls	r2, r0, #3
 8010c26:	b2cb      	uxtb	r3, r1
 8010c28:	2200      	movs	r2, #0
 8010c2a:	469a      	mov	sl, r3
 8010c2c:	4693      	mov	fp, r2
 8010c2e:	f04f 0200 	mov.w	r2, #0
 8010c32:	f04f 0300 	mov.w	r3, #0
 8010c36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010c3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010c42:	460b      	mov	r3, r1
 8010c44:	3307      	adds	r3, #7
 8010c46:	08db      	lsrs	r3, r3, #3
 8010c48:	00db      	lsls	r3, r3, #3
 8010c4a:	ebad 0d03 	sub.w	sp, sp, r3
 8010c4e:	ab04      	add	r3, sp, #16
 8010c50:	3300      	adds	r3, #0
 8010c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                cypess_manufacture_data_tx[0] = RDID_CMD;
 8010c56:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010c5a:	239f      	movs	r3, #159	; 0x9f
 8010c5c:	7013      	strb	r3, [r2, #0]

                flash_drv->callback.spi_cs(flash_drv->spi, 0);
 8010c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c60:	695a      	ldr	r2, [r3, #20]
 8010c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	2100      	movs	r1, #0
 8010c68:	4618      	mov	r0, r3
 8010c6a:	4790      	blx	r2
                flash_drv->callback.spi_tx_rx(flash_drv->spi, cypess_manufacture_data_tx, cypess_manufacture_data_rx, size);
 8010c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c6e:	68dc      	ldr	r4, [r3, #12]
 8010c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c72:	6818      	ldr	r0, [r3, #0]
 8010c74:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8010c78:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010c7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010c80:	47a0      	blx	r4
                flash_drv->callback.spi_cs(flash_drv->spi, 1);
 8010c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c84:	695a      	ldr	r2, [r3, #20]
 8010c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	2101      	movs	r1, #1
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	4790      	blx	r2
                for (uint32_t i = 1; i < size; i++)
 8010c90:	2301      	movs	r3, #1
 8010c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010c96:	e026      	b.n	8010ce6 <flash_get_device_id+0xb2a>
 8010c98:	0801aa0c 	.word	0x0801aa0c
 8010c9c:	0801ae7c 	.word	0x0801ae7c
 8010ca0:	0801aea0 	.word	0x0801aea0
 8010ca4:	0801aec4 	.word	0x0801aec4
 8010ca8:	0801aeec 	.word	0x0801aeec
 8010cac:	0801af10 	.word	0x0801af10
 8010cb0:	0801af30 	.word	0x0801af30
 8010cb4:	0801af50 	.word	0x0801af50
 8010cb8:	0801af74 	.word	0x0801af74
 8010cbc:	0801add8 	.word	0x0801add8
 8010cc0:	0801ae08 	.word	0x0801ae08
 8010cc4:	0801ae2c 	.word	0x0801ae2c
                {
                    DEBUG_RAW("%02X ", cypess_manufacture_data_rx[i]);
 8010cc8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cd0:	4413      	add	r3, r2
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	4867      	ldr	r0, [pc, #412]	; (8010e74 <flash_get_device_id+0xcb8>)
 8010cd8:	f000 fe5e 	bl	8011998 <app_debug_print_raw>
                for (uint32_t i = 1; i < size; i++)
 8010cdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ce6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8010cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d3ea      	bcc.n	8010cc8 <flash_get_device_id+0xb0c>
                }
                DEBUG_RAW("\r\n");
 8010cf2:	4861      	ldr	r0, [pc, #388]	; (8010e78 <flash_get_device_id+0xcbc>)
 8010cf4:	f000 fe50 	bl	8011998 <app_debug_print_raw>

                if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x22 && cypess_manufacture_data_rx[9] == 0x08)
 8010cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cfc:	785b      	ldrb	r3, [r3, #1]
 8010cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8010d00:	d131      	bne.n	8010d66 <flash_get_device_id+0xbaa>
 8010d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d06:	789b      	ldrb	r3, [r3, #2]
 8010d08:	2b7f      	cmp	r3, #127	; 0x7f
 8010d0a:	d12c      	bne.n	8010d66 <flash_get_device_id+0xbaa>
 8010d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d10:	78db      	ldrb	r3, [r3, #3]
 8010d12:	2b7f      	cmp	r3, #127	; 0x7f
 8010d14:	d127      	bne.n	8010d66 <flash_get_device_id+0xbaa>
 8010d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d1a:	791b      	ldrb	r3, [r3, #4]
 8010d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8010d1e:	d122      	bne.n	8010d66 <flash_get_device_id+0xbaa>
 8010d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d24:	795b      	ldrb	r3, [r3, #5]
 8010d26:	2b7f      	cmp	r3, #127	; 0x7f
 8010d28:	d11d      	bne.n	8010d66 <flash_get_device_id+0xbaa>
 8010d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d2e:	799b      	ldrb	r3, [r3, #6]
 8010d30:	2b7f      	cmp	r3, #127	; 0x7f
 8010d32:	d118      	bne.n	8010d66 <flash_get_device_id+0xbaa>
 8010d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d38:	7a1b      	ldrb	r3, [r3, #8]
 8010d3a:	2b22      	cmp	r3, #34	; 0x22
 8010d3c:	d113      	bne.n	8010d66 <flash_get_device_id+0xbaa>
 8010d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d42:	7a5b      	ldrb	r3, [r3, #9]
 8010d44:	2b08      	cmp	r3, #8
 8010d46:	d10e      	bne.n	8010d66 <flash_get_device_id+0xbaa>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V02A;
 8010d48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d4a:	230c      	movs	r3, #12
 8010d4c:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V02A\r\n");
 8010d4e:	f000 fca7 	bl	80116a0 <app_debug_get_ms>
 8010d52:	4603      	mov	r3, r0
 8010d54:	4a49      	ldr	r2, [pc, #292]	; (8010e7c <flash_get_device_id+0xcc0>)
 8010d56:	4619      	mov	r1, r3
 8010d58:	4849      	ldr	r0, [pc, #292]	; (8010e80 <flash_get_device_id+0xcc4>)
 8010d5a:	f000 fe1d 	bl	8011998 <app_debug_print_raw>
                    val = true;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010d64:	e06c      	b.n	8010e40 <flash_get_device_id+0xc84>
                }
                else if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x21 && cypess_manufacture_data_rx[9] == 0x00)
 8010d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d6a:	785b      	ldrb	r3, [r3, #1]
 8010d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8010d6e:	d131      	bne.n	8010dd4 <flash_get_device_id+0xc18>
 8010d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d74:	789b      	ldrb	r3, [r3, #2]
 8010d76:	2b7f      	cmp	r3, #127	; 0x7f
 8010d78:	d12c      	bne.n	8010dd4 <flash_get_device_id+0xc18>
 8010d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d7e:	78db      	ldrb	r3, [r3, #3]
 8010d80:	2b7f      	cmp	r3, #127	; 0x7f
 8010d82:	d127      	bne.n	8010dd4 <flash_get_device_id+0xc18>
 8010d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d88:	791b      	ldrb	r3, [r3, #4]
 8010d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8010d8c:	d122      	bne.n	8010dd4 <flash_get_device_id+0xc18>
 8010d8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d92:	795b      	ldrb	r3, [r3, #5]
 8010d94:	2b7f      	cmp	r3, #127	; 0x7f
 8010d96:	d11d      	bne.n	8010dd4 <flash_get_device_id+0xc18>
 8010d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d9c:	799b      	ldrb	r3, [r3, #6]
 8010d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8010da0:	d118      	bne.n	8010dd4 <flash_get_device_id+0xc18>
 8010da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010da6:	7a1b      	ldrb	r3, [r3, #8]
 8010da8:	2b21      	cmp	r3, #33	; 0x21
 8010daa:	d113      	bne.n	8010dd4 <flash_get_device_id+0xc18>
 8010dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010db0:	7a5b      	ldrb	r3, [r3, #9]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d10e      	bne.n	8010dd4 <flash_get_device_id+0xc18>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V01;
 8010db6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010db8:	230e      	movs	r3, #14
 8010dba:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V01\r\n");
 8010dbc:	f000 fc70 	bl	80116a0 <app_debug_get_ms>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	4a2e      	ldr	r2, [pc, #184]	; (8010e7c <flash_get_device_id+0xcc0>)
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	482f      	ldr	r0, [pc, #188]	; (8010e84 <flash_get_device_id+0xcc8>)
 8010dc8:	f000 fde6 	bl	8011998 <app_debug_print_raw>
                    val = true;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010dd2:	e035      	b.n	8010e40 <flash_get_device_id+0xc84>
                }
                else if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x24 && cypess_manufacture_data_rx[9] == 0x00)
 8010dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dd8:	785b      	ldrb	r3, [r3, #1]
 8010dda:	2b7f      	cmp	r3, #127	; 0x7f
 8010ddc:	d130      	bne.n	8010e40 <flash_get_device_id+0xc84>
 8010dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010de2:	789b      	ldrb	r3, [r3, #2]
 8010de4:	2b7f      	cmp	r3, #127	; 0x7f
 8010de6:	d12b      	bne.n	8010e40 <flash_get_device_id+0xc84>
 8010de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dec:	78db      	ldrb	r3, [r3, #3]
 8010dee:	2b7f      	cmp	r3, #127	; 0x7f
 8010df0:	d126      	bne.n	8010e40 <flash_get_device_id+0xc84>
 8010df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010df6:	791b      	ldrb	r3, [r3, #4]
 8010df8:	2b7f      	cmp	r3, #127	; 0x7f
 8010dfa:	d121      	bne.n	8010e40 <flash_get_device_id+0xc84>
 8010dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e00:	795b      	ldrb	r3, [r3, #5]
 8010e02:	2b7f      	cmp	r3, #127	; 0x7f
 8010e04:	d11c      	bne.n	8010e40 <flash_get_device_id+0xc84>
 8010e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e0a:	799b      	ldrb	r3, [r3, #6]
 8010e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8010e0e:	d117      	bne.n	8010e40 <flash_get_device_id+0xc84>
 8010e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e14:	7a1b      	ldrb	r3, [r3, #8]
 8010e16:	2b24      	cmp	r3, #36	; 0x24
 8010e18:	d112      	bne.n	8010e40 <flash_get_device_id+0xc84>
 8010e1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e1e:	7a5b      	ldrb	r3, [r3, #9]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d10d      	bne.n	8010e40 <flash_get_device_id+0xc84>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V10;
 8010e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e26:	230f      	movs	r3, #15
 8010e28:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V10\r\n");
 8010e2a:	f000 fc39 	bl	80116a0 <app_debug_get_ms>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	4a12      	ldr	r2, [pc, #72]	; (8010e7c <flash_get_device_id+0xcc0>)
 8010e32:	4619      	mov	r1, r3
 8010e34:	4814      	ldr	r0, [pc, #80]	; (8010e88 <flash_get_device_id+0xccc>)
 8010e36:	f000 fdaf 	bl	8011998 <app_debug_print_raw>
                    val = true;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8010e40:	46ad      	mov	sp, r5
 8010e42:	e000      	b.n	8010e46 <flash_get_device_id+0xc8a>
                if (id.name.device_id[0] == 0x01 && id.name.device_id[1] == 0x01)
 8010e44:	bf00      	nop
                }
            }
        }

        if (val)
 8010e46:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d10a      	bne.n	8010e64 <flash_get_device_id+0xca8>
    for (tries = 0; tries < FLASH_INIT_MAX_RETRIES; tries++)
 8010e4e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8010e52:	3301      	adds	r3, #1
 8010e54:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8010e58:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8010e5c:	2b02      	cmp	r3, #2
 8010e5e:	f67f a9c4 	bls.w	80101ea <flash_get_device_id+0x2e>
 8010e62:	e000      	b.n	8010e66 <flash_get_device_id+0xcaa>
        {
            break;
 8010e64:	bf00      	nop
        }
    }
    return val;
 8010e66:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	37b8      	adds	r7, #184	; 0xb8
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010e74:	0801ae50 	.word	0x0801ae50
 8010e78:	0801aa08 	.word	0x0801aa08
 8010e7c:	0801aa0c 	.word	0x0801aa0c
 8010e80:	0801ae58 	.word	0x0801ae58
 8010e84:	0801ae7c 	.word	0x0801ae7c
 8010e88:	0801aea0 	.word	0x0801aea0

08010e8c <app_spi_flash_wakeup>:
    return retval;
}


void app_spi_flash_wakeup(void)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	af00      	add	r7, sp, #0
        {
            __nop();
        }
    }
#endif
}
 8010e90:	bf00      	nop
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr

08010e9a <app_spi_flash_is_sector_empty>:
    }
#endif
}

bool app_spi_flash_is_sector_empty(app_flash_drv_t *flash_drv, uint32_t sector_index)
{
 8010e9a:	b580      	push	{r7, lr}
 8010e9c:	b086      	sub	sp, #24
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]
 8010ea2:	6039      	str	r1, [r7, #0]
    bool retval = true;
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	75fb      	strb	r3, [r7, #23]
    if (flash_drv->info.type == APP_SPI_FLASH)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d11c      	bne.n	8010eec <app_spi_flash_is_sector_empty+0x52>
    {
        uint32_t addr = sector_index * APP_SPI_FLASH_SECTOR_SIZE;
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	031b      	lsls	r3, r3, #12
 8010eb6:	60fb      	str	r3, [r7, #12]
        for (uint32_t i = 0; i < APP_SPI_FLASH_SECTOR_SIZE;) // Debug only
 8010eb8:	2300      	movs	r3, #0
 8010eba:	613b      	str	r3, [r7, #16]
 8010ebc:	e012      	b.n	8010ee4 <app_spi_flash_is_sector_empty+0x4a>
        {
            uint32_t tmp;
            app_spi_flash_read_bytes(flash_drv, addr + i, (uint8_t *)&tmp, 4);
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	18d1      	adds	r1, r2, r3
 8010ec4:	f107 0208 	add.w	r2, r7, #8
 8010ec8:	2304      	movs	r3, #4
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7ff f808 	bl	800fee0 <app_spi_flash_read_bytes>
            if (tmp != 0xFFFFFFFF)
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ed6:	d002      	beq.n	8010ede <app_spi_flash_is_sector_empty+0x44>
            {
                retval = false;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	75fb      	strb	r3, [r7, #23]
 8010edc:	e006      	b.n	8010eec <app_spi_flash_is_sector_empty+0x52>
                break;
            }
            i += 4;
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	3304      	adds	r3, #4
 8010ee2:	613b      	str	r3, [r7, #16]
        for (uint32_t i = 0; i < APP_SPI_FLASH_SECTOR_SIZE;) // Debug only
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010eea:	d3e8      	bcc.n	8010ebe <app_spi_flash_is_sector_empty+0x24>
        }
    }
    return retval;
 8010eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3718      	adds	r7, #24
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
	...

08010ef8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010efc:	2200      	movs	r2, #0
 8010efe:	4912      	ldr	r1, [pc, #72]	; (8010f48 <MX_USB_DEVICE_Init+0x50>)
 8010f00:	4812      	ldr	r0, [pc, #72]	; (8010f4c <MX_USB_DEVICE_Init+0x54>)
 8010f02:	f7f8 ff8a 	bl	8009e1a <USBD_Init>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d001      	beq.n	8010f10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010f0c:	f7ef ff39 	bl	8000d82 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8010f10:	490f      	ldr	r1, [pc, #60]	; (8010f50 <MX_USB_DEVICE_Init+0x58>)
 8010f12:	480e      	ldr	r0, [pc, #56]	; (8010f4c <MX_USB_DEVICE_Init+0x54>)
 8010f14:	f7f8 ffb1 	bl	8009e7a <USBD_RegisterClass>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d001      	beq.n	8010f22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010f1e:	f7ef ff30 	bl	8000d82 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8010f22:	490c      	ldr	r1, [pc, #48]	; (8010f54 <MX_USB_DEVICE_Init+0x5c>)
 8010f24:	4809      	ldr	r0, [pc, #36]	; (8010f4c <MX_USB_DEVICE_Init+0x54>)
 8010f26:	f7f7 f97b 	bl	8008220 <USBD_MSC_RegisterStorage>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d001      	beq.n	8010f34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010f30:	f7ef ff27 	bl	8000d82 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010f34:	4805      	ldr	r0, [pc, #20]	; (8010f4c <MX_USB_DEVICE_Init+0x54>)
 8010f36:	f7f8 ffd6 	bl	8009ee6 <USBD_Start>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d001      	beq.n	8010f44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010f40:	f7ef ff1f 	bl	8000d82 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010f44:	bf00      	nop
 8010f46:	bd80      	pop	{r7, pc}
 8010f48:	200000cc 	.word	0x200000cc
 8010f4c:	20007474 	.word	0x20007474
 8010f50:	20000020 	.word	0x20000020
 8010f54:	2000011c 	.word	0x2000011c

08010f58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b083      	sub	sp, #12
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	4603      	mov	r3, r0
 8010f60:	6039      	str	r1, [r7, #0]
 8010f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	2212      	movs	r2, #18
 8010f68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010f6a:	4b03      	ldr	r3, [pc, #12]	; (8010f78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr
 8010f78:	200000e8 	.word	0x200000e8

08010f7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	4603      	mov	r3, r0
 8010f84:	6039      	str	r1, [r7, #0]
 8010f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	2204      	movs	r2, #4
 8010f8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010f8e:	4b03      	ldr	r3, [pc, #12]	; (8010f9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	200000fc 	.word	0x200000fc

08010fa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	6039      	str	r1, [r7, #0]
 8010faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010fac:	79fb      	ldrb	r3, [r7, #7]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d105      	bne.n	8010fbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	4907      	ldr	r1, [pc, #28]	; (8010fd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010fb6:	4808      	ldr	r0, [pc, #32]	; (8010fd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010fb8:	f7f9 f809 	bl	8009fce <USBD_GetString>
 8010fbc:	e004      	b.n	8010fc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	4904      	ldr	r1, [pc, #16]	; (8010fd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010fc2:	4805      	ldr	r0, [pc, #20]	; (8010fd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010fc4:	f7f9 f803 	bl	8009fce <USBD_GetString>
  }
  return USBD_StrDesc;
 8010fc8:	4b02      	ldr	r3, [pc, #8]	; (8010fd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	20007750 	.word	0x20007750
 8010fd8:	0801b08c 	.word	0x0801b08c

08010fdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	6039      	str	r1, [r7, #0]
 8010fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010fe8:	683a      	ldr	r2, [r7, #0]
 8010fea:	4904      	ldr	r1, [pc, #16]	; (8010ffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010fec:	4804      	ldr	r0, [pc, #16]	; (8011000 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010fee:	f7f8 ffee 	bl	8009fce <USBD_GetString>
  return USBD_StrDesc;
 8010ff2:	4b02      	ldr	r3, [pc, #8]	; (8010ffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	20007750 	.word	0x20007750
 8011000:	0801b08c 	.word	0x0801b08c

08011004 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
 801100a:	4603      	mov	r3, r0
 801100c:	6039      	str	r1, [r7, #0]
 801100e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	221a      	movs	r2, #26
 8011014:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011016:	f000 f843 	bl	80110a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801101a:	4b02      	ldr	r3, [pc, #8]	; (8011024 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801101c:	4618      	mov	r0, r3
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20000100 	.word	0x20000100

08011028 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	4603      	mov	r3, r0
 8011030:	6039      	str	r1, [r7, #0]
 8011032:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011034:	79fb      	ldrb	r3, [r7, #7]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d105      	bne.n	8011046 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801103a:	683a      	ldr	r2, [r7, #0]
 801103c:	4907      	ldr	r1, [pc, #28]	; (801105c <USBD_FS_ConfigStrDescriptor+0x34>)
 801103e:	4808      	ldr	r0, [pc, #32]	; (8011060 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011040:	f7f8 ffc5 	bl	8009fce <USBD_GetString>
 8011044:	e004      	b.n	8011050 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	4904      	ldr	r1, [pc, #16]	; (801105c <USBD_FS_ConfigStrDescriptor+0x34>)
 801104a:	4805      	ldr	r0, [pc, #20]	; (8011060 <USBD_FS_ConfigStrDescriptor+0x38>)
 801104c:	f7f8 ffbf 	bl	8009fce <USBD_GetString>
  }
  return USBD_StrDesc;
 8011050:	4b02      	ldr	r3, [pc, #8]	; (801105c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011052:	4618      	mov	r0, r3
 8011054:	3708      	adds	r7, #8
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}
 801105a:	bf00      	nop
 801105c:	20007750 	.word	0x20007750
 8011060:	0801b094 	.word	0x0801b094

08011064 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	4603      	mov	r3, r0
 801106c:	6039      	str	r1, [r7, #0]
 801106e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011070:	79fb      	ldrb	r3, [r7, #7]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d105      	bne.n	8011082 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011076:	683a      	ldr	r2, [r7, #0]
 8011078:	4907      	ldr	r1, [pc, #28]	; (8011098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801107a:	4808      	ldr	r0, [pc, #32]	; (801109c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801107c:	f7f8 ffa7 	bl	8009fce <USBD_GetString>
 8011080:	e004      	b.n	801108c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011082:	683a      	ldr	r2, [r7, #0]
 8011084:	4904      	ldr	r1, [pc, #16]	; (8011098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011086:	4805      	ldr	r0, [pc, #20]	; (801109c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011088:	f7f8 ffa1 	bl	8009fce <USBD_GetString>
  }
  return USBD_StrDesc;
 801108c:	4b02      	ldr	r3, [pc, #8]	; (8011098 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801108e:	4618      	mov	r0, r3
 8011090:	3708      	adds	r7, #8
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop
 8011098:	20007750 	.word	0x20007750
 801109c:	0801b0a0 	.word	0x0801b0a0

080110a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80110a6:	4b0f      	ldr	r3, [pc, #60]	; (80110e4 <Get_SerialNum+0x44>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80110ac:	4b0e      	ldr	r3, [pc, #56]	; (80110e8 <Get_SerialNum+0x48>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80110b2:	4b0e      	ldr	r3, [pc, #56]	; (80110ec <Get_SerialNum+0x4c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4413      	add	r3, r2
 80110be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d009      	beq.n	80110da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80110c6:	2208      	movs	r2, #8
 80110c8:	4909      	ldr	r1, [pc, #36]	; (80110f0 <Get_SerialNum+0x50>)
 80110ca:	68f8      	ldr	r0, [r7, #12]
 80110cc:	f000 f814 	bl	80110f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80110d0:	2204      	movs	r2, #4
 80110d2:	4908      	ldr	r1, [pc, #32]	; (80110f4 <Get_SerialNum+0x54>)
 80110d4:	68b8      	ldr	r0, [r7, #8]
 80110d6:	f000 f80f 	bl	80110f8 <IntToUnicode>
  }
}
 80110da:	bf00      	nop
 80110dc:	3710      	adds	r7, #16
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	1fff7a10 	.word	0x1fff7a10
 80110e8:	1fff7a14 	.word	0x1fff7a14
 80110ec:	1fff7a18 	.word	0x1fff7a18
 80110f0:	20000102 	.word	0x20000102
 80110f4:	20000112 	.word	0x20000112

080110f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b087      	sub	sp, #28
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	4613      	mov	r3, r2
 8011104:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011106:	2300      	movs	r3, #0
 8011108:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801110a:	2300      	movs	r3, #0
 801110c:	75fb      	strb	r3, [r7, #23]
 801110e:	e027      	b.n	8011160 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	0f1b      	lsrs	r3, r3, #28
 8011114:	2b09      	cmp	r3, #9
 8011116:	d80b      	bhi.n	8011130 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	0f1b      	lsrs	r3, r3, #28
 801111c:	b2da      	uxtb	r2, r3
 801111e:	7dfb      	ldrb	r3, [r7, #23]
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	4619      	mov	r1, r3
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	440b      	add	r3, r1
 8011128:	3230      	adds	r2, #48	; 0x30
 801112a:	b2d2      	uxtb	r2, r2
 801112c:	701a      	strb	r2, [r3, #0]
 801112e:	e00a      	b.n	8011146 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	0f1b      	lsrs	r3, r3, #28
 8011134:	b2da      	uxtb	r2, r3
 8011136:	7dfb      	ldrb	r3, [r7, #23]
 8011138:	005b      	lsls	r3, r3, #1
 801113a:	4619      	mov	r1, r3
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	440b      	add	r3, r1
 8011140:	3237      	adds	r2, #55	; 0x37
 8011142:	b2d2      	uxtb	r2, r2
 8011144:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	011b      	lsls	r3, r3, #4
 801114a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801114c:	7dfb      	ldrb	r3, [r7, #23]
 801114e:	005b      	lsls	r3, r3, #1
 8011150:	3301      	adds	r3, #1
 8011152:	68ba      	ldr	r2, [r7, #8]
 8011154:	4413      	add	r3, r2
 8011156:	2200      	movs	r2, #0
 8011158:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801115a:	7dfb      	ldrb	r3, [r7, #23]
 801115c:	3301      	adds	r3, #1
 801115e:	75fb      	strb	r3, [r7, #23]
 8011160:	7dfa      	ldrb	r2, [r7, #23]
 8011162:	79fb      	ldrb	r3, [r7, #7]
 8011164:	429a      	cmp	r2, r3
 8011166:	d3d3      	bcc.n	8011110 <IntToUnicode+0x18>
  }
}
 8011168:	bf00      	nop
 801116a:	bf00      	nop
 801116c:	371c      	adds	r7, #28
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr

08011176 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8011176:	b480      	push	{r7}
 8011178:	b083      	sub	sp, #12
 801117a:	af00      	add	r7, sp, #0
 801117c:	4603      	mov	r3, r0
 801117e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8011180:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8011182:	4618      	mov	r0, r3
 8011184:	370c      	adds	r7, #12
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr

0801118e <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801118e:	b480      	push	{r7}
 8011190:	b085      	sub	sp, #20
 8011192:	af00      	add	r7, sp, #0
 8011194:	4603      	mov	r3, r0
 8011196:	60b9      	str	r1, [r7, #8]
 8011198:	607a      	str	r2, [r7, #4]
 801119a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80111a2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80111aa:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80111ac:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3714      	adds	r7, #20
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr

080111ba <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80111ba:	b480      	push	{r7}
 80111bc:	b083      	sub	sp, #12
 80111be:	af00      	add	r7, sp, #0
 80111c0:	4603      	mov	r3, r0
 80111c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80111c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	370c      	adds	r7, #12
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr

080111d2 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80111d2:	b480      	push	{r7}
 80111d4:	b083      	sub	sp, #12
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	4603      	mov	r3, r0
 80111da:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 80111dc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80111de:	4618      	mov	r0, r3
 80111e0:	370c      	adds	r7, #12
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr

080111ea <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80111ea:	b480      	push	{r7}
 80111ec:	b085      	sub	sp, #20
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	607a      	str	r2, [r7, #4]
 80111f4:	461a      	mov	r2, r3
 80111f6:	4603      	mov	r3, r0
 80111f8:	73fb      	strb	r3, [r7, #15]
 80111fa:	4613      	mov	r3, r2
 80111fc:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 80111fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011200:	4618      	mov	r0, r3
 8011202:	3714      	adds	r7, #20
 8011204:	46bd      	mov	sp, r7
 8011206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120a:	4770      	bx	lr

0801120c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801120c:	b480      	push	{r7}
 801120e:	b085      	sub	sp, #20
 8011210:	af00      	add	r7, sp, #0
 8011212:	60b9      	str	r1, [r7, #8]
 8011214:	607a      	str	r2, [r7, #4]
 8011216:	461a      	mov	r2, r3
 8011218:	4603      	mov	r3, r0
 801121a:	73fb      	strb	r3, [r7, #15]
 801121c:	4613      	mov	r3, r2
 801121e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 8011220:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8011222:	4618      	mov	r0, r3
 8011224:	3714      	adds	r7, #20
 8011226:	46bd      	mov	sp, r7
 8011228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122c:	4770      	bx	lr

0801122e <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801122e:	b480      	push	{r7}
 8011230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8011232:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8011234:	4618      	mov	r0, r3
 8011236:	46bd      	mov	sp, r7
 8011238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123c:	4770      	bx	lr
	...

08011240 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b08a      	sub	sp, #40	; 0x28
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011248:	f107 0314 	add.w	r3, r7, #20
 801124c:	2200      	movs	r2, #0
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	605a      	str	r2, [r3, #4]
 8011252:	609a      	str	r2, [r3, #8]
 8011254:	60da      	str	r2, [r3, #12]
 8011256:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011260:	d13a      	bne.n	80112d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011262:	2300      	movs	r3, #0
 8011264:	613b      	str	r3, [r7, #16]
 8011266:	4b1e      	ldr	r3, [pc, #120]	; (80112e0 <HAL_PCD_MspInit+0xa0>)
 8011268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801126a:	4a1d      	ldr	r2, [pc, #116]	; (80112e0 <HAL_PCD_MspInit+0xa0>)
 801126c:	f043 0301 	orr.w	r3, r3, #1
 8011270:	6313      	str	r3, [r2, #48]	; 0x30
 8011272:	4b1b      	ldr	r3, [pc, #108]	; (80112e0 <HAL_PCD_MspInit+0xa0>)
 8011274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011276:	f003 0301 	and.w	r3, r3, #1
 801127a:	613b      	str	r3, [r7, #16]
 801127c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801127e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011284:	2302      	movs	r3, #2
 8011286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011288:	2300      	movs	r3, #0
 801128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801128c:	2303      	movs	r3, #3
 801128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011290:	230a      	movs	r3, #10
 8011292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011294:	f107 0314 	add.w	r3, r7, #20
 8011298:	4619      	mov	r1, r3
 801129a:	4812      	ldr	r0, [pc, #72]	; (80112e4 <HAL_PCD_MspInit+0xa4>)
 801129c:	f7f0 ff8e 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80112a0:	4b0f      	ldr	r3, [pc, #60]	; (80112e0 <HAL_PCD_MspInit+0xa0>)
 80112a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112a4:	4a0e      	ldr	r2, [pc, #56]	; (80112e0 <HAL_PCD_MspInit+0xa0>)
 80112a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112aa:	6353      	str	r3, [r2, #52]	; 0x34
 80112ac:	2300      	movs	r3, #0
 80112ae:	60fb      	str	r3, [r7, #12]
 80112b0:	4b0b      	ldr	r3, [pc, #44]	; (80112e0 <HAL_PCD_MspInit+0xa0>)
 80112b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112b4:	4a0a      	ldr	r2, [pc, #40]	; (80112e0 <HAL_PCD_MspInit+0xa0>)
 80112b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80112ba:	6453      	str	r3, [r2, #68]	; 0x44
 80112bc:	4b08      	ldr	r3, [pc, #32]	; (80112e0 <HAL_PCD_MspInit+0xa0>)
 80112be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112c4:	60fb      	str	r3, [r7, #12]
 80112c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80112c8:	2200      	movs	r2, #0
 80112ca:	2105      	movs	r1, #5
 80112cc:	2043      	movs	r0, #67	; 0x43
 80112ce:	f7f0 f9b5 	bl	800163c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80112d2:	2043      	movs	r0, #67	; 0x43
 80112d4:	f7f0 f9de 	bl	8001694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80112d8:	bf00      	nop
 80112da:	3728      	adds	r7, #40	; 0x28
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	40023800 	.word	0x40023800
 80112e4:	40020000 	.word	0x40020000

080112e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d13c      	bne.n	8011372 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80112f8:	4a20      	ldr	r2, [pc, #128]	; (801137c <USBD_LL_Init+0x94>)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	4a1e      	ldr	r2, [pc, #120]	; (801137c <USBD_LL_Init+0x94>)
 8011304:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011308:	4b1c      	ldr	r3, [pc, #112]	; (801137c <USBD_LL_Init+0x94>)
 801130a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801130e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011310:	4b1a      	ldr	r3, [pc, #104]	; (801137c <USBD_LL_Init+0x94>)
 8011312:	2204      	movs	r2, #4
 8011314:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011316:	4b19      	ldr	r3, [pc, #100]	; (801137c <USBD_LL_Init+0x94>)
 8011318:	2202      	movs	r2, #2
 801131a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801131c:	4b17      	ldr	r3, [pc, #92]	; (801137c <USBD_LL_Init+0x94>)
 801131e:	2200      	movs	r2, #0
 8011320:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011322:	4b16      	ldr	r3, [pc, #88]	; (801137c <USBD_LL_Init+0x94>)
 8011324:	2202      	movs	r2, #2
 8011326:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011328:	4b14      	ldr	r3, [pc, #80]	; (801137c <USBD_LL_Init+0x94>)
 801132a:	2200      	movs	r2, #0
 801132c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801132e:	4b13      	ldr	r3, [pc, #76]	; (801137c <USBD_LL_Init+0x94>)
 8011330:	2200      	movs	r2, #0
 8011332:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011334:	4b11      	ldr	r3, [pc, #68]	; (801137c <USBD_LL_Init+0x94>)
 8011336:	2200      	movs	r2, #0
 8011338:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801133a:	4b10      	ldr	r3, [pc, #64]	; (801137c <USBD_LL_Init+0x94>)
 801133c:	2200      	movs	r2, #0
 801133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011340:	4b0e      	ldr	r3, [pc, #56]	; (801137c <USBD_LL_Init+0x94>)
 8011342:	2200      	movs	r2, #0
 8011344:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011346:	480d      	ldr	r0, [pc, #52]	; (801137c <USBD_LL_Init+0x94>)
 8011348:	f7f1 fa4c 	bl	80027e4 <HAL_PCD_Init>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d001      	beq.n	8011356 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011352:	f7ef fd16 	bl	8000d82 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011356:	2180      	movs	r1, #128	; 0x80
 8011358:	4808      	ldr	r0, [pc, #32]	; (801137c <USBD_LL_Init+0x94>)
 801135a:	f7f1 fe33 	bl	8002fc4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801135e:	2240      	movs	r2, #64	; 0x40
 8011360:	2100      	movs	r1, #0
 8011362:	4806      	ldr	r0, [pc, #24]	; (801137c <USBD_LL_Init+0x94>)
 8011364:	f7f1 fde7 	bl	8002f36 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011368:	2280      	movs	r2, #128	; 0x80
 801136a:	2101      	movs	r1, #1
 801136c:	4803      	ldr	r0, [pc, #12]	; (801137c <USBD_LL_Init+0x94>)
 801136e:	f7f1 fde2 	bl	8002f36 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	20007950 	.word	0x20007950

08011380 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011388:	2300      	movs	r3, #0
 801138a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801138c:	2300      	movs	r3, #0
 801138e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011396:	4618      	mov	r0, r3
 8011398:	f7f1 fb54 	bl	8002a44 <HAL_PCD_Start>
 801139c:	4603      	mov	r3, r0
 801139e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113a0:	7bfb      	ldrb	r3, [r7, #15]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f000 f916 	bl	80115d4 <USBD_Get_USB_Status>
 80113a8:	4603      	mov	r3, r0
 80113aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3710      	adds	r7, #16
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}

080113b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80113b6:	b580      	push	{r7, lr}
 80113b8:	b084      	sub	sp, #16
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	6078      	str	r0, [r7, #4]
 80113be:	4608      	mov	r0, r1
 80113c0:	4611      	mov	r1, r2
 80113c2:	461a      	mov	r2, r3
 80113c4:	4603      	mov	r3, r0
 80113c6:	70fb      	strb	r3, [r7, #3]
 80113c8:	460b      	mov	r3, r1
 80113ca:	70bb      	strb	r3, [r7, #2]
 80113cc:	4613      	mov	r3, r2
 80113ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113d4:	2300      	movs	r3, #0
 80113d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80113de:	78bb      	ldrb	r3, [r7, #2]
 80113e0:	883a      	ldrh	r2, [r7, #0]
 80113e2:	78f9      	ldrb	r1, [r7, #3]
 80113e4:	f7f1 fb61 	bl	8002aaa <HAL_PCD_EP_Open>
 80113e8:	4603      	mov	r3, r0
 80113ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113ec:	7bfb      	ldrb	r3, [r7, #15]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f000 f8f0 	bl	80115d4 <USBD_Get_USB_Status>
 80113f4:	4603      	mov	r3, r0
 80113f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011402:	b580      	push	{r7, lr}
 8011404:	b084      	sub	sp, #16
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
 801140a:	460b      	mov	r3, r1
 801140c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801140e:	2300      	movs	r3, #0
 8011410:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011412:	2300      	movs	r3, #0
 8011414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801141c:	78fa      	ldrb	r2, [r7, #3]
 801141e:	4611      	mov	r1, r2
 8011420:	4618      	mov	r0, r3
 8011422:	f7f1 fbaa 	bl	8002b7a <HAL_PCD_EP_Close>
 8011426:	4603      	mov	r3, r0
 8011428:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801142a:	7bfb      	ldrb	r3, [r7, #15]
 801142c:	4618      	mov	r0, r3
 801142e:	f000 f8d1 	bl	80115d4 <USBD_Get_USB_Status>
 8011432:	4603      	mov	r3, r0
 8011434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011436:	7bbb      	ldrb	r3, [r7, #14]
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	460b      	mov	r3, r1
 801144a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801144c:	2300      	movs	r3, #0
 801144e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011450:	2300      	movs	r3, #0
 8011452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801145a:	78fa      	ldrb	r2, [r7, #3]
 801145c:	4611      	mov	r1, r2
 801145e:	4618      	mov	r0, r3
 8011460:	f7f1 fd3c 	bl	8002edc <HAL_PCD_EP_Flush>
 8011464:	4603      	mov	r3, r0
 8011466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011468:	7bfb      	ldrb	r3, [r7, #15]
 801146a:	4618      	mov	r0, r3
 801146c:	f000 f8b2 	bl	80115d4 <USBD_Get_USB_Status>
 8011470:	4603      	mov	r3, r0
 8011472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011474:	7bbb      	ldrb	r3, [r7, #14]
}
 8011476:	4618      	mov	r0, r3
 8011478:	3710      	adds	r7, #16
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}

0801147e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801147e:	b580      	push	{r7, lr}
 8011480:	b084      	sub	sp, #16
 8011482:	af00      	add	r7, sp, #0
 8011484:	6078      	str	r0, [r7, #4]
 8011486:	460b      	mov	r3, r1
 8011488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801148a:	2300      	movs	r3, #0
 801148c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801148e:	2300      	movs	r3, #0
 8011490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011498:	78fa      	ldrb	r2, [r7, #3]
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f7f1 fc63 	bl	8002d68 <HAL_PCD_EP_SetStall>
 80114a2:	4603      	mov	r3, r0
 80114a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114a6:	7bfb      	ldrb	r3, [r7, #15]
 80114a8:	4618      	mov	r0, r3
 80114aa:	f000 f893 	bl	80115d4 <USBD_Get_USB_Status>
 80114ae:	4603      	mov	r3, r0
 80114b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3710      	adds	r7, #16
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	460b      	mov	r3, r1
 80114c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114c8:	2300      	movs	r3, #0
 80114ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114cc:	2300      	movs	r3, #0
 80114ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80114d6:	78fa      	ldrb	r2, [r7, #3]
 80114d8:	4611      	mov	r1, r2
 80114da:	4618      	mov	r0, r3
 80114dc:	f7f1 fca8 	bl	8002e30 <HAL_PCD_EP_ClrStall>
 80114e0:	4603      	mov	r3, r0
 80114e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114e4:	7bfb      	ldrb	r3, [r7, #15]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f000 f874 	bl	80115d4 <USBD_Get_USB_Status>
 80114ec:	4603      	mov	r3, r0
 80114ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b086      	sub	sp, #24
 80114fe:	af00      	add	r7, sp, #0
 8011500:	60f8      	str	r0, [r7, #12]
 8011502:	607a      	str	r2, [r7, #4]
 8011504:	603b      	str	r3, [r7, #0]
 8011506:	460b      	mov	r3, r1
 8011508:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801150a:	2300      	movs	r3, #0
 801150c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801150e:	2300      	movs	r3, #0
 8011510:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011518:	7af9      	ldrb	r1, [r7, #11]
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	f7f1 fbd9 	bl	8002cd4 <HAL_PCD_EP_Transmit>
 8011522:	4603      	mov	r3, r0
 8011524:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011526:	7dfb      	ldrb	r3, [r7, #23]
 8011528:	4618      	mov	r0, r3
 801152a:	f000 f853 	bl	80115d4 <USBD_Get_USB_Status>
 801152e:	4603      	mov	r3, r0
 8011530:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011532:	7dbb      	ldrb	r3, [r7, #22]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3718      	adds	r7, #24
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b086      	sub	sp, #24
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	607a      	str	r2, [r7, #4]
 8011546:	603b      	str	r3, [r7, #0]
 8011548:	460b      	mov	r3, r1
 801154a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801154c:	2300      	movs	r3, #0
 801154e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011550:	2300      	movs	r3, #0
 8011552:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801155a:	7af9      	ldrb	r1, [r7, #11]
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	687a      	ldr	r2, [r7, #4]
 8011560:	f7f1 fb55 	bl	8002c0e <HAL_PCD_EP_Receive>
 8011564:	4603      	mov	r3, r0
 8011566:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011568:	7dfb      	ldrb	r3, [r7, #23]
 801156a:	4618      	mov	r0, r3
 801156c:	f000 f832 	bl	80115d4 <USBD_Get_USB_Status>
 8011570:	4603      	mov	r3, r0
 8011572:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011574:	7dbb      	ldrb	r3, [r7, #22]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3718      	adds	r7, #24
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801157e:	b580      	push	{r7, lr}
 8011580:	b082      	sub	sp, #8
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
 8011586:	460b      	mov	r3, r1
 8011588:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011590:	78fa      	ldrb	r2, [r7, #3]
 8011592:	4611      	mov	r1, r2
 8011594:	4618      	mov	r0, r3
 8011596:	f7f1 fb85 	bl	8002ca4 <HAL_PCD_EP_GetRxCount>
 801159a:	4603      	mov	r3, r0
}
 801159c:	4618      	mov	r0, r3
 801159e:	3708      	adds	r7, #8
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80115a4:	b480      	push	{r7}
 80115a6:	b083      	sub	sp, #12
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80115ac:	4b03      	ldr	r3, [pc, #12]	; (80115bc <USBD_static_malloc+0x18>)
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	370c      	adds	r7, #12
 80115b2:	46bd      	mov	sp, r7
 80115b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b8:	4770      	bx	lr
 80115ba:	bf00      	nop
 80115bc:	20007e5c 	.word	0x20007e5c

080115c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]

}
 80115c8:	bf00      	nop
 80115ca:	370c      	adds	r7, #12
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr

080115d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115de:	2300      	movs	r3, #0
 80115e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80115e2:	79fb      	ldrb	r3, [r7, #7]
 80115e4:	2b03      	cmp	r3, #3
 80115e6:	d817      	bhi.n	8011618 <USBD_Get_USB_Status+0x44>
 80115e8:	a201      	add	r2, pc, #4	; (adr r2, 80115f0 <USBD_Get_USB_Status+0x1c>)
 80115ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ee:	bf00      	nop
 80115f0:	08011601 	.word	0x08011601
 80115f4:	08011607 	.word	0x08011607
 80115f8:	0801160d 	.word	0x0801160d
 80115fc:	08011613 	.word	0x08011613
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011600:	2300      	movs	r3, #0
 8011602:	73fb      	strb	r3, [r7, #15]
    break;
 8011604:	e00b      	b.n	801161e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011606:	2303      	movs	r3, #3
 8011608:	73fb      	strb	r3, [r7, #15]
    break;
 801160a:	e008      	b.n	801161e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801160c:	2301      	movs	r3, #1
 801160e:	73fb      	strb	r3, [r7, #15]
    break;
 8011610:	e005      	b.n	801161e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011612:	2303      	movs	r3, #3
 8011614:	73fb      	strb	r3, [r7, #15]
    break;
 8011616:	e002      	b.n	801161e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011618:	2303      	movs	r3, #3
 801161a:	73fb      	strb	r3, [r7, #15]
    break;
 801161c:	bf00      	nop
  }
  return usb_status;
 801161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011620:	4618      	mov	r0, r3
 8011622:	3714      	adds	r7, #20
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <__strnlen>:
static app_debug_lock_cb_t m_lock_cb;
static char *lower_digits = "0123456789abcdefghijklmnopqrstuvwxyz";
static char *upper_digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

static uint32_t __strnlen(char *ptr, uint32_t max_size)
{
 801162c:	b480      	push	{r7}
 801162e:	b085      	sub	sp, #20
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
    uint32_t len = 0;
 8011636:	2300      	movs	r3, #0
 8011638:	60fb      	str	r3, [r7, #12]
    if (ptr || max_size == 0)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d102      	bne.n	8011646 <__strnlen+0x1a>
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d104      	bne.n	8011650 <__strnlen+0x24>
    {
        return 0;
 8011646:	2300      	movs	r3, #0
 8011648:	e00e      	b.n	8011668 <__strnlen+0x3c>
    }

    while (*ptr++ && max_size--)
    {
        len++;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	3301      	adds	r3, #1
 801164e:	60fb      	str	r3, [r7, #12]
    while (*ptr++ && max_size--)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	1c5a      	adds	r2, r3, #1
 8011654:	607a      	str	r2, [r7, #4]
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d004      	beq.n	8011666 <__strnlen+0x3a>
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	1e5a      	subs	r2, r3, #1
 8011660:	603a      	str	r2, [r7, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d1f1      	bne.n	801164a <__strnlen+0x1e>
    }
    return len;
 8011666:	68fb      	ldr	r3, [r7, #12]
}
 8011668:	4618      	mov	r0, r3
 801166a:	3714      	adds	r7, #20
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr

08011674 <app_debug_init>:
}

#endif

void app_debug_init(app_debug_get_timestamp_ms_cb_t get_ms, app_debug_lock_cb_t lock_cb)
{
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
    m_get_ms = get_ms;
 801167e:	4a06      	ldr	r2, [pc, #24]	; (8011698 <app_debug_init+0x24>)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6013      	str	r3, [r2, #0]
    m_lock_cb = lock_cb;
 8011684:	4a05      	ldr	r2, [pc, #20]	; (801169c <app_debug_init+0x28>)
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	6013      	str	r3, [r2, #0]
#if DEBUG_ISR_ENABLE
    lwrb_init(&m_ringbuffer_debug_isr, &m_isr_buffer_size, DEBUG_ISR_RINGBUFFER_SIZE);
#endif
}
 801168a:	bf00      	nop
 801168c:	370c      	adds	r7, #12
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr
 8011696:	bf00      	nop
 8011698:	20008ee8 	.word	0x20008ee8
 801169c:	20008eec 	.word	0x20008eec

080116a0 <app_debug_get_ms>:

uint32_t app_debug_get_ms(void)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	af00      	add	r7, sp, #0
    if (m_get_ms)
 80116a4:	4b05      	ldr	r3, [pc, #20]	; (80116bc <app_debug_get_ms+0x1c>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d004      	beq.n	80116b6 <app_debug_get_ms+0x16>
    {
        return m_get_ms();
 80116ac:	4b03      	ldr	r3, [pc, #12]	; (80116bc <app_debug_get_ms+0x1c>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4798      	blx	r3
 80116b2:	4603      	mov	r3, r0
 80116b4:	e000      	b.n	80116b8 <app_debug_get_ms+0x18>
    }
    return 0;
 80116b6:	2300      	movs	r3, #0
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	bd80      	pop	{r7, pc}
 80116bc:	20008ee8 	.word	0x20008ee8

080116c0 <put_byte>:
void app_debug_print_nothing(const char *fmt, ...)
{
}

static void put_byte(uint8_t data)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	4603      	mov	r3, r0
 80116c8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t index = 0; index < APP_DEBUG_NUMBER_OF_DEBUG_PORT; index++)
 80116ca:	2300      	movs	r3, #0
 80116cc:	73fb      	strb	r3, [r7, #15]
 80116ce:	e010      	b.n	80116f2 <put_byte+0x32>
    {
        if (m_write_cb[index])
 80116d0:	7bfb      	ldrb	r3, [r7, #15]
 80116d2:	4a0c      	ldr	r2, [pc, #48]	; (8011704 <put_byte+0x44>)
 80116d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d007      	beq.n	80116ec <put_byte+0x2c>
        {
            m_write_cb[index](&data, 1);
 80116dc:	7bfb      	ldrb	r3, [r7, #15]
 80116de:	4a09      	ldr	r2, [pc, #36]	; (8011704 <put_byte+0x44>)
 80116e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116e4:	1dfa      	adds	r2, r7, #7
 80116e6:	2101      	movs	r1, #1
 80116e8:	4610      	mov	r0, r2
 80116ea:	4798      	blx	r3
    for (uint8_t index = 0; index < APP_DEBUG_NUMBER_OF_DEBUG_PORT; index++)
 80116ec:	7bfb      	ldrb	r3, [r7, #15]
 80116ee:	3301      	adds	r3, #1
 80116f0:	73fb      	strb	r3, [r7, #15]
 80116f2:	7bfb      	ldrb	r3, [r7, #15]
 80116f4:	2b03      	cmp	r3, #3
 80116f6:	d9eb      	bls.n	80116d0 <put_byte+0x10>
        }
    }
}
 80116f8:	bf00      	nop
 80116fa:	bf00      	nop
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	20008ed4 	.word	0x20008ed4

08011708 <ee_skip_atoi>:
//         m_lock_cb(false, 0);
//     }
// }

static int ee_skip_atoi(const char **s)
{
 8011708:	b480      	push	{r7}
 801170a:	b085      	sub	sp, #20
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
    int i = 0;
 8011710:	2300      	movs	r3, #0
 8011712:	60fb      	str	r3, [r7, #12]
    while (is_digit(**s))
 8011714:	e00e      	b.n	8011734 <ee_skip_atoi+0x2c>
        i = i * 10 + *((*s)++) - '0';
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	4613      	mov	r3, r2
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	4413      	add	r3, r2
 801171e:	005b      	lsls	r3, r3, #1
 8011720:	4618      	mov	r0, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	1c59      	adds	r1, r3, #1
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	6011      	str	r1, [r2, #0]
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	4403      	add	r3, r0
 8011730:	3b30      	subs	r3, #48	; 0x30
 8011732:	60fb      	str	r3, [r7, #12]
    while (is_digit(**s))
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	2b2f      	cmp	r3, #47	; 0x2f
 801173c:	d904      	bls.n	8011748 <ee_skip_atoi+0x40>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	2b39      	cmp	r3, #57	; 0x39
 8011746:	d9e6      	bls.n	8011716 <ee_skip_atoi+0xe>
    return i;
 8011748:	68fb      	ldr	r3, [r7, #12]
}
 801174a:	4618      	mov	r0, r3
 801174c:	3714      	adds	r7, #20
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr
	...

08011758 <ee_number>:

static int ee_number(long num, int base, int size, int precision, int type)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b09a      	sub	sp, #104	; 0x68
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	603b      	str	r3, [r7, #0]
    char c;
    char sign, tmp[66];
    char *dig = lower_digits;
 8011766:	4b8a      	ldr	r3, [pc, #552]	; (8011990 <ee_number+0x238>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	663b      	str	r3, [r7, #96]	; 0x60
    int i;
    int number_of_byte = 0;
 801176c:	2300      	movs	r3, #0
 801176e:	65bb      	str	r3, [r7, #88]	; 0x58

    if (type & UPPERCASE)
 8011770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011776:	2b00      	cmp	r3, #0
 8011778:	d002      	beq.n	8011780 <ee_number+0x28>
        dig = upper_digits;
 801177a:	4b86      	ldr	r3, [pc, #536]	; (8011994 <ee_number+0x23c>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	663b      	str	r3, [r7, #96]	; 0x60
    if (type & LEFT)
 8011780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011782:	f003 0310 	and.w	r3, r3, #16
 8011786:	2b00      	cmp	r3, #0
 8011788:	d003      	beq.n	8011792 <ee_number+0x3a>
        type &= ~ZEROPAD;
 801178a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801178c:	f023 0301 	bic.w	r3, r3, #1
 8011790:	673b      	str	r3, [r7, #112]	; 0x70
    if (base < 2 || base > 36)
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	2b01      	cmp	r3, #1
 8011796:	dd02      	ble.n	801179e <ee_number+0x46>
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	2b24      	cmp	r3, #36	; 0x24
 801179c:	dd01      	ble.n	80117a2 <ee_number+0x4a>
        return 0;
 801179e:	2300      	movs	r3, #0
 80117a0:	e0f2      	b.n	8011988 <ee_number+0x230>

    c = (type & ZEROPAD) ? '0' : ' ';
 80117a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80117a4:	f003 0301 	and.w	r3, r3, #1
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d001      	beq.n	80117b0 <ee_number+0x58>
 80117ac:	2330      	movs	r3, #48	; 0x30
 80117ae:	e000      	b.n	80117b2 <ee_number+0x5a>
 80117b0:	2320      	movs	r3, #32
 80117b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sign = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (type & SIGN)
 80117bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80117be:	f003 0302 	and.w	r3, r3, #2
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d023      	beq.n	801180e <ee_number+0xb6>
    {
        if (num < 0)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	da09      	bge.n	80117e0 <ee_number+0x88>
        {
            sign = '-';
 80117cc:	232d      	movs	r3, #45	; 0x2d
 80117ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            num = -num;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	425b      	negs	r3, r3
 80117d6:	60fb      	str	r3, [r7, #12]
            size--;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	3b01      	subs	r3, #1
 80117dc:	607b      	str	r3, [r7, #4]
 80117de:	e016      	b.n	801180e <ee_number+0xb6>
        }
        else if (type & PLUS)
 80117e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80117e2:	f003 0304 	and.w	r3, r3, #4
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d006      	beq.n	80117f8 <ee_number+0xa0>
        {
            sign = '+';
 80117ea:	232b      	movs	r3, #43	; 0x2b
 80117ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	3b01      	subs	r3, #1
 80117f4:	607b      	str	r3, [r7, #4]
 80117f6:	e00a      	b.n	801180e <ee_number+0xb6>
        }
        else if (type & SPACE)
 80117f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80117fa:	f003 0308 	and.w	r3, r3, #8
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d005      	beq.n	801180e <ee_number+0xb6>
        {
            sign = ' ';
 8011802:	2320      	movs	r3, #32
 8011804:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	3b01      	subs	r3, #1
 801180c:	607b      	str	r3, [r7, #4]
        }
    }

    if (type & HEX_PREP)
 801180e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011810:	f003 0320 	and.w	r3, r3, #32
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00c      	beq.n	8011832 <ee_number+0xda>
    {
        if (base == 16)
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	2b10      	cmp	r3, #16
 801181c:	d103      	bne.n	8011826 <ee_number+0xce>
            size -= 2;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	3b02      	subs	r3, #2
 8011822:	607b      	str	r3, [r7, #4]
 8011824:	e005      	b.n	8011832 <ee_number+0xda>
        else if (base == 8)
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	2b08      	cmp	r3, #8
 801182a:	d102      	bne.n	8011832 <ee_number+0xda>
            size--;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	3b01      	subs	r3, #1
 8011830:	607b      	str	r3, [r7, #4]
    }

    i = 0;
 8011832:	2300      	movs	r3, #0
 8011834:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (num == 0)
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d11e      	bne.n	801187a <ee_number+0x122>
        tmp[i++] = '0';
 801183c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801183e:	1c5a      	adds	r2, r3, #1
 8011840:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011842:	3368      	adds	r3, #104	; 0x68
 8011844:	443b      	add	r3, r7
 8011846:	2230      	movs	r2, #48	; 0x30
 8011848:	f803 2c54 	strb.w	r2, [r3, #-84]
 801184c:	e018      	b.n	8011880 <ee_number+0x128>
    else
    {
        while (num != 0)
        {
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	68ba      	ldr	r2, [r7, #8]
 8011852:	fbb3 f1f2 	udiv	r1, r3, r2
 8011856:	fb01 f202 	mul.w	r2, r1, r2
 801185a:	1a9b      	subs	r3, r3, r2
 801185c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801185e:	441a      	add	r2, r3
 8011860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011862:	1c59      	adds	r1, r3, #1
 8011864:	65f9      	str	r1, [r7, #92]	; 0x5c
 8011866:	7812      	ldrb	r2, [r2, #0]
 8011868:	3368      	adds	r3, #104	; 0x68
 801186a:	443b      	add	r3, r7
 801186c:	f803 2c54 	strb.w	r2, [r3, #-84]
            num = ((unsigned long)num) / (unsigned)base;
 8011870:	68fa      	ldr	r2, [r7, #12]
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	fbb2 f3f3 	udiv	r3, r2, r3
 8011878:	60fb      	str	r3, [r7, #12]
        while (num != 0)
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1e6      	bne.n	801184e <ee_number+0xf6>
        }
    }

    if (i > precision)
 8011880:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	429a      	cmp	r2, r3
 8011886:	dd01      	ble.n	801188c <ee_number+0x134>
        precision = i;
 8011888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801188a:	603b      	str	r3, [r7, #0]
    size -= precision;
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	1ad3      	subs	r3, r2, r3
 8011892:	607b      	str	r3, [r7, #4]
    if (!(type & (ZEROPAD /* TINY option   | LEFT */)))
 8011894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011896:	f003 0301 	and.w	r3, r3, #1
 801189a:	2b00      	cmp	r3, #0
 801189c:	d10b      	bne.n	80118b6 <ee_number+0x15e>
    {
        while (size-- > 0)
 801189e:	e005      	b.n	80118ac <ee_number+0x154>
        {
            put_byte(' ');
 80118a0:	2020      	movs	r0, #32
 80118a2:	f7ff ff0d 	bl	80116c0 <put_byte>
            number_of_byte++;
 80118a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118a8:	3301      	adds	r3, #1
 80118aa:	65bb      	str	r3, [r7, #88]	; 0x58
        while (size-- > 0)
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	1e5a      	subs	r2, r3, #1
 80118b0:	607a      	str	r2, [r7, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	dcf4      	bgt.n	80118a0 <ee_number+0x148>
        }
    }
    if (sign)
 80118b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d007      	beq.n	80118ce <ee_number+0x176>
    {
        put_byte(sign);
 80118be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7ff fefc 	bl	80116c0 <put_byte>
        number_of_byte++;
 80118c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118ca:	3301      	adds	r3, #1
 80118cc:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    if (type & HEX_PREP)
 80118ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80118d0:	f003 0320 	and.w	r3, r3, #32
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d019      	beq.n	801190c <ee_number+0x1b4>
    {
        if (base == 8)
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	2b08      	cmp	r3, #8
 80118dc:	d106      	bne.n	80118ec <ee_number+0x194>
        {
            put_byte('0');
 80118de:	2030      	movs	r0, #48	; 0x30
 80118e0:	f7ff feee 	bl	80116c0 <put_byte>
            number_of_byte++;
 80118e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118e6:	3301      	adds	r3, #1
 80118e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80118ea:	e00f      	b.n	801190c <ee_number+0x1b4>
        }
        else if (base == 16)
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	2b10      	cmp	r3, #16
 80118f0:	d10c      	bne.n	801190c <ee_number+0x1b4>
        {
            put_byte('0');
 80118f2:	2030      	movs	r0, #48	; 0x30
 80118f4:	f7ff fee4 	bl	80116c0 <put_byte>
            put_byte(lower_digits[33]);
 80118f8:	4b25      	ldr	r3, [pc, #148]	; (8011990 <ee_number+0x238>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	3321      	adds	r3, #33	; 0x21
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	4618      	mov	r0, r3
 8011902:	f7ff fedd 	bl	80116c0 <put_byte>
            number_of_byte += 2;
 8011906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011908:	3302      	adds	r3, #2
 801190a:	65bb      	str	r3, [r7, #88]	; 0x58
        }
    }

    if (!(type & LEFT))
 801190c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801190e:	f003 0310 	and.w	r3, r3, #16
 8011912:	2b00      	cmp	r3, #0
 8011914:	d114      	bne.n	8011940 <ee_number+0x1e8>
    {
        while (size-- > 0)
 8011916:	e007      	b.n	8011928 <ee_number+0x1d0>
        {
            put_byte(c);
 8011918:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801191c:	4618      	mov	r0, r3
 801191e:	f7ff fecf 	bl	80116c0 <put_byte>
            number_of_byte++;
 8011922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011924:	3301      	adds	r3, #1
 8011926:	65bb      	str	r3, [r7, #88]	; 0x58
        while (size-- > 0)
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	1e5a      	subs	r2, r3, #1
 801192c:	607a      	str	r2, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	dcf2      	bgt.n	8011918 <ee_number+0x1c0>
        }
    }
    while (i < precision--)
 8011932:	e005      	b.n	8011940 <ee_number+0x1e8>
    {
        put_byte('0');
 8011934:	2030      	movs	r0, #48	; 0x30
 8011936:	f7ff fec3 	bl	80116c0 <put_byte>
        number_of_byte++;
 801193a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801193c:	3301      	adds	r3, #1
 801193e:	65bb      	str	r3, [r7, #88]	; 0x58
    while (i < precision--)
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	1e5a      	subs	r2, r3, #1
 8011944:	603a      	str	r2, [r7, #0]
 8011946:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011948:	429a      	cmp	r2, r3
 801194a:	dbf3      	blt.n	8011934 <ee_number+0x1dc>
    }
    while (i-- > 0)
 801194c:	e00a      	b.n	8011964 <ee_number+0x20c>
    {
        put_byte(tmp[i]);
 801194e:	f107 0214 	add.w	r2, r7, #20
 8011952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011954:	4413      	add	r3, r2
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	4618      	mov	r0, r3
 801195a:	f7ff feb1 	bl	80116c0 <put_byte>
        number_of_byte++;
 801195e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011960:	3301      	adds	r3, #1
 8011962:	65bb      	str	r3, [r7, #88]	; 0x58
    while (i-- > 0)
 8011964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011966:	1e5a      	subs	r2, r3, #1
 8011968:	65fa      	str	r2, [r7, #92]	; 0x5c
 801196a:	2b00      	cmp	r3, #0
 801196c:	dcef      	bgt.n	801194e <ee_number+0x1f6>
    }
    while (size-- > 0)
 801196e:	e005      	b.n	801197c <ee_number+0x224>
    {
        put_byte(' ');
 8011970:	2020      	movs	r0, #32
 8011972:	f7ff fea5 	bl	80116c0 <put_byte>
        number_of_byte++;
 8011976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011978:	3301      	adds	r3, #1
 801197a:	65bb      	str	r3, [r7, #88]	; 0x58
    while (size-- > 0)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	1e5a      	subs	r2, r3, #1
 8011980:	607a      	str	r2, [r7, #4]
 8011982:	2b00      	cmp	r3, #0
 8011984:	dcf4      	bgt.n	8011970 <ee_number+0x218>
    }

    return number_of_byte;
 8011986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8011988:	4618      	mov	r0, r3
 801198a:	3768      	adds	r7, #104	; 0x68
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	2000013c 	.word	0x2000013c
 8011994:	20000140 	.word	0x20000140

08011998 <app_debug_print_raw>:

void app_debug_print_raw(const char *fmt, ...)
{
 8011998:	b40f      	push	{r0, r1, r2, r3}
 801199a:	b580      	push	{r7, lr}
 801199c:	b08e      	sub	sp, #56	; 0x38
 801199e:	af02      	add	r7, sp, #8
    if (m_lock_cb)
 80119a0:	4baf      	ldr	r3, [pc, #700]	; (8011c60 <app_debug_print_raw+0x2c8>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d005      	beq.n	80119b4 <app_debug_print_raw+0x1c>
    {
        m_lock_cb(true, 0xFFFFFFFF);
 80119a8:	4bad      	ldr	r3, [pc, #692]	; (8011c60 <app_debug_print_raw+0x2c8>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f04f 31ff 	mov.w	r1, #4294967295
 80119b0:	2001      	movs	r0, #1
 80119b2:	4798      	blx	r3
    int flags; // Flags to number()

    int field_width; // Width of output field
    int precision;   // Min. # of digits for integers; max number of chars for from string
    int qualifier;   // 'h', 'l', or 'L' for integer fields
    uint32_t nb_of_bytes = 0;
 80119b4:	2300      	movs	r3, #0
 80119b6:	60fb      	str	r3, [r7, #12]
    va_list args;
    va_start(args, fmt);
 80119b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80119bc:	607b      	str	r3, [r7, #4]

    for (; *fmt; fmt++)
 80119be:	e217      	b.n	8011df0 <app_debug_print_raw+0x458>
    {
        if (*fmt != '%')
 80119c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	2b25      	cmp	r3, #37	; 0x25
 80119c6:	d008      	beq.n	80119da <app_debug_print_raw+0x42>
        {
            nb_of_bytes++;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	3301      	adds	r3, #1
 80119cc:	60fb      	str	r3, [r7, #12]
            put_byte(*fmt);
 80119ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7ff fe74 	bl	80116c0 <put_byte>
            continue;
 80119d8:	e207      	b.n	8011dea <app_debug_print_raw+0x452>
        }

        // Process flags
        flags = 0;
 80119da:	2300      	movs	r3, #0
 80119dc:	61fb      	str	r3, [r7, #28]
    repeat:
        fmt++; // This also skips first '%'
 80119de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e0:	3301      	adds	r3, #1
 80119e2:	63bb      	str	r3, [r7, #56]	; 0x38
        switch (*fmt)
 80119e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	3b20      	subs	r3, #32
 80119ea:	2b10      	cmp	r3, #16
 80119ec:	d83d      	bhi.n	8011a6a <app_debug_print_raw+0xd2>
 80119ee:	a201      	add	r2, pc, #4	; (adr r2, 80119f4 <app_debug_print_raw+0x5c>)
 80119f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119f4:	08011a4d 	.word	0x08011a4d
 80119f8:	08011a6b 	.word	0x08011a6b
 80119fc:	08011a6b 	.word	0x08011a6b
 8011a00:	08011a57 	.word	0x08011a57
 8011a04:	08011a6b 	.word	0x08011a6b
 8011a08:	08011a6b 	.word	0x08011a6b
 8011a0c:	08011a6b 	.word	0x08011a6b
 8011a10:	08011a6b 	.word	0x08011a6b
 8011a14:	08011a6b 	.word	0x08011a6b
 8011a18:	08011a6b 	.word	0x08011a6b
 8011a1c:	08011a6b 	.word	0x08011a6b
 8011a20:	08011a43 	.word	0x08011a43
 8011a24:	08011a6b 	.word	0x08011a6b
 8011a28:	08011a39 	.word	0x08011a39
 8011a2c:	08011a6b 	.word	0x08011a6b
 8011a30:	08011a6b 	.word	0x08011a6b
 8011a34:	08011a61 	.word	0x08011a61
        {
        case '-':
            flags |= LEFT;
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	f043 0310 	orr.w	r3, r3, #16
 8011a3e:	61fb      	str	r3, [r7, #28]
            goto repeat;
 8011a40:	e7cd      	b.n	80119de <app_debug_print_raw+0x46>
        case '+':
            flags |= PLUS;
 8011a42:	69fb      	ldr	r3, [r7, #28]
 8011a44:	f043 0304 	orr.w	r3, r3, #4
 8011a48:	61fb      	str	r3, [r7, #28]
            goto repeat;
 8011a4a:	e7c8      	b.n	80119de <app_debug_print_raw+0x46>
        case ' ':
            flags |= SPACE;
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	f043 0308 	orr.w	r3, r3, #8
 8011a52:	61fb      	str	r3, [r7, #28]
            goto repeat;
 8011a54:	e7c3      	b.n	80119de <app_debug_print_raw+0x46>
        case '#':
            flags |= HEX_PREP;
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	f043 0320 	orr.w	r3, r3, #32
 8011a5c:	61fb      	str	r3, [r7, #28]
            goto repeat;
 8011a5e:	e7be      	b.n	80119de <app_debug_print_raw+0x46>
        case '0':
            flags |= ZEROPAD;
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	f043 0301 	orr.w	r3, r3, #1
 8011a66:	61fb      	str	r3, [r7, #28]
            goto repeat;
 8011a68:	e7b9      	b.n	80119de <app_debug_print_raw+0x46>
        }

        // Get field width
        field_width = -1;
 8011a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a6e:	61bb      	str	r3, [r7, #24]
        if (is_digit(*fmt))
 8011a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	2b2f      	cmp	r3, #47	; 0x2f
 8011a76:	d909      	bls.n	8011a8c <app_debug_print_raw+0xf4>
 8011a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	2b39      	cmp	r3, #57	; 0x39
 8011a7e:	d805      	bhi.n	8011a8c <app_debug_print_raw+0xf4>
            field_width = ee_skip_atoi(&fmt);
 8011a80:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8011a84:	f7ff fe40 	bl	8011708 <ee_skip_atoi>
 8011a88:	61b8      	str	r0, [r7, #24]
 8011a8a:	e015      	b.n	8011ab8 <app_debug_print_raw+0x120>
        else if (*fmt == '*')
 8011a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	2b2a      	cmp	r3, #42	; 0x2a
 8011a92:	d111      	bne.n	8011ab8 <app_debug_print_raw+0x120>
        {
            fmt++;
 8011a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a96:	3301      	adds	r3, #1
 8011a98:	63bb      	str	r3, [r7, #56]	; 0x38
            field_width = va_arg(args, int);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	1d1a      	adds	r2, r3, #4
 8011a9e:	607a      	str	r2, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	61bb      	str	r3, [r7, #24]
            if (field_width < 0)
 8011aa4:	69bb      	ldr	r3, [r7, #24]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	da06      	bge.n	8011ab8 <app_debug_print_raw+0x120>
            {
                field_width = -field_width;
 8011aaa:	69bb      	ldr	r3, [r7, #24]
 8011aac:	425b      	negs	r3, r3
 8011aae:	61bb      	str	r3, [r7, #24]
                flags |= LEFT;
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	f043 0310 	orr.w	r3, r3, #16
 8011ab6:	61fb      	str	r3, [r7, #28]
            }
        }

        // Get the precision
        precision = -1;
 8011ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8011abc:	617b      	str	r3, [r7, #20]
        if (*fmt == '.')
 8011abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ac4:	d121      	bne.n	8011b0a <app_debug_print_raw+0x172>
        {
            ++fmt;
 8011ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac8:	3301      	adds	r3, #1
 8011aca:	63bb      	str	r3, [r7, #56]	; 0x38
            if (is_digit(*fmt))
 8011acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	2b2f      	cmp	r3, #47	; 0x2f
 8011ad2:	d909      	bls.n	8011ae8 <app_debug_print_raw+0x150>
 8011ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	2b39      	cmp	r3, #57	; 0x39
 8011ada:	d805      	bhi.n	8011ae8 <app_debug_print_raw+0x150>
                precision = ee_skip_atoi(&fmt);
 8011adc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8011ae0:	f7ff fe12 	bl	8011708 <ee_skip_atoi>
 8011ae4:	6178      	str	r0, [r7, #20]
 8011ae6:	e00b      	b.n	8011b00 <app_debug_print_raw+0x168>
            else if (*fmt == '*')
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	2b2a      	cmp	r3, #42	; 0x2a
 8011aee:	d107      	bne.n	8011b00 <app_debug_print_raw+0x168>
            {
                ++fmt;
 8011af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af2:	3301      	adds	r3, #1
 8011af4:	63bb      	str	r3, [r7, #56]	; 0x38
                precision = va_arg(args, int);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	1d1a      	adds	r2, r3, #4
 8011afa:	607a      	str	r2, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	617b      	str	r3, [r7, #20]
            }
            if (precision < 0)
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	da01      	bge.n	8011b0a <app_debug_print_raw+0x172>
                precision = 0;
 8011b06:	2300      	movs	r3, #0
 8011b08:	617b      	str	r3, [r7, #20]
        }

        // Get the conversion qualifier
        qualifier = -1;
 8011b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b0e:	613b      	str	r3, [r7, #16]
        if (*fmt == 'l' || *fmt == 'L')
 8011b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	2b6c      	cmp	r3, #108	; 0x6c
 8011b16:	d003      	beq.n	8011b20 <app_debug_print_raw+0x188>
 8011b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	2b4c      	cmp	r3, #76	; 0x4c
 8011b1e:	d105      	bne.n	8011b2c <app_debug_print_raw+0x194>
        {
            qualifier = *fmt;
 8011b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	613b      	str	r3, [r7, #16]
            fmt++;
 8011b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b28:	3301      	adds	r3, #1
 8011b2a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        // Default base
        base = 10;
 8011b2c:	230a      	movs	r3, #10
 8011b2e:	62bb      	str	r3, [r7, #40]	; 0x28

        switch (*fmt)
 8011b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	3b41      	subs	r3, #65	; 0x41
 8011b36:	2b37      	cmp	r3, #55	; 0x37
 8011b38:	f200 8115 	bhi.w	8011d66 <app_debug_print_raw+0x3ce>
 8011b3c:	a201      	add	r2, pc, #4	; (adr r2, 8011b44 <app_debug_print_raw+0x1ac>)
 8011b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b42:	bf00      	nop
 8011b44:	08011d41 	.word	0x08011d41
 8011b48:	08011d67 	.word	0x08011d67
 8011b4c:	08011d67 	.word	0x08011d67
 8011b50:	08011d67 	.word	0x08011d67
 8011b54:	08011d67 	.word	0x08011d67
 8011b58:	08011d67 	.word	0x08011d67
 8011b5c:	08011d67 	.word	0x08011d67
 8011b60:	08011d67 	.word	0x08011d67
 8011b64:	08011d67 	.word	0x08011d67
 8011b68:	08011d67 	.word	0x08011d67
 8011b6c:	08011d67 	.word	0x08011d67
 8011b70:	08011d67 	.word	0x08011d67
 8011b74:	08011d67 	.word	0x08011d67
 8011b78:	08011d67 	.word	0x08011d67
 8011b7c:	08011d67 	.word	0x08011d67
 8011b80:	08011d67 	.word	0x08011d67
 8011b84:	08011d67 	.word	0x08011d67
 8011b88:	08011d67 	.word	0x08011d67
 8011b8c:	08011d67 	.word	0x08011d67
 8011b90:	08011d67 	.word	0x08011d67
 8011b94:	08011d67 	.word	0x08011d67
 8011b98:	08011d67 	.word	0x08011d67
 8011b9c:	08011d67 	.word	0x08011d67
 8011ba0:	08011d4f 	.word	0x08011d4f
 8011ba4:	08011d67 	.word	0x08011d67
 8011ba8:	08011d67 	.word	0x08011d67
 8011bac:	08011d67 	.word	0x08011d67
 8011bb0:	08011d67 	.word	0x08011d67
 8011bb4:	08011d67 	.word	0x08011d67
 8011bb8:	08011d67 	.word	0x08011d67
 8011bbc:	08011d67 	.word	0x08011d67
 8011bc0:	08011d67 	.word	0x08011d67
 8011bc4:	08011d67 	.word	0x08011d67
 8011bc8:	08011d67 	.word	0x08011d67
 8011bcc:	08011c25 	.word	0x08011c25
 8011bd0:	08011d5d 	.word	0x08011d5d
 8011bd4:	08011d67 	.word	0x08011d67
 8011bd8:	08011d67 	.word	0x08011d67
 8011bdc:	08011d67 	.word	0x08011d67
 8011be0:	08011d67 	.word	0x08011d67
 8011be4:	08011d5d 	.word	0x08011d5d
 8011be8:	08011d67 	.word	0x08011d67
 8011bec:	08011d67 	.word	0x08011d67
 8011bf0:	08011d67 	.word	0x08011d67
 8011bf4:	08011d67 	.word	0x08011d67
 8011bf8:	08011d67 	.word	0x08011d67
 8011bfc:	08011d49 	.word	0x08011d49
 8011c00:	08011d09 	.word	0x08011d09
 8011c04:	08011d67 	.word	0x08011d67
 8011c08:	08011d67 	.word	0x08011d67
 8011c0c:	08011c7f 	.word	0x08011c7f
 8011c10:	08011d67 	.word	0x08011d67
 8011c14:	08011d9d 	.word	0x08011d9d
 8011c18:	08011d67 	.word	0x08011d67
 8011c1c:	08011d67 	.word	0x08011d67
 8011c20:	08011d57 	.word	0x08011d57
        {
        case 'c':
            if (!(flags & LEFT))
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	f003 0310 	and.w	r3, r3, #16
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d10c      	bne.n	8011c48 <app_debug_print_raw+0x2b0>
            {
                while (--field_width > 0)
 8011c2e:	e005      	b.n	8011c3c <app_debug_print_raw+0x2a4>
                {
                    put_byte(' ');
 8011c30:	2020      	movs	r0, #32
 8011c32:	f7ff fd45 	bl	80116c0 <put_byte>
                    nb_of_bytes++;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	3301      	adds	r3, #1
 8011c3a:	60fb      	str	r3, [r7, #12]
                while (--field_width > 0)
 8011c3c:	69bb      	ldr	r3, [r7, #24]
 8011c3e:	3b01      	subs	r3, #1
 8011c40:	61bb      	str	r3, [r7, #24]
 8011c42:	69bb      	ldr	r3, [r7, #24]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	dcf3      	bgt.n	8011c30 <app_debug_print_raw+0x298>
                };
            }

            put_byte((unsigned char)va_arg(args, int));
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	1d1a      	adds	r2, r3, #4
 8011c4c:	607a      	str	r2, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7ff fd34 	bl	80116c0 <put_byte>
            nb_of_bytes++;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	60fb      	str	r3, [r7, #12]

            while (--field_width > 0)
 8011c5e:	e007      	b.n	8011c70 <app_debug_print_raw+0x2d8>
 8011c60:	20008eec 	.word	0x20008eec
            {
                put_byte(' ');
 8011c64:	2020      	movs	r0, #32
 8011c66:	f7ff fd2b 	bl	80116c0 <put_byte>
                nb_of_bytes++;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	60fb      	str	r3, [r7, #12]
            while (--field_width > 0)
 8011c70:	69bb      	ldr	r3, [r7, #24]
 8011c72:	3b01      	subs	r3, #1
 8011c74:	61bb      	str	r3, [r7, #24]
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	dcf3      	bgt.n	8011c64 <app_debug_print_raw+0x2cc>
            };
            continue;
 8011c7c:	e0b5      	b.n	8011dea <app_debug_print_raw+0x452>

        case 's':
            s = va_arg(args, char *);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	1d1a      	adds	r2, r3, #4
 8011c82:	607a      	str	r2, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	623b      	str	r3, [r7, #32]
            if (!s)
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d101      	bne.n	8011c92 <app_debug_print_raw+0x2fa>
            {
                s = "<NULL>";
 8011c8e:	4b63      	ldr	r3, [pc, #396]	; (8011e1c <app_debug_print_raw+0x484>)
 8011c90:	623b      	str	r3, [r7, #32]
            }

            len = __strnlen(s, precision);
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	4619      	mov	r1, r3
 8011c96:	6a38      	ldr	r0, [r7, #32]
 8011c98:	f7ff fcc8 	bl	801162c <__strnlen>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	60bb      	str	r3, [r7, #8]
            if (!(flags & LEFT))
 8011ca0:	69fb      	ldr	r3, [r7, #28]
 8011ca2:	f003 0310 	and.w	r3, r3, #16
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d10c      	bne.n	8011cc4 <app_debug_print_raw+0x32c>
            {
                while (len < field_width--)
 8011caa:	e005      	b.n	8011cb8 <app_debug_print_raw+0x320>
                {
                    put_byte(' ');
 8011cac:	2020      	movs	r0, #32
 8011cae:	f7ff fd07 	bl	80116c0 <put_byte>
                    nb_of_bytes++;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	60fb      	str	r3, [r7, #12]
                while (len < field_width--)
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	1e5a      	subs	r2, r3, #1
 8011cbc:	61ba      	str	r2, [r7, #24]
 8011cbe:	68ba      	ldr	r2, [r7, #8]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	dbf3      	blt.n	8011cac <app_debug_print_raw+0x314>
                };
            }
            for (i = 0; i < len; ++i)
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8011cc8:	e00c      	b.n	8011ce4 <app_debug_print_raw+0x34c>
            {
                put_byte(*s++);
 8011cca:	6a3b      	ldr	r3, [r7, #32]
 8011ccc:	1c5a      	adds	r2, r3, #1
 8011cce:	623a      	str	r2, [r7, #32]
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7ff fcf4 	bl	80116c0 <put_byte>
                nb_of_bytes++;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	3301      	adds	r3, #1
 8011cdc:	60fb      	str	r3, [r7, #12]
            for (i = 0; i < len; ++i)
 8011cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8011ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	dbee      	blt.n	8011cca <app_debug_print_raw+0x332>
            };

            while (len < field_width--)
 8011cec:	e005      	b.n	8011cfa <app_debug_print_raw+0x362>
            {
                put_byte(' ');
 8011cee:	2020      	movs	r0, #32
 8011cf0:	f7ff fce6 	bl	80116c0 <put_byte>
                nb_of_bytes++;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	60fb      	str	r3, [r7, #12]
            while (len < field_width--)
 8011cfa:	69bb      	ldr	r3, [r7, #24]
 8011cfc:	1e5a      	subs	r2, r3, #1
 8011cfe:	61ba      	str	r2, [r7, #24]
 8011d00:	68ba      	ldr	r2, [r7, #8]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	dbf3      	blt.n	8011cee <app_debug_print_raw+0x356>
            };
            continue;
 8011d06:	e070      	b.n	8011dea <app_debug_print_raw+0x452>

        case 'p':
            if (field_width == -1)
 8011d08:	69bb      	ldr	r3, [r7, #24]
 8011d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d0e:	d105      	bne.n	8011d1c <app_debug_print_raw+0x384>
            {
                field_width = 2 * sizeof(void *);
 8011d10:	2308      	movs	r3, #8
 8011d12:	61bb      	str	r3, [r7, #24]
                flags |= ZEROPAD;
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	f043 0301 	orr.w	r3, r3, #1
 8011d1a:	61fb      	str	r3, [r7, #28]
            }
            nb_of_bytes += ee_number((unsigned long)va_arg(args, void *), 16, field_width, precision, flags);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	1d1a      	adds	r2, r3, #4
 8011d20:	607a      	str	r2, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	4618      	mov	r0, r3
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	9300      	str	r3, [sp, #0]
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	69ba      	ldr	r2, [r7, #24]
 8011d2e:	2110      	movs	r1, #16
 8011d30:	f7ff fd12 	bl	8011758 <ee_number>
 8011d34:	4603      	mov	r3, r0
 8011d36:	461a      	mov	r2, r3
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	4413      	add	r3, r2
 8011d3c:	60fb      	str	r3, [r7, #12]
            continue;
 8011d3e:	e054      	b.n	8011dea <app_debug_print_raw+0x452>

        case 'A':
            flags |= UPPERCASE;
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d46:	61fb      	str	r3, [r7, #28]
        //         str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
        //     continue;

        // Integer number formats - set up the flags and "break"
        case 'o':
            base = 8;
 8011d48:	2308      	movs	r3, #8
 8011d4a:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8011d4c:	e027      	b.n	8011d9e <app_debug_print_raw+0x406>

        case 'X':
            flags |= UPPERCASE;
 8011d4e:	69fb      	ldr	r3, [r7, #28]
 8011d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d54:	61fb      	str	r3, [r7, #28]

        case 'x':
            base = 16;
 8011d56:	2310      	movs	r3, #16
 8011d58:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8011d5a:	e020      	b.n	8011d9e <app_debug_print_raw+0x406>

        case 'd':
        case 'i':
            flags |= SIGN;
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	f043 0302 	orr.w	r3, r3, #2
 8011d62:	61fb      	str	r3, [r7, #28]

        case 'u':
            break;
 8011d64:	e01a      	b.n	8011d9c <app_debug_print_raw+0x404>
            continue;

#endif

        default:
            if (*fmt != '%')
 8011d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	2b25      	cmp	r3, #37	; 0x25
 8011d6c:	d005      	beq.n	8011d7a <app_debug_print_raw+0x3e2>
            {
                put_byte('%');
 8011d6e:	2025      	movs	r0, #37	; 0x25
 8011d70:	f7ff fca6 	bl	80116c0 <put_byte>
                nb_of_bytes++;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	3301      	adds	r3, #1
 8011d78:	60fb      	str	r3, [r7, #12]
            }
            if (*fmt)
 8011d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d008      	beq.n	8011d94 <app_debug_print_raw+0x3fc>
            {
                put_byte(*fmt);
 8011d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d84:	781b      	ldrb	r3, [r3, #0]
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7ff fc9a 	bl	80116c0 <put_byte>
                nb_of_bytes++;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	3301      	adds	r3, #1
 8011d90:	60fb      	str	r3, [r7, #12]
            }
            else
            {
                --fmt;
            }
            continue;
 8011d92:	e02a      	b.n	8011dea <app_debug_print_raw+0x452>
                --fmt;
 8011d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d96:	3b01      	subs	r3, #1
 8011d98:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
 8011d9a:	e026      	b.n	8011dea <app_debug_print_raw+0x452>
            break;
 8011d9c:	bf00      	nop
        }

        if (qualifier == 'l')
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	2b6c      	cmp	r3, #108	; 0x6c
 8011da2:	d105      	bne.n	8011db0 <app_debug_print_raw+0x418>
            num = va_arg(args, unsigned long);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	1d1a      	adds	r2, r3, #4
 8011da8:	607a      	str	r2, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dae:	e00f      	b.n	8011dd0 <app_debug_print_raw+0x438>
        else if (flags & SIGN)
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	f003 0302 	and.w	r3, r3, #2
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d005      	beq.n	8011dc6 <app_debug_print_raw+0x42e>
            num = va_arg(args, int);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	1d1a      	adds	r2, r3, #4
 8011dbe:	607a      	str	r2, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dc4:	e004      	b.n	8011dd0 <app_debug_print_raw+0x438>
        else
            num = va_arg(args, unsigned int);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	1d1a      	adds	r2, r3, #4
 8011dca:	607a      	str	r2, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	62fb      	str	r3, [r7, #44]	; 0x2c

        nb_of_bytes += ee_number(num, base, field_width, precision, flags);
 8011dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	69ba      	ldr	r2, [r7, #24]
 8011dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ddc:	f7ff fcbc 	bl	8011758 <ee_number>
 8011de0:	4603      	mov	r3, r0
 8011de2:	461a      	mov	r2, r3
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	4413      	add	r3, r2
 8011de8:	60fb      	str	r3, [r7, #12]
    for (; *fmt; fmt++)
 8011dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dec:	3301      	adds	r3, #1
 8011dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8011df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	f47f ade3 	bne.w	80119c0 <app_debug_print_raw+0x28>
    }
    va_end(args);


    if (m_lock_cb)
 8011dfa:	4b09      	ldr	r3, [pc, #36]	; (8011e20 <app_debug_print_raw+0x488>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d004      	beq.n	8011e0c <app_debug_print_raw+0x474>
    {
        m_lock_cb(false, 0);
 8011e02:	4b07      	ldr	r3, [pc, #28]	; (8011e20 <app_debug_print_raw+0x488>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	2100      	movs	r1, #0
 8011e08:	2000      	movs	r0, #0
 8011e0a:	4798      	blx	r3
    }
    // return nb_of_bytes;
}
 8011e0c:	bf00      	nop
 8011e0e:	3730      	adds	r7, #48	; 0x30
 8011e10:	46bd      	mov	sp, r7
 8011e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011e16:	b004      	add	sp, #16
 8011e18:	4770      	bx	lr
 8011e1a:	bf00      	nop
 8011e1c:	0801b100 	.word	0x0801b100
 8011e20:	20008eec 	.word	0x20008eec

08011e24 <app_debug_register_callback_print>:
        m_lock_cb(false, 0);
    }
}

void app_debug_register_callback_print(app_debug_output_cb_t callback)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
    if (m_lock_cb)
 8011e2c:	4b1e      	ldr	r3, [pc, #120]	; (8011ea8 <app_debug_register_callback_print+0x84>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d005      	beq.n	8011e40 <app_debug_register_callback_print+0x1c>
    {
        m_lock_cb(true, 0xFFFFFFFF);
 8011e34:	4b1c      	ldr	r3, [pc, #112]	; (8011ea8 <app_debug_register_callback_print+0x84>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f04f 31ff 	mov.w	r1, #4294967295
 8011e3c:	2001      	movs	r0, #1
 8011e3e:	4798      	blx	r3
    }
    uint8_t callback_exist = 0; // Check for existion function pointer in function pointer arry
 8011e40:	2300      	movs	r3, #0
 8011e42:	73fb      	strb	r3, [r7, #15]
    if (callback)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d021      	beq.n	8011e8e <app_debug_register_callback_print+0x6a>
    {
        for (uint8_t func_count = 0; func_count < APP_DEBUG_NUMBER_OF_DEBUG_PORT; func_count++)
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	73bb      	strb	r3, [r7, #14]
 8011e4e:	e00b      	b.n	8011e68 <app_debug_register_callback_print+0x44>
        {
            if (callback == m_write_cb[func_count])
 8011e50:	7bbb      	ldrb	r3, [r7, #14]
 8011e52:	4a16      	ldr	r2, [pc, #88]	; (8011eac <app_debug_register_callback_print+0x88>)
 8011e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d101      	bne.n	8011e62 <app_debug_register_callback_print+0x3e>
            {
                // Callback already existed in array
                callback_exist = 1;
 8011e5e:	2301      	movs	r3, #1
 8011e60:	73fb      	strb	r3, [r7, #15]
        for (uint8_t func_count = 0; func_count < APP_DEBUG_NUMBER_OF_DEBUG_PORT; func_count++)
 8011e62:	7bbb      	ldrb	r3, [r7, #14]
 8011e64:	3301      	adds	r3, #1
 8011e66:	73bb      	strb	r3, [r7, #14]
 8011e68:	7bbb      	ldrb	r3, [r7, #14]
 8011e6a:	2b03      	cmp	r3, #3
 8011e6c:	d9f0      	bls.n	8011e50 <app_debug_register_callback_print+0x2c>
            }
        }

        if (!callback_exist)
 8011e6e:	7bfb      	ldrb	r3, [r7, #15]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d10c      	bne.n	8011e8e <app_debug_register_callback_print+0x6a>
        {
            m_write_cb[number_of_callback] = callback;
 8011e74:	4b0e      	ldr	r3, [pc, #56]	; (8011eb0 <app_debug_register_callback_print+0x8c>)
 8011e76:	781b      	ldrb	r3, [r3, #0]
 8011e78:	4619      	mov	r1, r3
 8011e7a:	4a0c      	ldr	r2, [pc, #48]	; (8011eac <app_debug_register_callback_print+0x88>)
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            number_of_callback++;
 8011e82:	4b0b      	ldr	r3, [pc, #44]	; (8011eb0 <app_debug_register_callback_print+0x8c>)
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	3301      	adds	r3, #1
 8011e88:	b2da      	uxtb	r2, r3
 8011e8a:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <app_debug_register_callback_print+0x8c>)
 8011e8c:	701a      	strb	r2, [r3, #0]
        }
    }
    if (m_lock_cb)
 8011e8e:	4b06      	ldr	r3, [pc, #24]	; (8011ea8 <app_debug_register_callback_print+0x84>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d004      	beq.n	8011ea0 <app_debug_register_callback_print+0x7c>
    {
        m_lock_cb(false, 0);
 8011e96:	4b04      	ldr	r3, [pc, #16]	; (8011ea8 <app_debug_register_callback_print+0x84>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2100      	movs	r1, #0
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	4798      	blx	r3
    }
}
 8011ea0:	bf00      	nop
 8011ea2:	3710      	adds	r7, #16
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	20008eec 	.word	0x20008eec
 8011eac:	20008ed4 	.word	0x20008ed4
 8011eb0:	20008ee4 	.word	0x20008ee4

08011eb4 <app_debug_unregister_callback_print>:

void app_debug_unregister_callback_print(app_debug_output_cb_t callback)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
    if (m_lock_cb)
 8011ebc:	4b16      	ldr	r3, [pc, #88]	; (8011f18 <app_debug_unregister_callback_print+0x64>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d005      	beq.n	8011ed0 <app_debug_unregister_callback_print+0x1c>
    {
        m_lock_cb(true, 0xFFFFFFFF);
 8011ec4:	4b14      	ldr	r3, [pc, #80]	; (8011f18 <app_debug_unregister_callback_print+0x64>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8011ecc:	2001      	movs	r0, #1
 8011ece:	4798      	blx	r3
    }
    for (uint8_t func_count = 0; func_count < APP_DEBUG_NUMBER_OF_DEBUG_PORT; func_count++)
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	73fb      	strb	r3, [r7, #15]
 8011ed4:	e00f      	b.n	8011ef6 <app_debug_unregister_callback_print+0x42>
    {
        if (callback == m_write_cb[func_count])
 8011ed6:	7bfb      	ldrb	r3, [r7, #15]
 8011ed8:	4a10      	ldr	r2, [pc, #64]	; (8011f1c <app_debug_unregister_callback_print+0x68>)
 8011eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d105      	bne.n	8011ef0 <app_debug_unregister_callback_print+0x3c>
        {
            number_of_callback--;
 8011ee4:	4b0e      	ldr	r3, [pc, #56]	; (8011f20 <app_debug_unregister_callback_print+0x6c>)
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	3b01      	subs	r3, #1
 8011eea:	b2da      	uxtb	r2, r3
 8011eec:	4b0c      	ldr	r3, [pc, #48]	; (8011f20 <app_debug_unregister_callback_print+0x6c>)
 8011eee:	701a      	strb	r2, [r3, #0]
    for (uint8_t func_count = 0; func_count < APP_DEBUG_NUMBER_OF_DEBUG_PORT; func_count++)
 8011ef0:	7bfb      	ldrb	r3, [r7, #15]
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	73fb      	strb	r3, [r7, #15]
 8011ef6:	7bfb      	ldrb	r3, [r7, #15]
 8011ef8:	2b03      	cmp	r3, #3
 8011efa:	d9ec      	bls.n	8011ed6 <app_debug_unregister_callback_print+0x22>
        }
    }
    if (m_lock_cb)
 8011efc:	4b06      	ldr	r3, [pc, #24]	; (8011f18 <app_debug_unregister_callback_print+0x64>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d004      	beq.n	8011f0e <app_debug_unregister_callback_print+0x5a>
    {
        m_lock_cb(false, 0);
 8011f04:	4b04      	ldr	r3, [pc, #16]	; (8011f18 <app_debug_unregister_callback_print+0x64>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	2100      	movs	r1, #0
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	4798      	blx	r3
    }
}
 8011f0e:	bf00      	nop
 8011f10:	3710      	adds	r7, #16
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	20008eec 	.word	0x20008eec
 8011f1c:	20008ed4 	.word	0x20008ed4
 8011f20:	20008ee4 	.word	0x20008ee4

08011f24 <tud_msc_inquiry_cb>:


// Invoked when received SCSI_CMD_INQUIRY
// Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
{
 8011f24:	b590      	push	{r4, r7, lr}
 8011f26:	b08d      	sub	sp, #52	; 0x34
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60b9      	str	r1, [r7, #8]
 8011f2c:	607a      	str	r2, [r7, #4]
 8011f2e:	603b      	str	r3, [r7, #0]
 8011f30:	4603      	mov	r3, r0
 8011f32:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  const char vid[] = "BSAFE";
 8011f34:	4a1b      	ldr	r2, [pc, #108]	; (8011fa4 <tud_msc_inquiry_cb+0x80>)
 8011f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f3e:	6018      	str	r0, [r3, #0]
 8011f40:	3304      	adds	r3, #4
 8011f42:	8019      	strh	r1, [r3, #0]
  const char pid[] = "Mass Storage";
 8011f44:	4b18      	ldr	r3, [pc, #96]	; (8011fa8 <tud_msc_inquiry_cb+0x84>)
 8011f46:	f107 0418 	add.w	r4, r7, #24
 8011f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011f4c:	c407      	stmia	r4!, {r0, r1, r2}
 8011f4e:	7023      	strb	r3, [r4, #0]
  const char rev[] = "1.0";
 8011f50:	4b16      	ldr	r3, [pc, #88]	; (8011fac <tud_msc_inquiry_cb+0x88>)
 8011f52:	617b      	str	r3, [r7, #20]

  memcpy(vendor_id  , vid, strlen(vid));
 8011f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7ee f943 	bl	80001e4 <strlen>
 8011f5e:	4602      	mov	r2, r0
 8011f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f64:	4619      	mov	r1, r3
 8011f66:	68b8      	ldr	r0, [r7, #8]
 8011f68:	f007 f855 	bl	8019016 <memcpy>
  memcpy(product_id , pid, strlen(pid));
 8011f6c:	f107 0318 	add.w	r3, r7, #24
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7ee f937 	bl	80001e4 <strlen>
 8011f76:	4602      	mov	r2, r0
 8011f78:	f107 0318 	add.w	r3, r7, #24
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f007 f849 	bl	8019016 <memcpy>
  memcpy(product_rev, rev, strlen(rev));
 8011f84:	f107 0314 	add.w	r3, r7, #20
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ee f92b 	bl	80001e4 <strlen>
 8011f8e:	4602      	mov	r2, r0
 8011f90:	f107 0314 	add.w	r3, r7, #20
 8011f94:	4619      	mov	r1, r3
 8011f96:	6838      	ldr	r0, [r7, #0]
 8011f98:	f007 f83d 	bl	8019016 <memcpy>
}
 8011f9c:	bf00      	nop
 8011f9e:	3734      	adds	r7, #52	; 0x34
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd90      	pop	{r4, r7, pc}
 8011fa4:	0801b144 	.word	0x0801b144
 8011fa8:	0801b14c 	.word	0x0801b14c
 8011fac:	00302e31 	.word	0x00302e31

08011fb0 <tud_msc_test_unit_ready_cb>:


// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun)
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	71fb      	strb	r3, [r7, #7]
  (void) lun;

  return true; // RAM disk is always ready
 8011fba:	2301      	movs	r3, #1
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	370c      	adds	r7, #12
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr

08011fc8 <tud_msc_capacity_cb>:
// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
uint32_t m_disk_block_size = 4096;

void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b086      	sub	sp, #24
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	4603      	mov	r3, r0
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
 8011fd4:	73fb      	strb	r3, [r7, #15]
  (void) lun;
  if (lun > 0)
 8011fd6:	7bfb      	ldrb	r3, [r7, #15]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d008      	beq.n	8011fee <tud_msc_capacity_cb+0x26>
  {
	  DEBUG_ERROR("invalid lun number %u", lun);
 8011fdc:	f7ff fb60 	bl	80116a0 <app_debug_get_ms>
 8011fe0:	4601      	mov	r1, r0
 8011fe2:	7bfb      	ldrb	r3, [r7, #15]
 8011fe4:	4a14      	ldr	r2, [pc, #80]	; (8012038 <tud_msc_capacity_cb+0x70>)
 8011fe6:	4815      	ldr	r0, [pc, #84]	; (801203c <tud_msc_capacity_cb+0x74>)
 8011fe8:	f7ff fcd6 	bl	8011998 <app_debug_print_raw>
 8011fec:	e020      	b.n	8012030 <tud_msc_capacity_cb+0x68>

//  *block_count = DISK_BLOCK_NUM; //m_spi_flash.info.size/DISK_BLOCK_SIZE;
//  *block_size  = DISK_BLOCK_SIZE;
//  DEBUG_VERBOSE("Block count %u, size %u\r\n", *block_count, *block_size);
	uint32_t tmp;
	disk_ioctl(0, GET_SECTOR_COUNT, &tmp);
 8011fee:	f107 0314 	add.w	r3, r7, #20
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	2101      	movs	r1, #1
 8011ff6:	2000      	movs	r0, #0
 8011ff8:	f7f8 f8e4 	bl	800a1c4 <disk_ioctl>
	*block_count = tmp;
 8011ffc:	697a      	ldr	r2, [r7, #20]
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	601a      	str	r2, [r3, #0]
	disk_ioctl(0, GET_SECTOR_SIZE, &tmp);
 8012002:	f107 0314 	add.w	r3, r7, #20
 8012006:	461a      	mov	r2, r3
 8012008:	2102      	movs	r1, #2
 801200a:	2000      	movs	r0, #0
 801200c:	f7f8 f8da 	bl	800a1c4 <disk_ioctl>
	*block_size = tmp;
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	b29a      	uxth	r2, r3
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	801a      	strh	r2, [r3, #0]
//	m_disk_block_size = *block_size;
	if (!m_disk_cache.wr_buffer)
 8012018:	4b09      	ldr	r3, [pc, #36]	; (8012040 <tud_msc_capacity_cb+0x78>)
 801201a:	689b      	ldr	r3, [r3, #8]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d107      	bne.n	8012030 <tud_msc_capacity_cb+0x68>
	{
		m_disk_cache.wr_buffer = pvPortMalloc(m_disk_block_size);
 8012020:	4b08      	ldr	r3, [pc, #32]	; (8012044 <tud_msc_capacity_cb+0x7c>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	4618      	mov	r0, r3
 8012026:	f7fd f80f 	bl	800f048 <pvPortMalloc>
 801202a:	4603      	mov	r3, r0
 801202c:	4a04      	ldr	r2, [pc, #16]	; (8012040 <tud_msc_capacity_cb+0x78>)
 801202e:	6093      	str	r3, [r2, #8]
	}
	DEBUG_VERBOSE("Disk has %u block, size of block %u\r\n", *block_count, m_disk_block_size);
}
 8012030:	3718      	adds	r7, #24
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	0801b15c 	.word	0x0801b15c
 801203c:	0801b160 	.word	0x0801b160
 8012040:	20000144 	.word	0x20000144
 8012044:	20000150 	.word	0x20000150

08012048 <tud_msc_start_stop_cb>:
// Invoked when received Start Stop Unit command
// - Start = 0 : stopped power mode, if load_eject = 1 : unload disk storage
// - Start = 1 : active mode, if load_eject = 1 : load disk storage

bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject)
{
 8012048:	b490      	push	{r4, r7}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	4604      	mov	r4, r0
 8012050:	4608      	mov	r0, r1
 8012052:	4611      	mov	r1, r2
 8012054:	461a      	mov	r2, r3
 8012056:	4623      	mov	r3, r4
 8012058:	71fb      	strb	r3, [r7, #7]
 801205a:	4603      	mov	r3, r0
 801205c:	71bb      	strb	r3, [r7, #6]
 801205e:	460b      	mov	r3, r1
 8012060:	717b      	strb	r3, [r7, #5]
 8012062:	4613      	mov	r3, r2
 8012064:	713b      	strb	r3, [r7, #4]
    {
      // unload disk storage
    }
  }

  return true;
 8012066:	2301      	movs	r3, #1
}
 8012068:	4618      	mov	r0, r3
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bc90      	pop	{r4, r7}
 8012070:	4770      	bx	lr
	...

08012074 <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b086      	sub	sp, #24
 8012078:	af00      	add	r7, sp, #0
 801207a:	60b9      	str	r1, [r7, #8]
 801207c:	607a      	str	r2, [r7, #4]
 801207e:	603b      	str	r3, [r7, #0]
 8012080:	4603      	mov	r3, r0
 8012082:	73fb      	strb	r3, [r7, #15]
	 if (lun != 0)
 8012084:	7bfb      	ldrb	r3, [r7, #15]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d009      	beq.n	801209e <tud_msc_read10_cb+0x2a>
	 {
		DEBUG_ERROR("Invalid lun number %u", lun);
 801208a:	f7ff fb09 	bl	80116a0 <app_debug_get_ms>
 801208e:	4601      	mov	r1, r0
 8012090:	7bfb      	ldrb	r3, [r7, #15]
 8012092:	4a25      	ldr	r2, [pc, #148]	; (8012128 <tud_msc_read10_cb+0xb4>)
 8012094:	4825      	ldr	r0, [pc, #148]	; (801212c <tud_msc_read10_cb+0xb8>)
 8012096:	f7ff fc7f 	bl	8011998 <app_debug_print_raw>
		return 0;
 801209a:	2300      	movs	r3, #0
 801209c:	e040      	b.n	8012120 <tud_msc_read10_cb+0xac>
	}

	const uint32_t block_count = (bufsize + m_disk_block_size -1) / m_disk_block_size;
 801209e:	4b24      	ldr	r3, [pc, #144]	; (8012130 <tud_msc_read10_cb+0xbc>)
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	6a3b      	ldr	r3, [r7, #32]
 80120a4:	4413      	add	r3, r2
 80120a6:	1e5a      	subs	r2, r3, #1
 80120a8:	4b21      	ldr	r3, [pc, #132]	; (8012130 <tud_msc_read10_cb+0xbc>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80120b0:	617b      	str	r3, [r7, #20]
	if (bufsize < m_disk_block_size)
 80120b2:	4b1f      	ldr	r3, [pc, #124]	; (8012130 <tud_msc_read10_cb+0xbc>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	6a3a      	ldr	r2, [r7, #32]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d226      	bcs.n	801210a <tud_msc_read10_cb+0x96>
	{
		if (m_disk_cache.wr_sector == -1
 80120bc:	4b1d      	ldr	r3, [pc, #116]	; (8012134 <tud_msc_read10_cb+0xc0>)
 80120be:	685b      	ldr	r3, [r3, #4]
 80120c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120c4:	d009      	beq.n	80120da <tud_msc_read10_cb+0x66>
			|| m_disk_cache.rd_sector == -1
 80120c6:	4b1b      	ldr	r3, [pc, #108]	; (8012134 <tud_msc_read10_cb+0xc0>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ce:	d004      	beq.n	80120da <tud_msc_read10_cb+0x66>
			|| lba != m_disk_cache.rd_sector)		// If invalid sector =>> read data from flash immediately
 80120d0:	4b18      	ldr	r3, [pc, #96]	; (8012134 <tud_msc_read10_cb+0xc0>)
 80120d2:	681a      	ldr	r2, [r3, #0]
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d00c      	beq.n	80120f4 <tud_msc_read10_cb+0x80>
		{
			DEBUG_VERBOSE("Read from flash\r\n");
			m_disk_cache.rd_sector = lba;
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	4a15      	ldr	r2, [pc, #84]	; (8012134 <tud_msc_read10_cb+0xc0>)
 80120de:	6013      	str	r3, [r2, #0]
			m_disk_cache.wr_sector = lba;
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	4a14      	ldr	r2, [pc, #80]	; (8012134 <tud_msc_read10_cb+0xc0>)
 80120e4:	6053      	str	r3, [r2, #4]
			disk_read(0, m_disk_cache.wr_buffer, lba, block_count);
 80120e6:	4b13      	ldr	r3, [pc, #76]	; (8012134 <tud_msc_read10_cb+0xc0>)
 80120e8:	6899      	ldr	r1, [r3, #8]
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	68ba      	ldr	r2, [r7, #8]
 80120ee:	2000      	movs	r0, #0
 80120f0:	f7f8 f828 	bl	800a144 <disk_read>
		else
		{
			DEBUG_VERBOSE("Read from cache\r\n");
		}
//		disk_read(0, m_cache, lba, block_count);
		memcpy(buffer, m_disk_cache.wr_buffer+offset, bufsize);
 80120f4:	4b0f      	ldr	r3, [pc, #60]	; (8012134 <tud_msc_read10_cb+0xc0>)
 80120f6:	689a      	ldr	r2, [r3, #8]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	4413      	add	r3, r2
 80120fc:	6a3a      	ldr	r2, [r7, #32]
 80120fe:	4619      	mov	r1, r3
 8012100:	6838      	ldr	r0, [r7, #0]
 8012102:	f006 ff88 	bl	8019016 <memcpy>
//		disk_read(0, buffer, lba, block_count);
		configASSERT(0);
	}
	DEBUG_VERBOSE("Disk read %u bytes, LBA=%u, offset %u, block = %u, size = %u\r\n", bufsize, lba, offset, block_count, m_disk_block_size);

	return bufsize;
 8012106:	6a3b      	ldr	r3, [r7, #32]
 8012108:	e00a      	b.n	8012120 <tud_msc_read10_cb+0xac>
	__asm volatile
 801210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801210e:	f383 8811 	msr	BASEPRI, r3
 8012112:	f3bf 8f6f 	isb	sy
 8012116:	f3bf 8f4f 	dsb	sy
 801211a:	613b      	str	r3, [r7, #16]
}
 801211c:	bf00      	nop
		configASSERT(0);
 801211e:	e7fe      	b.n	801211e <tud_msc_read10_cb+0xaa>
}
 8012120:	4618      	mov	r0, r3
 8012122:	3718      	adds	r7, #24
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	0801b15c 	.word	0x0801b15c
 801212c:	0801b190 	.word	0x0801b190
 8012130:	20000150 	.word	0x20000150
 8012134:	20000144 	.word	0x20000144

08012138 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af00      	add	r7, sp, #0
 801213e:	60b9      	str	r1, [r7, #8]
 8012140:	607a      	str	r2, [r7, #4]
 8012142:	603b      	str	r3, [r7, #0]
 8012144:	4603      	mov	r3, r0
 8012146:	73fb      	strb	r3, [r7, #15]
	(void) lun;

	const uint32_t block_count = (bufsize + m_disk_block_size -1) / m_disk_block_size;
 8012148:	4b2a      	ldr	r3, [pc, #168]	; (80121f4 <tud_msc_write10_cb+0xbc>)
 801214a:	681a      	ldr	r2, [r3, #0]
 801214c:	6a3b      	ldr	r3, [r7, #32]
 801214e:	4413      	add	r3, r2
 8012150:	1e5a      	subs	r2, r3, #1
 8012152:	4b28      	ldr	r3, [pc, #160]	; (80121f4 <tud_msc_write10_cb+0xbc>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	fbb2 f3f3 	udiv	r3, r2, r3
 801215a:	617b      	str	r3, [r7, #20]

	if (bufsize <= m_disk_block_size)		// always jump into here
 801215c:	4b25      	ldr	r3, [pc, #148]	; (80121f4 <tud_msc_write10_cb+0xbc>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	6a3a      	ldr	r2, [r7, #32]
 8012162:	429a      	cmp	r2, r3
 8012164:	d836      	bhi.n	80121d4 <tud_msc_write10_cb+0x9c>
	{
		// Read back all data from sector in flash to cache buffer
		if (m_disk_cache.wr_sector == -1
 8012166:	4b24      	ldr	r3, [pc, #144]	; (80121f8 <tud_msc_write10_cb+0xc0>)
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801216e:	d004      	beq.n	801217a <tud_msc_write10_cb+0x42>
			|| lba != m_disk_cache.wr_sector)		// If invalid sector =>> read data from flash immediately
 8012170:	4b21      	ldr	r3, [pc, #132]	; (80121f8 <tud_msc_write10_cb+0xc0>)
 8012172:	685a      	ldr	r2, [r3, #4]
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	429a      	cmp	r2, r3
 8012178:	d009      	beq.n	801218e <tud_msc_write10_cb+0x56>
		{
			m_disk_cache.wr_sector = lba;
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	4a1e      	ldr	r2, [pc, #120]	; (80121f8 <tud_msc_write10_cb+0xc0>)
 801217e:	6053      	str	r3, [r2, #4]
			disk_read(0, m_disk_cache.wr_buffer, lba, block_count);
 8012180:	4b1d      	ldr	r3, [pc, #116]	; (80121f8 <tud_msc_write10_cb+0xc0>)
 8012182:	6899      	ldr	r1, [r3, #8]
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	2000      	movs	r0, #0
 801218a:	f7f7 ffdb 	bl	800a144 <disk_read>
		}

		m_disk_cache.rd_sector = lba;
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	4a19      	ldr	r2, [pc, #100]	; (80121f8 <tud_msc_write10_cb+0xc0>)
 8012192:	6013      	str	r3, [r2, #0]
		// Copy content
		memcpy(&m_disk_cache.wr_buffer[offset], buffer, bufsize);
 8012194:	4b18      	ldr	r3, [pc, #96]	; (80121f8 <tud_msc_write10_cb+0xc0>)
 8012196:	689a      	ldr	r2, [r3, #8]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	4413      	add	r3, r2
 801219c:	6a3a      	ldr	r2, [r7, #32]
 801219e:	6839      	ldr	r1, [r7, #0]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f006 ff38 	bl	8019016 <memcpy>

		if (offset + 512 == m_disk_block_size)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80121ac:	4b11      	ldr	r3, [pc, #68]	; (80121f4 <tud_msc_write10_cb+0xbc>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d11a      	bne.n	80121ea <tud_msc_write10_cb+0xb2>
		{
			// Sync now
			DEBUG_WARN("Sync to flash now\r\n");
 80121b4:	f7ff fa74 	bl	80116a0 <app_debug_get_ms>
 80121b8:	4603      	mov	r3, r0
 80121ba:	4a10      	ldr	r2, [pc, #64]	; (80121fc <tud_msc_write10_cb+0xc4>)
 80121bc:	4619      	mov	r1, r3
 80121be:	4810      	ldr	r0, [pc, #64]	; (8012200 <tud_msc_write10_cb+0xc8>)
 80121c0:	f7ff fbea 	bl	8011998 <app_debug_print_raw>
			disk_write(0, m_disk_cache.wr_buffer, lba, block_count);
 80121c4:	4b0c      	ldr	r3, [pc, #48]	; (80121f8 <tud_msc_write10_cb+0xc0>)
 80121c6:	6899      	ldr	r1, [r3, #8]
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	68ba      	ldr	r2, [r7, #8]
 80121cc:	2000      	movs	r0, #0
 80121ce:	f7f7 ffd9 	bl	800a184 <disk_write>
 80121d2:	e00a      	b.n	80121ea <tud_msc_write10_cb+0xb2>
	__asm volatile
 80121d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d8:	f383 8811 	msr	BASEPRI, r3
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	613b      	str	r3, [r7, #16]
}
 80121e6:	bf00      	nop
		}
	}
	else		// never happen
	{
		configASSERT(0);
 80121e8:	e7fe      	b.n	80121e8 <tud_msc_write10_cb+0xb0>
	}
	DEBUG_VERBOSE("Disk write %u bytes, LBA=%u, offset %u, block = %u, size = %u\r\n", bufsize, lba, offset, block_count, m_disk_block_size);
	return bufsize;
 80121ea:	6a3b      	ldr	r3, [r7, #32]
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3718      	adds	r7, #24
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	20000150 	.word	0x20000150
 80121f8:	20000144 	.word	0x20000144
 80121fc:	0801b15c 	.word	0x0801b15c
 8012200:	0801b1c0 	.word	0x0801b1c0

08012204 <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b088      	sub	sp, #32
 8012208:	af00      	add	r7, sp, #0
 801220a:	60b9      	str	r1, [r7, #8]
 801220c:	607a      	str	r2, [r7, #4]
 801220e:	461a      	mov	r2, r3
 8012210:	4603      	mov	r3, r0
 8012212:	73fb      	strb	r3, [r7, #15]
 8012214:	4613      	mov	r3, r2
 8012216:	81bb      	strh	r3, [r7, #12]
  // read10 & write10 has their own callback and MUST not be handled here

  void const* response = NULL;
 8012218:	2300      	movs	r3, #0
 801221a:	61bb      	str	r3, [r7, #24]
  int32_t resplen = 0;
 801221c:	2300      	movs	r3, #0
 801221e:	61fb      	str	r3, [r7, #28]

  // most scsi handled is input
  bool in_xfer = true;
 8012220:	2301      	movs	r3, #1
 8012222:	75fb      	strb	r3, [r7, #23]

  switch (scsi_cmd[0])
  {
    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8012224:	7bf8      	ldrb	r0, [r7, #15]
 8012226:	2300      	movs	r3, #0
 8012228:	2220      	movs	r2, #32
 801222a:	2105      	movs	r1, #5
 801222c:	f001 f8b8 	bl	80133a0 <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8012230:	f04f 33ff 	mov.w	r3, #4294967295
 8012234:	61fb      	str	r3, [r7, #28]
    break;
 8012236:	bf00      	nop
  }

  // return resplen must not larger than bufsize
  if ( resplen > bufsize ) resplen = bufsize;
 8012238:	89bb      	ldrh	r3, [r7, #12]
 801223a:	69fa      	ldr	r2, [r7, #28]
 801223c:	429a      	cmp	r2, r3
 801223e:	dd01      	ble.n	8012244 <tud_msc_scsi_cb+0x40>
 8012240:	89bb      	ldrh	r3, [r7, #12]
 8012242:	61fb      	str	r3, [r7, #28]

  if ( response && (resplen > 0) )
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00b      	beq.n	8012262 <tud_msc_scsi_cb+0x5e>
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	2b00      	cmp	r3, #0
 801224e:	dd08      	ble.n	8012262 <tud_msc_scsi_cb+0x5e>
  {
    if(in_xfer)
 8012250:	7dfb      	ldrb	r3, [r7, #23]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d005      	beq.n	8012262 <tud_msc_scsi_cb+0x5e>
    {
      memcpy(buffer, response, resplen);
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	461a      	mov	r2, r3
 801225a:	69b9      	ldr	r1, [r7, #24]
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f006 feda 	bl	8019016 <memcpy>
    {
      // SCSI output
    }
  }

  return resplen;
 8012262:	69fb      	ldr	r3, [r7, #28]
}
 8012264:	4618      	mov	r0, r3
 8012266:	3720      	adds	r7, #32
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 801226c:	b480      	push	{r7}
 801226e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8012270:	4b02      	ldr	r3, [pc, #8]	; (801227c <tud_descriptor_device_cb+0x10>)
}
 8012272:	4618      	mov	r0, r3
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	0801c7d0 	.word	0x0801c7d0

08012280 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8012280:	b480      	push	{r7}
 8012282:	b083      	sub	sp, #12
 8012284:	af00      	add	r7, sp, #0
 8012286:	4603      	mov	r3, r0
 8012288:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 801228a:	4b03      	ldr	r3, [pc, #12]	; (8012298 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 801228c:	4618      	mov	r0, r3
 801228e:	370c      	adds	r7, #12
 8012290:	46bd      	mov	sp, r7
 8012292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012296:	4770      	bx	lr
 8012298:	0801c7e4 	.word	0x0801c7e4

0801229c <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b084      	sub	sp, #16
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	4603      	mov	r3, r0
 80122a4:	460a      	mov	r2, r1
 80122a6:	71fb      	strb	r3, [r7, #7]
 80122a8:	4613      	mov	r3, r2
 80122aa:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 80122ac:	79fb      	ldrb	r3, [r7, #7]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d108      	bne.n	80122c4 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80122b2:	4b21      	ldr	r3, [pc, #132]	; (8012338 <tud_descriptor_string_cb+0x9c>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	881b      	ldrh	r3, [r3, #0]
 80122b8:	b29a      	uxth	r2, r3
 80122ba:	4b20      	ldr	r3, [pc, #128]	; (801233c <tud_descriptor_string_cb+0xa0>)
 80122bc:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 80122be:	2301      	movs	r3, #1
 80122c0:	73fb      	strb	r3, [r7, #15]
 80122c2:	e027      	b.n	8012314 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 80122c4:	79fb      	ldrb	r3, [r7, #7]
 80122c6:	2b05      	cmp	r3, #5
 80122c8:	d901      	bls.n	80122ce <tud_descriptor_string_cb+0x32>
 80122ca:	2300      	movs	r3, #0
 80122cc:	e02f      	b.n	801232e <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 80122ce:	79fb      	ldrb	r3, [r7, #7]
 80122d0:	4a19      	ldr	r2, [pc, #100]	; (8012338 <tud_descriptor_string_cb+0x9c>)
 80122d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122d6:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 80122d8:	68b8      	ldr	r0, [r7, #8]
 80122da:	f7ed ff83 	bl	80001e4 <strlen>
 80122de:	4603      	mov	r3, r0
 80122e0:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 80122e2:	7bfb      	ldrb	r3, [r7, #15]
 80122e4:	2b1f      	cmp	r3, #31
 80122e6:	d901      	bls.n	80122ec <tud_descriptor_string_cb+0x50>
 80122e8:	231f      	movs	r3, #31
 80122ea:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 80122ec:	2300      	movs	r3, #0
 80122ee:	73bb      	strb	r3, [r7, #14]
 80122f0:	e00c      	b.n	801230c <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 80122f2:	7bbb      	ldrb	r3, [r7, #14]
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	4413      	add	r3, r2
 80122f8:	781a      	ldrb	r2, [r3, #0]
 80122fa:	7bbb      	ldrb	r3, [r7, #14]
 80122fc:	3301      	adds	r3, #1
 80122fe:	b291      	uxth	r1, r2
 8012300:	4a0e      	ldr	r2, [pc, #56]	; (801233c <tud_descriptor_string_cb+0xa0>)
 8012302:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8012306:	7bbb      	ldrb	r3, [r7, #14]
 8012308:	3301      	adds	r3, #1
 801230a:	73bb      	strb	r3, [r7, #14]
 801230c:	7bba      	ldrb	r2, [r7, #14]
 801230e:	7bfb      	ldrb	r3, [r7, #15]
 8012310:	429a      	cmp	r2, r3
 8012312:	d3ee      	bcc.n	80122f2 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8012314:	7bfb      	ldrb	r3, [r7, #15]
 8012316:	3301      	adds	r3, #1
 8012318:	b29b      	uxth	r3, r3
 801231a:	005b      	lsls	r3, r3, #1
 801231c:	b29b      	uxth	r3, r3
 801231e:	b21b      	sxth	r3, r3
 8012320:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8012324:	b21b      	sxth	r3, r3
 8012326:	b29a      	uxth	r2, r3
 8012328:	4b04      	ldr	r3, [pc, #16]	; (801233c <tud_descriptor_string_cb+0xa0>)
 801232a:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 801232c:	4b03      	ldr	r3, [pc, #12]	; (801233c <tud_descriptor_string_cb+0xa0>)
}
 801232e:	4618      	mov	r0, r3
 8012330:	3710      	adds	r7, #16
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	20000154 	.word	0x20000154
 801233c:	20008ef0 	.word	0x20008ef0

08012340 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d005      	beq.n	801235e <lwrb_init+0x1e>
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d002      	beq.n	801235e <lwrb_init+0x1e>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d101      	bne.n	8012362 <lwrb_init+0x22>
        return 0;
 801235e:	2300      	movs	r3, #0
 8012360:	e00b      	b.n	801237a <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 8012362:	2214      	movs	r2, #20
 8012364:	2100      	movs	r1, #0
 8012366:	68f8      	ldr	r0, [r7, #12]
 8012368:	f006 fe7d 	bl	8019066 <memset>

    buff->size = size;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	687a      	ldr	r2, [r7, #4]
 8012370:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	68ba      	ldr	r2, [r7, #8]
 8012376:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 8012378:	2301      	movs	r3, #1
}
 801237a:	4618      	mov	r0, r3
 801237c:	3710      	adds	r7, #16
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}

08012382 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(lwrb_t* buff, const void* data, size_t btw) {
 8012382:	b580      	push	{r7, lr}
 8012384:	b088      	sub	sp, #32
 8012386:	af00      	add	r7, sp, #0
 8012388:	60f8      	str	r0, [r7, #12]
 801238a:	60b9      	str	r1, [r7, #8]
 801238c:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    volatile size_t buff_w_ptr;
    const uint8_t* d = data;
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d00d      	beq.n	80123b4 <lwrb_write+0x32>
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d009      	beq.n	80123b4 <lwrb_write+0x32>
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d005      	beq.n	80123b4 <lwrb_write+0x32>
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d002      	beq.n	80123b4 <lwrb_write+0x32>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d101      	bne.n	80123b8 <lwrb_write+0x36>
        return 0;
 80123b4:	2300      	movs	r3, #0
 80123b6:	e057      	b.n	8012468 <lwrb_write+0xe6>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 80123b8:	68f8      	ldr	r0, [r7, #12]
 80123ba:	f000 f8d0 	bl	801255e <lwrb_get_free>
 80123be:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 80123c0:	687a      	ldr	r2, [r7, #4]
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	4293      	cmp	r3, r2
 80123c6:	bf28      	it	cs
 80123c8:	4613      	movcs	r3, r2
 80123ca:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d101      	bne.n	80123d6 <lwrb_write+0x54>
        return 0;
 80123d2:	2300      	movs	r3, #0
 80123d4:	e048      	b.n	8012468 <lwrb_write+0xe6>
    }

    /* Step 1: Write data to linear part of buffer */
    buff_w_ptr = buff->w;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	68db      	ldr	r3, [r3, #12]
 80123da:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	685a      	ldr	r2, [r3, #4]
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	1ad3      	subs	r3, r2, r3
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d904      	bls.n	80123f4 <lwrb_write+0x72>
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	685a      	ldr	r2, [r3, #4]
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	e000      	b.n	80123f6 <lwrb_write+0x74>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681a      	ldr	r2, [r3, #0]
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	4413      	add	r3, r2
 8012400:	697a      	ldr	r2, [r7, #20]
 8012402:	69f9      	ldr	r1, [r7, #28]
 8012404:	4618      	mov	r0, r3
 8012406:	f006 fe06 	bl	8019016 <memcpy>
    buff_w_ptr += tocopy;
 801240a:	693a      	ldr	r2, [r7, #16]
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	4413      	add	r3, r2
 8012410:	613b      	str	r3, [r7, #16]
    btw -= tocopy;
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d00a      	beq.n	8012436 <lwrb_write+0xb4>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	6818      	ldr	r0, [r3, #0]
 8012424:	69fa      	ldr	r2, [r7, #28]
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	4413      	add	r3, r2
 801242a:	687a      	ldr	r2, [r7, #4]
 801242c:	4619      	mov	r1, r3
 801242e:	f006 fdf2 	bl	8019016 <memcpy>
        buff_w_ptr = btw;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	685a      	ldr	r2, [r3, #4]
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	429a      	cmp	r2, r3
 801243e:	d801      	bhi.n	8012444 <lwrb_write+0xc2>
        buff_w_ptr = 0;
 8012440:	2300      	movs	r3, #0
 8012442:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    buff->w = buff_w_ptr;
 8012444:	693a      	ldr	r2, [r7, #16]
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	60da      	str	r2, [r3, #12]
    
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	691b      	ldr	r3, [r3, #16]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d007      	beq.n	8012462 <lwrb_write+0xe0>
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	691b      	ldr	r3, [r3, #16]
 8012456:	6979      	ldr	r1, [r7, #20]
 8012458:	687a      	ldr	r2, [r7, #4]
 801245a:	440a      	add	r2, r1
 801245c:	2101      	movs	r1, #1
 801245e:	68f8      	ldr	r0, [r7, #12]
 8012460:	4798      	blx	r3
    return tocopy + btw;
 8012462:	697a      	ldr	r2, [r7, #20]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	4413      	add	r3, r2
}
 8012468:	4618      	mov	r0, r3
 801246a:	3720      	adds	r7, #32
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 8012470:	b580      	push	{r7, lr}
 8012472:	b088      	sub	sp, #32
 8012474:	af00      	add	r7, sp, #0
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    volatile size_t buff_r_ptr;
    uint8_t* d = data;
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d00d      	beq.n	80124a2 <lwrb_read+0x32>
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d009      	beq.n	80124a2 <lwrb_read+0x32>
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d005      	beq.n	80124a2 <lwrb_read+0x32>
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d002      	beq.n	80124a2 <lwrb_read+0x32>
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d101      	bne.n	80124a6 <lwrb_read+0x36>
        return 0;
 80124a2:	2300      	movs	r3, #0
 80124a4:	e057      	b.n	8012556 <lwrb_read+0xe6>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 80124a6:	68f8      	ldr	r0, [r7, #12]
 80124a8:	f000 f890 	bl	80125cc <lwrb_get_full>
 80124ac:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	4293      	cmp	r3, r2
 80124b4:	bf28      	it	cs
 80124b6:	4613      	movcs	r3, r2
 80124b8:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d101      	bne.n	80124c4 <lwrb_read+0x54>
        return 0;
 80124c0:	2300      	movs	r3, #0
 80124c2:	e048      	b.n	8012556 <lwrb_read+0xe6>
    }

    /* Step 1: Read data from linear part of buffer */
    buff_r_ptr = buff->r;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	689b      	ldr	r3, [r3, #8]
 80124c8:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	685a      	ldr	r2, [r3, #4]
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	687a      	ldr	r2, [r7, #4]
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d904      	bls.n	80124e2 <lwrb_read+0x72>
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	685a      	ldr	r2, [r3, #4]
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	1ad3      	subs	r3, r2, r3
 80124e0:	e000      	b.n	80124e4 <lwrb_read+0x74>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	4413      	add	r3, r2
 80124ee:	697a      	ldr	r2, [r7, #20]
 80124f0:	4619      	mov	r1, r3
 80124f2:	69f8      	ldr	r0, [r7, #28]
 80124f4:	f006 fd8f 	bl	8019016 <memcpy>
    buff_r_ptr += tocopy;
 80124f8:	693a      	ldr	r2, [r7, #16]
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	4413      	add	r3, r2
 80124fe:	613b      	str	r3, [r7, #16]
    btr -= tocopy;
 8012500:	687a      	ldr	r2, [r7, #4]
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	1ad3      	subs	r3, r2, r3
 8012506:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00a      	beq.n	8012524 <lwrb_read+0xb4>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 801250e:	69fa      	ldr	r2, [r7, #28]
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	18d0      	adds	r0, r2, r3
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	4619      	mov	r1, r3
 801251c:	f006 fd7b 	bl	8019016 <memcpy>
        buff_r_ptr = btr;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	685a      	ldr	r2, [r3, #4]
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	429a      	cmp	r2, r3
 801252c:	d801      	bhi.n	8012532 <lwrb_read+0xc2>
        buff_r_ptr = 0;
 801252e:	2300      	movs	r3, #0
 8012530:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    buff->r = buff_r_ptr;
 8012532:	693a      	ldr	r2, [r7, #16]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	609a      	str	r2, [r3, #8]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	691b      	ldr	r3, [r3, #16]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d007      	beq.n	8012550 <lwrb_read+0xe0>
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	691b      	ldr	r3, [r3, #16]
 8012544:	6979      	ldr	r1, [r7, #20]
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	440a      	add	r2, r1
 801254a:	2100      	movs	r1, #0
 801254c:	68f8      	ldr	r0, [r7, #12]
 801254e:	4798      	blx	r3
    return tocopy + btr;
 8012550:	697a      	ldr	r2, [r7, #20]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	4413      	add	r3, r2
}
 8012556:	4618      	mov	r0, r3
 8012558:	3720      	adds	r7, #32
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}

0801255e <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(lwrb_t* buff) {
 801255e:	b480      	push	{r7}
 8012560:	b087      	sub	sp, #28
 8012562:	af00      	add	r7, sp, #0
 8012564:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(buff)) {
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d007      	beq.n	801257c <lwrb_get_free+0x1e>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d003      	beq.n	801257c <lwrb_get_free+0x1e>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d101      	bne.n	8012580 <lwrb_get_free+0x22>
        return 0;
 801257c:	2300      	movs	r3, #0
 801257e:	e01f      	b.n	80125c0 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	68db      	ldr	r3, [r3, #12]
 8012584:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	689b      	ldr	r3, [r3, #8]
 801258a:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 801258c:	693a      	ldr	r2, [r7, #16]
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	429a      	cmp	r2, r3
 8012592:	d103      	bne.n	801259c <lwrb_get_free+0x3e>
        size = buff->size;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	617b      	str	r3, [r7, #20]
 801259a:	e00f      	b.n	80125bc <lwrb_get_free+0x5e>
    } else if (r > w) {
 801259c:	68fa      	ldr	r2, [r7, #12]
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d904      	bls.n	80125ae <lwrb_get_free+0x50>
        size = r - w;
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	1ad3      	subs	r3, r2, r3
 80125aa:	617b      	str	r3, [r7, #20]
 80125ac:	e006      	b.n	80125bc <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	68f9      	ldr	r1, [r7, #12]
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	1acb      	subs	r3, r1, r3
 80125b8:	4413      	add	r3, r2
 80125ba:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	3b01      	subs	r3, #1
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	371c      	adds	r7, #28
 80125c4:	46bd      	mov	sp, r7
 80125c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ca:	4770      	bx	lr

080125cc <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(lwrb_t* buff) {
 80125cc:	b480      	push	{r7}
 80125ce:	b087      	sub	sp, #28
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(buff)) {
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d007      	beq.n	80125ea <lwrb_get_full+0x1e>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d003      	beq.n	80125ea <lwrb_get_full+0x1e>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d101      	bne.n	80125ee <lwrb_get_full+0x22>
        return 0;
 80125ea:	2300      	movs	r3, #0
 80125ec:	e01d      	b.n	801262a <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	68db      	ldr	r3, [r3, #12]
 80125f2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	689b      	ldr	r3, [r3, #8]
 80125f8:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 80125fa:	693a      	ldr	r2, [r7, #16]
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d102      	bne.n	8012608 <lwrb_get_full+0x3c>
        size = 0;
 8012602:	2300      	movs	r3, #0
 8012604:	617b      	str	r3, [r7, #20]
 8012606:	e00f      	b.n	8012628 <lwrb_get_full+0x5c>
    } else if (w > r) {
 8012608:	693a      	ldr	r2, [r7, #16]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	429a      	cmp	r2, r3
 801260e:	d904      	bls.n	801261a <lwrb_get_full+0x4e>
        size = w - r;
 8012610:	693a      	ldr	r2, [r7, #16]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	1ad3      	subs	r3, r2, r3
 8012616:	617b      	str	r3, [r7, #20]
 8012618:	e006      	b.n	8012628 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	685a      	ldr	r2, [r3, #4]
 801261e:	6939      	ldr	r1, [r7, #16]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	1acb      	subs	r3, r1, r3
 8012624:	4413      	add	r3, r2
 8012626:	617b      	str	r3, [r7, #20]
    }
    return size;
 8012628:	697b      	ldr	r3, [r7, #20]
}
 801262a:	4618      	mov	r0, r3
 801262c:	371c      	adds	r7, #28
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr

08012636 <tu_desc_next>:

//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
 8012636:	b480      	push	{r7}
 8012638:	b085      	sub	sp, #20
 801263a:	af00      	add	r7, sp, #0
 801263c:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	461a      	mov	r2, r3
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	4413      	add	r3, r2
}
 801264c:	4618      	mov	r0, r3
 801264e:	3714      	adds	r7, #20
 8012650:	46bd      	mov	sp, r7
 8012652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012656:	4770      	bx	lr

08012658 <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
 8012658:	b480      	push	{r7}
 801265a:	b083      	sub	sp, #12
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	3301      	adds	r3, #1
 8012664:	781b      	ldrb	r3, [r3, #0]
}
 8012666:	4618      	mov	r0, r3
 8012668:	370c      	adds	r7, #12
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr

08012672 <tu_desc_len>:

static inline uint8_t tu_desc_len(void const* desc)
{
 8012672:	b480      	push	{r7}
 8012674:	b083      	sub	sp, #12
 8012676:	af00      	add	r7, sp, #0
 8012678:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	781b      	ldrb	r3, [r3, #0]
}
 801267e:	4618      	mov	r0, r3
 8012680:	370c      	adds	r7, #12
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr

0801268a <osal_mutex_create>:
//--------------------------------------------------------------------+
typedef StaticSemaphore_t osal_mutex_def_t;
typedef SemaphoreHandle_t osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
 801268a:	b580      	push	{r7, lr}
 801268c:	b082      	sub	sp, #8
 801268e:	af00      	add	r7, sp, #0
 8012690:	6078      	str	r0, [r7, #4]
  return xSemaphoreCreateMutexStatic(mdef);
 8012692:	6879      	ldr	r1, [r7, #4]
 8012694:	2001      	movs	r0, #1
 8012696:	f7fa fbc2 	bl	800ce1e <xQueueCreateMutexStatic>
 801269a:	4603      	mov	r3, r0
}
 801269c:	4618      	mov	r0, r3
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b084      	sub	sp, #16
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = TUD_OPT_RHPORT;
 80126ac:	2300      	movs	r3, #0
 80126ae:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	3310      	adds	r3, #16
 80126b4:	4618      	mov	r0, r3
 80126b6:	f002 fb99 	bl	8014dec <tu_fifo_remaining>
 80126ba:	4603      	mov	r3, r0
 80126bc:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 80126be:	89bb      	ldrh	r3, [r7, #12]
 80126c0:	2b3f      	cmp	r3, #63	; 0x3f
 80126c2:	d801      	bhi.n	80126c8 <_prep_out_transaction+0x24>
 80126c4:	2300      	movs	r3, #0
 80126c6:	e02b      	b.n	8012720 <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	78da      	ldrb	r2, [r3, #3]
 80126cc:	7bfb      	ldrb	r3, [r7, #15]
 80126ce:	4611      	mov	r1, r2
 80126d0:	4618      	mov	r0, r3
 80126d2:	f003 ff75 	bl	80165c0 <usbd_edpt_claim>
 80126d6:	4603      	mov	r3, r0
 80126d8:	f083 0301 	eor.w	r3, r3, #1
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d001      	beq.n	80126e6 <_prep_out_transaction+0x42>
 80126e2:	2300      	movs	r3, #0
 80126e4:	e01c      	b.n	8012720 <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	3310      	adds	r3, #16
 80126ea:	4618      	mov	r0, r3
 80126ec:	f002 fb7e 	bl	8014dec <tu_fifo_remaining>
 80126f0:	4603      	mov	r3, r0
 80126f2:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 80126f4:	89bb      	ldrh	r3, [r7, #12]
 80126f6:	2b3f      	cmp	r3, #63	; 0x3f
 80126f8:	d90a      	bls.n	8012710 <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	78d9      	ldrb	r1, [r3, #3]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8012704:	7bf8      	ldrb	r0, [r7, #15]
 8012706:	2340      	movs	r3, #64	; 0x40
 8012708:	f004 f834 	bl	8016774 <usbd_edpt_xfer>
 801270c:	4603      	mov	r3, r0
 801270e:	e007      	b.n	8012720 <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	78da      	ldrb	r2, [r3, #3]
 8012714:	7bfb      	ldrb	r3, [r7, #15]
 8012716:	4611      	mov	r1, r2
 8012718:	4618      	mov	r0, r3
 801271a:	f003 ffcd 	bl	80166b8 <usbd_edpt_release>

    return false;
 801271e:	2300      	movs	r3, #0
  }
}
 8012720:	4618      	mov	r0, r3
 8012722:	3710      	adds	r7, #16
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b084      	sub	sp, #16
 801272c:	af00      	add	r7, sp, #0
 801272e:	4603      	mov	r3, r0
 8012730:	71fb      	strb	r3, [r7, #7]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 8012732:	f002 fd89 	bl	8015248 <tud_mounted>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d009      	beq.n	8012750 <tud_cdc_n_connected+0x28>
 801273c:	f002 fd96 	bl	801526c <tud_suspended>
 8012740:	4603      	mov	r3, r0
 8012742:	f083 0301 	eor.w	r3, r3, #1
 8012746:	b2db      	uxtb	r3, r3
 8012748:	2b00      	cmp	r3, #0
 801274a:	d001      	beq.n	8012750 <tud_cdc_n_connected+0x28>
 801274c:	2301      	movs	r3, #1
 801274e:	e000      	b.n	8012752 <tud_cdc_n_connected+0x2a>
 8012750:	2300      	movs	r3, #0
 8012752:	f003 0301 	and.w	r3, r3, #1
 8012756:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8012758:	2b00      	cmp	r3, #0
 801275a:	d01a      	beq.n	8012792 <tud_cdc_n_connected+0x6a>
 801275c:	79fb      	ldrb	r3, [r7, #7]
 801275e:	4a11      	ldr	r2, [pc, #68]	; (80127a4 <tud_cdc_n_connected+0x7c>)
 8012760:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8012764:	fb01 f303 	mul.w	r3, r1, r3
 8012768:	4413      	add	r3, r2
 801276a:	3304      	adds	r3, #4
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	60fb      	str	r3, [r7, #12]
 8012770:	2300      	movs	r3, #0
 8012772:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8012774:	7afb      	ldrb	r3, [r7, #11]
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	fa22 f303 	lsr.w	r3, r2, r3
 801277c:	f003 0301 	and.w	r3, r3, #1
 8012780:	2b00      	cmp	r3, #0
 8012782:	bf14      	ite	ne
 8012784:	2301      	movne	r3, #1
 8012786:	2300      	moveq	r3, #0
 8012788:	b2db      	uxtb	r3, r3
 801278a:	2b00      	cmp	r3, #0
 801278c:	d001      	beq.n	8012792 <tud_cdc_n_connected+0x6a>
 801278e:	2301      	movs	r3, #1
 8012790:	e000      	b.n	8012794 <tud_cdc_n_connected+0x6c>
 8012792:	2300      	movs	r3, #0
 8012794:	f003 0301 	and.w	r3, r3, #1
 8012798:	b2db      	uxtb	r3, r3
}
 801279a:	4618      	mov	r0, r3
 801279c:	3710      	adds	r7, #16
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	20008f30 	.word	0x20008f30

080127a8 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	4603      	mov	r3, r0
 80127b0:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80127b2:	79fb      	ldrb	r3, [r7, #7]
 80127b4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80127b8:	fb02 f303 	mul.w	r3, r2, r3
 80127bc:	3310      	adds	r3, #16
 80127be:	4a05      	ldr	r2, [pc, #20]	; (80127d4 <tud_cdc_n_available+0x2c>)
 80127c0:	4413      	add	r3, r2
 80127c2:	4618      	mov	r0, r3
 80127c4:	f002 fae1 	bl	8014d8a <tu_fifo_count>
 80127c8:	4603      	mov	r3, r0
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3708      	adds	r7, #8
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	20008f30 	.word	0x20008f30

080127d8 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b086      	sub	sp, #24
 80127dc:	af00      	add	r7, sp, #0
 80127de:	4603      	mov	r3, r0
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80127e6:	7bfb      	ldrb	r3, [r7, #15]
 80127e8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80127ec:	fb02 f303 	mul.w	r3, r2, r3
 80127f0:	4a0a      	ldr	r2, [pc, #40]	; (801281c <tud_cdc_n_read+0x44>)
 80127f2:	4413      	add	r3, r2
 80127f4:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	3310      	adds	r3, #16
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	b292      	uxth	r2, r2
 80127fe:	68b9      	ldr	r1, [r7, #8]
 8012800:	4618      	mov	r0, r3
 8012802:	f002 fb06 	bl	8014e12 <tu_fifo_read_n>
 8012806:	4603      	mov	r3, r0
 8012808:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 801280a:	6978      	ldr	r0, [r7, #20]
 801280c:	f7ff ff4a 	bl	80126a4 <_prep_out_transaction>
  return num_read;
 8012810:	693b      	ldr	r3, [r7, #16]
}
 8012812:	4618      	mov	r0, r3
 8012814:	3718      	adds	r7, #24
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	20008f30 	.word	0x20008f30

08012820 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b086      	sub	sp, #24
 8012824:	af00      	add	r7, sp, #0
 8012826:	4603      	mov	r3, r0
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	607a      	str	r2, [r7, #4]
 801282c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 801282e:	7bfb      	ldrb	r3, [r7, #15]
 8012830:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8012834:	fb02 f303 	mul.w	r3, r2, r3
 8012838:	4a0e      	ldr	r2, [pc, #56]	; (8012874 <tud_cdc_n_write+0x54>)
 801283a:	4413      	add	r3, r2
 801283c:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	332c      	adds	r3, #44	; 0x2c
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	b292      	uxth	r2, r2
 8012846:	68b9      	ldr	r1, [r7, #8]
 8012848:	4618      	mov	r0, r3
 801284a:	f002 fb06 	bl	8014e5a <tu_fifo_write_n>
 801284e:	4603      	mov	r3, r0
 8012850:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	332c      	adds	r3, #44	; 0x2c
 8012856:	4618      	mov	r0, r3
 8012858:	f002 fa97 	bl	8014d8a <tu_fifo_count>
 801285c:	4603      	mov	r3, r0
 801285e:	2b3f      	cmp	r3, #63	; 0x3f
 8012860:	d903      	bls.n	801286a <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 8012862:	7bfb      	ldrb	r3, [r7, #15]
 8012864:	4618      	mov	r0, r3
 8012866:	f000 f807 	bl	8012878 <tud_cdc_n_write_flush>
  }

  return ret;
 801286a:	8a7b      	ldrh	r3, [r7, #18]
}
 801286c:	4618      	mov	r0, r3
 801286e:	3718      	adds	r7, #24
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	20008f30 	.word	0x20008f30

08012878 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b086      	sub	sp, #24
 801287c:	af00      	add	r7, sp, #0
 801287e:	4603      	mov	r3, r0
 8012880:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8012882:	79fb      	ldrb	r3, [r7, #7]
 8012884:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8012888:	fb02 f303 	mul.w	r3, r2, r3
 801288c:	4a39      	ldr	r2, [pc, #228]	; (8012974 <tud_cdc_n_write_flush+0xfc>)
 801288e:	4413      	add	r3, r2
 8012890:	617b      	str	r3, [r7, #20]
 8012892:	f002 fcd9 	bl	8015248 <tud_mounted>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d009      	beq.n	80128b0 <tud_cdc_n_write_flush+0x38>
 801289c:	f002 fce6 	bl	801526c <tud_suspended>
 80128a0:	4603      	mov	r3, r0
 80128a2:	f083 0301 	eor.w	r3, r3, #1
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d001      	beq.n	80128b0 <tud_cdc_n_write_flush+0x38>
 80128ac:	2301      	movs	r3, #1
 80128ae:	e000      	b.n	80128b2 <tud_cdc_n_write_flush+0x3a>
 80128b0:	2300      	movs	r3, #0
 80128b2:	f003 0301 	and.w	r3, r3, #1
 80128b6:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 80128b8:	f083 0301 	eor.w	r3, r3, #1
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d001      	beq.n	80128c6 <tud_cdc_n_write_flush+0x4e>
 80128c2:	2300      	movs	r3, #0
 80128c4:	e052      	b.n	801296c <tud_cdc_n_write_flush+0xf4>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	332c      	adds	r3, #44	; 0x2c
 80128ca:	4618      	mov	r0, r3
 80128cc:	f002 fa5d 	bl	8014d8a <tu_fifo_count>
 80128d0:	4603      	mov	r3, r0
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d101      	bne.n	80128da <tud_cdc_n_write_flush+0x62>
 80128d6:	2300      	movs	r3, #0
 80128d8:	e048      	b.n	801296c <tud_cdc_n_write_flush+0xf4>

  uint8_t const rhport = TUD_OPT_RHPORT;
 80128da:	2300      	movs	r3, #0
 80128dc:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	789a      	ldrb	r2, [r3, #2]
 80128e2:	7cfb      	ldrb	r3, [r7, #19]
 80128e4:	4611      	mov	r1, r2
 80128e6:	4618      	mov	r0, r3
 80128e8:	f003 fe6a 	bl	80165c0 <usbd_edpt_claim>
 80128ec:	4603      	mov	r3, r0
 80128ee:	f083 0301 	eor.w	r3, r3, #1
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d001      	beq.n	80128fc <tud_cdc_n_write_flush+0x84>
 80128f8:	2300      	movs	r3, #0
 80128fa:	e037      	b.n	801296c <tud_cdc_n_write_flush+0xf4>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8012908:	2240      	movs	r2, #64	; 0x40
 801290a:	4619      	mov	r1, r3
 801290c:	f002 fa81 	bl	8014e12 <tu_fifo_read_n>
 8012910:	4603      	mov	r3, r0
 8012912:	823b      	strh	r3, [r7, #16]

  if ( count )
 8012914:	8a3b      	ldrh	r3, [r7, #16]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d020      	beq.n	801295c <tud_cdc_n_write_flush+0xe4>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	7899      	ldrb	r1, [r3, #2]
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8012924:	8a3b      	ldrh	r3, [r7, #16]
 8012926:	7cf8      	ldrb	r0, [r7, #19]
 8012928:	f003 ff24 	bl	8016774 <usbd_edpt_xfer>
 801292c:	4603      	mov	r3, r0
 801292e:	f083 0301 	eor.w	r3, r3, #1
 8012932:	b2db      	uxtb	r3, r3
 8012934:	2b00      	cmp	r3, #0
 8012936:	d00f      	beq.n	8012958 <tud_cdc_n_write_flush+0xe0>
 8012938:	22ca      	movs	r2, #202	; 0xca
 801293a:	490f      	ldr	r1, [pc, #60]	; (8012978 <tud_cdc_n_write_flush+0x100>)
 801293c:	480f      	ldr	r0, [pc, #60]	; (801297c <tud_cdc_n_write_flush+0x104>)
 801293e:	f006 fc2f 	bl	80191a0 <iprintf>
 8012942:	4b0f      	ldr	r3, [pc, #60]	; (8012980 <tud_cdc_n_write_flush+0x108>)
 8012944:	60fb      	str	r3, [r7, #12]
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	2b00      	cmp	r3, #0
 8012950:	d000      	beq.n	8012954 <tud_cdc_n_write_flush+0xdc>
 8012952:	be00      	bkpt	0x0000
 8012954:	2300      	movs	r3, #0
 8012956:	e009      	b.n	801296c <tud_cdc_n_write_flush+0xf4>
    return count;
 8012958:	8a3b      	ldrh	r3, [r7, #16]
 801295a:	e007      	b.n	801296c <tud_cdc_n_write_flush+0xf4>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	789a      	ldrb	r2, [r3, #2]
 8012960:	7cfb      	ldrb	r3, [r7, #19]
 8012962:	4611      	mov	r1, r2
 8012964:	4618      	mov	r0, r3
 8012966:	f003 fea7 	bl	80166b8 <usbd_edpt_release>
    return 0;
 801296a:	2300      	movs	r3, #0
  }
}
 801296c:	4618      	mov	r0, r3
 801296e:	3718      	adds	r7, #24
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	20008f30 	.word	0x20008f30
 8012978:	0801c84c 	.word	0x0801c84c
 801297c:	0801b228 	.word	0x0801b228
 8012980:	e000edf0 	.word	0xe000edf0

08012984 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	4603      	mov	r3, r0
 801298c:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 801298e:	79fb      	ldrb	r3, [r7, #7]
 8012990:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8012994:	fb02 f303 	mul.w	r3, r2, r3
 8012998:	3328      	adds	r3, #40	; 0x28
 801299a:	4a05      	ldr	r2, [pc, #20]	; (80129b0 <tud_cdc_n_write_available+0x2c>)
 801299c:	4413      	add	r3, r2
 801299e:	3304      	adds	r3, #4
 80129a0:	4618      	mov	r0, r3
 80129a2:	f002 fa23 	bl	8014dec <tu_fifo_remaining>
 80129a6:	4603      	mov	r3, r0
}
 80129a8:	4618      	mov	r0, r3
 80129aa:	3708      	adds	r7, #8
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	20008f30 	.word	0x20008f30

080129b4 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 80129b4:	b590      	push	{r4, r7, lr}
 80129b6:	b08b      	sub	sp, #44	; 0x2c
 80129b8:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80129ba:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80129be:	2100      	movs	r1, #0
 80129c0:	4839      	ldr	r0, [pc, #228]	; (8012aa8 <cdcd_init+0xf4>)
 80129c2:	f006 fb50 	bl	8019066 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80129c6:	2300      	movs	r3, #0
 80129c8:	77fb      	strb	r3, [r7, #31]
 80129ca:	e064      	b.n	8012a96 <cdcd_init+0xe2>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80129cc:	7ffb      	ldrb	r3, [r7, #31]
 80129ce:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80129d2:	fb02 f303 	mul.w	r3, r2, r3
 80129d6:	4a34      	ldr	r2, [pc, #208]	; (8012aa8 <cdcd_init+0xf4>)
 80129d8:	4413      	add	r3, r2
 80129da:	61bb      	str	r3, [r7, #24]

    p_cdc->wanted_char = (char) -1;
 80129dc:	69bb      	ldr	r3, [r7, #24]
 80129de:	22ff      	movs	r2, #255	; 0xff
 80129e0:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 80129e2:	69ba      	ldr	r2, [r7, #24]
 80129e4:	2300      	movs	r3, #0
 80129e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80129ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80129ee:	f443 4342 	orr.w	r3, r3, #49664	; 0xc200
 80129f2:	80d3      	strh	r3, [r2, #6]
 80129f4:	2300      	movs	r3, #0
 80129f6:	f043 0301 	orr.w	r3, r3, #1
 80129fa:	8113      	strh	r3, [r2, #8]
    p_cdc->line_coding.stop_bits = 0;
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	2200      	movs	r2, #0
 8012a00:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	2200      	movs	r2, #0
 8012a06:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
 8012a08:	69bb      	ldr	r3, [r7, #24]
 8012a0a:	2208      	movs	r2, #8
 8012a0c:	731a      	strb	r2, [r3, #12]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8012a0e:	69bb      	ldr	r3, [r7, #24]
 8012a10:	f103 0010 	add.w	r0, r3, #16
 8012a14:	69bb      	ldr	r3, [r7, #24]
 8012a16:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	9300      	str	r3, [sp, #0]
 8012a1e:	2301      	movs	r3, #1
 8012a20:	2240      	movs	r2, #64	; 0x40
 8012a22:	f001 fd9f 	bl	8014564 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8012a32:	2301      	movs	r3, #1
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	2301      	movs	r3, #1
 8012a38:	2240      	movs	r2, #64	; 0x40
 8012a3a:	f001 fd93 	bl	8014564 <tu_fifo_config>

#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	f103 0410 	add.w	r4, r3, #16
 8012a44:	69bb      	ldr	r3, [r7, #24]
 8012a46:	33c8      	adds	r3, #200	; 0xc8
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7ff fe1e 	bl	801268a <osal_mutex_create>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	60bc      	str	r4, [r7, #8]
 8012a52:	2200      	movs	r2, #0
 8012a54:	607a      	str	r2, [r7, #4]
 8012a56:	603b      	str	r3, [r7, #0]

#if CFG_FIFO_MUTEX
TU_ATTR_ALWAYS_INLINE static inline
void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t write_mutex_hdl, tu_fifo_mutex_t read_mutex_hdl)
{
  f->mutex_wr = write_mutex_hdl;
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	687a      	ldr	r2, [r7, #4]
 8012a5c:	615a      	str	r2, [r3, #20]
  f->mutex_rd = read_mutex_hdl;
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	683a      	ldr	r2, [r7, #0]
 8012a62:	619a      	str	r2, [r3, #24]
}
 8012a64:	bf00      	nop
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
 8012a66:	69bb      	ldr	r3, [r7, #24]
 8012a68:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7ff fe09 	bl	801268a <osal_mutex_create>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	617c      	str	r4, [r7, #20]
 8012a7c:	613b      	str	r3, [r7, #16]
 8012a7e:	2300      	movs	r3, #0
 8012a80:	60fb      	str	r3, [r7, #12]
  f->mutex_wr = write_mutex_hdl;
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	693a      	ldr	r2, [r7, #16]
 8012a86:	615a      	str	r2, [r3, #20]
  f->mutex_rd = read_mutex_hdl;
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	68fa      	ldr	r2, [r7, #12]
 8012a8c:	619a      	str	r2, [r3, #24]
}
 8012a8e:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8012a90:	7ffb      	ldrb	r3, [r7, #31]
 8012a92:	3301      	adds	r3, #1
 8012a94:	77fb      	strb	r3, [r7, #31]
 8012a96:	7ffb      	ldrb	r3, [r7, #31]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d097      	beq.n	80129cc <cdcd_init+0x18>
#endif
  }
}
 8012a9c:	bf00      	nop
 8012a9e:	bf00      	nop
 8012aa0:	3724      	adds	r7, #36	; 0x24
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd90      	pop	{r4, r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	20008f30 	.word	0x20008f30

08012aac <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b084      	sub	sp, #16
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	73fb      	strb	r3, [r7, #15]
 8012aba:	e01f      	b.n	8012afc <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8012abc:	7bfb      	ldrb	r3, [r7, #15]
 8012abe:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8012ac2:	fb02 f303 	mul.w	r3, r2, r3
 8012ac6:	4a11      	ldr	r2, [pc, #68]	; (8012b0c <cdcd_reset+0x60>)
 8012ac8:	4413      	add	r3, r2
 8012aca:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8012acc:	2205      	movs	r2, #5
 8012ace:	2100      	movs	r1, #0
 8012ad0:	68b8      	ldr	r0, [r7, #8]
 8012ad2:	f006 fac8 	bl	8019066 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	3310      	adds	r3, #16
 8012ada:	4618      	mov	r0, r3
 8012adc:	f002 f9e1 	bl	8014ea2 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	332c      	adds	r3, #44	; 0x2c
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f002 f9dc 	bl	8014ea2 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	332c      	adds	r3, #44	; 0x2c
 8012aee:	2101      	movs	r1, #1
 8012af0:	4618      	mov	r0, r3
 8012af2:	f002 fa08 	bl	8014f06 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8012af6:	7bfb      	ldrb	r3, [r7, #15]
 8012af8:	3301      	adds	r3, #1
 8012afa:	73fb      	strb	r3, [r7, #15]
 8012afc:	7bfb      	ldrb	r3, [r7, #15]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d0dc      	beq.n	8012abc <cdcd_reset+0x10>
  }
}
 8012b02:	bf00      	nop
 8012b04:	bf00      	nop
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	20008f30 	.word	0x20008f30

08012b10 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b08c      	sub	sp, #48	; 0x30
 8012b14:	af02      	add	r7, sp, #8
 8012b16:	4603      	mov	r3, r0
 8012b18:	6039      	str	r1, [r7, #0]
 8012b1a:	71fb      	strb	r3, [r7, #7]
 8012b1c:	4613      	mov	r3, r2
 8012b1e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	795b      	ldrb	r3, [r3, #5]
 8012b24:	2b02      	cmp	r3, #2
 8012b26:	d103      	bne.n	8012b30 <cdcd_open+0x20>
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	799b      	ldrb	r3, [r3, #6]
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	d001      	beq.n	8012b34 <cdcd_open+0x24>
 8012b30:	2300      	movs	r3, #0
 8012b32:	e0cd      	b.n	8012cd0 <cdcd_open+0x1c0>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8012b34:	2300      	movs	r3, #0
 8012b36:	627b      	str	r3, [r7, #36]	; 0x24
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8012b3e:	e01a      	b.n	8012b76 <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8012b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b44:	4a64      	ldr	r2, [pc, #400]	; (8012cd8 <cdcd_open+0x1c8>)
 8012b46:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8012b4a:	fb01 f303 	mul.w	r3, r1, r3
 8012b4e:	4413      	add	r3, r2
 8012b50:	3302      	adds	r3, #2
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d109      	bne.n	8012b6c <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8012b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b5c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8012b60:	fb02 f303 	mul.w	r3, r2, r3
 8012b64:	4a5c      	ldr	r2, [pc, #368]	; (8012cd8 <cdcd_open+0x1c8>)
 8012b66:	4413      	add	r3, r2
 8012b68:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012b6a:	e008      	b.n	8012b7e <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8012b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b70:	3301      	adds	r3, #1
 8012b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8012b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d0e0      	beq.n	8012b40 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8012b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d110      	bne.n	8012ba6 <cdcd_open+0x96>
 8012b84:	f44f 7290 	mov.w	r2, #288	; 0x120
 8012b88:	4954      	ldr	r1, [pc, #336]	; (8012cdc <cdcd_open+0x1cc>)
 8012b8a:	4855      	ldr	r0, [pc, #340]	; (8012ce0 <cdcd_open+0x1d0>)
 8012b8c:	f006 fb08 	bl	80191a0 <iprintf>
 8012b90:	4b54      	ldr	r3, [pc, #336]	; (8012ce4 <cdcd_open+0x1d4>)
 8012b92:	60fb      	str	r3, [r7, #12]
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f003 0301 	and.w	r3, r3, #1
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d000      	beq.n	8012ba2 <cdcd_open+0x92>
 8012ba0:	be00      	bkpt	0x0000
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	e094      	b.n	8012cd0 <cdcd_open+0x1c0>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	789a      	ldrb	r2, [r3, #2]
 8012baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bac:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8012bae:	2309      	movs	r3, #9
 8012bb0:	843b      	strh	r3, [r7, #32]
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8012bb2:	6838      	ldr	r0, [r7, #0]
 8012bb4:	f7ff fd3f 	bl	8012636 <tu_desc_next>
 8012bb8:	61f8      	str	r0, [r7, #28]

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8012bba:	e00b      	b.n	8012bd4 <cdcd_open+0xc4>
  {
    drv_len += tu_desc_len(p_desc);
 8012bbc:	69f8      	ldr	r0, [r7, #28]
 8012bbe:	f7ff fd58 	bl	8012672 <tu_desc_len>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	b29a      	uxth	r2, r3
 8012bc6:	8c3b      	ldrh	r3, [r7, #32]
 8012bc8:	4413      	add	r3, r2
 8012bca:	843b      	strh	r3, [r7, #32]
    p_desc   = tu_desc_next(p_desc);
 8012bcc:	69f8      	ldr	r0, [r7, #28]
 8012bce:	f7ff fd32 	bl	8012636 <tu_desc_next>
 8012bd2:	61f8      	str	r0, [r7, #28]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8012bd4:	69f8      	ldr	r0, [r7, #28]
 8012bd6:	f7ff fd3f 	bl	8012658 <tu_desc_type>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	2b24      	cmp	r3, #36	; 0x24
 8012bde:	d103      	bne.n	8012be8 <cdcd_open+0xd8>
 8012be0:	8c3a      	ldrh	r2, [r7, #32]
 8012be2:	88bb      	ldrh	r3, [r7, #4]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d9e9      	bls.n	8012bbc <cdcd_open+0xac>
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8012be8:	69f8      	ldr	r0, [r7, #28]
 8012bea:	f7ff fd35 	bl	8012658 <tu_desc_type>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	2b05      	cmp	r3, #5
 8012bf2:	d12d      	bne.n	8012c50 <cdcd_open+0x140>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	61bb      	str	r3, [r7, #24]

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8012bf8:	79fb      	ldrb	r3, [r7, #7]
 8012bfa:	69b9      	ldr	r1, [r7, #24]
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f003 fc91 	bl	8016524 <usbd_edpt_open>
 8012c02:	4603      	mov	r3, r0
 8012c04:	f083 0301 	eor.w	r3, r3, #1
 8012c08:	b2db      	uxtb	r3, r3
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d010      	beq.n	8012c30 <cdcd_open+0x120>
 8012c0e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8012c12:	4932      	ldr	r1, [pc, #200]	; (8012cdc <cdcd_open+0x1cc>)
 8012c14:	4832      	ldr	r0, [pc, #200]	; (8012ce0 <cdcd_open+0x1d0>)
 8012c16:	f006 fac3 	bl	80191a0 <iprintf>
 8012c1a:	4b32      	ldr	r3, [pc, #200]	; (8012ce4 <cdcd_open+0x1d4>)
 8012c1c:	617b      	str	r3, [r7, #20]
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	f003 0301 	and.w	r3, r3, #1
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d000      	beq.n	8012c2c <cdcd_open+0x11c>
 8012c2a:	be00      	bkpt	0x0000
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	e04f      	b.n	8012cd0 <cdcd_open+0x1c0>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	789a      	ldrb	r2, [r3, #2]
 8012c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c36:	705a      	strb	r2, [r3, #1]

    drv_len += tu_desc_len(p_desc);
 8012c38:	69f8      	ldr	r0, [r7, #28]
 8012c3a:	f7ff fd1a 	bl	8012672 <tu_desc_len>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	8c3b      	ldrh	r3, [r7, #32]
 8012c44:	4413      	add	r3, r2
 8012c46:	843b      	strh	r3, [r7, #32]
    p_desc   = tu_desc_next(p_desc);
 8012c48:	69f8      	ldr	r0, [r7, #28]
 8012c4a:	f7ff fcf4 	bl	8012636 <tu_desc_next>
 8012c4e:	61f8      	str	r0, [r7, #28]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8012c50:	69f8      	ldr	r0, [r7, #28]
 8012c52:	f7ff fd01 	bl	8012658 <tu_desc_type>
 8012c56:	4603      	mov	r3, r0
 8012c58:	2b04      	cmp	r3, #4
 8012c5a:	d135      	bne.n	8012cc8 <cdcd_open+0x1b8>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8012c60:	2b0a      	cmp	r3, #10
 8012c62:	d131      	bne.n	8012cc8 <cdcd_open+0x1b8>
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8012c64:	69f8      	ldr	r0, [r7, #28]
 8012c66:	f7ff fd04 	bl	8012672 <tu_desc_len>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	b29a      	uxth	r2, r3
 8012c6e:	8c3b      	ldrh	r3, [r7, #32]
 8012c70:	4413      	add	r3, r2
 8012c72:	843b      	strh	r3, [r7, #32]
    p_desc   = tu_desc_next(p_desc);
 8012c74:	69f8      	ldr	r0, [r7, #28]
 8012c76:	f7ff fcde 	bl	8012636 <tu_desc_next>
 8012c7a:	61f8      	str	r0, [r7, #28]

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	3303      	adds	r3, #3
 8012c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c82:	3202      	adds	r2, #2
 8012c84:	79f8      	ldrb	r0, [r7, #7]
 8012c86:	9201      	str	r2, [sp, #4]
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	2302      	movs	r3, #2
 8012c8c:	2202      	movs	r2, #2
 8012c8e:	69f9      	ldr	r1, [r7, #28]
 8012c90:	f003 fbd6 	bl	8016440 <usbd_open_edpt_pair>
 8012c94:	4603      	mov	r3, r0
 8012c96:	f083 0301 	eor.w	r3, r3, #1
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d010      	beq.n	8012cc2 <cdcd_open+0x1b2>
 8012ca0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012ca4:	490d      	ldr	r1, [pc, #52]	; (8012cdc <cdcd_open+0x1cc>)
 8012ca6:	480e      	ldr	r0, [pc, #56]	; (8012ce0 <cdcd_open+0x1d0>)
 8012ca8:	f006 fa7a 	bl	80191a0 <iprintf>
 8012cac:	4b0d      	ldr	r3, [pc, #52]	; (8012ce4 <cdcd_open+0x1d4>)
 8012cae:	613b      	str	r3, [r7, #16]
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f003 0301 	and.w	r3, r3, #1
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d000      	beq.n	8012cbe <cdcd_open+0x1ae>
 8012cbc:	be00      	bkpt	0x0000
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	e006      	b.n	8012cd0 <cdcd_open+0x1c0>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8012cc2:	8c3b      	ldrh	r3, [r7, #32]
 8012cc4:	330e      	adds	r3, #14
 8012cc6:	843b      	strh	r3, [r7, #32]
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8012cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cca:	f7ff fceb 	bl	80126a4 <_prep_out_transaction>

  return drv_len;
 8012cce:	8c3b      	ldrh	r3, [r7, #32]
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3728      	adds	r7, #40	; 0x28
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	20008f30 	.word	0x20008f30
 8012cdc:	0801c864 	.word	0x0801c864
 8012ce0:	0801b228 	.word	0x0801b228
 8012ce4:	e000edf0 	.word	0xe000edf0

08012ce8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b08a      	sub	sp, #40	; 0x28
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	4603      	mov	r3, r0
 8012cf0:	603a      	str	r2, [r7, #0]
 8012cf2:	71fb      	strb	r3, [r7, #7]
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012d00:	b2db      	uxtb	r3, r3
 8012d02:	2b20      	cmp	r3, #32
 8012d04:	d001      	beq.n	8012d0a <cdcd_control_xfer_cb+0x22>
 8012d06:	2300      	movs	r3, #0
 8012d08:	e0dc      	b.n	8012ec4 <cdcd_control_xfer_cb+0x1dc>

  uint8_t itf = 0;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8012d10:	4b6e      	ldr	r3, [pc, #440]	; (8012ecc <cdcd_control_xfer_cb+0x1e4>)
 8012d12:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8012d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d001      	beq.n	8012d20 <cdcd_control_xfer_cb+0x38>
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	e0d1      	b.n	8012ec4 <cdcd_control_xfer_cb+0x1dc>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8012d20:	6a3b      	ldr	r3, [r7, #32]
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	889b      	ldrh	r3, [r3, #4]
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d009      	beq.n	8012d44 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8012d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d34:	3301      	adds	r3, #1
 8012d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d3a:	6a3b      	ldr	r3, [r7, #32]
 8012d3c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8012d40:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8012d42:	e7e7      	b.n	8012d14 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8012d44:	bf00      	nop
  }

  switch ( request->bRequest )
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	785b      	ldrb	r3, [r3, #1]
 8012d4a:	3b20      	subs	r3, #32
 8012d4c:	2b03      	cmp	r3, #3
 8012d4e:	f200 80af 	bhi.w	8012eb0 <cdcd_control_xfer_cb+0x1c8>
 8012d52:	a201      	add	r2, pc, #4	; (adr r2, 8012d58 <cdcd_control_xfer_cb+0x70>)
 8012d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d58:	08012d69 	.word	0x08012d69
 8012d5c:	08012da7 	.word	0x08012da7
 8012d60:	08012dc5 	.word	0x08012dc5
 8012d64:	08012e79 	.word	0x08012e79
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8012d68:	79bb      	ldrb	r3, [r7, #6]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d10a      	bne.n	8012d84 <cdcd_control_xfer_cb+0x9c>
      {
        TU_LOG2("  Set Line Coding\r\n");
 8012d6e:	4858      	ldr	r0, [pc, #352]	; (8012ed0 <cdcd_control_xfer_cb+0x1e8>)
 8012d70:	f006 fab2 	bl	80192d8 <puts>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8012d74:	6a3b      	ldr	r3, [r7, #32]
 8012d76:	1d9a      	adds	r2, r3, #6
 8012d78:	79f8      	ldrb	r0, [r7, #7]
 8012d7a:	2307      	movs	r3, #7
 8012d7c:	6839      	ldr	r1, [r7, #0]
 8012d7e:	f003 fef1 	bl	8016b64 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8012d82:	e097      	b.n	8012eb4 <cdcd_control_xfer_cb+0x1cc>
      else if ( stage == CONTROL_STAGE_ACK)
 8012d84:	79bb      	ldrb	r3, [r7, #6]
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	f040 8094 	bne.w	8012eb4 <cdcd_control_xfer_cb+0x1cc>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8012d8c:	4b51      	ldr	r3, [pc, #324]	; (8012ed4 <cdcd_control_xfer_cb+0x1ec>)
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f000 8090 	beq.w	8012eb4 <cdcd_control_xfer_cb+0x1cc>
 8012d94:	6a3b      	ldr	r3, [r7, #32]
 8012d96:	1d9a      	adds	r2, r3, #6
 8012d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d9c:	4611      	mov	r1, r2
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f3af 8000 	nop.w
    break;
 8012da4:	e086      	b.n	8012eb4 <cdcd_control_xfer_cb+0x1cc>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8012da6:	79bb      	ldrb	r3, [r7, #6]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	f040 8085 	bne.w	8012eb8 <cdcd_control_xfer_cb+0x1d0>
      {
        TU_LOG2("  Get Line Coding\r\n");
 8012dae:	484a      	ldr	r0, [pc, #296]	; (8012ed8 <cdcd_control_xfer_cb+0x1f0>)
 8012db0:	f006 fa92 	bl	80192d8 <puts>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8012db4:	6a3b      	ldr	r3, [r7, #32]
 8012db6:	1d9a      	adds	r2, r3, #6
 8012db8:	79f8      	ldrb	r0, [r7, #7]
 8012dba:	2307      	movs	r3, #7
 8012dbc:	6839      	ldr	r1, [r7, #0]
 8012dbe:	f003 fed1 	bl	8016b64 <tud_control_xfer>
      }
    break;
 8012dc2:	e079      	b.n	8012eb8 <cdcd_control_xfer_cb+0x1d0>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8012dc4:	79bb      	ldrb	r3, [r7, #6]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d105      	bne.n	8012dd6 <cdcd_control_xfer_cb+0xee>
      {
        tud_control_status(rhport, request);
 8012dca:	79fb      	ldrb	r3, [r7, #7]
 8012dcc:	6839      	ldr	r1, [r7, #0]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f003 fe6a 	bl	8016aa8 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8012dd4:	e072      	b.n	8012ebc <cdcd_control_xfer_cb+0x1d4>
      else if (stage == CONTROL_STAGE_ACK)
 8012dd6:	79bb      	ldrb	r3, [r7, #6]
 8012dd8:	2b02      	cmp	r3, #2
 8012dda:	d16f      	bne.n	8012ebc <cdcd_control_xfer_cb+0x1d4>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	885b      	ldrh	r3, [r3, #2]
 8012de0:	b29b      	uxth	r3, r3
 8012de2:	613b      	str	r3, [r7, #16]
 8012de4:	2300      	movs	r3, #0
 8012de6:	73fb      	strb	r3, [r7, #15]
 8012de8:	7bfb      	ldrb	r3, [r7, #15]
 8012dea:	693a      	ldr	r2, [r7, #16]
 8012dec:	fa22 f303 	lsr.w	r3, r2, r3
 8012df0:	f003 0301 	and.w	r3, r3, #1
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	bf14      	ite	ne
 8012df8:	2301      	movne	r3, #1
 8012dfa:	2300      	moveq	r3, #0
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8012e00:	683b      	ldr	r3, [r7, #0]
 8012e02:	885b      	ldrh	r3, [r3, #2]
 8012e04:	b29b      	uxth	r3, r3
 8012e06:	61bb      	str	r3, [r7, #24]
 8012e08:	2301      	movs	r3, #1
 8012e0a:	75fb      	strb	r3, [r7, #23]
 8012e0c:	7dfb      	ldrb	r3, [r7, #23]
 8012e0e:	69ba      	ldr	r2, [r7, #24]
 8012e10:	fa22 f303 	lsr.w	r3, r2, r3
 8012e14:	f003 0301 	and.w	r3, r3, #1
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	bf14      	ite	ne
 8012e1c:	2301      	movne	r3, #1
 8012e1e:	2300      	moveq	r3, #0
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	885b      	ldrh	r3, [r3, #2]
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	b2da      	uxtb	r2, r3
 8012e2c:	6a3b      	ldr	r3, [r7, #32]
 8012e2e:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8012e30:	6a3b      	ldr	r3, [r7, #32]
 8012e32:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8012e36:	7ffb      	ldrb	r3, [r7, #31]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	bf14      	ite	ne
 8012e3c:	2301      	movne	r3, #1
 8012e3e:	2300      	moveq	r3, #0
 8012e40:	b2db      	uxtb	r3, r3
 8012e42:	f083 0301 	eor.w	r3, r3, #1
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	f003 0301 	and.w	r3, r3, #1
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	4619      	mov	r1, r3
 8012e50:	4610      	mov	r0, r2
 8012e52:	f002 f858 	bl	8014f06 <tu_fifo_set_overwritable>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);
 8012e56:	7ffb      	ldrb	r3, [r7, #31]
 8012e58:	7fba      	ldrb	r2, [r7, #30]
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	481f      	ldr	r0, [pc, #124]	; (8012edc <cdcd_control_xfer_cb+0x1f4>)
 8012e5e:	f006 f99f 	bl	80191a0 <iprintf>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8012e62:	4b1f      	ldr	r3, [pc, #124]	; (8012ee0 <cdcd_control_xfer_cb+0x1f8>)
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d029      	beq.n	8012ebc <cdcd_control_xfer_cb+0x1d4>
 8012e68:	7fba      	ldrb	r2, [r7, #30]
 8012e6a:	7ff9      	ldrb	r1, [r7, #31]
 8012e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e70:	4618      	mov	r0, r3
 8012e72:	f3af 8000 	nop.w
    break;
 8012e76:	e021      	b.n	8012ebc <cdcd_control_xfer_cb+0x1d4>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8012e78:	79bb      	ldrb	r3, [r7, #6]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d105      	bne.n	8012e8a <cdcd_control_xfer_cb+0x1a2>
      {
        tud_control_status(rhport, request);
 8012e7e:	79fb      	ldrb	r3, [r7, #7]
 8012e80:	6839      	ldr	r1, [r7, #0]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f003 fe10 	bl	8016aa8 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8012e88:	e01a      	b.n	8012ec0 <cdcd_control_xfer_cb+0x1d8>
      else if (stage == CONTROL_STAGE_ACK)
 8012e8a:	79bb      	ldrb	r3, [r7, #6]
 8012e8c:	2b02      	cmp	r3, #2
 8012e8e:	d117      	bne.n	8012ec0 <cdcd_control_xfer_cb+0x1d8>
        TU_LOG2("  Send Break\r\n");
 8012e90:	4814      	ldr	r0, [pc, #80]	; (8012ee4 <cdcd_control_xfer_cb+0x1fc>)
 8012e92:	f006 fa21 	bl	80192d8 <puts>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8012e96:	4b14      	ldr	r3, [pc, #80]	; (8012ee8 <cdcd_control_xfer_cb+0x200>)
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d011      	beq.n	8012ec0 <cdcd_control_xfer_cb+0x1d8>
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	885b      	ldrh	r3, [r3, #2]
 8012ea0:	b29a      	uxth	r2, r3
 8012ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ea6:	4611      	mov	r1, r2
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f3af 8000 	nop.w
    break;
 8012eae:	e007      	b.n	8012ec0 <cdcd_control_xfer_cb+0x1d8>

    default: return false; // stall unsupported request
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	e007      	b.n	8012ec4 <cdcd_control_xfer_cb+0x1dc>
    break;
 8012eb4:	bf00      	nop
 8012eb6:	e004      	b.n	8012ec2 <cdcd_control_xfer_cb+0x1da>
    break;
 8012eb8:	bf00      	nop
 8012eba:	e002      	b.n	8012ec2 <cdcd_control_xfer_cb+0x1da>
    break;
 8012ebc:	bf00      	nop
 8012ebe:	e000      	b.n	8012ec2 <cdcd_control_xfer_cb+0x1da>
    break;
 8012ec0:	bf00      	nop
  }

  return true;
 8012ec2:	2301      	movs	r3, #1
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3728      	adds	r7, #40	; 0x28
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	20008f30 	.word	0x20008f30
 8012ed0:	0801b240 	.word	0x0801b240
 8012ed4:	00000000 	.word	0x00000000
 8012ed8:	0801b254 	.word	0x0801b254
 8012edc:	0801b268 	.word	0x0801b268
 8012ee0:	00000000 	.word	0x00000000
 8012ee4:	0801b298 	.word	0x0801b298
 8012ee8:	00000000 	.word	0x00000000

08012eec <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b086      	sub	sp, #24
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	603b      	str	r3, [r7, #0]
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	71fb      	strb	r3, [r7, #7]
 8012ef8:	460b      	mov	r3, r1
 8012efa:	71bb      	strb	r3, [r7, #6]
 8012efc:	4613      	mov	r3, r2
 8012efe:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8012f00:	2300      	movs	r3, #0
 8012f02:	75fb      	strb	r3, [r7, #23]
 8012f04:	e014      	b.n	8012f30 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8012f06:	7dfb      	ldrb	r3, [r7, #23]
 8012f08:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8012f0c:	fb02 f303 	mul.w	r3, r2, r3
 8012f10:	4a58      	ldr	r2, [pc, #352]	; (8013074 <cdcd_xfer_cb+0x188>)
 8012f12:	4413      	add	r3, r2
 8012f14:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	78db      	ldrb	r3, [r3, #3]
 8012f1a:	79ba      	ldrb	r2, [r7, #6]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d00a      	beq.n	8012f36 <cdcd_xfer_cb+0x4a>
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	789b      	ldrb	r3, [r3, #2]
 8012f24:	79ba      	ldrb	r2, [r7, #6]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d005      	beq.n	8012f36 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8012f2a:	7dfb      	ldrb	r3, [r7, #23]
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	75fb      	strb	r3, [r7, #23]
 8012f30:	7dfb      	ldrb	r3, [r7, #23]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d0e7      	beq.n	8012f06 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8012f36:	7dfb      	ldrb	r3, [r7, #23]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d010      	beq.n	8012f5e <cdcd_xfer_cb+0x72>
 8012f3c:	f240 12b1 	movw	r2, #433	; 0x1b1
 8012f40:	494d      	ldr	r1, [pc, #308]	; (8013078 <cdcd_xfer_cb+0x18c>)
 8012f42:	484e      	ldr	r0, [pc, #312]	; (801307c <cdcd_xfer_cb+0x190>)
 8012f44:	f006 f92c 	bl	80191a0 <iprintf>
 8012f48:	4b4d      	ldr	r3, [pc, #308]	; (8013080 <cdcd_xfer_cb+0x194>)
 8012f4a:	60bb      	str	r3, [r7, #8]
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f003 0301 	and.w	r3, r3, #1
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d000      	beq.n	8012f5a <cdcd_xfer_cb+0x6e>
 8012f58:	be00      	bkpt	0x0000
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e086      	b.n	801306c <cdcd_xfer_cb+0x180>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	78db      	ldrb	r3, [r3, #3]
 8012f62:	79ba      	ldrb	r2, [r7, #6]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d14c      	bne.n	8013002 <cdcd_xfer_cb+0x116>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, xferred_bytes);
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	f103 0010 	add.w	r0, r3, #16
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8012f74:	683a      	ldr	r2, [r7, #0]
 8012f76:	b292      	uxth	r2, r2
 8012f78:	4619      	mov	r1, r3
 8012f7a:	f001 ff6e 	bl	8014e5a <tu_fifo_write_n>
    
    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8012f7e:	4b41      	ldr	r3, [pc, #260]	; (8013084 <cdcd_xfer_cb+0x198>)
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d029      	beq.n	8012fd8 <cdcd_xfer_cb+0xec>
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	795b      	ldrb	r3, [r3, #5]
 8012f88:	2bff      	cmp	r3, #255	; 0xff
 8012f8a:	d025      	beq.n	8012fd8 <cdcd_xfer_cb+0xec>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	60fb      	str	r3, [r7, #12]
 8012f90:	e01e      	b.n	8012fd0 <cdcd_xfer_cb+0xe4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	795a      	ldrb	r2, [r3, #5]
 8012f96:	6939      	ldr	r1, [r7, #16]
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	440b      	add	r3, r1
 8012f9c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d111      	bne.n	8012fca <cdcd_xfer_cb+0xde>
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	3310      	adds	r3, #16
 8012faa:	4618      	mov	r0, r3
 8012fac:	f001 ff0b 	bl	8014dc6 <tu_fifo_empty>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	f083 0301 	eor.w	r3, r3, #1
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d006      	beq.n	8012fca <cdcd_xfer_cb+0xde>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	795a      	ldrb	r2, [r3, #5]
 8012fc0:	7dfb      	ldrb	r3, [r7, #23]
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	3301      	adds	r3, #1
 8012fce:	60fb      	str	r3, [r7, #12]
 8012fd0:	68fa      	ldr	r2, [r7, #12]
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d3dc      	bcc.n	8012f92 <cdcd_xfer_cb+0xa6>
        }
      }
    }
    
    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8012fd8:	4b2b      	ldr	r3, [pc, #172]	; (8013088 <cdcd_xfer_cb+0x19c>)
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d00e      	beq.n	8012ffc <cdcd_xfer_cb+0x110>
 8012fde:	693b      	ldr	r3, [r7, #16]
 8012fe0:	3310      	adds	r3, #16
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f001 feef 	bl	8014dc6 <tu_fifo_empty>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	f083 0301 	eor.w	r3, r3, #1
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d003      	beq.n	8012ffc <cdcd_xfer_cb+0x110>
 8012ff4:	7dfb      	ldrb	r3, [r7, #23]
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f3af 8000 	nop.w
    
    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8012ffc:	6938      	ldr	r0, [r7, #16]
 8012ffe:	f7ff fb51 	bl	80126a4 <_prep_out_transaction>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	789b      	ldrb	r3, [r3, #2]
 8013006:	79ba      	ldrb	r2, [r7, #6]
 8013008:	429a      	cmp	r2, r3
 801300a:	d12e      	bne.n	801306a <cdcd_xfer_cb+0x17e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 801300c:	4b1f      	ldr	r3, [pc, #124]	; (801308c <cdcd_xfer_cb+0x1a0>)
 801300e:	2b00      	cmp	r3, #0
 8013010:	d003      	beq.n	801301a <cdcd_xfer_cb+0x12e>
 8013012:	7dfb      	ldrb	r3, [r7, #23]
 8013014:	4618      	mov	r0, r3
 8013016:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 801301a:	7dfb      	ldrb	r3, [r7, #23]
 801301c:	4618      	mov	r0, r3
 801301e:	f7ff fc2b 	bl	8012878 <tud_cdc_n_write_flush>
 8013022:	4603      	mov	r3, r0
 8013024:	2b00      	cmp	r3, #0
 8013026:	d120      	bne.n	801306a <cdcd_xfer_cb+0x17e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	332c      	adds	r3, #44	; 0x2c
 801302c:	4618      	mov	r0, r3
 801302e:	f001 feac 	bl	8014d8a <tu_fifo_count>
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d118      	bne.n	801306a <cdcd_xfer_cb+0x17e>
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d015      	beq.n	801306a <cdcd_xfer_cb+0x17e>
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013044:	2b00      	cmp	r3, #0
 8013046:	d110      	bne.n	801306a <cdcd_xfer_cb+0x17e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	789a      	ldrb	r2, [r3, #2]
 801304c:	79fb      	ldrb	r3, [r7, #7]
 801304e:	4611      	mov	r1, r2
 8013050:	4618      	mov	r0, r3
 8013052:	f003 fab5 	bl	80165c0 <usbd_edpt_claim>
 8013056:	4603      	mov	r3, r0
 8013058:	2b00      	cmp	r3, #0
 801305a:	d006      	beq.n	801306a <cdcd_xfer_cb+0x17e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	7899      	ldrb	r1, [r3, #2]
 8013060:	79f8      	ldrb	r0, [r7, #7]
 8013062:	2300      	movs	r3, #0
 8013064:	2200      	movs	r2, #0
 8013066:	f003 fb85 	bl	8016774 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 801306a:	2301      	movs	r3, #1
}
 801306c:	4618      	mov	r0, r3
 801306e:	3718      	adds	r7, #24
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}
 8013074:	20008f30 	.word	0x20008f30
 8013078:	0801c870 	.word	0x0801c870
 801307c:	0801b228 	.word	0x0801b228
 8013080:	e000edf0 	.word	0xe000edf0
	...

08013090 <tu_desc_next>:
{
 8013090:	b480      	push	{r7}
 8013092:	b085      	sub	sp, #20
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	461a      	mov	r2, r3
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	4413      	add	r3, r2
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3714      	adds	r7, #20
 80130aa:	46bd      	mov	sp, r7
 80130ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b0:	4770      	bx	lr
	...

080130b4 <tu_lookup_find>:
  uint16_t count;
  tu_lookup_entry_t const* items;
} tu_lookup_table_t;

static inline const char* tu_lookup_find(tu_lookup_table_t const* p_table, uint32_t key)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
  static char not_found[11];

  for(uint16_t i=0; i<p_table->count; i++)
 80130be:	2300      	movs	r3, #0
 80130c0:	81fb      	strh	r3, [r7, #14]
 80130c2:	e012      	b.n	80130ea <tu_lookup_find+0x36>
  {
    if (p_table->items[i].key == key) return p_table->items[i].data;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	685a      	ldr	r2, [r3, #4]
 80130c8:	89fb      	ldrh	r3, [r7, #14]
 80130ca:	00db      	lsls	r3, r3, #3
 80130cc:	4413      	add	r3, r2
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	683a      	ldr	r2, [r7, #0]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d106      	bne.n	80130e4 <tu_lookup_find+0x30>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	685a      	ldr	r2, [r3, #4]
 80130da:	89fb      	ldrh	r3, [r7, #14]
 80130dc:	00db      	lsls	r3, r3, #3
 80130de:	4413      	add	r3, r2
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	e00d      	b.n	8013100 <tu_lookup_find+0x4c>
  for(uint16_t i=0; i<p_table->count; i++)
 80130e4:	89fb      	ldrh	r3, [r7, #14]
 80130e6:	3301      	adds	r3, #1
 80130e8:	81fb      	strh	r3, [r7, #14]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	89fa      	ldrh	r2, [r7, #14]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d3e7      	bcc.n	80130c4 <tu_lookup_find+0x10>
  }

  // not found return the key value in hex
  sprintf(not_found, "0x%08lX", (unsigned long) key);
 80130f4:	683a      	ldr	r2, [r7, #0]
 80130f6:	4904      	ldr	r1, [pc, #16]	; (8013108 <tu_lookup_find+0x54>)
 80130f8:	4804      	ldr	r0, [pc, #16]	; (801310c <tu_lookup_find+0x58>)
 80130fa:	f006 f96f 	bl	80193dc <siprintf>

  return not_found;
 80130fe:	4b03      	ldr	r3, [pc, #12]	; (801310c <tu_lookup_find+0x58>)
}
 8013100:	4618      	mov	r0, r3
 8013102:	3710      	adds	r7, #16
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}
 8013108:	0801b2a8 	.word	0x0801b2a8
 801310c:	20009348 	.word	0x20009348

08013110 <send_csw>:
{
  return tu_bit_test(dir, 7);
}

static inline bool send_csw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	4603      	mov	r3, r0
 8013118:	6039      	str	r1, [r7, #0]
 801311a:	71fb      	strb	r3, [r7, #7]
  // Data residue is always = host expect - actual transferred
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	689a      	ldr	r2, [r3, #8]
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013124:	1ad2      	subs	r2, r2, r3
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	629a      	str	r2, [r3, #40]	; 0x28

  p_msc->stage = MSC_STAGE_STATUS_SENT;
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	2203      	movs	r2, #3
 801312e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	f103 0220 	add.w	r2, r3, #32
 801313e:	79f8      	ldrb	r0, [r7, #7]
 8013140:	230d      	movs	r3, #13
 8013142:	f003 fb17 	bl	8016774 <usbd_edpt_xfer>
 8013146:	4603      	mov	r3, r0
}
 8013148:	4618      	mov	r0, r3
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <prepare_cbw>:

static inline bool prepare_cbw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	4603      	mov	r3, r0
 8013158:	6039      	str	r1, [r7, #0]
 801315a:	71fb      	strb	r3, [r7, #7]
  p_msc->stage = MSC_STAGE_CMD;
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	2200      	movs	r2, #0
 8013160:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 801316a:	683a      	ldr	r2, [r7, #0]
 801316c:	79f8      	ldrb	r0, [r7, #7]
 801316e:	231f      	movs	r3, #31
 8013170:	f003 fb00 	bl	8016774 <usbd_edpt_xfer>
 8013174:	4603      	mov	r3, r0
}
 8013176:	4618      	mov	r0, r3
 8013178:	3708      	adds	r7, #8
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}

0801317e <fail_scsi_op>:

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
{
 801317e:	b580      	push	{r7, lr}
 8013180:	b088      	sub	sp, #32
 8013182:	af00      	add	r7, sp, #0
 8013184:	4603      	mov	r3, r0
 8013186:	6039      	str	r1, [r7, #0]
 8013188:	71fb      	strb	r3, [r7, #7]
 801318a:	4613      	mov	r3, r2
 801318c:	71bb      	strb	r3, [r7, #6]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	61fb      	str	r3, [r7, #28]
  msc_csw_t       * p_csw = &p_msc->csw;
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	3320      	adds	r3, #32
 8013196:	61bb      	str	r3, [r7, #24]

  p_csw->status       = status;
 8013198:	69bb      	ldr	r3, [r7, #24]
 801319a:	79ba      	ldrb	r2, [r7, #6]
 801319c:	731a      	strb	r2, [r3, #12]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	689a      	ldr	r2, [r3, #8]
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131a6:	1ad2      	subs	r2, r2, r3
 80131a8:	69bb      	ldr	r3, [r7, #24]
 80131aa:	609a      	str	r2, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	2202      	movs	r2, #2
 80131b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d106      	bne.n	80131cc <fail_scsi_op+0x4e>
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	7b58      	ldrb	r0, [r3, #13]
 80131c2:	2300      	movs	r3, #0
 80131c4:	2220      	movs	r2, #32
 80131c6:	2105      	movs	r1, #5
 80131c8:	f000 f8ea 	bl	80133a0 <tud_msc_set_sense>

  // If there is data stage and not yet complete, stall it
  if ( p_cbw->total_bytes && p_csw->data_residue )
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	689b      	ldr	r3, [r3, #8]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d028      	beq.n	8013226 <fail_scsi_op+0xa8>
 80131d4:	69bb      	ldr	r3, [r7, #24]
 80131d6:	689b      	ldr	r3, [r3, #8]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d024      	beq.n	8013226 <fail_scsi_op+0xa8>
  {
    if ( is_data_in(p_cbw->dir) )
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	7b1b      	ldrb	r3, [r3, #12]
 80131e0:	75fb      	strb	r3, [r7, #23]
  return tu_bit_test(dir, 7);
 80131e2:	7dfb      	ldrb	r3, [r7, #23]
 80131e4:	613b      	str	r3, [r7, #16]
 80131e6:	2307      	movs	r3, #7
 80131e8:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80131ea:	7bfb      	ldrb	r3, [r7, #15]
 80131ec:	693a      	ldr	r2, [r7, #16]
 80131ee:	fa22 f303 	lsr.w	r3, r2, r3
 80131f2:	f003 0301 	and.w	r3, r3, #1
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	bf14      	ite	ne
 80131fa:	2301      	movne	r3, #1
 80131fc:	2300      	moveq	r3, #0
 80131fe:	b2db      	uxtb	r3, r3
    if ( is_data_in(p_cbw->dir) )
 8013200:	2b00      	cmp	r3, #0
 8013202:	d008      	beq.n	8013216 <fail_scsi_op+0x98>
    {
      usbd_edpt_stall(rhport, p_msc->ep_in);
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801320a:	79fb      	ldrb	r3, [r7, #7]
 801320c:	4611      	mov	r1, r2
 801320e:	4618      	mov	r0, r3
 8013210:	f003 fb5e 	bl	80168d0 <usbd_edpt_stall>
    else
    {
      usbd_edpt_stall(rhport, p_msc->ep_out);
    }
  }
}
 8013214:	e007      	b.n	8013226 <fail_scsi_op+0xa8>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801321c:	79fb      	ldrb	r3, [r7, #7]
 801321e:	4611      	mov	r1, r2
 8013220:	4618      	mov	r0, r3
 8013222:	f003 fb55 	bl	80168d0 <usbd_edpt_stall>
}
 8013226:	bf00      	nop
 8013228:	3720      	adds	r7, #32
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <rdwr10_get_lba>:

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 801322e:	b480      	push	{r7}
 8013230:	b085      	sub	sp, #20
 8013232:	af00      	add	r7, sp, #0
 8013234:	6078      	str	r0, [r7, #4]
  // use offsetof to avoid pointer to the odd/unaligned address
  uint32_t const lba = tu_unaligned_read32(command + offsetof(scsi_write10_t, lba));
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	3302      	adds	r3, #2
 801323a:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	60fb      	str	r3, [r7, #12]

  // lba is in Big Endian
  return tu_ntohl(lba);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	ba1b      	rev	r3, r3
}
 8013246:	4618      	mov	r0, r3
 8013248:	3714      	adds	r7, #20
 801324a:	46bd      	mov	sp, r7
 801324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013250:	4770      	bx	lr

08013252 <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(msc_cbw_t const* cbw)
{
 8013252:	b480      	push	{r7}
 8013254:	b085      	sub	sp, #20
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
  uint16_t const block_count = tu_unaligned_read16(cbw->command + offsetof(scsi_write10_t, block_count));
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	330f      	adds	r3, #15
 801325e:	3307      	adds	r3, #7
 8013260:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	881b      	ldrh	r3, [r3, #0]
 8013266:	81fb      	strh	r3, [r7, #14]
  return tu_ntohs(block_count);
 8013268:	89fb      	ldrh	r3, [r7, #14]
 801326a:	ba5b      	rev16	r3, r3
 801326c:	b29b      	uxth	r3, r3
}
 801326e:	4618      	mov	r0, r3
 8013270:	3714      	adds	r7, #20
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr

0801327a <rdwr10_get_blocksize>:

static inline uint16_t rdwr10_get_blocksize(msc_cbw_t const* cbw)
{
 801327a:	b580      	push	{r7, lr}
 801327c:	b084      	sub	sp, #16
 801327e:	af00      	add	r7, sp, #0
 8013280:	6078      	str	r0, [r7, #4]
  // first extract block count in the command
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7ff ffe5 	bl	8013252 <rdwr10_get_blockcount>
 8013288:	4603      	mov	r3, r0
 801328a:	81fb      	strh	r3, [r7, #14]

  // invalid block count
  if (block_count == 0) return 0;
 801328c:	89fb      	ldrh	r3, [r7, #14]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d101      	bne.n	8013296 <rdwr10_get_blocksize+0x1c>
 8013292:	2300      	movs	r3, #0
 8013294:	e005      	b.n	80132a2 <rdwr10_get_blocksize+0x28>

  return (uint16_t) (cbw->total_bytes / block_count);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	689a      	ldr	r2, [r3, #8]
 801329a:	89fb      	ldrh	r3, [r7, #14]
 801329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80132a0:	b29b      	uxth	r3, r3
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3710      	adds	r7, #16
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}
	...

080132ac <rdwr10_validate_cmd>:

uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b088      	sub	sp, #32
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
  uint8_t status = MSC_CSW_STATUS_PASSED;
 80132b4:	2300      	movs	r3, #0
 80132b6:	77fb      	strb	r3, [r7, #31]
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	f7ff ffca 	bl	8013252 <rdwr10_get_blockcount>
 80132be:	4603      	mov	r3, r0
 80132c0:	83bb      	strh	r3, [r7, #28]

  if ( cbw->total_bytes == 0 )
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	689b      	ldr	r3, [r3, #8]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d108      	bne.n	80132dc <rdwr10_validate_cmd+0x30>
  {
    if ( block_count )
 80132ca:	8bbb      	ldrh	r3, [r7, #28]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d057      	beq.n	8013380 <rdwr10_validate_cmd+0xd4>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
 80132d0:	482e      	ldr	r0, [pc, #184]	; (801338c <rdwr10_validate_cmd+0xe0>)
 80132d2:	f006 f801 	bl	80192d8 <puts>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80132d6:	2302      	movs	r3, #2
 80132d8:	77fb      	strb	r3, [r7, #31]
 80132da:	e051      	b.n	8013380 <rdwr10_validate_cmd+0xd4>
    {
      // no data transfer, only exist in complaint test suite
    }
  }else
  {
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	7bdb      	ldrb	r3, [r3, #15]
 80132e0:	2b28      	cmp	r3, #40	; 0x28
 80132e2:	d11c      	bne.n	801331e <rdwr10_validate_cmd+0x72>
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	7b1b      	ldrb	r3, [r3, #12]
 80132e8:	76fb      	strb	r3, [r7, #27]
  return tu_bit_test(dir, 7);
 80132ea:	7efb      	ldrb	r3, [r7, #27]
 80132ec:	617b      	str	r3, [r7, #20]
 80132ee:	2307      	movs	r3, #7
 80132f0:	74fb      	strb	r3, [r7, #19]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80132f2:	7cfb      	ldrb	r3, [r7, #19]
 80132f4:	697a      	ldr	r2, [r7, #20]
 80132f6:	fa22 f303 	lsr.w	r3, r2, r3
 80132fa:	f003 0301 	and.w	r3, r3, #1
 80132fe:	2b00      	cmp	r3, #0
 8013300:	bf14      	ite	ne
 8013302:	2301      	movne	r3, #1
 8013304:	2300      	moveq	r3, #0
 8013306:	b2db      	uxtb	r3, r3
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 8013308:	f083 0301 	eor.w	r3, r3, #1
 801330c:	b2db      	uxtb	r3, r3
 801330e:	2b00      	cmp	r3, #0
 8013310:	d005      	beq.n	801331e <rdwr10_validate_cmd+0x72>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 10 (Ho <> Di)\r\n");
 8013312:	481f      	ldr	r0, [pc, #124]	; (8013390 <rdwr10_validate_cmd+0xe4>)
 8013314:	f005 ffe0 	bl	80192d8 <puts>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8013318:	2302      	movs	r3, #2
 801331a:	77fb      	strb	r3, [r7, #31]
 801331c:	e030      	b.n	8013380 <rdwr10_validate_cmd+0xd4>
    }
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	7bdb      	ldrb	r3, [r3, #15]
 8013322:	2b2a      	cmp	r3, #42	; 0x2a
 8013324:	d119      	bne.n	801335a <rdwr10_validate_cmd+0xae>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	7b1b      	ldrb	r3, [r3, #12]
 801332a:	74bb      	strb	r3, [r7, #18]
  return tu_bit_test(dir, 7);
 801332c:	7cbb      	ldrb	r3, [r7, #18]
 801332e:	60fb      	str	r3, [r7, #12]
 8013330:	2307      	movs	r3, #7
 8013332:	72fb      	strb	r3, [r7, #11]
 8013334:	7afb      	ldrb	r3, [r7, #11]
 8013336:	68fa      	ldr	r2, [r7, #12]
 8013338:	fa22 f303 	lsr.w	r3, r2, r3
 801333c:	f003 0301 	and.w	r3, r3, #1
 8013340:	2b00      	cmp	r3, #0
 8013342:	bf14      	ite	ne
 8013344:	2301      	movne	r3, #1
 8013346:	2300      	moveq	r3, #0
 8013348:	b2db      	uxtb	r3, r3
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 801334a:	2b00      	cmp	r3, #0
 801334c:	d005      	beq.n	801335a <rdwr10_validate_cmd+0xae>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 8 (Hi <> Do)\r\n");
 801334e:	4811      	ldr	r0, [pc, #68]	; (8013394 <rdwr10_validate_cmd+0xe8>)
 8013350:	f005 ffc2 	bl	80192d8 <puts>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8013354:	2302      	movs	r3, #2
 8013356:	77fb      	strb	r3, [r7, #31]
 8013358:	e012      	b.n	8013380 <rdwr10_validate_cmd+0xd4>
    }
    else if ( 0 == block_count )
 801335a:	8bbb      	ldrh	r3, [r7, #28]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d105      	bne.n	801336c <rdwr10_validate_cmd+0xc0>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
 8013360:	480d      	ldr	r0, [pc, #52]	; (8013398 <rdwr10_validate_cmd+0xec>)
 8013362:	f005 ffb9 	bl	80192d8 <puts>
      status =  MSC_CSW_STATUS_FAILED;
 8013366:	2301      	movs	r3, #1
 8013368:	77fb      	strb	r3, [r7, #31]
 801336a:	e009      	b.n	8013380 <rdwr10_validate_cmd+0xd4>
    }
    else if ( cbw->total_bytes / block_count == 0 )
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	689a      	ldr	r2, [r3, #8]
 8013370:	8bbb      	ldrh	r3, [r7, #28]
 8013372:	429a      	cmp	r2, r3
 8013374:	d204      	bcs.n	8013380 <rdwr10_validate_cmd+0xd4>
    {
      TU_LOG(MSC_DEBUG, " Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
 8013376:	4809      	ldr	r0, [pc, #36]	; (801339c <rdwr10_validate_cmd+0xf0>)
 8013378:	f005 ffae 	bl	80192d8 <puts>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 801337c:	2302      	movs	r3, #2
 801337e:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8013380:	7ffb      	ldrb	r3, [r7, #31]
}
 8013382:	4618      	mov	r0, r3
 8013384:	3720      	adds	r7, #32
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	0801b2b0 	.word	0x0801b2b0
 8013390:	0801b2e0 	.word	0x0801b2e0
 8013394:	0801b2fc 	.word	0x0801b2fc
 8013398:	0801b318 	.word	0x0801b318
 801339c:	0801b358 	.word	0x0801b358

080133a0 <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 80133a0:	b490      	push	{r4, r7}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	4604      	mov	r4, r0
 80133a8:	4608      	mov	r0, r1
 80133aa:	4611      	mov	r1, r2
 80133ac:	461a      	mov	r2, r3
 80133ae:	4623      	mov	r3, r4
 80133b0:	71fb      	strb	r3, [r7, #7]
 80133b2:	4603      	mov	r3, r0
 80133b4:	71bb      	strb	r3, [r7, #6]
 80133b6:	460b      	mov	r3, r1
 80133b8:	717b      	strb	r3, [r7, #5]
 80133ba:	4613      	mov	r3, r2
 80133bc:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 80133be:	4a09      	ldr	r2, [pc, #36]	; (80133e4 <tud_msc_set_sense+0x44>)
 80133c0:	79bb      	ldrb	r3, [r7, #6]
 80133c2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 80133c6:	4a07      	ldr	r2, [pc, #28]	; (80133e4 <tud_msc_set_sense+0x44>)
 80133c8:	797b      	ldrb	r3, [r7, #5]
 80133ca:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 80133ce:	4a05      	ldr	r2, [pc, #20]	; (80133e4 <tud_msc_set_sense+0x44>)
 80133d0:	793b      	ldrb	r3, [r7, #4]
 80133d2:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

  return true;
 80133d6:	2301      	movs	r3, #1
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3708      	adds	r7, #8
 80133dc:	46bd      	mov	sp, r7
 80133de:	bc90      	pop	{r4, r7}
 80133e0:	4770      	bx	lr
 80133e2:	bf00      	nop
 80133e4:	20009108 	.word	0x20009108

080133e8 <set_sense_medium_not_present>:

static inline void set_sense_medium_not_present(uint8_t lun)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b082      	sub	sp, #8
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	4603      	mov	r3, r0
 80133f0:	71fb      	strb	r3, [r7, #7]
  // default sense is NOT READY, MEDIUM NOT PRESENT
  tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3A, 0x00);
 80133f2:	79f8      	ldrb	r0, [r7, #7]
 80133f4:	2300      	movs	r3, #0
 80133f6:	223a      	movs	r2, #58	; 0x3a
 80133f8:	2102      	movs	r1, #2
 80133fa:	f7ff ffd1 	bl	80133a0 <tud_msc_set_sense>
}
 80133fe:	bf00      	nop
 8013400:	3708      	adds	r7, #8
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
	...

08013408 <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 801340c:	2240      	movs	r2, #64	; 0x40
 801340e:	2100      	movs	r1, #0
 8013410:	4802      	ldr	r0, [pc, #8]	; (801341c <mscd_init+0x14>)
 8013412:	f005 fe28 	bl	8019066 <memset>
}
 8013416:	bf00      	nop
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop
 801341c:	20009108 	.word	0x20009108

08013420 <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	4603      	mov	r3, r0
 8013428:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 801342a:	2240      	movs	r2, #64	; 0x40
 801342c:	2100      	movs	r1, #0
 801342e:	4803      	ldr	r0, [pc, #12]	; (801343c <mscd_reset+0x1c>)
 8013430:	f005 fe19 	bl	8019066 <memset>
}
 8013434:	bf00      	nop
 8013436:	3708      	adds	r7, #8
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}
 801343c:	20009108 	.word	0x20009108

08013440 <mscd_open>:

uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b08a      	sub	sp, #40	; 0x28
 8013444:	af02      	add	r7, sp, #8
 8013446:	4603      	mov	r3, r0
 8013448:	6039      	str	r1, [r7, #0]
 801344a:	71fb      	strb	r3, [r7, #7]
 801344c:	4613      	mov	r3, r2
 801344e:	80bb      	strh	r3, [r7, #4]
  // only support SCSI's BOT protocol
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	795b      	ldrb	r3, [r3, #5]
 8013454:	2b08      	cmp	r3, #8
 8013456:	d107      	bne.n	8013468 <mscd_open+0x28>
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	799b      	ldrb	r3, [r3, #6]
 801345c:	2b06      	cmp	r3, #6
 801345e:	d103      	bne.n	8013468 <mscd_open+0x28>
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	79db      	ldrb	r3, [r3, #7]
 8013464:	2b50      	cmp	r3, #80	; 0x50
 8013466:	d001      	beq.n	801346c <mscd_open+0x2c>
 8013468:	2300      	movs	r3, #0
 801346a:	e060      	b.n	801352e <mscd_open+0xee>
            MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);

  // msc driver length is fixed
  uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 801346c:	2317      	movs	r3, #23
 801346e:	83fb      	strh	r3, [r7, #30]

  // Max length must be at least 1 interface + 2 endpoints
  TU_ASSERT(max_len >= drv_len, 0);
 8013470:	88ba      	ldrh	r2, [r7, #4]
 8013472:	8bfb      	ldrh	r3, [r7, #30]
 8013474:	429a      	cmp	r2, r3
 8013476:	d210      	bcs.n	801349a <mscd_open+0x5a>
 8013478:	f240 1211 	movw	r2, #273	; 0x111
 801347c:	492e      	ldr	r1, [pc, #184]	; (8013538 <mscd_open+0xf8>)
 801347e:	482f      	ldr	r0, [pc, #188]	; (801353c <mscd_open+0xfc>)
 8013480:	f005 fe8e 	bl	80191a0 <iprintf>
 8013484:	4b2e      	ldr	r3, [pc, #184]	; (8013540 <mscd_open+0x100>)
 8013486:	60fb      	str	r3, [r7, #12]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	f003 0301 	and.w	r3, r3, #1
 8013490:	2b00      	cmp	r3, #0
 8013492:	d000      	beq.n	8013496 <mscd_open+0x56>
 8013494:	be00      	bkpt	0x0000
 8013496:	2300      	movs	r3, #0
 8013498:	e049      	b.n	801352e <mscd_open+0xee>

  mscd_interface_t * p_msc = &_mscd_itf;
 801349a:	4b2a      	ldr	r3, [pc, #168]	; (8013544 <mscd_open+0x104>)
 801349c:	61bb      	str	r3, [r7, #24]
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	789a      	ldrb	r2, [r3, #2]
 80134a2:	69bb      	ldr	r3, [r7, #24]
 80134a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 80134a8:	6838      	ldr	r0, [r7, #0]
 80134aa:	f7ff fdf1 	bl	8013090 <tu_desc_next>
 80134ae:	4601      	mov	r1, r0
 80134b0:	69bb      	ldr	r3, [r7, #24]
 80134b2:	332f      	adds	r3, #47	; 0x2f
 80134b4:	69ba      	ldr	r2, [r7, #24]
 80134b6:	322e      	adds	r2, #46	; 0x2e
 80134b8:	79f8      	ldrb	r0, [r7, #7]
 80134ba:	9201      	str	r2, [sp, #4]
 80134bc:	9300      	str	r3, [sp, #0]
 80134be:	2302      	movs	r3, #2
 80134c0:	2202      	movs	r2, #2
 80134c2:	f002 ffbd 	bl	8016440 <usbd_open_edpt_pair>
 80134c6:	4603      	mov	r3, r0
 80134c8:	f083 0301 	eor.w	r3, r3, #1
 80134cc:	b2db      	uxtb	r3, r3
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d010      	beq.n	80134f4 <mscd_open+0xb4>
 80134d2:	f240 1217 	movw	r2, #279	; 0x117
 80134d6:	4918      	ldr	r1, [pc, #96]	; (8013538 <mscd_open+0xf8>)
 80134d8:	4818      	ldr	r0, [pc, #96]	; (801353c <mscd_open+0xfc>)
 80134da:	f005 fe61 	bl	80191a0 <iprintf>
 80134de:	4b18      	ldr	r3, [pc, #96]	; (8013540 <mscd_open+0x100>)
 80134e0:	613b      	str	r3, [r7, #16]
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f003 0301 	and.w	r3, r3, #1
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d000      	beq.n	80134f0 <mscd_open+0xb0>
 80134ee:	be00      	bkpt	0x0000
 80134f0:	2300      	movs	r3, #0
 80134f2:	e01c      	b.n	801352e <mscd_open+0xee>

  // Prepare for Command Block Wrapper
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 80134f4:	79fb      	ldrb	r3, [r7, #7]
 80134f6:	69b9      	ldr	r1, [r7, #24]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7ff fe29 	bl	8013150 <prepare_cbw>
 80134fe:	4603      	mov	r3, r0
 8013500:	f083 0301 	eor.w	r3, r3, #1
 8013504:	b2db      	uxtb	r3, r3
 8013506:	2b00      	cmp	r3, #0
 8013508:	d010      	beq.n	801352c <mscd_open+0xec>
 801350a:	f44f 728d 	mov.w	r2, #282	; 0x11a
 801350e:	490a      	ldr	r1, [pc, #40]	; (8013538 <mscd_open+0xf8>)
 8013510:	480a      	ldr	r0, [pc, #40]	; (801353c <mscd_open+0xfc>)
 8013512:	f005 fe45 	bl	80191a0 <iprintf>
 8013516:	4b0a      	ldr	r3, [pc, #40]	; (8013540 <mscd_open+0x100>)
 8013518:	617b      	str	r3, [r7, #20]
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	f003 0301 	and.w	r3, r3, #1
 8013522:	2b00      	cmp	r3, #0
 8013524:	d000      	beq.n	8013528 <mscd_open+0xe8>
 8013526:	be00      	bkpt	0x0000
 8013528:	8bfb      	ldrh	r3, [r7, #30]
 801352a:	e000      	b.n	801352e <mscd_open+0xee>

  return drv_len;
 801352c:	8bfb      	ldrh	r3, [r7, #30]
}
 801352e:	4618      	mov	r0, r3
 8013530:	3720      	adds	r7, #32
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	0801c8e0 	.word	0x0801c8e0
 801353c:	0801b45c 	.word	0x0801b45c
 8013540:	e000edf0 	.word	0xe000edf0
 8013544:	20009108 	.word	0x20009108

08013548 <proc_bot_reset>:

static void proc_bot_reset(mscd_interface_t* p_msc)
{
 8013548:	b480      	push	{r7}
 801354a:	b083      	sub	sp, #12
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
  p_msc->stage       = MSC_STAGE_CMD;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2200      	movs	r2, #0
 8013554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  p_msc->total_len   = 0;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2200      	movs	r2, #0
 801355c:	635a      	str	r2, [r3, #52]	; 0x34
  p_msc->xferred_len = 0;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	639a      	str	r2, [r3, #56]	; 0x38

  p_msc->sense_key           = 0;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  p_msc->add_sense_code      = 0;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2200      	movs	r2, #0
 8013570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  p_msc->add_sense_qualifier = 0;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2200      	movs	r2, #0
 8013578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 801357c:	bf00      	nop
 801357e:	370c      	adds	r7, #12
 8013580:	46bd      	mov	sp, r7
 8013582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013586:	4770      	bx	lr

08013588 <mscd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b088      	sub	sp, #32
 801358c:	af00      	add	r7, sp, #0
 801358e:	4603      	mov	r3, r0
 8013590:	603a      	str	r2, [r7, #0]
 8013592:	71fb      	strb	r3, [r7, #7]
 8013594:	460b      	mov	r3, r1
 8013596:	71bb      	strb	r3, [r7, #6]
  // nothing to do with DATA & ACK stage
  if (stage != CONTROL_STAGE_SETUP) return true;
 8013598:	79bb      	ldrb	r3, [r7, #6]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d001      	beq.n	80135a2 <mscd_control_xfer_cb+0x1a>
 801359e:	2301      	movs	r3, #1
 80135a0:	e0f9      	b.n	8013796 <mscd_control_xfer_cb+0x20e>

  mscd_interface_t* p_msc = &_mscd_itf;
 80135a2:	4b7f      	ldr	r3, [pc, #508]	; (80137a0 <mscd_control_xfer_cb+0x218>)
 80135a4:	61fb      	str	r3, [r7, #28]

  // Clear Endpoint Feature (stall) for recovery
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80135ae:	b2db      	uxtb	r3, r3
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	f040 809d 	bne.w	80136f0 <mscd_control_xfer_cb+0x168>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	f003 031f 	and.w	r3, r3, #31
 80135be:	b2db      	uxtb	r3, r3
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 80135c0:	2b02      	cmp	r3, #2
 80135c2:	f040 8095 	bne.w	80136f0 <mscd_control_xfer_cb+0x168>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	785b      	ldrb	r3, [r3, #1]
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 80135ca:	2b01      	cmp	r3, #1
 80135cc:	f040 8090 	bne.w	80136f0 <mscd_control_xfer_cb+0x168>
       TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	885b      	ldrh	r3, [r3, #2]
 80135d4:	b29b      	uxth	r3, r3
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	f040 808a 	bne.w	80136f0 <mscd_control_xfer_cb+0x168>
  {
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	889b      	ldrh	r3, [r3, #4]
 80135e0:	b29b      	uxth	r3, r3
 80135e2:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80135e4:	89fb      	ldrh	r3, [r7, #14]
 80135e6:	b2db      	uxtb	r3, r3
 80135e8:	76fb      	strb	r3, [r7, #27]

    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80135f0:	2b04      	cmp	r3, #4
 80135f2:	d106      	bne.n	8013602 <mscd_control_xfer_cb+0x7a>
    {
      // reset recovery is required to recover from this stage
      // Clear Stall request cannot resolve this -> continue to stall endpoint
      usbd_edpt_stall(rhport, ep_addr);
 80135f4:	7efa      	ldrb	r2, [r7, #27]
 80135f6:	79fb      	ldrb	r3, [r7, #7]
 80135f8:	4611      	mov	r1, r2
 80135fa:	4618      	mov	r0, r3
 80135fc:	f003 f968 	bl	80168d0 <usbd_edpt_stall>
 8013600:	e074      	b.n	80136ec <mscd_control_xfer_cb+0x164>
    }
    else
    {
      if ( ep_addr == p_msc->ep_in )
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013608:	7efa      	ldrb	r2, [r7, #27]
 801360a:	429a      	cmp	r2, r3
 801360c:	d120      	bne.n	8013650 <mscd_control_xfer_cb+0xc8>
      {
        if ( p_msc->stage == MSC_STAGE_STATUS )
 801360e:	69fb      	ldr	r3, [r7, #28]
 8013610:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013614:	2b02      	cmp	r3, #2
 8013616:	d169      	bne.n	80136ec <mscd_control_xfer_cb+0x164>
        {
          // resume sending SCSI status if we are in this stage previously before stalled
          TU_ASSERT( send_csw(rhport, p_msc) );
 8013618:	79fb      	ldrb	r3, [r7, #7]
 801361a:	69f9      	ldr	r1, [r7, #28]
 801361c:	4618      	mov	r0, r3
 801361e:	f7ff fd77 	bl	8013110 <send_csw>
 8013622:	4603      	mov	r3, r0
 8013624:	f083 0301 	eor.w	r3, r3, #1
 8013628:	b2db      	uxtb	r3, r3
 801362a:	2b00      	cmp	r3, #0
 801362c:	d05e      	beq.n	80136ec <mscd_control_xfer_cb+0x164>
 801362e:	f240 1249 	movw	r2, #329	; 0x149
 8013632:	495c      	ldr	r1, [pc, #368]	; (80137a4 <mscd_control_xfer_cb+0x21c>)
 8013634:	485c      	ldr	r0, [pc, #368]	; (80137a8 <mscd_control_xfer_cb+0x220>)
 8013636:	f005 fdb3 	bl	80191a0 <iprintf>
 801363a:	4b5c      	ldr	r3, [pc, #368]	; (80137ac <mscd_control_xfer_cb+0x224>)
 801363c:	613b      	str	r3, [r7, #16]
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f003 0301 	and.w	r3, r3, #1
 8013646:	2b00      	cmp	r3, #0
 8013648:	d000      	beq.n	801364c <mscd_control_xfer_cb+0xc4>
 801364a:	be00      	bkpt	0x0000
 801364c:	2300      	movs	r3, #0
 801364e:	e0a2      	b.n	8013796 <mscd_control_xfer_cb+0x20e>
        }
      }
      else if ( ep_addr == p_msc->ep_out )
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013656:	7efa      	ldrb	r2, [r7, #27]
 8013658:	429a      	cmp	r2, r3
 801365a:	d147      	bne.n	80136ec <mscd_control_xfer_cb+0x164>
      {
        if ( p_msc->stage == MSC_STAGE_CMD )
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013662:	2b00      	cmp	r3, #0
 8013664:	d142      	bne.n	80136ec <mscd_control_xfer_cb+0x164>
        {
          // part of reset recovery (probably due to invalid CBW) -> prepare for new command
          // Note: skip if already queued previously
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801366c:	79fb      	ldrb	r3, [r7, #7]
 801366e:	737b      	strb	r3, [r7, #13]
 8013670:	4613      	mov	r3, r2
 8013672:	733b      	strb	r3, [r7, #12]

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8013674:	7b3a      	ldrb	r2, [r7, #12]
 8013676:	7b7b      	ldrb	r3, [r7, #13]
 8013678:	4611      	mov	r1, r2
 801367a:	4618      	mov	r0, r3
 801367c:	f003 f902 	bl	8016884 <usbd_edpt_busy>
 8013680:	4603      	mov	r3, r0
 8013682:	f083 0301 	eor.w	r3, r3, #1
 8013686:	b2db      	uxtb	r3, r3
 8013688:	2b00      	cmp	r3, #0
 801368a:	d00d      	beq.n	80136a8 <mscd_control_xfer_cb+0x120>
 801368c:	7b3a      	ldrb	r2, [r7, #12]
 801368e:	7b7b      	ldrb	r3, [r7, #13]
 8013690:	4611      	mov	r1, r2
 8013692:	4618      	mov	r0, r3
 8013694:	f003 f9b8 	bl	8016a08 <usbd_edpt_stalled>
 8013698:	4603      	mov	r3, r0
 801369a:	f083 0301 	eor.w	r3, r3, #1
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d001      	beq.n	80136a8 <mscd_control_xfer_cb+0x120>
 80136a4:	2301      	movs	r3, #1
 80136a6:	e000      	b.n	80136aa <mscd_control_xfer_cb+0x122>
 80136a8:	2300      	movs	r3, #0
 80136aa:	f003 0301 	and.w	r3, r3, #1
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d01b      	beq.n	80136ec <mscd_control_xfer_cb+0x164>
          {
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 80136b4:	79fb      	ldrb	r3, [r7, #7]
 80136b6:	69f9      	ldr	r1, [r7, #28]
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7ff fd49 	bl	8013150 <prepare_cbw>
 80136be:	4603      	mov	r3, r0
 80136c0:	f083 0301 	eor.w	r3, r3, #1
 80136c4:	b2db      	uxtb	r3, r3
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d010      	beq.n	80136ec <mscd_control_xfer_cb+0x164>
 80136ca:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80136ce:	4935      	ldr	r1, [pc, #212]	; (80137a4 <mscd_control_xfer_cb+0x21c>)
 80136d0:	4835      	ldr	r0, [pc, #212]	; (80137a8 <mscd_control_xfer_cb+0x220>)
 80136d2:	f005 fd65 	bl	80191a0 <iprintf>
 80136d6:	4b35      	ldr	r3, [pc, #212]	; (80137ac <mscd_control_xfer_cb+0x224>)
 80136d8:	617b      	str	r3, [r7, #20]
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	f003 0301 	and.w	r3, r3, #1
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d000      	beq.n	80136e8 <mscd_control_xfer_cb+0x160>
 80136e6:	be00      	bkpt	0x0000
 80136e8:	2300      	movs	r3, #0
 80136ea:	e054      	b.n	8013796 <mscd_control_xfer_cb+0x20e>
          }
        }
      }
    }

    return true;
 80136ec:	2301      	movs	r3, #1
 80136ee:	e052      	b.n	8013796 <mscd_control_xfer_cb+0x20e>
  }

  // From this point only handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	2b20      	cmp	r3, #32
 80136fc:	d001      	beq.n	8013702 <mscd_control_xfer_cb+0x17a>
 80136fe:	2300      	movs	r3, #0
 8013700:	e049      	b.n	8013796 <mscd_control_xfer_cb+0x20e>

  switch ( request->bRequest )
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	785b      	ldrb	r3, [r3, #1]
 8013706:	2bfe      	cmp	r3, #254	; 0xfe
 8013708:	d019      	beq.n	801373e <mscd_control_xfer_cb+0x1b6>
 801370a:	2bff      	cmp	r3, #255	; 0xff
 801370c:	d140      	bne.n	8013790 <mscd_control_xfer_cb+0x208>
  {
    case MSC_REQ_RESET:
      TU_LOG(MSC_DEBUG, "  MSC BOT Reset\r\n");
 801370e:	4828      	ldr	r0, [pc, #160]	; (80137b0 <mscd_control_xfer_cb+0x228>)
 8013710:	f005 fde2 	bl	80192d8 <puts>
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	885b      	ldrh	r3, [r3, #2]
 8013718:	b29b      	uxth	r3, r3
 801371a:	2b00      	cmp	r3, #0
 801371c:	d104      	bne.n	8013728 <mscd_control_xfer_cb+0x1a0>
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	88db      	ldrh	r3, [r3, #6]
 8013722:	b29b      	uxth	r3, r3
 8013724:	2b00      	cmp	r3, #0
 8013726:	d001      	beq.n	801372c <mscd_control_xfer_cb+0x1a4>
 8013728:	2300      	movs	r3, #0
 801372a:	e034      	b.n	8013796 <mscd_control_xfer_cb+0x20e>

      // driver state reset
      proc_bot_reset(p_msc);
 801372c:	69f8      	ldr	r0, [r7, #28]
 801372e:	f7ff ff0b 	bl	8013548 <proc_bot_reset>

      tud_control_status(rhport, request);
 8013732:	79fb      	ldrb	r3, [r7, #7]
 8013734:	6839      	ldr	r1, [r7, #0]
 8013736:	4618      	mov	r0, r3
 8013738:	f003 f9b6 	bl	8016aa8 <tud_control_status>
    break;
 801373c:	e02a      	b.n	8013794 <mscd_control_xfer_cb+0x20c>

    case MSC_REQ_GET_MAX_LUN:
    {
      TU_LOG(MSC_DEBUG, "  MSC Get Max Lun\r\n");
 801373e:	481d      	ldr	r0, [pc, #116]	; (80137b4 <mscd_control_xfer_cb+0x22c>)
 8013740:	f005 fdca 	bl	80192d8 <puts>
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	885b      	ldrh	r3, [r3, #2]
 8013748:	b29b      	uxth	r3, r3
 801374a:	2b00      	cmp	r3, #0
 801374c:	d104      	bne.n	8013758 <mscd_control_xfer_cb+0x1d0>
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	88db      	ldrh	r3, [r3, #6]
 8013752:	b29b      	uxth	r3, r3
 8013754:	2b01      	cmp	r3, #1
 8013756:	d001      	beq.n	801375c <mscd_control_xfer_cb+0x1d4>
 8013758:	2300      	movs	r3, #0
 801375a:	e01c      	b.n	8013796 <mscd_control_xfer_cb+0x20e>

      uint8_t maxlun = 1;
 801375c:	2301      	movs	r3, #1
 801375e:	72fb      	strb	r3, [r7, #11]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 8013760:	4b15      	ldr	r3, [pc, #84]	; (80137b8 <mscd_control_xfer_cb+0x230>)
 8013762:	2b00      	cmp	r3, #0
 8013764:	d003      	beq.n	801376e <mscd_control_xfer_cb+0x1e6>
 8013766:	f3af 8000 	nop.w
 801376a:	4603      	mov	r3, r0
 801376c:	72fb      	strb	r3, [r7, #11]
      TU_VERIFY(maxlun);
 801376e:	7afb      	ldrb	r3, [r7, #11]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d101      	bne.n	8013778 <mscd_control_xfer_cb+0x1f0>
 8013774:	2300      	movs	r3, #0
 8013776:	e00e      	b.n	8013796 <mscd_control_xfer_cb+0x20e>

      // MAX LUN is minus 1 by specs
      maxlun--;
 8013778:	7afb      	ldrb	r3, [r7, #11]
 801377a:	3b01      	subs	r3, #1
 801377c:	b2db      	uxtb	r3, r3
 801377e:	72fb      	strb	r3, [r7, #11]

      tud_control_xfer(rhport, request, &maxlun, 1);
 8013780:	f107 020b 	add.w	r2, r7, #11
 8013784:	79f8      	ldrb	r0, [r7, #7]
 8013786:	2301      	movs	r3, #1
 8013788:	6839      	ldr	r1, [r7, #0]
 801378a:	f003 f9eb 	bl	8016b64 <tud_control_xfer>
    }
    break;
 801378e:	e001      	b.n	8013794 <mscd_control_xfer_cb+0x20c>

    default: return false; // stall unsupported request
 8013790:	2300      	movs	r3, #0
 8013792:	e000      	b.n	8013796 <mscd_control_xfer_cb+0x20e>
  }

  return true;
 8013794:	2301      	movs	r3, #1
}
 8013796:	4618      	mov	r0, r3
 8013798:	3720      	adds	r7, #32
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}
 801379e:	bf00      	nop
 80137a0:	20009108 	.word	0x20009108
 80137a4:	0801c8ec 	.word	0x0801c8ec
 80137a8:	0801b45c 	.word	0x0801b45c
 80137ac:	e000edf0 	.word	0xe000edf0
 80137b0:	0801b474 	.word	0x0801b474
 80137b4:	0801b488 	.word	0x0801b488
 80137b8:	00000000 	.word	0x00000000

080137bc <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 80137bc:	b590      	push	{r4, r7, lr}
 80137be:	b099      	sub	sp, #100	; 0x64
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	603b      	str	r3, [r7, #0]
 80137c4:	4603      	mov	r3, r0
 80137c6:	71fb      	strb	r3, [r7, #7]
 80137c8:	460b      	mov	r3, r1
 80137ca:	71bb      	strb	r3, [r7, #6]
 80137cc:	4613      	mov	r3, r2
 80137ce:	717b      	strb	r3, [r7, #5]
  (void) event;

  mscd_interface_t* p_msc = &_mscd_itf;
 80137d0:	4ba4      	ldr	r3, [pc, #656]	; (8013a64 <mscd_xfer_cb+0x2a8>)
 80137d2:	65bb      	str	r3, [r7, #88]	; 0x58
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80137d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137d6:	657b      	str	r3, [r7, #84]	; 0x54
  msc_csw_t       * p_csw = &p_msc->csw;
 80137d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137da:	3320      	adds	r3, #32
 80137dc:	653b      	str	r3, [r7, #80]	; 0x50

  switch (p_msc->stage)
 80137de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80137e4:	2b03      	cmp	r3, #3
 80137e6:	f200 8256 	bhi.w	8013c96 <mscd_xfer_cb+0x4da>
 80137ea:	a201      	add	r2, pc, #4	; (adr r2, 80137f0 <mscd_xfer_cb+0x34>)
 80137ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137f0:	08013801 	.word	0x08013801
 80137f4:	08013af1 	.word	0x08013af1
 80137f8:	08013c97 	.word	0x08013c97
 80137fc:	08013bdd 	.word	0x08013bdd
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 8013800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013802:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013806:	79ba      	ldrb	r2, [r7, #6]
 8013808:	429a      	cmp	r2, r3
 801380a:	d001      	beq.n	8013810 <mscd_xfer_cb+0x54>
 801380c:	2301      	movs	r3, #1
 801380e:	e2b0      	b.n	8013d72 <mscd_xfer_cb+0x5b6>

      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	2b1f      	cmp	r3, #31
 8013814:	d104      	bne.n	8013820 <mscd_xfer_cb+0x64>
 8013816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	4a93      	ldr	r2, [pc, #588]	; (8013a68 <mscd_xfer_cb+0x2ac>)
 801381c:	4293      	cmp	r3, r2
 801381e:	d018      	beq.n	8013852 <mscd_xfer_cb+0x96>
      {
        TU_LOG(MSC_DEBUG, "  SCSI CBW is not valid\r\n");
 8013820:	4892      	ldr	r0, [pc, #584]	; (8013a6c <mscd_xfer_cb+0x2b0>)
 8013822:	f005 fd59 	bl	80192d8 <puts>

        // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8013826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013828:	2204      	movs	r2, #4
 801382a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        // invalid CBW stall both endpoints
        usbd_edpt_stall(rhport, p_msc->ep_in);
 801382e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013830:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8013834:	79fb      	ldrb	r3, [r7, #7]
 8013836:	4611      	mov	r1, r2
 8013838:	4618      	mov	r0, r3
 801383a:	f003 f849 	bl	80168d0 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 801383e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013840:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8013844:	79fb      	ldrb	r3, [r7, #7]
 8013846:	4611      	mov	r1, r2
 8013848:	4618      	mov	r0, r3
 801384a:	f003 f841 	bl	80168d0 <usbd_edpt_stall>

        return false;
 801384e:	2300      	movs	r3, #0
 8013850:	e28f      	b.n	8013d72 <mscd_xfer_cb+0x5b6>
      }

      TU_LOG(MSC_DEBUG, "  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
 8013852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013854:	7b5b      	ldrb	r3, [r3, #13]
 8013856:	461c      	mov	r4, r3
 8013858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801385a:	7bdb      	ldrb	r3, [r3, #15]
 801385c:	4619      	mov	r1, r3
 801385e:	4884      	ldr	r0, [pc, #528]	; (8013a70 <mscd_xfer_cb+0x2b4>)
 8013860:	f7ff fc28 	bl	80130b4 <tu_lookup_find>
 8013864:	4603      	mov	r3, r0
 8013866:	461a      	mov	r2, r3
 8013868:	4621      	mov	r1, r4
 801386a:	4882      	ldr	r0, [pc, #520]	; (8013a74 <mscd_xfer_cb+0x2b8>)
 801386c:	f005 fc98 	bl	80191a0 <iprintf>
      //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 8013870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013872:	2200      	movs	r2, #0
 8013874:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8013878:	701a      	strb	r2, [r3, #0]
 801387a:	2200      	movs	r2, #0
 801387c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013880:	705a      	strb	r2, [r3, #1]
 8013882:	2200      	movs	r2, #0
 8013884:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8013888:	709a      	strb	r2, [r3, #2]
 801388a:	2200      	movs	r2, #0
 801388c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013890:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 8013892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013894:	685a      	ldr	r2, [r3, #4]
 8013896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013898:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 801389a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801389c:	2200      	movs	r2, #0
 801389e:	721a      	strb	r2, [r3, #8]
 80138a0:	2200      	movs	r2, #0
 80138a2:	725a      	strb	r2, [r3, #9]
 80138a4:	2200      	movs	r2, #0
 80138a6:	729a      	strb	r2, [r3, #10]
 80138a8:	2200      	movs	r2, #0
 80138aa:	72da      	strb	r2, [r3, #11]
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 80138ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138ae:	2200      	movs	r2, #0
 80138b0:	731a      	strb	r2, [r3, #12]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 80138b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138b4:	2201      	movs	r2, #1
 80138b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 80138ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138bc:	689a      	ldr	r2, [r3, #8]
 80138be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138c0:	635a      	str	r2, [r3, #52]	; 0x34
      p_msc->xferred_len = 0;
 80138c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138c4:	2200      	movs	r2, #0
 80138c6:	639a      	str	r2, [r3, #56]	; 0x38

      // Read10 or Write10
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 80138c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138ca:	7bdb      	ldrb	r3, [r3, #15]
 80138cc:	2b28      	cmp	r3, #40	; 0x28
 80138ce:	d003      	beq.n	80138d8 <mscd_xfer_cb+0x11c>
 80138d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138d2:	7bdb      	ldrb	r3, [r3, #15]
 80138d4:	2b2a      	cmp	r3, #42	; 0x2a
 80138d6:	d12a      	bne.n	801392e <mscd_xfer_cb+0x172>
      {
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 80138d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80138da:	f7ff fce7 	bl	80132ac <rdwr10_validate_cmd>
 80138de:	4603      	mov	r3, r0
 80138e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if ( status != MSC_CSW_STATUS_PASSED)
 80138e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d007      	beq.n	80138fc <mscd_xfer_cb+0x140>
        {
          fail_scsi_op(rhport, p_msc, status);
 80138ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80138f0:	79fb      	ldrb	r3, [r7, #7]
 80138f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7ff fc42 	bl	801317e <fail_scsi_op>
      {
 80138fa:	e0f8      	b.n	8013aee <mscd_xfer_cb+0x332>
        }else if ( p_cbw->total_bytes )
 80138fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138fe:	689b      	ldr	r3, [r3, #8]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d00f      	beq.n	8013924 <mscd_xfer_cb+0x168>
        {
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8013904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013906:	7bdb      	ldrb	r3, [r3, #15]
 8013908:	2b28      	cmp	r3, #40	; 0x28
 801390a:	d105      	bne.n	8013918 <mscd_xfer_cb+0x15c>
          {
            proc_read10_cmd(rhport, p_msc);
 801390c:	79fb      	ldrb	r3, [r7, #7]
 801390e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013910:	4618      	mov	r0, r3
 8013912:	f000 fc4d 	bl	80141b0 <proc_read10_cmd>
      {
 8013916:	e0ea      	b.n	8013aee <mscd_xfer_cb+0x332>
          }else
          {
            proc_write10_cmd(rhport, p_msc);
 8013918:	79fb      	ldrb	r3, [r7, #7]
 801391a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801391c:	4618      	mov	r0, r3
 801391e:	f000 fccf 	bl	80142c0 <proc_write10_cmd>
      {
 8013922:	e0e4      	b.n	8013aee <mscd_xfer_cb+0x332>
          }
        }else
        {
          // no data transfer, only exist in complaint test suite
          p_msc->stage = MSC_STAGE_STATUS;
 8013924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013926:	2202      	movs	r2, #2
 8013928:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      {
 801392c:	e0df      	b.n	8013aee <mscd_xfer_cb+0x332>
      else
      {
        // For other SCSI commands
        // 1. OUT : queue transfer (invoke app callback after done)
        // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 801392e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013930:	689b      	ldr	r3, [r3, #8]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d04b      	beq.n	80139ce <mscd_xfer_cb+0x212>
 8013936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013938:	7b1b      	ldrb	r3, [r3, #12]
 801393a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  return tu_bit_test(dir, 7);
 801393e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013944:	2307      	movs	r3, #7
 8013946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 801394a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801394e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013950:	fa22 f303 	lsr.w	r3, r2, r3
 8013954:	f003 0301 	and.w	r3, r3, #1
 8013958:	2b00      	cmp	r3, #0
 801395a:	bf14      	ite	ne
 801395c:	2301      	movne	r3, #1
 801395e:	2300      	moveq	r3, #0
 8013960:	b2db      	uxtb	r3, r3
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8013962:	f083 0301 	eor.w	r3, r3, #1
 8013966:	b2db      	uxtb	r3, r3
 8013968:	2b00      	cmp	r3, #0
 801396a:	d030      	beq.n	80139ce <mscd_xfer_cb+0x212>
        {
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 801396c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801396e:	689b      	ldr	r3, [r3, #8]
 8013970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013974:	d909      	bls.n	801398a <mscd_xfer_cb+0x1ce>
          {
            TU_LOG(MSC_DEBUG, "  SCSI reject non READ10/WRITE10 with large data\r\n");
 8013976:	4840      	ldr	r0, [pc, #256]	; (8013a78 <mscd_xfer_cb+0x2bc>)
 8013978:	f005 fcae 	bl	80192d8 <puts>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 801397c:	79fb      	ldrb	r3, [r7, #7]
 801397e:	2201      	movs	r2, #1
 8013980:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013982:	4618      	mov	r0, r3
 8013984:	f7ff fbfb 	bl	801317e <fail_scsi_op>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8013988:	e0b0      	b.n	8013aec <mscd_xfer_cb+0x330>
          }else
          {
            // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
            // but it is OK to just receive data then responded with failed status
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, p_msc->total_len) );
 801398a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801398c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8013990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013994:	b29b      	uxth	r3, r3
 8013996:	79f8      	ldrb	r0, [r7, #7]
 8013998:	4a38      	ldr	r2, [pc, #224]	; (8013a7c <mscd_xfer_cb+0x2c0>)
 801399a:	f002 feeb 	bl	8016774 <usbd_edpt_xfer>
 801399e:	4603      	mov	r3, r0
 80139a0:	f083 0301 	eor.w	r3, r3, #1
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	f000 80a0 	beq.w	8013aec <mscd_xfer_cb+0x330>
 80139ac:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 80139b0:	4933      	ldr	r1, [pc, #204]	; (8013a80 <mscd_xfer_cb+0x2c4>)
 80139b2:	4834      	ldr	r0, [pc, #208]	; (8013a84 <mscd_xfer_cb+0x2c8>)
 80139b4:	f005 fbf4 	bl	80191a0 <iprintf>
 80139b8:	4b33      	ldr	r3, [pc, #204]	; (8013a88 <mscd_xfer_cb+0x2cc>)
 80139ba:	643b      	str	r3, [r7, #64]	; 0x40
 80139bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f003 0301 	and.w	r3, r3, #1
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d000      	beq.n	80139ca <mscd_xfer_cb+0x20e>
 80139c8:	be00      	bkpt	0x0000
 80139ca:	2300      	movs	r3, #0
 80139cc:	e1d1      	b.n	8013d72 <mscd_xfer_cb+0x5b6>
          }
        }else
        {
          // First process if it is a built-in commands
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 80139ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139d0:	7b58      	ldrb	r0, [r3, #13]
 80139d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139d4:	f103 010f 	add.w	r1, r3, #15
 80139d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80139dc:	4a27      	ldr	r2, [pc, #156]	; (8013a7c <mscd_xfer_cb+0x2c0>)
 80139de:	f000 f9d3 	bl	8013d88 <proc_builtin_scsi>
 80139e2:	65f8      	str	r0, [r7, #92]	; 0x5c

          // Invoke user callback if not built-in
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 80139e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	da10      	bge.n	8013a0c <mscd_xfer_cb+0x250>
 80139ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d10b      	bne.n	8013a0c <mscd_xfer_cb+0x250>
          {
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, p_msc->total_len);
 80139f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139f6:	7b58      	ldrb	r0, [r3, #13]
 80139f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139fa:	f103 010f 	add.w	r1, r3, #15
 80139fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	4a1d      	ldr	r2, [pc, #116]	; (8013a7c <mscd_xfer_cb+0x2c0>)
 8013a06:	f7fe fbfd 	bl	8012204 <tud_msc_scsi_cb>
 8013a0a:	65f8      	str	r0, [r7, #92]	; 0x5c
          }

          if ( resplen < 0 )
 8013a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	da09      	bge.n	8013a26 <mscd_xfer_cb+0x26a>
          {
            // unsupported command
            TU_LOG(MSC_DEBUG, "  SCSI unsupported or failed command\r\n");
 8013a12:	481e      	ldr	r0, [pc, #120]	; (8013a8c <mscd_xfer_cb+0x2d0>)
 8013a14:	f005 fc60 	bl	80192d8 <puts>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8013a18:	79fb      	ldrb	r3, [r7, #7]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7ff fbad 	bl	801317e <fail_scsi_op>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, p_msc->total_len) );
            }
          }
        }
      }
    break;
 8013a24:	e139      	b.n	8013c9a <mscd_xfer_cb+0x4de>
          else if (resplen == 0)
 8013a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d10f      	bne.n	8013a4c <mscd_xfer_cb+0x290>
            if (p_cbw->total_bytes)
 8013a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a2e:	689b      	ldr	r3, [r3, #8]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d006      	beq.n	8013a42 <mscd_xfer_cb+0x286>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8013a34:	79fb      	ldrb	r3, [r7, #7]
 8013a36:	2201      	movs	r2, #1
 8013a38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7ff fb9f 	bl	801317e <fail_scsi_op>
    break;
 8013a40:	e12b      	b.n	8013c9a <mscd_xfer_cb+0x4de>
              p_msc->stage = MSC_STAGE_STATUS;
 8013a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a44:	2202      	movs	r2, #2
 8013a46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 8013a4a:	e126      	b.n	8013c9a <mscd_xfer_cb+0x4de>
            if ( p_cbw->total_bytes == 0 )
 8013a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a4e:	689b      	ldr	r3, [r3, #8]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d11d      	bne.n	8013a90 <mscd_xfer_cb+0x2d4>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8013a54:	79fb      	ldrb	r3, [r7, #7]
 8013a56:	2201      	movs	r2, #1
 8013a58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7ff fb8f 	bl	801317e <fail_scsi_op>
    break;
 8013a60:	e11b      	b.n	8013c9a <mscd_xfer_cb+0x4de>
 8013a62:	bf00      	nop
 8013a64:	20009108 	.word	0x20009108
 8013a68:	43425355 	.word	0x43425355
 8013a6c:	0801b49c 	.word	0x0801b49c
 8013a70:	0801c8d8 	.word	0x0801c8d8
 8013a74:	0801b4b8 	.word	0x0801b4b8
 8013a78:	0801b4d8 	.word	0x0801b4d8
 8013a7c:	20009148 	.word	0x20009148
 8013a80:	0801c904 	.word	0x0801c904
 8013a84:	0801b45c 	.word	0x0801b45c
 8013a88:	e000edf0 	.word	0xe000edf0
 8013a8c:	0801b50c 	.word	0x0801b50c
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 8013a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a94:	689b      	ldr	r3, [r3, #8]
 8013a96:	627a      	str	r2, [r7, #36]	; 0x24
 8013a98:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8013a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a9c:	6a3b      	ldr	r3, [r7, #32]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	bf28      	it	cs
 8013aa2:	461a      	movcs	r2, r3
 8013aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013aa6:	635a      	str	r2, [r3, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, p_msc->total_len) );
 8013aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013aaa:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8013aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	79f8      	ldrb	r0, [r7, #7]
 8013ab6:	4a95      	ldr	r2, [pc, #596]	; (8013d0c <mscd_xfer_cb+0x550>)
 8013ab8:	f002 fe5c 	bl	8016774 <usbd_edpt_xfer>
 8013abc:	4603      	mov	r3, r0
 8013abe:	f083 0301 	eor.w	r3, r3, #1
 8013ac2:	b2db      	uxtb	r3, r3
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	f000 80e8 	beq.w	8013c9a <mscd_xfer_cb+0x4de>
 8013aca:	f240 12fd 	movw	r2, #509	; 0x1fd
 8013ace:	4990      	ldr	r1, [pc, #576]	; (8013d10 <mscd_xfer_cb+0x554>)
 8013ad0:	4890      	ldr	r0, [pc, #576]	; (8013d14 <mscd_xfer_cb+0x558>)
 8013ad2:	f005 fb65 	bl	80191a0 <iprintf>
 8013ad6:	4b90      	ldr	r3, [pc, #576]	; (8013d18 <mscd_xfer_cb+0x55c>)
 8013ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	f003 0301 	and.w	r3, r3, #1
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d000      	beq.n	8013ae8 <mscd_xfer_cb+0x32c>
 8013ae6:	be00      	bkpt	0x0000
 8013ae8:	2300      	movs	r3, #0
 8013aea:	e142      	b.n	8013d72 <mscd_xfer_cb+0x5b6>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8013aec:	bf00      	nop
    break;
 8013aee:	e0d4      	b.n	8013c9a <mscd_xfer_cb+0x4de>

    case MSC_STAGE_DATA:
      TU_LOG(MSC_DEBUG, "  SCSI Data [Lun%u]\r\n", p_cbw->lun);
 8013af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013af2:	7b5b      	ldrb	r3, [r3, #13]
 8013af4:	4619      	mov	r1, r3
 8013af6:	4889      	ldr	r0, [pc, #548]	; (8013d1c <mscd_xfer_cb+0x560>)
 8013af8:	f005 fb52 	bl	80191a0 <iprintf>
      //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8013afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013afe:	7bdb      	ldrb	r3, [r3, #15]
 8013b00:	2b28      	cmp	r3, #40	; 0x28
 8013b02:	d116      	bne.n	8013b32 <mscd_xfer_cb+0x376>
      {
        p_msc->xferred_len += xferred_bytes;
 8013b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	441a      	add	r2, r3
 8013b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b0e:	639a      	str	r2, [r3, #56]	; 0x38

        if ( p_msc->xferred_len >= p_msc->total_len )
 8013b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d304      	bcc.n	8013b26 <mscd_xfer_cb+0x36a>
        {
          // Data Stage is complete
          p_msc->stage = MSC_STAGE_STATUS;
 8013b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b1e:	2202      	movs	r2, #2
 8013b20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        {
          // This scenario with command that take more than one transfer is already rejected at Command stage
          TU_BREAKPOINT();
        }
      }
    break;
 8013b24:	e0bb      	b.n	8013c9e <mscd_xfer_cb+0x4e2>
          proc_read10_cmd(rhport, p_msc);
 8013b26:	79fb      	ldrb	r3, [r7, #7]
 8013b28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f000 fb40 	bl	80141b0 <proc_read10_cmd>
    break;
 8013b30:	e0b5      	b.n	8013c9e <mscd_xfer_cb+0x4e2>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8013b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b34:	7bdb      	ldrb	r3, [r3, #15]
 8013b36:	2b2a      	cmp	r3, #42	; 0x2a
 8013b38:	d106      	bne.n	8013b48 <mscd_xfer_cb+0x38c>
        proc_write10_new_data(rhport, p_msc, xferred_bytes);
 8013b3a:	79fb      	ldrb	r3, [r7, #7]
 8013b3c:	683a      	ldr	r2, [r7, #0]
 8013b3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013b40:	4618      	mov	r0, r3
 8013b42:	f000 fc21 	bl	8014388 <proc_write10_new_data>
    break;
 8013b46:	e0aa      	b.n	8013c9e <mscd_xfer_cb+0x4e2>
        p_msc->xferred_len += xferred_bytes;
 8013b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	441a      	add	r2, r3
 8013b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b52:	639a      	str	r2, [r3, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 8013b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b56:	7b1b      	ldrb	r3, [r3, #12]
 8013b58:	77fb      	strb	r3, [r7, #31]
  return tu_bit_test(dir, 7);
 8013b5a:	7ffb      	ldrb	r3, [r7, #31]
 8013b5c:	61bb      	str	r3, [r7, #24]
 8013b5e:	2307      	movs	r3, #7
 8013b60:	75fb      	strb	r3, [r7, #23]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8013b62:	7dfb      	ldrb	r3, [r7, #23]
 8013b64:	69ba      	ldr	r2, [r7, #24]
 8013b66:	fa22 f303 	lsr.w	r3, r2, r3
 8013b6a:	f003 0301 	and.w	r3, r3, #1
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	bf14      	ite	ne
 8013b72:	2301      	movne	r3, #1
 8013b74:	2300      	moveq	r3, #0
 8013b76:	b2db      	uxtb	r3, r3
        if ( !is_data_in(p_cbw->dir) )
 8013b78:	f083 0301 	eor.w	r3, r3, #1
 8013b7c:	b2db      	uxtb	r3, r3
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d017      	beq.n	8013bb2 <mscd_xfer_cb+0x3f6>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, p_msc->total_len);
 8013b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b84:	7b58      	ldrb	r0, [r3, #13]
 8013b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b88:	f103 010f 	add.w	r1, r3, #15
 8013b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	4a5e      	ldr	r2, [pc, #376]	; (8013d0c <mscd_xfer_cb+0x550>)
 8013b94:	f7fe fb36 	bl	8012204 <tud_msc_scsi_cb>
 8013b98:	64b8      	str	r0, [r7, #72]	; 0x48
          if ( cb_result < 0 )
 8013b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	da08      	bge.n	8013bb2 <mscd_xfer_cb+0x3f6>
            TU_LOG(MSC_DEBUG, "  SCSI unsupported command\r\n");
 8013ba0:	485f      	ldr	r0, [pc, #380]	; (8013d20 <mscd_xfer_cb+0x564>)
 8013ba2:	f005 fb99 	bl	80192d8 <puts>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8013ba6:	79fb      	ldrb	r3, [r7, #7]
 8013ba8:	2201      	movs	r2, #1
 8013baa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7ff fae6 	bl	801317e <fail_scsi_op>
        if ( p_msc->xferred_len >= p_msc->total_len )
 8013bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d304      	bcc.n	8013bc8 <mscd_xfer_cb+0x40c>
          p_msc->stage = MSC_STAGE_STATUS;
 8013bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bc0:	2202      	movs	r2, #2
 8013bc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 8013bc6:	e06a      	b.n	8013c9e <mscd_xfer_cb+0x4e2>
          TU_BREAKPOINT();
 8013bc8:	4b53      	ldr	r3, [pc, #332]	; (8013d18 <mscd_xfer_cb+0x55c>)
 8013bca:	647b      	str	r3, [r7, #68]	; 0x44
 8013bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f003 0301 	and.w	r3, r3, #1
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d062      	beq.n	8013c9e <mscd_xfer_cb+0x4e2>
 8013bd8:	be00      	bkpt	0x0000
    break;
 8013bda:	e060      	b.n	8013c9e <mscd_xfer_cb+0x4e2>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 8013bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bde:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013be2:	79ba      	ldrb	r2, [r7, #6]
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d151      	bne.n	8013c8c <mscd_xfer_cb+0x4d0>
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	2b0d      	cmp	r3, #13
 8013bec:	d14e      	bne.n	8013c8c <mscd_xfer_cb+0x4d0>
      {
        TU_LOG(MSC_DEBUG, "  SCSI Status [Lun%u] = %u\r\n", p_cbw->lun, p_csw->status);
 8013bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bf0:	7b5b      	ldrb	r3, [r3, #13]
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bf6:	7b1b      	ldrb	r3, [r3, #12]
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	484a      	ldr	r0, [pc, #296]	; (8013d24 <mscd_xfer_cb+0x568>)
 8013bfc:	f005 fad0 	bl	80191a0 <iprintf>
        // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);

        // Invoke complete callback if defined
        // Note: There is racing issue with samd51 + qspi flash testing with arduino
        // if complete_cb() is invoked after queuing the status.
        switch(p_cbw->command[0])
 8013c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c02:	7bdb      	ldrb	r3, [r3, #15]
 8013c04:	2b28      	cmp	r3, #40	; 0x28
 8013c06:	d002      	beq.n	8013c0e <mscd_xfer_cb+0x452>
 8013c08:	2b2a      	cmp	r3, #42	; 0x2a
 8013c0a:	d009      	beq.n	8013c20 <mscd_xfer_cb+0x464>
 8013c0c:	e011      	b.n	8013c32 <mscd_xfer_cb+0x476>
        {
          case SCSI_CMD_READ_10:
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 8013c0e:	4b46      	ldr	r3, [pc, #280]	; (8013d28 <mscd_xfer_cb+0x56c>)
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d01a      	beq.n	8013c4a <mscd_xfer_cb+0x48e>
 8013c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c16:	7b5b      	ldrb	r3, [r3, #13]
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f3af 8000 	nop.w
          break;
 8013c1e:	e014      	b.n	8013c4a <mscd_xfer_cb+0x48e>

          case SCSI_CMD_WRITE_10:
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 8013c20:	4b42      	ldr	r3, [pc, #264]	; (8013d2c <mscd_xfer_cb+0x570>)
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d013      	beq.n	8013c4e <mscd_xfer_cb+0x492>
 8013c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c28:	7b5b      	ldrb	r3, [r3, #13]
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f3af 8000 	nop.w
          break;
 8013c30:	e00d      	b.n	8013c4e <mscd_xfer_cb+0x492>

          default:
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 8013c32:	4b3f      	ldr	r3, [pc, #252]	; (8013d30 <mscd_xfer_cb+0x574>)
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d00c      	beq.n	8013c52 <mscd_xfer_cb+0x496>
 8013c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c3a:	7b5a      	ldrb	r2, [r3, #13]
 8013c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c3e:	330f      	adds	r3, #15
 8013c40:	4619      	mov	r1, r3
 8013c42:	4610      	mov	r0, r2
 8013c44:	f3af 8000 	nop.w
          break;
 8013c48:	e003      	b.n	8013c52 <mscd_xfer_cb+0x496>
          break;
 8013c4a:	bf00      	nop
 8013c4c:	e002      	b.n	8013c54 <mscd_xfer_cb+0x498>
          break;
 8013c4e:	bf00      	nop
 8013c50:	e000      	b.n	8013c54 <mscd_xfer_cb+0x498>
          break;
 8013c52:	bf00      	nop
        }

        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8013c54:	79fb      	ldrb	r3, [r7, #7]
 8013c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7ff fa79 	bl	8013150 <prepare_cbw>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	f083 0301 	eor.w	r3, r3, #1
 8013c64:	b2db      	uxtb	r3, r3
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d014      	beq.n	8013c94 <mscd_xfer_cb+0x4d8>
 8013c6a:	f240 2257 	movw	r2, #599	; 0x257
 8013c6e:	4928      	ldr	r1, [pc, #160]	; (8013d10 <mscd_xfer_cb+0x554>)
 8013c70:	4828      	ldr	r0, [pc, #160]	; (8013d14 <mscd_xfer_cb+0x558>)
 8013c72:	f005 fa95 	bl	80191a0 <iprintf>
 8013c76:	4b28      	ldr	r3, [pc, #160]	; (8013d18 <mscd_xfer_cb+0x55c>)
 8013c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	f003 0301 	and.w	r3, r3, #1
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d000      	beq.n	8013c88 <mscd_xfer_cb+0x4cc>
 8013c86:	be00      	bkpt	0x0000
 8013c88:	2300      	movs	r3, #0
 8013c8a:	e072      	b.n	8013d72 <mscd_xfer_cb+0x5b6>
      }else
      {
        // Any xfer ended here is consider unknown error, ignore it
        TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
 8013c8c:	4829      	ldr	r0, [pc, #164]	; (8013d34 <mscd_xfer_cb+0x578>)
 8013c8e:	f005 fb23 	bl	80192d8 <puts>
      }
    break;
 8013c92:	e005      	b.n	8013ca0 <mscd_xfer_cb+0x4e4>
 8013c94:	e004      	b.n	8013ca0 <mscd_xfer_cb+0x4e4>

    default : break;
 8013c96:	bf00      	nop
 8013c98:	e002      	b.n	8013ca0 <mscd_xfer_cb+0x4e4>
    break;
 8013c9a:	bf00      	nop
 8013c9c:	e000      	b.n	8013ca0 <mscd_xfer_cb+0x4e4>
    break;
 8013c9e:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 8013ca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ca6:	2b02      	cmp	r3, #2
 8013ca8:	d162      	bne.n	8013d70 <mscd_xfer_cb+0x5b4>
  {
    // skip status if epin is currently stalled, will do it when received Clear Stall request
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 8013caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013cac:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8013cb0:	79fb      	ldrb	r3, [r7, #7]
 8013cb2:	4611      	mov	r1, r2
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f002 fea7 	bl	8016a08 <usbd_edpt_stalled>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	f083 0301 	eor.w	r3, r3, #1
 8013cc0:	b2db      	uxtb	r3, r3
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d054      	beq.n	8013d70 <mscd_xfer_cb+0x5b4>
    {
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8013cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cc8:	689a      	ldr	r2, [r3, #8]
 8013cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d932      	bls.n	8013d38 <mscd_xfer_cb+0x57c>
 8013cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cd4:	7b1b      	ldrb	r3, [r3, #12]
 8013cd6:	75bb      	strb	r3, [r7, #22]
  return tu_bit_test(dir, 7);
 8013cd8:	7dbb      	ldrb	r3, [r7, #22]
 8013cda:	613b      	str	r3, [r7, #16]
 8013cdc:	2307      	movs	r3, #7
 8013cde:	73fb      	strb	r3, [r7, #15]
 8013ce0:	7bfb      	ldrb	r3, [r7, #15]
 8013ce2:	693a      	ldr	r2, [r7, #16]
 8013ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8013ce8:	f003 0301 	and.w	r3, r3, #1
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	bf14      	ite	ne
 8013cf0:	2301      	movne	r3, #1
 8013cf2:	2300      	moveq	r3, #0
 8013cf4:	b2db      	uxtb	r3, r3
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d01e      	beq.n	8013d38 <mscd_xfer_cb+0x57c>
      {
        // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
        // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8013cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013cfc:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8013d00:	79fb      	ldrb	r3, [r7, #7]
 8013d02:	4611      	mov	r1, r2
 8013d04:	4618      	mov	r0, r3
 8013d06:	f002 fde3 	bl	80168d0 <usbd_edpt_stall>
 8013d0a:	e031      	b.n	8013d70 <mscd_xfer_cb+0x5b4>
 8013d0c:	20009148 	.word	0x20009148
 8013d10:	0801c904 	.word	0x0801c904
 8013d14:	0801b45c 	.word	0x0801b45c
 8013d18:	e000edf0 	.word	0xe000edf0
 8013d1c:	0801b534 	.word	0x0801b534
 8013d20:	0801b54c 	.word	0x0801b54c
 8013d24:	0801b568 	.word	0x0801b568
	...
 8013d34:	0801b588 	.word	0x0801b588
      }else
      {
        TU_ASSERT( send_csw(rhport, p_msc) );
 8013d38:	79fb      	ldrb	r3, [r7, #7]
 8013d3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7ff f9e7 	bl	8013110 <send_csw>
 8013d42:	4603      	mov	r3, r0
 8013d44:	f083 0301 	eor.w	r3, r3, #1
 8013d48:	b2db      	uxtb	r3, r3
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d010      	beq.n	8013d70 <mscd_xfer_cb+0x5b4>
 8013d4e:	f240 226e 	movw	r2, #622	; 0x26e
 8013d52:	490a      	ldr	r1, [pc, #40]	; (8013d7c <mscd_xfer_cb+0x5c0>)
 8013d54:	480a      	ldr	r0, [pc, #40]	; (8013d80 <mscd_xfer_cb+0x5c4>)
 8013d56:	f005 fa23 	bl	80191a0 <iprintf>
 8013d5a:	4b0a      	ldr	r3, [pc, #40]	; (8013d84 <mscd_xfer_cb+0x5c8>)
 8013d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8013d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	f003 0301 	and.w	r3, r3, #1
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d000      	beq.n	8013d6c <mscd_xfer_cb+0x5b0>
 8013d6a:	be00      	bkpt	0x0000
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	e000      	b.n	8013d72 <mscd_xfer_cb+0x5b6>
      send_csw(rhport, p_msc);
    }
    #endif
  }

  return true;
 8013d70:	2301      	movs	r3, #1
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3764      	adds	r7, #100	; 0x64
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd90      	pop	{r4, r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	0801c904 	.word	0x0801c904
 8013d80:	0801b45c 	.word	0x0801b45c
 8013d84:	e000edf0 	.word	0xe000edf0

08013d88 <proc_builtin_scsi>:
 *------------------------------------------------------------------*/

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
static int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 8013d88:	b590      	push	{r4, r7, lr}
 8013d8a:	b0a3      	sub	sp, #140	; 0x8c
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60b9      	str	r1, [r7, #8]
 8013d90:	607a      	str	r2, [r7, #4]
 8013d92:	603b      	str	r3, [r7, #0]
 8013d94:	4603      	mov	r3, r0
 8013d96:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  mscd_interface_t* p_msc = &_mscd_itf;
 8013d98:	4bb3      	ldr	r3, [pc, #716]	; (8014068 <proc_builtin_scsi+0x2e0>)
 8013d9a:	67fb      	str	r3, [r7, #124]	; 0x7c

  switch ( scsi_cmd[0] )
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	2b25      	cmp	r3, #37	; 0x25
 8013da2:	f200 81f2 	bhi.w	801418a <proc_builtin_scsi+0x402>
 8013da6:	a201      	add	r2, pc, #4	; (adr r2, 8013dac <proc_builtin_scsi+0x24>)
 8013da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dac:	08013e45 	.word	0x08013e45
 8013db0:	0801418b 	.word	0x0801418b
 8013db4:	0801418b 	.word	0x0801418b
 8013db8:	080140f3 	.word	0x080140f3
 8013dbc:	0801418b 	.word	0x0801418b
 8013dc0:	0801418b 	.word	0x0801418b
 8013dc4:	0801418b 	.word	0x0801418b
 8013dc8:	0801418b 	.word	0x0801418b
 8013dcc:	0801418b 	.word	0x0801418b
 8013dd0:	0801418b 	.word	0x0801418b
 8013dd4:	0801418b 	.word	0x0801418b
 8013dd8:	0801418b 	.word	0x0801418b
 8013ddc:	0801418b 	.word	0x0801418b
 8013de0:	0801418b 	.word	0x0801418b
 8013de4:	0801418b 	.word	0x0801418b
 8013de8:	0801418b 	.word	0x0801418b
 8013dec:	0801418b 	.word	0x0801418b
 8013df0:	0801418b 	.word	0x0801418b
 8013df4:	08013fdb 	.word	0x08013fdb
 8013df8:	0801418b 	.word	0x0801418b
 8013dfc:	0801418b 	.word	0x0801418b
 8013e00:	0801418b 	.word	0x0801418b
 8013e04:	0801418b 	.word	0x0801418b
 8013e08:	0801418b 	.word	0x0801418b
 8013e0c:	0801418b 	.word	0x0801418b
 8013e10:	0801418b 	.word	0x0801418b
 8013e14:	08014071 	.word	0x08014071
 8013e18:	08013e7f 	.word	0x08013e7f
 8013e1c:	0801418b 	.word	0x0801418b
 8013e20:	0801418b 	.word	0x0801418b
 8013e24:	0801418b 	.word	0x0801418b
 8013e28:	0801418b 	.word	0x0801418b
 8013e2c:	0801418b 	.word	0x0801418b
 8013e30:	0801418b 	.word	0x0801418b
 8013e34:	0801418b 	.word	0x0801418b
 8013e38:	08013f5d 	.word	0x08013f5d
 8013e3c:	0801418b 	.word	0x0801418b
 8013e40:	08013ef7 	.word	0x08013ef7
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 8013e44:	2300      	movs	r3, #0
 8013e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      if ( !tud_msc_test_unit_ready_cb(lun) )
 8013e4a:	7bfb      	ldrb	r3, [r7, #15]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7fe f8af 	bl	8011fb0 <tud_msc_test_unit_ready_cb>
 8013e52:	4603      	mov	r3, r0
 8013e54:	f083 0301 	eor.w	r3, r3, #1
 8013e58:	b2db      	uxtb	r3, r3
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f000 819a 	beq.w	8014194 <proc_builtin_scsi+0x40c>
      {
        // Failed status response
        resplen = - 1;
 8013e60:	f04f 33ff 	mov.w	r3, #4294967295
 8013e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8013e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	f040 8190 	bne.w	8014194 <proc_builtin_scsi+0x40c>
 8013e74:	7bfb      	ldrb	r3, [r7, #15]
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7ff fab6 	bl	80133e8 <set_sense_medium_not_present>
      }
    break;
 8013e7c:	e18a      	b.n	8014194 <proc_builtin_scsi+0x40c>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      if (tud_msc_start_stop_cb)
 8013e84:	4b79      	ldr	r3, [pc, #484]	; (801406c <proc_builtin_scsi+0x2e4>)
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	f000 8186 	beq.w	8014198 <proc_builtin_scsi+0x410>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	677b      	str	r3, [r7, #116]	; 0x74
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8013e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e92:	791b      	ldrb	r3, [r3, #4]
 8013e94:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8013e98:	b2db      	uxtb	r3, r3
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e9e:	791b      	ldrb	r3, [r3, #4]
 8013ea0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013ea4:	b2db      	uxtb	r3, r3
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	bf14      	ite	ne
 8013eaa:	2301      	movne	r3, #1
 8013eac:	2300      	moveq	r3, #0
 8013eae:	b2da      	uxtb	r2, r3
 8013eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013eb2:	791b      	ldrb	r3, [r3, #4]
 8013eb4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	bf14      	ite	ne
 8013ebe:	2301      	movne	r3, #1
 8013ec0:	2300      	moveq	r3, #0
 8013ec2:	b2db      	uxtb	r3, r3
 8013ec4:	7bf8      	ldrb	r0, [r7, #15]
 8013ec6:	f7fe f8bf 	bl	8012048 <tud_msc_start_stop_cb>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	f083 0301 	eor.w	r3, r3, #1
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	f000 8160 	beq.w	8014198 <proc_builtin_scsi+0x410>
        {
          // Failed status response
          resplen = - 1;
 8013ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8013edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

          // set default sense if not set by callback
          if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8013ee0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	f040 8156 	bne.w	8014198 <proc_builtin_scsi+0x410>
 8013eec:	7bfb      	ldrb	r3, [r7, #15]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7ff fa7a 	bl	80133e8 <set_sense_medium_not_present>
        }
      }
    break;
 8013ef4:	e150      	b.n	8014198 <proc_builtin_scsi+0x410>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 8013ef6:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8013efa:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013efe:	7bfb      	ldrb	r3, [r7, #15]
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7fe f861 	bl	8011fc8 <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 8013f06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013f0a:	67bb      	str	r3, [r7, #120]	; 0x78

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8013f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d002      	beq.n	8013f18 <proc_builtin_scsi+0x190>
 8013f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d10d      	bne.n	8013f34 <proc_builtin_scsi+0x1ac>
      {
        resplen = -1;
 8013f18:	f04f 33ff 	mov.w	r3, #4294967295
 8013f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8013f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d117      	bne.n	8013f5a <proc_builtin_scsi+0x1d2>
 8013f2a:	7bfb      	ldrb	r3, [r7, #15]
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7ff fa5b 	bl	80133e8 <set_sense_medium_not_present>
 8013f32:	e012      	b.n	8013f5a <proc_builtin_scsi+0x1d2>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba   = tu_htonl(block_count-1);
 8013f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013f36:	3b01      	subs	r3, #1
 8013f38:	ba1b      	rev	r3, r3
 8013f3a:	667b      	str	r3, [r7, #100]	; 0x64
        read_capa10.block_size = tu_htonl(block_size);
 8013f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f3e:	ba1b      	rev	r3, r3
 8013f40:	66bb      	str	r3, [r7, #104]	; 0x68

        resplen = sizeof(read_capa10);
 8013f42:	2308      	movs	r3, #8
 8013f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_capa10, resplen);
 8013f48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013f4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013f50:	4619      	mov	r1, r3
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f005 f85f 	bl	8019016 <memcpy>
      }
    }
    break;
 8013f58:	e11f      	b.n	801419a <proc_builtin_scsi+0x412>
 8013f5a:	e11e      	b.n	801419a <proc_builtin_scsi+0x412>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 8013f5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013f60:	2200      	movs	r2, #0
 8013f62:	601a      	str	r2, [r3, #0]
 8013f64:	605a      	str	r2, [r3, #4]
 8013f66:	609a      	str	r2, [r3, #8]
 8013f68:	2308      	movs	r3, #8
 8013f6a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8013f6e:	2302      	movs	r3, #2
 8013f70:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8013f74:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8013f78:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8013f7c:	7bfb      	ldrb	r3, [r7, #15]
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7fe f822 	bl	8011fc8 <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8013f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d003      	beq.n	8013f92 <proc_builtin_scsi+0x20a>
 8013f8a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d10d      	bne.n	8013fae <proc_builtin_scsi+0x226>
      {
        resplen = -1;
 8013f92:	f04f 33ff 	mov.w	r3, #4294967295
 8013f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8013f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d119      	bne.n	8013fd8 <proc_builtin_scsi+0x250>
 8013fa4:	7bfb      	ldrb	r3, [r7, #15]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7ff fa1e 	bl	80133e8 <set_sense_medium_not_present>
 8013fac:	e014      	b.n	8013fd8 <proc_builtin_scsi+0x250>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 8013fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fb0:	ba1b      	rev	r3, r3
 8013fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8013fb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8013fb8:	ba5b      	rev16	r3, r3
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        resplen = sizeof(read_fmt_capa);
 8013fc0:	230c      	movs	r3, #12
 8013fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_fmt_capa, resplen);
 8013fc6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013fca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013fce:	4619      	mov	r1, r3
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f005 f820 	bl	8019016 <memcpy>
      }
    }
    break;
 8013fd6:	e0e0      	b.n	801419a <proc_builtin_scsi+0x412>
 8013fd8:	e0df      	b.n	801419a <proc_builtin_scsi+0x412>

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 8013fda:	f107 0314 	add.w	r3, r7, #20
 8013fde:	2224      	movs	r2, #36	; 0x24
 8013fe0:	2100      	movs	r1, #0
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f005 f83f 	bl	8019066 <memset>
 8013fe8:	7d7b      	ldrb	r3, [r7, #21]
 8013fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fee:	757b      	strb	r3, [r7, #21]
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	75bb      	strb	r3, [r7, #22]
 8013ff4:	7dfb      	ldrb	r3, [r7, #23]
 8013ff6:	2202      	movs	r2, #2
 8013ff8:	f362 0303 	bfi	r3, r2, #0, #4
 8013ffc:	75fb      	strb	r3, [r7, #23]
          .version              = 2,
          .response_data_format = 2,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 8013ffe:	f107 0314 	add.w	r3, r7, #20
 8014002:	3308      	adds	r3, #8
 8014004:	2208      	movs	r2, #8
 8014006:	2120      	movs	r1, #32
 8014008:	4618      	mov	r0, r3
 801400a:	f005 f82c 	bl	8019066 <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 801400e:	f107 0314 	add.w	r3, r7, #20
 8014012:	3310      	adds	r3, #16
 8014014:	2210      	movs	r2, #16
 8014016:	2120      	movs	r1, #32
 8014018:	4618      	mov	r0, r3
 801401a:	f005 f824 	bl	8019066 <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 801401e:	f107 0314 	add.w	r3, r7, #20
 8014022:	3320      	adds	r3, #32
 8014024:	2204      	movs	r2, #4
 8014026:	2120      	movs	r1, #32
 8014028:	4618      	mov	r0, r3
 801402a:	f005 f81c 	bl	8019066 <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 801402e:	f107 0314 	add.w	r3, r7, #20
 8014032:	f103 0420 	add.w	r4, r3, #32
 8014036:	f107 0314 	add.w	r3, r7, #20
 801403a:	f103 0210 	add.w	r2, r3, #16
 801403e:	f107 0314 	add.w	r3, r7, #20
 8014042:	f103 0108 	add.w	r1, r3, #8
 8014046:	7bf8      	ldrb	r0, [r7, #15]
 8014048:	4623      	mov	r3, r4
 801404a:	f7fd ff6b 	bl	8011f24 <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 801404e:	2324      	movs	r3, #36	; 0x24
 8014050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &inquiry_rsp, resplen);
 8014054:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014058:	f107 0314 	add.w	r3, r7, #20
 801405c:	4619      	mov	r1, r3
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f004 ffd9 	bl	8019016 <memcpy>
    }
    break;
 8014064:	e099      	b.n	801419a <proc_builtin_scsi+0x412>
 8014066:	bf00      	nop
 8014068:	20009108 	.word	0x20009108
 801406c:	08012049 	.word	0x08012049

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 8014070:	2303      	movs	r3, #3
 8014072:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8014076:	2300      	movs	r3, #0
 8014078:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 801407c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8014080:	f36f 0306 	bfc	r3, #0, #7
 8014084:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8014088:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801408c:	f36f 13c7 	bfc	r3, #7, #1
 8014090:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8014094:	2300      	movs	r3, #0
 8014096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          .write_protected      = false,
          .reserved             = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 801409a:	2301      	movs	r3, #1
 801409c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      if ( tud_msc_is_writable_cb )
 80140a0:	4b41      	ldr	r3, [pc, #260]	; (80141a8 <proc_builtin_scsi+0x420>)
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d006      	beq.n	80140b4 <proc_builtin_scsi+0x32c>
      {
        writable = tud_msc_is_writable_cb(lun);
 80140a6:	7bfb      	ldrb	r3, [r7, #15]
 80140a8:	4618      	mov	r0, r3
 80140aa:	f3af 8000 	nop.w
 80140ae:	4603      	mov	r3, r0
 80140b0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      }

      mode_resp.write_protected = !writable;
 80140b4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	bf14      	ite	ne
 80140bc:	2301      	movne	r3, #1
 80140be:	2300      	moveq	r3, #0
 80140c0:	b2db      	uxtb	r3, r3
 80140c2:	f083 0301 	eor.w	r3, r3, #1
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	f003 0301 	and.w	r3, r3, #1
 80140cc:	b2da      	uxtb	r2, r3
 80140ce:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80140d2:	f362 13c7 	bfi	r3, r2, #7, #1
 80140d6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

      resplen = sizeof(mode_resp);
 80140da:	2304      	movs	r3, #4
 80140dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &mode_resp, resplen);
 80140e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80140e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80140e8:	4619      	mov	r1, r3
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f004 ff93 	bl	8019016 <memcpy>
    }
    break;
 80140f0:	e053      	b.n	801419a <proc_builtin_scsi+0x412>

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 80140f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80140f6:	2200      	movs	r2, #0
 80140f8:	601a      	str	r2, [r3, #0]
 80140fa:	605a      	str	r2, [r3, #4]
 80140fc:	609a      	str	r2, [r3, #8]
 80140fe:	60da      	str	r2, [r3, #12]
 8014100:	821a      	strh	r2, [r3, #16]
 8014102:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014106:	2270      	movs	r2, #112	; 0x70
 8014108:	f362 0306 	bfi	r3, r2, #0, #7
 801410c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8014110:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014118:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      {
          .response_code = 0x70, // current, fixed format
          .valid         = 1
      };

      sense_rsp.add_sense_len       = sizeof(scsi_sense_fixed_resp_t) - 8;
 801411c:	230a      	movs	r3, #10
 801411e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      sense_rsp.sense_key           = p_msc->sense_key;
 8014122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014128:	f003 030f 	and.w	r3, r3, #15
 801412c:	b2da      	uxtb	r2, r3
 801412e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8014132:	f362 0303 	bfi	r3, r2, #0, #4
 8014136:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 801413a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014140:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 8014144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801414a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

      resplen = sizeof(sense_rsp);
 801414e:	2312      	movs	r3, #18
 8014150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &sense_rsp, resplen);
 8014154:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014158:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801415c:	4619      	mov	r1, r3
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f004 ff59 	bl	8019016 <memcpy>

      // request sense callback could overwrite the sense data
      if (tud_msc_request_sense_cb)
 8014164:	4b11      	ldr	r3, [pc, #68]	; (80141ac <proc_builtin_scsi+0x424>)
 8014166:	2b00      	cmp	r3, #0
 8014168:	d008      	beq.n	801417c <proc_builtin_scsi+0x3f4>
      {
        resplen = tud_msc_request_sense_cb(lun, buffer, bufsize);
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	b29a      	uxth	r2, r3
 801416e:	7bfb      	ldrb	r3, [r7, #15]
 8014170:	6879      	ldr	r1, [r7, #4]
 8014172:	4618      	mov	r0, r3
 8014174:	f3af 8000 	nop.w
 8014178:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      }

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 801417c:	7bf8      	ldrb	r0, [r7, #15]
 801417e:	2300      	movs	r3, #0
 8014180:	2200      	movs	r2, #0
 8014182:	2100      	movs	r1, #0
 8014184:	f7ff f90c 	bl	80133a0 <tud_msc_set_sense>
    }
    break;
 8014188:	e007      	b.n	801419a <proc_builtin_scsi+0x412>

    default: resplen = -1; break;
 801418a:	f04f 33ff 	mov.w	r3, #4294967295
 801418e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014192:	e002      	b.n	801419a <proc_builtin_scsi+0x412>
    break;
 8014194:	bf00      	nop
 8014196:	e000      	b.n	801419a <proc_builtin_scsi+0x412>
    break;
 8014198:	bf00      	nop
  }

  return resplen;
 801419a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 801419e:	4618      	mov	r0, r3
 80141a0:	378c      	adds	r7, #140	; 0x8c
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd90      	pop	{r4, r7, pc}
 80141a6:	bf00      	nop
	...

080141b0 <proc_read10_cmd>:

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b08c      	sub	sp, #48	; 0x30
 80141b4:	af02      	add	r7, sp, #8
 80141b6:	4603      	mov	r3, r0
 80141b8:	6039      	str	r1, [r7, #0]
 80141ba:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	627b      	str	r3, [r7, #36]	; 0x24

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 80141c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141c2:	f7ff f85a 	bl	801327a <rdwr10_get_blocksize>
 80141c6:	4603      	mov	r3, r0
 80141c8:	847b      	strh	r3, [r7, #34]	; 0x22

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 80141ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141cc:	330f      	adds	r3, #15
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7ff f82d 	bl	801322e <rdwr10_get_lba>
 80141d4:	4601      	mov	r1, r0
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80141da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80141e0:	440b      	add	r3, r1
 80141e2:	61fb      	str	r3, [r7, #28]

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 80141e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e6:	689a      	ldr	r2, [r3, #8]
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141ec:	1ad3      	subs	r3, r2, r3
 80141ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141f2:	60fa      	str	r2, [r7, #12]
 80141f4:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 80141f6:	68fa      	ldr	r2, [r7, #12]
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	4293      	cmp	r3, r2
 80141fc:	bf28      	it	cs
 80141fe:	4613      	movcs	r3, r2
 8014200:	61bb      	str	r3, [r7, #24]

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014206:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014208:	fbb3 f1f2 	udiv	r1, r3, r2
 801420c:	fb01 f202 	mul.w	r2, r1, r2
 8014210:	1a9b      	subs	r3, r3, r2
 8014212:	617b      	str	r3, [r7, #20]
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 8014214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014216:	7b58      	ldrb	r0, [r3, #13]
 8014218:	69bb      	ldr	r3, [r7, #24]
 801421a:	9300      	str	r3, [sp, #0]
 801421c:	4b23      	ldr	r3, [pc, #140]	; (80142ac <proc_read10_cmd+0xfc>)
 801421e:	697a      	ldr	r2, [r7, #20]
 8014220:	69f9      	ldr	r1, [r7, #28]
 8014222:	f7fd ff27 	bl	8012074 <tud_msc_read10_cb>
 8014226:	61b8      	str	r0, [r7, #24]

  if ( nbytes < 0 )
 8014228:	69bb      	ldr	r3, [r7, #24]
 801422a:	2b00      	cmp	r3, #0
 801422c:	da0e      	bge.n	801424c <proc_read10_cmd+0x9c>
  {
    // negative means error -> endpoint is stalled & status in CSW set to failed
    TU_LOG(MSC_DEBUG, "  tud_msc_read10_cb() return -1\r\n");
 801422e:	4820      	ldr	r0, [pc, #128]	; (80142b0 <proc_read10_cmd+0x100>)
 8014230:	f005 f852 	bl	80192d8 <puts>

    // set sense
    set_sense_medium_not_present(p_cbw->lun);
 8014234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014236:	7b5b      	ldrb	r3, [r3, #13]
 8014238:	4618      	mov	r0, r3
 801423a:	f7ff f8d5 	bl	80133e8 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 801423e:	79fb      	ldrb	r3, [r7, #7]
 8014240:	2201      	movs	r2, #1
 8014242:	6839      	ldr	r1, [r7, #0]
 8014244:	4618      	mov	r0, r3
 8014246:	f7fe ff9a 	bl	801317e <fail_scsi_op>
 801424a:	e02c      	b.n	80142a6 <proc_read10_cmd+0xf6>
  }
  else if ( nbytes == 0 )
 801424c:	69bb      	ldr	r3, [r7, #24]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d10a      	bne.n	8014268 <proc_read10_cmd+0xb8>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8014258:	79f8      	ldrb	r0, [r7, #7]
 801425a:	2300      	movs	r3, #0
 801425c:	9300      	str	r3, [sp, #0]
 801425e:	2300      	movs	r3, #0
 8014260:	2200      	movs	r2, #0
 8014262:	f002 f8c6 	bl	80163f2 <dcd_event_xfer_complete>
 8014266:	e01e      	b.n	80142a6 <proc_read10_cmd+0xf6>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, nbytes), );
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 801426e:	69bb      	ldr	r3, [r7, #24]
 8014270:	b29b      	uxth	r3, r3
 8014272:	79f8      	ldrb	r0, [r7, #7]
 8014274:	4a0d      	ldr	r2, [pc, #52]	; (80142ac <proc_read10_cmd+0xfc>)
 8014276:	f002 fa7d 	bl	8016774 <usbd_edpt_xfer>
 801427a:	4603      	mov	r3, r0
 801427c:	f083 0301 	eor.w	r3, r3, #1
 8014280:	b2db      	uxtb	r3, r3
 8014282:	2b00      	cmp	r3, #0
 8014284:	d00f      	beq.n	80142a6 <proc_read10_cmd+0xf6>
 8014286:	f240 325d 	movw	r2, #861	; 0x35d
 801428a:	490a      	ldr	r1, [pc, #40]	; (80142b4 <proc_read10_cmd+0x104>)
 801428c:	480a      	ldr	r0, [pc, #40]	; (80142b8 <proc_read10_cmd+0x108>)
 801428e:	f004 ff87 	bl	80191a0 <iprintf>
 8014292:	4b0a      	ldr	r3, [pc, #40]	; (80142bc <proc_read10_cmd+0x10c>)
 8014294:	613b      	str	r3, [r7, #16]
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	f003 0301 	and.w	r3, r3, #1
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d000      	beq.n	80142a4 <proc_read10_cmd+0xf4>
 80142a2:	be00      	bkpt	0x0000
 80142a4:	bf00      	nop
  }
}
 80142a6:	3728      	adds	r7, #40	; 0x28
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	20009148 	.word	0x20009148
 80142b0:	0801b5c0 	.word	0x0801b5c0
 80142b4:	0801c914 	.word	0x0801c914
 80142b8:	0801b45c 	.word	0x0801b45c
 80142bc:	e000edf0 	.word	0xe000edf0

080142c0 <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b088      	sub	sp, #32
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	4603      	mov	r3, r0
 80142c8:	6039      	str	r1, [r7, #0]
 80142ca:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 80142d0:	2301      	movs	r3, #1
 80142d2:	77fb      	strb	r3, [r7, #31]

  if ( tud_msc_is_writable_cb )
 80142d4:	4b27      	ldr	r3, [pc, #156]	; (8014374 <proc_write10_cmd+0xb4>)
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d006      	beq.n	80142e8 <proc_write10_cmd+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	7b5b      	ldrb	r3, [r3, #13]
 80142de:	4618      	mov	r0, r3
 80142e0:	f3af 8000 	nop.w
 80142e4:	4603      	mov	r3, r0
 80142e6:	77fb      	strb	r3, [r7, #31]
  }

  if ( !writable )
 80142e8:	7ffb      	ldrb	r3, [r7, #31]
 80142ea:	f083 0301 	eor.w	r3, r3, #1
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d00d      	beq.n	8014310 <proc_write10_cmd+0x50>
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
 80142f4:	69bb      	ldr	r3, [r7, #24]
 80142f6:	7b58      	ldrb	r0, [r3, #13]
 80142f8:	2300      	movs	r3, #0
 80142fa:	2227      	movs	r2, #39	; 0x27
 80142fc:	2107      	movs	r1, #7
 80142fe:	f7ff f84f 	bl	80133a0 <tud_msc_set_sense>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8014302:	79fb      	ldrb	r3, [r7, #7]
 8014304:	2201      	movs	r2, #1
 8014306:	6839      	ldr	r1, [r7, #0]
 8014308:	4618      	mov	r0, r3
 801430a:	f7fe ff38 	bl	801317e <fail_scsi_op>
    return;
 801430e:	e02d      	b.n	801436c <proc_write10_cmd+0xac>
  }

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 8014310:	69bb      	ldr	r3, [r7, #24]
 8014312:	689a      	ldr	r2, [r3, #8]
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014318:	1ad3      	subs	r3, r2, r3
 801431a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801431e:	60fa      	str	r2, [r7, #12]
 8014320:	60bb      	str	r3, [r7, #8]
 8014322:	68fa      	ldr	r2, [r7, #12]
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	4293      	cmp	r3, r2
 8014328:	bf28      	it	cs
 801432a:	4613      	movcs	r3, r2
 801432c:	617b      	str	r3, [r7, #20]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	b29b      	uxth	r3, r3
 8014338:	79f8      	ldrb	r0, [r7, #7]
 801433a:	4a0f      	ldr	r2, [pc, #60]	; (8014378 <proc_write10_cmd+0xb8>)
 801433c:	f002 fa1a 	bl	8016774 <usbd_edpt_xfer>
 8014340:	4603      	mov	r3, r0
 8014342:	f083 0301 	eor.w	r3, r3, #1
 8014346:	b2db      	uxtb	r3, r3
 8014348:	2b00      	cmp	r3, #0
 801434a:	d00f      	beq.n	801436c <proc_write10_cmd+0xac>
 801434c:	f44f 725e 	mov.w	r2, #888	; 0x378
 8014350:	490a      	ldr	r1, [pc, #40]	; (801437c <proc_write10_cmd+0xbc>)
 8014352:	480b      	ldr	r0, [pc, #44]	; (8014380 <proc_write10_cmd+0xc0>)
 8014354:	f004 ff24 	bl	80191a0 <iprintf>
 8014358:	4b0a      	ldr	r3, [pc, #40]	; (8014384 <proc_write10_cmd+0xc4>)
 801435a:	613b      	str	r3, [r7, #16]
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	f003 0301 	and.w	r3, r3, #1
 8014364:	2b00      	cmp	r3, #0
 8014366:	d000      	beq.n	801436a <proc_write10_cmd+0xaa>
 8014368:	be00      	bkpt	0x0000
 801436a:	bf00      	nop
}
 801436c:	3720      	adds	r7, #32
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	00000000 	.word	0x00000000
 8014378:	20009148 	.word	0x20009148
 801437c:	0801c924 	.word	0x0801c924
 8014380:	0801b45c 	.word	0x0801b45c
 8014384:	e000edf0 	.word	0xe000edf0

08014388 <proc_write10_new_data>:

// process new data arrived from WRITE10
static void proc_write10_new_data(uint8_t rhport, mscd_interface_t* p_msc, uint32_t xferred_bytes)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b08c      	sub	sp, #48	; 0x30
 801438c:	af02      	add	r7, sp, #8
 801438e:	4603      	mov	r3, r0
 8014390:	60b9      	str	r1, [r7, #8]
 8014392:	607a      	str	r2, [r7, #4]
 8014394:	73fb      	strb	r3, [r7, #15]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	627b      	str	r3, [r7, #36]	; 0x24

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 801439a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801439c:	f7fe ff6d 	bl	801327a <rdwr10_get_blocksize>
 80143a0:	4603      	mov	r3, r0
 80143a2:	847b      	strh	r3, [r7, #34]	; 0x22

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 80143a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a6:	330f      	adds	r3, #15
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fe ff40 	bl	801322e <rdwr10_get_lba>
 80143ae:	4601      	mov	r1, r0
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80143ba:	440b      	add	r3, r1
 80143bc:	61fb      	str	r3, [r7, #28]

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80143c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80143c8:	fb01 f202 	mul.w	r2, r1, r2
 80143cc:	1a9b      	subs	r3, r3, r2
 80143ce:	61bb      	str	r3, [r7, #24]
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 80143d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d2:	7b58      	ldrb	r0, [r3, #13]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	9300      	str	r3, [sp, #0]
 80143d8:	4b2d      	ldr	r3, [pc, #180]	; (8014490 <proc_write10_new_data+0x108>)
 80143da:	69ba      	ldr	r2, [r7, #24]
 80143dc:	69f9      	ldr	r1, [r7, #28]
 80143de:	f7fd feab 	bl	8012138 <tud_msc_write10_cb>
 80143e2:	6178      	str	r0, [r7, #20]

  if ( nbytes < 0 )
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	da14      	bge.n	8014414 <proc_write10_new_data+0x8c>
  {
    // negative means error -> failed this scsi op
    TU_LOG(MSC_DEBUG, "  tud_msc_write10_cb() return -1\r\n");
 80143ea:	482a      	ldr	r0, [pc, #168]	; (8014494 <proc_write10_new_data+0x10c>)
 80143ec:	f004 ff74 	bl	80192d8 <puts>

    // update actual byte before failed
    p_msc->xferred_len += xferred_bytes;
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	441a      	add	r2, r3
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	639a      	str	r2, [r3, #56]	; 0x38

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);
 80143fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fe:	7b5b      	ldrb	r3, [r3, #13]
 8014400:	4618      	mov	r0, r3
 8014402:	f7fe fff1 	bl	80133e8 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8014406:	7bfb      	ldrb	r3, [r7, #15]
 8014408:	2201      	movs	r2, #1
 801440a:	68b9      	ldr	r1, [r7, #8]
 801440c:	4618      	mov	r0, r3
 801440e:	f7fe feb6 	bl	801317e <fail_scsi_op>
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
      }
    }
  }
}
 8014412:	e039      	b.n	8014488 <proc_write10_new_data+0x100>
    if ( (uint32_t) nbytes < xferred_bytes )
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	687a      	ldr	r2, [r7, #4]
 8014418:	429a      	cmp	r2, r3
 801441a:	d91f      	bls.n	801445c <proc_write10_new_data+0xd4>
      if ( nbytes > 0 )
 801441c:	697b      	ldr	r3, [r7, #20]
 801441e:	2b00      	cmp	r3, #0
 8014420:	dd0f      	ble.n	8014442 <proc_write10_new_data+0xba>
        p_msc->xferred_len += nbytes;
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	441a      	add	r2, r3
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	639a      	str	r2, [r3, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, xferred_bytes-nbytes);
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	4a17      	ldr	r2, [pc, #92]	; (8014490 <proc_write10_new_data+0x108>)
 8014432:	1899      	adds	r1, r3, r2
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	687a      	ldr	r2, [r7, #4]
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	461a      	mov	r2, r3
 801443c:	4814      	ldr	r0, [pc, #80]	; (8014490 <proc_write10_new_data+0x108>)
 801443e:	f004 fdf8 	bl	8019032 <memmove>
      dcd_event_xfer_complete(rhport, p_msc->ep_out, xferred_bytes-nbytes, XFER_RESULT_SUCCESS, false);
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	687a      	ldr	r2, [r7, #4]
 801444c:	1ad2      	subs	r2, r2, r3
 801444e:	7bf8      	ldrb	r0, [r7, #15]
 8014450:	2300      	movs	r3, #0
 8014452:	9300      	str	r3, [sp, #0]
 8014454:	2300      	movs	r3, #0
 8014456:	f001 ffcc 	bl	80163f2 <dcd_event_xfer_complete>
}
 801445a:	e015      	b.n	8014488 <proc_write10_new_data+0x100>
      p_msc->xferred_len += xferred_bytes;
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	441a      	add	r2, r3
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	639a      	str	r2, [r3, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014470:	429a      	cmp	r2, r3
 8014472:	d304      	bcc.n	801447e <proc_write10_new_data+0xf6>
        p_msc->stage = MSC_STAGE_STATUS;
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	2202      	movs	r2, #2
 8014478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 801447c:	e004      	b.n	8014488 <proc_write10_new_data+0x100>
        proc_write10_cmd(rhport, p_msc);
 801447e:	7bfb      	ldrb	r3, [r7, #15]
 8014480:	68b9      	ldr	r1, [r7, #8]
 8014482:	4618      	mov	r0, r3
 8014484:	f7ff ff1c 	bl	80142c0 <proc_write10_cmd>
}
 8014488:	bf00      	nop
 801448a:	3728      	adds	r7, #40	; 0x28
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	20009148 	.word	0x20009148
 8014494:	0801b5e4 	.word	0x0801b5e4

08014498 <osal_semaphore_wait>:
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b084      	sub	sp, #16
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	6039      	str	r1, [r7, #0]
  uint32_t const ticks = (msec == OSAL_TIMEOUT_WAIT_FOREVER) ? portMAX_DELAY : pdMS_TO_TICKS(msec);
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144a8:	d009      	beq.n	80144be <osal_semaphore_wait+0x26>
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80144b0:	fb02 f303 	mul.w	r3, r2, r3
 80144b4:	4a0a      	ldr	r2, [pc, #40]	; (80144e0 <osal_semaphore_wait+0x48>)
 80144b6:	fba2 2303 	umull	r2, r3, r2, r3
 80144ba:	099b      	lsrs	r3, r3, #6
 80144bc:	e001      	b.n	80144c2 <osal_semaphore_wait+0x2a>
 80144be:	f04f 33ff 	mov.w	r3, #4294967295
 80144c2:	60fb      	str	r3, [r7, #12]
  return xSemaphoreTake(sem_hdl, ticks);
 80144c4:	68f9      	ldr	r1, [r7, #12]
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f7f8 ffca 	bl	800d460 <xQueueSemaphoreTake>
 80144cc:	4603      	mov	r3, r0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	bf14      	ite	ne
 80144d2:	2301      	movne	r3, #1
 80144d4:	2300      	moveq	r3, #0
 80144d6:	b2db      	uxtb	r3, r3
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3710      	adds	r7, #16
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}
 80144e0:	10624dd3 	.word	0x10624dd3

080144e4 <osal_mutex_lock>:

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b082      	sub	sp, #8
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	6039      	str	r1, [r7, #0]
  return osal_semaphore_wait(mutex_hdl, msec);
 80144ee:	6839      	ldr	r1, [r7, #0]
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f7ff ffd1 	bl	8014498 <osal_semaphore_wait>
 80144f6:	4603      	mov	r3, r0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <osal_mutex_unlock>:

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  return xSemaphoreGive(mutex_hdl);
 8014508:	2300      	movs	r3, #0
 801450a:	2200      	movs	r2, #0
 801450c:	2100      	movs	r1, #0
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f7f8 fca0 	bl	800ce54 <xQueueGenericSend>
 8014514:	4603      	mov	r3, r0
 8014516:	2b00      	cmp	r3, #0
 8014518:	bf14      	ite	ne
 801451a:	2301      	movne	r3, #1
 801451c:	2300      	moveq	r3, #0
 801451e:	b2db      	uxtb	r3, r3
}
 8014520:	4618      	mov	r0, r3
 8014522:	3708      	adds	r7, #8
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}

08014528 <_ff_lock>:

// implement mutex lock and unlock
#if CFG_FIFO_MUTEX

static inline void _ff_lock(tu_fifo_mutex_t mutex)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d004      	beq.n	8014540 <_ff_lock+0x18>
 8014536:	f04f 31ff 	mov.w	r1, #4294967295
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f7ff ffd2 	bl	80144e4 <osal_mutex_lock>
}
 8014540:	bf00      	nop
 8014542:	3708      	adds	r7, #8
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}

08014548 <_ff_unlock>:

static inline void _ff_unlock(tu_fifo_mutex_t mutex)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  if (mutex) osal_mutex_unlock(mutex);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d002      	beq.n	801455c <_ff_unlock+0x14>
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f7ff ffd2 	bl	8014500 <osal_mutex_unlock>
}
 801455c:	bf00      	nop
 801455e:	3708      	adds	r7, #8
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
 801456a:	60f8      	str	r0, [r7, #12]
 801456c:	60b9      	str	r1, [r7, #8]
 801456e:	4611      	mov	r1, r2
 8014570:	461a      	mov	r2, r3
 8014572:	460b      	mov	r3, r1
 8014574:	80fb      	strh	r3, [r7, #6]
 8014576:	4613      	mov	r3, r2
 8014578:	80bb      	strh	r3, [r7, #4]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 801457a:	88fb      	ldrh	r3, [r7, #6]
 801457c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014580:	d901      	bls.n	8014586 <tu_fifo_config+0x22>
 8014582:	2300      	movs	r3, #0
 8014584:	e034      	b.n	80145f0 <tu_fifo_config+0x8c>

  _ff_lock(f->mutex_wr);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	695b      	ldr	r3, [r3, #20]
 801458a:	4618      	mov	r0, r3
 801458c:	f7ff ffcc 	bl	8014528 <_ff_lock>
  _ff_lock(f->mutex_rd);
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	699b      	ldr	r3, [r3, #24]
 8014594:	4618      	mov	r0, r3
 8014596:	f7ff ffc7 	bl	8014528 <_ff_lock>

  f->buffer = (uint8_t*) buffer;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	68ba      	ldr	r2, [r7, #8]
 801459e:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	88fa      	ldrh	r2, [r7, #6]
 80145a4:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	88ba      	ldrh	r2, [r7, #4]
 80145aa:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	7e3a      	ldrb	r2, [r7, #24]
 80145b0:	721a      	strb	r2, [r3, #8]

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = 2*depth - 1;
 80145b2:	88fb      	ldrh	r3, [r7, #6]
 80145b4:	005b      	lsls	r3, r3, #1
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	3b01      	subs	r3, #1
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	899b      	ldrh	r3, [r3, #12]
 80145c4:	43db      	mvns	r3, r3
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	815a      	strh	r2, [r3, #10]

  f->rd_idx = f->wr_idx = 0;
 80145cc:	2100      	movs	r1, #0
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	460a      	mov	r2, r1
 80145d2:	81da      	strh	r2, [r3, #14]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	460a      	mov	r2, r1
 80145d8:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_wr);
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	695b      	ldr	r3, [r3, #20]
 80145de:	4618      	mov	r0, r3
 80145e0:	f7ff ffb2 	bl	8014548 <_ff_unlock>
  _ff_unlock(f->mutex_rd);
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	699b      	ldr	r3, [r3, #24]
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7ff ffad 	bl	8014548 <_ff_unlock>

  return true;
 80145ee:	2301      	movs	r3, #1
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3710      	adds	r7, #16
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <_ff_mod>:

// Static functions are intended to work on local variables
static inline uint16_t _ff_mod(uint16_t idx, uint16_t depth)
{
 80145f8:	b480      	push	{r7}
 80145fa:	b083      	sub	sp, #12
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	4603      	mov	r3, r0
 8014600:	460a      	mov	r2, r1
 8014602:	80fb      	strh	r3, [r7, #6]
 8014604:	4613      	mov	r3, r2
 8014606:	80bb      	strh	r3, [r7, #4]
  while ( idx >= depth) idx -= depth;
 8014608:	e003      	b.n	8014612 <_ff_mod+0x1a>
 801460a:	88fa      	ldrh	r2, [r7, #6]
 801460c:	88bb      	ldrh	r3, [r7, #4]
 801460e:	1ad3      	subs	r3, r2, r3
 8014610:	80fb      	strh	r3, [r7, #6]
 8014612:	88fa      	ldrh	r2, [r7, #6]
 8014614:	88bb      	ldrh	r3, [r7, #4]
 8014616:	429a      	cmp	r2, r3
 8014618:	d2f7      	bcs.n	801460a <_ff_mod+0x12>
  return idx;
 801461a:	88fb      	ldrh	r3, [r7, #6]
}
 801461c:	4618      	mov	r0, r3
 801461e:	370c      	adds	r7, #12
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr

08014628 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsis.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b08a      	sub	sp, #40	; 0x28
 801462c:	af00      	add	r7, sp, #0
 801462e:	60f8      	str	r0, [r7, #12]
 8014630:	60b9      	str	r1, [r7, #8]
 8014632:	4613      	mov	r3, r2
 8014634:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 801463a:	88fb      	ldrh	r3, [r7, #6]
 801463c:	089b      	lsrs	r3, r3, #2
 801463e:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8014640:	e00b      	b.n	801465a <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *rx_fifo);
 8014642:	6a3b      	ldr	r3, [r7, #32]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	68fa      	ldr	r2, [r7, #12]
 8014648:	61ba      	str	r2, [r7, #24]
 801464a:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 801464c:	69bb      	ldr	r3, [r7, #24]
 801464e:	697a      	ldr	r2, [r7, #20]
 8014650:	601a      	str	r2, [r3, #0]
 8014652:	bf00      	nop
    ff_buf += 4;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	3304      	adds	r3, #4
 8014658:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 801465a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801465c:	1e5a      	subs	r2, r3, #1
 801465e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8014660:	2b00      	cmp	r3, #0
 8014662:	d1ee      	bne.n	8014642 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8014664:	88fb      	ldrh	r3, [r7, #6]
 8014666:	b2db      	uxtb	r3, r3
 8014668:	f003 0303 	and.w	r3, r3, #3
 801466c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 801466e:	7ffb      	ldrb	r3, [r7, #31]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d009      	beq.n	8014688 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *rx_fifo;
 8014674:	6a3b      	ldr	r3, [r7, #32]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 801467a:	7ffa      	ldrb	r2, [r7, #31]
 801467c:	f107 0310 	add.w	r3, r7, #16
 8014680:	4619      	mov	r1, r3
 8014682:	68f8      	ldr	r0, [r7, #12]
 8014684:	f004 fcc7 	bl	8019016 <memcpy>
  }
}
 8014688:	bf00      	nop
 801468a:	3728      	adds	r7, #40	; 0x28
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}

08014690 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b08a      	sub	sp, #40	; 0x28
 8014694:	af00      	add	r7, sp, #0
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	60b9      	str	r1, [r7, #8]
 801469a:	4613      	mov	r3, r2
 801469c:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	623b      	str	r3, [r7, #32]

  // Pushing full available 32 bit words to const app address
  uint16_t full_words = len >> 2;
 80146a2:	88fb      	ldrh	r3, [r7, #6]
 80146a4:	089b      	lsrs	r3, r3, #2
 80146a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 80146a8:	e008      	b.n	80146bc <_ff_pull_const_addr+0x2c>
 80146aa:	68bb      	ldr	r3, [r7, #8]
 80146ac:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 80146ae:	69bb      	ldr	r3, [r7, #24]
 80146b0:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(ff_buf);
 80146b2:	6a3b      	ldr	r3, [r7, #32]
 80146b4:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	3304      	adds	r3, #4
 80146ba:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80146bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80146be:	1e5a      	subs	r2, r3, #1
 80146c0:	84fa      	strh	r2, [r7, #38]	; 0x26
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d1f1      	bne.n	80146aa <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const app address
  uint8_t const bytes_rem = len & 0x03;
 80146c6:	88fb      	ldrh	r3, [r7, #6]
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	f003 0303 	and.w	r3, r3, #3
 80146ce:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80146d0:	7ffb      	ldrb	r3, [r7, #31]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d00b      	beq.n	80146ee <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80146d6:	2300      	movs	r3, #0
 80146d8:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80146da:	7ffa      	ldrb	r2, [r7, #31]
 80146dc:	f107 0314 	add.w	r3, r7, #20
 80146e0:	68b9      	ldr	r1, [r7, #8]
 80146e2:	4618      	mov	r0, r3
 80146e4:	f004 fc97 	bl	8019016 <memcpy>

    *tx_fifo = tmp32;
 80146e8:	697a      	ldr	r2, [r7, #20]
 80146ea:	6a3b      	ldr	r3, [r7, #32]
 80146ec:	601a      	str	r2, [r3, #0]
  }
}
 80146ee:	bf00      	nop
 80146f0:	3728      	adds	r7, #40	; 0x28
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <_ff_push_n>:
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
}

// send n items to FIFO WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 80146f6:	b580      	push	{r7, lr}
 80146f8:	b08e      	sub	sp, #56	; 0x38
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	60f8      	str	r0, [r7, #12]
 80146fe:	60b9      	str	r1, [r7, #8]
 8014700:	4611      	mov	r1, r2
 8014702:	461a      	mov	r2, r3
 8014704:	460b      	mov	r3, r1
 8014706:	80fb      	strh	r3, [r7, #6]
 8014708:	4613      	mov	r3, r2
 801470a:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	889a      	ldrh	r2, [r3, #4]
 8014710:	88bb      	ldrh	r3, [r7, #4]
 8014712:	1ad3      	subs	r3, r2, r3
 8014714:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin;
 8014716:	88fa      	ldrh	r2, [r7, #6]
 8014718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801471a:	1ad3      	subs	r3, r2, r3
 801471c:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	88db      	ldrh	r3, [r3, #6]
 8014722:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014724:	fb12 f303 	smulbb	r3, r2, r3
 8014728:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	88db      	ldrh	r3, [r3, #6]
 801472e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014730:	fb12 f303 	smulbb	r3, r2, r3
 8014734:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	88ba      	ldrh	r2, [r7, #4]
 801473c:	68f9      	ldr	r1, [r7, #12]
 801473e:	88c9      	ldrh	r1, [r1, #6]
 8014740:	fb01 f202 	mul.w	r2, r1, r2
 8014744:	4413      	add	r3, r2
 8014746:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8014748:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801474c:	2b00      	cmp	r3, #0
 801474e:	d002      	beq.n	8014756 <_ff_push_n+0x60>
 8014750:	2b01      	cmp	r3, #1
 8014752:	d01f      	beq.n	8014794 <_ff_push_n+0x9e>
        // Write data wrapped part
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
      }
      break;
  }
}
 8014754:	e097      	b.n	8014886 <_ff_push_n+0x190>
      if(n <= nLin)
 8014756:	88fa      	ldrh	r2, [r7, #6]
 8014758:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801475a:	429a      	cmp	r2, r3
 801475c:	d80a      	bhi.n	8014774 <_ff_push_n+0x7e>
        memcpy(ff_buf, app_buf, n*f->item_size);
 801475e:	88fb      	ldrh	r3, [r7, #6]
 8014760:	68fa      	ldr	r2, [r7, #12]
 8014762:	88d2      	ldrh	r2, [r2, #6]
 8014764:	fb02 f303 	mul.w	r3, r2, r3
 8014768:	461a      	mov	r2, r3
 801476a:	68b9      	ldr	r1, [r7, #8]
 801476c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801476e:	f004 fc52 	bl	8019016 <memcpy>
      break;
 8014772:	e088      	b.n	8014886 <_ff_push_n+0x190>
        memcpy(ff_buf, app_buf, nLin_bytes);
 8014774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014776:	461a      	mov	r2, r3
 8014778:	68b9      	ldr	r1, [r7, #8]
 801477a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801477c:	f004 fc4b 	bl	8019016 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	6818      	ldr	r0, [r3, #0]
 8014784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014786:	68ba      	ldr	r2, [r7, #8]
 8014788:	4413      	add	r3, r2
 801478a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801478c:	4619      	mov	r1, r3
 801478e:	f004 fc42 	bl	8019016 <memcpy>
      break;
 8014792:	e078      	b.n	8014886 <_ff_push_n+0x190>
      if(n <= nLin)
 8014794:	88fa      	ldrh	r2, [r7, #6]
 8014796:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014798:	429a      	cmp	r2, r3
 801479a:	d80b      	bhi.n	80147b4 <_ff_push_n+0xbe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	88db      	ldrh	r3, [r3, #6]
 80147a0:	88fa      	ldrh	r2, [r7, #6]
 80147a2:	fb12 f303 	smulbb	r3, r2, r3
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	461a      	mov	r2, r3
 80147aa:	68b9      	ldr	r1, [r7, #8]
 80147ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147ae:	f7ff ff3b 	bl	8014628 <_ff_push_const_addr>
      break;
 80147b2:	e067      	b.n	8014884 <_ff_push_n+0x18e>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80147b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147b6:	f023 0303 	bic.w	r3, r3, #3
 80147ba:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80147bc:	8c3b      	ldrh	r3, [r7, #32]
 80147be:	461a      	mov	r2, r3
 80147c0:	68b9      	ldr	r1, [r7, #8]
 80147c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147c4:	f7ff ff30 	bl	8014628 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80147c8:	8c3b      	ldrh	r3, [r7, #32]
 80147ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147cc:	4413      	add	r3, r2
 80147ce:	633b      	str	r3, [r7, #48]	; 0x30
        volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 80147d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147d6:	b2db      	uxtb	r3, r3
 80147d8:	f003 0303 	and.w	r3, r3, #3
 80147dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80147e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d041      	beq.n	801486c <_ff_push_n+0x176>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 80147e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147ec:	b29b      	uxth	r3, r3
 80147ee:	f1c3 0304 	rsb	r3, r3, #4
 80147f2:	b29a      	uxth	r2, r3
 80147f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80147f6:	837b      	strh	r3, [r7, #26]
 80147f8:	4613      	mov	r3, r2
 80147fa:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80147fc:	8b7a      	ldrh	r2, [r7, #26]
 80147fe:	8b3b      	ldrh	r3, [r7, #24]
 8014800:	4293      	cmp	r3, r2
 8014802:	bf28      	it	cs
 8014804:	4613      	movcs	r3, r2
 8014806:	b29b      	uxth	r3, r3
 8014808:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 801480c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014810:	b29b      	uxth	r3, r3
 8014812:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014814:	1ad3      	subs	r3, r2, r3
 8014816:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 801481e:	f107 0314 	add.w	r3, r7, #20
 8014822:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8014824:	e007      	b.n	8014836 <_ff_push_n+0x140>
 8014826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014828:	1c53      	adds	r3, r2, #1
 801482a:	62bb      	str	r3, [r7, #40]	; 0x28
 801482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801482e:	1c59      	adds	r1, r3, #1
 8014830:	6339      	str	r1, [r7, #48]	; 0x30
 8014832:	7812      	ldrb	r2, [r2, #0]
 8014834:	701a      	strb	r2, [r3, #0]
 8014836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801483a:	1e5a      	subs	r2, r3, #1
 801483c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8014840:	2b00      	cmp	r3, #0
 8014842:	d1f0      	bne.n	8014826 <_ff_push_n+0x130>
          ff_buf = f->buffer;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 801484a:	e007      	b.n	801485c <_ff_push_n+0x166>
 801484c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801484e:	1c53      	adds	r3, r2, #1
 8014850:	62bb      	str	r3, [r7, #40]	; 0x28
 8014852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014854:	1c59      	adds	r1, r3, #1
 8014856:	6339      	str	r1, [r7, #48]	; 0x30
 8014858:	7812      	ldrb	r2, [r2, #0]
 801485a:	701a      	strb	r2, [r3, #0]
 801485c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014860:	1e5a      	subs	r2, r3, #1
 8014862:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8014866:	2b00      	cmp	r3, #0
 8014868:	d1f0      	bne.n	801484c <_ff_push_n+0x156>
 801486a:	e002      	b.n	8014872 <_ff_push_n+0x17c>
          ff_buf = f->buffer; // wrap around to beginning
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 8014872:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014874:	2b00      	cmp	r3, #0
 8014876:	d005      	beq.n	8014884 <_ff_push_n+0x18e>
 8014878:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801487a:	461a      	mov	r2, r3
 801487c:	68b9      	ldr	r1, [r7, #8]
 801487e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014880:	f7ff fed2 	bl	8014628 <_ff_push_const_addr>
      break;
 8014884:	bf00      	nop
}
 8014886:	bf00      	nop
 8014888:	3738      	adds	r7, #56	; 0x38
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}

0801488e <_ff_pull_n>:
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
}

// get n items from FIFO WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 801488e:	b580      	push	{r7, lr}
 8014890:	b08e      	sub	sp, #56	; 0x38
 8014892:	af00      	add	r7, sp, #0
 8014894:	60f8      	str	r0, [r7, #12]
 8014896:	60b9      	str	r1, [r7, #8]
 8014898:	4611      	mov	r1, r2
 801489a:	461a      	mov	r2, r3
 801489c:	460b      	mov	r3, r1
 801489e:	80fb      	strh	r3, [r7, #6]
 80148a0:	4613      	mov	r3, r2
 80148a2:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	889a      	ldrh	r2, [r3, #4]
 80148a8:	88bb      	ldrh	r3, [r7, #4]
 80148aa:	1ad3      	subs	r3, r2, r3
 80148ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin; // only used if wrapped
 80148ae:	88fa      	ldrh	r2, [r7, #6]
 80148b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80148b2:	1ad3      	subs	r3, r2, r3
 80148b4:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	88db      	ldrh	r3, [r3, #6]
 80148ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80148bc:	fb12 f303 	smulbb	r3, r2, r3
 80148c0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	88db      	ldrh	r3, [r3, #6]
 80148c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80148c8:	fb12 f303 	smulbb	r3, r2, r3
 80148cc:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	88ba      	ldrh	r2, [r7, #4]
 80148d4:	68f9      	ldr	r1, [r7, #12]
 80148d6:	88c9      	ldrh	r1, [r1, #6]
 80148d8:	fb01 f202 	mul.w	r2, r1, r2
 80148dc:	4413      	add	r3, r2
 80148de:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 80148e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d002      	beq.n	80148ee <_ff_pull_n+0x60>
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d01f      	beq.n	801492c <_ff_pull_n+0x9e>
        // Read data wrapped part
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
      }
    break;

    default: break;
 80148ec:	e099      	b.n	8014a22 <_ff_pull_n+0x194>
      if ( n <= nLin )
 80148ee:	88fa      	ldrh	r2, [r7, #6]
 80148f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d80a      	bhi.n	801490c <_ff_pull_n+0x7e>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80148f6:	88fb      	ldrh	r3, [r7, #6]
 80148f8:	68fa      	ldr	r2, [r7, #12]
 80148fa:	88d2      	ldrh	r2, [r2, #6]
 80148fc:	fb02 f303 	mul.w	r3, r2, r3
 8014900:	461a      	mov	r2, r3
 8014902:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014904:	68b8      	ldr	r0, [r7, #8]
 8014906:	f004 fb86 	bl	8019016 <memcpy>
    break;
 801490a:	e08a      	b.n	8014a22 <_ff_pull_n+0x194>
        memcpy(app_buf, ff_buf, nLin_bytes);
 801490c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801490e:	461a      	mov	r2, r3
 8014910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014912:	68b8      	ldr	r0, [r7, #8]
 8014914:	f004 fb7f 	bl	8019016 <memcpy>
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
 8014918:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801491a:	68ba      	ldr	r2, [r7, #8]
 801491c:	18d0      	adds	r0, r2, r3
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014924:	4619      	mov	r1, r3
 8014926:	f004 fb76 	bl	8019016 <memcpy>
    break;
 801492a:	e07a      	b.n	8014a22 <_ff_pull_n+0x194>
      if ( n <= nLin )
 801492c:	88fa      	ldrh	r2, [r7, #6]
 801492e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014930:	429a      	cmp	r2, r3
 8014932:	d80b      	bhi.n	801494c <_ff_pull_n+0xbe>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	88db      	ldrh	r3, [r3, #6]
 8014938:	88fa      	ldrh	r2, [r7, #6]
 801493a:	fb12 f303 	smulbb	r3, r2, r3
 801493e:	b29b      	uxth	r3, r3
 8014940:	461a      	mov	r2, r3
 8014942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014944:	68b8      	ldr	r0, [r7, #8]
 8014946:	f7ff fea3 	bl	8014690 <_ff_pull_const_addr>
    break;
 801494a:	e069      	b.n	8014a20 <_ff_pull_n+0x192>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 801494c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801494e:	f023 0303 	bic.w	r3, r3, #3
 8014952:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
 8014954:	8c3b      	ldrh	r3, [r7, #32]
 8014956:	461a      	mov	r2, r3
 8014958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801495a:	68b8      	ldr	r0, [r7, #8]
 801495c:	f7ff fe98 	bl	8014690 <_ff_pull_const_addr>
        ff_buf += nLin_4n_bytes;
 8014960:	8c3b      	ldrh	r3, [r7, #32]
 8014962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014964:	4413      	add	r3, r2
 8014966:	633b      	str	r3, [r7, #48]	; 0x30
        volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 801496c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801496e:	b2db      	uxtb	r3, r3
 8014970:	f003 0303 	and.w	r3, r3, #3
 8014974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8014978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801497c:	2b00      	cmp	r3, #0
 801497e:	d043      	beq.n	8014a08 <_ff_pull_n+0x17a>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 8014980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014984:	b29b      	uxth	r3, r3
 8014986:	f1c3 0304 	rsb	r3, r3, #4
 801498a:	b29a      	uxth	r2, r3
 801498c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801498e:	837b      	strh	r3, [r7, #26]
 8014990:	4613      	mov	r3, r2
 8014992:	833b      	strh	r3, [r7, #24]
 8014994:	8b7a      	ldrh	r2, [r7, #26]
 8014996:	8b3b      	ldrh	r3, [r7, #24]
 8014998:	4293      	cmp	r3, r2
 801499a:	bf28      	it	cs
 801499c:	4613      	movcs	r3, r2
 801499e:	b29b      	uxth	r3, r3
 80149a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 80149a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80149ac:	1ad3      	subs	r3, r2, r3
 80149ae:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 80149b0:	2300      	movs	r3, #0
 80149b2:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80149b4:	f107 0314 	add.w	r3, r7, #20
 80149b8:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80149ba:	e007      	b.n	80149cc <_ff_pull_n+0x13e>
 80149bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149be:	1c53      	adds	r3, r2, #1
 80149c0:	633b      	str	r3, [r7, #48]	; 0x30
 80149c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c4:	1c59      	adds	r1, r3, #1
 80149c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80149c8:	7812      	ldrb	r2, [r2, #0]
 80149ca:	701a      	strb	r2, [r3, #0]
 80149cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149d0:	1e5a      	subs	r2, r3, #1
 80149d2:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d1f0      	bne.n	80149bc <_ff_pull_n+0x12e>
          ff_buf = f->buffer;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80149e0:	e007      	b.n	80149f2 <_ff_pull_n+0x164>
 80149e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149e4:	1c53      	adds	r3, r2, #1
 80149e6:	633b      	str	r3, [r7, #48]	; 0x30
 80149e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ea:	1c59      	adds	r1, r3, #1
 80149ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80149ee:	7812      	ldrb	r2, [r2, #0]
 80149f0:	701a      	strb	r2, [r3, #0]
 80149f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80149f6:	1e5a      	subs	r2, r3, #1
 80149f8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d1f0      	bne.n	80149e2 <_ff_pull_n+0x154>
          *tx_fifo = tmp32;
 8014a00:	697a      	ldr	r2, [r7, #20]
 8014a02:	69fb      	ldr	r3, [r7, #28]
 8014a04:	601a      	str	r2, [r3, #0]
 8014a06:	e002      	b.n	8014a0e <_ff_pull_n+0x180>
          ff_buf = f->buffer; // wrap around to beginning
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
 8014a0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d005      	beq.n	8014a20 <_ff_pull_n+0x192>
 8014a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a16:	461a      	mov	r2, r3
 8014a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014a1a:	68b8      	ldr	r0, [r7, #8]
 8014a1c:	f7ff fe38 	bl	8014690 <_ff_pull_const_addr>
    break;
 8014a20:	bf00      	nop
  }
}
 8014a22:	bf00      	nop
 8014a24:	3738      	adds	r7, #56	; 0x38
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}

08014a2a <advance_pointer>:

// Advance an absolute pointer
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8014a2a:	b480      	push	{r7}
 8014a2c:	b083      	sub	sp, #12
 8014a2e:	af00      	add	r7, sp, #0
 8014a30:	6078      	str	r0, [r7, #4]
 8014a32:	460b      	mov	r3, r1
 8014a34:	807b      	strh	r3, [r7, #2]
 8014a36:	4613      	mov	r3, r2
 8014a38:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8014a3a:	887a      	ldrh	r2, [r7, #2]
 8014a3c:	883b      	ldrh	r3, [r7, #0]
 8014a3e:	4413      	add	r3, r2
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	887a      	ldrh	r2, [r7, #2]
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d807      	bhi.n	8014a58 <advance_pointer+0x2e>
 8014a48:	887a      	ldrh	r2, [r7, #2]
 8014a4a:	883b      	ldrh	r3, [r7, #0]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	b29a      	uxth	r2, r3
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	899b      	ldrh	r3, [r3, #12]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d908      	bls.n	8014a6a <advance_pointer+0x40>
  {
    p = (p + offset) + f->non_used_index_space;
 8014a58:	887a      	ldrh	r2, [r7, #2]
 8014a5a:	883b      	ldrh	r3, [r7, #0]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	b29a      	uxth	r2, r3
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	895b      	ldrh	r3, [r3, #10]
 8014a64:	4413      	add	r3, r2
 8014a66:	807b      	strh	r3, [r7, #2]
 8014a68:	e003      	b.n	8014a72 <advance_pointer+0x48>
  }
  else
  {
    p += offset;
 8014a6a:	887a      	ldrh	r2, [r7, #2]
 8014a6c:	883b      	ldrh	r3, [r7, #0]
 8014a6e:	4413      	add	r3, r2
 8014a70:	807b      	strh	r3, [r7, #2]
  }
  return p;
 8014a72:	887b      	ldrh	r3, [r7, #2]
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	370c      	adds	r7, #12
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr

08014a80 <backward_pointer>:

// Backward an absolute pointer
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8014a80:	b480      	push	{r7}
 8014a82:	b083      	sub	sp, #12
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
 8014a88:	460b      	mov	r3, r1
 8014a8a:	807b      	strh	r3, [r7, #2]
 8014a8c:	4613      	mov	r3, r2
 8014a8e:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8014a90:	883a      	ldrh	r2, [r7, #0]
 8014a92:	887b      	ldrh	r3, [r7, #2]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d807      	bhi.n	8014aa8 <backward_pointer+0x28>
 8014a98:	887a      	ldrh	r2, [r7, #2]
 8014a9a:	883b      	ldrh	r3, [r7, #0]
 8014a9c:	1ad3      	subs	r3, r2, r3
 8014a9e:	b29a      	uxth	r2, r3
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	899b      	ldrh	r3, [r3, #12]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d908      	bls.n	8014aba <backward_pointer+0x3a>
  {
    p = (p - offset) - f->non_used_index_space;
 8014aa8:	887a      	ldrh	r2, [r7, #2]
 8014aaa:	883b      	ldrh	r3, [r7, #0]
 8014aac:	1ad3      	subs	r3, r2, r3
 8014aae:	b29a      	uxth	r2, r3
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	895b      	ldrh	r3, [r3, #10]
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	807b      	strh	r3, [r7, #2]
 8014ab8:	e003      	b.n	8014ac2 <backward_pointer+0x42>
  }
  else
  {
    p -= offset;
 8014aba:	887a      	ldrh	r2, [r7, #2]
 8014abc:	883b      	ldrh	r3, [r7, #0]
 8014abe:	1ad3      	subs	r3, r2, r3
 8014ac0:	807b      	strh	r3, [r7, #2]
  }
  return p;
 8014ac2:	887b      	ldrh	r3, [r7, #2]
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	370c      	adds	r7, #12
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ace:	4770      	bx	lr

08014ad0 <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	460b      	mov	r3, r1
 8014ada:	807b      	strh	r3, [r7, #2]
  return _ff_mod(p, f->depth);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	889a      	ldrh	r2, [r3, #4]
 8014ae0:	887b      	ldrh	r3, [r7, #2]
 8014ae2:	4611      	mov	r1, r2
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7ff fd87 	bl	80145f8 <_ff_mod>
 8014aea:	4603      	mov	r3, r0
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	3708      	adds	r7, #8
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}

08014af4 <_tu_fifo_count>:

// Works on local copies of w and r - return only the difference and as such can be used to determine an overflow
static inline uint16_t _tu_fifo_count(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8014af4:	b480      	push	{r7}
 8014af6:	b085      	sub	sp, #20
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	460b      	mov	r3, r1
 8014afe:	807b      	strh	r3, [r7, #2]
 8014b00:	4613      	mov	r3, r2
 8014b02:	803b      	strh	r3, [r7, #0]
  uint16_t cnt = wAbs-rAbs;
 8014b04:	887a      	ldrh	r2, [r7, #2]
 8014b06:	883b      	ldrh	r3, [r7, #0]
 8014b08:	1ad3      	subs	r3, r2, r3
 8014b0a:	81fb      	strh	r3, [r7, #14]

  // In case we have non-power of two depth we need a further modification
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8014b0c:	883a      	ldrh	r2, [r7, #0]
 8014b0e:	887b      	ldrh	r3, [r7, #2]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d904      	bls.n	8014b1e <_tu_fifo_count+0x2a>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	895b      	ldrh	r3, [r3, #10]
 8014b18:	89fa      	ldrh	r2, [r7, #14]
 8014b1a:	1ad3      	subs	r3, r2, r3
 8014b1c:	81fb      	strh	r3, [r7, #14]

  return cnt;
 8014b1e:	89fb      	ldrh	r3, [r7, #14]
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	3714      	adds	r7, #20
 8014b24:	46bd      	mov	sp, r7
 8014b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2a:	4770      	bx	lr

08014b2c <_tu_fifo_empty>:

// Works on local copies of w and r
static inline bool _tu_fifo_empty(uint16_t wAbs, uint16_t rAbs)
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	b083      	sub	sp, #12
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	4603      	mov	r3, r0
 8014b34:	460a      	mov	r2, r1
 8014b36:	80fb      	strh	r3, [r7, #6]
 8014b38:	4613      	mov	r3, r2
 8014b3a:	80bb      	strh	r3, [r7, #4]
  return wAbs == rAbs;
 8014b3c:	88fa      	ldrh	r2, [r7, #6]
 8014b3e:	88bb      	ldrh	r3, [r7, #4]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	bf0c      	ite	eq
 8014b44:	2301      	moveq	r3, #1
 8014b46:	2300      	movne	r3, #0
 8014b48:	b2db      	uxtb	r3, r3
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	370c      	adds	r7, #12
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b54:	4770      	bx	lr

08014b56 <_tu_fifo_correct_read_pointer>:
}

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
 8014b56:	b580      	push	{r7, lr}
 8014b58:	b082      	sub	sp, #8
 8014b5a:	af00      	add	r7, sp, #0
 8014b5c:	6078      	str	r0, [r7, #4]
 8014b5e:	460b      	mov	r3, r1
 8014b60:	807b      	strh	r3, [r7, #2]
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	889a      	ldrh	r2, [r3, #4]
 8014b66:	887b      	ldrh	r3, [r7, #2]
 8014b68:	4619      	mov	r1, r3
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f7ff ff88 	bl	8014a80 <backward_pointer>
 8014b70:	4603      	mov	r3, r0
 8014b72:	461a      	mov	r2, r3
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	821a      	strh	r2, [r3, #16]
}
 8014b78:	bf00      	nop
 8014b7a:	3708      	adds	r7, #8
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <_tu_fifo_peek_n>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b088      	sub	sp, #32
 8014b84:	af02      	add	r7, sp, #8
 8014b86:	60f8      	str	r0, [r7, #12]
 8014b88:	60b9      	str	r1, [r7, #8]
 8014b8a:	4611      	mov	r1, r2
 8014b8c:	461a      	mov	r2, r3
 8014b8e:	460b      	mov	r3, r1
 8014b90:	80fb      	strh	r3, [r7, #6]
 8014b92:	4613      	mov	r3, r2
 8014b94:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8014b96:	8c3a      	ldrh	r2, [r7, #32]
 8014b98:	88bb      	ldrh	r3, [r7, #4]
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	68f8      	ldr	r0, [r7, #12]
 8014b9e:	f7ff ffa9 	bl	8014af4 <_tu_fifo_count>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	889b      	ldrh	r3, [r3, #4]
 8014baa:	8afa      	ldrh	r2, [r7, #22]
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d90a      	bls.n	8014bc6 <_tu_fifo_peek_n+0x46>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8014bb0:	88bb      	ldrh	r3, [r7, #4]
 8014bb2:	4619      	mov	r1, r3
 8014bb4:	68f8      	ldr	r0, [r7, #12]
 8014bb6:	f7ff ffce 	bl	8014b56 <_tu_fifo_correct_read_pointer>
    rAbs = f->rd_idx;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	8a1b      	ldrh	r3, [r3, #16]
 8014bbe:	843b      	strh	r3, [r7, #32]
    cnt = f->depth;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	889b      	ldrh	r3, [r3, #4]
 8014bc4:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
 8014bc6:	8afb      	ldrh	r3, [r7, #22]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d101      	bne.n	8014bd0 <_tu_fifo_peek_n+0x50>
 8014bcc:	2300      	movs	r3, #0
 8014bce:	e017      	b.n	8014c00 <_tu_fifo_peek_n+0x80>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
 8014bd0:	8afa      	ldrh	r2, [r7, #22]
 8014bd2:	88fb      	ldrh	r3, [r7, #6]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d201      	bcs.n	8014bdc <_tu_fifo_peek_n+0x5c>
 8014bd8:	8afb      	ldrh	r3, [r7, #22]
 8014bda:	80fb      	strh	r3, [r7, #6]

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8014bdc:	8c3b      	ldrh	r3, [r7, #32]
 8014bde:	4619      	mov	r1, r3
 8014be0:	68f8      	ldr	r0, [r7, #12]
 8014be2:	f7ff ff75 	bl	8014ad0 <get_relative_pointer>
 8014be6:	4603      	mov	r3, r0
 8014be8:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
 8014bea:	8ab9      	ldrh	r1, [r7, #20]
 8014bec:	88fa      	ldrh	r2, [r7, #6]
 8014bee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014bf2:	9300      	str	r3, [sp, #0]
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	68b9      	ldr	r1, [r7, #8]
 8014bf8:	68f8      	ldr	r0, [r7, #12]
 8014bfa:	f7ff fe48 	bl	801488e <_ff_pull_n>

  return n;
 8014bfe:	88fb      	ldrh	r3, [r7, #6]
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	3718      	adds	r7, #24
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <_tu_fifo_remaining>:

// Works on local copies of w and r
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8014c08:	b590      	push	{r4, r7, lr}
 8014c0a:	b083      	sub	sp, #12
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	460b      	mov	r3, r1
 8014c12:	807b      	strh	r3, [r7, #2]
 8014c14:	4613      	mov	r3, r2
 8014c16:	803b      	strh	r3, [r7, #0]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	889c      	ldrh	r4, [r3, #4]
 8014c1c:	883a      	ldrh	r2, [r7, #0]
 8014c1e:	887b      	ldrh	r3, [r7, #2]
 8014c20:	4619      	mov	r1, r3
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f7ff ff66 	bl	8014af4 <_tu_fifo_count>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	1ae3      	subs	r3, r4, r3
 8014c2c:	b29b      	uxth	r3, r3
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	370c      	adds	r7, #12
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd90      	pop	{r4, r7, pc}

08014c36 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8014c36:	b580      	push	{r7, lr}
 8014c38:	b08a      	sub	sp, #40	; 0x28
 8014c3a:	af02      	add	r7, sp, #8
 8014c3c:	60f8      	str	r0, [r7, #12]
 8014c3e:	60b9      	str	r1, [r7, #8]
 8014c40:	4611      	mov	r1, r2
 8014c42:	461a      	mov	r2, r3
 8014c44:	460b      	mov	r3, r1
 8014c46:	80fb      	strh	r3, [r7, #6]
 8014c48:	4613      	mov	r3, r2
 8014c4a:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8014c4c:	88fb      	ldrh	r3, [r7, #6]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d101      	bne.n	8014c56 <_tu_fifo_write_n+0x20>
 8014c52:	2300      	movs	r3, #0
 8014c54:	e05d      	b.n	8014d12 <_tu_fifo_write_n+0xdc>

  _ff_lock(f->mutex_wr);
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	695b      	ldr	r3, [r3, #20]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7ff fc64 	bl	8014528 <_ff_lock>

  uint16_t w = f->wr_idx, r = f->rd_idx;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	89db      	ldrh	r3, [r3, #14]
 8014c64:	83fb      	strh	r3, [r7, #30]
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	8a1b      	ldrh	r3, [r3, #16]
 8014c6a:	82fb      	strh	r3, [r7, #22]
  uint8_t const* buf8 = (uint8_t const*) data;
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	61bb      	str	r3, [r7, #24]

  if (!f->overwritable)
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	7a1b      	ldrb	r3, [r3, #8]
 8014c74:	f083 0301 	eor.w	r3, r3, #1
 8014c78:	b2db      	uxtb	r3, r3
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d013      	beq.n	8014ca6 <_tu_fifo_write_n+0x70>
  {
    // Not overwritable limit up to full
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
 8014c7e:	8afa      	ldrh	r2, [r7, #22]
 8014c80:	8bfb      	ldrh	r3, [r7, #30]
 8014c82:	4619      	mov	r1, r3
 8014c84:	68f8      	ldr	r0, [r7, #12]
 8014c86:	f7ff ffbf 	bl	8014c08 <_tu_fifo_remaining>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	461a      	mov	r2, r3
 8014c8e:	88fb      	ldrh	r3, [r7, #6]
 8014c90:	827b      	strh	r3, [r7, #18]
 8014c92:	4613      	mov	r3, r2
 8014c94:	823b      	strh	r3, [r7, #16]
 8014c96:	8a7a      	ldrh	r2, [r7, #18]
 8014c98:	8a3b      	ldrh	r3, [r7, #16]
 8014c9a:	4293      	cmp	r3, r2
 8014c9c:	bf28      	it	cs
 8014c9e:	4613      	movcs	r3, r2
 8014ca0:	b29b      	uxth	r3, r3
 8014ca2:	80fb      	strh	r3, [r7, #6]
 8014ca4:	e015      	b.n	8014cd2 <_tu_fifo_write_n+0x9c>
  }
  else if (n >= f->depth)
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	889b      	ldrh	r3, [r3, #4]
 8014caa:	88fa      	ldrh	r2, [r7, #6]
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d310      	bcc.n	8014cd2 <_tu_fifo_write_n+0x9c>
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 8014cb0:	88fb      	ldrh	r3, [r7, #6]
 8014cb2:	68fa      	ldr	r2, [r7, #12]
 8014cb4:	8892      	ldrh	r2, [r2, #4]
 8014cb6:	1a9b      	subs	r3, r3, r2
 8014cb8:	68fa      	ldr	r2, [r7, #12]
 8014cba:	88d2      	ldrh	r2, [r2, #6]
 8014cbc:	fb02 f303 	mul.w	r3, r2, r3
 8014cc0:	461a      	mov	r2, r3
 8014cc2:	69bb      	ldr	r3, [r7, #24]
 8014cc4:	4413      	add	r3, r2
 8014cc6:	61bb      	str	r3, [r7, #24]
    n = f->depth;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	889b      	ldrh	r3, [r3, #4]
 8014ccc:	80fb      	strh	r3, [r7, #6]

    // We start writing at the read pointer's position since we fill the complete
    // buffer and we do not want to modify the read pointer within a write function!
    // This would end up in a race condition with read functions!
    w = r;
 8014cce:	8afb      	ldrh	r3, [r7, #22]
 8014cd0:	83fb      	strh	r3, [r7, #30]
  }

  uint16_t wRel = get_relative_pointer(f, w);
 8014cd2:	8bfb      	ldrh	r3, [r7, #30]
 8014cd4:	4619      	mov	r1, r3
 8014cd6:	68f8      	ldr	r0, [r7, #12]
 8014cd8:	f7ff fefa 	bl	8014ad0 <get_relative_pointer>
 8014cdc:	4603      	mov	r3, r0
 8014cde:	82bb      	strh	r3, [r7, #20]

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);
 8014ce0:	8ab9      	ldrh	r1, [r7, #20]
 8014ce2:	88fa      	ldrh	r2, [r7, #6]
 8014ce4:	797b      	ldrb	r3, [r7, #5]
 8014ce6:	9300      	str	r3, [sp, #0]
 8014ce8:	460b      	mov	r3, r1
 8014cea:	69b9      	ldr	r1, [r7, #24]
 8014cec:	68f8      	ldr	r0, [r7, #12]
 8014cee:	f7ff fd02 	bl	80146f6 <_ff_push_n>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 8014cf2:	88fa      	ldrh	r2, [r7, #6]
 8014cf4:	8bfb      	ldrh	r3, [r7, #30]
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	68f8      	ldr	r0, [r7, #12]
 8014cfa:	f7ff fe96 	bl	8014a2a <advance_pointer>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	461a      	mov	r2, r3
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	695b      	ldr	r3, [r3, #20]
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7ff fc1c 	bl	8014548 <_ff_unlock>

  return n;
 8014d10:	88fb      	ldrh	r3, [r7, #6]
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	3720      	adds	r7, #32
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}

08014d1a <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8014d1a:	b580      	push	{r7, lr}
 8014d1c:	b086      	sub	sp, #24
 8014d1e:	af02      	add	r7, sp, #8
 8014d20:	60f8      	str	r0, [r7, #12]
 8014d22:	60b9      	str	r1, [r7, #8]
 8014d24:	4611      	mov	r1, r2
 8014d26:	461a      	mov	r2, r3
 8014d28:	460b      	mov	r3, r1
 8014d2a:	80fb      	strh	r3, [r7, #6]
 8014d2c:	4613      	mov	r3, r2
 8014d2e:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	699b      	ldr	r3, [r3, #24]
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7ff fbf7 	bl	8014528 <_ff_lock>

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	89db      	ldrh	r3, [r3, #14]
 8014d3e:	b298      	uxth	r0, r3
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	8a1b      	ldrh	r3, [r3, #16]
 8014d44:	b29b      	uxth	r3, r3
 8014d46:	88f9      	ldrh	r1, [r7, #6]
 8014d48:	797a      	ldrb	r2, [r7, #5]
 8014d4a:	9201      	str	r2, [sp, #4]
 8014d4c:	9300      	str	r3, [sp, #0]
 8014d4e:	4603      	mov	r3, r0
 8014d50:	460a      	mov	r2, r1
 8014d52:	68b9      	ldr	r1, [r7, #8]
 8014d54:	68f8      	ldr	r0, [r7, #12]
 8014d56:	f7ff ff13 	bl	8014b80 <_tu_fifo_peek_n>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	8a1b      	ldrh	r3, [r3, #16]
 8014d62:	b29b      	uxth	r3, r3
 8014d64:	88fa      	ldrh	r2, [r7, #6]
 8014d66:	4619      	mov	r1, r3
 8014d68:	68f8      	ldr	r0, [r7, #12]
 8014d6a:	f7ff fe5e 	bl	8014a2a <advance_pointer>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	461a      	mov	r2, r3
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	699b      	ldr	r3, [r3, #24]
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7ff fbe4 	bl	8014548 <_ff_unlock>
  return n;
 8014d80:	88fb      	ldrh	r3, [r7, #6]
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3710      	adds	r7, #16
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}

08014d8a <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8014d8a:	b580      	push	{r7, lr}
 8014d8c:	b084      	sub	sp, #16
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	89db      	ldrh	r3, [r3, #14]
 8014d96:	b299      	uxth	r1, r3
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	8a1b      	ldrh	r3, [r3, #16]
 8014d9c:	b29b      	uxth	r3, r3
 8014d9e:	461a      	mov	r2, r3
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f7ff fea7 	bl	8014af4 <_tu_fifo_count>
 8014da6:	4603      	mov	r3, r0
 8014da8:	461a      	mov	r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	889b      	ldrh	r3, [r3, #4]
 8014dae:	81fa      	strh	r2, [r7, #14]
 8014db0:	81bb      	strh	r3, [r7, #12]
 8014db2:	89fa      	ldrh	r2, [r7, #14]
 8014db4:	89bb      	ldrh	r3, [r7, #12]
 8014db6:	4293      	cmp	r3, r2
 8014db8:	bf28      	it	cs
 8014dba:	4613      	movcs	r3, r2
 8014dbc:	b29b      	uxth	r3, r3
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3710      	adds	r7, #16
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}

08014dc6 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8014dc6:	b580      	push	{r7, lr}
 8014dc8:	b082      	sub	sp, #8
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	6078      	str	r0, [r7, #4]
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	89db      	ldrh	r3, [r3, #14]
 8014dd2:	b29a      	uxth	r2, r3
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	8a1b      	ldrh	r3, [r3, #16]
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	4619      	mov	r1, r3
 8014ddc:	4610      	mov	r0, r2
 8014dde:	f7ff fea5 	bl	8014b2c <_tu_fifo_empty>
 8014de2:	4603      	mov	r3, r0
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3708      	adds	r7, #8
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}

08014dec <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	89db      	ldrh	r3, [r3, #14]
 8014df8:	b299      	uxth	r1, r3
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	8a1b      	ldrh	r3, [r3, #16]
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	461a      	mov	r2, r3
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f7ff ff00 	bl	8014c08 <_tu_fifo_remaining>
 8014e08:	4603      	mov	r3, r0
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	3708      	adds	r7, #8
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}

08014e12 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8014e12:	b580      	push	{r7, lr}
 8014e14:	b084      	sub	sp, #16
 8014e16:	af00      	add	r7, sp, #0
 8014e18:	60f8      	str	r0, [r7, #12]
 8014e1a:	60b9      	str	r1, [r7, #8]
 8014e1c:	4613      	mov	r3, r2
 8014e1e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8014e20:	88fa      	ldrh	r2, [r7, #6]
 8014e22:	2300      	movs	r3, #0
 8014e24:	68b9      	ldr	r1, [r7, #8]
 8014e26:	68f8      	ldr	r0, [r7, #12]
 8014e28:	f7ff ff77 	bl	8014d1a <_tu_fifo_read_n>
 8014e2c:	4603      	mov	r3, r0
}
 8014e2e:	4618      	mov	r0, r3
 8014e30:	3710      	adds	r7, #16
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}

08014e36 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8014e36:	b580      	push	{r7, lr}
 8014e38:	b084      	sub	sp, #16
 8014e3a:	af00      	add	r7, sp, #0
 8014e3c:	60f8      	str	r0, [r7, #12]
 8014e3e:	60b9      	str	r1, [r7, #8]
 8014e40:	4613      	mov	r3, r2
 8014e42:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8014e44:	88fa      	ldrh	r2, [r7, #6]
 8014e46:	2301      	movs	r3, #1
 8014e48:	68b9      	ldr	r1, [r7, #8]
 8014e4a:	68f8      	ldr	r0, [r7, #12]
 8014e4c:	f7ff ff65 	bl	8014d1a <_tu_fifo_read_n>
 8014e50:	4603      	mov	r3, r0
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3710      	adds	r7, #16
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}

08014e5a <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8014e5a:	b580      	push	{r7, lr}
 8014e5c:	b084      	sub	sp, #16
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	60f8      	str	r0, [r7, #12]
 8014e62:	60b9      	str	r1, [r7, #8]
 8014e64:	4613      	mov	r3, r2
 8014e66:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8014e68:	88fa      	ldrh	r2, [r7, #6]
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	68b9      	ldr	r1, [r7, #8]
 8014e6e:	68f8      	ldr	r0, [r7, #12]
 8014e70:	f7ff fee1 	bl	8014c36 <_tu_fifo_write_n>
 8014e74:	4603      	mov	r3, r0
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3710      	adds	r7, #16
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}

08014e7e <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8014e7e:	b580      	push	{r7, lr}
 8014e80:	b084      	sub	sp, #16
 8014e82:	af00      	add	r7, sp, #0
 8014e84:	60f8      	str	r0, [r7, #12]
 8014e86:	60b9      	str	r1, [r7, #8]
 8014e88:	4613      	mov	r3, r2
 8014e8a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8014e8c:	88fa      	ldrh	r2, [r7, #6]
 8014e8e:	2301      	movs	r3, #1
 8014e90:	68b9      	ldr	r1, [r7, #8]
 8014e92:	68f8      	ldr	r0, [r7, #12]
 8014e94:	f7ff fecf 	bl	8014c36 <_tu_fifo_write_n>
 8014e98:	4603      	mov	r3, r0
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3710      	adds	r7, #16
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}

08014ea2 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8014ea2:	b580      	push	{r7, lr}
 8014ea4:	b082      	sub	sp, #8
 8014ea6:	af00      	add	r7, sp, #0
 8014ea8:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	695b      	ldr	r3, [r3, #20]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7ff fb3a 	bl	8014528 <_ff_lock>
  _ff_lock(f->mutex_rd);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	699b      	ldr	r3, [r3, #24]
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7ff fb35 	bl	8014528 <_ff_lock>

  f->rd_idx = f->wr_idx = 0;
 8014ebe:	2100      	movs	r1, #0
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	460a      	mov	r2, r1
 8014ec4:	81da      	strh	r2, [r3, #14]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	460a      	mov	r2, r1
 8014eca:	821a      	strh	r2, [r3, #16]
  f->max_pointer_idx = 2*f->depth-1;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	889b      	ldrh	r3, [r3, #4]
 8014ed0:	005b      	lsls	r3, r3, #1
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	3b01      	subs	r3, #1
 8014ed6:	b29a      	uxth	r2, r3
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	899b      	ldrh	r3, [r3, #12]
 8014ee0:	43db      	mvns	r3, r3
 8014ee2:	b29a      	uxth	r2, r3
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_wr);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	695b      	ldr	r3, [r3, #20]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7ff fb2b 	bl	8014548 <_ff_unlock>
  _ff_unlock(f->mutex_rd);
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	699b      	ldr	r3, [r3, #24]
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7ff fb26 	bl	8014548 <_ff_unlock>
  return true;
 8014efc:	2301      	movs	r3, #1
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3708      	adds	r7, #8
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}

08014f06 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8014f06:	b580      	push	{r7, lr}
 8014f08:	b082      	sub	sp, #8
 8014f0a:	af00      	add	r7, sp, #0
 8014f0c:	6078      	str	r0, [r7, #4]
 8014f0e:	460b      	mov	r3, r1
 8014f10:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	695b      	ldr	r3, [r3, #20]
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7ff fb06 	bl	8014528 <_ff_lock>
  _ff_lock(f->mutex_rd);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	699b      	ldr	r3, [r3, #24]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7ff fb01 	bl	8014528 <_ff_lock>

  f->overwritable = overwritable;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	78fa      	ldrb	r2, [r7, #3]
 8014f2a:	721a      	strb	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	695b      	ldr	r3, [r3, #20]
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7ff fb09 	bl	8014548 <_ff_unlock>
  _ff_unlock(f->mutex_rd);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	699b      	ldr	r3, [r3, #24]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7ff fb04 	bl	8014548 <_ff_unlock>

  return true;
 8014f40:	2301      	movs	r3, #1
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3708      	adds	r7, #8
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}

08014f4a <tu_edpt_dir>:
{
 8014f4a:	b480      	push	{r7}
 8014f4c:	b083      	sub	sp, #12
 8014f4e:	af00      	add	r7, sp, #0
 8014f50:	4603      	mov	r3, r0
 8014f52:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8014f54:	79fb      	ldrb	r3, [r7, #7]
 8014f56:	09db      	lsrs	r3, r3, #7
 8014f58:	b2db      	uxtb	r3, r3
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	370c      	adds	r7, #12
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f64:	4770      	bx	lr

08014f66 <tu_edpt_number>:
{
 8014f66:	b480      	push	{r7}
 8014f68:	b083      	sub	sp, #12
 8014f6a:	af00      	add	r7, sp, #0
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	71fb      	strb	r3, [r7, #7]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8014f70:	79fb      	ldrb	r3, [r7, #7]
 8014f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f76:	b2db      	uxtb	r3, r3
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	370c      	adds	r7, #12
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f82:	4770      	bx	lr

08014f84 <tu_desc_next>:
{
 8014f84:	b480      	push	{r7}
 8014f86:	b085      	sub	sp, #20
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	461a      	mov	r2, r3
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	4413      	add	r3, r2
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3714      	adds	r7, #20
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa4:	4770      	bx	lr

08014fa6 <tu_desc_type>:
{
 8014fa6:	b480      	push	{r7}
 8014fa8:	b083      	sub	sp, #12
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	781b      	ldrb	r3, [r3, #0]
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	370c      	adds	r7, #12
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fbe:	4770      	bx	lr

08014fc0 <tu_desc_len>:
{
 8014fc0:	b480      	push	{r7}
 8014fc2:	b083      	sub	sp, #12
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	781b      	ldrb	r3, [r3, #0]
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	370c      	adds	r7, #12
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr

08014fd8 <tu_print_var>:
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b084      	sub	sp, #16
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	6039      	str	r1, [r7, #0]
  for(uint32_t i=0; i<bufsize; i++) tu_printf("%02X ", buf[i]);
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	60fb      	str	r3, [r7, #12]
 8014fe6:	e00a      	b.n	8014ffe <tu_print_var+0x26>
 8014fe8:	687a      	ldr	r2, [r7, #4]
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	4413      	add	r3, r2
 8014fee:	781b      	ldrb	r3, [r3, #0]
 8014ff0:	4619      	mov	r1, r3
 8014ff2:	4807      	ldr	r0, [pc, #28]	; (8015010 <tu_print_var+0x38>)
 8014ff4:	f004 f8d4 	bl	80191a0 <iprintf>
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	60fb      	str	r3, [r7, #12]
 8014ffe:	68fa      	ldr	r2, [r7, #12]
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	429a      	cmp	r2, r3
 8015004:	d3f0      	bcc.n	8014fe8 <tu_print_var+0x10>
}
 8015006:	bf00      	nop
 8015008:	bf00      	nop
 801500a:	3710      	adds	r7, #16
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	0801b608 	.word	0x0801b608

08015014 <osal_semaphore_wait>:
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
 801501c:	6039      	str	r1, [r7, #0]
  uint32_t const ticks = (msec == OSAL_TIMEOUT_WAIT_FOREVER) ? portMAX_DELAY : pdMS_TO_TICKS(msec);
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015024:	d009      	beq.n	801503a <osal_semaphore_wait+0x26>
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801502c:	fb02 f303 	mul.w	r3, r2, r3
 8015030:	4a0a      	ldr	r2, [pc, #40]	; (801505c <osal_semaphore_wait+0x48>)
 8015032:	fba2 2303 	umull	r2, r3, r2, r3
 8015036:	099b      	lsrs	r3, r3, #6
 8015038:	e001      	b.n	801503e <osal_semaphore_wait+0x2a>
 801503a:	f04f 33ff 	mov.w	r3, #4294967295
 801503e:	60fb      	str	r3, [r7, #12]
  return xSemaphoreTake(sem_hdl, ticks);
 8015040:	68f9      	ldr	r1, [r7, #12]
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f7f8 fa0c 	bl	800d460 <xQueueSemaphoreTake>
 8015048:	4603      	mov	r3, r0
 801504a:	2b00      	cmp	r3, #0
 801504c:	bf14      	ite	ne
 801504e:	2301      	movne	r3, #1
 8015050:	2300      	moveq	r3, #0
 8015052:	b2db      	uxtb	r3, r3
}
 8015054:	4618      	mov	r0, r3
 8015056:	3710      	adds	r7, #16
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	10624dd3 	.word	0x10624dd3

08015060 <osal_mutex_create>:
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
  return xSemaphoreCreateMutexStatic(mdef);
 8015068:	6879      	ldr	r1, [r7, #4]
 801506a:	2001      	movs	r0, #1
 801506c:	f7f7 fed7 	bl	800ce1e <xQueueCreateMutexStatic>
 8015070:	4603      	mov	r3, r0
}
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}

0801507a <osal_mutex_lock>:
{
 801507a:	b580      	push	{r7, lr}
 801507c:	b082      	sub	sp, #8
 801507e:	af00      	add	r7, sp, #0
 8015080:	6078      	str	r0, [r7, #4]
 8015082:	6039      	str	r1, [r7, #0]
  return osal_semaphore_wait(mutex_hdl, msec);
 8015084:	6839      	ldr	r1, [r7, #0]
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f7ff ffc4 	bl	8015014 <osal_semaphore_wait>
 801508c:	4603      	mov	r3, r0
}
 801508e:	4618      	mov	r0, r3
 8015090:	3708      	adds	r7, #8
 8015092:	46bd      	mov	sp, r7
 8015094:	bd80      	pop	{r7, pc}

08015096 <osal_mutex_unlock>:
{
 8015096:	b580      	push	{r7, lr}
 8015098:	b082      	sub	sp, #8
 801509a:	af00      	add	r7, sp, #0
 801509c:	6078      	str	r0, [r7, #4]
  return xSemaphoreGive(mutex_hdl);
 801509e:	2300      	movs	r3, #0
 80150a0:	2200      	movs	r2, #0
 80150a2:	2100      	movs	r1, #0
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	f7f7 fed5 	bl	800ce54 <xQueueGenericSend>
 80150aa:	4603      	mov	r3, r0
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	bf14      	ite	ne
 80150b0:	2301      	movne	r3, #1
 80150b2:	2300      	moveq	r3, #0
 80150b4:	b2db      	uxtb	r3, r3
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3708      	adds	r7, #8
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}

080150be <osal_queue_create>:
}osal_queue_def_t;

typedef QueueHandle_t osal_queue_t;

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
 80150be:	b590      	push	{r4, r7, lr}
 80150c0:	b085      	sub	sp, #20
 80150c2:	af02      	add	r7, sp, #8
 80150c4:	6078      	str	r0, [r7, #4]
  return xQueueCreateStatic(qdef->depth, qdef->item_sz, (uint8_t*) qdef->buf, &qdef->sq);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	881b      	ldrh	r3, [r3, #0]
 80150ca:	4618      	mov	r0, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	885b      	ldrh	r3, [r3, #2]
 80150d0:	461c      	mov	r4, r3
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	685a      	ldr	r2, [r3, #4]
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	3308      	adds	r3, #8
 80150da:	2100      	movs	r1, #0
 80150dc:	9100      	str	r1, [sp, #0]
 80150de:	4621      	mov	r1, r4
 80150e0:	f7f7 fd9a 	bl	800cc18 <xQueueGenericCreateStatic>
 80150e4:	4603      	mov	r3, r0
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	370c      	adds	r7, #12
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd90      	pop	{r4, r7, pc}

080150ee <osal_queue_receive>:

static inline bool osal_queue_receive(osal_queue_t qhdl, void* data)
{
 80150ee:	b580      	push	{r7, lr}
 80150f0:	b082      	sub	sp, #8
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	6078      	str	r0, [r7, #4]
 80150f6:	6039      	str	r1, [r7, #0]
  return xQueueReceive(qhdl, data, portMAX_DELAY);
 80150f8:	f04f 32ff 	mov.w	r2, #4294967295
 80150fc:	6839      	ldr	r1, [r7, #0]
 80150fe:	6878      	ldr	r0, [r7, #4]
 8015100:	f7f8 f8ce 	bl	800d2a0 <xQueueReceive>
 8015104:	4603      	mov	r3, r0
 8015106:	2b00      	cmp	r3, #0
 8015108:	bf14      	ite	ne
 801510a:	2301      	movne	r3, #1
 801510c:	2300      	moveq	r3, #0
 801510e:	b2db      	uxtb	r3, r3
}
 8015110:	4618      	mov	r0, r3
 8015112:	3708      	adds	r7, #8
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <osal_queue_send>:

static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b086      	sub	sp, #24
 801511c:	af00      	add	r7, sp, #0
 801511e:	60f8      	str	r0, [r7, #12]
 8015120:	60b9      	str	r1, [r7, #8]
 8015122:	4613      	mov	r3, r2
 8015124:	71fb      	strb	r3, [r7, #7]
  if ( !in_isr )
 8015126:	79fb      	ldrb	r3, [r7, #7]
 8015128:	f083 0301 	eor.w	r3, r3, #1
 801512c:	b2db      	uxtb	r3, r3
 801512e:	2b00      	cmp	r3, #0
 8015130:	d00d      	beq.n	801514e <osal_queue_send+0x36>
  {
    return xQueueSendToBack(qhdl, data, OSAL_TIMEOUT_WAIT_FOREVER) != 0;
 8015132:	2300      	movs	r3, #0
 8015134:	f04f 32ff 	mov.w	r2, #4294967295
 8015138:	68b9      	ldr	r1, [r7, #8]
 801513a:	68f8      	ldr	r0, [r7, #12]
 801513c:	f7f7 fe8a 	bl	800ce54 <xQueueGenericSend>
 8015140:	4603      	mov	r3, r0
 8015142:	2b00      	cmp	r3, #0
 8015144:	bf14      	ite	ne
 8015146:	2301      	movne	r3, #1
 8015148:	2300      	moveq	r3, #0
 801514a:	b2db      	uxtb	r3, r3
 801514c:	e018      	b.n	8015180 <osal_queue_send+0x68>
  }
  else
  {
    BaseType_t xHigherPriorityTaskWoken;
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 801514e:	f107 0210 	add.w	r2, r7, #16
 8015152:	2300      	movs	r3, #0
 8015154:	68b9      	ldr	r1, [r7, #8]
 8015156:	68f8      	ldr	r0, [r7, #12]
 8015158:	f7f7 ff7a 	bl	800d050 <xQueueGenericSendFromISR>
 801515c:	6178      	str	r0, [r7, #20]

#if CFG_TUSB_MCU == OPT_MCU_ESP32S2 || CFG_TUSB_MCU == OPT_MCU_ESP32S3
    // not needed after https://github.com/espressif/esp-idf/commit/c5fd79547ac9b7bae06fa660e9f814d18d3390b7
    if ( xHigherPriorityTaskWoken ) portYIELD_FROM_ISR();
#else
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d007      	beq.n	8015174 <osal_queue_send+0x5c>
 8015164:	4b08      	ldr	r3, [pc, #32]	; (8015188 <osal_queue_send+0x70>)
 8015166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801516a:	601a      	str	r2, [r3, #0]
 801516c:	f3bf 8f4f 	dsb	sy
 8015170:	f3bf 8f6f 	isb	sy
#endif

    return res != 0;
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	2b00      	cmp	r3, #0
 8015178:	bf14      	ite	ne
 801517a:	2301      	movne	r3, #1
 801517c:	2300      	moveq	r3, #0
 801517e:	b2db      	uxtb	r3, r3
  }
}
 8015180:	4618      	mov	r0, r3
 8015182:	3718      	adds	r7, #24
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	e000ed04 	.word	0xe000ed04

0801518c <get_driver>:
static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 801518c:	b480      	push	{r7}
 801518e:	b083      	sub	sp, #12
 8015190:	af00      	add	r7, sp, #0
 8015192:	4603      	mov	r3, r0
 8015194:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8015196:	4b14      	ldr	r3, [pc, #80]	; (80151e8 <get_driver+0x5c>)
 8015198:	2b00      	cmp	r3, #0
 801519a:	d012      	beq.n	80151c2 <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 801519c:	4b13      	ldr	r3, [pc, #76]	; (80151ec <get_driver+0x60>)
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	79fa      	ldrb	r2, [r7, #7]
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d208      	bcs.n	80151b8 <get_driver+0x2c>
 80151a6:	4b12      	ldr	r3, [pc, #72]	; (80151f0 <get_driver+0x64>)
 80151a8:	6819      	ldr	r1, [r3, #0]
 80151aa:	79fa      	ldrb	r2, [r7, #7]
 80151ac:	4613      	mov	r3, r2
 80151ae:	00db      	lsls	r3, r3, #3
 80151b0:	1a9b      	subs	r3, r3, r2
 80151b2:	009b      	lsls	r3, r3, #2
 80151b4:	440b      	add	r3, r1
 80151b6:	e010      	b.n	80151da <get_driver+0x4e>
    drvid -= _app_driver_count;
 80151b8:	4b0c      	ldr	r3, [pc, #48]	; (80151ec <get_driver+0x60>)
 80151ba:	781b      	ldrb	r3, [r3, #0]
 80151bc:	79fa      	ldrb	r2, [r7, #7]
 80151be:	1ad3      	subs	r3, r2, r3
 80151c0:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80151c2:	79fb      	ldrb	r3, [r7, #7]
 80151c4:	2b01      	cmp	r3, #1
 80151c6:	d807      	bhi.n	80151d8 <get_driver+0x4c>
 80151c8:	79fa      	ldrb	r2, [r7, #7]
 80151ca:	4613      	mov	r3, r2
 80151cc:	00db      	lsls	r3, r3, #3
 80151ce:	1a9b      	subs	r3, r3, r2
 80151d0:	009b      	lsls	r3, r3, #2
 80151d2:	4a08      	ldr	r2, [pc, #32]	; (80151f4 <get_driver+0x68>)
 80151d4:	4413      	add	r3, r2
 80151d6:	e000      	b.n	80151da <get_driver+0x4e>

  return NULL;
 80151d8:	2300      	movs	r3, #0
}
 80151da:	4618      	mov	r0, r3
 80151dc:	370c      	adds	r7, #12
 80151de:	46bd      	mov	sp, r7
 80151e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e4:	4770      	bx	lr
 80151e6:	bf00      	nop
 80151e8:	00000000 	.word	0x00000000
 80151ec:	20009384 	.word	0x20009384
 80151f0:	20009380 	.word	0x20009380
 80151f4:	0801c938 	.word	0x0801c938

080151f8 <usbd_driver_print_control_complete_name>:

static char const* const _tusb_speed_str[] = { "Full", "Low", "High" };

// for usbd_control to print the name of control complete driver
void usbd_driver_print_control_complete_name(usbd_control_xfer_cb_t callback)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b084      	sub	sp, #16
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8015200:	2300      	movs	r3, #0
 8015202:	73fb      	strb	r3, [r7, #15]
 8015204:	e013      	b.n	801522e <usbd_driver_print_control_complete_name+0x36>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8015206:	7bfb      	ldrb	r3, [r7, #15]
 8015208:	4618      	mov	r0, r3
 801520a:	f7ff ffbf 	bl	801518c <get_driver>
 801520e:	60b8      	str	r0, [r7, #8]
    if ( driver->control_xfer_cb == callback )
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	691b      	ldr	r3, [r3, #16]
 8015214:	687a      	ldr	r2, [r7, #4]
 8015216:	429a      	cmp	r2, r3
 8015218:	d106      	bne.n	8015228 <usbd_driver_print_control_complete_name+0x30>
    {
      TU_LOG2("  %s control complete\r\n", driver->name);
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	4619      	mov	r1, r3
 8015220:	4807      	ldr	r0, [pc, #28]	; (8015240 <usbd_driver_print_control_complete_name+0x48>)
 8015222:	f003 ffbd 	bl	80191a0 <iprintf>
      return;
 8015226:	e008      	b.n	801523a <usbd_driver_print_control_complete_name+0x42>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8015228:	7bfb      	ldrb	r3, [r7, #15]
 801522a:	3301      	adds	r3, #1
 801522c:	73fb      	strb	r3, [r7, #15]
 801522e:	4b05      	ldr	r3, [pc, #20]	; (8015244 <usbd_driver_print_control_complete_name+0x4c>)
 8015230:	781b      	ldrb	r3, [r3, #0]
 8015232:	1c5a      	adds	r2, r3, #1
 8015234:	7bfb      	ldrb	r3, [r7, #15]
 8015236:	429a      	cmp	r2, r3
 8015238:	dae5      	bge.n	8015206 <usbd_driver_print_control_complete_name+0xe>
    }
  }
}
 801523a:	3710      	adds	r7, #16
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}
 8015240:	0801b740 	.word	0x0801b740
 8015244:	20009384 	.word	0x20009384

08015248 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8015248:	b480      	push	{r7}
 801524a:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 801524c:	4b06      	ldr	r3, [pc, #24]	; (8015268 <tud_mounted+0x20>)
 801524e:	785b      	ldrb	r3, [r3, #1]
 8015250:	b2db      	uxtb	r3, r3
 8015252:	2b00      	cmp	r3, #0
 8015254:	bf14      	ite	ne
 8015256:	2301      	movne	r3, #1
 8015258:	2300      	moveq	r3, #0
 801525a:	b2db      	uxtb	r3, r3
}
 801525c:	4618      	mov	r0, r3
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr
 8015266:	bf00      	nop
 8015268:	20009354 	.word	0x20009354

0801526c <tud_suspended>:

bool tud_suspended(void)
{
 801526c:	b480      	push	{r7}
 801526e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8015270:	4b07      	ldr	r3, [pc, #28]	; (8015290 <tud_suspended+0x24>)
 8015272:	781b      	ldrb	r3, [r3, #0]
 8015274:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015278:	b2db      	uxtb	r3, r3
 801527a:	2b00      	cmp	r3, #0
 801527c:	bf14      	ite	ne
 801527e:	2301      	movne	r3, #1
 8015280:	2300      	moveq	r3, #0
 8015282:	b2db      	uxtb	r3, r3
}
 8015284:	4618      	mov	r0, r3
 8015286:	46bd      	mov	sp, r7
 8015288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528c:	4770      	bx	lr
 801528e:	bf00      	nop
 8015290:	20009354 	.word	0x20009354

08015294 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8015294:	b480      	push	{r7}
 8015296:	af00      	add	r7, sp, #0
  return _usbd_initialized;
 8015298:	4b03      	ldr	r3, [pc, #12]	; (80152a8 <tud_inited+0x14>)
 801529a:	781b      	ldrb	r3, [r3, #0]
}
 801529c:	4618      	mov	r0, r3
 801529e:	46bd      	mov	sp, r7
 80152a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a4:	4770      	bx	lr
 80152a6:	bf00      	nop
 80152a8:	20009385 	.word	0x20009385

080152ac <tud_init>:

bool tud_init (uint8_t rhport)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b086      	sub	sp, #24
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	4603      	mov	r3, r0
 80152b4:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if (_usbd_initialized) return _usbd_initialized;
 80152b6:	4b3c      	ldr	r3, [pc, #240]	; (80153a8 <tud_init+0xfc>)
 80152b8:	781b      	ldrb	r3, [r3, #0]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d002      	beq.n	80152c4 <tud_init+0x18>
 80152be:	4b3a      	ldr	r3, [pc, #232]	; (80153a8 <tud_init+0xfc>)
 80152c0:	781b      	ldrb	r3, [r3, #0]
 80152c2:	e06c      	b.n	801539e <tud_init+0xf2>

  TU_LOG2("USBD init\r\n");
 80152c4:	4839      	ldr	r0, [pc, #228]	; (80153ac <tud_init+0x100>)
 80152c6:	f004 f807 	bl	80192d8 <puts>

  tu_varclr(&_usbd_dev);
 80152ca:	222b      	movs	r2, #43	; 0x2b
 80152cc:	2100      	movs	r1, #0
 80152ce:	4838      	ldr	r0, [pc, #224]	; (80153b0 <tud_init+0x104>)
 80152d0:	f003 fec9 	bl	8019066 <memset>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
 80152d4:	4837      	ldr	r0, [pc, #220]	; (80153b4 <tud_init+0x108>)
 80152d6:	f7ff fec3 	bl	8015060 <osal_mutex_create>
 80152da:	4603      	mov	r3, r0
 80152dc:	4a36      	ldr	r2, [pc, #216]	; (80153b8 <tud_init+0x10c>)
 80152de:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_mutex);
 80152e0:	4b35      	ldr	r3, [pc, #212]	; (80153b8 <tud_init+0x10c>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d110      	bne.n	801530a <tud_init+0x5e>
 80152e8:	f240 12a1 	movw	r2, #417	; 0x1a1
 80152ec:	4933      	ldr	r1, [pc, #204]	; (80153bc <tud_init+0x110>)
 80152ee:	4834      	ldr	r0, [pc, #208]	; (80153c0 <tud_init+0x114>)
 80152f0:	f003 ff56 	bl	80191a0 <iprintf>
 80152f4:	4b33      	ldr	r3, [pc, #204]	; (80153c4 <tud_init+0x118>)
 80152f6:	60bb      	str	r3, [r7, #8]
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	f003 0301 	and.w	r3, r3, #1
 8015300:	2b00      	cmp	r3, #0
 8015302:	d000      	beq.n	8015306 <tud_init+0x5a>
 8015304:	be00      	bkpt	0x0000
 8015306:	2300      	movs	r3, #0
 8015308:	e049      	b.n	801539e <tud_init+0xf2>
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 801530a:	482f      	ldr	r0, [pc, #188]	; (80153c8 <tud_init+0x11c>)
 801530c:	f7ff fed7 	bl	80150be <osal_queue_create>
 8015310:	4603      	mov	r3, r0
 8015312:	4a2e      	ldr	r2, [pc, #184]	; (80153cc <tud_init+0x120>)
 8015314:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8015316:	4b2d      	ldr	r3, [pc, #180]	; (80153cc <tud_init+0x120>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d110      	bne.n	8015340 <tud_init+0x94>
 801531e:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8015322:	4926      	ldr	r1, [pc, #152]	; (80153bc <tud_init+0x110>)
 8015324:	4826      	ldr	r0, [pc, #152]	; (80153c0 <tud_init+0x114>)
 8015326:	f003 ff3b 	bl	80191a0 <iprintf>
 801532a:	4b26      	ldr	r3, [pc, #152]	; (80153c4 <tud_init+0x118>)
 801532c:	60fb      	str	r3, [r7, #12]
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	f003 0301 	and.w	r3, r3, #1
 8015336:	2b00      	cmp	r3, #0
 8015338:	d000      	beq.n	801533c <tud_init+0x90>
 801533a:	be00      	bkpt	0x0000
 801533c:	2300      	movs	r3, #0
 801533e:	e02e      	b.n	801539e <tud_init+0xf2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8015340:	4b23      	ldr	r3, [pc, #140]	; (80153d0 <tud_init+0x124>)
 8015342:	2b00      	cmp	r3, #0
 8015344:	d005      	beq.n	8015352 <tud_init+0xa6>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8015346:	4823      	ldr	r0, [pc, #140]	; (80153d4 <tud_init+0x128>)
 8015348:	f3af 8000 	nop.w
 801534c:	4603      	mov	r3, r0
 801534e:	4a22      	ldr	r2, [pc, #136]	; (80153d8 <tud_init+0x12c>)
 8015350:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8015352:	2300      	movs	r3, #0
 8015354:	75fb      	strb	r3, [r7, #23]
 8015356:	e010      	b.n	801537a <tud_init+0xce>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8015358:	7dfb      	ldrb	r3, [r7, #23]
 801535a:	4618      	mov	r0, r3
 801535c:	f7ff ff16 	bl	801518c <get_driver>
 8015360:	6138      	str	r0, [r7, #16]
    TU_LOG2("%s init\r\n", driver->name);
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	4619      	mov	r1, r3
 8015368:	481c      	ldr	r0, [pc, #112]	; (80153dc <tud_init+0x130>)
 801536a:	f003 ff19 	bl	80191a0 <iprintf>
    driver->init();
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	685b      	ldr	r3, [r3, #4]
 8015372:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8015374:	7dfb      	ldrb	r3, [r7, #23]
 8015376:	3301      	adds	r3, #1
 8015378:	75fb      	strb	r3, [r7, #23]
 801537a:	4b16      	ldr	r3, [pc, #88]	; (80153d4 <tud_init+0x128>)
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	1c5a      	adds	r2, r3, #1
 8015380:	7dfb      	ldrb	r3, [r7, #23]
 8015382:	429a      	cmp	r2, r3
 8015384:	dae8      	bge.n	8015358 <tud_init+0xac>
  }

  // Init device controller driver
  dcd_init(rhport);
 8015386:	79fb      	ldrb	r3, [r7, #7]
 8015388:	4618      	mov	r0, r3
 801538a:	f002 fb35 	bl	80179f8 <dcd_init>
  dcd_int_enable(rhport);
 801538e:	79fb      	ldrb	r3, [r7, #7]
 8015390:	4618      	mov	r0, r3
 8015392:	f002 fb9b 	bl	8017acc <dcd_int_enable>

  _usbd_initialized = true;
 8015396:	4b04      	ldr	r3, [pc, #16]	; (80153a8 <tud_init+0xfc>)
 8015398:	2201      	movs	r2, #1
 801539a:	701a      	strb	r2, [r3, #0]

  return true;
 801539c:	2301      	movs	r3, #1
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3718      	adds	r7, #24
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
 80153a6:	bf00      	nop
 80153a8:	20009385 	.word	0x20009385
 80153ac:	0801b758 	.word	0x0801b758
 80153b0:	20009354 	.word	0x20009354
 80153b4:	2000944c 	.word	0x2000944c
 80153b8:	20009494 	.word	0x20009494
 80153bc:	0801c9d4 	.word	0x0801c9d4
 80153c0:	0801b764 	.word	0x0801b764
 80153c4:	e000edf0 	.word	0xe000edf0
 80153c8:	2000016c 	.word	0x2000016c
 80153cc:	20009448 	.word	0x20009448
 80153d0:	00000000 	.word	0x00000000
 80153d4:	20009384 	.word	0x20009384
 80153d8:	20009380 	.word	0x20009380
 80153dc:	0801b77c 	.word	0x0801b77c

080153e0 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b084      	sub	sp, #16
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	4603      	mov	r3, r0
 80153e8:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80153ea:	2300      	movs	r3, #0
 80153ec:	73fb      	strb	r3, [r7, #15]
 80153ee:	e00b      	b.n	8015408 <configuration_reset+0x28>
  {
    get_driver(i)->reset(rhport);
 80153f0:	7bfb      	ldrb	r3, [r7, #15]
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7ff feca 	bl	801518c <get_driver>
 80153f8:	4603      	mov	r3, r0
 80153fa:	689b      	ldr	r3, [r3, #8]
 80153fc:	79fa      	ldrb	r2, [r7, #7]
 80153fe:	4610      	mov	r0, r2
 8015400:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8015402:	7bfb      	ldrb	r3, [r7, #15]
 8015404:	3301      	adds	r3, #1
 8015406:	73fb      	strb	r3, [r7, #15]
 8015408:	4b0c      	ldr	r3, [pc, #48]	; (801543c <configuration_reset+0x5c>)
 801540a:	781b      	ldrb	r3, [r3, #0]
 801540c:	1c5a      	adds	r2, r3, #1
 801540e:	7bfb      	ldrb	r3, [r7, #15]
 8015410:	429a      	cmp	r2, r3
 8015412:	daed      	bge.n	80153f0 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8015414:	222b      	movs	r2, #43	; 0x2b
 8015416:	2100      	movs	r1, #0
 8015418:	4809      	ldr	r0, [pc, #36]	; (8015440 <configuration_reset+0x60>)
 801541a:	f003 fe24 	bl	8019066 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 801541e:	2210      	movs	r2, #16
 8015420:	21ff      	movs	r1, #255	; 0xff
 8015422:	4808      	ldr	r0, [pc, #32]	; (8015444 <configuration_reset+0x64>)
 8015424:	f003 fe1f 	bl	8019066 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8015428:	220c      	movs	r2, #12
 801542a:	21ff      	movs	r1, #255	; 0xff
 801542c:	4806      	ldr	r0, [pc, #24]	; (8015448 <configuration_reset+0x68>)
 801542e:	f003 fe1a 	bl	8019066 <memset>
}
 8015432:	bf00      	nop
 8015434:	3710      	adds	r7, #16
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
 801543a:	bf00      	nop
 801543c:	20009384 	.word	0x20009384
 8015440:	20009354 	.word	0x20009354
 8015444:	20009357 	.word	0x20009357
 8015448:	20009367 	.word	0x20009367

0801544c <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b082      	sub	sp, #8
 8015450:	af00      	add	r7, sp, #0
 8015452:	4603      	mov	r3, r0
 8015454:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8015456:	79fb      	ldrb	r3, [r7, #7]
 8015458:	4618      	mov	r0, r3
 801545a:	f7ff ffc1 	bl	80153e0 <configuration_reset>
  usbd_control_reset();
 801545e:	f001 fc03 	bl	8016c68 <usbd_control_reset>
}
 8015462:	bf00      	nop
 8015464:	3708      	adds	r7, #8
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
	...

0801546c <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
 801546c:	b590      	push	{r4, r7, lr}
 801546e:	b089      	sub	sp, #36	; 0x24
 8015470:	af00      	add	r7, sp, #0
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
 8015472:	f003 fac9 	bl	8018a08 <tusb_inited>
 8015476:	4603      	mov	r3, r0
 8015478:	f083 0301 	eor.w	r3, r3, #1
 801547c:	b2db      	uxtb	r3, r3
 801547e:	2b00      	cmp	r3, #0
 8015480:	f040 81a0 	bne.w	80157c4 <tud_task+0x358>
  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;

    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 8015484:	4bb0      	ldr	r3, [pc, #704]	; (8015748 <tud_task+0x2dc>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	463a      	mov	r2, r7
 801548a:	4611      	mov	r1, r2
 801548c:	4618      	mov	r0, r3
 801548e:	f7ff fe2e 	bl	80150ee <osal_queue_receive>
 8015492:	4603      	mov	r3, r0
 8015494:	f083 0301 	eor.w	r3, r3, #1
 8015498:	b2db      	uxtb	r3, r3
 801549a:	2b00      	cmp	r3, #0
 801549c:	f040 8194 	bne.w	80157c8 <tud_task+0x35c>

#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
 80154a0:	787b      	ldrb	r3, [r7, #1]
 80154a2:	2b06      	cmp	r3, #6
 80154a4:	d102      	bne.n	80154ac <tud_task+0x40>
 80154a6:	48a9      	ldr	r0, [pc, #676]	; (801574c <tud_task+0x2e0>)
 80154a8:	f003 ff16 	bl	80192d8 <puts>
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
 80154ac:	787b      	ldrb	r3, [r7, #1]
 80154ae:	2b08      	cmp	r3, #8
 80154b0:	d805      	bhi.n	80154be <tud_task+0x52>
 80154b2:	787b      	ldrb	r3, [r7, #1]
 80154b4:	461a      	mov	r2, r3
 80154b6:	4ba6      	ldr	r3, [pc, #664]	; (8015750 <tud_task+0x2e4>)
 80154b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154bc:	e000      	b.n	80154c0 <tud_task+0x54>
 80154be:	4ba5      	ldr	r3, [pc, #660]	; (8015754 <tud_task+0x2e8>)
 80154c0:	4619      	mov	r1, r3
 80154c2:	48a5      	ldr	r0, [pc, #660]	; (8015758 <tud_task+0x2ec>)
 80154c4:	f003 fe6c 	bl	80191a0 <iprintf>
#endif

    switch ( event.event_id )
 80154c8:	787b      	ldrb	r3, [r7, #1]
 80154ca:	3b01      	subs	r3, #1
 80154cc:	2b07      	cmp	r3, #7
 80154ce:	f200 8163 	bhi.w	8015798 <tud_task+0x32c>
 80154d2:	a201      	add	r2, pc, #4	; (adr r2, 80154d8 <tud_task+0x6c>)
 80154d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154d8:	080154f9 	.word	0x080154f9
 80154dc:	0801551b 	.word	0x0801551b
 80154e0:	080156f7 	.word	0x080156f7
 80154e4:	08015683 	.word	0x08015683
 80154e8:	080156cf 	.word	0x080156cf
 80154ec:	08015537 	.word	0x08015537
 80154f0:	080155bb 	.word	0x080155bb
 80154f4:	08015733 	.word	0x08015733
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG2(": %s Speed\r\n", _tusb_speed_str[event.bus_reset.speed]);
 80154f8:	793b      	ldrb	r3, [r7, #4]
 80154fa:	461a      	mov	r2, r3
 80154fc:	4b97      	ldr	r3, [pc, #604]	; (801575c <tud_task+0x2f0>)
 80154fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015502:	4619      	mov	r1, r3
 8015504:	4896      	ldr	r0, [pc, #600]	; (8015760 <tud_task+0x2f4>)
 8015506:	f003 fe4b 	bl	80191a0 <iprintf>
        usbd_reset(event.rhport);
 801550a:	783b      	ldrb	r3, [r7, #0]
 801550c:	4618      	mov	r0, r3
 801550e:	f7ff ff9d 	bl	801544c <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8015512:	793a      	ldrb	r2, [r7, #4]
 8015514:	4b93      	ldr	r3, [pc, #588]	; (8015764 <tud_task+0x2f8>)
 8015516:	709a      	strb	r2, [r3, #2]
      break;
 8015518:	e153      	b.n	80157c2 <tud_task+0x356>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG2("\r\n");
 801551a:	488c      	ldr	r0, [pc, #560]	; (801574c <tud_task+0x2e0>)
 801551c:	f003 fedc 	bl	80192d8 <puts>
        usbd_reset(event.rhport);
 8015520:	783b      	ldrb	r3, [r7, #0]
 8015522:	4618      	mov	r0, r3
 8015524:	f7ff ff92 	bl	801544c <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 8015528:	4b8f      	ldr	r3, [pc, #572]	; (8015768 <tud_task+0x2fc>)
 801552a:	2b00      	cmp	r3, #0
 801552c:	f000 813e 	beq.w	80157ac <tud_task+0x340>
 8015530:	f3af 8000 	nop.w
      break;
 8015534:	e13a      	b.n	80157ac <tud_task+0x340>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_LOG2_VAR(&event.setup_received);
 8015536:	463b      	mov	r3, r7
 8015538:	3304      	adds	r3, #4
 801553a:	2108      	movs	r1, #8
 801553c:	4618      	mov	r0, r3
 801553e:	f7ff fd4b 	bl	8014fd8 <tu_print_var>
        TU_LOG2("\r\n");
 8015542:	4882      	ldr	r0, [pc, #520]	; (801574c <tud_task+0x2e0>)
 8015544:	f003 fec8 	bl	80192d8 <puts>

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8015548:	4a86      	ldr	r2, [pc, #536]	; (8015764 <tud_task+0x2f8>)
 801554a:	7813      	ldrb	r3, [r2, #0]
 801554c:	f043 0301 	orr.w	r3, r3, #1
 8015550:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8015552:	4a84      	ldr	r2, [pc, #528]	; (8015764 <tud_task+0x2f8>)
 8015554:	7fd3      	ldrb	r3, [r2, #31]
 8015556:	f36f 0300 	bfc	r3, #0, #1
 801555a:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 801555c:	4a81      	ldr	r2, [pc, #516]	; (8015764 <tud_task+0x2f8>)
 801555e:	7fd3      	ldrb	r3, [r2, #31]
 8015560:	f36f 0382 	bfc	r3, #2, #1
 8015564:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 8015566:	4a7f      	ldr	r2, [pc, #508]	; (8015764 <tud_task+0x2f8>)
 8015568:	f892 3020 	ldrb.w	r3, [r2, #32]
 801556c:	f36f 0300 	bfc	r3, #0, #1
 8015570:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8015574:	4a7b      	ldr	r2, [pc, #492]	; (8015764 <tud_task+0x2f8>)
 8015576:	f892 3020 	ldrb.w	r3, [r2, #32]
 801557a:	f36f 0382 	bfc	r3, #2, #1
 801557e:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8015582:	783a      	ldrb	r2, [r7, #0]
 8015584:	463b      	mov	r3, r7
 8015586:	3304      	adds	r3, #4
 8015588:	4619      	mov	r1, r3
 801558a:	4610      	mov	r0, r2
 801558c:	f000 f944 	bl	8015818 <process_control_request>
 8015590:	4603      	mov	r3, r0
 8015592:	f083 0301 	eor.w	r3, r3, #1
 8015596:	b2db      	uxtb	r3, r3
 8015598:	2b00      	cmp	r3, #0
 801559a:	f000 8109 	beq.w	80157b0 <tud_task+0x344>
        {
          TU_LOG2("  Stall EP0\r\n");
 801559e:	4873      	ldr	r0, [pc, #460]	; (801576c <tud_task+0x300>)
 80155a0:	f003 fe9a 	bl	80192d8 <puts>
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 80155a4:	783b      	ldrb	r3, [r7, #0]
 80155a6:	2100      	movs	r1, #0
 80155a8:	4618      	mov	r0, r3
 80155aa:	f002 fdb7 	bl	801811c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80155ae:	783b      	ldrb	r3, [r7, #0]
 80155b0:	2180      	movs	r1, #128	; 0x80
 80155b2:	4618      	mov	r0, r3
 80155b4:	f002 fdb2 	bl	801811c <dcd_edpt_stall>
        }
      break;
 80155b8:	e0fa      	b.n	80157b0 <tud_task+0x344>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80155ba:	793b      	ldrb	r3, [r7, #4]
 80155bc:	77bb      	strb	r3, [r7, #30]
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 80155be:	7fbb      	ldrb	r3, [r7, #30]
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7ff fcd0 	bl	8014f66 <tu_edpt_number>
 80155c6:	4603      	mov	r3, r0
 80155c8:	777b      	strb	r3, [r7, #29]
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80155ca:	7fbb      	ldrb	r3, [r7, #30]
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7ff fcbc 	bl	8014f4a <tu_edpt_dir>
 80155d2:	4603      	mov	r3, r0
 80155d4:	773b      	strb	r3, [r7, #28]

        TU_LOG2("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
 80155d6:	7fbb      	ldrb	r3, [r7, #30]
 80155d8:	68ba      	ldr	r2, [r7, #8]
 80155da:	4619      	mov	r1, r3
 80155dc:	4864      	ldr	r0, [pc, #400]	; (8015770 <tud_task+0x304>)
 80155de:	f003 fddf 	bl	80191a0 <iprintf>

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80155e2:	7f7a      	ldrb	r2, [r7, #29]
 80155e4:	7f3b      	ldrb	r3, [r7, #28]
 80155e6:	495f      	ldr	r1, [pc, #380]	; (8015764 <tud_task+0x2f8>)
 80155e8:	0052      	lsls	r2, r2, #1
 80155ea:	440a      	add	r2, r1
 80155ec:	4413      	add	r3, r2
 80155ee:	f103 0218 	add.w	r2, r3, #24
 80155f2:	79d3      	ldrb	r3, [r2, #7]
 80155f4:	f36f 0300 	bfc	r3, #0, #1
 80155f8:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80155fa:	7f7a      	ldrb	r2, [r7, #29]
 80155fc:	7f3b      	ldrb	r3, [r7, #28]
 80155fe:	4959      	ldr	r1, [pc, #356]	; (8015764 <tud_task+0x2f8>)
 8015600:	0052      	lsls	r2, r2, #1
 8015602:	440a      	add	r2, r1
 8015604:	4413      	add	r3, r2
 8015606:	f103 0218 	add.w	r2, r3, #24
 801560a:	79d3      	ldrb	r3, [r2, #7]
 801560c:	f36f 0382 	bfc	r3, #2, #1
 8015610:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 8015612:	7f7b      	ldrb	r3, [r7, #29]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d106      	bne.n	8015626 <tud_task+0x1ba>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8015618:	7838      	ldrb	r0, [r7, #0]
 801561a:	797a      	ldrb	r2, [r7, #5]
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	7fb9      	ldrb	r1, [r7, #30]
 8015620:	f001 fb58 	bl	8016cd4 <usbd_control_xfer_cb>

          TU_LOG2("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8015624:	e0cd      	b.n	80157c2 <tud_task+0x356>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8015626:	7f7a      	ldrb	r2, [r7, #29]
 8015628:	7f3b      	ldrb	r3, [r7, #28]
 801562a:	494e      	ldr	r1, [pc, #312]	; (8015764 <tud_task+0x2f8>)
 801562c:	0052      	lsls	r2, r2, #1
 801562e:	440a      	add	r2, r1
 8015630:	4413      	add	r3, r2
 8015632:	3313      	adds	r3, #19
 8015634:	781b      	ldrb	r3, [r3, #0]
 8015636:	4618      	mov	r0, r3
 8015638:	f7ff fda8 	bl	801518c <get_driver>
 801563c:	61b8      	str	r0, [r7, #24]
          TU_ASSERT(driver, );
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d110      	bne.n	8015666 <tud_task+0x1fa>
 8015644:	f240 2237 	movw	r2, #567	; 0x237
 8015648:	494a      	ldr	r1, [pc, #296]	; (8015774 <tud_task+0x308>)
 801564a:	484b      	ldr	r0, [pc, #300]	; (8015778 <tud_task+0x30c>)
 801564c:	f003 fda8 	bl	80191a0 <iprintf>
 8015650:	4b4a      	ldr	r3, [pc, #296]	; (801577c <tud_task+0x310>)
 8015652:	617b      	str	r3, [r7, #20]
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	f003 0301 	and.w	r3, r3, #1
 801565c:	2b00      	cmp	r3, #0
 801565e:	f000 80b5 	beq.w	80157cc <tud_task+0x360>
 8015662:	be00      	bkpt	0x0000
 8015664:	e0b2      	b.n	80157cc <tud_task+0x360>
          TU_LOG2("  %s xfer callback\r\n", driver->name);
 8015666:	69bb      	ldr	r3, [r7, #24]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	4619      	mov	r1, r3
 801566c:	4844      	ldr	r0, [pc, #272]	; (8015780 <tud_task+0x314>)
 801566e:	f003 fd97 	bl	80191a0 <iprintf>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	695c      	ldr	r4, [r3, #20]
 8015676:	7838      	ldrb	r0, [r7, #0]
 8015678:	797a      	ldrb	r2, [r7, #5]
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	7fb9      	ldrb	r1, [r7, #30]
 801567e:	47a0      	blx	r4
      break;
 8015680:	e09f      	b.n	80157c2 <tud_task+0x356>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8015682:	4b38      	ldr	r3, [pc, #224]	; (8015764 <tud_task+0x2f8>)
 8015684:	781b      	ldrb	r3, [r3, #0]
 8015686:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801568a:	b2db      	uxtb	r3, r3
 801568c:	2b00      	cmp	r3, #0
 801568e:	d01a      	beq.n	80156c6 <tud_task+0x25a>
        {
          TU_LOG2(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
 8015690:	4b34      	ldr	r3, [pc, #208]	; (8015764 <tud_task+0x2f8>)
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015698:	b2db      	uxtb	r3, r3
 801569a:	4619      	mov	r1, r3
 801569c:	4839      	ldr	r0, [pc, #228]	; (8015784 <tud_task+0x318>)
 801569e:	f003 fd7f 	bl	80191a0 <iprintf>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80156a2:	4b39      	ldr	r3, [pc, #228]	; (8015788 <tud_task+0x31c>)
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	f000 8085 	beq.w	80157b4 <tud_task+0x348>
 80156aa:	4b2e      	ldr	r3, [pc, #184]	; (8015764 <tud_task+0x2f8>)
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80156b2:	b2db      	uxtb	r3, r3
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	bf14      	ite	ne
 80156b8:	2301      	movne	r3, #1
 80156ba:	2300      	moveq	r3, #0
 80156bc:	b2db      	uxtb	r3, r3
 80156be:	4618      	mov	r0, r3
 80156c0:	f3af 8000 	nop.w
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
 80156c4:	e076      	b.n	80157b4 <tud_task+0x348>
          TU_LOG2(" Skipped\r\n");
 80156c6:	4831      	ldr	r0, [pc, #196]	; (801578c <tud_task+0x320>)
 80156c8:	f003 fe06 	bl	80192d8 <puts>
      break;
 80156cc:	e072      	b.n	80157b4 <tud_task+0x348>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 80156ce:	4b25      	ldr	r3, [pc, #148]	; (8015764 <tud_task+0x2f8>)
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80156d6:	b2db      	uxtb	r3, r3
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d008      	beq.n	80156ee <tud_task+0x282>
        {
          TU_LOG2("\r\n");
 80156dc:	481b      	ldr	r0, [pc, #108]	; (801574c <tud_task+0x2e0>)
 80156de:	f003 fdfb 	bl	80192d8 <puts>
          if (tud_resume_cb) tud_resume_cb();
 80156e2:	4b2b      	ldr	r3, [pc, #172]	; (8015790 <tud_task+0x324>)
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d067      	beq.n	80157b8 <tud_task+0x34c>
 80156e8:	f3af 8000 	nop.w
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
 80156ec:	e064      	b.n	80157b8 <tud_task+0x34c>
          TU_LOG2(" Skipped\r\n");
 80156ee:	4827      	ldr	r0, [pc, #156]	; (801578c <tud_task+0x320>)
 80156f0:	f003 fdf2 	bl	80192d8 <puts>
      break;
 80156f4:	e060      	b.n	80157b8 <tud_task+0x34c>

      case DCD_EVENT_SOF:
        TU_LOG2("\r\n");
 80156f6:	4815      	ldr	r0, [pc, #84]	; (801574c <tud_task+0x2e0>)
 80156f8:	f003 fdee 	bl	80192d8 <puts>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80156fc:	2300      	movs	r3, #0
 80156fe:	77fb      	strb	r3, [r7, #31]
 8015700:	e010      	b.n	8015724 <tud_task+0x2b8>
        {
          usbd_class_driver_t const * driver = get_driver(i);
 8015702:	7ffb      	ldrb	r3, [r7, #31]
 8015704:	4618      	mov	r0, r3
 8015706:	f7ff fd41 	bl	801518c <get_driver>
 801570a:	6138      	str	r0, [r7, #16]
          if ( driver->sof ) driver->sof(event.rhport);
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	699b      	ldr	r3, [r3, #24]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d004      	beq.n	801571e <tud_task+0x2b2>
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	699b      	ldr	r3, [r3, #24]
 8015718:	783a      	ldrb	r2, [r7, #0]
 801571a:	4610      	mov	r0, r2
 801571c:	4798      	blx	r3
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 801571e:	7ffb      	ldrb	r3, [r7, #31]
 8015720:	3301      	adds	r3, #1
 8015722:	77fb      	strb	r3, [r7, #31]
 8015724:	4b1b      	ldr	r3, [pc, #108]	; (8015794 <tud_task+0x328>)
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	1c5a      	adds	r2, r3, #1
 801572a:	7ffb      	ldrb	r3, [r7, #31]
 801572c:	429a      	cmp	r2, r3
 801572e:	dae8      	bge.n	8015702 <tud_task+0x296>
        }
      break;
 8015730:	e047      	b.n	80157c2 <tud_task+0x356>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
 8015732:	4806      	ldr	r0, [pc, #24]	; (801574c <tud_task+0x2e0>)
 8015734:	f003 fdd0 	bl	80192d8 <puts>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d03e      	beq.n	80157bc <tud_task+0x350>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	68ba      	ldr	r2, [r7, #8]
 8015742:	4610      	mov	r0, r2
 8015744:	4798      	blx	r3
      break;
 8015746:	e039      	b.n	80157bc <tud_task+0x350>
 8015748:	20009448 	.word	0x20009448
 801574c:	0801b788 	.word	0x0801b788
 8015750:	0801c970 	.word	0x0801c970
 8015754:	0801b78c 	.word	0x0801b78c
 8015758:	0801b798 	.word	0x0801b798
 801575c:	0801c9c8 	.word	0x0801c9c8
 8015760:	0801b7a4 	.word	0x0801b7a4
 8015764:	20009354 	.word	0x20009354
 8015768:	00000000 	.word	0x00000000
 801576c:	0801b7b4 	.word	0x0801b7b4
 8015770:	0801b7c4 	.word	0x0801b7c4
 8015774:	0801c9e0 	.word	0x0801c9e0
 8015778:	0801b764 	.word	0x0801b764
 801577c:	e000edf0 	.word	0xe000edf0
 8015780:	0801b7e0 	.word	0x0801b7e0
 8015784:	0801b7f8 	.word	0x0801b7f8
 8015788:	00000000 	.word	0x00000000
 801578c:	0801b810 	.word	0x0801b810
 8015790:	00000000 	.word	0x00000000
 8015794:	20009384 	.word	0x20009384

      default:
        TU_BREAKPOINT();
 8015798:	4b0e      	ldr	r3, [pc, #56]	; (80157d4 <tud_task+0x368>)
 801579a:	60fb      	str	r3, [r7, #12]
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	f003 0301 	and.w	r3, r3, #1
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d00b      	beq.n	80157c0 <tud_task+0x354>
 80157a8:	be00      	bkpt	0x0000
      break;
 80157aa:	e009      	b.n	80157c0 <tud_task+0x354>
      break;
 80157ac:	bf00      	nop
 80157ae:	e669      	b.n	8015484 <tud_task+0x18>
      break;
 80157b0:	bf00      	nop
 80157b2:	e667      	b.n	8015484 <tud_task+0x18>
      break;
 80157b4:	bf00      	nop
 80157b6:	e665      	b.n	8015484 <tud_task+0x18>
      break;
 80157b8:	bf00      	nop
 80157ba:	e663      	b.n	8015484 <tud_task+0x18>
      break;
 80157bc:	bf00      	nop
 80157be:	e661      	b.n	8015484 <tud_task+0x18>
      break;
 80157c0:	bf00      	nop
  {
 80157c2:	e65f      	b.n	8015484 <tud_task+0x18>
  if ( !tusb_inited() ) return;
 80157c4:	bf00      	nop
 80157c6:	e002      	b.n	80157ce <tud_task+0x362>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 80157c8:	bf00      	nop
 80157ca:	e000      	b.n	80157ce <tud_task+0x362>
          TU_ASSERT(driver, );
 80157cc:	bf00      	nop
    }
  }
}
 80157ce:	3724      	adds	r7, #36	; 0x24
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd90      	pop	{r4, r7, pc}
 80157d4:	e000edf0 	.word	0xe000edf0

080157d8 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	4603      	mov	r3, r0
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	691b      	ldr	r3, [r3, #16]
 80157ea:	4618      	mov	r0, r3
 80157ec:	f001 fa48 	bl	8016c80 <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", driver->name);
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	4619      	mov	r1, r3
 80157f6:	4807      	ldr	r0, [pc, #28]	; (8015814 <invoke_class_control+0x3c>)
 80157f8:	f003 fcd2 	bl	80191a0 <iprintf>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	691b      	ldr	r3, [r3, #16]
 8015800:	7bf8      	ldrb	r0, [r7, #15]
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	2100      	movs	r1, #0
 8015806:	4798      	blx	r3
 8015808:	4603      	mov	r3, r0
}
 801580a:	4618      	mov	r0, r3
 801580c:	3710      	adds	r7, #16
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}
 8015812:	bf00      	nop
 8015814:	0801b81c 	.word	0x0801b81c

08015818 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b094      	sub	sp, #80	; 0x50
 801581c:	af00      	add	r7, sp, #0
 801581e:	4603      	mov	r3, r0
 8015820:	6039      	str	r1, [r7, #0]
 8015822:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8015824:	2000      	movs	r0, #0
 8015826:	f001 fa2b 	bl	8016c80 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015832:	b2db      	uxtb	r3, r3
 8015834:	2b60      	cmp	r3, #96	; 0x60
 8015836:	d110      	bne.n	801585a <process_control_request+0x42>
 8015838:	f240 227f 	movw	r2, #639	; 0x27f
 801583c:	49a3      	ldr	r1, [pc, #652]	; (8015acc <process_control_request+0x2b4>)
 801583e:	48a4      	ldr	r0, [pc, #656]	; (8015ad0 <process_control_request+0x2b8>)
 8015840:	f003 fcae 	bl	80191a0 <iprintf>
 8015844:	4ba3      	ldr	r3, [pc, #652]	; (8015ad4 <process_control_request+0x2bc>)
 8015846:	61bb      	str	r3, [r7, #24]
 8015848:	69bb      	ldr	r3, [r7, #24]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	f003 0301 	and.w	r3, r3, #1
 8015850:	2b00      	cmp	r3, #0
 8015852:	d000      	beq.n	8015856 <process_control_request+0x3e>
 8015854:	be00      	bkpt	0x0000
 8015856:	2300      	movs	r3, #0
 8015858:	e28e      	b.n	8015d78 <process_control_request+0x560>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015862:	b2db      	uxtb	r3, r3
 8015864:	2b40      	cmp	r3, #64	; 0x40
 8015866:	d10f      	bne.n	8015888 <process_control_request+0x70>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8015868:	4b9b      	ldr	r3, [pc, #620]	; (8015ad8 <process_control_request+0x2c0>)
 801586a:	2b00      	cmp	r3, #0
 801586c:	d101      	bne.n	8015872 <process_control_request+0x5a>
 801586e:	2300      	movs	r3, #0
 8015870:	e282      	b.n	8015d78 <process_control_request+0x560>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8015872:	4899      	ldr	r0, [pc, #612]	; (8015ad8 <process_control_request+0x2c0>)
 8015874:	f001 fa04 	bl	8016c80 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8015878:	79fb      	ldrb	r3, [r7, #7]
 801587a:	683a      	ldr	r2, [r7, #0]
 801587c:	2100      	movs	r1, #0
 801587e:	4618      	mov	r0, r3
 8015880:	f3af 8000 	nop.w
 8015884:	4603      	mov	r3, r0
 8015886:	e277      	b.n	8015d78 <process_control_request+0x560>
  }

#if CFG_TUSB_DEBUG >= 2
  if (TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type && p_request->bRequest <= TUSB_REQ_SYNCH_FRAME)
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	781b      	ldrb	r3, [r3, #0]
 801588c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015890:	b2db      	uxtb	r3, r3
 8015892:	2b00      	cmp	r3, #0
 8015894:	d114      	bne.n	80158c0 <process_control_request+0xa8>
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	785b      	ldrb	r3, [r3, #1]
 801589a:	2b0c      	cmp	r3, #12
 801589c:	d810      	bhi.n	80158c0 <process_control_request+0xa8>
  {
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	785b      	ldrb	r3, [r3, #1]
 80158a2:	461a      	mov	r2, r3
 80158a4:	4b8d      	ldr	r3, [pc, #564]	; (8015adc <process_control_request+0x2c4>)
 80158a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158aa:	4619      	mov	r1, r3
 80158ac:	488c      	ldr	r0, [pc, #560]	; (8015ae0 <process_control_request+0x2c8>)
 80158ae:	f003 fc77 	bl	80191a0 <iprintf>
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	785b      	ldrb	r3, [r3, #1]
 80158b6:	2b06      	cmp	r3, #6
 80158b8:	d002      	beq.n	80158c0 <process_control_request+0xa8>
 80158ba:	488a      	ldr	r0, [pc, #552]	; (8015ae4 <process_control_request+0x2cc>)
 80158bc:	f003 fd0c 	bl	80192d8 <puts>
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80158c8:	b2db      	uxtb	r3, r3
 80158ca:	2b02      	cmp	r3, #2
 80158cc:	f000 819a 	beq.w	8015c04 <process_control_request+0x3ec>
 80158d0:	2b02      	cmp	r3, #2
 80158d2:	f300 8245 	bgt.w	8015d60 <process_control_request+0x548>
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d003      	beq.n	80158e2 <process_control_request+0xca>
 80158da:	2b01      	cmp	r3, #1
 80158dc:	f000 8141 	beq.w	8015b62 <process_control_request+0x34a>
 80158e0:	e23e      	b.n	8015d60 <process_control_request+0x548>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 80158e2:	683b      	ldr	r3, [r7, #0]
 80158e4:	781b      	ldrb	r3, [r3, #0]
 80158e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	2b20      	cmp	r3, #32
 80158ee:	d123      	bne.n	8015938 <process_control_request+0x120>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	889b      	ldrh	r3, [r3, #4]
 80158f4:	b29b      	uxth	r3, r3
 80158f6:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80158f8:	8afb      	ldrh	r3, [r7, #22]
 80158fa:	b2db      	uxtb	r3, r3
 80158fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8015900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015904:	2b0f      	cmp	r3, #15
 8015906:	d901      	bls.n	801590c <process_control_request+0xf4>
 8015908:	2300      	movs	r3, #0
 801590a:	e235      	b.n	8015d78 <process_control_request+0x560>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801590c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015910:	4a75      	ldr	r2, [pc, #468]	; (8015ae8 <process_control_request+0x2d0>)
 8015912:	4413      	add	r3, r2
 8015914:	78db      	ldrb	r3, [r3, #3]
 8015916:	4618      	mov	r0, r3
 8015918:	f7ff fc38 	bl	801518c <get_driver>
 801591c:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 801591e:	6a3b      	ldr	r3, [r7, #32]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d101      	bne.n	8015928 <process_control_request+0x110>
 8015924:	2300      	movs	r3, #0
 8015926:	e227      	b.n	8015d78 <process_control_request+0x560>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8015928:	79fb      	ldrb	r3, [r7, #7]
 801592a:	683a      	ldr	r2, [r7, #0]
 801592c:	6a39      	ldr	r1, [r7, #32]
 801592e:	4618      	mov	r0, r3
 8015930:	f7ff ff52 	bl	80157d8 <invoke_class_control>
 8015934:	4603      	mov	r3, r0
 8015936:	e21f      	b.n	8015d78 <process_control_request+0x560>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015940:	b2db      	uxtb	r3, r3
 8015942:	2b00      	cmp	r3, #0
 8015944:	d00a      	beq.n	801595c <process_control_request+0x144>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8015946:	4b63      	ldr	r3, [pc, #396]	; (8015ad4 <process_control_request+0x2bc>)
 8015948:	62bb      	str	r3, [r7, #40]	; 0x28
 801594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	f003 0301 	and.w	r3, r3, #1
 8015952:	2b00      	cmp	r3, #0
 8015954:	d000      	beq.n	8015958 <process_control_request+0x140>
 8015956:	be00      	bkpt	0x0000
        return false;
 8015958:	2300      	movs	r3, #0
 801595a:	e20d      	b.n	8015d78 <process_control_request+0x560>
      }

      switch ( p_request->bRequest )
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	785b      	ldrb	r3, [r3, #1]
 8015960:	2b09      	cmp	r3, #9
 8015962:	f200 80f1 	bhi.w	8015b48 <process_control_request+0x330>
 8015966:	a201      	add	r2, pc, #4	; (adr r2, 801596c <process_control_request+0x154>)
 8015968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801596c:	08015b11 	.word	0x08015b11
 8015970:	08015abd 	.word	0x08015abd
 8015974:	08015b49 	.word	0x08015b49
 8015978:	08015a93 	.word	0x08015a93
 801597c:	08015b49 	.word	0x08015b49
 8015980:	08015995 	.word	0x08015995
 8015984:	08015a79 	.word	0x08015a79
 8015988:	08015b49 	.word	0x08015b49
 801598c:	080159b9 	.word	0x080159b9
 8015990:	080159d1 	.word	0x080159d1
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8015994:	6838      	ldr	r0, [r7, #0]
 8015996:	f001 f983 	bl	8016ca0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	885b      	ldrh	r3, [r3, #2]
 801599e:	b29b      	uxth	r3, r3
 80159a0:	b2da      	uxtb	r2, r3
 80159a2:	79fb      	ldrb	r3, [r7, #7]
 80159a4:	4611      	mov	r1, r2
 80159a6:	4618      	mov	r0, r3
 80159a8:	f002 f89f 	bl	8017aea <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 80159ac:	4a4e      	ldr	r2, [pc, #312]	; (8015ae8 <process_control_request+0x2d0>)
 80159ae:	7813      	ldrb	r3, [r2, #0]
 80159b0:	f043 0302 	orr.w	r3, r3, #2
 80159b4:	7013      	strb	r3, [r2, #0]
        break;
 80159b6:	e0d3      	b.n	8015b60 <process_control_request+0x348>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80159b8:	4b4b      	ldr	r3, [pc, #300]	; (8015ae8 <process_control_request+0x2d0>)
 80159ba:	785b      	ldrb	r3, [r3, #1]
 80159bc:	b2db      	uxtb	r3, r3
 80159be:	747b      	strb	r3, [r7, #17]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80159c0:	f107 0211 	add.w	r2, r7, #17
 80159c4:	79f8      	ldrb	r0, [r7, #7]
 80159c6:	2301      	movs	r3, #1
 80159c8:	6839      	ldr	r1, [r7, #0]
 80159ca:	f001 f8cb 	bl	8016b64 <tud_control_xfer>
        }
        break;
 80159ce:	e0c7      	b.n	8015b60 <process_control_request+0x348>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	885b      	ldrh	r3, [r3, #2]
 80159d4:	b29b      	uxth	r3, r3
 80159d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 80159da:	4b43      	ldr	r3, [pc, #268]	; (8015ae8 <process_control_request+0x2d0>)
 80159dc:	785b      	ldrb	r3, [r3, #1]
 80159de:	b2db      	uxtb	r3, r3
 80159e0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d03d      	beq.n	8015a64 <process_control_request+0x24c>
          {
            if ( _usbd_dev.cfg_num )
 80159e8:	4b3f      	ldr	r3, [pc, #252]	; (8015ae8 <process_control_request+0x2d0>)
 80159ea:	785b      	ldrb	r3, [r3, #1]
 80159ec:	b2db      	uxtb	r3, r3
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d016      	beq.n	8015a20 <process_control_request+0x208>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);
 80159f2:	4b3d      	ldr	r3, [pc, #244]	; (8015ae8 <process_control_request+0x2d0>)
 80159f4:	785b      	ldrb	r3, [r3, #1]
 80159f6:	b2db      	uxtb	r3, r3
 80159f8:	4619      	mov	r1, r3
 80159fa:	483c      	ldr	r0, [pc, #240]	; (8015aec <process_control_request+0x2d4>)
 80159fc:	f003 fbd0 	bl	80191a0 <iprintf>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8015a00:	79fb      	ldrb	r3, [r7, #7]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f002 f9fa 	bl	8017dfc <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8015a08:	4b37      	ldr	r3, [pc, #220]	; (8015ae8 <process_control_request+0x2d0>)
 8015a0a:	789b      	ldrb	r3, [r3, #2]
 8015a0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 8015a10:	79fb      	ldrb	r3, [r7, #7]
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7ff fce4 	bl	80153e0 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8015a18:	4a33      	ldr	r2, [pc, #204]	; (8015ae8 <process_control_request+0x2d0>)
 8015a1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015a1e:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8015a20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d01d      	beq.n	8015a64 <process_control_request+0x24c>
 8015a28:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015a2c:	79fb      	ldrb	r3, [r7, #7]
 8015a2e:	4611      	mov	r1, r2
 8015a30:	4618      	mov	r0, r3
 8015a32:	f000 f9af 	bl	8015d94 <process_set_config>
 8015a36:	4603      	mov	r3, r0
 8015a38:	f083 0301 	eor.w	r3, r3, #1
 8015a3c:	b2db      	uxtb	r3, r3
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d010      	beq.n	8015a64 <process_control_request+0x24c>
 8015a42:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015a46:	4921      	ldr	r1, [pc, #132]	; (8015acc <process_control_request+0x2b4>)
 8015a48:	4821      	ldr	r0, [pc, #132]	; (8015ad0 <process_control_request+0x2b8>)
 8015a4a:	f003 fba9 	bl	80191a0 <iprintf>
 8015a4e:	4b21      	ldr	r3, [pc, #132]	; (8015ad4 <process_control_request+0x2bc>)
 8015a50:	633b      	str	r3, [r7, #48]	; 0x30
 8015a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	f003 0301 	and.w	r3, r3, #1
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d000      	beq.n	8015a60 <process_control_request+0x248>
 8015a5e:	be00      	bkpt	0x0000
 8015a60:	2300      	movs	r3, #0
 8015a62:	e189      	b.n	8015d78 <process_control_request+0x560>
          }

          _usbd_dev.cfg_num = cfg_num;
 8015a64:	4a20      	ldr	r2, [pc, #128]	; (8015ae8 <process_control_request+0x2d0>)
 8015a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a6a:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 8015a6c:	79fb      	ldrb	r3, [r7, #7]
 8015a6e:	6839      	ldr	r1, [r7, #0]
 8015a70:	4618      	mov	r0, r3
 8015a72:	f001 f819 	bl	8016aa8 <tud_control_status>
        }
        break;
 8015a76:	e073      	b.n	8015b60 <process_control_request+0x348>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8015a78:	79fb      	ldrb	r3, [r7, #7]
 8015a7a:	6839      	ldr	r1, [r7, #0]
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f000 faaf 	bl	8015fe0 <process_get_descriptor>
 8015a82:	4603      	mov	r3, r0
 8015a84:	f083 0301 	eor.w	r3, r3, #1
 8015a88:	b2db      	uxtb	r3, r3
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d067      	beq.n	8015b5e <process_control_request+0x346>
 8015a8e:	2300      	movs	r3, #0
 8015a90:	e172      	b.n	8015d78 <process_control_request+0x560>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8015a92:	683b      	ldr	r3, [r7, #0]
 8015a94:	885b      	ldrh	r3, [r3, #2]
 8015a96:	b29b      	uxth	r3, r3
 8015a98:	2b01      	cmp	r3, #1
 8015a9a:	d001      	beq.n	8015aa0 <process_control_request+0x288>
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	e16b      	b.n	8015d78 <process_control_request+0x560>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");
 8015aa0:	4813      	ldr	r0, [pc, #76]	; (8015af0 <process_control_request+0x2d8>)
 8015aa2:	f003 fc19 	bl	80192d8 <puts>

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8015aa6:	4a10      	ldr	r2, [pc, #64]	; (8015ae8 <process_control_request+0x2d0>)
 8015aa8:	7813      	ldrb	r3, [r2, #0]
 8015aaa:	f043 0308 	orr.w	r3, r3, #8
 8015aae:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8015ab0:	79fb      	ldrb	r3, [r7, #7]
 8015ab2:	6839      	ldr	r1, [r7, #0]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f000 fff7 	bl	8016aa8 <tud_control_status>
        break;
 8015aba:	e051      	b.n	8015b60 <process_control_request+0x348>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	885b      	ldrh	r3, [r3, #2]
 8015ac0:	b29b      	uxth	r3, r3
 8015ac2:	2b01      	cmp	r3, #1
 8015ac4:	d016      	beq.n	8015af4 <process_control_request+0x2dc>
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	e156      	b.n	8015d78 <process_control_request+0x560>
 8015aca:	bf00      	nop
 8015acc:	0801c9ec 	.word	0x0801c9ec
 8015ad0:	0801b764 	.word	0x0801b764
 8015ad4:	e000edf0 	.word	0xe000edf0
 8015ad8:	00000000 	.word	0x00000000
 8015adc:	0801c994 	.word	0x0801c994
 8015ae0:	0801b834 	.word	0x0801b834
 8015ae4:	0801b788 	.word	0x0801b788
 8015ae8:	20009354 	.word	0x20009354
 8015aec:	0801b83c 	.word	0x0801b83c
 8015af0:	0801b874 	.word	0x0801b874

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");
 8015af4:	48a2      	ldr	r0, [pc, #648]	; (8015d80 <process_control_request+0x568>)
 8015af6:	f003 fbef 	bl	80192d8 <puts>

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8015afa:	4aa2      	ldr	r2, [pc, #648]	; (8015d84 <process_control_request+0x56c>)
 8015afc:	7813      	ldrb	r3, [r2, #0]
 8015afe:	f36f 03c3 	bfc	r3, #3, #1
 8015b02:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8015b04:	79fb      	ldrb	r3, [r7, #7]
 8015b06:	6839      	ldr	r1, [r7, #0]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f000 ffcd 	bl	8016aa8 <tud_control_status>
        break;
 8015b0e:	e027      	b.n	8015b60 <process_control_request+0x348>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
 8015b10:	4b9c      	ldr	r3, [pc, #624]	; (8015d84 <process_control_request+0x56c>)
 8015b12:	781b      	ldrb	r3, [r3, #0]
 8015b14:	095b      	lsrs	r3, r3, #5
 8015b16:	b2db      	uxtb	r3, r3
 8015b18:	b21b      	sxth	r3, r3
 8015b1a:	f003 0301 	and.w	r3, r3, #1
 8015b1e:	b21a      	sxth	r2, r3
 8015b20:	4b98      	ldr	r3, [pc, #608]	; (8015d84 <process_control_request+0x56c>)
 8015b22:	781b      	ldrb	r3, [r3, #0]
 8015b24:	089b      	lsrs	r3, r3, #2
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	b21b      	sxth	r3, r3
 8015b2a:	f003 0302 	and.w	r3, r3, #2
 8015b2e:	b21b      	sxth	r3, r3
 8015b30:	4313      	orrs	r3, r2
 8015b32:	b21b      	sxth	r3, r3
 8015b34:	b29b      	uxth	r3, r3
 8015b36:	81fb      	strh	r3, [r7, #14]
          tud_control_xfer(rhport, p_request, &status, 2);
 8015b38:	f107 020e 	add.w	r2, r7, #14
 8015b3c:	79f8      	ldrb	r0, [r7, #7]
 8015b3e:	2302      	movs	r3, #2
 8015b40:	6839      	ldr	r1, [r7, #0]
 8015b42:	f001 f80f 	bl	8016b64 <tud_control_xfer>
        }
        break;
 8015b46:	e00b      	b.n	8015b60 <process_control_request+0x348>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8015b48:	4b8f      	ldr	r3, [pc, #572]	; (8015d88 <process_control_request+0x570>)
 8015b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	f003 0301 	and.w	r3, r3, #1
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d000      	beq.n	8015b5a <process_control_request+0x342>
 8015b58:	be00      	bkpt	0x0000
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	e10c      	b.n	8015d78 <process_control_request+0x560>
        break;
 8015b5e:	bf00      	nop
      }
    break;
 8015b60:	e109      	b.n	8015d76 <process_control_request+0x55e>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	889b      	ldrh	r3, [r3, #4]
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	82bb      	strh	r3, [r7, #20]
 8015b6a:	8abb      	ldrh	r3, [r7, #20]
 8015b6c:	b2db      	uxtb	r3, r3
 8015b6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8015b72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b76:	2b0f      	cmp	r3, #15
 8015b78:	d901      	bls.n	8015b7e <process_control_request+0x366>
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	e0fc      	b.n	8015d78 <process_control_request+0x560>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8015b7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b82:	4a80      	ldr	r2, [pc, #512]	; (8015d84 <process_control_request+0x56c>)
 8015b84:	4413      	add	r3, r2
 8015b86:	78db      	ldrb	r3, [r3, #3]
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7ff faff 	bl	801518c <get_driver>
 8015b8e:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 8015b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d101      	bne.n	8015b9a <process_control_request+0x382>
 8015b96:	2300      	movs	r3, #0
 8015b98:	e0ee      	b.n	8015d78 <process_control_request+0x560>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8015b9a:	79fb      	ldrb	r3, [r7, #7]
 8015b9c:	683a      	ldr	r2, [r7, #0]
 8015b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7ff fe19 	bl	80157d8 <invoke_class_control>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	f083 0301 	eor.w	r3, r3, #1
 8015bac:	b2db      	uxtb	r3, r3
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d026      	beq.n	8015c00 <process_control_request+0x3e8>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015bba:	b2db      	uxtb	r3, r3
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d001      	beq.n	8015bc4 <process_control_request+0x3ac>
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	e0d9      	b.n	8015d78 <process_control_request+0x560>

        switch(p_request->bRequest)
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	785b      	ldrb	r3, [r3, #1]
 8015bc8:	3b0a      	subs	r3, #10
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d816      	bhi.n	8015bfc <process_control_request+0x3e4>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8015bce:	2000      	movs	r0, #0
 8015bd0:	f001 f856 	bl	8016c80 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	785b      	ldrb	r3, [r3, #1]
 8015bd8:	2b0a      	cmp	r3, #10
 8015bda:	d109      	bne.n	8015bf0 <process_control_request+0x3d8>
            {
              uint8_t alternate = 0;
 8015bdc:	2300      	movs	r3, #0
 8015bde:	737b      	strb	r3, [r7, #13]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8015be0:	f107 020d 	add.w	r2, r7, #13
 8015be4:	79f8      	ldrb	r0, [r7, #7]
 8015be6:	2301      	movs	r3, #1
 8015be8:	6839      	ldr	r1, [r7, #0]
 8015bea:	f000 ffbb 	bl	8016b64 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8015bee:	e008      	b.n	8015c02 <process_control_request+0x3ea>
              tud_control_status(rhport, p_request);
 8015bf0:	79fb      	ldrb	r3, [r7, #7]
 8015bf2:	6839      	ldr	r1, [r7, #0]
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f000 ff57 	bl	8016aa8 <tud_control_status>
          break;
 8015bfa:	e002      	b.n	8015c02 <process_control_request+0x3ea>

          default: return false;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	e0bb      	b.n	8015d78 <process_control_request+0x560>
        }
      }
 8015c00:	bf00      	nop
    }
    break;
 8015c02:	e0b8      	b.n	8015d76 <process_control_request+0x55e>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8015c04:	683b      	ldr	r3, [r7, #0]
 8015c06:	889b      	ldrh	r3, [r3, #4]
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	827b      	strh	r3, [r7, #18]
 8015c0c:	8a7b      	ldrh	r3, [r7, #18]
 8015c0e:	b2db      	uxtb	r3, r3
 8015c10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8015c14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7ff f9a4 	bl	8014f66 <tu_edpt_number>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8015c24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f7ff f98e 	bl	8014f4a <tu_edpt_dir>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8015c34:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8015c38:	2b05      	cmp	r3, #5
 8015c3a:	d910      	bls.n	8015c5e <process_control_request+0x446>
 8015c3c:	f240 3233 	movw	r2, #819	; 0x333
 8015c40:	4952      	ldr	r1, [pc, #328]	; (8015d8c <process_control_request+0x574>)
 8015c42:	4853      	ldr	r0, [pc, #332]	; (8015d90 <process_control_request+0x578>)
 8015c44:	f003 faac 	bl	80191a0 <iprintf>
 8015c48:	4b4f      	ldr	r3, [pc, #316]	; (8015d88 <process_control_request+0x570>)
 8015c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8015c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	f003 0301 	and.w	r3, r3, #1
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d000      	beq.n	8015c5a <process_control_request+0x442>
 8015c58:	be00      	bkpt	0x0000
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	e08c      	b.n	8015d78 <process_control_request+0x560>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8015c5e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8015c62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8015c66:	4947      	ldr	r1, [pc, #284]	; (8015d84 <process_control_request+0x56c>)
 8015c68:	0052      	lsls	r2, r2, #1
 8015c6a:	440a      	add	r2, r1
 8015c6c:	4413      	add	r3, r2
 8015c6e:	3313      	adds	r3, #19
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7ff fa8a 	bl	801518c <get_driver>
 8015c78:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8015c7a:	683b      	ldr	r3, [r7, #0]
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c82:	b2db      	uxtb	r3, r3
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d00c      	beq.n	8015ca2 <process_control_request+0x48a>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8015c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d101      	bne.n	8015c92 <process_control_request+0x47a>
 8015c8e:	2300      	movs	r3, #0
 8015c90:	e072      	b.n	8015d78 <process_control_request+0x560>
        return invoke_class_control(rhport, driver, p_request);
 8015c92:	79fb      	ldrb	r3, [r7, #7]
 8015c94:	683a      	ldr	r2, [r7, #0]
 8015c96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7ff fd9d 	bl	80157d8 <invoke_class_control>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	e06a      	b.n	8015d78 <process_control_request+0x560>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	785b      	ldrb	r3, [r3, #1]
 8015ca6:	2b03      	cmp	r3, #3
 8015ca8:	d018      	beq.n	8015cdc <process_control_request+0x4c4>
 8015caa:	2b03      	cmp	r3, #3
 8015cac:	dc4b      	bgt.n	8015d46 <process_control_request+0x52e>
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d002      	beq.n	8015cb8 <process_control_request+0x4a0>
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	d012      	beq.n	8015cdc <process_control_request+0x4c4>
 8015cb6:	e046      	b.n	8015d46 <process_control_request+0x52e>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8015cb8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8015cbc:	79fb      	ldrb	r3, [r7, #7]
 8015cbe:	4611      	mov	r1, r2
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f000 fea1 	bl	8016a08 <usbd_edpt_stalled>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	817b      	strh	r3, [r7, #10]
            tud_control_xfer(rhport, p_request, &status, 2);
 8015ccc:	f107 020a 	add.w	r2, r7, #10
 8015cd0:	79f8      	ldrb	r0, [r7, #7]
 8015cd2:	2302      	movs	r3, #2
 8015cd4:	6839      	ldr	r1, [r7, #0]
 8015cd6:	f000 ff45 	bl	8016b64 <tud_control_xfer>
          }
          break;
 8015cda:	e040      	b.n	8015d5e <process_control_request+0x546>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	885b      	ldrh	r3, [r3, #2]
 8015ce0:	b29b      	uxth	r3, r3
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d112      	bne.n	8015d0c <process_control_request+0x4f4>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	785b      	ldrb	r3, [r3, #1]
 8015cea:	2b01      	cmp	r3, #1
 8015cec:	d107      	bne.n	8015cfe <process_control_request+0x4e6>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8015cee:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8015cf2:	79fb      	ldrb	r3, [r7, #7]
 8015cf4:	4611      	mov	r1, r2
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f000 fe3a 	bl	8016970 <usbd_edpt_clear_stall>
 8015cfc:	e006      	b.n	8015d0c <process_control_request+0x4f4>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8015cfe:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8015d02:	79fb      	ldrb	r3, [r7, #7]
 8015d04:	4611      	mov	r1, r2
 8015d06:	4618      	mov	r0, r3
 8015d08:	f000 fde2 	bl	80168d0 <usbd_edpt_stall>
              }
            }

            if (driver)
 8015d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d024      	beq.n	8015d5c <process_control_request+0x544>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8015d12:	79fb      	ldrb	r3, [r7, #7]
 8015d14:	683a      	ldr	r2, [r7, #0]
 8015d16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7ff fd5d 	bl	80157d8 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8015d1e:	2000      	movs	r0, #0
 8015d20:	f000 ffae 	bl	8016c80 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8015d24:	4b17      	ldr	r3, [pc, #92]	; (8015d84 <process_control_request+0x56c>)
 8015d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015d2e:	b2db      	uxtb	r3, r3
 8015d30:	f083 0301 	eor.w	r3, r3, #1
 8015d34:	b2db      	uxtb	r3, r3
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d010      	beq.n	8015d5c <process_control_request+0x544>
 8015d3a:	79fb      	ldrb	r3, [r7, #7]
 8015d3c:	6839      	ldr	r1, [r7, #0]
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f000 feb2 	bl	8016aa8 <tud_control_status>
            }
          }
          break;
 8015d44:	e00a      	b.n	8015d5c <process_control_request+0x544>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8015d46:	4b10      	ldr	r3, [pc, #64]	; (8015d88 <process_control_request+0x570>)
 8015d48:	647b      	str	r3, [r7, #68]	; 0x44
 8015d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	f003 0301 	and.w	r3, r3, #1
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d000      	beq.n	8015d58 <process_control_request+0x540>
 8015d56:	be00      	bkpt	0x0000
 8015d58:	2300      	movs	r3, #0
 8015d5a:	e00d      	b.n	8015d78 <process_control_request+0x560>
          break;
 8015d5c:	bf00      	nop
        }
      }
    }
    break;
 8015d5e:	e00a      	b.n	8015d76 <process_control_request+0x55e>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8015d60:	4b09      	ldr	r3, [pc, #36]	; (8015d88 <process_control_request+0x570>)
 8015d62:	61fb      	str	r3, [r7, #28]
 8015d64:	69fb      	ldr	r3, [r7, #28]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	f003 0301 	and.w	r3, r3, #1
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d000      	beq.n	8015d72 <process_control_request+0x55a>
 8015d70:	be00      	bkpt	0x0000
 8015d72:	2300      	movs	r3, #0
 8015d74:	e000      	b.n	8015d78 <process_control_request+0x560>
  }

  return true;
 8015d76:	2301      	movs	r3, #1
}
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3750      	adds	r7, #80	; 0x50
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}
 8015d80:	0801b890 	.word	0x0801b890
 8015d84:	20009354 	.word	0x20009354
 8015d88:	e000edf0 	.word	0xe000edf0
 8015d8c:	0801c9ec 	.word	0x0801c9ec
 8015d90:	0801b764 	.word	0x0801b764

08015d94 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b090      	sub	sp, #64	; 0x40
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	460a      	mov	r2, r1
 8015d9e:	71fb      	strb	r3, [r7, #7]
 8015da0:	4613      	mov	r3, r2
 8015da2:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8015da4:	79bb      	ldrb	r3, [r7, #6]
 8015da6:	3b01      	subs	r3, #1
 8015da8:	b2db      	uxtb	r3, r3
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7fc fa68 	bl	8012280 <tud_descriptor_configuration_cb>
 8015db0:	6378      	str	r0, [r7, #52]	; 0x34
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8015db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d003      	beq.n	8015dc0 <process_set_config+0x2c>
 8015db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dba:	785b      	ldrb	r3, [r3, #1]
 8015dbc:	2b02      	cmp	r3, #2
 8015dbe:	d010      	beq.n	8015de2 <process_set_config+0x4e>
 8015dc0:	f240 327b 	movw	r2, #891	; 0x37b
 8015dc4:	497d      	ldr	r1, [pc, #500]	; (8015fbc <process_set_config+0x228>)
 8015dc6:	487e      	ldr	r0, [pc, #504]	; (8015fc0 <process_set_config+0x22c>)
 8015dc8:	f003 f9ea 	bl	80191a0 <iprintf>
 8015dcc:	4b7d      	ldr	r3, [pc, #500]	; (8015fc4 <process_set_config+0x230>)
 8015dce:	60fb      	str	r3, [r7, #12]
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	f003 0301 	and.w	r3, r3, #1
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d000      	beq.n	8015dde <process_set_config+0x4a>
 8015ddc:	be00      	bkpt	0x0000
 8015dde:	2300      	movs	r3, #0
 8015de0:	e0e8      	b.n	8015fb4 <process_set_config+0x220>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8015de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015de4:	79db      	ldrb	r3, [r3, #7]
 8015de6:	115b      	asrs	r3, r3, #5
 8015de8:	f003 0301 	and.w	r3, r3, #1
 8015dec:	b2d9      	uxtb	r1, r3
 8015dee:	4a76      	ldr	r2, [pc, #472]	; (8015fc8 <process_set_config+0x234>)
 8015df0:	7813      	ldrb	r3, [r2, #0]
 8015df2:	f361 1304 	bfi	r3, r1, #4, #1
 8015df6:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1 : 0;
 8015df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dfa:	79db      	ldrb	r3, [r3, #7]
 8015dfc:	119b      	asrs	r3, r3, #6
 8015dfe:	f003 0301 	and.w	r3, r3, #1
 8015e02:	b2d9      	uxtb	r1, r3
 8015e04:	4a70      	ldr	r2, [pc, #448]	; (8015fc8 <process_set_config+0x234>)
 8015e06:	7813      	ldrb	r3, [r2, #0]
 8015e08:	f361 1345 	bfi	r3, r1, #5, #1
 8015e0c:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8015e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e10:	3309      	adds	r3, #9
 8015e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8015e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e16:	885b      	ldrh	r3, [r3, #2]
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	461a      	mov	r2, r3
 8015e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e1e:	4413      	add	r3, r2
 8015e20:	633b      	str	r3, [r7, #48]	; 0x30

  while( p_desc < desc_end )
 8015e22:	e0bc      	b.n	8015f9e <process_set_config+0x20a>
  {
    uint8_t assoc_itf_count = 1;
 8015e24:	2301      	movs	r3, #1
 8015e26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8015e2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e2c:	f7ff f8bb 	bl	8014fa6 <tu_desc_type>
 8015e30:	4603      	mov	r3, r0
 8015e32:	2b0b      	cmp	r3, #11
 8015e34:	d109      	bne.n	8015e4a <process_set_config+0xb6>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8015e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8015e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3c:	78db      	ldrb	r3, [r3, #3]
 8015e3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

      p_desc = tu_desc_next(p_desc); // next to Interface
 8015e42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e44:	f7ff f89e 	bl	8014f84 <tu_desc_next>
 8015e48:	63f8      	str	r0, [r7, #60]	; 0x3c
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8015e4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e4c:	f7ff f8ab 	bl	8014fa6 <tu_desc_type>
 8015e50:	4603      	mov	r3, r0
 8015e52:	2b04      	cmp	r3, #4
 8015e54:	d010      	beq.n	8015e78 <process_set_config+0xe4>
 8015e56:	f240 3296 	movw	r2, #918	; 0x396
 8015e5a:	4958      	ldr	r1, [pc, #352]	; (8015fbc <process_set_config+0x228>)
 8015e5c:	4858      	ldr	r0, [pc, #352]	; (8015fc0 <process_set_config+0x22c>)
 8015e5e:	f003 f99f 	bl	80191a0 <iprintf>
 8015e62:	4b58      	ldr	r3, [pc, #352]	; (8015fc4 <process_set_config+0x230>)
 8015e64:	613b      	str	r3, [r7, #16]
 8015e66:	693b      	ldr	r3, [r7, #16]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	f003 0301 	and.w	r3, r3, #1
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d000      	beq.n	8015e74 <process_set_config+0xe0>
 8015e72:	be00      	bkpt	0x0000
 8015e74:	2300      	movs	r3, #0
 8015e76:	e09d      	b.n	8015fb4 <process_set_config+0x220>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8015e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e7a:	62bb      	str	r3, [r7, #40]	; 0x28

    // Find driver for this interface
    uint16_t const remaining_len = desc_end-p_desc;
 8015e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e80:	1ad3      	subs	r3, r2, r3
 8015e82:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8015e84:	2300      	movs	r3, #0
 8015e86:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8015e8a:	e069      	b.n	8015f60 <process_set_config+0x1cc>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8015e8c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7ff f97b 	bl	801518c <get_driver>
 8015e96:	6238      	str	r0, [r7, #32]
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8015e98:	6a3b      	ldr	r3, [r7, #32]
 8015e9a:	68db      	ldr	r3, [r3, #12]
 8015e9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e9e:	79f8      	ldrb	r0, [r7, #7]
 8015ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ea2:	4798      	blx	r3
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	83fb      	strh	r3, [r7, #30]

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8015ea8:	8bfb      	ldrh	r3, [r7, #30]
 8015eaa:	2b08      	cmp	r3, #8
 8015eac:	d953      	bls.n	8015f56 <process_set_config+0x1c2>
 8015eae:	8bfa      	ldrh	r2, [r7, #30]
 8015eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d84f      	bhi.n	8015f56 <process_set_config+0x1c2>
      {
        // Open successfully
        TU_LOG2("  %s opened\r\n", driver->name);
 8015eb6:	6a3b      	ldr	r3, [r7, #32]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	4619      	mov	r1, r3
 8015ebc:	4843      	ldr	r0, [pc, #268]	; (8015fcc <process_set_config+0x238>)
 8015ebe:	f003 f96f 	bl	80191a0 <iprintf>

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8015ec2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015ec6:	2b01      	cmp	r3, #1
 8015ec8:	d107      	bne.n	8015eda <process_set_config+0x146>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8015eca:	6a3b      	ldr	r3, [r7, #32]
 8015ecc:	68db      	ldr	r3, [r3, #12]
 8015ece:	4a40      	ldr	r2, [pc, #256]	; (8015fd0 <process_set_config+0x23c>)
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	d102      	bne.n	8015eda <process_set_config+0x146>
 8015ed4:	2302      	movs	r3, #2
 8015ed6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8015eda:	2300      	movs	r3, #0
 8015edc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8015ee0:	e027      	b.n	8015f32 <process_set_config+0x19e>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8015ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee4:	789a      	ldrb	r2, [r3, #2]
 8015ee6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8015eea:	4413      	add	r3, r2
 8015eec:	777b      	strb	r3, [r7, #29]

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8015eee:	7f7b      	ldrb	r3, [r7, #29]
 8015ef0:	4a35      	ldr	r2, [pc, #212]	; (8015fc8 <process_set_config+0x234>)
 8015ef2:	4413      	add	r3, r2
 8015ef4:	78db      	ldrb	r3, [r3, #3]
 8015ef6:	2bff      	cmp	r3, #255	; 0xff
 8015ef8:	d010      	beq.n	8015f1c <process_set_config+0x188>
 8015efa:	f240 32bd 	movw	r2, #957	; 0x3bd
 8015efe:	492f      	ldr	r1, [pc, #188]	; (8015fbc <process_set_config+0x228>)
 8015f00:	482f      	ldr	r0, [pc, #188]	; (8015fc0 <process_set_config+0x22c>)
 8015f02:	f003 f94d 	bl	80191a0 <iprintf>
 8015f06:	4b2f      	ldr	r3, [pc, #188]	; (8015fc4 <process_set_config+0x230>)
 8015f08:	61bb      	str	r3, [r7, #24]
 8015f0a:	69bb      	ldr	r3, [r7, #24]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	f003 0301 	and.w	r3, r3, #1
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d000      	beq.n	8015f18 <process_set_config+0x184>
 8015f16:	be00      	bkpt	0x0000
 8015f18:	2300      	movs	r3, #0
 8015f1a:	e04b      	b.n	8015fb4 <process_set_config+0x220>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8015f1c:	7f7b      	ldrb	r3, [r7, #29]
 8015f1e:	4a2a      	ldr	r2, [pc, #168]	; (8015fc8 <process_set_config+0x234>)
 8015f20:	4413      	add	r3, r2
 8015f22:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8015f26:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8015f28:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8015f32:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8015f36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d3d1      	bcc.n	8015ee2 <process_set_config+0x14e>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8015f3e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8015f42:	8bfa      	ldrh	r2, [r7, #30]
 8015f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015f46:	4823      	ldr	r0, [pc, #140]	; (8015fd4 <process_set_config+0x240>)
 8015f48:	f002 fe10 	bl	8018b6c <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8015f4c:	8bfb      	ldrh	r3, [r7, #30]
 8015f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015f50:	4413      	add	r3, r2
 8015f52:	63fb      	str	r3, [r7, #60]	; 0x3c

        break; // exit driver find loop
 8015f54:	e00b      	b.n	8015f6e <process_set_config+0x1da>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8015f56:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8015f5a:	3301      	adds	r3, #1
 8015f5c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8015f60:	4b1d      	ldr	r3, [pc, #116]	; (8015fd8 <process_set_config+0x244>)
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	1c5a      	adds	r2, r3, #1
 8015f66:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	da8e      	bge.n	8015e8c <process_set_config+0xf8>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8015f6e:	4b1a      	ldr	r3, [pc, #104]	; (8015fd8 <process_set_config+0x244>)
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	1c5a      	adds	r2, r3, #1
 8015f74:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	da10      	bge.n	8015f9e <process_set_config+0x20a>
 8015f7c:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8015f80:	490e      	ldr	r1, [pc, #56]	; (8015fbc <process_set_config+0x228>)
 8015f82:	480f      	ldr	r0, [pc, #60]	; (8015fc0 <process_set_config+0x22c>)
 8015f84:	f003 f90c 	bl	80191a0 <iprintf>
 8015f88:	4b0e      	ldr	r3, [pc, #56]	; (8015fc4 <process_set_config+0x230>)
 8015f8a:	617b      	str	r3, [r7, #20]
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	f003 0301 	and.w	r3, r3, #1
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d000      	beq.n	8015f9a <process_set_config+0x206>
 8015f98:	be00      	bkpt	0x0000
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	e00a      	b.n	8015fb4 <process_set_config+0x220>
  while( p_desc < desc_end )
 8015f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	f4ff af3e 	bcc.w	8015e24 <process_set_config+0x90>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 8015fa8:	4b0c      	ldr	r3, [pc, #48]	; (8015fdc <process_set_config+0x248>)
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d001      	beq.n	8015fb2 <process_set_config+0x21e>
 8015fae:	f3af 8000 	nop.w

  return true;
 8015fb2:	2301      	movs	r3, #1
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3740      	adds	r7, #64	; 0x40
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	0801ca04 	.word	0x0801ca04
 8015fc0:	0801b764 	.word	0x0801b764
 8015fc4:	e000edf0 	.word	0xe000edf0
 8015fc8:	20009354 	.word	0x20009354
 8015fcc:	0801b8ac 	.word	0x0801b8ac
 8015fd0:	08012b11 	.word	0x08012b11
 8015fd4:	20009367 	.word	0x20009367
 8015fd8:	20009384 	.word	0x20009384
 8015fdc:	00000000 	.word	0x00000000

08015fe0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b092      	sub	sp, #72	; 0x48
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	6039      	str	r1, [r7, #0]
 8015fea:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8015fec:	683b      	ldr	r3, [r7, #0]
 8015fee:	885b      	ldrh	r3, [r3, #2]
 8015ff0:	b29b      	uxth	r3, r3
 8015ff2:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8015ff4:	8bbb      	ldrh	r3, [r7, #28]
 8015ff6:	0a1b      	lsrs	r3, r3, #8
 8015ff8:	b29b      	uxth	r3, r3
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	885b      	ldrh	r3, [r3, #2]
 8016004:	b29b      	uxth	r3, r3
 8016006:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8016008:	8bfb      	ldrh	r3, [r7, #30]
 801600a:	b2db      	uxtb	r3, r3
 801600c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

  switch(desc_type)
 8016010:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016014:	3b01      	subs	r3, #1
 8016016:	2b0e      	cmp	r3, #14
 8016018:	f200 80de 	bhi.w	80161d8 <process_get_descriptor+0x1f8>
 801601c:	a201      	add	r2, pc, #4	; (adr r2, 8016024 <process_get_descriptor+0x44>)
 801601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016022:	bf00      	nop
 8016024:	08016061 	.word	0x08016061
 8016028:	080160d9 	.word	0x080160d9
 801602c:	0801615f 	.word	0x0801615f
 8016030:	080161d9 	.word	0x080161d9
 8016034:	080161d9 	.word	0x080161d9
 8016038:	080161a1 	.word	0x080161a1
 801603c:	080160d9 	.word	0x080160d9
 8016040:	080161d9 	.word	0x080161d9
 8016044:	080161d9 	.word	0x080161d9
 8016048:	080161d9 	.word	0x080161d9
 801604c:	080161d9 	.word	0x080161d9
 8016050:	080161d9 	.word	0x080161d9
 8016054:	080161d9 	.word	0x080161d9
 8016058:	080161d9 	.word	0x080161d9
 801605c:	0801607d 	.word	0x0801607d
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG2(" Device\r\n");
 8016060:	4860      	ldr	r0, [pc, #384]	; (80161e4 <process_get_descriptor+0x204>)
 8016062:	f003 f939 	bl	80192d8 <puts>

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8016066:	f7fc f901 	bl	801226c <tud_descriptor_device_cb>
 801606a:	6238      	str	r0, [r7, #32]
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 801606c:	79f8      	ldrb	r0, [r7, #7]
 801606e:	2312      	movs	r3, #18
 8016070:	6a3a      	ldr	r2, [r7, #32]
 8016072:	6839      	ldr	r1, [r7, #0]
 8016074:	f000 fd76 	bl	8016b64 <tud_control_xfer>
 8016078:	4603      	mov	r3, r0
 801607a:	e0ae      	b.n	80161da <process_get_descriptor+0x1fa>
    }
    // break; // unreachable

    case TUSB_DESC_BOS:
    {
      TU_LOG2(" BOS\r\n");
 801607c:	485a      	ldr	r0, [pc, #360]	; (80161e8 <process_get_descriptor+0x208>)
 801607e:	f003 f92b 	bl	80192d8 <puts>

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8016082:	4b5a      	ldr	r3, [pc, #360]	; (80161ec <process_get_descriptor+0x20c>)
 8016084:	2b00      	cmp	r3, #0
 8016086:	d101      	bne.n	801608c <process_get_descriptor+0xac>
 8016088:	2300      	movs	r3, #0
 801608a:	e0a6      	b.n	80161da <process_get_descriptor+0x1fa>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 801608c:	f3af 8000 	nop.w
 8016090:	4603      	mov	r3, r0
 8016092:	63fb      	str	r3, [r7, #60]	; 0x3c
      TU_ASSERT(desc_bos);
 8016094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016096:	2b00      	cmp	r3, #0
 8016098:	d110      	bne.n	80160bc <process_get_descriptor+0xdc>
 801609a:	f240 32fd 	movw	r2, #1021	; 0x3fd
 801609e:	4954      	ldr	r1, [pc, #336]	; (80161f0 <process_get_descriptor+0x210>)
 80160a0:	4854      	ldr	r0, [pc, #336]	; (80161f4 <process_get_descriptor+0x214>)
 80160a2:	f003 f87d 	bl	80191a0 <iprintf>
 80160a6:	4b54      	ldr	r3, [pc, #336]	; (80161f8 <process_get_descriptor+0x218>)
 80160a8:	637b      	str	r3, [r7, #52]	; 0x34
 80160aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	f003 0301 	and.w	r3, r3, #1
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d000      	beq.n	80160b8 <process_get_descriptor+0xd8>
 80160b6:	be00      	bkpt	0x0000
 80160b8:	2300      	movs	r3, #0
 80160ba:	e08e      	b.n	80161da <process_get_descriptor+0x1fa>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80160bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160be:	3302      	adds	r3, #2
 80160c0:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 80160c2:	69bb      	ldr	r3, [r7, #24]
 80160c4:	881b      	ldrh	r3, [r3, #0]
 80160c6:	877b      	strh	r3, [r7, #58]	; 0x3a

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80160c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80160ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160cc:	79f8      	ldrb	r0, [r7, #7]
 80160ce:	6839      	ldr	r1, [r7, #0]
 80160d0:	f000 fd48 	bl	8016b64 <tud_control_xfer>
 80160d4:	4603      	mov	r3, r0
 80160d6:	e080      	b.n	80161da <process_get_descriptor+0x1fa>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 80160d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80160dc:	2b02      	cmp	r3, #2
 80160de:	d10d      	bne.n	80160fc <process_get_descriptor+0x11c>
      {
        TU_LOG2(" Configuration[%u]\r\n", desc_index);
 80160e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80160e4:	4619      	mov	r1, r3
 80160e6:	4845      	ldr	r0, [pc, #276]	; (80161fc <process_get_descriptor+0x21c>)
 80160e8:	f003 f85a 	bl	80191a0 <iprintf>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80160ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7fc f8c5 	bl	8012280 <tud_descriptor_configuration_cb>
 80160f6:	4603      	mov	r3, r0
 80160f8:	647b      	str	r3, [r7, #68]	; 0x44
 80160fa:	e00e      	b.n	801611a <process_get_descriptor+0x13a>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG2(" Other Speed Configuration\r\n");
 80160fc:	4840      	ldr	r0, [pc, #256]	; (8016200 <process_get_descriptor+0x220>)
 80160fe:	f003 f8eb 	bl	80192d8 <puts>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8016102:	4b40      	ldr	r3, [pc, #256]	; (8016204 <process_get_descriptor+0x224>)
 8016104:	2b00      	cmp	r3, #0
 8016106:	d101      	bne.n	801610c <process_get_descriptor+0x12c>
 8016108:	2300      	movs	r3, #0
 801610a:	e066      	b.n	80161da <process_get_descriptor+0x1fa>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 801610c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016110:	4618      	mov	r0, r3
 8016112:	f3af 8000 	nop.w
 8016116:	4603      	mov	r3, r0
 8016118:	647b      	str	r3, [r7, #68]	; 0x44
      }

      TU_ASSERT(desc_config);
 801611a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801611c:	2b00      	cmp	r3, #0
 801611e:	d110      	bne.n	8016142 <process_get_descriptor+0x162>
 8016120:	f240 4217 	movw	r2, #1047	; 0x417
 8016124:	4932      	ldr	r1, [pc, #200]	; (80161f0 <process_get_descriptor+0x210>)
 8016126:	4833      	ldr	r0, [pc, #204]	; (80161f4 <process_get_descriptor+0x214>)
 8016128:	f003 f83a 	bl	80191a0 <iprintf>
 801612c:	4b32      	ldr	r3, [pc, #200]	; (80161f8 <process_get_descriptor+0x218>)
 801612e:	627b      	str	r3, [r7, #36]	; 0x24
 8016130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	f003 0301 	and.w	r3, r3, #1
 8016138:	2b00      	cmp	r3, #0
 801613a:	d000      	beq.n	801613e <process_get_descriptor+0x15e>
 801613c:	be00      	bkpt	0x0000
 801613e:	2300      	movs	r3, #0
 8016140:	e04b      	b.n	80161da <process_get_descriptor+0x1fa>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8016142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016144:	3302      	adds	r3, #2
 8016146:	617b      	str	r3, [r7, #20]
 8016148:	697b      	ldr	r3, [r7, #20]
 801614a:	881b      	ldrh	r3, [r3, #0]
 801614c:	857b      	strh	r3, [r7, #42]	; 0x2a

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 801614e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016150:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016152:	79f8      	ldrb	r0, [r7, #7]
 8016154:	6839      	ldr	r1, [r7, #0]
 8016156:	f000 fd05 	bl	8016b64 <tud_control_xfer>
 801615a:	4603      	mov	r3, r0
 801615c:	e03d      	b.n	80161da <process_get_descriptor+0x1fa>
    }
    // break; // unreachable

    case TUSB_DESC_STRING:
    {
      TU_LOG2(" String[%u]\r\n", desc_index);
 801615e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016162:	4619      	mov	r1, r3
 8016164:	4828      	ldr	r0, [pc, #160]	; (8016208 <process_get_descriptor+0x228>)
 8016166:	f003 f81b 	bl	80191a0 <iprintf>

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	889b      	ldrh	r3, [r3, #4]
 801616e:	b29a      	uxth	r2, r3
 8016170:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8016174:	4611      	mov	r1, r2
 8016176:	4618      	mov	r0, r3
 8016178:	f7fc f890 	bl	801229c <tud_descriptor_string_cb>
 801617c:	62f8      	str	r0, [r7, #44]	; 0x2c
      TU_VERIFY(desc_str);
 801617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016180:	2b00      	cmp	r3, #0
 8016182:	d101      	bne.n	8016188 <process_get_descriptor+0x1a8>
 8016184:	2300      	movs	r3, #0
 8016186:	e028      	b.n	80161da <process_get_descriptor+0x1fa>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8016188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801618a:	f7fe ff19 	bl	8014fc0 <tu_desc_len>
 801618e:	4603      	mov	r3, r0
 8016190:	b29b      	uxth	r3, r3
 8016192:	79f8      	ldrb	r0, [r7, #7]
 8016194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016196:	6839      	ldr	r1, [r7, #0]
 8016198:	f000 fce4 	bl	8016b64 <tud_control_xfer>
 801619c:	4603      	mov	r3, r0
 801619e:	e01c      	b.n	80161da <process_get_descriptor+0x1fa>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG2(" Device Qualifier\r\n");
 80161a0:	481a      	ldr	r0, [pc, #104]	; (801620c <process_get_descriptor+0x22c>)
 80161a2:	f003 f899 	bl	80192d8 <puts>

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 80161a6:	4b1a      	ldr	r3, [pc, #104]	; (8016210 <process_get_descriptor+0x230>)
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d101      	bne.n	80161b0 <process_get_descriptor+0x1d0>
 80161ac:	2300      	movs	r3, #0
 80161ae:	e014      	b.n	80161da <process_get_descriptor+0x1fa>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80161b0:	f3af 8000 	nop.w
 80161b4:	6338      	str	r0, [r7, #48]	; 0x30
      TU_VERIFY(desc_qualifier);
 80161b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d101      	bne.n	80161c0 <process_get_descriptor+0x1e0>
 80161bc:	2300      	movs	r3, #0
 80161be:	e00c      	b.n	80161da <process_get_descriptor+0x1fa>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80161c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161c2:	f7fe fefd 	bl	8014fc0 <tu_desc_len>
 80161c6:	4603      	mov	r3, r0
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	79f8      	ldrb	r0, [r7, #7]
 80161cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161ce:	6839      	ldr	r1, [r7, #0]
 80161d0:	f000 fcc8 	bl	8016b64 <tud_control_xfer>
 80161d4:	4603      	mov	r3, r0
 80161d6:	e000      	b.n	80161da <process_get_descriptor+0x1fa>
    }
    // break; // unreachable

    default: return false;
 80161d8:	2300      	movs	r3, #0
  }
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3748      	adds	r7, #72	; 0x48
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}
 80161e2:	bf00      	nop
 80161e4:	0801b8bc 	.word	0x0801b8bc
 80161e8:	0801b8c8 	.word	0x0801b8c8
 80161ec:	00000000 	.word	0x00000000
 80161f0:	0801ca18 	.word	0x0801ca18
 80161f4:	0801b764 	.word	0x0801b764
 80161f8:	e000edf0 	.word	0xe000edf0
 80161fc:	0801b8d0 	.word	0x0801b8d0
 8016200:	0801b8e8 	.word	0x0801b8e8
 8016204:	00000000 	.word	0x00000000
 8016208:	0801b904 	.word	0x0801b904
 801620c:	0801b914 	.word	0x0801b914
 8016210:	00000000 	.word	0x00000000

08016214 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b086      	sub	sp, #24
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
 801621c:	460b      	mov	r3, r1
 801621e:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	785b      	ldrb	r3, [r3, #1]
 8016224:	3b02      	subs	r3, #2
 8016226:	2b03      	cmp	r3, #3
 8016228:	d86c      	bhi.n	8016304 <dcd_event_handler+0xf0>
 801622a:	a201      	add	r2, pc, #4	; (adr r2, 8016230 <dcd_event_handler+0x1c>)
 801622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016230:	08016241 	.word	0x08016241
 8016234:	080162c5 	.word	0x080162c5
 8016238:	08016275 	.word	0x08016275
 801623c:	0801629d 	.word	0x0801629d
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8016240:	4a39      	ldr	r2, [pc, #228]	; (8016328 <dcd_event_handler+0x114>)
 8016242:	7813      	ldrb	r3, [r2, #0]
 8016244:	f36f 0300 	bfc	r3, #0, #1
 8016248:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 801624a:	4a37      	ldr	r2, [pc, #220]	; (8016328 <dcd_event_handler+0x114>)
 801624c:	7813      	ldrb	r3, [r2, #0]
 801624e:	f36f 0341 	bfc	r3, #1, #1
 8016252:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8016254:	4b34      	ldr	r3, [pc, #208]	; (8016328 <dcd_event_handler+0x114>)
 8016256:	2200      	movs	r2, #0
 8016258:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 801625a:	4a33      	ldr	r2, [pc, #204]	; (8016328 <dcd_event_handler+0x114>)
 801625c:	7813      	ldrb	r3, [r2, #0]
 801625e:	f36f 0382 	bfc	r3, #2, #1
 8016262:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8016264:	4b31      	ldr	r3, [pc, #196]	; (801632c <dcd_event_handler+0x118>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	78fa      	ldrb	r2, [r7, #3]
 801626a:	6879      	ldr	r1, [r7, #4]
 801626c:	4618      	mov	r0, r3
 801626e:	f7fe ff53 	bl	8015118 <osal_queue_send>
    break;
 8016272:	e054      	b.n	801631e <dcd_event_handler+0x10a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8016274:	4b2c      	ldr	r3, [pc, #176]	; (8016328 <dcd_event_handler+0x114>)
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801627c:	b2db      	uxtb	r3, r3
 801627e:	2b00      	cmp	r3, #0
 8016280:	d048      	beq.n	8016314 <dcd_event_handler+0x100>
      {
        _usbd_dev.suspended = 1;
 8016282:	4a29      	ldr	r2, [pc, #164]	; (8016328 <dcd_event_handler+0x114>)
 8016284:	7813      	ldrb	r3, [r2, #0]
 8016286:	f043 0304 	orr.w	r3, r3, #4
 801628a:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 801628c:	4b27      	ldr	r3, [pc, #156]	; (801632c <dcd_event_handler+0x118>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	78fa      	ldrb	r2, [r7, #3]
 8016292:	6879      	ldr	r1, [r7, #4]
 8016294:	4618      	mov	r0, r3
 8016296:	f7fe ff3f 	bl	8015118 <osal_queue_send>
      }
    break;
 801629a:	e03b      	b.n	8016314 <dcd_event_handler+0x100>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 801629c:	4b22      	ldr	r3, [pc, #136]	; (8016328 <dcd_event_handler+0x114>)
 801629e:	781b      	ldrb	r3, [r3, #0]
 80162a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80162a4:	b2db      	uxtb	r3, r3
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d036      	beq.n	8016318 <dcd_event_handler+0x104>
      {
        _usbd_dev.suspended = 0;
 80162aa:	4a1f      	ldr	r2, [pc, #124]	; (8016328 <dcd_event_handler+0x114>)
 80162ac:	7813      	ldrb	r3, [r2, #0]
 80162ae:	f36f 0382 	bfc	r3, #2, #1
 80162b2:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80162b4:	4b1d      	ldr	r3, [pc, #116]	; (801632c <dcd_event_handler+0x118>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	78fa      	ldrb	r2, [r7, #3]
 80162ba:	6879      	ldr	r1, [r7, #4]
 80162bc:	4618      	mov	r0, r3
 80162be:	f7fe ff2b 	bl	8015118 <osal_queue_send>
      }
    break;
 80162c2:	e029      	b.n	8016318 <dcd_event_handler+0x104>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 80162c4:	4b18      	ldr	r3, [pc, #96]	; (8016328 <dcd_event_handler+0x114>)
 80162c6:	781b      	ldrb	r3, [r3, #0]
 80162c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80162cc:	b2db      	uxtb	r3, r3
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d024      	beq.n	801631c <dcd_event_handler+0x108>
      {
        _usbd_dev.suspended = 0;
 80162d2:	4a15      	ldr	r2, [pc, #84]	; (8016328 <dcd_event_handler+0x114>)
 80162d4:	7813      	ldrb	r3, [r2, #0]
 80162d6:	f36f 0382 	bfc	r3, #2, #1
 80162da:	7013      	strb	r3, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80162dc:	f107 030c 	add.w	r3, r7, #12
 80162e0:	2200      	movs	r2, #0
 80162e2:	601a      	str	r2, [r3, #0]
 80162e4:	605a      	str	r2, [r3, #4]
 80162e6:	609a      	str	r2, [r3, #8]
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	733b      	strb	r3, [r7, #12]
 80162ee:	2305      	movs	r3, #5
 80162f0:	737b      	strb	r3, [r7, #13]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 80162f2:	4b0e      	ldr	r3, [pc, #56]	; (801632c <dcd_event_handler+0x118>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	78fa      	ldrb	r2, [r7, #3]
 80162f8:	f107 010c 	add.w	r1, r7, #12
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7fe ff0b 	bl	8015118 <osal_queue_send>
      }
    break;
 8016302:	e00b      	b.n	801631c <dcd_event_handler+0x108>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8016304:	4b09      	ldr	r3, [pc, #36]	; (801632c <dcd_event_handler+0x118>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	78fa      	ldrb	r2, [r7, #3]
 801630a:	6879      	ldr	r1, [r7, #4]
 801630c:	4618      	mov	r0, r3
 801630e:	f7fe ff03 	bl	8015118 <osal_queue_send>
    break;
 8016312:	e004      	b.n	801631e <dcd_event_handler+0x10a>
    break;
 8016314:	bf00      	nop
 8016316:	e002      	b.n	801631e <dcd_event_handler+0x10a>
    break;
 8016318:	bf00      	nop
 801631a:	e000      	b.n	801631e <dcd_event_handler+0x10a>
    break;
 801631c:	bf00      	nop
  }
}
 801631e:	bf00      	nop
 8016320:	3718      	adds	r7, #24
 8016322:	46bd      	mov	sp, r7
 8016324:	bd80      	pop	{r7, pc}
 8016326:	bf00      	nop
 8016328:	20009354 	.word	0x20009354
 801632c:	20009448 	.word	0x20009448

08016330 <dcd_event_bus_signal>:

void dcd_event_bus_signal (uint8_t rhport, dcd_eventid_t eid, bool in_isr)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b086      	sub	sp, #24
 8016334:	af00      	add	r7, sp, #0
 8016336:	4603      	mov	r3, r0
 8016338:	71fb      	strb	r3, [r7, #7]
 801633a:	460b      	mov	r3, r1
 801633c:	71bb      	strb	r3, [r7, #6]
 801633e:	4613      	mov	r3, r2
 8016340:	717b      	strb	r3, [r7, #5]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8016342:	f107 030c 	add.w	r3, r7, #12
 8016346:	2200      	movs	r2, #0
 8016348:	601a      	str	r2, [r3, #0]
 801634a:	605a      	str	r2, [r3, #4]
 801634c:	609a      	str	r2, [r3, #8]
 801634e:	79fb      	ldrb	r3, [r7, #7]
 8016350:	733b      	strb	r3, [r7, #12]
 8016352:	79bb      	ldrb	r3, [r7, #6]
 8016354:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8016356:	797a      	ldrb	r2, [r7, #5]
 8016358:	f107 030c 	add.w	r3, r7, #12
 801635c:	4611      	mov	r1, r2
 801635e:	4618      	mov	r0, r3
 8016360:	f7ff ff58 	bl	8016214 <dcd_event_handler>
}
 8016364:	bf00      	nop
 8016366:	3718      	adds	r7, #24
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}

0801636c <dcd_event_bus_reset>:

void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b086      	sub	sp, #24
 8016370:	af00      	add	r7, sp, #0
 8016372:	4603      	mov	r3, r0
 8016374:	71fb      	strb	r3, [r7, #7]
 8016376:	460b      	mov	r3, r1
 8016378:	71bb      	strb	r3, [r7, #6]
 801637a:	4613      	mov	r3, r2
 801637c:	717b      	strb	r3, [r7, #5]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 801637e:	f107 030c 	add.w	r3, r7, #12
 8016382:	2200      	movs	r2, #0
 8016384:	601a      	str	r2, [r3, #0]
 8016386:	605a      	str	r2, [r3, #4]
 8016388:	609a      	str	r2, [r3, #8]
 801638a:	79fb      	ldrb	r3, [r7, #7]
 801638c:	733b      	strb	r3, [r7, #12]
 801638e:	2301      	movs	r3, #1
 8016390:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8016392:	79bb      	ldrb	r3, [r7, #6]
 8016394:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8016396:	797a      	ldrb	r2, [r7, #5]
 8016398:	f107 030c 	add.w	r3, r7, #12
 801639c:	4611      	mov	r1, r2
 801639e:	4618      	mov	r0, r3
 80163a0:	f7ff ff38 	bl	8016214 <dcd_event_handler>
}
 80163a4:	bf00      	nop
 80163a6:	3718      	adds	r7, #24
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}

080163ac <dcd_event_setup_received>:

void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b086      	sub	sp, #24
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	4603      	mov	r3, r0
 80163b4:	6039      	str	r1, [r7, #0]
 80163b6:	71fb      	strb	r3, [r7, #7]
 80163b8:	4613      	mov	r3, r2
 80163ba:	71bb      	strb	r3, [r7, #6]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 80163bc:	f107 030c 	add.w	r3, r7, #12
 80163c0:	2200      	movs	r2, #0
 80163c2:	601a      	str	r2, [r3, #0]
 80163c4:	605a      	str	r2, [r3, #4]
 80163c6:	609a      	str	r2, [r3, #8]
 80163c8:	79fb      	ldrb	r3, [r7, #7]
 80163ca:	733b      	strb	r3, [r7, #12]
 80163cc:	2306      	movs	r3, #6
 80163ce:	737b      	strb	r3, [r7, #13]
  memcpy(&event.setup_received, setup, 8);
 80163d0:	683a      	ldr	r2, [r7, #0]
 80163d2:	f107 0310 	add.w	r3, r7, #16
 80163d6:	6810      	ldr	r0, [r2, #0]
 80163d8:	6851      	ldr	r1, [r2, #4]
 80163da:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 80163dc:	79ba      	ldrb	r2, [r7, #6]
 80163de:	f107 030c 	add.w	r3, r7, #12
 80163e2:	4611      	mov	r1, r2
 80163e4:	4618      	mov	r0, r3
 80163e6:	f7ff ff15 	bl	8016214 <dcd_event_handler>
}
 80163ea:	bf00      	nop
 80163ec:	3718      	adds	r7, #24
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}

080163f2 <dcd_event_xfer_complete>:

void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
 80163f2:	b580      	push	{r7, lr}
 80163f4:	b086      	sub	sp, #24
 80163f6:	af00      	add	r7, sp, #0
 80163f8:	603a      	str	r2, [r7, #0]
 80163fa:	461a      	mov	r2, r3
 80163fc:	4603      	mov	r3, r0
 80163fe:	71fb      	strb	r3, [r7, #7]
 8016400:	460b      	mov	r3, r1
 8016402:	71bb      	strb	r3, [r7, #6]
 8016404:	4613      	mov	r3, r2
 8016406:	717b      	strb	r3, [r7, #5]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8016408:	f107 030c 	add.w	r3, r7, #12
 801640c:	2200      	movs	r2, #0
 801640e:	601a      	str	r2, [r3, #0]
 8016410:	605a      	str	r2, [r3, #4]
 8016412:	609a      	str	r2, [r3, #8]
 8016414:	79fb      	ldrb	r3, [r7, #7]
 8016416:	733b      	strb	r3, [r7, #12]
 8016418:	2307      	movs	r3, #7
 801641a:	737b      	strb	r3, [r7, #13]

  event.xfer_complete.ep_addr = ep_addr;
 801641c:	79bb      	ldrb	r3, [r7, #6]
 801641e:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 8016424:	797b      	ldrb	r3, [r7, #5]
 8016426:	747b      	strb	r3, [r7, #17]

  dcd_event_handler(&event, in_isr);
 8016428:	f897 2020 	ldrb.w	r2, [r7, #32]
 801642c:	f107 030c 	add.w	r3, r7, #12
 8016430:	4611      	mov	r1, r2
 8016432:	4618      	mov	r0, r3
 8016434:	f7ff feee 	bl	8016214 <dcd_event_handler>
}
 8016438:	bf00      	nop
 801643a:	3718      	adds	r7, #24
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <usbd_open_edpt_pair>:
// USBD API For Class Driver
//--------------------------------------------------------------------+

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b086      	sub	sp, #24
 8016444:	af00      	add	r7, sp, #0
 8016446:	6039      	str	r1, [r7, #0]
 8016448:	4611      	mov	r1, r2
 801644a:	461a      	mov	r2, r3
 801644c:	4603      	mov	r3, r0
 801644e:	71fb      	strb	r3, [r7, #7]
 8016450:	460b      	mov	r3, r1
 8016452:	71bb      	strb	r3, [r7, #6]
 8016454:	4613      	mov	r3, r2
 8016456:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8016458:	2300      	movs	r3, #0
 801645a:	617b      	str	r3, [r7, #20]
 801645c:	e053      	b.n	8016506 <usbd_open_edpt_pair+0xc6>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	613b      	str	r3, [r7, #16]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8016462:	693b      	ldr	r3, [r7, #16]
 8016464:	785b      	ldrb	r3, [r3, #1]
 8016466:	2b05      	cmp	r3, #5
 8016468:	d108      	bne.n	801647c <usbd_open_edpt_pair+0x3c>
 801646a:	693b      	ldr	r3, [r7, #16]
 801646c:	78db      	ldrb	r3, [r3, #3]
 801646e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8016472:	b2db      	uxtb	r3, r3
 8016474:	461a      	mov	r2, r3
 8016476:	797b      	ldrb	r3, [r7, #5]
 8016478:	4293      	cmp	r3, r2
 801647a:	d010      	beq.n	801649e <usbd_open_edpt_pair+0x5e>
 801647c:	f240 429f 	movw	r2, #1183	; 0x49f
 8016480:	4925      	ldr	r1, [pc, #148]	; (8016518 <usbd_open_edpt_pair+0xd8>)
 8016482:	4826      	ldr	r0, [pc, #152]	; (801651c <usbd_open_edpt_pair+0xdc>)
 8016484:	f002 fe8c 	bl	80191a0 <iprintf>
 8016488:	4b25      	ldr	r3, [pc, #148]	; (8016520 <usbd_open_edpt_pair+0xe0>)
 801648a:	60bb      	str	r3, [r7, #8]
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	f003 0301 	and.w	r3, r3, #1
 8016494:	2b00      	cmp	r3, #0
 8016496:	d000      	beq.n	801649a <usbd_open_edpt_pair+0x5a>
 8016498:	be00      	bkpt	0x0000
 801649a:	2300      	movs	r3, #0
 801649c:	e038      	b.n	8016510 <usbd_open_edpt_pair+0xd0>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 801649e:	79fb      	ldrb	r3, [r7, #7]
 80164a0:	6939      	ldr	r1, [r7, #16]
 80164a2:	4618      	mov	r0, r3
 80164a4:	f000 f83e 	bl	8016524 <usbd_edpt_open>
 80164a8:	4603      	mov	r3, r0
 80164aa:	f083 0301 	eor.w	r3, r3, #1
 80164ae:	b2db      	uxtb	r3, r3
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d010      	beq.n	80164d6 <usbd_open_edpt_pair+0x96>
 80164b4:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 80164b8:	4917      	ldr	r1, [pc, #92]	; (8016518 <usbd_open_edpt_pair+0xd8>)
 80164ba:	4818      	ldr	r0, [pc, #96]	; (801651c <usbd_open_edpt_pair+0xdc>)
 80164bc:	f002 fe70 	bl	80191a0 <iprintf>
 80164c0:	4b17      	ldr	r3, [pc, #92]	; (8016520 <usbd_open_edpt_pair+0xe0>)
 80164c2:	60fb      	str	r3, [r7, #12]
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	f003 0301 	and.w	r3, r3, #1
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d000      	beq.n	80164d2 <usbd_open_edpt_pair+0x92>
 80164d0:	be00      	bkpt	0x0000
 80164d2:	2300      	movs	r3, #0
 80164d4:	e01c      	b.n	8016510 <usbd_open_edpt_pair+0xd0>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	789b      	ldrb	r3, [r3, #2]
 80164da:	4618      	mov	r0, r3
 80164dc:	f7fe fd35 	bl	8014f4a <tu_edpt_dir>
 80164e0:	4603      	mov	r3, r0
 80164e2:	2b01      	cmp	r3, #1
 80164e4:	d104      	bne.n	80164f0 <usbd_open_edpt_pair+0xb0>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 80164e6:	693b      	ldr	r3, [r7, #16]
 80164e8:	789a      	ldrb	r2, [r3, #2]
 80164ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ec:	701a      	strb	r2, [r3, #0]
 80164ee:	e003      	b.n	80164f8 <usbd_open_edpt_pair+0xb8>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80164f0:	693b      	ldr	r3, [r7, #16]
 80164f2:	789a      	ldrb	r2, [r3, #2]
 80164f4:	6a3b      	ldr	r3, [r7, #32]
 80164f6:	701a      	strb	r2, [r3, #0]
    }

    p_desc = tu_desc_next(p_desc);
 80164f8:	6838      	ldr	r0, [r7, #0]
 80164fa:	f7fe fd43 	bl	8014f84 <tu_desc_next>
 80164fe:	6038      	str	r0, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8016500:	697b      	ldr	r3, [r7, #20]
 8016502:	3301      	adds	r3, #1
 8016504:	617b      	str	r3, [r7, #20]
 8016506:	79bb      	ldrb	r3, [r7, #6]
 8016508:	697a      	ldr	r2, [r7, #20]
 801650a:	429a      	cmp	r2, r3
 801650c:	dba7      	blt.n	801645e <usbd_open_edpt_pair+0x1e>
  }

  return true;
 801650e:	2301      	movs	r3, #1
}
 8016510:	4618      	mov	r0, r3
 8016512:	3718      	adds	r7, #24
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}
 8016518:	0801ca30 	.word	0x0801ca30
 801651c:	0801b764 	.word	0x0801b764
 8016520:	e000edf0 	.word	0xe000edf0

08016524 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b084      	sub	sp, #16
 8016528:	af00      	add	r7, sp, #0
 801652a:	4603      	mov	r3, r0
 801652c:	6039      	str	r1, [r7, #0]
 801652e:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8016530:	683b      	ldr	r3, [r7, #0]
 8016532:	789b      	ldrb	r3, [r3, #2]
 8016534:	4618      	mov	r0, r3
 8016536:	f7fe fd16 	bl	8014f66 <tu_edpt_number>
 801653a:	4603      	mov	r3, r0
 801653c:	2b05      	cmp	r3, #5
 801653e:	d910      	bls.n	8016562 <usbd_edpt_open+0x3e>
 8016540:	f240 42c5 	movw	r2, #1221	; 0x4c5
 8016544:	491a      	ldr	r1, [pc, #104]	; (80165b0 <usbd_edpt_open+0x8c>)
 8016546:	481b      	ldr	r0, [pc, #108]	; (80165b4 <usbd_edpt_open+0x90>)
 8016548:	f002 fe2a 	bl	80191a0 <iprintf>
 801654c:	4b1a      	ldr	r3, [pc, #104]	; (80165b8 <usbd_edpt_open+0x94>)
 801654e:	60bb      	str	r3, [r7, #8]
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	f003 0301 	and.w	r3, r3, #1
 8016558:	2b00      	cmp	r3, #0
 801655a:	d000      	beq.n	801655e <usbd_edpt_open+0x3a>
 801655c:	be00      	bkpt	0x0000
 801655e:	2300      	movs	r3, #0
 8016560:	e022      	b.n	80165a8 <usbd_edpt_open+0x84>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8016562:	4b16      	ldr	r3, [pc, #88]	; (80165bc <usbd_edpt_open+0x98>)
 8016564:	789b      	ldrb	r3, [r3, #2]
 8016566:	4619      	mov	r1, r3
 8016568:	6838      	ldr	r0, [r7, #0]
 801656a:	f002 fa67 	bl	8018a3c <tu_edpt_validate>
 801656e:	4603      	mov	r3, r0
 8016570:	f083 0301 	eor.w	r3, r3, #1
 8016574:	b2db      	uxtb	r3, r3
 8016576:	2b00      	cmp	r3, #0
 8016578:	d010      	beq.n	801659c <usbd_edpt_open+0x78>
 801657a:	f240 42c6 	movw	r2, #1222	; 0x4c6
 801657e:	490c      	ldr	r1, [pc, #48]	; (80165b0 <usbd_edpt_open+0x8c>)
 8016580:	480c      	ldr	r0, [pc, #48]	; (80165b4 <usbd_edpt_open+0x90>)
 8016582:	f002 fe0d 	bl	80191a0 <iprintf>
 8016586:	4b0c      	ldr	r3, [pc, #48]	; (80165b8 <usbd_edpt_open+0x94>)
 8016588:	60fb      	str	r3, [r7, #12]
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	f003 0301 	and.w	r3, r3, #1
 8016592:	2b00      	cmp	r3, #0
 8016594:	d000      	beq.n	8016598 <usbd_edpt_open+0x74>
 8016596:	be00      	bkpt	0x0000
 8016598:	2300      	movs	r3, #0
 801659a:	e005      	b.n	80165a8 <usbd_edpt_open+0x84>

  return dcd_edpt_open(rhport, desc_ep);
 801659c:	79fb      	ldrb	r3, [r7, #7]
 801659e:	6839      	ldr	r1, [r7, #0]
 80165a0:	4618      	mov	r0, r3
 80165a2:	f001 faf3 	bl	8017b8c <dcd_edpt_open>
 80165a6:	4603      	mov	r3, r0
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3710      	adds	r7, #16
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}
 80165b0:	0801ca44 	.word	0x0801ca44
 80165b4:	0801b764 	.word	0x0801b764
 80165b8:	e000edf0 	.word	0xe000edf0
 80165bc:	20009354 	.word	0x20009354

080165c0 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b084      	sub	sp, #16
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	4603      	mov	r3, r0
 80165c8:	460a      	mov	r2, r1
 80165ca:	71fb      	strb	r3, [r7, #7]
 80165cc:	4613      	mov	r3, r2
 80165ce:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80165d0:	79bb      	ldrb	r3, [r7, #6]
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7fe fcc7 	bl	8014f66 <tu_edpt_number>
 80165d8:	4603      	mov	r3, r0
 80165da:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80165dc:	79bb      	ldrb	r3, [r7, #6]
 80165de:	4618      	mov	r0, r3
 80165e0:	f7fe fcb3 	bl	8014f4a <tu_edpt_dir>
 80165e4:	4603      	mov	r3, r0
 80165e6:	73bb      	strb	r3, [r7, #14]

#if CFG_TUSB_OS != OPT_OS_NONE
  // pre-check to help reducing mutex lock
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
 80165e8:	7bfa      	ldrb	r2, [r7, #15]
 80165ea:	7bbb      	ldrb	r3, [r7, #14]
 80165ec:	4930      	ldr	r1, [pc, #192]	; (80166b0 <usbd_edpt_claim+0xf0>)
 80165ee:	0052      	lsls	r2, r2, #1
 80165f0:	440a      	add	r2, r1
 80165f2:	4413      	add	r3, r2
 80165f4:	3318      	adds	r3, #24
 80165f6:	79db      	ldrb	r3, [r3, #7]
 80165f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80165fc:	b2db      	uxtb	r3, r3
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d10c      	bne.n	801661c <usbd_edpt_claim+0x5c>
 8016602:	7bfa      	ldrb	r2, [r7, #15]
 8016604:	7bbb      	ldrb	r3, [r7, #14]
 8016606:	492a      	ldr	r1, [pc, #168]	; (80166b0 <usbd_edpt_claim+0xf0>)
 8016608:	0052      	lsls	r2, r2, #1
 801660a:	440a      	add	r2, r1
 801660c:	4413      	add	r3, r2
 801660e:	3318      	adds	r3, #24
 8016610:	79db      	ldrb	r3, [r3, #7]
 8016612:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016616:	b2db      	uxtb	r3, r3
 8016618:	2b00      	cmp	r3, #0
 801661a:	d001      	beq.n	8016620 <usbd_edpt_claim+0x60>
 801661c:	2300      	movs	r3, #0
 801661e:	e043      	b.n	80166a8 <usbd_edpt_claim+0xe8>
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 8016620:	4b24      	ldr	r3, [pc, #144]	; (80166b4 <usbd_edpt_claim+0xf4>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	f04f 31ff 	mov.w	r1, #4294967295
 8016628:	4618      	mov	r0, r3
 801662a:	f7fe fd26 	bl	801507a <osal_mutex_lock>
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
 801662e:	7bfa      	ldrb	r2, [r7, #15]
 8016630:	7bbb      	ldrb	r3, [r7, #14]
 8016632:	491f      	ldr	r1, [pc, #124]	; (80166b0 <usbd_edpt_claim+0xf0>)
 8016634:	0052      	lsls	r2, r2, #1
 8016636:	440a      	add	r2, r1
 8016638:	4413      	add	r3, r2
 801663a:	3318      	adds	r3, #24
 801663c:	79db      	ldrb	r3, [r3, #7]
 801663e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016642:	b2db      	uxtb	r3, r3
 8016644:	f083 0301 	eor.w	r3, r3, #1
 8016648:	b2db      	uxtb	r3, r3
 801664a:	2b00      	cmp	r3, #0
 801664c:	d011      	beq.n	8016672 <usbd_edpt_claim+0xb2>
 801664e:	7bfa      	ldrb	r2, [r7, #15]
 8016650:	7bbb      	ldrb	r3, [r7, #14]
 8016652:	4917      	ldr	r1, [pc, #92]	; (80166b0 <usbd_edpt_claim+0xf0>)
 8016654:	0052      	lsls	r2, r2, #1
 8016656:	440a      	add	r2, r1
 8016658:	4413      	add	r3, r2
 801665a:	3318      	adds	r3, #24
 801665c:	79db      	ldrb	r3, [r3, #7]
 801665e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016662:	b2db      	uxtb	r3, r3
 8016664:	f083 0301 	eor.w	r3, r3, #1
 8016668:	b2db      	uxtb	r3, r3
 801666a:	2b00      	cmp	r3, #0
 801666c:	d001      	beq.n	8016672 <usbd_edpt_claim+0xb2>
 801666e:	2301      	movs	r3, #1
 8016670:	e000      	b.n	8016674 <usbd_edpt_claim+0xb4>
 8016672:	2300      	movs	r3, #0
 8016674:	737b      	strb	r3, [r7, #13]
 8016676:	7b7b      	ldrb	r3, [r7, #13]
 8016678:	f003 0301 	and.w	r3, r3, #1
 801667c:	737b      	strb	r3, [r7, #13]
  if (ret)
 801667e:	7b7b      	ldrb	r3, [r7, #13]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d00b      	beq.n	801669c <usbd_edpt_claim+0xdc>
  {
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
 8016684:	7bfa      	ldrb	r2, [r7, #15]
 8016686:	7bbb      	ldrb	r3, [r7, #14]
 8016688:	4909      	ldr	r1, [pc, #36]	; (80166b0 <usbd_edpt_claim+0xf0>)
 801668a:	0052      	lsls	r2, r2, #1
 801668c:	440a      	add	r2, r1
 801668e:	4413      	add	r3, r2
 8016690:	f103 0218 	add.w	r2, r3, #24
 8016694:	79d3      	ldrb	r3, [r2, #7]
 8016696:	f043 0304 	orr.w	r3, r3, #4
 801669a:	71d3      	strb	r3, [r2, #7]
  }

#if CFG_TUSB_OS != OPT_OS_NONE
  osal_mutex_unlock(_usbd_mutex);
 801669c:	4b05      	ldr	r3, [pc, #20]	; (80166b4 <usbd_edpt_claim+0xf4>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7fe fcf8 	bl	8015096 <osal_mutex_unlock>
#endif

  return ret;
 80166a6:	7b7b      	ldrb	r3, [r7, #13]
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	3710      	adds	r7, #16
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}
 80166b0:	20009354 	.word	0x20009354
 80166b4:	20009494 	.word	0x20009494

080166b8 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	4603      	mov	r3, r0
 80166c0:	460a      	mov	r2, r1
 80166c2:	71fb      	strb	r3, [r7, #7]
 80166c4:	4613      	mov	r3, r2
 80166c6:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80166c8:	79bb      	ldrb	r3, [r7, #6]
 80166ca:	4618      	mov	r0, r3
 80166cc:	f7fe fc4b 	bl	8014f66 <tu_edpt_number>
 80166d0:	4603      	mov	r3, r0
 80166d2:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80166d4:	79bb      	ldrb	r3, [r7, #6]
 80166d6:	4618      	mov	r0, r3
 80166d8:	f7fe fc37 	bl	8014f4a <tu_edpt_dir>
 80166dc:	4603      	mov	r3, r0
 80166de:	73bb      	strb	r3, [r7, #14]

#if CFG_TUSB_OS != OPT_OS_NONE
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 80166e0:	4b22      	ldr	r3, [pc, #136]	; (801676c <usbd_edpt_release+0xb4>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	f04f 31ff 	mov.w	r1, #4294967295
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7fe fcc6 	bl	801507a <osal_mutex_lock>
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
 80166ee:	7bfa      	ldrb	r2, [r7, #15]
 80166f0:	7bbb      	ldrb	r3, [r7, #14]
 80166f2:	491f      	ldr	r1, [pc, #124]	; (8016770 <usbd_edpt_release+0xb8>)
 80166f4:	0052      	lsls	r2, r2, #1
 80166f6:	440a      	add	r2, r1
 80166f8:	4413      	add	r3, r2
 80166fa:	3318      	adds	r3, #24
 80166fc:	79db      	ldrb	r3, [r3, #7]
 80166fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016702:	b2db      	uxtb	r3, r3
 8016704:	f083 0301 	eor.w	r3, r3, #1
 8016708:	b2db      	uxtb	r3, r3
 801670a:	2b00      	cmp	r3, #0
 801670c:	d00e      	beq.n	801672c <usbd_edpt_release+0x74>
 801670e:	7bfa      	ldrb	r2, [r7, #15]
 8016710:	7bbb      	ldrb	r3, [r7, #14]
 8016712:	4917      	ldr	r1, [pc, #92]	; (8016770 <usbd_edpt_release+0xb8>)
 8016714:	0052      	lsls	r2, r2, #1
 8016716:	440a      	add	r2, r1
 8016718:	4413      	add	r3, r2
 801671a:	3318      	adds	r3, #24
 801671c:	79db      	ldrb	r3, [r3, #7]
 801671e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016722:	b2db      	uxtb	r3, r3
 8016724:	2b00      	cmp	r3, #0
 8016726:	d001      	beq.n	801672c <usbd_edpt_release+0x74>
 8016728:	2301      	movs	r3, #1
 801672a:	e000      	b.n	801672e <usbd_edpt_release+0x76>
 801672c:	2300      	movs	r3, #0
 801672e:	737b      	strb	r3, [r7, #13]
 8016730:	7b7b      	ldrb	r3, [r7, #13]
 8016732:	f003 0301 	and.w	r3, r3, #1
 8016736:	737b      	strb	r3, [r7, #13]
  if (ret)
 8016738:	7b7b      	ldrb	r3, [r7, #13]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d00b      	beq.n	8016756 <usbd_edpt_release+0x9e>
  {
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 801673e:	7bfa      	ldrb	r2, [r7, #15]
 8016740:	7bbb      	ldrb	r3, [r7, #14]
 8016742:	490b      	ldr	r1, [pc, #44]	; (8016770 <usbd_edpt_release+0xb8>)
 8016744:	0052      	lsls	r2, r2, #1
 8016746:	440a      	add	r2, r1
 8016748:	4413      	add	r3, r2
 801674a:	f103 0218 	add.w	r2, r3, #24
 801674e:	79d3      	ldrb	r3, [r2, #7]
 8016750:	f36f 0382 	bfc	r3, #2, #1
 8016754:	71d3      	strb	r3, [r2, #7]
  }

#if CFG_TUSB_OS != OPT_OS_NONE
  osal_mutex_unlock(_usbd_mutex);
 8016756:	4b05      	ldr	r3, [pc, #20]	; (801676c <usbd_edpt_release+0xb4>)
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	4618      	mov	r0, r3
 801675c:	f7fe fc9b 	bl	8015096 <osal_mutex_unlock>
#endif

  return ret;
 8016760:	7b7b      	ldrb	r3, [r7, #13]
}
 8016762:	4618      	mov	r0, r3
 8016764:	3710      	adds	r7, #16
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	20009494 	.word	0x20009494
 8016770:	20009354 	.word	0x20009354

08016774 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b086      	sub	sp, #24
 8016778:	af00      	add	r7, sp, #0
 801677a:	603a      	str	r2, [r7, #0]
 801677c:	461a      	mov	r2, r3
 801677e:	4603      	mov	r3, r0
 8016780:	71fb      	strb	r3, [r7, #7]
 8016782:	460b      	mov	r3, r1
 8016784:	71bb      	strb	r3, [r7, #6]
 8016786:	4613      	mov	r3, r2
 8016788:	80bb      	strh	r3, [r7, #4]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 801678a:	79bb      	ldrb	r3, [r7, #6]
 801678c:	4618      	mov	r0, r3
 801678e:	f7fe fbea 	bl	8014f66 <tu_edpt_number>
 8016792:	4603      	mov	r3, r0
 8016794:	75fb      	strb	r3, [r7, #23]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8016796:	79bb      	ldrb	r3, [r7, #6]
 8016798:	4618      	mov	r0, r3
 801679a:	f7fe fbd6 	bl	8014f4a <tu_edpt_dir>
 801679e:	4603      	mov	r3, r0
 80167a0:	75bb      	strb	r3, [r7, #22]

  // TODO skip ready() check for now since enumeration also use this API
  // TU_VERIFY(tud_ready());

  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
 80167a2:	79bb      	ldrb	r3, [r7, #6]
 80167a4:	88ba      	ldrh	r2, [r7, #4]
 80167a6:	4619      	mov	r1, r3
 80167a8:	4830      	ldr	r0, [pc, #192]	; (801686c <usbd_edpt_xfer+0xf8>)
 80167aa:	f002 fcf9 	bl	80191a0 <iprintf>

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80167ae:	7dfa      	ldrb	r2, [r7, #23]
 80167b0:	7dbb      	ldrb	r3, [r7, #22]
 80167b2:	492f      	ldr	r1, [pc, #188]	; (8016870 <usbd_edpt_xfer+0xfc>)
 80167b4:	0052      	lsls	r2, r2, #1
 80167b6:	440a      	add	r2, r1
 80167b8:	4413      	add	r3, r2
 80167ba:	3318      	adds	r3, #24
 80167bc:	79db      	ldrb	r3, [r3, #7]
 80167be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d010      	beq.n	80167ea <usbd_edpt_xfer+0x76>
 80167c8:	f240 520d 	movw	r2, #1293	; 0x50d
 80167cc:	4929      	ldr	r1, [pc, #164]	; (8016874 <usbd_edpt_xfer+0x100>)
 80167ce:	482a      	ldr	r0, [pc, #168]	; (8016878 <usbd_edpt_xfer+0x104>)
 80167d0:	f002 fce6 	bl	80191a0 <iprintf>
 80167d4:	4b29      	ldr	r3, [pc, #164]	; (801687c <usbd_edpt_xfer+0x108>)
 80167d6:	60fb      	str	r3, [r7, #12]
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	f003 0301 	and.w	r3, r3, #1
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d000      	beq.n	80167e6 <usbd_edpt_xfer+0x72>
 80167e4:	be00      	bkpt	0x0000
 80167e6:	2300      	movs	r3, #0
 80167e8:	e03b      	b.n	8016862 <usbd_edpt_xfer+0xee>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 80167ea:	7dfa      	ldrb	r2, [r7, #23]
 80167ec:	7dbb      	ldrb	r3, [r7, #22]
 80167ee:	4920      	ldr	r1, [pc, #128]	; (8016870 <usbd_edpt_xfer+0xfc>)
 80167f0:	0052      	lsls	r2, r2, #1
 80167f2:	440a      	add	r2, r1
 80167f4:	4413      	add	r3, r2
 80167f6:	f103 0218 	add.w	r2, r3, #24
 80167fa:	79d3      	ldrb	r3, [r2, #7]
 80167fc:	f043 0301 	orr.w	r3, r3, #1
 8016800:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8016802:	88bb      	ldrh	r3, [r7, #4]
 8016804:	79b9      	ldrb	r1, [r7, #6]
 8016806:	79f8      	ldrb	r0, [r7, #7]
 8016808:	683a      	ldr	r2, [r7, #0]
 801680a:	f001 fb37 	bl	8017e7c <dcd_edpt_xfer>
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d001      	beq.n	8016818 <usbd_edpt_xfer+0xa4>
  {
    return true;
 8016814:	2301      	movs	r3, #1
 8016816:	e024      	b.n	8016862 <usbd_edpt_xfer+0xee>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8016818:	7dfa      	ldrb	r2, [r7, #23]
 801681a:	7dbb      	ldrb	r3, [r7, #22]
 801681c:	4914      	ldr	r1, [pc, #80]	; (8016870 <usbd_edpt_xfer+0xfc>)
 801681e:	0052      	lsls	r2, r2, #1
 8016820:	440a      	add	r2, r1
 8016822:	4413      	add	r3, r2
 8016824:	f103 0218 	add.w	r2, r3, #24
 8016828:	79d3      	ldrb	r3, [r2, #7]
 801682a:	f36f 0300 	bfc	r3, #0, #1
 801682e:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8016830:	7dfa      	ldrb	r2, [r7, #23]
 8016832:	7dbb      	ldrb	r3, [r7, #22]
 8016834:	490e      	ldr	r1, [pc, #56]	; (8016870 <usbd_edpt_xfer+0xfc>)
 8016836:	0052      	lsls	r2, r2, #1
 8016838:	440a      	add	r2, r1
 801683a:	4413      	add	r3, r2
 801683c:	f103 0218 	add.w	r2, r3, #24
 8016840:	79d3      	ldrb	r3, [r2, #7]
 8016842:	f36f 0382 	bfc	r3, #2, #1
 8016846:	71d3      	strb	r3, [r2, #7]
    TU_LOG2("FAILED\r\n");
 8016848:	480d      	ldr	r0, [pc, #52]	; (8016880 <usbd_edpt_xfer+0x10c>)
 801684a:	f002 fd45 	bl	80192d8 <puts>
    TU_BREAKPOINT();
 801684e:	4b0b      	ldr	r3, [pc, #44]	; (801687c <usbd_edpt_xfer+0x108>)
 8016850:	613b      	str	r3, [r7, #16]
 8016852:	693b      	ldr	r3, [r7, #16]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	f003 0301 	and.w	r3, r3, #1
 801685a:	2b00      	cmp	r3, #0
 801685c:	d000      	beq.n	8016860 <usbd_edpt_xfer+0xec>
 801685e:	be00      	bkpt	0x0000
    return false;
 8016860:	2300      	movs	r3, #0
  }
}
 8016862:	4618      	mov	r0, r3
 8016864:	3718      	adds	r7, #24
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop
 801686c:	0801b928 	.word	0x0801b928
 8016870:	20009354 	.word	0x20009354
 8016874:	0801ca54 	.word	0x0801ca54
 8016878:	0801b764 	.word	0x0801b764
 801687c:	e000edf0 	.word	0xe000edf0
 8016880:	0801b94c 	.word	0x0801b94c

08016884 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b084      	sub	sp, #16
 8016888:	af00      	add	r7, sp, #0
 801688a:	4603      	mov	r3, r0
 801688c:	460a      	mov	r2, r1
 801688e:	71fb      	strb	r3, [r7, #7]
 8016890:	4613      	mov	r3, r2
 8016892:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8016894:	79bb      	ldrb	r3, [r7, #6]
 8016896:	4618      	mov	r0, r3
 8016898:	f7fe fb65 	bl	8014f66 <tu_edpt_number>
 801689c:	4603      	mov	r3, r0
 801689e:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80168a0:	79bb      	ldrb	r3, [r7, #6]
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7fe fb51 	bl	8014f4a <tu_edpt_dir>
 80168a8:	4603      	mov	r3, r0
 80168aa:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80168ac:	7bfa      	ldrb	r2, [r7, #15]
 80168ae:	7bbb      	ldrb	r3, [r7, #14]
 80168b0:	4906      	ldr	r1, [pc, #24]	; (80168cc <usbd_edpt_busy+0x48>)
 80168b2:	0052      	lsls	r2, r2, #1
 80168b4:	440a      	add	r2, r1
 80168b6:	4413      	add	r3, r2
 80168b8:	3318      	adds	r3, #24
 80168ba:	79db      	ldrb	r3, [r3, #7]
 80168bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80168c0:	b2db      	uxtb	r3, r3
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3710      	adds	r7, #16
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20009354 	.word	0x20009354

080168d0 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b084      	sub	sp, #16
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	4603      	mov	r3, r0
 80168d8:	460a      	mov	r2, r1
 80168da:	71fb      	strb	r3, [r7, #7]
 80168dc:	4613      	mov	r3, r2
 80168de:	71bb      	strb	r3, [r7, #6]

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80168e0:	79bb      	ldrb	r3, [r7, #6]
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7fe fb3f 	bl	8014f66 <tu_edpt_number>
 80168e8:	4603      	mov	r3, r0
 80168ea:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80168ec:	79bb      	ldrb	r3, [r7, #6]
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7fe fb2b 	bl	8014f4a <tu_edpt_dir>
 80168f4:	4603      	mov	r3, r0
 80168f6:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 80168f8:	7bfa      	ldrb	r2, [r7, #15]
 80168fa:	7bbb      	ldrb	r3, [r7, #14]
 80168fc:	491a      	ldr	r1, [pc, #104]	; (8016968 <usbd_edpt_stall+0x98>)
 80168fe:	0052      	lsls	r2, r2, #1
 8016900:	440a      	add	r2, r1
 8016902:	4413      	add	r3, r2
 8016904:	3318      	adds	r3, #24
 8016906:	79db      	ldrb	r3, [r3, #7]
 8016908:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801690c:	b2db      	uxtb	r3, r3
 801690e:	f083 0301 	eor.w	r3, r3, #1
 8016912:	b2db      	uxtb	r3, r3
 8016914:	2b00      	cmp	r3, #0
 8016916:	d022      	beq.n	801695e <usbd_edpt_stall+0x8e>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
 8016918:	79bb      	ldrb	r3, [r7, #6]
 801691a:	4619      	mov	r1, r3
 801691c:	4813      	ldr	r0, [pc, #76]	; (801696c <usbd_edpt_stall+0x9c>)
 801691e:	f002 fc3f 	bl	80191a0 <iprintf>
    dcd_edpt_stall(rhport, ep_addr);
 8016922:	79ba      	ldrb	r2, [r7, #6]
 8016924:	79fb      	ldrb	r3, [r7, #7]
 8016926:	4611      	mov	r1, r2
 8016928:	4618      	mov	r0, r3
 801692a:	f001 fbf7 	bl	801811c <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 801692e:	7bfa      	ldrb	r2, [r7, #15]
 8016930:	7bbb      	ldrb	r3, [r7, #14]
 8016932:	490d      	ldr	r1, [pc, #52]	; (8016968 <usbd_edpt_stall+0x98>)
 8016934:	0052      	lsls	r2, r2, #1
 8016936:	440a      	add	r2, r1
 8016938:	4413      	add	r3, r2
 801693a:	f103 0218 	add.w	r2, r3, #24
 801693e:	79d3      	ldrb	r3, [r2, #7]
 8016940:	f043 0302 	orr.w	r3, r3, #2
 8016944:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8016946:	7bfa      	ldrb	r2, [r7, #15]
 8016948:	7bbb      	ldrb	r3, [r7, #14]
 801694a:	4907      	ldr	r1, [pc, #28]	; (8016968 <usbd_edpt_stall+0x98>)
 801694c:	0052      	lsls	r2, r2, #1
 801694e:	440a      	add	r2, r1
 8016950:	4413      	add	r3, r2
 8016952:	f103 0218 	add.w	r2, r3, #24
 8016956:	79d3      	ldrb	r3, [r2, #7]
 8016958:	f043 0301 	orr.w	r3, r3, #1
 801695c:	71d3      	strb	r3, [r2, #7]
  }
}
 801695e:	bf00      	nop
 8016960:	3710      	adds	r7, #16
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	20009354 	.word	0x20009354
 801696c:	0801b988 	.word	0x0801b988

08016970 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b084      	sub	sp, #16
 8016974:	af00      	add	r7, sp, #0
 8016976:	4603      	mov	r3, r0
 8016978:	460a      	mov	r2, r1
 801697a:	71fb      	strb	r3, [r7, #7]
 801697c:	4613      	mov	r3, r2
 801697e:	71bb      	strb	r3, [r7, #6]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8016980:	79bb      	ldrb	r3, [r7, #6]
 8016982:	4618      	mov	r0, r3
 8016984:	f7fe faef 	bl	8014f66 <tu_edpt_number>
 8016988:	4603      	mov	r3, r0
 801698a:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 801698c:	79bb      	ldrb	r3, [r7, #6]
 801698e:	4618      	mov	r0, r3
 8016990:	f7fe fadb 	bl	8014f4a <tu_edpt_dir>
 8016994:	4603      	mov	r3, r0
 8016996:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8016998:	7bfa      	ldrb	r2, [r7, #15]
 801699a:	7bbb      	ldrb	r3, [r7, #14]
 801699c:	4918      	ldr	r1, [pc, #96]	; (8016a00 <usbd_edpt_clear_stall+0x90>)
 801699e:	0052      	lsls	r2, r2, #1
 80169a0:	440a      	add	r2, r1
 80169a2:	4413      	add	r3, r2
 80169a4:	3318      	adds	r3, #24
 80169a6:	79db      	ldrb	r3, [r3, #7]
 80169a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80169ac:	b2db      	uxtb	r3, r3
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d022      	beq.n	80169f8 <usbd_edpt_clear_stall+0x88>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
 80169b2:	79bb      	ldrb	r3, [r7, #6]
 80169b4:	4619      	mov	r1, r3
 80169b6:	4813      	ldr	r0, [pc, #76]	; (8016a04 <usbd_edpt_clear_stall+0x94>)
 80169b8:	f002 fbf2 	bl	80191a0 <iprintf>
    dcd_edpt_clear_stall(rhport, ep_addr);
 80169bc:	79ba      	ldrb	r2, [r7, #6]
 80169be:	79fb      	ldrb	r3, [r7, #7]
 80169c0:	4611      	mov	r1, r2
 80169c2:	4618      	mov	r0, r3
 80169c4:	f001 fbbc 	bl	8018140 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 80169c8:	7bfa      	ldrb	r2, [r7, #15]
 80169ca:	7bbb      	ldrb	r3, [r7, #14]
 80169cc:	490c      	ldr	r1, [pc, #48]	; (8016a00 <usbd_edpt_clear_stall+0x90>)
 80169ce:	0052      	lsls	r2, r2, #1
 80169d0:	440a      	add	r2, r1
 80169d2:	4413      	add	r3, r2
 80169d4:	f103 0218 	add.w	r2, r3, #24
 80169d8:	79d3      	ldrb	r3, [r2, #7]
 80169da:	f36f 0341 	bfc	r3, #1, #1
 80169de:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 80169e0:	7bfa      	ldrb	r2, [r7, #15]
 80169e2:	7bbb      	ldrb	r3, [r7, #14]
 80169e4:	4906      	ldr	r1, [pc, #24]	; (8016a00 <usbd_edpt_clear_stall+0x90>)
 80169e6:	0052      	lsls	r2, r2, #1
 80169e8:	440a      	add	r2, r1
 80169ea:	4413      	add	r3, r2
 80169ec:	f103 0218 	add.w	r2, r3, #24
 80169f0:	79d3      	ldrb	r3, [r2, #7]
 80169f2:	f36f 0300 	bfc	r3, #0, #1
 80169f6:	71d3      	strb	r3, [r2, #7]
  }
}
 80169f8:	bf00      	nop
 80169fa:	3710      	adds	r7, #16
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}
 8016a00:	20009354 	.word	0x20009354
 8016a04:	0801b99c 	.word	0x0801b99c

08016a08 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b084      	sub	sp, #16
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	4603      	mov	r3, r0
 8016a10:	460a      	mov	r2, r1
 8016a12:	71fb      	strb	r3, [r7, #7]
 8016a14:	4613      	mov	r3, r2
 8016a16:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8016a18:	79bb      	ldrb	r3, [r7, #6]
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f7fe faa3 	bl	8014f66 <tu_edpt_number>
 8016a20:	4603      	mov	r3, r0
 8016a22:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8016a24:	79bb      	ldrb	r3, [r7, #6]
 8016a26:	4618      	mov	r0, r3
 8016a28:	f7fe fa8f 	bl	8014f4a <tu_edpt_dir>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8016a30:	7bfa      	ldrb	r2, [r7, #15]
 8016a32:	7bbb      	ldrb	r3, [r7, #14]
 8016a34:	4906      	ldr	r1, [pc, #24]	; (8016a50 <usbd_edpt_stalled+0x48>)
 8016a36:	0052      	lsls	r2, r2, #1
 8016a38:	440a      	add	r2, r1
 8016a3a:	4413      	add	r3, r2
 8016a3c:	3318      	adds	r3, #24
 8016a3e:	79db      	ldrb	r3, [r3, #7]
 8016a40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016a44:	b2db      	uxtb	r3, r3
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	3710      	adds	r7, #16
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bd80      	pop	{r7, pc}
 8016a4e:	bf00      	nop
 8016a50:	20009354 	.word	0x20009354

08016a54 <tu_edpt_dir>:
{
 8016a54:	b480      	push	{r7}
 8016a56:	b083      	sub	sp, #12
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8016a5e:	79fb      	ldrb	r3, [r7, #7]
 8016a60:	09db      	lsrs	r3, r3, #7
 8016a62:	b2db      	uxtb	r3, r3
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	370c      	adds	r7, #12
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr

08016a70 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b084      	sub	sp, #16
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	4603      	mov	r3, r0
 8016a78:	6039      	str	r1, [r7, #0]
 8016a7a:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	781b      	ldrb	r3, [r3, #0]
 8016a80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d001      	beq.n	8016a8e <_status_stage_xact+0x1e>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	e000      	b.n	8016a90 <_status_stage_xact+0x20>
 8016a8e:	2380      	movs	r3, #128	; 0x80
 8016a90:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8016a92:	7bf9      	ldrb	r1, [r7, #15]
 8016a94:	79f8      	ldrb	r0, [r7, #7]
 8016a96:	2300      	movs	r3, #0
 8016a98:	2200      	movs	r2, #0
 8016a9a:	f7ff fe6b 	bl	8016774 <usbd_edpt_xfer>
 8016a9e:	4603      	mov	r3, r0
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3710      	adds	r7, #16
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}

08016aa8 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b082      	sub	sp, #8
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	4603      	mov	r3, r0
 8016ab0:	6039      	str	r1, [r7, #0]
 8016ab2:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8016ab4:	4b0b      	ldr	r3, [pc, #44]	; (8016ae4 <tud_control_status+0x3c>)
 8016ab6:	683a      	ldr	r2, [r7, #0]
 8016ab8:	6810      	ldr	r0, [r2, #0]
 8016aba:	6851      	ldr	r1, [r2, #4]
 8016abc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8016abe:	4b09      	ldr	r3, [pc, #36]	; (8016ae4 <tud_control_status+0x3c>)
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8016ac4:	4b07      	ldr	r3, [pc, #28]	; (8016ae4 <tud_control_status+0x3c>)
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8016aca:	4b06      	ldr	r3, [pc, #24]	; (8016ae4 <tud_control_status+0x3c>)
 8016acc:	2200      	movs	r2, #0
 8016ace:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8016ad0:	79fb      	ldrb	r3, [r7, #7]
 8016ad2:	6839      	ldr	r1, [r7, #0]
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7ff ffcb 	bl	8016a70 <_status_stage_xact>
 8016ada:	4603      	mov	r3, r0
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	3708      	adds	r7, #8
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}
 8016ae4:	20009498 	.word	0x20009498

08016ae8 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b084      	sub	sp, #16
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	4603      	mov	r3, r0
 8016af0:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8016af2:	4b1a      	ldr	r3, [pc, #104]	; (8016b5c <_data_stage_xact+0x74>)
 8016af4:	899a      	ldrh	r2, [r3, #12]
 8016af6:	4b19      	ldr	r3, [pc, #100]	; (8016b5c <_data_stage_xact+0x74>)
 8016af8:	89db      	ldrh	r3, [r3, #14]
 8016afa:	1ad3      	subs	r3, r2, r3
 8016afc:	b29b      	uxth	r3, r3
 8016afe:	817b      	strh	r3, [r7, #10]
 8016b00:	2340      	movs	r3, #64	; 0x40
 8016b02:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8016b04:	897a      	ldrh	r2, [r7, #10]
 8016b06:	893b      	ldrh	r3, [r7, #8]
 8016b08:	4293      	cmp	r3, r2
 8016b0a:	bf28      	it	cs
 8016b0c:	4613      	movcs	r3, r2
 8016b0e:	b29b      	uxth	r3, r3
 8016b10:	81bb      	strh	r3, [r7, #12]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8016b12:	2300      	movs	r3, #0
 8016b14:	73fb      	strb	r3, [r7, #15]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8016b16:	4b11      	ldr	r3, [pc, #68]	; (8016b5c <_data_stage_xact+0x74>)
 8016b18:	781b      	ldrb	r3, [r3, #0]
 8016b1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016b1e:	b2db      	uxtb	r3, r3
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d00b      	beq.n	8016b3c <_data_stage_xact+0x54>
  {
    ep_addr = EDPT_CTRL_IN;
 8016b24:	2380      	movs	r3, #128	; 0x80
 8016b26:	73fb      	strb	r3, [r7, #15]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 8016b28:	89bb      	ldrh	r3, [r7, #12]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d006      	beq.n	8016b3c <_data_stage_xact+0x54>
 8016b2e:	4b0b      	ldr	r3, [pc, #44]	; (8016b5c <_data_stage_xact+0x74>)
 8016b30:	689b      	ldr	r3, [r3, #8]
 8016b32:	89ba      	ldrh	r2, [r7, #12]
 8016b34:	4619      	mov	r1, r3
 8016b36:	480a      	ldr	r0, [pc, #40]	; (8016b60 <_data_stage_xact+0x78>)
 8016b38:	f002 fa6d 	bl	8019016 <memcpy>
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8016b3c:	89bb      	ldrh	r3, [r7, #12]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d001      	beq.n	8016b46 <_data_stage_xact+0x5e>
 8016b42:	4a07      	ldr	r2, [pc, #28]	; (8016b60 <_data_stage_xact+0x78>)
 8016b44:	e000      	b.n	8016b48 <_data_stage_xact+0x60>
 8016b46:	2200      	movs	r2, #0
 8016b48:	89bb      	ldrh	r3, [r7, #12]
 8016b4a:	7bf9      	ldrb	r1, [r7, #15]
 8016b4c:	79f8      	ldrb	r0, [r7, #7]
 8016b4e:	f7ff fe11 	bl	8016774 <usbd_edpt_xfer>
 8016b52:	4603      	mov	r3, r0
}
 8016b54:	4618      	mov	r0, r3
 8016b56:	3710      	adds	r7, #16
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}
 8016b5c:	20009498 	.word	0x20009498
 8016b60:	200094ac 	.word	0x200094ac

08016b64 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b088      	sub	sp, #32
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	60b9      	str	r1, [r7, #8]
 8016b6c:	607a      	str	r2, [r7, #4]
 8016b6e:	461a      	mov	r2, r3
 8016b70:	4603      	mov	r3, r0
 8016b72:	73fb      	strb	r3, [r7, #15]
 8016b74:	4613      	mov	r3, r2
 8016b76:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8016b78:	4b37      	ldr	r3, [pc, #220]	; (8016c58 <tud_control_xfer+0xf4>)
 8016b7a:	68ba      	ldr	r2, [r7, #8]
 8016b7c:	6810      	ldr	r0, [r2, #0]
 8016b7e:	6851      	ldr	r1, [r2, #4]
 8016b80:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8016b82:	4a35      	ldr	r2, [pc, #212]	; (8016c58 <tud_control_xfer+0xf4>)
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8016b88:	4b33      	ldr	r3, [pc, #204]	; (8016c58 <tud_control_xfer+0xf4>)
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	88db      	ldrh	r3, [r3, #6]
 8016b92:	b29a      	uxth	r2, r3
 8016b94:	89bb      	ldrh	r3, [r7, #12]
 8016b96:	827b      	strh	r3, [r7, #18]
 8016b98:	4613      	mov	r3, r2
 8016b9a:	823b      	strh	r3, [r7, #16]
 8016b9c:	8a7a      	ldrh	r2, [r7, #18]
 8016b9e:	8a3b      	ldrh	r3, [r7, #16]
 8016ba0:	4293      	cmp	r3, r2
 8016ba2:	bf28      	it	cs
 8016ba4:	4613      	movcs	r3, r2
 8016ba6:	b29a      	uxth	r2, r3
 8016ba8:	4b2b      	ldr	r3, [pc, #172]	; (8016c58 <tud_control_xfer+0xf4>)
 8016baa:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8016bac:	68bb      	ldr	r3, [r7, #8]
 8016bae:	88db      	ldrh	r3, [r3, #6]
 8016bb0:	b29b      	uxth	r3, r3
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d030      	beq.n	8016c18 <tud_control_xfer+0xb4>
  {
    if(_ctrl_xfer.data_len > 0U)
 8016bb6:	4b28      	ldr	r3, [pc, #160]	; (8016c58 <tud_control_xfer+0xf4>)
 8016bb8:	899b      	ldrh	r3, [r3, #12]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d012      	beq.n	8016be4 <tud_control_xfer+0x80>
    {
      TU_ASSERT(buffer);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d10f      	bne.n	8016be4 <tud_control_xfer+0x80>
 8016bc4:	2273      	movs	r2, #115	; 0x73
 8016bc6:	4925      	ldr	r1, [pc, #148]	; (8016c5c <tud_control_xfer+0xf8>)
 8016bc8:	4825      	ldr	r0, [pc, #148]	; (8016c60 <tud_control_xfer+0xfc>)
 8016bca:	f002 fae9 	bl	80191a0 <iprintf>
 8016bce:	4b25      	ldr	r3, [pc, #148]	; (8016c64 <tud_control_xfer+0x100>)
 8016bd0:	61bb      	str	r3, [r7, #24]
 8016bd2:	69bb      	ldr	r3, [r7, #24]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	f003 0301 	and.w	r3, r3, #1
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d000      	beq.n	8016be0 <tud_control_xfer+0x7c>
 8016bde:	be00      	bkpt	0x0000
 8016be0:	2300      	movs	r3, #0
 8016be2:	e035      	b.n	8016c50 <tud_control_xfer+0xec>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8016be4:	7bfb      	ldrb	r3, [r7, #15]
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7ff ff7e 	bl	8016ae8 <_data_stage_xact>
 8016bec:	4603      	mov	r3, r0
 8016bee:	f083 0301 	eor.w	r3, r3, #1
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d02a      	beq.n	8016c4e <tud_control_xfer+0xea>
 8016bf8:	2279      	movs	r2, #121	; 0x79
 8016bfa:	4918      	ldr	r1, [pc, #96]	; (8016c5c <tud_control_xfer+0xf8>)
 8016bfc:	4818      	ldr	r0, [pc, #96]	; (8016c60 <tud_control_xfer+0xfc>)
 8016bfe:	f002 facf 	bl	80191a0 <iprintf>
 8016c02:	4b18      	ldr	r3, [pc, #96]	; (8016c64 <tud_control_xfer+0x100>)
 8016c04:	617b      	str	r3, [r7, #20]
 8016c06:	697b      	ldr	r3, [r7, #20]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	f003 0301 	and.w	r3, r3, #1
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d000      	beq.n	8016c14 <tud_control_xfer+0xb0>
 8016c12:	be00      	bkpt	0x0000
 8016c14:	2300      	movs	r3, #0
 8016c16:	e01b      	b.n	8016c50 <tud_control_xfer+0xec>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8016c18:	7bfb      	ldrb	r3, [r7, #15]
 8016c1a:	68b9      	ldr	r1, [r7, #8]
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7ff ff27 	bl	8016a70 <_status_stage_xact>
 8016c22:	4603      	mov	r3, r0
 8016c24:	f083 0301 	eor.w	r3, r3, #1
 8016c28:	b2db      	uxtb	r3, r3
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d00f      	beq.n	8016c4e <tud_control_xfer+0xea>
 8016c2e:	227e      	movs	r2, #126	; 0x7e
 8016c30:	490a      	ldr	r1, [pc, #40]	; (8016c5c <tud_control_xfer+0xf8>)
 8016c32:	480b      	ldr	r0, [pc, #44]	; (8016c60 <tud_control_xfer+0xfc>)
 8016c34:	f002 fab4 	bl	80191a0 <iprintf>
 8016c38:	4b0a      	ldr	r3, [pc, #40]	; (8016c64 <tud_control_xfer+0x100>)
 8016c3a:	61fb      	str	r3, [r7, #28]
 8016c3c:	69fb      	ldr	r3, [r7, #28]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	f003 0301 	and.w	r3, r3, #1
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d000      	beq.n	8016c4a <tud_control_xfer+0xe6>
 8016c48:	be00      	bkpt	0x0000
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	e000      	b.n	8016c50 <tud_control_xfer+0xec>
  }

  return true;
 8016c4e:	2301      	movs	r3, #1
}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3720      	adds	r7, #32
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}
 8016c58:	20009498 	.word	0x20009498
 8016c5c:	0801ca64 	.word	0x0801ca64
 8016c60:	0801b9d8 	.word	0x0801b9d8
 8016c64:	e000edf0 	.word	0xe000edf0

08016c68 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8016c6c:	2214      	movs	r2, #20
 8016c6e:	2100      	movs	r1, #0
 8016c70:	4802      	ldr	r0, [pc, #8]	; (8016c7c <usbd_control_reset+0x14>)
 8016c72:	f002 f9f8 	bl	8019066 <memset>
}
 8016c76:	bf00      	nop
 8016c78:	bd80      	pop	{r7, pc}
 8016c7a:	bf00      	nop
 8016c7c:	20009498 	.word	0x20009498

08016c80 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8016c80:	b480      	push	{r7}
 8016c82:	b083      	sub	sp, #12
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8016c88:	4a04      	ldr	r2, [pc, #16]	; (8016c9c <usbd_control_set_complete_callback+0x1c>)
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	6113      	str	r3, [r2, #16]
}
 8016c8e:	bf00      	nop
 8016c90:	370c      	adds	r7, #12
 8016c92:	46bd      	mov	sp, r7
 8016c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c98:	4770      	bx	lr
 8016c9a:	bf00      	nop
 8016c9c:	20009498 	.word	0x20009498

08016ca0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b083      	sub	sp, #12
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8016ca8:	4b09      	ldr	r3, [pc, #36]	; (8016cd0 <usbd_control_set_request+0x30>)
 8016caa:	687a      	ldr	r2, [r7, #4]
 8016cac:	6810      	ldr	r0, [r2, #0]
 8016cae:	6851      	ldr	r1, [r2, #4]
 8016cb0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8016cb2:	4b07      	ldr	r3, [pc, #28]	; (8016cd0 <usbd_control_set_request+0x30>)
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8016cb8:	4b05      	ldr	r3, [pc, #20]	; (8016cd0 <usbd_control_set_request+0x30>)
 8016cba:	2200      	movs	r2, #0
 8016cbc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8016cbe:	4b04      	ldr	r3, [pc, #16]	; (8016cd0 <usbd_control_set_request+0x30>)
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	819a      	strh	r2, [r3, #12]
}
 8016cc4:	bf00      	nop
 8016cc6:	370c      	adds	r7, #12
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cce:	4770      	bx	lr
 8016cd0:	20009498 	.word	0x20009498

08016cd4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b086      	sub	sp, #24
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	603b      	str	r3, [r7, #0]
 8016cdc:	4603      	mov	r3, r0
 8016cde:	71fb      	strb	r3, [r7, #7]
 8016ce0:	460b      	mov	r3, r1
 8016ce2:	71bb      	strb	r3, [r7, #6]
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	717b      	strb	r3, [r7, #5]
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8016ce8:	79bb      	ldrb	r3, [r7, #6]
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7ff feb2 	bl	8016a54 <tu_edpt_dir>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	4b5c      	ldr	r3, [pc, #368]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016cf6:	781b      	ldrb	r3, [r3, #0]
 8016cf8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d026      	beq.n	8016d50 <usbd_control_xfer_cb+0x7c>
  {
    TU_ASSERT(0 == xferred_bytes);
 8016d02:	683b      	ldr	r3, [r7, #0]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d00f      	beq.n	8016d28 <usbd_control_xfer_cb+0x54>
 8016d08:	22ab      	movs	r2, #171	; 0xab
 8016d0a:	4958      	ldr	r1, [pc, #352]	; (8016e6c <usbd_control_xfer_cb+0x198>)
 8016d0c:	4858      	ldr	r0, [pc, #352]	; (8016e70 <usbd_control_xfer_cb+0x19c>)
 8016d0e:	f002 fa47 	bl	80191a0 <iprintf>
 8016d12:	4b58      	ldr	r3, [pc, #352]	; (8016e74 <usbd_control_xfer_cb+0x1a0>)
 8016d14:	60bb      	str	r3, [r7, #8]
 8016d16:	68bb      	ldr	r3, [r7, #8]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	f003 0301 	and.w	r3, r3, #1
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d000      	beq.n	8016d24 <usbd_control_xfer_cb+0x50>
 8016d22:	be00      	bkpt	0x0000
 8016d24:	2300      	movs	r3, #0
 8016d26:	e09b      	b.n	8016e60 <usbd_control_xfer_cb+0x18c>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8016d28:	4b53      	ldr	r3, [pc, #332]	; (8016e78 <usbd_control_xfer_cb+0x1a4>)
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d004      	beq.n	8016d38 <usbd_control_xfer_cb+0x64>
 8016d2e:	79fb      	ldrb	r3, [r7, #7]
 8016d30:	494d      	ldr	r1, [pc, #308]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d32:	4618      	mov	r0, r3
 8016d34:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8016d38:	4b4b      	ldr	r3, [pc, #300]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d3a:	691b      	ldr	r3, [r3, #16]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d005      	beq.n	8016d4c <usbd_control_xfer_cb+0x78>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8016d40:	4b49      	ldr	r3, [pc, #292]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d42:	691b      	ldr	r3, [r3, #16]
 8016d44:	79f8      	ldrb	r0, [r7, #7]
 8016d46:	4a48      	ldr	r2, [pc, #288]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d48:	2102      	movs	r1, #2
 8016d4a:	4798      	blx	r3
    }

    return true;
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	e087      	b.n	8016e60 <usbd_control_xfer_cb+0x18c>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8016d50:	4b45      	ldr	r3, [pc, #276]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d52:	781b      	ldrb	r3, [r3, #0]
 8016d54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016d58:	b2db      	uxtb	r3, r3
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d111      	bne.n	8016d82 <usbd_control_xfer_cb+0xae>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8016d5e:	4b42      	ldr	r3, [pc, #264]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d60:	689b      	ldr	r3, [r3, #8]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d101      	bne.n	8016d6a <usbd_control_xfer_cb+0x96>
 8016d66:	2300      	movs	r3, #0
 8016d68:	e07a      	b.n	8016e60 <usbd_control_xfer_cb+0x18c>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8016d6a:	4b3f      	ldr	r3, [pc, #252]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d6c:	689b      	ldr	r3, [r3, #8]
 8016d6e:	683a      	ldr	r2, [r7, #0]
 8016d70:	4942      	ldr	r1, [pc, #264]	; (8016e7c <usbd_control_xfer_cb+0x1a8>)
 8016d72:	4618      	mov	r0, r3
 8016d74:	f002 f94f 	bl	8019016 <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
 8016d78:	2202      	movs	r2, #2
 8016d7a:	6839      	ldr	r1, [r7, #0]
 8016d7c:	483f      	ldr	r0, [pc, #252]	; (8016e7c <usbd_control_xfer_cb+0x1a8>)
 8016d7e:	f001 ff69 	bl	8018c54 <tu_print_mem>
  }

  _ctrl_xfer.total_xferred += xferred_bytes;
 8016d82:	4b39      	ldr	r3, [pc, #228]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d84:	89da      	ldrh	r2, [r3, #14]
 8016d86:	683b      	ldr	r3, [r7, #0]
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	4413      	add	r3, r2
 8016d8c:	b29a      	uxth	r2, r3
 8016d8e:	4b36      	ldr	r3, [pc, #216]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d90:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8016d92:	4b35      	ldr	r3, [pc, #212]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d94:	689a      	ldr	r2, [r3, #8]
 8016d96:	683b      	ldr	r3, [r7, #0]
 8016d98:	4413      	add	r3, r2
 8016d9a:	4a33      	ldr	r2, [pc, #204]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016d9c:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8016d9e:	4b32      	ldr	r3, [pc, #200]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016da0:	88da      	ldrh	r2, [r3, #6]
 8016da2:	4b31      	ldr	r3, [pc, #196]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016da4:	89db      	ldrh	r3, [r3, #14]
 8016da6:	429a      	cmp	r2, r3
 8016da8:	d002      	beq.n	8016db0 <usbd_control_xfer_cb+0xdc>
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	2b3f      	cmp	r3, #63	; 0x3f
 8016dae:	d83b      	bhi.n	8016e28 <usbd_control_xfer_cb+0x154>
  {
    // DATA stage is complete
    bool is_ok = true;
 8016db0:	2301      	movs	r3, #1
 8016db2:	75fb      	strb	r3, [r7, #23]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8016db4:	4b2c      	ldr	r3, [pc, #176]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016db6:	691b      	ldr	r3, [r3, #16]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d00c      	beq.n	8016dd6 <usbd_control_xfer_cb+0x102>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
 8016dbc:	4b2a      	ldr	r3, [pc, #168]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016dbe:	691b      	ldr	r3, [r3, #16]
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7fe fa19 	bl	80151f8 <usbd_driver_print_control_complete_name>
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8016dc6:	4b28      	ldr	r3, [pc, #160]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016dc8:	691b      	ldr	r3, [r3, #16]
 8016dca:	79f8      	ldrb	r0, [r7, #7]
 8016dcc:	4a26      	ldr	r2, [pc, #152]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016dce:	2101      	movs	r1, #1
 8016dd0:	4798      	blx	r3
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	75fb      	strb	r3, [r7, #23]
    }

    if ( is_ok )
 8016dd6:	7dfb      	ldrb	r3, [r7, #23]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d01a      	beq.n	8016e12 <usbd_control_xfer_cb+0x13e>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8016ddc:	79fb      	ldrb	r3, [r7, #7]
 8016dde:	4922      	ldr	r1, [pc, #136]	; (8016e68 <usbd_control_xfer_cb+0x194>)
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7ff fe45 	bl	8016a70 <_status_stage_xact>
 8016de6:	4603      	mov	r3, r0
 8016de8:	f083 0301 	eor.w	r3, r3, #1
 8016dec:	b2db      	uxtb	r3, r3
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d034      	beq.n	8016e5c <usbd_control_xfer_cb+0x188>
 8016df2:	22d8      	movs	r2, #216	; 0xd8
 8016df4:	491d      	ldr	r1, [pc, #116]	; (8016e6c <usbd_control_xfer_cb+0x198>)
 8016df6:	481e      	ldr	r0, [pc, #120]	; (8016e70 <usbd_control_xfer_cb+0x19c>)
 8016df8:	f002 f9d2 	bl	80191a0 <iprintf>
 8016dfc:	4b1d      	ldr	r3, [pc, #116]	; (8016e74 <usbd_control_xfer_cb+0x1a0>)
 8016dfe:	60fb      	str	r3, [r7, #12]
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	f003 0301 	and.w	r3, r3, #1
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d000      	beq.n	8016e0e <usbd_control_xfer_cb+0x13a>
 8016e0c:	be00      	bkpt	0x0000
 8016e0e:	2300      	movs	r3, #0
 8016e10:	e026      	b.n	8016e60 <usbd_control_xfer_cb+0x18c>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8016e12:	79fb      	ldrb	r3, [r7, #7]
 8016e14:	2100      	movs	r1, #0
 8016e16:	4618      	mov	r0, r3
 8016e18:	f001 f980 	bl	801811c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8016e1c:	79fb      	ldrb	r3, [r7, #7]
 8016e1e:	2180      	movs	r1, #128	; 0x80
 8016e20:	4618      	mov	r0, r3
 8016e22:	f001 f97b 	bl	801811c <dcd_edpt_stall>
  {
 8016e26:	e019      	b.n	8016e5c <usbd_control_xfer_cb+0x188>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8016e28:	79fb      	ldrb	r3, [r7, #7]
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f7ff fe5c 	bl	8016ae8 <_data_stage_xact>
 8016e30:	4603      	mov	r3, r0
 8016e32:	f083 0301 	eor.w	r3, r3, #1
 8016e36:	b2db      	uxtb	r3, r3
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d010      	beq.n	8016e5e <usbd_control_xfer_cb+0x18a>
 8016e3c:	22e3      	movs	r2, #227	; 0xe3
 8016e3e:	490b      	ldr	r1, [pc, #44]	; (8016e6c <usbd_control_xfer_cb+0x198>)
 8016e40:	480b      	ldr	r0, [pc, #44]	; (8016e70 <usbd_control_xfer_cb+0x19c>)
 8016e42:	f002 f9ad 	bl	80191a0 <iprintf>
 8016e46:	4b0b      	ldr	r3, [pc, #44]	; (8016e74 <usbd_control_xfer_cb+0x1a0>)
 8016e48:	613b      	str	r3, [r7, #16]
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	f003 0301 	and.w	r3, r3, #1
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d000      	beq.n	8016e58 <usbd_control_xfer_cb+0x184>
 8016e56:	be00      	bkpt	0x0000
 8016e58:	2300      	movs	r3, #0
 8016e5a:	e001      	b.n	8016e60 <usbd_control_xfer_cb+0x18c>
  {
 8016e5c:	bf00      	nop
  }

  return true;
 8016e5e:	2301      	movs	r3, #1
}
 8016e60:	4618      	mov	r0, r3
 8016e62:	3718      	adds	r7, #24
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}
 8016e68:	20009498 	.word	0x20009498
 8016e6c:	0801ca78 	.word	0x0801ca78
 8016e70:	0801b9d8 	.word	0x0801b9d8
 8016e74:	e000edf0 	.word	0xe000edf0
 8016e78:	00000000 	.word	0x00000000
 8016e7c:	200094ac 	.word	0x200094ac

08016e80 <tu_edpt_dir>:
{
 8016e80:	b480      	push	{r7}
 8016e82:	b083      	sub	sp, #12
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	4603      	mov	r3, r0
 8016e88:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8016e8a:	79fb      	ldrb	r3, [r7, #7]
 8016e8c:	09db      	lsrs	r3, r3, #7
 8016e8e:	b2db      	uxtb	r3, r3
}
 8016e90:	4618      	mov	r0, r3
 8016e92:	370c      	adds	r7, #12
 8016e94:	46bd      	mov	sp, r7
 8016e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9a:	4770      	bx	lr

08016e9c <tu_edpt_number>:
{
 8016e9c:	b480      	push	{r7}
 8016e9e:	b083      	sub	sp, #12
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	71fb      	strb	r3, [r7, #7]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8016ea6:	79fb      	ldrb	r3, [r7, #7]
 8016ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016eac:	b2db      	uxtb	r3, r3
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	370c      	adds	r7, #12
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb8:	4770      	bx	lr

08016eba <tu_edpt_addr>:
{
 8016eba:	b480      	push	{r7}
 8016ebc:	b083      	sub	sp, #12
 8016ebe:	af00      	add	r7, sp, #0
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	460a      	mov	r2, r1
 8016ec4:	71fb      	strb	r3, [r7, #7]
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	71bb      	strb	r3, [r7, #6]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8016eca:	79bb      	ldrb	r3, [r7, #6]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d002      	beq.n	8016ed6 <tu_edpt_addr+0x1c>
 8016ed0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8016ed4:	e000      	b.n	8016ed8 <tu_edpt_addr+0x1e>
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016edc:	4313      	orrs	r3, r2
 8016ede:	b25b      	sxtb	r3, r3
 8016ee0:	b2db      	uxtb	r3, r3
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	370c      	adds	r7, #12
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eec:	4770      	bx	lr

08016eee <tu_edpt_packet_size>:
{
 8016eee:	b480      	push	{r7}
 8016ef0:	b083      	sub	sp, #12
 8016ef2:	af00      	add	r7, sp, #0
 8016ef4:	6078      	str	r0, [r7, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	889b      	ldrh	r3, [r3, #4]
 8016efa:	b29b      	uxth	r3, r3
 8016efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016f00:	b29b      	uxth	r3, r3
}
 8016f02:	4618      	mov	r0, r3
 8016f04:	370c      	adds	r7, #12
 8016f06:	46bd      	mov	sp, r7
 8016f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0c:	4770      	bx	lr
	...

08016f10 <__NVIC_EnableIRQ>:
{
 8016f10:	b480      	push	{r7}
 8016f12:	b083      	sub	sp, #12
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	4603      	mov	r3, r0
 8016f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	db0b      	blt.n	8016f3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016f22:	79fb      	ldrb	r3, [r7, #7]
 8016f24:	f003 021f 	and.w	r2, r3, #31
 8016f28:	4907      	ldr	r1, [pc, #28]	; (8016f48 <__NVIC_EnableIRQ+0x38>)
 8016f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016f2e:	095b      	lsrs	r3, r3, #5
 8016f30:	2001      	movs	r0, #1
 8016f32:	fa00 f202 	lsl.w	r2, r0, r2
 8016f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016f3a:	bf00      	nop
 8016f3c:	370c      	adds	r7, #12
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f44:	4770      	bx	lr
 8016f46:	bf00      	nop
 8016f48:	e000e100 	.word	0xe000e100

08016f4c <dwc2_phy_init>:
  while ( count-- ) __NOP();
}

// MCU specific PHY init, called BEFORE core reset
static inline void dwc2_phy_init(dwc2_regs_t * dwc2, uint8_t hs_phy_type)
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	b083      	sub	sp, #12
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
 8016f54:	460b      	mov	r3, r1
 8016f56:	70fb      	strb	r3, [r7, #3]
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
 8016f58:	78fb      	ldrb	r3, [r7, #3]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d106      	bne.n	8016f6c <dwc2_phy_init+0x20>
  {
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	639a      	str	r2, [r3, #56]	; 0x38
      // Enable PLL internal PHY
      USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
#endif
    }
  }
}
 8016f6a:	e005      	b.n	8016f78 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	639a      	str	r2, [r3, #56]	; 0x38
}
 8016f78:	bf00      	nop
 8016f7a:	370c      	adds	r7, #12
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f82:	4770      	bx	lr

08016f84 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t * dwc2, uint8_t hs_phy_type)
{
 8016f84:	b480      	push	{r7}
 8016f86:	b085      	sub	sp, #20
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
 8016f8c:	460b      	mov	r3, r1
 8016f8e:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
 8016f90:	78fb      	ldrb	r3, [r7, #3]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d152      	bne.n	801703c <dwc2_phy_update+0xb8>
  {
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if ( SystemCoreClock >= 32000000u )
 8016f96:	4b2c      	ldr	r3, [pc, #176]	; (8017048 <dwc2_phy_update+0xc4>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	4a2c      	ldr	r2, [pc, #176]	; (801704c <dwc2_phy_update+0xc8>)
 8016f9c:	4293      	cmp	r3, r2
 8016f9e:	d302      	bcc.n	8016fa6 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8016fa0:	2306      	movs	r3, #6
 8016fa2:	60fb      	str	r3, [r7, #12]
 8016fa4:	e041      	b.n	801702a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 27500000u )
 8016fa6:	4b28      	ldr	r3, [pc, #160]	; (8017048 <dwc2_phy_update+0xc4>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	4a29      	ldr	r2, [pc, #164]	; (8017050 <dwc2_phy_update+0xcc>)
 8016fac:	4293      	cmp	r3, r2
 8016fae:	d902      	bls.n	8016fb6 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8016fb0:	2307      	movs	r3, #7
 8016fb2:	60fb      	str	r3, [r7, #12]
 8016fb4:	e039      	b.n	801702a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 24000000u )
 8016fb6:	4b24      	ldr	r3, [pc, #144]	; (8017048 <dwc2_phy_update+0xc4>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	4a26      	ldr	r2, [pc, #152]	; (8017054 <dwc2_phy_update+0xd0>)
 8016fbc:	4293      	cmp	r3, r2
 8016fbe:	d302      	bcc.n	8016fc6 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8016fc0:	2308      	movs	r3, #8
 8016fc2:	60fb      	str	r3, [r7, #12]
 8016fc4:	e031      	b.n	801702a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 21800000u )
 8016fc6:	4b20      	ldr	r3, [pc, #128]	; (8017048 <dwc2_phy_update+0xc4>)
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	4a23      	ldr	r2, [pc, #140]	; (8017058 <dwc2_phy_update+0xd4>)
 8016fcc:	4293      	cmp	r3, r2
 8016fce:	d902      	bls.n	8016fd6 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8016fd0:	2309      	movs	r3, #9
 8016fd2:	60fb      	str	r3, [r7, #12]
 8016fd4:	e029      	b.n	801702a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 20000000u )
 8016fd6:	4b1c      	ldr	r3, [pc, #112]	; (8017048 <dwc2_phy_update+0xc4>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	4a20      	ldr	r2, [pc, #128]	; (801705c <dwc2_phy_update+0xd8>)
 8016fdc:	4293      	cmp	r3, r2
 8016fde:	d902      	bls.n	8016fe6 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8016fe0:	230a      	movs	r3, #10
 8016fe2:	60fb      	str	r3, [r7, #12]
 8016fe4:	e021      	b.n	801702a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 18500000u )
 8016fe6:	4b18      	ldr	r3, [pc, #96]	; (8017048 <dwc2_phy_update+0xc4>)
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	4a1d      	ldr	r2, [pc, #116]	; (8017060 <dwc2_phy_update+0xdc>)
 8016fec:	4293      	cmp	r3, r2
 8016fee:	d902      	bls.n	8016ff6 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8016ff0:	230b      	movs	r3, #11
 8016ff2:	60fb      	str	r3, [r7, #12]
 8016ff4:	e019      	b.n	801702a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 17200000u )
 8016ff6:	4b14      	ldr	r3, [pc, #80]	; (8017048 <dwc2_phy_update+0xc4>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	4a1a      	ldr	r2, [pc, #104]	; (8017064 <dwc2_phy_update+0xe0>)
 8016ffc:	4293      	cmp	r3, r2
 8016ffe:	d302      	bcc.n	8017006 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8017000:	230c      	movs	r3, #12
 8017002:	60fb      	str	r3, [r7, #12]
 8017004:	e011      	b.n	801702a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 16000000u )
 8017006:	4b10      	ldr	r3, [pc, #64]	; (8017048 <dwc2_phy_update+0xc4>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	4a17      	ldr	r2, [pc, #92]	; (8017068 <dwc2_phy_update+0xe4>)
 801700c:	4293      	cmp	r3, r2
 801700e:	d302      	bcc.n	8017016 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8017010:	230d      	movs	r3, #13
 8017012:	60fb      	str	r3, [r7, #12]
 8017014:	e009      	b.n	801702a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 15000000u )
 8017016:	4b0c      	ldr	r3, [pc, #48]	; (8017048 <dwc2_phy_update+0xc4>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	4a14      	ldr	r2, [pc, #80]	; (801706c <dwc2_phy_update+0xe8>)
 801701c:	4293      	cmp	r3, r2
 801701e:	d302      	bcc.n	8017026 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8017020:	230e      	movs	r3, #14
 8017022:	60fb      	str	r3, [r7, #12]
 8017024:	e001      	b.n	801702a <dwc2_phy_update+0xa6>
    else
      turnaround = 0xFu;
 8017026:	230f      	movs	r3, #15
 8017028:	60fb      	str	r3, [r7, #12]

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	68db      	ldr	r3, [r3, #12]
 801702e:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	029b      	lsls	r3, r3, #10
 8017036:	431a      	orrs	r2, r3
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	60da      	str	r2, [r3, #12]
  }
}
 801703c:	bf00      	nop
 801703e:	3714      	adds	r7, #20
 8017040:	46bd      	mov	sp, r7
 8017042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017046:	4770      	bx	lr
 8017048:	20000000 	.word	0x20000000
 801704c:	01e84800 	.word	0x01e84800
 8017050:	01a39ddf 	.word	0x01a39ddf
 8017054:	016e3600 	.word	0x016e3600
 8017058:	014ca43f 	.word	0x014ca43f
 801705c:	01312cff 	.word	0x01312cff
 8017060:	011a499f 	.word	0x011a499f
 8017064:	01067380 	.word	0x01067380
 8017068:	00f42400 	.word	0x00f42400
 801706c:	00e4e1c0 	.word	0x00e4e1c0

08017070 <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool     _out_ep_closed;                   // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8017070:	b480      	push	{r7}
 8017072:	b083      	sub	sp, #12
 8017074:	af00      	add	r7, sp, #0
 8017076:	4603      	mov	r3, r0
 8017078:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*DWC2_EP_MAX;
 801707a:	88fb      	ldrh	r3, [r7, #6]
 801707c:	089b      	lsrs	r3, r3, #2
 801707e:	b29b      	uxth	r3, r3
 8017080:	005b      	lsls	r3, r3, #1
 8017082:	b29b      	uxth	r3, r3
 8017084:	3317      	adds	r3, #23
 8017086:	b29b      	uxth	r3, r3
}
 8017088:	4618      	mov	r0, r3
 801708a:	370c      	adds	r7, #12
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr

08017094 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b086      	sub	sp, #24
 8017098:	af00      	add	r7, sp, #0
 801709a:	4603      	mov	r3, r0
 801709c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 801709e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80170a2:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 80170a4:	2300      	movs	r3, #0
 80170a6:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < DWC2_EP_MAX; epnum++)
 80170a8:	2300      	movs	r3, #0
 80170aa:	757b      	strb	r3, [r7, #21]
 80170ac:	e013      	b.n	80170d6 <update_grxfsiz+0x42>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 80170ae:	7d7b      	ldrb	r3, [r7, #21]
 80170b0:	4a10      	ldr	r2, [pc, #64]	; (80170f4 <update_grxfsiz+0x60>)
 80170b2:	015b      	lsls	r3, r3, #5
 80170b4:	4413      	add	r3, r2
 80170b6:	330a      	adds	r3, #10
 80170b8:	881a      	ldrh	r2, [r3, #0]
 80170ba:	8afb      	ldrh	r3, [r7, #22]
 80170bc:	81fb      	strh	r3, [r7, #14]
 80170be:	4613      	mov	r3, r2
 80170c0:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 80170c2:	89fa      	ldrh	r2, [r7, #14]
 80170c4:	89bb      	ldrh	r3, [r7, #12]
 80170c6:	4293      	cmp	r3, r2
 80170c8:	bf38      	it	cc
 80170ca:	4613      	movcc	r3, r2
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < DWC2_EP_MAX; epnum++)
 80170d0:	7d7b      	ldrb	r3, [r7, #21]
 80170d2:	3301      	adds	r3, #1
 80170d4:	757b      	strb	r3, [r7, #21]
 80170d6:	7d7b      	ldrb	r3, [r7, #21]
 80170d8:	2b03      	cmp	r3, #3
 80170da:	d9e8      	bls.n	80170ae <update_grxfsiz+0x1a>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_rx_ff_size(max_epsize);
 80170dc:	8afb      	ldrh	r3, [r7, #22]
 80170de:	4618      	mov	r0, r3
 80170e0:	f7ff ffc6 	bl	8017070 <calc_rx_ff_size>
 80170e4:	4603      	mov	r3, r0
 80170e6:	461a      	mov	r2, r3
 80170e8:	693b      	ldr	r3, [r7, #16]
 80170ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80170ec:	bf00      	nop
 80170ee:	3718      	adds	r7, #24
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	200094f4 	.word	0x200094f4

080170f8 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b084      	sub	sp, #16
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	4603      	mov	r3, r0
 8017100:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017102:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017106:	60bb      	str	r3, [r7, #8]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8017108:	2280      	movs	r2, #128	; 0x80
 801710a:	2100      	movs	r1, #0
 801710c:	4831      	ldr	r0, [pc, #196]	; (80171d4 <bus_reset+0xdc>)
 801710e:	f001 ffaa 	bl	8019066 <memset>
  _out_ep_closed = false;
 8017112:	4b31      	ldr	r3, [pc, #196]	; (80171d8 <bus_reset+0xe0>)
 8017114:	2200      	movs	r2, #0
 8017116:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 801711e:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // 1. NAK for all OUT endpoints
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 8017128:	2300      	movs	r3, #0
 801712a:	73fb      	strb	r3, [r7, #15]
 801712c:	e010      	b.n	8017150 <bus_reset+0x58>
  {
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 801712e:	7bfb      	ldrb	r3, [r7, #15]
 8017130:	68ba      	ldr	r2, [r7, #8]
 8017132:	3358      	adds	r3, #88	; 0x58
 8017134:	015b      	lsls	r3, r3, #5
 8017136:	4413      	add	r3, r2
 8017138:	681a      	ldr	r2, [r3, #0]
 801713a:	7bfb      	ldrb	r3, [r7, #15]
 801713c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8017140:	68b9      	ldr	r1, [r7, #8]
 8017142:	3358      	adds	r3, #88	; 0x58
 8017144:	015b      	lsls	r3, r3, #5
 8017146:	440b      	add	r3, r1
 8017148:	601a      	str	r2, [r3, #0]
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 801714a:	7bfb      	ldrb	r3, [r7, #15]
 801714c:	3301      	adds	r3, #1
 801714e:	73fb      	strb	r3, [r7, #15]
 8017150:	7bfb      	ldrb	r3, [r7, #15]
 8017152:	2b03      	cmp	r3, #3
 8017154:	d9eb      	bls.n	801712e <bus_reset+0x36>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 801715c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  dwc2->doepmsk  = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8017160:	68bb      	ldr	r3, [r7, #8]
 8017162:	2209      	movs	r2, #9
 8017164:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  dwc2->diepmsk  = DIEPMSK_TOM   | DIEPMSK_XFRCM;
 8017168:	68bb      	ldr	r3, [r7, #8]
 801716a:	2209      	movs	r2, #9
 801716c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  dwc2->grxfsiz = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8017170:	2040      	movs	r0, #64	; 0x40
 8017172:	f7ff ff7d 	bl	8017070 <calc_rx_ff_size>
 8017176:	4603      	mov	r3, r0
 8017178:	461a      	mov	r2, r3
 801717a:	68bb      	ldr	r3, [r7, #8]
 801717c:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 801717e:	4b17      	ldr	r3, [pc, #92]	; (80171dc <bus_reset+0xe4>)
 8017180:	2210      	movs	r2, #16
 8017182:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (DWC2_EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8017184:	4b15      	ldr	r3, [pc, #84]	; (80171dc <bus_reset+0xe4>)
 8017186:	881b      	ldrh	r3, [r3, #0]
 8017188:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 801718c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8017190:	68bb      	ldr	r3, [r7, #8]
 8017192:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8017194:	68bb      	ldr	r3, [r7, #8]
 8017196:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 801719a:	f023 0203 	bic.w	r2, r3, #3
 801719e:	68bb      	ldr	r3, [r7, #8]
 80171a0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 80171a4:	4b0b      	ldr	r3, [pc, #44]	; (80171d4 <bus_reset+0xdc>)
 80171a6:	2240      	movs	r2, #64	; 0x40
 80171a8:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN ].max_size = 64;
 80171aa:	4b0a      	ldr	r3, [pc, #40]	; (80171d4 <bus_reset+0xdc>)
 80171ac:	2240      	movs	r2, #64	; 0x40
 80171ae:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	; 0xb10
 80171b6:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	699b      	ldr	r3, [r3, #24]
 80171c4:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	619a      	str	r2, [r3, #24]
}
 80171cc:	bf00      	nop
 80171ce:	3710      	adds	r7, #16
 80171d0:	46bd      	mov	sp, r7
 80171d2:	bd80      	pop	{r7, pc}
 80171d4:	200094f4 	.word	0x200094f4
 80171d8:	2000957a 	.word	0x2000957a
 80171dc:	20009578 	.word	0x20009578

080171e0 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 80171e0:	b490      	push	{r4, r7}
 80171e2:	b08a      	sub	sp, #40	; 0x28
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	4604      	mov	r4, r0
 80171e8:	4608      	mov	r0, r1
 80171ea:	4611      	mov	r1, r2
 80171ec:	461a      	mov	r2, r3
 80171ee:	4623      	mov	r3, r4
 80171f0:	71fb      	strb	r3, [r7, #7]
 80171f2:	4603      	mov	r3, r0
 80171f4:	71bb      	strb	r3, [r7, #6]
 80171f6:	460b      	mov	r3, r1
 80171f8:	717b      	strb	r3, [r7, #5]
 80171fa:	4613      	mov	r3, r2
 80171fc:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80171fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017202:	627b      	str	r3, [r7, #36]	; 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if ( epnum == 0 )
 8017204:	79bb      	ldrb	r3, [r7, #6]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d121      	bne.n	801724e <edpt_schedule_packets+0x6e>
  {
    xfer_ctl_t *const xfer = XFER_CTL_BASE(epnum, dir);
 801720a:	79ba      	ldrb	r2, [r7, #6]
 801720c:	797b      	ldrb	r3, [r7, #5]
 801720e:	0052      	lsls	r2, r2, #1
 8017210:	4413      	add	r3, r2
 8017212:	011b      	lsls	r3, r3, #4
 8017214:	4a6a      	ldr	r2, [pc, #424]	; (80173c0 <edpt_schedule_packets+0x1e0>)
 8017216:	4413      	add	r3, r2
 8017218:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 801721a:	797b      	ldrb	r3, [r7, #5]
 801721c:	4a69      	ldr	r2, [pc, #420]	; (80173c4 <edpt_schedule_packets+0x1e4>)
 801721e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8017222:	6a3b      	ldr	r3, [r7, #32]
 8017224:	895b      	ldrh	r3, [r3, #10]
 8017226:	81fa      	strh	r2, [r7, #14]
 8017228:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 801722a:	89fa      	ldrh	r2, [r7, #14]
 801722c:	89bb      	ldrh	r3, [r7, #12]
 801722e:	4293      	cmp	r3, r2
 8017230:	bf28      	it	cs
 8017232:	4613      	movcs	r3, r2
 8017234:	b29b      	uxth	r3, r3
 8017236:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8017238:	797b      	ldrb	r3, [r7, #5]
 801723a:	4a62      	ldr	r2, [pc, #392]	; (80173c4 <edpt_schedule_packets+0x1e4>)
 801723c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8017240:	797b      	ldrb	r3, [r7, #5]
 8017242:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8017244:	1a8a      	subs	r2, r1, r2
 8017246:	b291      	uxth	r1, r2
 8017248:	4a5e      	ldr	r2, [pc, #376]	; (80173c4 <edpt_schedule_packets+0x1e4>)
 801724a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if ( dir == TUSB_DIR_IN )
 801724e:	797b      	ldrb	r3, [r7, #5]
 8017250:	2b01      	cmp	r3, #1
 8017252:	d156      	bne.n	8017302 <edpt_schedule_packets+0x122>
  {
    dwc2_epin_t* epin = dwc2->epin;
 8017254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801725a:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 801725c:	887b      	ldrh	r3, [r7, #2]
 801725e:	04db      	lsls	r3, r3, #19
 8017260:	4618      	mov	r0, r3
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 8017262:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8017264:	79bb      	ldrb	r3, [r7, #6]
 8017266:	015b      	lsls	r3, r3, #5
 8017268:	6979      	ldr	r1, [r7, #20]
 801726a:	440b      	add	r3, r1
 801726c:	4302      	orrs	r2, r0
 801726e:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8017270:	79bb      	ldrb	r3, [r7, #6]
 8017272:	015b      	lsls	r3, r3, #5
 8017274:	697a      	ldr	r2, [r7, #20]
 8017276:	4413      	add	r3, r2
 8017278:	681a      	ldr	r2, [r3, #0]
 801727a:	79bb      	ldrb	r3, [r7, #6]
 801727c:	015b      	lsls	r3, r3, #5
 801727e:	6979      	ldr	r1, [r7, #20]
 8017280:	440b      	add	r3, r1
 8017282:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8017286:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8017288:	79bb      	ldrb	r3, [r7, #6]
 801728a:	015b      	lsls	r3, r3, #5
 801728c:	697a      	ldr	r2, [r7, #20]
 801728e:	4413      	add	r3, r2
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8017296:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801729a:	d123      	bne.n	80172e4 <edpt_schedule_packets+0x104>
 801729c:	79ba      	ldrb	r2, [r7, #6]
 801729e:	797b      	ldrb	r3, [r7, #5]
 80172a0:	4947      	ldr	r1, [pc, #284]	; (80173c0 <edpt_schedule_packets+0x1e0>)
 80172a2:	0052      	lsls	r2, r2, #1
 80172a4:	4413      	add	r3, r2
 80172a6:	011b      	lsls	r3, r3, #4
 80172a8:	440b      	add	r3, r1
 80172aa:	330c      	adds	r3, #12
 80172ac:	781b      	ldrb	r3, [r3, #0]
 80172ae:	2b01      	cmp	r3, #1
 80172b0:	d118      	bne.n	80172e4 <edpt_schedule_packets+0x104>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 80172b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172b4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80172b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80172bc:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 80172be:	79bb      	ldrb	r3, [r7, #6]
 80172c0:	015b      	lsls	r3, r3, #5
 80172c2:	697a      	ldr	r2, [r7, #20]
 80172c4:	4413      	add	r3, r2
 80172c6:	681a      	ldr	r2, [r3, #0]
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d002      	beq.n	80172d4 <edpt_schedule_packets+0xf4>
 80172ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80172d2:	e001      	b.n	80172d8 <edpt_schedule_packets+0xf8>
 80172d4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80172d8:	79bb      	ldrb	r3, [r7, #6]
 80172da:	015b      	lsls	r3, r3, #5
 80172dc:	6978      	ldr	r0, [r7, #20]
 80172de:	4403      	add	r3, r0
 80172e0:	430a      	orrs	r2, r1
 80172e2:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if ( total_bytes != 0 )
 80172e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d065      	beq.n	80173b6 <edpt_schedule_packets+0x1d6>
    {
      dwc2->diepempmsk |= (1 << epnum);
 80172ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ec:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 80172f0:	79ba      	ldrb	r2, [r7, #6]
 80172f2:	2101      	movs	r1, #1
 80172f4:	fa01 f202 	lsl.w	r2, r1, r2
 80172f8:	431a      	orrs	r2, r3
 80172fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172fc:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8017300:	e059      	b.n	80173b6 <edpt_schedule_packets+0x1d6>
    dwc2_epout_t* epout = dwc2->epout;
 8017302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017308:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 801730a:	79bb      	ldrb	r3, [r7, #6]
 801730c:	015b      	lsls	r3, r3, #5
 801730e:	69fa      	ldr	r2, [r7, #28]
 8017310:	4413      	add	r3, r2
 8017312:	691a      	ldr	r2, [r3, #16]
 8017314:	79bb      	ldrb	r3, [r7, #6]
 8017316:	015b      	lsls	r3, r3, #5
 8017318:	69f9      	ldr	r1, [r7, #28]
 801731a:	440b      	add	r3, r1
 801731c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8017320:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8017322:	79bb      	ldrb	r3, [r7, #6]
 8017324:	015b      	lsls	r3, r3, #5
 8017326:	69fa      	ldr	r2, [r7, #28]
 8017328:	4413      	add	r3, r2
 801732a:	6919      	ldr	r1, [r3, #16]
 801732c:	887b      	ldrh	r3, [r7, #2]
 801732e:	04db      	lsls	r3, r3, #19
 8017330:	461a      	mov	r2, r3
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 8017332:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8017334:	431a      	orrs	r2, r3
 8017336:	79bb      	ldrb	r3, [r7, #6]
 8017338:	015b      	lsls	r3, r3, #5
 801733a:	69f8      	ldr	r0, [r7, #28]
 801733c:	4403      	add	r3, r0
 801733e:	430a      	orrs	r2, r1
 8017340:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8017342:	79bb      	ldrb	r3, [r7, #6]
 8017344:	015b      	lsls	r3, r3, #5
 8017346:	69fa      	ldr	r2, [r7, #28]
 8017348:	4413      	add	r3, r2
 801734a:	681a      	ldr	r2, [r3, #0]
 801734c:	79bb      	ldrb	r3, [r7, #6]
 801734e:	015b      	lsls	r3, r3, #5
 8017350:	69f9      	ldr	r1, [r7, #28]
 8017352:	440b      	add	r3, r1
 8017354:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8017358:	601a      	str	r2, [r3, #0]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 801735a:	79bb      	ldrb	r3, [r7, #6]
 801735c:	015b      	lsls	r3, r3, #5
 801735e:	69fa      	ldr	r2, [r7, #28]
 8017360:	4413      	add	r3, r2
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8017368:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801736c:	d123      	bne.n	80173b6 <edpt_schedule_packets+0x1d6>
         XFER_CTL_BASE(epnum, dir)->interval == 1 )
 801736e:	79ba      	ldrb	r2, [r7, #6]
 8017370:	797b      	ldrb	r3, [r7, #5]
 8017372:	4913      	ldr	r1, [pc, #76]	; (80173c0 <edpt_schedule_packets+0x1e0>)
 8017374:	0052      	lsls	r2, r2, #1
 8017376:	4413      	add	r3, r2
 8017378:	011b      	lsls	r3, r3, #4
 801737a:	440b      	add	r3, r1
 801737c:	330c      	adds	r3, #12
 801737e:	781b      	ldrb	r3, [r3, #0]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8017380:	2b01      	cmp	r3, #1
 8017382:	d118      	bne.n	80173b6 <edpt_schedule_packets+0x1d6>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8017384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017386:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 801738a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801738e:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8017390:	79bb      	ldrb	r3, [r7, #6]
 8017392:	015b      	lsls	r3, r3, #5
 8017394:	69fa      	ldr	r2, [r7, #28]
 8017396:	4413      	add	r3, r2
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	69bb      	ldr	r3, [r7, #24]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d002      	beq.n	80173a6 <edpt_schedule_packets+0x1c6>
 80173a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80173a4:	e001      	b.n	80173aa <edpt_schedule_packets+0x1ca>
 80173a6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80173aa:	79bb      	ldrb	r3, [r7, #6]
 80173ac:	015b      	lsls	r3, r3, #5
 80173ae:	69f8      	ldr	r0, [r7, #28]
 80173b0:	4403      	add	r3, r0
 80173b2:	430a      	orrs	r2, r1
 80173b4:	601a      	str	r2, [r3, #0]
}
 80173b6:	bf00      	nop
 80173b8:	3728      	adds	r7, #40	; 0x28
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bc90      	pop	{r4, r7}
 80173be:	4770      	bx	lr
 80173c0:	200094f4 	.word	0x200094f4
 80173c4:	20009574 	.word	0x20009574

080173c8 <print_dwc2_info>:
/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
#if CFG_TUSB_DEBUG >= DWC2_DEBUG
void print_dwc2_info(dwc2_regs_t * dwc2)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b086      	sub	sp, #24
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
  dwc2_ghwcfg2_t const * hw_cfg2 = &dwc2->ghwcfg2_bm;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	3348      	adds	r3, #72	; 0x48
 80173d4:	617b      	str	r3, [r7, #20]
  dwc2_ghwcfg3_t const * hw_cfg3 = &dwc2->ghwcfg3_bm;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	334c      	adds	r3, #76	; 0x4c
 80173da:	613b      	str	r3, [r7, #16]
  dwc2_ghwcfg4_t const * hw_cfg4 = &dwc2->ghwcfg4_bm;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	3350      	adds	r3, #80	; 0x50
 80173e0:	60fb      	str	r3, [r7, #12]

//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
  TU_LOG_HEX(DWC2_DEBUG, dwc2->guid);
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173e6:	4619      	mov	r1, r3
 80173e8:	48bb      	ldr	r0, [pc, #748]	; (80176d8 <print_dwc2_info+0x310>)
 80173ea:	f001 fed9 	bl	80191a0 <iprintf>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->gsnpsid);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173f2:	4619      	mov	r1, r3
 80173f4:	48b9      	ldr	r0, [pc, #740]	; (80176dc <print_dwc2_info+0x314>)
 80173f6:	f001 fed3 	bl	80191a0 <iprintf>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->ghwcfg1);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173fe:	4619      	mov	r1, r3
 8017400:	48b7      	ldr	r0, [pc, #732]	; (80176e0 <print_dwc2_info+0x318>)
 8017402:	f001 fecd 	bl	80191a0 <iprintf>

  // HW configure 2
  TU_LOG(DWC2_DEBUG, "\r\n");
 8017406:	48b7      	ldr	r0, [pc, #732]	; (80176e4 <print_dwc2_info+0x31c>)
 8017408:	f001 ff66 	bl	80192d8 <puts>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->ghwcfg2);
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017410:	4619      	mov	r1, r3
 8017412:	48b5      	ldr	r0, [pc, #724]	; (80176e8 <print_dwc2_info+0x320>)
 8017414:	f001 fec4 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->op_mode                );
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8017420:	b2db      	uxtb	r3, r3
 8017422:	4619      	mov	r1, r3
 8017424:	48b1      	ldr	r0, [pc, #708]	; (80176ec <print_dwc2_info+0x324>)
 8017426:	f001 febb 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->arch                   );
 801742a:	697b      	ldr	r3, [r7, #20]
 801742c:	781b      	ldrb	r3, [r3, #0]
 801742e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8017432:	b2db      	uxtb	r3, r3
 8017434:	4619      	mov	r1, r3
 8017436:	48ae      	ldr	r0, [pc, #696]	; (80176f0 <print_dwc2_info+0x328>)
 8017438:	f001 feb2 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->point2point            );
 801743c:	697b      	ldr	r3, [r7, #20]
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017444:	b2db      	uxtb	r3, r3
 8017446:	4619      	mov	r1, r3
 8017448:	48aa      	ldr	r0, [pc, #680]	; (80176f4 <print_dwc2_info+0x32c>)
 801744a:	f001 fea9 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->hs_phy_type            );
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8017456:	b2db      	uxtb	r3, r3
 8017458:	4619      	mov	r1, r3
 801745a:	48a7      	ldr	r0, [pc, #668]	; (80176f8 <print_dwc2_info+0x330>)
 801745c:	f001 fea0 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->fs_phy_type            );
 8017460:	697b      	ldr	r3, [r7, #20]
 8017462:	785b      	ldrb	r3, [r3, #1]
 8017464:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017468:	b2db      	uxtb	r3, r3
 801746a:	4619      	mov	r1, r3
 801746c:	48a3      	ldr	r0, [pc, #652]	; (80176fc <print_dwc2_info+0x334>)
 801746e:	f001 fe97 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->num_dev_ep             );
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	785b      	ldrb	r3, [r3, #1]
 8017476:	f3c3 0383 	ubfx	r3, r3, #2, #4
 801747a:	b2db      	uxtb	r3, r3
 801747c:	4619      	mov	r1, r3
 801747e:	48a0      	ldr	r0, [pc, #640]	; (8017700 <print_dwc2_info+0x338>)
 8017480:	f001 fe8e 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->num_host_ch            );
 8017484:	697b      	ldr	r3, [r7, #20]
 8017486:	785a      	ldrb	r2, [r3, #1]
 8017488:	0992      	lsrs	r2, r2, #6
 801748a:	b2d2      	uxtb	r2, r2
 801748c:	789b      	ldrb	r3, [r3, #2]
 801748e:	f003 0303 	and.w	r3, r3, #3
 8017492:	009b      	lsls	r3, r3, #2
 8017494:	4313      	orrs	r3, r2
 8017496:	b2db      	uxtb	r3, r3
 8017498:	4619      	mov	r1, r3
 801749a:	489a      	ldr	r0, [pc, #616]	; (8017704 <print_dwc2_info+0x33c>)
 801749c:	f001 fe80 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->period_channel_support );
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	789b      	ldrb	r3, [r3, #2]
 80174a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80174a8:	b2db      	uxtb	r3, r3
 80174aa:	4619      	mov	r1, r3
 80174ac:	4896      	ldr	r0, [pc, #600]	; (8017708 <print_dwc2_info+0x340>)
 80174ae:	f001 fe77 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->enable_dynamic_fifo    );
 80174b2:	697b      	ldr	r3, [r7, #20]
 80174b4:	789b      	ldrb	r3, [r3, #2]
 80174b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80174ba:	b2db      	uxtb	r3, r3
 80174bc:	4619      	mov	r1, r3
 80174be:	4893      	ldr	r0, [pc, #588]	; (801770c <print_dwc2_info+0x344>)
 80174c0:	f001 fe6e 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->mul_cpu_int            );
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	789b      	ldrb	r3, [r3, #2]
 80174c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80174cc:	b2db      	uxtb	r3, r3
 80174ce:	4619      	mov	r1, r3
 80174d0:	488f      	ldr	r0, [pc, #572]	; (8017710 <print_dwc2_info+0x348>)
 80174d2:	f001 fe65 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->nperiod_tx_q_depth     );
 80174d6:	697b      	ldr	r3, [r7, #20]
 80174d8:	789b      	ldrb	r3, [r3, #2]
 80174da:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80174de:	b2db      	uxtb	r3, r3
 80174e0:	4619      	mov	r1, r3
 80174e2:	488c      	ldr	r0, [pc, #560]	; (8017714 <print_dwc2_info+0x34c>)
 80174e4:	f001 fe5c 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->host_period_tx_q_depth );
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	78db      	ldrb	r3, [r3, #3]
 80174ec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80174f0:	b2db      	uxtb	r3, r3
 80174f2:	4619      	mov	r1, r3
 80174f4:	4888      	ldr	r0, [pc, #544]	; (8017718 <print_dwc2_info+0x350>)
 80174f6:	f001 fe53 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->dev_token_q_depth      );
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	78db      	ldrb	r3, [r3, #3]
 80174fe:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8017502:	b2db      	uxtb	r3, r3
 8017504:	4619      	mov	r1, r3
 8017506:	4885      	ldr	r0, [pc, #532]	; (801771c <print_dwc2_info+0x354>)
 8017508:	f001 fe4a 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->otg_enable_ic_usb      );
 801750c:	697b      	ldr	r3, [r7, #20]
 801750e:	78db      	ldrb	r3, [r3, #3]
 8017510:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8017514:	b2db      	uxtb	r3, r3
 8017516:	4619      	mov	r1, r3
 8017518:	4881      	ldr	r0, [pc, #516]	; (8017720 <print_dwc2_info+0x358>)
 801751a:	f001 fe41 	bl	80191a0 <iprintf>

  // HW configure 3
  TU_LOG(DWC2_DEBUG, "\r\n");
 801751e:	4871      	ldr	r0, [pc, #452]	; (80176e4 <print_dwc2_info+0x31c>)
 8017520:	f001 feda 	bl	80192d8 <puts>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->ghwcfg3);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017528:	4619      	mov	r1, r3
 801752a:	487e      	ldr	r0, [pc, #504]	; (8017724 <print_dwc2_info+0x35c>)
 801752c:	f001 fe38 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->xfer_size_width          );
 8017530:	693b      	ldr	r3, [r7, #16]
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017538:	b2db      	uxtb	r3, r3
 801753a:	4619      	mov	r1, r3
 801753c:	487a      	ldr	r0, [pc, #488]	; (8017728 <print_dwc2_info+0x360>)
 801753e:	f001 fe2f 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->packet_size_width        );
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	781b      	ldrb	r3, [r3, #0]
 8017546:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801754a:	b2db      	uxtb	r3, r3
 801754c:	4619      	mov	r1, r3
 801754e:	4877      	ldr	r0, [pc, #476]	; (801772c <print_dwc2_info+0x364>)
 8017550:	f001 fe26 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->otg_enable               );
 8017554:	693b      	ldr	r3, [r7, #16]
 8017556:	781b      	ldrb	r3, [r3, #0]
 8017558:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801755c:	b2db      	uxtb	r3, r3
 801755e:	4619      	mov	r1, r3
 8017560:	4873      	ldr	r0, [pc, #460]	; (8017730 <print_dwc2_info+0x368>)
 8017562:	f001 fe1d 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->i2c_enable               );
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	785b      	ldrb	r3, [r3, #1]
 801756a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801756e:	b2db      	uxtb	r3, r3
 8017570:	4619      	mov	r1, r3
 8017572:	4870      	ldr	r0, [pc, #448]	; (8017734 <print_dwc2_info+0x36c>)
 8017574:	f001 fe14 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->vendor_ctrl_itf          );
 8017578:	693b      	ldr	r3, [r7, #16]
 801757a:	785b      	ldrb	r3, [r3, #1]
 801757c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017580:	b2db      	uxtb	r3, r3
 8017582:	4619      	mov	r1, r3
 8017584:	486c      	ldr	r0, [pc, #432]	; (8017738 <print_dwc2_info+0x370>)
 8017586:	f001 fe0b 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->optional_feature_removed );
 801758a:	693b      	ldr	r3, [r7, #16]
 801758c:	785b      	ldrb	r3, [r3, #1]
 801758e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017592:	b2db      	uxtb	r3, r3
 8017594:	4619      	mov	r1, r3
 8017596:	4869      	ldr	r0, [pc, #420]	; (801773c <print_dwc2_info+0x374>)
 8017598:	f001 fe02 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->synch_reset              );
 801759c:	693b      	ldr	r3, [r7, #16]
 801759e:	785b      	ldrb	r3, [r3, #1]
 80175a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80175a4:	b2db      	uxtb	r3, r3
 80175a6:	4619      	mov	r1, r3
 80175a8:	4865      	ldr	r0, [pc, #404]	; (8017740 <print_dwc2_info+0x378>)
 80175aa:	f001 fdf9 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->otg_adp_support          );
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	785b      	ldrb	r3, [r3, #1]
 80175b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80175b6:	b2db      	uxtb	r3, r3
 80175b8:	4619      	mov	r1, r3
 80175ba:	4862      	ldr	r0, [pc, #392]	; (8017744 <print_dwc2_info+0x37c>)
 80175bc:	f001 fdf0 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->otg_enable_hsic          );
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	785b      	ldrb	r3, [r3, #1]
 80175c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80175c8:	b2db      	uxtb	r3, r3
 80175ca:	4619      	mov	r1, r3
 80175cc:	485e      	ldr	r0, [pc, #376]	; (8017748 <print_dwc2_info+0x380>)
 80175ce:	f001 fde7 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->battery_charger_support  );
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	785b      	ldrb	r3, [r3, #1]
 80175d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	4619      	mov	r1, r3
 80175de:	485b      	ldr	r0, [pc, #364]	; (801774c <print_dwc2_info+0x384>)
 80175e0:	f001 fdde 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->lpm_mode                 );
 80175e4:	693b      	ldr	r3, [r7, #16]
 80175e6:	785b      	ldrb	r3, [r3, #1]
 80175e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80175ec:	b2db      	uxtb	r3, r3
 80175ee:	4619      	mov	r1, r3
 80175f0:	4857      	ldr	r0, [pc, #348]	; (8017750 <print_dwc2_info+0x388>)
 80175f2:	f001 fdd5 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->total_fifo_size          );
 80175f6:	693b      	ldr	r3, [r7, #16]
 80175f8:	885b      	ldrh	r3, [r3, #2]
 80175fa:	b29b      	uxth	r3, r3
 80175fc:	4619      	mov	r1, r3
 80175fe:	4855      	ldr	r0, [pc, #340]	; (8017754 <print_dwc2_info+0x38c>)
 8017600:	f001 fdce 	bl	80191a0 <iprintf>

  // HW configure 4
  TU_LOG(DWC2_DEBUG, "\r\n");
 8017604:	4837      	ldr	r0, [pc, #220]	; (80176e4 <print_dwc2_info+0x31c>)
 8017606:	f001 fe67 	bl	80192d8 <puts>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->ghwcfg4);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801760e:	4619      	mov	r1, r3
 8017610:	4851      	ldr	r0, [pc, #324]	; (8017758 <print_dwc2_info+0x390>)
 8017612:	f001 fdc5 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->num_dev_period_in_ep      );
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	781b      	ldrb	r3, [r3, #0]
 801761a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801761e:	b2db      	uxtb	r3, r3
 8017620:	4619      	mov	r1, r3
 8017622:	484e      	ldr	r0, [pc, #312]	; (801775c <print_dwc2_info+0x394>)
 8017624:	f001 fdbc 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->power_optimized           );
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	781b      	ldrb	r3, [r3, #0]
 801762c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8017630:	b2db      	uxtb	r3, r3
 8017632:	4619      	mov	r1, r3
 8017634:	484a      	ldr	r0, [pc, #296]	; (8017760 <print_dwc2_info+0x398>)
 8017636:	f001 fdb3 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->ahb_freq_min              );
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017642:	b2db      	uxtb	r3, r3
 8017644:	4619      	mov	r1, r3
 8017646:	4847      	ldr	r0, [pc, #284]	; (8017764 <print_dwc2_info+0x39c>)
 8017648:	f001 fdaa 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->hibernation               );
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8017654:	b2db      	uxtb	r3, r3
 8017656:	4619      	mov	r1, r3
 8017658:	4843      	ldr	r0, [pc, #268]	; (8017768 <print_dwc2_info+0x3a0>)
 801765a:	f001 fda1 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->service_interval_mode     );
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	785b      	ldrb	r3, [r3, #1]
 8017662:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017666:	b2db      	uxtb	r3, r3
 8017668:	4619      	mov	r1, r3
 801766a:	4840      	ldr	r0, [pc, #256]	; (801776c <print_dwc2_info+0x3a4>)
 801766c:	f001 fd98 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->ipg_isoc_en               );
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	785b      	ldrb	r3, [r3, #1]
 8017674:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017678:	b2db      	uxtb	r3, r3
 801767a:	4619      	mov	r1, r3
 801767c:	483c      	ldr	r0, [pc, #240]	; (8017770 <print_dwc2_info+0x3a8>)
 801767e:	f001 fd8f 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->acg_enable                );
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	785b      	ldrb	r3, [r3, #1]
 8017686:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801768a:	b2db      	uxtb	r3, r3
 801768c:	4619      	mov	r1, r3
 801768e:	4839      	ldr	r0, [pc, #228]	; (8017774 <print_dwc2_info+0x3ac>)
 8017690:	f001 fd86 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->utmi_phy_data_width       );
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	785b      	ldrb	r3, [r3, #1]
 8017698:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801769c:	b2db      	uxtb	r3, r3
 801769e:	4619      	mov	r1, r3
 80176a0:	4835      	ldr	r0, [pc, #212]	; (8017778 <print_dwc2_info+0x3b0>)
 80176a2:	f001 fd7d 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->dev_ctrl_ep_num           );
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	789b      	ldrb	r3, [r3, #2]
 80176aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80176ae:	b2db      	uxtb	r3, r3
 80176b0:	4619      	mov	r1, r3
 80176b2:	4832      	ldr	r0, [pc, #200]	; (801777c <print_dwc2_info+0x3b4>)
 80176b4:	f001 fd74 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->iddg_filter_enabled       );
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	789b      	ldrb	r3, [r3, #2]
 80176bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80176c0:	b2db      	uxtb	r3, r3
 80176c2:	4619      	mov	r1, r3
 80176c4:	482e      	ldr	r0, [pc, #184]	; (8017780 <print_dwc2_info+0x3b8>)
 80176c6:	f001 fd6b 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->vbus_valid_filter_enabled );
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	789b      	ldrb	r3, [r3, #2]
 80176ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	4619      	mov	r1, r3
 80176d6:	e055      	b.n	8017784 <print_dwc2_info+0x3bc>
 80176d8:	0801b9f0 	.word	0x0801b9f0
 80176dc:	0801ba04 	.word	0x0801ba04
 80176e0:	0801ba1c 	.word	0x0801ba1c
 80176e4:	0801ba34 	.word	0x0801ba34
 80176e8:	0801ba38 	.word	0x0801ba38
 80176ec:	0801ba50 	.word	0x0801ba50
 80176f0:	0801ba6c 	.word	0x0801ba6c
 80176f4:	0801ba84 	.word	0x0801ba84
 80176f8:	0801baa4 	.word	0x0801baa4
 80176fc:	0801bac4 	.word	0x0801bac4
 8017700:	0801bae4 	.word	0x0801bae4
 8017704:	0801bb00 	.word	0x0801bb00
 8017708:	0801bb20 	.word	0x0801bb20
 801770c:	0801bb48 	.word	0x0801bb48
 8017710:	0801bb70 	.word	0x0801bb70
 8017714:	0801bb90 	.word	0x0801bb90
 8017718:	0801bbb4 	.word	0x0801bbb4
 801771c:	0801bbdc 	.word	0x0801bbdc
 8017720:	0801bc00 	.word	0x0801bc00
 8017724:	0801bc24 	.word	0x0801bc24
 8017728:	0801bc3c 	.word	0x0801bc3c
 801772c:	0801bc60 	.word	0x0801bc60
 8017730:	0801bc84 	.word	0x0801bc84
 8017734:	0801bca0 	.word	0x0801bca0
 8017738:	0801bcbc 	.word	0x0801bcbc
 801773c:	0801bce0 	.word	0x0801bce0
 8017740:	0801bd0c 	.word	0x0801bd0c
 8017744:	0801bd2c 	.word	0x0801bd2c
 8017748:	0801bd50 	.word	0x0801bd50
 801774c:	0801bd74 	.word	0x0801bd74
 8017750:	0801bda0 	.word	0x0801bda0
 8017754:	0801bdbc 	.word	0x0801bdbc
 8017758:	0801bde0 	.word	0x0801bde0
 801775c:	0801bdf8 	.word	0x0801bdf8
 8017760:	0801be20 	.word	0x0801be20
 8017764:	0801be44 	.word	0x0801be44
 8017768:	0801be64 	.word	0x0801be64
 801776c:	0801be84 	.word	0x0801be84
 8017770:	0801beac 	.word	0x0801beac
 8017774:	0801becc 	.word	0x0801becc
 8017778:	0801bee8 	.word	0x0801bee8
 801777c:	0801bf10 	.word	0x0801bf10
 8017780:	0801bf34 	.word	0x0801bf34
 8017784:	481e      	ldr	r0, [pc, #120]	; (8017800 <print_dwc2_info+0x438>)
 8017786:	f001 fd0b 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->a_valid_filter_enabled    );
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	789b      	ldrb	r3, [r3, #2]
 801778e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8017792:	b2db      	uxtb	r3, r3
 8017794:	4619      	mov	r1, r3
 8017796:	481b      	ldr	r0, [pc, #108]	; (8017804 <print_dwc2_info+0x43c>)
 8017798:	f001 fd02 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->b_valid_filter_enabled    );
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	789b      	ldrb	r3, [r3, #2]
 80177a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80177a4:	b2db      	uxtb	r3, r3
 80177a6:	4619      	mov	r1, r3
 80177a8:	4817      	ldr	r0, [pc, #92]	; (8017808 <print_dwc2_info+0x440>)
 80177aa:	f001 fcf9 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->dedicated_fifos           );
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	78db      	ldrb	r3, [r3, #3]
 80177b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80177b6:	b2db      	uxtb	r3, r3
 80177b8:	4619      	mov	r1, r3
 80177ba:	4814      	ldr	r0, [pc, #80]	; (801780c <print_dwc2_info+0x444>)
 80177bc:	f001 fcf0 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->num_dev_in_eps            );
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	78db      	ldrb	r3, [r3, #3]
 80177c4:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80177c8:	b2db      	uxtb	r3, r3
 80177ca:	4619      	mov	r1, r3
 80177cc:	4810      	ldr	r0, [pc, #64]	; (8017810 <print_dwc2_info+0x448>)
 80177ce:	f001 fce7 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->dma_desc_enable           );
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	78db      	ldrb	r3, [r3, #3]
 80177d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	4619      	mov	r1, r3
 80177de:	480d      	ldr	r0, [pc, #52]	; (8017814 <print_dwc2_info+0x44c>)
 80177e0:	f001 fcde 	bl	80191a0 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->dma_dynamic               );
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	78db      	ldrb	r3, [r3, #3]
 80177e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80177ec:	b2db      	uxtb	r3, r3
 80177ee:	4619      	mov	r1, r3
 80177f0:	4809      	ldr	r0, [pc, #36]	; (8017818 <print_dwc2_info+0x450>)
 80177f2:	f001 fcd5 	bl	80191a0 <iprintf>
}
 80177f6:	bf00      	nop
 80177f8:	3718      	adds	r7, #24
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}
 80177fe:	bf00      	nop
 8017800:	0801bf5c 	.word	0x0801bf5c
 8017804:	0801bf88 	.word	0x0801bf88
 8017808:	0801bfb0 	.word	0x0801bfb0
 801780c:	0801bfd8 	.word	0x0801bfd8
 8017810:	0801bffc 	.word	0x0801bffc
 8017814:	0801c01c 	.word	0x0801c01c
 8017818:	0801c040 	.word	0x0801c040

0801781c <reset_core>:
#endif

static void reset_core(dwc2_regs_t * dwc2)
{
 801781c:	b480      	push	{r7}
 801781e:	b083      	sub	sp, #12
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	691b      	ldr	r3, [r3, #16]
 8017828:	f043 0201 	orr.w	r2, r3, #1
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	611a      	str	r2, [r3, #16]

  // wait for reset bit is cleared
  // TODO version 4.20a should wait for RESET DONE mask
  while (dwc2->grstctl & GRSTCTL_CSRST) { }
 8017830:	bf00      	nop
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	691b      	ldr	r3, [r3, #16]
 8017836:	f003 0301 	and.w	r3, r3, #1
 801783a:	2b00      	cmp	r3, #0
 801783c:	d1f9      	bne.n	8017832 <reset_core+0x16>

  // wait for AHB master IDLE
  while ( !(dwc2->grstctl & GRSTCTL_AHBIDL) ) { }
 801783e:	bf00      	nop
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	691b      	ldr	r3, [r3, #16]
 8017844:	2b00      	cmp	r3, #0
 8017846:	dafb      	bge.n	8017840 <reset_core+0x24>

  // wait for device mode ?
}
 8017848:	bf00      	nop
 801784a:	bf00      	nop
 801784c:	370c      	adds	r7, #12
 801784e:	46bd      	mov	sp, r7
 8017850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017854:	4770      	bx	lr

08017856 <phy_hs_supported>:

static bool phy_hs_supported(dwc2_regs_t * dwc2)
{
 8017856:	b480      	push	{r7}
 8017858:	b083      	sub	sp, #12
 801785a:	af00      	add	r7, sp, #0
 801785c:	6078      	str	r0, [r7, #4]
  // note: esp32 incorrect report its hs_phy_type as utmi
  return TUD_OPT_HIGH_SPEED && dwc2->ghwcfg2_bm.hs_phy_type != HS_PHY_TYPE_NONE;
 801785e:	2300      	movs	r3, #0
}
 8017860:	4618      	mov	r0, r3
 8017862:	370c      	adds	r7, #12
 8017864:	46bd      	mov	sp, r7
 8017866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786a:	4770      	bx	lr

0801786c <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t * dwc2)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_DEBUG, "Fullspeed PHY init\r\n");
 8017874:	4813      	ldr	r0, [pc, #76]	; (80178c4 <phy_fs_init+0x58>)
 8017876:	f001 fd2f 	bl	80192d8 <puts>

  // Select FS PHY
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	68db      	ldr	r3, [r3, #12]
 801787e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, HS_PHY_TYPE_NONE);
 8017886:	2100      	movs	r1, #0
 8017888:	6878      	ldr	r0, [r7, #4]
 801788a:	f7ff fb5f 	bl	8016f4c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f7ff ffc4 	bl	801781c <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	68db      	ldr	r3, [r3, #12]
 8017898:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 801789c:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, HS_PHY_TYPE_NONE);
 80178a4:	2100      	movs	r1, #0
 80178a6:	6878      	ldr	r0, [r7, #4]
 80178a8:	f7ff fb6c 	bl	8016f84 <dwc2_phy_update>

  // set max speed
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80178b2:	f043 0203 	orr.w	r2, r3, #3
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80178bc:	bf00      	nop
 80178be:	3708      	adds	r7, #8
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}
 80178c4:	0801c060 	.word	0x0801c060

080178c8 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t * dwc2)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b084      	sub	sp, #16
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	68db      	ldr	r3, [r3, #12]
 80178d4:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80178dc:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI)
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80178e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80178e8:	b2db      	uxtb	r3, r3
 80178ea:	2b80      	cmp	r3, #128	; 0x80
 80178ec:	d113      	bne.n	8017916 <phy_hs_init+0x4e>
  {
    TU_LOG(DWC2_DEBUG, "Highspeed ULPI PHY init\r\n");
 80178ee:	483a      	ldr	r0, [pc, #232]	; (80179d8 <phy_hs_init+0x110>)
 80178f0:	f001 fcf2 	bl	80192d8 <puts>

    // Select ULPI
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	f043 0310 	orr.w	r3, r3, #16
 80178fa:	60fb      	str	r3, [r7, #12]

    // ULPI 8-bit interface, single data rate
    gusbcfg &= ~(GUSBCFG_PHYIF16 | GUSBCFG_DDRSEL);
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8017902:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801790a:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	f423 2320 	bic.w	r3, r3, #655360	; 0xa0000
 8017912:	60fb      	str	r3, [r7, #12]
 8017914:	e012      	b.n	801793c <phy_hs_init+0x74>
  }else
  {
    TU_LOG(DWC2_DEBUG, "Highspeed UTMI+ PHY init\r\n");
 8017916:	4831      	ldr	r0, [pc, #196]	; (80179dc <phy_hs_init+0x114>)
 8017918:	f001 fcde 	bl	80192d8 <puts>

    // Select UTMI+ with 8-bit interface
    gusbcfg &= ~(GUSBCFG_ULPI_UTMI_SEL | GUSBCFG_PHYIF16);
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	f023 0318 	bic.w	r3, r3, #24
 8017922:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.utmi_phy_data_width) gusbcfg |= GUSBCFG_PHYIF16;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801792a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801792e:	b2db      	uxtb	r3, r3
 8017930:	2b00      	cmp	r3, #0
 8017932:	d003      	beq.n	801793c <phy_hs_init+0x74>
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	f043 0308 	orr.w	r3, r3, #8
 801793a:	60fb      	str	r3, [r7, #12]
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	68fa      	ldr	r2, [r7, #12]
 8017940:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017948:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801794c:	b2db      	uxtb	r3, r3
 801794e:	4619      	mov	r1, r3
 8017950:	6878      	ldr	r0, [r7, #4]
 8017952:	f7ff fafb 	bl	8016f4c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f7ff ff60 	bl	801781c <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8017962:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.utmi_phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801796a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801796e:	b2db      	uxtb	r3, r3
 8017970:	2b00      	cmp	r3, #0
 8017972:	d002      	beq.n	801797a <phy_hs_init+0xb2>
 8017974:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017978:	e001      	b.n	801797e <phy_hs_init+0xb6>
 801797a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 801797e:	68fa      	ldr	r2, [r7, #12]
 8017980:	4313      	orrs	r3, r2
 8017982:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	68fa      	ldr	r2, [r7, #12]
 8017988:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017990:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8017994:	b2db      	uxtb	r3, r3
 8017996:	4619      	mov	r1, r3
 8017998:	6878      	ldr	r0, [r7, #4]
 801799a:	f7ff faf3 	bl	8016f84 <dwc2_phy_update>

  // Set max speed
  uint32_t dcfg = dwc2->dcfg;
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80179a4:	60bb      	str	r3, [r7, #8]
  dcfg &= ~DCFG_DSPD_Msk;
 80179a6:	68bb      	ldr	r3, [r7, #8]
 80179a8:	f023 0303 	bic.w	r3, r3, #3
 80179ac:	60bb      	str	r3, [r7, #8]
  dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

  // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
  // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) dcfg |= DCFG_XCVRDLY;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80179b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80179b8:	b2db      	uxtb	r3, r3
 80179ba:	2b80      	cmp	r3, #128	; 0x80
 80179bc:	d103      	bne.n	80179c6 <phy_hs_init+0xfe>
 80179be:	68bb      	ldr	r3, [r7, #8]
 80179c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80179c4:	60bb      	str	r3, [r7, #8]

  dwc2->dcfg = dcfg;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	68ba      	ldr	r2, [r7, #8]
 80179ca:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80179ce:	bf00      	nop
 80179d0:	3710      	adds	r7, #16
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}
 80179d6:	bf00      	nop
 80179d8:	0801c074 	.word	0x0801c074
 80179dc:	0801c090 	.word	0x0801c090

080179e0 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t * dwc2)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
#if CFG_TUSB_DEBUG >= DWC2_DEBUG
  print_dwc2_info(dwc2);
 80179e8:	6878      	ldr	r0, [r7, #4]
 80179ea:	f7ff fced 	bl	80173c8 <print_dwc2_info>
//#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
//  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
//  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
//#endif

  return true;
 80179ee:	2301      	movs	r3, #1
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	3708      	adds	r7, #8
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}

080179f8 <dcd_init>:

void dcd_init (uint8_t rhport)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b084      	sub	sp, #16
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	4603      	mov	r3, r0
 8017a00:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017a06:	60fb      	str	r3, [r7, #12]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_VERIFY(check_dwc2(dwc2), );
 8017a08:	68f8      	ldr	r0, [r7, #12]
 8017a0a:	f7ff ffe9 	bl	80179e0 <check_dwc2>
 8017a0e:	4603      	mov	r3, r0
 8017a10:	f083 0301 	eor.w	r3, r3, #1
 8017a14:	b2db      	uxtb	r3, r3
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d152      	bne.n	8017ac0 <dcd_init+0xc8>

  dcd_disconnect(rhport);
 8017a1a:	79fb      	ldrb	r3, [r7, #7]
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f000 f89f 	bl	8017b60 <dcd_disconnect>

  // max number of endpoints & total_fifo_size are:
  // hw_cfg2->num_dev_ep, hw_cfg2->total_fifo_size

  if( phy_hs_supported(dwc2) )
 8017a22:	68f8      	ldr	r0, [r7, #12]
 8017a24:	f7ff ff17 	bl	8017856 <phy_hs_supported>
 8017a28:	4603      	mov	r3, r0
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d003      	beq.n	8017a36 <dcd_init+0x3e>
  {
    // Highspeed
    phy_hs_init(dwc2);
 8017a2e:	68f8      	ldr	r0, [r7, #12]
 8017a30:	f7ff ff4a 	bl	80178c8 <phy_hs_init>
 8017a34:	e002      	b.n	8017a3c <dcd_init+0x44>
  }else
  {
    // core does not support highspeed or hs-phy is not present
    phy_fs_init(dwc2);
 8017a36:	68f8      	ldr	r0, [r7, #12]
 8017a38:	f7ff ff18 	bl	801786c <phy_fs_init>
  }

  // Restart PHY clock
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8017a42:	f023 020f 	bic.w	r2, r3, #15
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	 * duration in the core to account for any additional delays
	 * introduced by the PHY. This can be required, because the delay
	 * introduced by the PHY in generating the linestate condition
	 * can vary from one PHY to another.
	 */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	68db      	ldr	r3, [r3, #12]
 8017a50:	f043 0207 	orr.w	r2, r3, #7
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	60da      	str	r2, [r3, #12]

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	68db      	ldr	r3, [r3, #12]
 8017a5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8017a60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8017a70:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	601a      	str	r2, [r3, #0]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dwc2->dcfg |= DCFG_NZLSOHSK;
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8017a7e:	f043 0204 	orr.w	r2, r3, #4
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // Clear all interrupts
  dwc2->gintsts |= dwc2->gintsts;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	695a      	ldr	r2, [r3, #20]
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	695b      	ldr	r3, [r3, #20]
 8017a90:	431a      	orrs	r2, r3
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	615a      	str	r2, [r3, #20]
  dwc2->gotgint |= dwc2->gotgint;
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	685a      	ldr	r2, [r3, #4]
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	685b      	ldr	r3, [r3, #4]
 8017a9e:	431a      	orrs	r2, r3
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	605a      	str	r2, [r3, #4]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  dwc2->gintmsk = GINTMSK_OTGINT   | GINTMSK_MMISM  | GINTMSK_RXFLVLM  |
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	4a08      	ldr	r2, [pc, #32]	; (8017ac8 <dcd_init+0xd0>)
 8017aa8:	619a      	str	r2, [r3, #24]
                  GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;

  // Enable global interrupt
  dwc2->gahbcfg |= GAHBCFG_GINT;
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	689b      	ldr	r3, [r3, #8]
 8017aae:	f043 0201 	orr.w	r2, r3, #1
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	609a      	str	r2, [r3, #8]
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gahbcfg);

  dcd_connect(rhport);
 8017ab6:	79fb      	ldrb	r3, [r7, #7]
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f000 f83b 	bl	8017b34 <dcd_connect>
 8017abe:	e000      	b.n	8017ac2 <dcd_init+0xca>
  TU_VERIFY(check_dwc2(dwc2), );
 8017ac0:	bf00      	nop
}
 8017ac2:	3710      	adds	r7, #16
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}
 8017ac8:	80003816 	.word	0x80003816

08017acc <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b084      	sub	sp, #16
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	71fb      	strb	r3, [r7, #7]
 8017ad6:	79fb      	ldrb	r3, [r7, #7]
 8017ad8:	73fb      	strb	r3, [r7, #15]
  NVIC_EnableIRQ(RHPORT_IRQn);
 8017ada:	2043      	movs	r0, #67	; 0x43
 8017adc:	f7ff fa18 	bl	8016f10 <__NVIC_EnableIRQ>
}
 8017ae0:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 8017ae2:	bf00      	nop
 8017ae4:	3710      	adds	r7, #16
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	bd80      	pop	{r7, pc}

08017aea <dcd_set_address>:
{
  dwc2_dcd_int_disable(rhport);
}

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8017aea:	b580      	push	{r7, lr}
 8017aec:	b084      	sub	sp, #16
 8017aee:	af00      	add	r7, sp, #0
 8017af0:	4603      	mov	r3, r0
 8017af2:	460a      	mov	r2, r1
 8017af4:	71fb      	strb	r3, [r7, #7]
 8017af6:	4613      	mov	r3, r2
 8017af8:	71bb      	strb	r3, [r7, #6]
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017afa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017afe:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8017b06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8017b0a:	79ba      	ldrb	r2, [r7, #6]
 8017b0c:	0112      	lsls	r2, r2, #4
 8017b0e:	431a      	orrs	r2, r3
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8017b16:	2101      	movs	r1, #1
 8017b18:	2000      	movs	r0, #0
 8017b1a:	f7ff f9ce 	bl	8016eba <tu_edpt_addr>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	4619      	mov	r1, r3
 8017b22:	79f8      	ldrb	r0, [r7, #7]
 8017b24:	2300      	movs	r3, #0
 8017b26:	2200      	movs	r2, #0
 8017b28:	f000 f9a8 	bl	8017e7c <dcd_edpt_xfer>
}
 8017b2c:	bf00      	nop
 8017b2e:	3710      	adds	r7, #16
 8017b30:	46bd      	mov	sp, r7
 8017b32:	bd80      	pop	{r7, pc}

08017b34 <dcd_connect>:

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 8017b34:	b480      	push	{r7}
 8017b36:	b085      	sub	sp, #20
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017b3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017b42:	60fb      	str	r3, [r7, #12]
  dwc2->dctl &= ~DCTL_SDIS;
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8017b4a:	f023 0202 	bic.w	r2, r3, #2
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8017b54:	bf00      	nop
 8017b56:	3714      	adds	r7, #20
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5e:	4770      	bx	lr

08017b60 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b085      	sub	sp, #20
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	4603      	mov	r3, r0
 8017b68:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017b6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017b6e:	60fb      	str	r3, [r7, #12]
  dwc2->dctl |= DCTL_SDIS;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8017b76:	f043 0202 	orr.w	r2, r3, #2
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8017b80:	bf00      	nop
 8017b82:	3714      	adds	r7, #20
 8017b84:	46bd      	mov	sp, r7
 8017b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8a:	4770      	bx	lr

08017b8c <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b08c      	sub	sp, #48	; 0x30
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	4603      	mov	r3, r0
 8017b94:	6039      	str	r1, [r7, #0]
 8017b96:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017b98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017b9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8017b9e:	683b      	ldr	r3, [r7, #0]
 8017ba0:	789b      	ldrb	r3, [r3, #2]
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7ff f97a 	bl	8016e9c <tu_edpt_number>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	789b      	ldrb	r3, [r3, #2]
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f7ff f964 	bl	8016e80 <tu_edpt_dir>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  TU_ASSERT(epnum < DWC2_EP_MAX);
 8017bbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017bc2:	2b03      	cmp	r3, #3
 8017bc4:	d910      	bls.n	8017be8 <dcd_edpt_open+0x5c>
 8017bc6:	f240 2262 	movw	r2, #610	; 0x262
 8017bca:	4986      	ldr	r1, [pc, #536]	; (8017de4 <dcd_edpt_open+0x258>)
 8017bcc:	4886      	ldr	r0, [pc, #536]	; (8017de8 <dcd_edpt_open+0x25c>)
 8017bce:	f001 fae7 	bl	80191a0 <iprintf>
 8017bd2:	4b86      	ldr	r3, [pc, #536]	; (8017dec <dcd_edpt_open+0x260>)
 8017bd4:	613b      	str	r3, [r7, #16]
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	f003 0301 	and.w	r3, r3, #1
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d000      	beq.n	8017be4 <dcd_edpt_open+0x58>
 8017be2:	be00      	bkpt	0x0000
 8017be4:	2300      	movs	r3, #0
 8017be6:	e0f9      	b.n	8017ddc <dcd_edpt_open+0x250>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8017be8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8017bec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017bf0:	0052      	lsls	r2, r2, #1
 8017bf2:	4413      	add	r3, r2
 8017bf4:	011b      	lsls	r3, r3, #4
 8017bf6:	4a7e      	ldr	r2, [pc, #504]	; (8017df0 <dcd_edpt_open+0x264>)
 8017bf8:	4413      	add	r3, r2
 8017bfa:	627b      	str	r3, [r7, #36]	; 0x24
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8017bfc:	6838      	ldr	r0, [r7, #0]
 8017bfe:	f7ff f976 	bl	8016eee <tu_edpt_packet_size>
 8017c02:	4603      	mov	r3, r0
 8017c04:	461a      	mov	r2, r3
 8017c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c08:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	799a      	ldrb	r2, [r3, #6]
 8017c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c10:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 8017c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c14:	895b      	ldrh	r3, [r3, #10]
 8017c16:	60fb      	str	r3, [r7, #12]
 8017c18:	2304      	movs	r3, #4
 8017c1a:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 8017c1c:	68fa      	ldr	r2, [r7, #12]
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	4413      	add	r3, r2
 8017c22:	1e5a      	subs	r2, r3, #1
 8017c24:	68bb      	ldr	r3, [r7, #8]
 8017c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8017c2a:	847b      	strh	r3, [r7, #34]	; 0x22

  if(dir == TUSB_DIR_OUT)
 8017c2c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d15c      	bne.n	8017cee <dcd_edpt_open+0x162>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 8017c34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c36:	009b      	lsls	r3, r3, #2
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f7ff fa18 	bl	8017070 <calc_rx_ff_size>
 8017c40:	4603      	mov	r3, r0
 8017c42:	837b      	strh	r3, [r7, #26]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz)
 8017c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017c48:	8b7b      	ldrh	r3, [r7, #26]
 8017c4a:	429a      	cmp	r2, r3
 8017c4c:	d21a      	bcs.n	8017c84 <dcd_edpt_open+0xf8>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= DWC2_EP_FIFO_SIZE/4);
 8017c4e:	8b7b      	ldrh	r3, [r7, #26]
 8017c50:	4a68      	ldr	r2, [pc, #416]	; (8017df4 <dcd_edpt_open+0x268>)
 8017c52:	8812      	ldrh	r2, [r2, #0]
 8017c54:	4413      	add	r3, r2
 8017c56:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8017c5a:	d910      	bls.n	8017c7e <dcd_edpt_open+0xf2>
 8017c5c:	f240 2272 	movw	r2, #626	; 0x272
 8017c60:	4960      	ldr	r1, [pc, #384]	; (8017de4 <dcd_edpt_open+0x258>)
 8017c62:	4861      	ldr	r0, [pc, #388]	; (8017de8 <dcd_edpt_open+0x25c>)
 8017c64:	f001 fa9c 	bl	80191a0 <iprintf>
 8017c68:	4b60      	ldr	r3, [pc, #384]	; (8017dec <dcd_edpt_open+0x260>)
 8017c6a:	617b      	str	r3, [r7, #20]
 8017c6c:	697b      	ldr	r3, [r7, #20]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	f003 0301 	and.w	r3, r3, #1
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d000      	beq.n	8017c7a <dcd_edpt_open+0xee>
 8017c78:	be00      	bkpt	0x0000
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	e0ae      	b.n	8017ddc <dcd_edpt_open+0x250>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 8017c7e:	8b7a      	ldrh	r2, [r7, #26]
 8017c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c82:	625a      	str	r2, [r3, #36]	; 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8017c84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c8a:	3358      	adds	r3, #88	; 0x58
 8017c8c:	015b      	lsls	r3, r3, #5
 8017c8e:	4413      	add	r3, r2
 8017c90:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8017c92:	683b      	ldr	r3, [r7, #0]
 8017c94:	78db      	ldrb	r3, [r3, #3]
 8017c96:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017c9a:	b2db      	uxtb	r3, r3
 8017c9c:	049b      	lsls	r3, r3, #18
 8017c9e:	4619      	mov	r1, r3
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	78db      	ldrb	r3, [r3, #3]
 8017ca4:	f003 0303 	and.w	r3, r3, #3
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	2b01      	cmp	r3, #1
 8017cac:	d002      	beq.n	8017cb4 <dcd_edpt_open+0x128>
 8017cae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017cb2:	e000      	b.n	8017cb6 <dcd_edpt_open+0x12a>
 8017cb4:	2300      	movs	r3, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8017cb6:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 8017cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017cba:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8017cbc:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8017cbe:	431a      	orrs	r2, r3
 8017cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017cc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017cca:	3358      	adds	r3, #88	; 0x58
 8017ccc:	015b      	lsls	r3, r3, #5
 8017cce:	440b      	add	r3, r1
 8017cd0:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 8017cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cd4:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8017cd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017cdc:	3310      	adds	r3, #16
 8017cde:	2101      	movs	r1, #1
 8017ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8017ce4:	431a      	orrs	r2, r3
 8017ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce8:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8017cec:	e075      	b.n	8017dda <dcd_edpt_open+0x24e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= DWC2_EP_FIFO_SIZE/4);
 8017cee:	4b41      	ldr	r3, [pc, #260]	; (8017df4 <dcd_edpt_open+0x268>)
 8017cf0:	881b      	ldrh	r3, [r3, #0]
 8017cf2:	461a      	mov	r2, r3
 8017cf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cf6:	4413      	add	r3, r2
 8017cf8:	461a      	mov	r2, r3
 8017cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cfe:	4413      	add	r3, r2
 8017d00:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8017d04:	d910      	bls.n	8017d28 <dcd_edpt_open+0x19c>
 8017d06:	f240 2297 	movw	r2, #663	; 0x297
 8017d0a:	4936      	ldr	r1, [pc, #216]	; (8017de4 <dcd_edpt_open+0x258>)
 8017d0c:	4836      	ldr	r0, [pc, #216]	; (8017de8 <dcd_edpt_open+0x25c>)
 8017d0e:	f001 fa47 	bl	80191a0 <iprintf>
 8017d12:	4b36      	ldr	r3, [pc, #216]	; (8017dec <dcd_edpt_open+0x260>)
 8017d14:	61fb      	str	r3, [r7, #28]
 8017d16:	69fb      	ldr	r3, [r7, #28]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	f003 0301 	and.w	r3, r3, #1
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d000      	beq.n	8017d24 <dcd_edpt_open+0x198>
 8017d22:	be00      	bkpt	0x0000
 8017d24:	2300      	movs	r3, #0
 8017d26:	e059      	b.n	8017ddc <dcd_edpt_open+0x250>

    _allocated_fifo_words_tx += fifo_size;
 8017d28:	4b32      	ldr	r3, [pc, #200]	; (8017df4 <dcd_edpt_open+0x268>)
 8017d2a:	881a      	ldrh	r2, [r3, #0]
 8017d2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d2e:	4413      	add	r3, r2
 8017d30:	b29a      	uxth	r2, r3
 8017d32:	4b30      	ldr	r3, [pc, #192]	; (8017df4 <dcd_edpt_open+0x268>)
 8017d34:	801a      	strh	r2, [r3, #0]

    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %u", fifo_size*4, DWC2_EP_FIFO_SIZE-_allocated_fifo_words_tx*4);
 8017d36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d38:	009b      	lsls	r3, r3, #2
 8017d3a:	4a2e      	ldr	r2, [pc, #184]	; (8017df4 <dcd_edpt_open+0x268>)
 8017d3c:	8812      	ldrh	r2, [r2, #0]
 8017d3e:	0092      	lsls	r2, r2, #2
 8017d40:	f5c2 62a0 	rsb	r2, r2, #1280	; 0x500
 8017d44:	4619      	mov	r1, r3
 8017d46:	482c      	ldr	r0, [pc, #176]	; (8017df8 <dcd_edpt_open+0x26c>)
 8017d48:	f001 fa2a 	bl	80191a0 <iprintf>

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (DWC2_EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8017d4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d4e:	041b      	lsls	r3, r3, #16
 8017d50:	4619      	mov	r1, r3
 8017d52:	4b28      	ldr	r3, [pc, #160]	; (8017df4 <dcd_edpt_open+0x268>)
 8017d54:	881b      	ldrh	r3, [r3, #0]
 8017d56:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8017d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017d5e:	3b01      	subs	r3, #1
 8017d60:	430a      	orrs	r2, r1
 8017d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017d64:	3340      	adds	r3, #64	; 0x40
 8017d66:	009b      	lsls	r3, r3, #2
 8017d68:	440b      	add	r3, r1
 8017d6a:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8017d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d72:	3348      	adds	r3, #72	; 0x48
 8017d74:	015b      	lsls	r3, r3, #5
 8017d76:	4413      	add	r3, r2
 8017d78:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8017d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017d7e:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8017d80:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	78db      	ldrb	r3, [r3, #3]
 8017d88:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017d8c:	b2db      	uxtb	r3, r3
 8017d8e:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8017d90:	4313      	orrs	r3, r2
 8017d92:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8017d94:	683b      	ldr	r3, [r7, #0]
 8017d96:	78db      	ldrb	r3, [r3, #3]
 8017d98:	f003 0303 	and.w	r3, r3, #3
 8017d9c:	b2db      	uxtb	r3, r3
 8017d9e:	2b01      	cmp	r3, #1
 8017da0:	d002      	beq.n	8017da8 <dcd_edpt_open+0x21c>
 8017da2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017da6:	e000      	b.n	8017daa <dcd_edpt_open+0x21e>
 8017da8:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 8017daa:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 8017dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017dae:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8017db0:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8017db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017db6:	430a      	orrs	r2, r1
 8017db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017dba:	3348      	adds	r3, #72	; 0x48
 8017dbc:	015b      	lsls	r3, r3, #5
 8017dbe:	440b      	add	r3, r1
 8017dc0:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 8017dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc4:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8017dc8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8017dcc:	2101      	movs	r1, #1
 8017dce:	fa01 f202 	lsl.w	r2, r1, r2
 8017dd2:	431a      	orrs	r2, r3
 8017dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  }

  return true;
 8017dda:	2301      	movs	r3, #1
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3730      	adds	r7, #48	; 0x30
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}
 8017de4:	0801ca90 	.word	0x0801ca90
 8017de8:	0801c0ac 	.word	0x0801c0ac
 8017dec:	e000edf0 	.word	0xe000edf0
 8017df0:	200094f4 	.word	0x200094f4
 8017df4:	20009578 	.word	0x20009578
 8017df8:	0801c0c4 	.word	0x0801c0c4

08017dfc <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 8017dfc:	b480      	push	{r7}
 8017dfe:	b085      	sub	sp, #20
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	4603      	mov	r3, r0
 8017e04:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8017e06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017e0a:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8017e0c:	68bb      	ldr	r3, [r7, #8]
 8017e0e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8017e12:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  for(uint8_t n = 1; n < DWC2_EP_MAX; n++)
 8017e16:	2301      	movs	r3, #1
 8017e18:	73fb      	strb	r3, [r7, #15]
 8017e1a:	e01e      	b.n	8017e5a <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    dwc2->epout[n].doepctl = 0;
 8017e1c:	7bfb      	ldrb	r3, [r7, #15]
 8017e1e:	68ba      	ldr	r2, [r7, #8]
 8017e20:	3358      	adds	r3, #88	; 0x58
 8017e22:	015b      	lsls	r3, r3, #5
 8017e24:	4413      	add	r3, r2
 8017e26:	2200      	movs	r2, #0
 8017e28:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8017e2a:	7bfb      	ldrb	r3, [r7, #15]
 8017e2c:	4a11      	ldr	r2, [pc, #68]	; (8017e74 <dcd_edpt_close_all+0x78>)
 8017e2e:	015b      	lsls	r3, r3, #5
 8017e30:	4413      	add	r3, r2
 8017e32:	330a      	adds	r3, #10
 8017e34:	2200      	movs	r2, #0
 8017e36:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    dwc2->epin[n].diepctl = 0;
 8017e38:	7bfb      	ldrb	r3, [r7, #15]
 8017e3a:	68ba      	ldr	r2, [r7, #8]
 8017e3c:	3348      	adds	r3, #72	; 0x48
 8017e3e:	015b      	lsls	r3, r3, #5
 8017e40:	4413      	add	r3, r2
 8017e42:	2200      	movs	r2, #0
 8017e44:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8017e46:	7bfb      	ldrb	r3, [r7, #15]
 8017e48:	4a0a      	ldr	r2, [pc, #40]	; (8017e74 <dcd_edpt_close_all+0x78>)
 8017e4a:	015b      	lsls	r3, r3, #5
 8017e4c:	4413      	add	r3, r2
 8017e4e:	331a      	adds	r3, #26
 8017e50:	2200      	movs	r2, #0
 8017e52:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < DWC2_EP_MAX; n++)
 8017e54:	7bfb      	ldrb	r3, [r7, #15]
 8017e56:	3301      	adds	r3, #1
 8017e58:	73fb      	strb	r3, [r7, #15]
 8017e5a:	7bfb      	ldrb	r3, [r7, #15]
 8017e5c:	2b03      	cmp	r3, #3
 8017e5e:	d9dd      	bls.n	8017e1c <dcd_edpt_close_all+0x20>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8017e60:	4b05      	ldr	r3, [pc, #20]	; (8017e78 <dcd_edpt_close_all+0x7c>)
 8017e62:	2210      	movs	r2, #16
 8017e64:	801a      	strh	r2, [r3, #0]
}
 8017e66:	bf00      	nop
 8017e68:	3714      	adds	r7, #20
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e70:	4770      	bx	lr
 8017e72:	bf00      	nop
 8017e74:	200094f4 	.word	0x200094f4
 8017e78:	20009578 	.word	0x20009578

08017e7c <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8017e7c:	b590      	push	{r4, r7, lr}
 8017e7e:	b089      	sub	sp, #36	; 0x24
 8017e80:	af02      	add	r7, sp, #8
 8017e82:	603a      	str	r2, [r7, #0]
 8017e84:	461a      	mov	r2, r3
 8017e86:	4603      	mov	r3, r0
 8017e88:	71fb      	strb	r3, [r7, #7]
 8017e8a:	460b      	mov	r3, r1
 8017e8c:	71bb      	strb	r3, [r7, #6]
 8017e8e:	4613      	mov	r3, r2
 8017e90:	80bb      	strh	r3, [r7, #4]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8017e92:	79bb      	ldrb	r3, [r7, #6]
 8017e94:	4618      	mov	r0, r3
 8017e96:	f7ff f801 	bl	8016e9c <tu_edpt_number>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	757b      	strb	r3, [r7, #21]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8017e9e:	79bb      	ldrb	r3, [r7, #6]
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7fe ffed 	bl	8016e80 <tu_edpt_dir>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8017eaa:	7d7a      	ldrb	r2, [r7, #21]
 8017eac:	7d3b      	ldrb	r3, [r7, #20]
 8017eae:	0052      	lsls	r2, r2, #1
 8017eb0:	4413      	add	r3, r2
 8017eb2:	011b      	lsls	r3, r3, #4
 8017eb4:	4a22      	ldr	r2, [pc, #136]	; (8017f40 <dcd_edpt_xfer+0xc4>)
 8017eb6:	4413      	add	r3, r2
 8017eb8:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 8017eba:	693b      	ldr	r3, [r7, #16]
 8017ebc:	683a      	ldr	r2, [r7, #0]
 8017ebe:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 8017ec6:	693b      	ldr	r3, [r7, #16]
 8017ec8:	88ba      	ldrh	r2, [r7, #4]
 8017eca:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0)
 8017ecc:	7d7b      	ldrb	r3, [r7, #21]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d110      	bne.n	8017ef4 <dcd_edpt_xfer+0x78>
  {
    ep0_pending[dir] = total_bytes;
 8017ed2:	7d3b      	ldrb	r3, [r7, #20]
 8017ed4:	491b      	ldr	r1, [pc, #108]	; (8017f44 <dcd_edpt_xfer+0xc8>)
 8017ed6:	88ba      	ldrh	r2, [r7, #4]
 8017ed8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8017edc:	7d3b      	ldrb	r3, [r7, #20]
 8017ede:	4a19      	ldr	r2, [pc, #100]	; (8017f44 <dcd_edpt_xfer+0xc8>)
 8017ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017ee4:	7d3a      	ldrb	r2, [r7, #20]
 8017ee6:	7d79      	ldrb	r1, [r7, #21]
 8017ee8:	79f8      	ldrb	r0, [r7, #7]
 8017eea:	9300      	str	r3, [sp, #0]
 8017eec:	2301      	movs	r3, #1
 8017eee:	f7ff f977 	bl	80171e0 <edpt_schedule_packets>
 8017ef2:	e020      	b.n	8017f36 <dcd_edpt_xfer+0xba>
  }
  else
  {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 8017ef4:	693b      	ldr	r3, [r7, #16]
 8017ef6:	895b      	ldrh	r3, [r3, #10]
 8017ef8:	88ba      	ldrh	r2, [r7, #4]
 8017efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8017efe:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8017f00:	693b      	ldr	r3, [r7, #16]
 8017f02:	895a      	ldrh	r2, [r3, #10]
 8017f04:	88bb      	ldrh	r3, [r7, #4]
 8017f06:	fbb3 f1f2 	udiv	r1, r3, r2
 8017f0a:	fb01 f202 	mul.w	r2, r1, r2
 8017f0e:	1a9b      	subs	r3, r3, r2
 8017f10:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 8017f12:	89fb      	ldrh	r3, [r7, #14]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d102      	bne.n	8017f1e <dcd_edpt_xfer+0xa2>
 8017f18:	88bb      	ldrh	r3, [r7, #4]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d102      	bne.n	8017f24 <dcd_edpt_xfer+0xa8>
 8017f1e:	8afb      	ldrh	r3, [r7, #22]
 8017f20:	3301      	adds	r3, #1
 8017f22:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8017f24:	8afc      	ldrh	r4, [r7, #22]
 8017f26:	7d3a      	ldrb	r2, [r7, #20]
 8017f28:	7d79      	ldrb	r1, [r7, #21]
 8017f2a:	79f8      	ldrb	r0, [r7, #7]
 8017f2c:	88bb      	ldrh	r3, [r7, #4]
 8017f2e:	9300      	str	r3, [sp, #0]
 8017f30:	4623      	mov	r3, r4
 8017f32:	f7ff f955 	bl	80171e0 <edpt_schedule_packets>
  }

  return true;
 8017f36:	2301      	movs	r3, #1
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	371c      	adds	r7, #28
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd90      	pop	{r4, r7, pc}
 8017f40:	200094f4 	.word	0x200094f4
 8017f44:	20009574 	.word	0x20009574

08017f48 <dcd_edpt_disable>:

  return true;
}

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b086      	sub	sp, #24
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	4603      	mov	r3, r0
 8017f50:	71fb      	strb	r3, [r7, #7]
 8017f52:	460b      	mov	r3, r1
 8017f54:	71bb      	strb	r3, [r7, #6]
 8017f56:	4613      	mov	r3, r2
 8017f58:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8017f5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017f5e:	617b      	str	r3, [r7, #20]

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8017f60:	79bb      	ldrb	r3, [r7, #6]
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7fe ff9a 	bl	8016e9c <tu_edpt_number>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	74fb      	strb	r3, [r7, #19]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8017f6c:	79bb      	ldrb	r3, [r7, #6]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f7fe ff86 	bl	8016e80 <tu_edpt_dir>
 8017f74:	4603      	mov	r3, r0
 8017f76:	74bb      	strb	r3, [r7, #18]

  if ( dir == TUSB_DIR_IN )
 8017f78:	7cbb      	ldrb	r3, [r7, #18]
 8017f7a:	2b01      	cmp	r3, #1
 8017f7c:	d16e      	bne.n	801805c <dcd_edpt_disable+0x114>
  {
    dwc2_epin_t* epin = dwc2->epin;
 8017f7e:	697b      	ldr	r3, [r7, #20]
 8017f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017f84:	60bb      	str	r3, [r7, #8]

    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA) )
 8017f86:	7cfb      	ldrb	r3, [r7, #19]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d006      	beq.n	8017f9a <dcd_edpt_disable+0x52>
 8017f8c:	7cfb      	ldrb	r3, [r7, #19]
 8017f8e:	015b      	lsls	r3, r3, #5
 8017f90:	68ba      	ldr	r2, [r7, #8]
 8017f92:	4413      	add	r3, r2
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	db13      	blt.n	8017fc2 <dcd_edpt_disable+0x7a>
    {
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8017f9a:	7cfb      	ldrb	r3, [r7, #19]
 8017f9c:	015b      	lsls	r3, r3, #5
 8017f9e:	68ba      	ldr	r2, [r7, #8]
 8017fa0:	4413      	add	r3, r2
 8017fa2:	681a      	ldr	r2, [r3, #0]
 8017fa4:	797b      	ldrb	r3, [r7, #5]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d002      	beq.n	8017fb0 <dcd_edpt_disable+0x68>
 8017faa:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8017fae:	e001      	b.n	8017fb4 <dcd_edpt_disable+0x6c>
 8017fb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8017fb4:	7cfb      	ldrb	r3, [r7, #19]
 8017fb6:	015b      	lsls	r3, r3, #5
 8017fb8:	68b8      	ldr	r0, [r7, #8]
 8017fba:	4403      	add	r3, r0
 8017fbc:	430a      	orrs	r2, r1
 8017fbe:	601a      	str	r2, [r3, #0]
 8017fc0:	e037      	b.n	8018032 <dcd_edpt_disable+0xea>
    }
    else
    {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 8017fc2:	7cfb      	ldrb	r3, [r7, #19]
 8017fc4:	015b      	lsls	r3, r3, #5
 8017fc6:	68ba      	ldr	r2, [r7, #8]
 8017fc8:	4413      	add	r3, r2
 8017fca:	681a      	ldr	r2, [r3, #0]
 8017fcc:	7cfb      	ldrb	r3, [r7, #19]
 8017fce:	015b      	lsls	r3, r3, #5
 8017fd0:	68b9      	ldr	r1, [r7, #8]
 8017fd2:	440b      	add	r3, r1
 8017fd4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8017fd8:	601a      	str	r2, [r3, #0]
      while ( (epin[epnum].diepint & DIEPINT_INEPNE) == 0 ) {}
 8017fda:	bf00      	nop
 8017fdc:	7cfb      	ldrb	r3, [r7, #19]
 8017fde:	015b      	lsls	r3, r3, #5
 8017fe0:	68ba      	ldr	r2, [r7, #8]
 8017fe2:	4413      	add	r3, r2
 8017fe4:	689b      	ldr	r3, [r3, #8]
 8017fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d0f6      	beq.n	8017fdc <dcd_edpt_disable+0x94>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8017fee:	7cfb      	ldrb	r3, [r7, #19]
 8017ff0:	015b      	lsls	r3, r3, #5
 8017ff2:	68ba      	ldr	r2, [r7, #8]
 8017ff4:	4413      	add	r3, r2
 8017ff6:	681a      	ldr	r2, [r3, #0]
 8017ff8:	797b      	ldrb	r3, [r7, #5]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d001      	beq.n	8018002 <dcd_edpt_disable+0xba>
 8017ffe:	4946      	ldr	r1, [pc, #280]	; (8018118 <dcd_edpt_disable+0x1d0>)
 8018000:	e001      	b.n	8018006 <dcd_edpt_disable+0xbe>
 8018002:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8018006:	7cfb      	ldrb	r3, [r7, #19]
 8018008:	015b      	lsls	r3, r3, #5
 801800a:	68b8      	ldr	r0, [r7, #8]
 801800c:	4403      	add	r3, r0
 801800e:	430a      	orrs	r2, r1
 8018010:	601a      	str	r2, [r3, #0]
      while ( (epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0 ) {}
 8018012:	bf00      	nop
 8018014:	7cfb      	ldrb	r3, [r7, #19]
 8018016:	015b      	lsls	r3, r3, #5
 8018018:	68ba      	ldr	r2, [r7, #8]
 801801a:	4413      	add	r3, r2
 801801c:	689b      	ldr	r3, [r3, #8]
 801801e:	f003 0302 	and.w	r3, r3, #2
 8018022:	2b00      	cmp	r3, #0
 8018024:	d0f6      	beq.n	8018014 <dcd_edpt_disable+0xcc>

      epin[epnum].diepint = DIEPINT_EPDISD;
 8018026:	7cfb      	ldrb	r3, [r7, #19]
 8018028:	015b      	lsls	r3, r3, #5
 801802a:	68ba      	ldr	r2, [r7, #8]
 801802c:	4413      	add	r3, r2
 801802e:	2202      	movs	r2, #2
 8018030:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl |= (epnum << GRSTCTL_TXFNUM_Pos);
 8018032:	697b      	ldr	r3, [r7, #20]
 8018034:	691b      	ldr	r3, [r3, #16]
 8018036:	7cfa      	ldrb	r2, [r7, #19]
 8018038:	0192      	lsls	r2, r2, #6
 801803a:	431a      	orrs	r2, r3
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	611a      	str	r2, [r3, #16]
    dwc2->grstctl |= GRSTCTL_TXFFLSH;
 8018040:	697b      	ldr	r3, [r7, #20]
 8018042:	691b      	ldr	r3, [r3, #16]
 8018044:	f043 0220 	orr.w	r2, r3, #32
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	611a      	str	r2, [r3, #16]
    while ( (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0 ) {}
 801804c:	bf00      	nop
 801804e:	697b      	ldr	r3, [r7, #20]
 8018050:	691b      	ldr	r3, [r3, #16]
 8018052:	f003 0320 	and.w	r3, r3, #32
 8018056:	2b00      	cmp	r3, #0
 8018058:	d1f9      	bne.n	801804e <dcd_edpt_disable+0x106>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 801805a:	e059      	b.n	8018110 <dcd_edpt_disable+0x1c8>
    dwc2_epout_t* epout = dwc2->epout;
 801805c:	697b      	ldr	r3, [r7, #20]
 801805e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018062:	60fb      	str	r3, [r7, #12]
    if ( (epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA) )
 8018064:	7cfb      	ldrb	r3, [r7, #19]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d006      	beq.n	8018078 <dcd_edpt_disable+0x130>
 801806a:	7cfb      	ldrb	r3, [r7, #19]
 801806c:	015b      	lsls	r3, r3, #5
 801806e:	68fa      	ldr	r2, [r7, #12]
 8018070:	4413      	add	r3, r2
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	2b00      	cmp	r3, #0
 8018076:	db12      	blt.n	801809e <dcd_edpt_disable+0x156>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 8018078:	7cfb      	ldrb	r3, [r7, #19]
 801807a:	015b      	lsls	r3, r3, #5
 801807c:	68fa      	ldr	r2, [r7, #12]
 801807e:	4413      	add	r3, r2
 8018080:	681a      	ldr	r2, [r3, #0]
 8018082:	797b      	ldrb	r3, [r7, #5]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d002      	beq.n	801808e <dcd_edpt_disable+0x146>
 8018088:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801808c:	e000      	b.n	8018090 <dcd_edpt_disable+0x148>
 801808e:	2100      	movs	r1, #0
 8018090:	7cfb      	ldrb	r3, [r7, #19]
 8018092:	015b      	lsls	r3, r3, #5
 8018094:	68f8      	ldr	r0, [r7, #12]
 8018096:	4403      	add	r3, r0
 8018098:	430a      	orrs	r2, r1
 801809a:	601a      	str	r2, [r3, #0]
}
 801809c:	e038      	b.n	8018110 <dcd_edpt_disable+0x1c8>
      dwc2->dctl |= DCTL_SGONAK;
 801809e:	697b      	ldr	r3, [r7, #20]
 80180a0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80180a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80180a8:	697b      	ldr	r3, [r7, #20]
 80180aa:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      while ( (dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0 ) {}
 80180ae:	bf00      	nop
 80180b0:	697b      	ldr	r3, [r7, #20]
 80180b2:	695b      	ldr	r3, [r3, #20]
 80180b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d0f9      	beq.n	80180b0 <dcd_edpt_disable+0x168>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 80180bc:	7cfb      	ldrb	r3, [r7, #19]
 80180be:	015b      	lsls	r3, r3, #5
 80180c0:	68fa      	ldr	r2, [r7, #12]
 80180c2:	4413      	add	r3, r2
 80180c4:	681a      	ldr	r2, [r3, #0]
 80180c6:	797b      	ldrb	r3, [r7, #5]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d001      	beq.n	80180d0 <dcd_edpt_disable+0x188>
 80180cc:	4912      	ldr	r1, [pc, #72]	; (8018118 <dcd_edpt_disable+0x1d0>)
 80180ce:	e001      	b.n	80180d4 <dcd_edpt_disable+0x18c>
 80180d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80180d4:	7cfb      	ldrb	r3, [r7, #19]
 80180d6:	015b      	lsls	r3, r3, #5
 80180d8:	68f8      	ldr	r0, [r7, #12]
 80180da:	4403      	add	r3, r0
 80180dc:	430a      	orrs	r2, r1
 80180de:	601a      	str	r2, [r3, #0]
      while ( (epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0 ) {}
 80180e0:	bf00      	nop
 80180e2:	7cfb      	ldrb	r3, [r7, #19]
 80180e4:	015b      	lsls	r3, r3, #5
 80180e6:	68fa      	ldr	r2, [r7, #12]
 80180e8:	4413      	add	r3, r2
 80180ea:	689b      	ldr	r3, [r3, #8]
 80180ec:	f003 0302 	and.w	r3, r3, #2
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d0f6      	beq.n	80180e2 <dcd_edpt_disable+0x19a>
      epout[epnum].doepint = DOEPINT_EPDISD;
 80180f4:	7cfb      	ldrb	r3, [r7, #19]
 80180f6:	015b      	lsls	r3, r3, #5
 80180f8:	68fa      	ldr	r2, [r7, #12]
 80180fa:	4413      	add	r3, r2
 80180fc:	2202      	movs	r2, #2
 80180fe:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 8018100:	697b      	ldr	r3, [r7, #20]
 8018102:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8018106:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8018110:	bf00      	nop
 8018112:	3718      	adds	r7, #24
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}
 8018118:	40200000 	.word	0x40200000

0801811c <dcd_edpt_stall>:
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b082      	sub	sp, #8
 8018120:	af00      	add	r7, sp, #0
 8018122:	4603      	mov	r3, r0
 8018124:	460a      	mov	r2, r1
 8018126:	71fb      	strb	r3, [r7, #7]
 8018128:	4613      	mov	r3, r2
 801812a:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 801812c:	79b9      	ldrb	r1, [r7, #6]
 801812e:	79fb      	ldrb	r3, [r7, #7]
 8018130:	2201      	movs	r2, #1
 8018132:	4618      	mov	r0, r3
 8018134:	f7ff ff08 	bl	8017f48 <dcd_edpt_disable>
}
 8018138:	bf00      	nop
 801813a:	3708      	adds	r7, #8
 801813c:	46bd      	mov	sp, r7
 801813e:	bd80      	pop	{r7, pc}

08018140 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b084      	sub	sp, #16
 8018144:	af00      	add	r7, sp, #0
 8018146:	4603      	mov	r3, r0
 8018148:	460a      	mov	r2, r1
 801814a:	71fb      	strb	r3, [r7, #7]
 801814c:	4613      	mov	r3, r2
 801814e:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8018150:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018154:	60fb      	str	r3, [r7, #12]

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8018156:	79bb      	ldrb	r3, [r7, #6]
 8018158:	4618      	mov	r0, r3
 801815a:	f7fe fe9f 	bl	8016e9c <tu_edpt_number>
 801815e:	4603      	mov	r3, r0
 8018160:	72fb      	strb	r3, [r7, #11]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8018162:	79bb      	ldrb	r3, [r7, #6]
 8018164:	4618      	mov	r0, r3
 8018166:	f7fe fe8b 	bl	8016e80 <tu_edpt_dir>
 801816a:	4603      	mov	r3, r0
 801816c:	72bb      	strb	r3, [r7, #10]

  // Clear stall and reset data toggle
  if ( dir == TUSB_DIR_IN )
 801816e:	7abb      	ldrb	r3, [r7, #10]
 8018170:	2b01      	cmp	r3, #1
 8018172:	d11c      	bne.n	80181ae <dcd_edpt_clear_stall+0x6e>
  {
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 8018174:	7afb      	ldrb	r3, [r7, #11]
 8018176:	68fa      	ldr	r2, [r7, #12]
 8018178:	3348      	adds	r3, #72	; 0x48
 801817a:	015b      	lsls	r3, r3, #5
 801817c:	4413      	add	r3, r2
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	7afb      	ldrb	r3, [r7, #11]
 8018182:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8018186:	68f9      	ldr	r1, [r7, #12]
 8018188:	3348      	adds	r3, #72	; 0x48
 801818a:	015b      	lsls	r3, r3, #5
 801818c:	440b      	add	r3, r1
 801818e:	601a      	str	r2, [r3, #0]
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 8018190:	7afb      	ldrb	r3, [r7, #11]
 8018192:	68fa      	ldr	r2, [r7, #12]
 8018194:	3348      	adds	r3, #72	; 0x48
 8018196:	015b      	lsls	r3, r3, #5
 8018198:	4413      	add	r3, r2
 801819a:	681a      	ldr	r2, [r3, #0]
 801819c:	7afb      	ldrb	r3, [r7, #11]
 801819e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80181a2:	68f9      	ldr	r1, [r7, #12]
 80181a4:	3348      	adds	r3, #72	; 0x48
 80181a6:	015b      	lsls	r3, r3, #5
 80181a8:	440b      	add	r3, r1
 80181aa:	601a      	str	r2, [r3, #0]
  else
  {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
  }
}
 80181ac:	e01b      	b.n	80181e6 <dcd_edpt_clear_stall+0xa6>
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 80181ae:	7afb      	ldrb	r3, [r7, #11]
 80181b0:	68fa      	ldr	r2, [r7, #12]
 80181b2:	3358      	adds	r3, #88	; 0x58
 80181b4:	015b      	lsls	r3, r3, #5
 80181b6:	4413      	add	r3, r2
 80181b8:	681a      	ldr	r2, [r3, #0]
 80181ba:	7afb      	ldrb	r3, [r7, #11]
 80181bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80181c0:	68f9      	ldr	r1, [r7, #12]
 80181c2:	3358      	adds	r3, #88	; 0x58
 80181c4:	015b      	lsls	r3, r3, #5
 80181c6:	440b      	add	r3, r1
 80181c8:	601a      	str	r2, [r3, #0]
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 80181ca:	7afb      	ldrb	r3, [r7, #11]
 80181cc:	68fa      	ldr	r2, [r7, #12]
 80181ce:	3358      	adds	r3, #88	; 0x58
 80181d0:	015b      	lsls	r3, r3, #5
 80181d2:	4413      	add	r3, r2
 80181d4:	681a      	ldr	r2, [r3, #0]
 80181d6:	7afb      	ldrb	r3, [r7, #11]
 80181d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80181dc:	68f9      	ldr	r1, [r7, #12]
 80181de:	3358      	adds	r3, #88	; 0x58
 80181e0:	015b      	lsls	r3, r3, #5
 80181e2:	440b      	add	r3, r1
 80181e4:	601a      	str	r2, [r3, #0]
}
 80181e6:	bf00      	nop
 80181e8:	3710      	adds	r7, #16
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}

080181ee <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 80181ee:	b480      	push	{r7}
 80181f0:	b08d      	sub	sp, #52	; 0x34
 80181f2:	af00      	add	r7, sp, #0
 80181f4:	4603      	mov	r3, r0
 80181f6:	6039      	str	r1, [r7, #0]
 80181f8:	71fb      	strb	r3, [r7, #7]
 80181fa:	4613      	mov	r3, r2
 80181fc:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80181fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018202:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile const uint32_t * rx_fifo = dwc2->fifo[0];
 8018204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801820a:	627b      	str	r3, [r7, #36]	; 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 801820c:	88bb      	ldrh	r3, [r7, #4]
 801820e:	089b      	lsrs	r3, r3, #2
 8018210:	85fb      	strh	r3, [r7, #46]	; 0x2e
  while(full_words--)
 8018212:	e00b      	b.n	801822c <read_fifo_packet+0x3e>
  {
    tu_unaligned_write32(dst, *rx_fifo);
 8018214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	683a      	ldr	r2, [r7, #0]
 801821a:	61ba      	str	r2, [r7, #24]
 801821c:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 801821e:	69bb      	ldr	r3, [r7, #24]
 8018220:	697a      	ldr	r2, [r7, #20]
 8018222:	601a      	str	r2, [r3, #0]
 8018224:	bf00      	nop
    dst += 4;
 8018226:	683b      	ldr	r3, [r7, #0]
 8018228:	3304      	adds	r3, #4
 801822a:	603b      	str	r3, [r7, #0]
  while(full_words--)
 801822c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801822e:	1e5a      	subs	r2, r3, #1
 8018230:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8018232:	2b00      	cmp	r3, #0
 8018234:	d1ee      	bne.n	8018214 <read_fifo_packet+0x26>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 8018236:	88bb      	ldrh	r3, [r7, #4]
 8018238:	b2db      	uxtb	r3, r3
 801823a:	f003 0303 	and.w	r3, r3, #3
 801823e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ( bytes_rem != 0 )
 8018242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018246:	2b00      	cmp	r3, #0
 8018248:	d020      	beq.n	801828c <read_fifo_packet+0x9e>
  {
    uint32_t const tmp = *rx_fifo;
 801824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	61fb      	str	r3, [r7, #28]
 8018250:	69fb      	ldr	r3, [r7, #28]
 8018252:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8018254:	693b      	ldr	r3, [r7, #16]
 8018256:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	701a      	strb	r2, [r3, #0]
    if ( bytes_rem > 1 ) dst[1] = tu_u32_byte1(tmp);
 801825c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018260:	2b01      	cmp	r3, #1
 8018262:	d907      	bls.n	8018274 <read_fifo_packet+0x86>
 8018264:	683b      	ldr	r3, [r7, #0]
 8018266:	3301      	adds	r3, #1
 8018268:	69fa      	ldr	r2, [r7, #28]
 801826a:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 801826c:	68fa      	ldr	r2, [r7, #12]
 801826e:	0a12      	lsrs	r2, r2, #8
 8018270:	b2d2      	uxtb	r2, r2
 8018272:	701a      	strb	r2, [r3, #0]
    if ( bytes_rem > 2 ) dst[2] = tu_u32_byte2(tmp);
 8018274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018278:	2b02      	cmp	r3, #2
 801827a:	d907      	bls.n	801828c <read_fifo_packet+0x9e>
 801827c:	683b      	ldr	r3, [r7, #0]
 801827e:	3302      	adds	r3, #2
 8018280:	69fa      	ldr	r2, [r7, #28]
 8018282:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8018284:	68ba      	ldr	r2, [r7, #8]
 8018286:	0c12      	lsrs	r2, r2, #16
 8018288:	b2d2      	uxtb	r2, r2
 801828a:	701a      	strb	r2, [r3, #0]
  }
}
 801828c:	bf00      	nop
 801828e:	3734      	adds	r7, #52	; 0x34
 8018290:	46bd      	mov	sp, r7
 8018292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018296:	4770      	bx	lr

08018298 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const * src, uint16_t len)
{
 8018298:	b480      	push	{r7}
 801829a:	b089      	sub	sp, #36	; 0x24
 801829c:	af00      	add	r7, sp, #0
 801829e:	603a      	str	r2, [r7, #0]
 80182a0:	461a      	mov	r2, r3
 80182a2:	4603      	mov	r3, r0
 80182a4:	71fb      	strb	r3, [r7, #7]
 80182a6:	460b      	mov	r3, r1
 80182a8:	71bb      	strb	r3, [r7, #6]
 80182aa:	4613      	mov	r3, r2
 80182ac:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80182ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80182b2:	617b      	str	r3, [r7, #20]
  volatile uint32_t * tx_fifo = dwc2->fifo[fifo_num];
 80182b4:	79bb      	ldrb	r3, [r7, #6]
 80182b6:	3301      	adds	r3, #1
 80182b8:	031b      	lsls	r3, r3, #12
 80182ba:	697a      	ldr	r2, [r7, #20]
 80182bc:	4413      	add	r3, r2
 80182be:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 80182c0:	88bb      	ldrh	r3, [r7, #4]
 80182c2:	089b      	lsrs	r3, r3, #2
 80182c4:	83fb      	strh	r3, [r7, #30]
  while(full_words--)
 80182c6:	e008      	b.n	80182da <write_fifo_packet+0x42>
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(src);
 80182d0:	693b      	ldr	r3, [r7, #16]
 80182d2:	601a      	str	r2, [r3, #0]
    src += 4;
 80182d4:	683b      	ldr	r3, [r7, #0]
 80182d6:	3304      	adds	r3, #4
 80182d8:	603b      	str	r3, [r7, #0]
  while(full_words--)
 80182da:	8bfb      	ldrh	r3, [r7, #30]
 80182dc:	1e5a      	subs	r2, r3, #1
 80182de:	83fa      	strh	r2, [r7, #30]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d1f1      	bne.n	80182c8 <write_fifo_packet+0x30>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 80182e4:	88bb      	ldrh	r3, [r7, #4]
 80182e6:	b2db      	uxtb	r3, r3
 80182e8:	f003 0303 	and.w	r3, r3, #3
 80182ec:	73fb      	strb	r3, [r7, #15]
  if ( bytes_rem )
 80182ee:	7bfb      	ldrb	r3, [r7, #15]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d01b      	beq.n	801832c <write_fifo_packet+0x94>
  {
    uint32_t tmp_word = src[0];
 80182f4:	683b      	ldr	r3, [r7, #0]
 80182f6:	781b      	ldrb	r3, [r3, #0]
 80182f8:	61bb      	str	r3, [r7, #24]
    if ( bytes_rem > 1 ) tmp_word |= (src[1] << 8);
 80182fa:	7bfb      	ldrb	r3, [r7, #15]
 80182fc:	2b01      	cmp	r3, #1
 80182fe:	d907      	bls.n	8018310 <write_fifo_packet+0x78>
 8018300:	683b      	ldr	r3, [r7, #0]
 8018302:	3301      	adds	r3, #1
 8018304:	781b      	ldrb	r3, [r3, #0]
 8018306:	021b      	lsls	r3, r3, #8
 8018308:	461a      	mov	r2, r3
 801830a:	69bb      	ldr	r3, [r7, #24]
 801830c:	4313      	orrs	r3, r2
 801830e:	61bb      	str	r3, [r7, #24]
    if ( bytes_rem > 2 ) tmp_word |= (src[2] << 16);
 8018310:	7bfb      	ldrb	r3, [r7, #15]
 8018312:	2b02      	cmp	r3, #2
 8018314:	d907      	bls.n	8018326 <write_fifo_packet+0x8e>
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	3302      	adds	r3, #2
 801831a:	781b      	ldrb	r3, [r3, #0]
 801831c:	041b      	lsls	r3, r3, #16
 801831e:	461a      	mov	r2, r3
 8018320:	69bb      	ldr	r3, [r7, #24]
 8018322:	4313      	orrs	r3, r2
 8018324:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 8018326:	693b      	ldr	r3, [r7, #16]
 8018328:	69ba      	ldr	r2, [r7, #24]
 801832a:	601a      	str	r2, [r3, #0]
  }
}
 801832c:	bf00      	nop
 801832e:	3724      	adds	r7, #36	; 0x24
 8018330:	46bd      	mov	sp, r7
 8018332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018336:	4770      	bx	lr

08018338 <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport)
{
 8018338:	b580      	push	{r7, lr}
 801833a:	b08c      	sub	sp, #48	; 0x30
 801833c:	af00      	add	r7, sp, #0
 801833e:	4603      	mov	r3, r0
 8018340:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8018342:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018346:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile uint32_t const * rx_fifo = dwc2->fifo[0];
 8018348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801834a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801834e:	627b      	str	r3, [r7, #36]	; 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 8018350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018352:	6a1b      	ldr	r3, [r3, #32]
 8018354:	623b      	str	r3, [r7, #32]
  uint8_t  const pktsts   = (ctl_word & GRXSTSP_PKTSTS_Msk ) >> GRXSTSP_PKTSTS_Pos;
 8018356:	6a3b      	ldr	r3, [r7, #32]
 8018358:	0c5b      	lsrs	r3, r3, #17
 801835a:	b2db      	uxtb	r3, r3
 801835c:	f003 030f 	and.w	r3, r3, #15
 8018360:	77fb      	strb	r3, [r7, #31]
  uint8_t  const epnum    = (ctl_word & GRXSTSP_EPNUM_Msk  ) >> GRXSTSP_EPNUM_Pos;
 8018362:	6a3b      	ldr	r3, [r7, #32]
 8018364:	b2db      	uxtb	r3, r3
 8018366:	f003 030f 	and.w	r3, r3, #15
 801836a:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt     = (ctl_word & GRXSTSP_BCNT_Msk   ) >> GRXSTSP_BCNT_Pos;
 801836c:	6a3b      	ldr	r3, [r7, #32]
 801836e:	091b      	lsrs	r3, r3, #4
 8018370:	b29b      	uxth	r3, r3
 8018372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018376:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 8018378:	7fbb      	ldrb	r3, [r7, #30]
 801837a:	3358      	adds	r3, #88	; 0x58
 801837c:	015b      	lsls	r3, r3, #5
 801837e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018380:	4413      	add	r3, r2
 8018382:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch ( pktsts )
 8018384:	7ffb      	ldrb	r3, [r7, #31]
 8018386:	3b01      	subs	r3, #1
 8018388:	2b05      	cmp	r3, #5
 801838a:	d87f      	bhi.n	801848c <handle_rxflvl_irq+0x154>
 801838c:	a201      	add	r2, pc, #4	; (adr r2, 8018394 <handle_rxflvl_irq+0x5c>)
 801838e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018392:	bf00      	nop
 8018394:	080184a1 	.word	0x080184a1
 8018398:	080183cd 	.word	0x080183cd
 801839c:	08018447 	.word	0x08018447
 80183a0:	080183bf 	.word	0x080183bf
 80183a4:	0801848d 	.word	0x0801848d
 80183a8:	080183ad 	.word	0x080183ad
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 80183ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	4a41      	ldr	r2, [pc, #260]	; (80184b8 <handle_rxflvl_irq+0x180>)
 80183b2:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 80183b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	4a3f      	ldr	r2, [pc, #252]	; (80184b8 <handle_rxflvl_irq+0x180>)
 80183ba:	6053      	str	r3, [r2, #4]
    break;
 80183bc:	e077      	b.n	80184ae <handle_rxflvl_irq+0x176>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 80183be:	69bb      	ldr	r3, [r7, #24]
 80183c0:	691b      	ldr	r3, [r3, #16]
 80183c2:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 80183c6:	69bb      	ldr	r3, [r7, #24]
 80183c8:	611a      	str	r2, [r3, #16]
    break;
 80183ca:	e070      	b.n	80184ae <handle_rxflvl_irq+0x176>

    case GRXSTS_PKTSTS_OUTRX:
    {
      // Out packet received
      xfer_ctl_t *xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 80183cc:	7fbb      	ldrb	r3, [r7, #30]
 80183ce:	015b      	lsls	r3, r3, #5
 80183d0:	4a3a      	ldr	r2, [pc, #232]	; (80184bc <handle_rxflvl_irq+0x184>)
 80183d2:	4413      	add	r3, r2
 80183d4:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if ( xfer->ff )
 80183d6:	693b      	ldr	r3, [r7, #16]
 80183d8:	685b      	ldr	r3, [r3, #4]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d007      	beq.n	80183ee <handle_rxflvl_irq+0xb6>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 80183de:	693b      	ldr	r3, [r7, #16]
 80183e0:	685b      	ldr	r3, [r3, #4]
 80183e2:	8bba      	ldrh	r2, [r7, #28]
 80183e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80183e6:	4618      	mov	r0, r3
 80183e8:	f7fc fd49 	bl	8014e7e <tu_fifo_write_n_const_addr_full_words>
 80183ec:	e00c      	b.n	8018408 <handle_rxflvl_irq+0xd0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 80183ee:	693b      	ldr	r3, [r7, #16]
 80183f0:	6819      	ldr	r1, [r3, #0]
 80183f2:	8bba      	ldrh	r2, [r7, #28]
 80183f4:	79fb      	ldrb	r3, [r7, #7]
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7ff fef9 	bl	80181ee <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 80183fc:	693b      	ldr	r3, [r7, #16]
 80183fe:	681a      	ldr	r2, [r3, #0]
 8018400:	8bbb      	ldrh	r3, [r7, #28]
 8018402:	441a      	add	r2, r3
 8018404:	693b      	ldr	r3, [r7, #16]
 8018406:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if ( bcnt < xfer->max_size )
 8018408:	693b      	ldr	r3, [r7, #16]
 801840a:	895b      	ldrh	r3, [r3, #10]
 801840c:	8bba      	ldrh	r2, [r7, #28]
 801840e:	429a      	cmp	r2, r3
 8018410:	d248      	bcs.n	80184a4 <handle_rxflvl_irq+0x16c>
      {
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 8018412:	69bb      	ldr	r3, [r7, #24]
 8018414:	691b      	ldr	r3, [r3, #16]
 8018416:	f3c3 0112 	ubfx	r1, r3, #0, #19
 801841a:	693b      	ldr	r3, [r7, #16]
 801841c:	891a      	ldrh	r2, [r3, #8]
 801841e:	b28b      	uxth	r3, r1
 8018420:	1ad3      	subs	r3, r2, r3
 8018422:	b29a      	uxth	r2, r3
 8018424:	693b      	ldr	r3, [r7, #16]
 8018426:	811a      	strh	r2, [r3, #8]
        if ( epnum == 0 )
 8018428:	7fbb      	ldrb	r3, [r7, #30]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d13a      	bne.n	80184a4 <handle_rxflvl_irq+0x16c>
        {
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 801842e:	693b      	ldr	r3, [r7, #16]
 8018430:	891a      	ldrh	r2, [r3, #8]
 8018432:	4b23      	ldr	r3, [pc, #140]	; (80184c0 <handle_rxflvl_irq+0x188>)
 8018434:	881b      	ldrh	r3, [r3, #0]
 8018436:	1ad3      	subs	r3, r2, r3
 8018438:	b29a      	uxth	r2, r3
 801843a:	693b      	ldr	r3, [r7, #16]
 801843c:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 801843e:	4b20      	ldr	r3, [pc, #128]	; (80184c0 <handle_rxflvl_irq+0x188>)
 8018440:	2200      	movs	r2, #0
 8018442:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 8018444:	e02e      	b.n	80184a4 <handle_rxflvl_irq+0x16c>
        // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
        // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
        // XFRC complete is additionally generated when
        // - setup packet is received
        // - complete the data stage of control write is complete
        if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8018446:	7fbb      	ldrb	r3, [r7, #30]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d12d      	bne.n	80184a8 <handle_rxflvl_irq+0x170>
 801844c:	8bbb      	ldrh	r3, [r7, #28]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d12a      	bne.n	80184a8 <handle_rxflvl_irq+0x170>
 8018452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018456:	4a1b      	ldr	r2, [pc, #108]	; (80184c4 <handle_rxflvl_irq+0x18c>)
 8018458:	4293      	cmp	r3, r2
 801845a:	d925      	bls.n	80184a8 <handle_rxflvl_irq+0x170>
        {
          uint32_t doepint = epout->doepint;
 801845c:	69bb      	ldr	r3, [r7, #24]
 801845e:	689b      	ldr	r3, [r3, #8]
 8018460:	617b      	str	r3, [r7, #20]

          if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR))
 8018462:	697a      	ldr	r2, [r7, #20]
 8018464:	f248 0320 	movw	r3, #32800	; 0x8020
 8018468:	4013      	ands	r3, r2
 801846a:	2b00      	cmp	r3, #0
 801846c:	d01c      	beq.n	80184a8 <handle_rxflvl_irq+0x170>
          {
            // skip this "no-data" transfer complete event
            // Note: STPKTRX will be clear later by setup received handler
            uint32_t clear_flags = DOEPINT_XFRC;
 801846e:	2301      	movs	r3, #1
 8018470:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	f003 0320 	and.w	r3, r3, #32
 8018478:	2b00      	cmp	r3, #0
 801847a:	d003      	beq.n	8018484 <handle_rxflvl_irq+0x14c>
 801847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801847e:	f043 0320 	orr.w	r3, r3, #32
 8018482:	62fb      	str	r3, [r7, #44]	; 0x2c

            epout->doepint = clear_flags;
 8018484:	69bb      	ldr	r3, [r7, #24]
 8018486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018488:	609a      	str	r2, [r3, #8]

            // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
          }
        }
    break;
 801848a:	e00d      	b.n	80184a8 <handle_rxflvl_irq+0x170>

    default:    // Invalid
      TU_BREAKPOINT();
 801848c:	4b0e      	ldr	r3, [pc, #56]	; (80184c8 <handle_rxflvl_irq+0x190>)
 801848e:	60fb      	str	r3, [r7, #12]
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	f003 0301 	and.w	r3, r3, #1
 8018498:	2b00      	cmp	r3, #0
 801849a:	d007      	beq.n	80184ac <handle_rxflvl_irq+0x174>
 801849c:	be00      	bkpt	0x0000
    break;
 801849e:	e005      	b.n	80184ac <handle_rxflvl_irq+0x174>
    case GRXSTS_PKTSTS_GLOBALOUTNAK: break;
 80184a0:	bf00      	nop
 80184a2:	e004      	b.n	80184ae <handle_rxflvl_irq+0x176>
    break;
 80184a4:	bf00      	nop
 80184a6:	e002      	b.n	80184ae <handle_rxflvl_irq+0x176>
    break;
 80184a8:	bf00      	nop
 80184aa:	e000      	b.n	80184ae <handle_rxflvl_irq+0x176>
    break;
 80184ac:	bf00      	nop
  }
}
 80184ae:	bf00      	nop
 80184b0:	3730      	adds	r7, #48	; 0x30
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}
 80184b6:	bf00      	nop
 80184b8:	200094ec 	.word	0x200094ec
 80184bc:	200094f4 	.word	0x200094f4
 80184c0:	20009574 	.word	0x20009574
 80184c4:	4f543009 	.word	0x4f543009
 80184c8:	e000edf0 	.word	0xe000edf0

080184cc <handle_epout_irq>:

static void handle_epout_irq (uint8_t rhport)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b08a      	sub	sp, #40	; 0x28
 80184d0:	af02      	add	r7, sp, #8
 80184d2:	4603      	mov	r3, r0
 80184d4:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 80184d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80184da:	617b      	str	r3, [r7, #20]

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 80184dc:	2300      	movs	r3, #0
 80184de:	77fb      	strb	r3, [r7, #31]
 80184e0:	e05d      	b.n	801859e <handle_epout_irq+0xd2>
  {
    if ( dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n) )
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80184e8:	7ffb      	ldrb	r3, [r7, #31]
 80184ea:	3310      	adds	r3, #16
 80184ec:	fa22 f303 	lsr.w	r3, r2, r3
 80184f0:	f003 0301 	and.w	r3, r3, #1
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d04f      	beq.n	8018598 <handle_epout_irq+0xcc>
    {
      dwc2_epout_t* epout = &dwc2->epout[n];
 80184f8:	7ffb      	ldrb	r3, [r7, #31]
 80184fa:	3358      	adds	r3, #88	; 0x58
 80184fc:	015b      	lsls	r3, r3, #5
 80184fe:	697a      	ldr	r2, [r7, #20]
 8018500:	4413      	add	r3, r2
 8018502:	613b      	str	r3, [r7, #16]

      uint32_t const doepint = epout->doepint;
 8018504:	693b      	ldr	r3, [r7, #16]
 8018506:	689b      	ldr	r3, [r3, #8]
 8018508:	60fb      	str	r3, [r7, #12]

      // SETUP packet Setup Phase done.
      if ( doepint & DOEPINT_STUP )
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	f003 0308 	and.w	r3, r3, #8
 8018510:	2b00      	cmp	r3, #0
 8018512:	d018      	beq.n	8018546 <handle_epout_irq+0x7a>
      {
        uint32_t clear_flag = DOEPINT_STUP;
 8018514:	2308      	movs	r3, #8
 8018516:	61bb      	str	r3, [r7, #24]

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801851e:	2b00      	cmp	r3, #0
 8018520:	d008      	beq.n	8018534 <handle_epout_irq+0x68>
 8018522:	697b      	ldr	r3, [r7, #20]
 8018524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018526:	4a22      	ldr	r2, [pc, #136]	; (80185b0 <handle_epout_irq+0xe4>)
 8018528:	4293      	cmp	r3, r2
 801852a:	d903      	bls.n	8018534 <handle_epout_irq+0x68>
        {
          clear_flag |= DOEPINT_STPKTRX;
 801852c:	69bb      	ldr	r3, [r7, #24]
 801852e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018532:	61bb      	str	r3, [r7, #24]
        }

        epout->doepint = clear_flag;
 8018534:	693b      	ldr	r3, [r7, #16]
 8018536:	69ba      	ldr	r2, [r7, #24]
 8018538:	609a      	str	r2, [r3, #8]
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
 801853a:	79fb      	ldrb	r3, [r7, #7]
 801853c:	2201      	movs	r2, #1
 801853e:	491d      	ldr	r1, [pc, #116]	; (80185b4 <handle_epout_irq+0xe8>)
 8018540:	4618      	mov	r0, r3
 8018542:	f7fd ff33 	bl	80163ac <dcd_event_setup_received>
      }

      // OUT XFER complete
      if ( epout->doepint & DOEPINT_XFRC )
 8018546:	693b      	ldr	r3, [r7, #16]
 8018548:	689b      	ldr	r3, [r3, #8]
 801854a:	f003 0301 	and.w	r3, r3, #1
 801854e:	2b00      	cmp	r3, #0
 8018550:	d022      	beq.n	8018598 <handle_epout_irq+0xcc>
      {
        epout->doepint = DOEPINT_XFRC;
 8018552:	693b      	ldr	r3, [r7, #16]
 8018554:	2201      	movs	r2, #1
 8018556:	609a      	str	r2, [r3, #8]

        xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8018558:	7ffb      	ldrb	r3, [r7, #31]
 801855a:	015b      	lsls	r3, r3, #5
 801855c:	4a16      	ldr	r2, [pc, #88]	; (80185b8 <handle_epout_irq+0xec>)
 801855e:	4413      	add	r3, r2
 8018560:	60bb      	str	r3, [r7, #8]

        // EP0 can only handle one packet
        if ( (n == 0) && ep0_pending[TUSB_DIR_OUT] )
 8018562:	7ffb      	ldrb	r3, [r7, #31]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d10d      	bne.n	8018584 <handle_epout_irq+0xb8>
 8018568:	4b14      	ldr	r3, [pc, #80]	; (80185bc <handle_epout_irq+0xf0>)
 801856a:	881b      	ldrh	r3, [r3, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d009      	beq.n	8018584 <handle_epout_irq+0xb8>
        {
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8018570:	4b12      	ldr	r3, [pc, #72]	; (80185bc <handle_epout_irq+0xf0>)
 8018572:	881b      	ldrh	r3, [r3, #0]
 8018574:	7ff9      	ldrb	r1, [r7, #31]
 8018576:	79f8      	ldrb	r0, [r7, #7]
 8018578:	9300      	str	r3, [sp, #0]
 801857a:	2301      	movs	r3, #1
 801857c:	2200      	movs	r2, #0
 801857e:	f7fe fe2f 	bl	80171e0 <edpt_schedule_packets>
 8018582:	e009      	b.n	8018598 <handle_epout_irq+0xcc>
        }
        else
        {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	891b      	ldrh	r3, [r3, #8]
 8018588:	461a      	mov	r2, r3
 801858a:	7ff9      	ldrb	r1, [r7, #31]
 801858c:	79f8      	ldrb	r0, [r7, #7]
 801858e:	2301      	movs	r3, #1
 8018590:	9300      	str	r3, [sp, #0]
 8018592:	2300      	movs	r3, #0
 8018594:	f7fd ff2d 	bl	80163f2 <dcd_event_xfer_complete>
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 8018598:	7ffb      	ldrb	r3, [r7, #31]
 801859a:	3301      	adds	r3, #1
 801859c:	77fb      	strb	r3, [r7, #31]
 801859e:	7ffb      	ldrb	r3, [r7, #31]
 80185a0:	2b03      	cmp	r3, #3
 80185a2:	d99e      	bls.n	80184e2 <handle_epout_irq+0x16>
        }
      }
    }
  }
}
 80185a4:	bf00      	nop
 80185a6:	bf00      	nop
 80185a8:	3720      	adds	r7, #32
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	4f543009 	.word	0x4f543009
 80185b4:	200094ec 	.word	0x200094ec
 80185b8:	200094f4 	.word	0x200094f4
 80185bc:	20009574 	.word	0x20009574

080185c0 <handle_epin_irq>:

static void handle_epin_irq (uint8_t rhport)
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b08c      	sub	sp, #48	; 0x30
 80185c4:	af02      	add	r7, sp, #8
 80185c6:	4603      	mov	r3, r0
 80185c8:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 80185ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80185ce:	623b      	str	r3, [r7, #32]
  dwc2_epin_t* epin = dwc2->epin;
 80185d0:	6a3b      	ldr	r3, [r7, #32]
 80185d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80185d6:	61fb      	str	r3, [r7, #28]

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 80185d8:	2300      	movs	r3, #0
 80185da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80185de:	e0cd      	b.n	801877c <handle_epin_irq+0x1bc>
  {
    if ( dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n) )
 80185e0:	6a3b      	ldr	r3, [r7, #32]
 80185e2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80185e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185ea:	fa22 f303 	lsr.w	r3, r2, r3
 80185ee:	f003 0301 	and.w	r3, r3, #1
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	f000 80bd 	beq.w	8018772 <handle_epin_irq+0x1b2>
    {
      // IN XFER complete (entire xfer).
      xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 80185f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185fc:	015b      	lsls	r3, r3, #5
 80185fe:	3310      	adds	r3, #16
 8018600:	4a63      	ldr	r2, [pc, #396]	; (8018790 <handle_epin_irq+0x1d0>)
 8018602:	4413      	add	r3, r2
 8018604:	61bb      	str	r3, [r7, #24]

      if ( epin[n].diepint & DIEPINT_XFRC )
 8018606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801860a:	015b      	lsls	r3, r3, #5
 801860c:	69fa      	ldr	r2, [r7, #28]
 801860e:	4413      	add	r3, r2
 8018610:	689b      	ldr	r3, [r3, #8]
 8018612:	f003 0301 	and.w	r3, r3, #1
 8018616:	2b00      	cmp	r3, #0
 8018618:	d027      	beq.n	801866a <handle_epin_irq+0xaa>
      {
        epin[n].diepint = DIEPINT_XFRC;
 801861a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801861e:	015b      	lsls	r3, r3, #5
 8018620:	69fa      	ldr	r2, [r7, #28]
 8018622:	4413      	add	r3, r2
 8018624:	2201      	movs	r2, #1
 8018626:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ( (n == 0) && ep0_pending[TUSB_DIR_IN] )
 8018628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801862c:	2b00      	cmp	r3, #0
 801862e:	d10e      	bne.n	801864e <handle_epin_irq+0x8e>
 8018630:	4b58      	ldr	r3, [pc, #352]	; (8018794 <handle_epin_irq+0x1d4>)
 8018632:	885b      	ldrh	r3, [r3, #2]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d00a      	beq.n	801864e <handle_epin_irq+0x8e>
        {
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8018638:	4b56      	ldr	r3, [pc, #344]	; (8018794 <handle_epin_irq+0x1d4>)
 801863a:	885b      	ldrh	r3, [r3, #2]
 801863c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8018640:	79f8      	ldrb	r0, [r7, #7]
 8018642:	9300      	str	r3, [sp, #0]
 8018644:	2301      	movs	r3, #1
 8018646:	2201      	movs	r2, #1
 8018648:	f7fe fdca 	bl	80171e0 <edpt_schedule_packets>
 801864c:	e00d      	b.n	801866a <handle_epin_irq+0xaa>
        }
        else
        {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 801864e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018652:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018656:	b2d9      	uxtb	r1, r3
 8018658:	69bb      	ldr	r3, [r7, #24]
 801865a:	891b      	ldrh	r3, [r3, #8]
 801865c:	461a      	mov	r2, r3
 801865e:	79f8      	ldrb	r0, [r7, #7]
 8018660:	2301      	movs	r3, #1
 8018662:	9300      	str	r3, [sp, #0]
 8018664:	2300      	movs	r3, #0
 8018666:	f7fd fec4 	bl	80163f2 <dcd_event_xfer_complete>
        }
      }

      // XFER FIFO empty
      if ( (epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n)) )
 801866a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801866e:	015b      	lsls	r3, r3, #5
 8018670:	69fa      	ldr	r2, [r7, #28]
 8018672:	4413      	add	r3, r2
 8018674:	689b      	ldr	r3, [r3, #8]
 8018676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801867a:	2b00      	cmp	r3, #0
 801867c:	d079      	beq.n	8018772 <handle_epin_irq+0x1b2>
 801867e:	6a3b      	ldr	r3, [r7, #32]
 8018680:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8018684:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018688:	2101      	movs	r1, #1
 801868a:	fa01 f202 	lsl.w	r2, r1, r2
 801868e:	4013      	ands	r3, r2
 8018690:	2b00      	cmp	r3, #0
 8018692:	d06e      	beq.n	8018772 <handle_epin_irq+0x1b2>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 8018694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018698:	015b      	lsls	r3, r3, #5
 801869a:	69fa      	ldr	r2, [r7, #28]
 801869c:	4413      	add	r3, r2
 801869e:	691b      	ldr	r3, [r3, #16]
 80186a0:	0cdb      	lsrs	r3, r3, #19
 80186a2:	b29b      	uxth	r3, r3
 80186a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80186a8:	82fb      	strh	r3, [r7, #22]

        // Process every single packet (only whole packets can be written to fifo)
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 80186aa:	2300      	movs	r3, #0
 80186ac:	84bb      	strh	r3, [r7, #36]	; 0x24
 80186ae:	e043      	b.n	8018738 <handle_epin_irq+0x178>
        {
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 80186b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186b4:	015b      	lsls	r3, r3, #5
 80186b6:	69fa      	ldr	r2, [r7, #28]
 80186b8:	4413      	add	r3, r2
 80186ba:	691b      	ldr	r3, [r3, #16]
 80186bc:	82bb      	strh	r3, [r7, #20]

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 80186be:	69bb      	ldr	r3, [r7, #24]
 80186c0:	895a      	ldrh	r2, [r3, #10]
 80186c2:	8abb      	ldrh	r3, [r7, #20]
 80186c4:	817b      	strh	r3, [r7, #10]
 80186c6:	4613      	mov	r3, r2
 80186c8:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80186ca:	897a      	ldrh	r2, [r7, #10]
 80186cc:	893b      	ldrh	r3, [r7, #8]
 80186ce:	4293      	cmp	r3, r2
 80186d0:	bf28      	it	cs
 80186d2:	4613      	movcs	r3, r2
 80186d4:	b29b      	uxth	r3, r3
 80186d6:	827b      	strh	r3, [r7, #18]

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 80186d8:	8a7a      	ldrh	r2, [r7, #18]
 80186da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186de:	015b      	lsls	r3, r3, #5
 80186e0:	69f9      	ldr	r1, [r7, #28]
 80186e2:	440b      	add	r3, r1
 80186e4:	699b      	ldr	r3, [r3, #24]
 80186e6:	0099      	lsls	r1, r3, #2
 80186e8:	4b2b      	ldr	r3, [pc, #172]	; (8018798 <handle_epin_irq+0x1d8>)
 80186ea:	400b      	ands	r3, r1
 80186ec:	429a      	cmp	r2, r3
 80186ee:	d828      	bhi.n	8018742 <handle_epin_irq+0x182>

          // Push packet to Tx-FIFO
          if ( xfer->ff )
 80186f0:	69bb      	ldr	r3, [r7, #24]
 80186f2:	685b      	ldr	r3, [r3, #4]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d00e      	beq.n	8018716 <handle_epin_irq+0x156>
          {
            volatile uint32_t *tx_fifo = dwc2->fifo[n];
 80186f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186fc:	3301      	adds	r3, #1
 80186fe:	031b      	lsls	r3, r3, #12
 8018700:	6a3a      	ldr	r2, [r7, #32]
 8018702:	4413      	add	r3, r2
 8018704:	60fb      	str	r3, [r7, #12]
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 8018706:	69bb      	ldr	r3, [r7, #24]
 8018708:	685b      	ldr	r3, [r3, #4]
 801870a:	8a7a      	ldrh	r2, [r7, #18]
 801870c:	68f9      	ldr	r1, [r7, #12]
 801870e:	4618      	mov	r0, r3
 8018710:	f7fc fb91 	bl	8014e36 <tu_fifo_read_n_const_addr_full_words>
 8018714:	e00d      	b.n	8018732 <handle_epin_irq+0x172>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8018716:	69bb      	ldr	r3, [r7, #24]
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	8a7b      	ldrh	r3, [r7, #18]
 801871c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8018720:	79f8      	ldrb	r0, [r7, #7]
 8018722:	f7ff fdb9 	bl	8018298 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8018726:	69bb      	ldr	r3, [r7, #24]
 8018728:	681a      	ldr	r2, [r3, #0]
 801872a:	8a7b      	ldrh	r3, [r7, #18]
 801872c:	441a      	add	r2, r3
 801872e:	69bb      	ldr	r3, [r7, #24]
 8018730:	601a      	str	r2, [r3, #0]
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 8018732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018734:	3301      	adds	r3, #1
 8018736:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018738:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801873a:	8afb      	ldrh	r3, [r7, #22]
 801873c:	429a      	cmp	r2, r3
 801873e:	d3b7      	bcc.n	80186b0 <handle_epin_irq+0xf0>
 8018740:	e000      	b.n	8018744 <handle_epin_irq+0x184>
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 8018742:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if ( ((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0 )
 8018744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018748:	015b      	lsls	r3, r3, #5
 801874a:	69fa      	ldr	r2, [r7, #28]
 801874c:	4413      	add	r3, r2
 801874e:	691b      	ldr	r3, [r3, #16]
 8018750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018754:	2b00      	cmp	r3, #0
 8018756:	d10c      	bne.n	8018772 <handle_epin_irq+0x1b2>
        {
          dwc2->diepempmsk &= ~(1 << n);
 8018758:	6a3b      	ldr	r3, [r7, #32]
 801875a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 801875e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018762:	2101      	movs	r1, #1
 8018764:	fa01 f202 	lsl.w	r2, r1, r2
 8018768:	43d2      	mvns	r2, r2
 801876a:	401a      	ands	r2, r3
 801876c:	6a3b      	ldr	r3, [r7, #32]
 801876e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 8018772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018776:	3301      	adds	r3, #1
 8018778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801877c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018780:	2b03      	cmp	r3, #3
 8018782:	f67f af2d 	bls.w	80185e0 <handle_epin_irq+0x20>
        }
      }
    }
  }
}
 8018786:	bf00      	nop
 8018788:	bf00      	nop
 801878a:	3728      	adds	r7, #40	; 0x28
 801878c:	46bd      	mov	sp, r7
 801878e:	bd80      	pop	{r7, pc}
 8018790:	200094f4 	.word	0x200094f4
 8018794:	20009574 	.word	0x20009574
 8018798:	0003fffc 	.word	0x0003fffc

0801879c <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b086      	sub	sp, #24
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	4603      	mov	r3, r0
 80187a4:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 80187a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80187aa:	613b      	str	r3, [r7, #16]

  uint32_t const int_status = dwc2->gintsts & dwc2->gintmsk;
 80187ac:	693b      	ldr	r3, [r7, #16]
 80187ae:	695a      	ldr	r2, [r3, #20]
 80187b0:	693b      	ldr	r3, [r7, #16]
 80187b2:	699b      	ldr	r3, [r3, #24]
 80187b4:	4013      	ands	r3, r2
 80187b6:	60fb      	str	r3, [r7, #12]

  if(int_status & GINTSTS_USBRST)
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d007      	beq.n	80187d2 <dcd_int_handler+0x36>
  {
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 80187c2:	693b      	ldr	r3, [r7, #16]
 80187c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80187c8:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 80187ca:	79fb      	ldrb	r3, [r7, #7]
 80187cc:	4618      	mov	r0, r3
 80187ce:	f7fe fc93 	bl	80170f8 <bus_reset>
  }

  if(int_status & GINTSTS_ENUMDNE)
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d01d      	beq.n	8018818 <dcd_int_handler+0x7c>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    dwc2->gintsts = GINTSTS_ENUMDNE;
 80187dc:	693b      	ldr	r3, [r7, #16]
 80187de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80187e2:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos)
 80187e4:	693b      	ldr	r3, [r7, #16]
 80187e6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80187ea:	085b      	lsrs	r3, r3, #1
 80187ec:	f003 0303 	and.w	r3, r3, #3
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d002      	beq.n	80187fa <dcd_int_handler+0x5e>
 80187f4:	2b02      	cmp	r3, #2
 80187f6:	d003      	beq.n	8018800 <dcd_int_handler+0x64>
 80187f8:	e005      	b.n	8018806 <dcd_int_handler+0x6a>
    {
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 80187fa:	2302      	movs	r3, #2
 80187fc:	75fb      	strb	r3, [r7, #23]
      break;
 80187fe:	e005      	b.n	801880c <dcd_int_handler+0x70>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 8018800:	2301      	movs	r3, #1
 8018802:	75fb      	strb	r3, [r7, #23]
      break;
 8018804:	e002      	b.n	801880c <dcd_int_handler+0x70>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 8018806:	2300      	movs	r3, #0
 8018808:	75fb      	strb	r3, [r7, #23]
      break;
 801880a:	bf00      	nop
    }

    dcd_event_bus_reset(rhport, speed, true);
 801880c:	7df9      	ldrb	r1, [r7, #23]
 801880e:	79fb      	ldrb	r3, [r7, #7]
 8018810:	2201      	movs	r2, #1
 8018812:	4618      	mov	r0, r3
 8018814:	f7fd fdaa 	bl	801636c <dcd_event_bus_reset>
  }

  if(int_status & GINTSTS_USBSUSP)
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801881e:	2b00      	cmp	r3, #0
 8018820:	d009      	beq.n	8018836 <dcd_int_handler+0x9a>
  {
    dwc2->gintsts = GINTSTS_USBSUSP;
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018828:	615a      	str	r2, [r3, #20]
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
 801882a:	79fb      	ldrb	r3, [r7, #7]
 801882c:	2201      	movs	r2, #1
 801882e:	2104      	movs	r1, #4
 8018830:	4618      	mov	r0, r3
 8018832:	f7fd fd7d 	bl	8016330 <dcd_event_bus_signal>
  }

  if(int_status & GINTSTS_WKUINT)
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	2b00      	cmp	r3, #0
 801883a:	da09      	bge.n	8018850 <dcd_int_handler+0xb4>
  {
    dwc2->gintsts = GINTSTS_WKUINT;
 801883c:	693b      	ldr	r3, [r7, #16]
 801883e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018842:	615a      	str	r2, [r3, #20]
    dcd_event_bus_signal(rhport, DCD_EVENT_RESUME, true);
 8018844:	79fb      	ldrb	r3, [r7, #7]
 8018846:	2201      	movs	r2, #1
 8018848:	2105      	movs	r1, #5
 801884a:	4618      	mov	r0, r3
 801884c:	f7fd fd70 	bl	8016330 <dcd_event_bus_signal>
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if(int_status & GINTSTS_OTGINT)
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	f003 0304 	and.w	r3, r3, #4
 8018856:	2b00      	cmp	r3, #0
 8018858:	d010      	beq.n	801887c <dcd_int_handler+0xe0>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 801885a:	693b      	ldr	r3, [r7, #16]
 801885c:	685b      	ldr	r3, [r3, #4]
 801885e:	60bb      	str	r3, [r7, #8]

    if (otg_int & GOTGINT_SEDET)
 8018860:	68bb      	ldr	r3, [r7, #8]
 8018862:	f003 0304 	and.w	r3, r3, #4
 8018866:	2b00      	cmp	r3, #0
 8018868:	d005      	beq.n	8018876 <dcd_int_handler+0xda>
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
 801886a:	79fb      	ldrb	r3, [r7, #7]
 801886c:	2201      	movs	r2, #1
 801886e:	2102      	movs	r1, #2
 8018870:	4618      	mov	r0, r3
 8018872:	f7fd fd5d 	bl	8016330 <dcd_event_bus_signal>
    }

    dwc2->gotgint = otg_int;
 8018876:	693b      	ldr	r3, [r7, #16]
 8018878:	68ba      	ldr	r2, [r7, #8]
 801887a:	605a      	str	r2, [r3, #4]
  }

  if(int_status & GINTSTS_SOF)
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	f003 0308 	and.w	r3, r3, #8
 8018882:	2b00      	cmp	r3, #0
 8018884:	d00e      	beq.n	80188a4 <dcd_int_handler+0x108>
  {
    dwc2->gotgint = GINTSTS_SOF;
 8018886:	693b      	ldr	r3, [r7, #16]
 8018888:	2208      	movs	r2, #8
 801888a:	605a      	str	r2, [r3, #4]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 801888c:	693b      	ldr	r3, [r7, #16]
 801888e:	699b      	ldr	r3, [r3, #24]
 8018890:	f023 0208 	bic.w	r2, r3, #8
 8018894:	693b      	ldr	r3, [r7, #16]
 8018896:	619a      	str	r2, [r3, #24]

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
 8018898:	79fb      	ldrb	r3, [r7, #7]
 801889a:	2201      	movs	r2, #1
 801889c:	2103      	movs	r1, #3
 801889e:	4618      	mov	r0, r3
 80188a0:	f7fd fd46 	bl	8016330 <dcd_event_bus_signal>
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & GINTSTS_RXFLVL)
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	f003 0310 	and.w	r3, r3, #16
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d020      	beq.n	80188f0 <dcd_int_handler+0x154>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 80188ae:	693b      	ldr	r3, [r7, #16]
 80188b0:	699b      	ldr	r3, [r3, #24]
 80188b2:	f023 0210 	bic.w	r2, r3, #16
 80188b6:	693b      	ldr	r3, [r7, #16]
 80188b8:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_irq(rhport);
 80188ba:	79fb      	ldrb	r3, [r7, #7]
 80188bc:	4618      	mov	r0, r3
 80188be:	f7ff fd3b 	bl	8018338 <handle_rxflvl_irq>
    } while(dwc2->gotgint & GINTSTS_RXFLVL);
 80188c2:	693b      	ldr	r3, [r7, #16]
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	f003 0310 	and.w	r3, r3, #16
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d1f5      	bne.n	80188ba <dcd_int_handler+0x11e>

    // Manage RX FIFO size
    if (_out_ep_closed)
 80188ce:	4b13      	ldr	r3, [pc, #76]	; (801891c <dcd_int_handler+0x180>)
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d006      	beq.n	80188e4 <dcd_int_handler+0x148>
    {
      update_grxfsiz(rhport);
 80188d6:	79fb      	ldrb	r3, [r7, #7]
 80188d8:	4618      	mov	r0, r3
 80188da:	f7fe fbdb 	bl	8017094 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 80188de:	4b0f      	ldr	r3, [pc, #60]	; (801891c <dcd_int_handler+0x180>)
 80188e0:	2200      	movs	r2, #0
 80188e2:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 80188e4:	693b      	ldr	r3, [r7, #16]
 80188e6:	699b      	ldr	r3, [r3, #24]
 80188e8:	f043 0210 	orr.w	r2, r3, #16
 80188ec:	693b      	ldr	r3, [r7, #16]
 80188ee:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & GINTSTS_OEPINT)
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d003      	beq.n	8018902 <dcd_int_handler+0x166>
  {
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 80188fa:	79fb      	ldrb	r3, [r7, #7]
 80188fc:	4618      	mov	r0, r3
 80188fe:	f7ff fde5 	bl	80184cc <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if(int_status & GINTSTS_IEPINT)
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018908:	2b00      	cmp	r3, #0
 801890a:	d003      	beq.n	8018914 <dcd_int_handler+0x178>
  {
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 801890c:	79fb      	ldrb	r3, [r7, #7]
 801890e:	4618      	mov	r0, r3
 8018910:	f7ff fe56 	bl	80185c0 <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 8018914:	bf00      	nop
 8018916:	3718      	adds	r7, #24
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}
 801891c:	2000957a 	.word	0x2000957a

08018920 <tu_edpt_dir>:
// Endpoint helper
//--------------------------------------------------------------------+

// Get direction from Endpoint address
static inline tusb_dir_t tu_edpt_dir(uint8_t addr)
{
 8018920:	b480      	push	{r7}
 8018922:	b083      	sub	sp, #12
 8018924:	af00      	add	r7, sp, #0
 8018926:	4603      	mov	r3, r0
 8018928:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801892a:	79fb      	ldrb	r3, [r7, #7]
 801892c:	09db      	lsrs	r3, r3, #7
 801892e:	b2db      	uxtb	r3, r3
}
 8018930:	4618      	mov	r0, r3
 8018932:	370c      	adds	r7, #12
 8018934:	46bd      	mov	sp, r7
 8018936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893a:	4770      	bx	lr

0801893c <tu_edpt_number>:

// Get Endpoint number from address
static inline uint8_t tu_edpt_number(uint8_t addr)
{
 801893c:	b480      	push	{r7}
 801893e:	b083      	sub	sp, #12
 8018940:	af00      	add	r7, sp, #0
 8018942:	4603      	mov	r3, r0
 8018944:	71fb      	strb	r3, [r7, #7]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018946:	79fb      	ldrb	r3, [r7, #7]
 8018948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801894c:	b2db      	uxtb	r3, r3
}
 801894e:	4618      	mov	r0, r3
 8018950:	370c      	adds	r7, #12
 8018952:	46bd      	mov	sp, r7
 8018954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018958:	4770      	bx	lr

0801895a <tu_edpt_packet_size>:
{
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
 801895a:	b480      	push	{r7}
 801895c:	b083      	sub	sp, #12
 801895e:	af00      	add	r7, sp, #0
 8018960:	6078      	str	r0, [r7, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	889b      	ldrh	r3, [r3, #4]
 8018966:	b29b      	uxth	r3, r3
 8018968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801896c:	b29b      	uxth	r3, r3
}
 801896e:	4618      	mov	r0, r3
 8018970:	370c      	adds	r7, #12
 8018972:	46bd      	mov	sp, r7
 8018974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018978:	4770      	bx	lr

0801897a <tu_desc_next>:

//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
 801897a:	b480      	push	{r7}
 801897c:	b085      	sub	sp, #20
 801897e:	af00      	add	r7, sp, #0
 8018980:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	781b      	ldrb	r3, [r3, #0]
 801898a:	461a      	mov	r2, r3
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	4413      	add	r3, r2
}
 8018990:	4618      	mov	r0, r3
 8018992:	3714      	adds	r7, #20
 8018994:	46bd      	mov	sp, r7
 8018996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899a:	4770      	bx	lr

0801899c <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
 801899c:	b480      	push	{r7}
 801899e:	b083      	sub	sp, #12
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	3301      	adds	r3, #1
 80189a8:	781b      	ldrb	r3, [r3, #0]
}
 80189aa:	4618      	mov	r0, r3
 80189ac:	370c      	adds	r7, #12
 80189ae:	46bd      	mov	sp, r7
 80189b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b4:	4770      	bx	lr
	...

080189b8 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b082      	sub	sp, #8
 80189bc:	af00      	add	r7, sp, #0
#if TUSB_OPT_DEVICE_ENABLED
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) ); // init device stack
 80189be:	2000      	movs	r0, #0
 80189c0:	f7fc fc74 	bl	80152ac <tud_init>
 80189c4:	4603      	mov	r3, r0
 80189c6:	f083 0301 	eor.w	r3, r3, #1
 80189ca:	b2db      	uxtb	r3, r3
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d00f      	beq.n	80189f0 <tusb_init+0x38>
 80189d0:	2229      	movs	r2, #41	; 0x29
 80189d2:	490a      	ldr	r1, [pc, #40]	; (80189fc <tusb_init+0x44>)
 80189d4:	480a      	ldr	r0, [pc, #40]	; (8018a00 <tusb_init+0x48>)
 80189d6:	f000 fbe3 	bl	80191a0 <iprintf>
 80189da:	4b0a      	ldr	r3, [pc, #40]	; (8018a04 <tusb_init+0x4c>)
 80189dc:	607b      	str	r3, [r7, #4]
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	f003 0301 	and.w	r3, r3, #1
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d000      	beq.n	80189ec <tusb_init+0x34>
 80189ea:	be00      	bkpt	0x0000
 80189ec:	2300      	movs	r3, #0
 80189ee:	e000      	b.n	80189f2 <tusb_init+0x3a>

#if TUSB_OPT_HOST_ENABLED
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) ); // init host stack
#endif

  return true;
 80189f0:	2301      	movs	r3, #1
}
 80189f2:	4618      	mov	r0, r3
 80189f4:	3708      	adds	r7, #8
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd80      	pop	{r7, pc}
 80189fa:	bf00      	nop
 80189fc:	0801caa0 	.word	0x0801caa0
 8018a00:	0801c0e8 	.word	0x0801c0e8
 8018a04:	e000edf0 	.word	0xe000edf0

08018a08 <tusb_inited>:

bool tusb_inited(void)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b082      	sub	sp, #8
 8018a0c:	af00      	add	r7, sp, #0
  bool ret = false;
 8018a0e:	2300      	movs	r3, #0
 8018a10:	71fb      	strb	r3, [r7, #7]

#if TUSB_OPT_DEVICE_ENABLED
  ret = ret || tud_inited();
 8018a12:	79fb      	ldrb	r3, [r7, #7]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d104      	bne.n	8018a22 <tusb_inited+0x1a>
 8018a18:	f7fc fc3c 	bl	8015294 <tud_inited>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d001      	beq.n	8018a26 <tusb_inited+0x1e>
 8018a22:	2301      	movs	r3, #1
 8018a24:	e000      	b.n	8018a28 <tusb_inited+0x20>
 8018a26:	2300      	movs	r3, #0
 8018a28:	71fb      	strb	r3, [r7, #7]
 8018a2a:	79fb      	ldrb	r3, [r7, #7]
 8018a2c:	f003 0301 	and.w	r3, r3, #1
 8018a30:	71fb      	strb	r3, [r7, #7]

#if TUSB_OPT_HOST_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
 8018a32:	79fb      	ldrb	r3, [r7, #7]
}
 8018a34:	4618      	mov	r0, r3
 8018a36:	3708      	adds	r7, #8
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}

08018a3c <tu_edpt_validate>:
//--------------------------------------------------------------------+
// Internal Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b088      	sub	sp, #32
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	6078      	str	r0, [r7, #4]
 8018a44:	460b      	mov	r3, r1
 8018a46:	70fb      	strb	r3, [r7, #3]
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8018a48:	6878      	ldr	r0, [r7, #4]
 8018a4a:	f7ff ff86 	bl	801895a <tu_edpt_packet_size>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	83fb      	strh	r3, [r7, #30]
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	789b      	ldrb	r3, [r3, #2]
 8018a56:	4619      	mov	r1, r3
 8018a58:	8bfb      	ldrh	r3, [r7, #30]
 8018a5a:	461a      	mov	r2, r3
 8018a5c:	483f      	ldr	r0, [pc, #252]	; (8018b5c <tu_edpt_validate+0x120>)
 8018a5e:	f000 fb9f 	bl	80191a0 <iprintf>

  switch (desc_ep->bmAttributes.xfer)
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	78db      	ldrb	r3, [r3, #3]
 8018a66:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018a6a:	b2db      	uxtb	r3, r3
 8018a6c:	2b03      	cmp	r3, #3
 8018a6e:	d04d      	beq.n	8018b0c <tu_edpt_validate+0xd0>
 8018a70:	2b03      	cmp	r3, #3
 8018a72:	dc67      	bgt.n	8018b44 <tu_edpt_validate+0x108>
 8018a74:	2b01      	cmp	r3, #1
 8018a76:	d002      	beq.n	8018a7e <tu_edpt_validate+0x42>
 8018a78:	2b02      	cmp	r3, #2
 8018a7a:	d01d      	beq.n	8018ab8 <tu_edpt_validate+0x7c>
 8018a7c:	e062      	b.n	8018b44 <tu_edpt_validate+0x108>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8018a7e:	78fb      	ldrb	r3, [r7, #3]
 8018a80:	2b02      	cmp	r3, #2
 8018a82:	d102      	bne.n	8018a8a <tu_edpt_validate+0x4e>
 8018a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018a88:	e001      	b.n	8018a8e <tu_edpt_validate+0x52>
 8018a8a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8018a8e:	81fb      	strh	r3, [r7, #14]
      TU_ASSERT(max_packet_size <= spec_size);
 8018a90:	8bfa      	ldrh	r2, [r7, #30]
 8018a92:	89fb      	ldrh	r3, [r7, #14]
 8018a94:	429a      	cmp	r2, r3
 8018a96:	d957      	bls.n	8018b48 <tu_edpt_validate+0x10c>
 8018a98:	2250      	movs	r2, #80	; 0x50
 8018a9a:	4931      	ldr	r1, [pc, #196]	; (8018b60 <tu_edpt_validate+0x124>)
 8018a9c:	4831      	ldr	r0, [pc, #196]	; (8018b64 <tu_edpt_validate+0x128>)
 8018a9e:	f000 fb7f 	bl	80191a0 <iprintf>
 8018aa2:	4b31      	ldr	r3, [pc, #196]	; (8018b68 <tu_edpt_validate+0x12c>)
 8018aa4:	60bb      	str	r3, [r7, #8]
 8018aa6:	68bb      	ldr	r3, [r7, #8]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	f003 0301 	and.w	r3, r3, #1
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d000      	beq.n	8018ab4 <tu_edpt_validate+0x78>
 8018ab2:	be00      	bkpt	0x0000
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	e04d      	b.n	8018b54 <tu_edpt_validate+0x118>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8018ab8:	78fb      	ldrb	r3, [r7, #3]
 8018aba:	2b02      	cmp	r3, #2
 8018abc:	d113      	bne.n	8018ae6 <tu_edpt_validate+0xaa>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8018abe:	8bfb      	ldrh	r3, [r7, #30]
 8018ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ac4:	d042      	beq.n	8018b4c <tu_edpt_validate+0x110>
 8018ac6:	2258      	movs	r2, #88	; 0x58
 8018ac8:	4925      	ldr	r1, [pc, #148]	; (8018b60 <tu_edpt_validate+0x124>)
 8018aca:	4826      	ldr	r0, [pc, #152]	; (8018b64 <tu_edpt_validate+0x128>)
 8018acc:	f000 fb68 	bl	80191a0 <iprintf>
 8018ad0:	4b25      	ldr	r3, [pc, #148]	; (8018b68 <tu_edpt_validate+0x12c>)
 8018ad2:	613b      	str	r3, [r7, #16]
 8018ad4:	693b      	ldr	r3, [r7, #16]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	f003 0301 	and.w	r3, r3, #1
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d000      	beq.n	8018ae2 <tu_edpt_validate+0xa6>
 8018ae0:	be00      	bkpt	0x0000
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	e036      	b.n	8018b54 <tu_edpt_validate+0x118>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8018ae6:	8bfb      	ldrh	r3, [r7, #30]
 8018ae8:	2b40      	cmp	r3, #64	; 0x40
 8018aea:	d92f      	bls.n	8018b4c <tu_edpt_validate+0x110>
 8018aec:	225c      	movs	r2, #92	; 0x5c
 8018aee:	491c      	ldr	r1, [pc, #112]	; (8018b60 <tu_edpt_validate+0x124>)
 8018af0:	481c      	ldr	r0, [pc, #112]	; (8018b64 <tu_edpt_validate+0x128>)
 8018af2:	f000 fb55 	bl	80191a0 <iprintf>
 8018af6:	4b1c      	ldr	r3, [pc, #112]	; (8018b68 <tu_edpt_validate+0x12c>)
 8018af8:	617b      	str	r3, [r7, #20]
 8018afa:	697b      	ldr	r3, [r7, #20]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	f003 0301 	and.w	r3, r3, #1
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d000      	beq.n	8018b08 <tu_edpt_validate+0xcc>
 8018b06:	be00      	bkpt	0x0000
 8018b08:	2300      	movs	r3, #0
 8018b0a:	e023      	b.n	8018b54 <tu_edpt_validate+0x118>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8018b0c:	78fb      	ldrb	r3, [r7, #3]
 8018b0e:	2b02      	cmp	r3, #2
 8018b10:	d102      	bne.n	8018b18 <tu_edpt_validate+0xdc>
 8018b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b16:	e000      	b.n	8018b1a <tu_edpt_validate+0xde>
 8018b18:	2340      	movs	r3, #64	; 0x40
 8018b1a:	83bb      	strh	r3, [r7, #28]
      TU_ASSERT(max_packet_size <= spec_size);
 8018b1c:	8bfa      	ldrh	r2, [r7, #30]
 8018b1e:	8bbb      	ldrh	r3, [r7, #28]
 8018b20:	429a      	cmp	r2, r3
 8018b22:	d915      	bls.n	8018b50 <tu_edpt_validate+0x114>
 8018b24:	2263      	movs	r2, #99	; 0x63
 8018b26:	490e      	ldr	r1, [pc, #56]	; (8018b60 <tu_edpt_validate+0x124>)
 8018b28:	480e      	ldr	r0, [pc, #56]	; (8018b64 <tu_edpt_validate+0x128>)
 8018b2a:	f000 fb39 	bl	80191a0 <iprintf>
 8018b2e:	4b0e      	ldr	r3, [pc, #56]	; (8018b68 <tu_edpt_validate+0x12c>)
 8018b30:	61bb      	str	r3, [r7, #24]
 8018b32:	69bb      	ldr	r3, [r7, #24]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	f003 0301 	and.w	r3, r3, #1
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d000      	beq.n	8018b40 <tu_edpt_validate+0x104>
 8018b3e:	be00      	bkpt	0x0000
 8018b40:	2300      	movs	r3, #0
 8018b42:	e007      	b.n	8018b54 <tu_edpt_validate+0x118>
    }
    break;

    default: return false;
 8018b44:	2300      	movs	r3, #0
 8018b46:	e005      	b.n	8018b54 <tu_edpt_validate+0x118>
    break;
 8018b48:	bf00      	nop
 8018b4a:	e002      	b.n	8018b52 <tu_edpt_validate+0x116>
    break;
 8018b4c:	bf00      	nop
 8018b4e:	e000      	b.n	8018b52 <tu_edpt_validate+0x116>
    break;
 8018b50:	bf00      	nop
  }

  return true;
 8018b52:	2301      	movs	r3, #1
}
 8018b54:	4618      	mov	r0, r3
 8018b56:	3720      	adds	r7, #32
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd80      	pop	{r7, pc}
 8018b5c:	0801c100 	.word	0x0801c100
 8018b60:	0801caac 	.word	0x0801caac
 8018b64:	0801c0e8 	.word	0x0801c0e8
 8018b68:	e000edf0 	.word	0xe000edf0

08018b6c <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8018b6c:	b590      	push	{r4, r7, lr}
 8018b6e:	b089      	sub	sp, #36	; 0x24
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	60f8      	str	r0, [r7, #12]
 8018b74:	60b9      	str	r1, [r7, #8]
 8018b76:	4611      	mov	r1, r2
 8018b78:	461a      	mov	r2, r3
 8018b7a:	460b      	mov	r3, r1
 8018b7c:	80fb      	strh	r3, [r7, #6]
 8018b7e:	4613      	mov	r3, r2
 8018b80:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc_end = p_desc + desc_len;
 8018b86:	88fb      	ldrh	r3, [r7, #6]
 8018b88:	69fa      	ldr	r2, [r7, #28]
 8018b8a:	4413      	add	r3, r2
 8018b8c:	61bb      	str	r3, [r7, #24]

  while( p_desc < desc_end )
 8018b8e:	e022      	b.n	8018bd6 <tu_edpt_bind_driver+0x6a>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8018b90:	69f8      	ldr	r0, [r7, #28]
 8018b92:	f7ff ff03 	bl	801899c <tu_desc_type>
 8018b96:	4603      	mov	r3, r0
 8018b98:	2b05      	cmp	r3, #5
 8018b9a:	d118      	bne.n	8018bce <tu_edpt_bind_driver+0x62>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8018b9c:	69fb      	ldr	r3, [r7, #28]
 8018b9e:	789b      	ldrb	r3, [r3, #2]
 8018ba0:	75fb      	strb	r3, [r7, #23]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
 8018ba2:	7dfb      	ldrb	r3, [r7, #23]
 8018ba4:	797a      	ldrb	r2, [r7, #5]
 8018ba6:	4619      	mov	r1, r3
 8018ba8:	480f      	ldr	r0, [pc, #60]	; (8018be8 <tu_edpt_bind_driver+0x7c>)
 8018baa:	f000 faf9 	bl	80191a0 <iprintf>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8018bae:	7dfb      	ldrb	r3, [r7, #23]
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7ff fec3 	bl	801893c <tu_edpt_number>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	005b      	lsls	r3, r3, #1
 8018bba:	68fa      	ldr	r2, [r7, #12]
 8018bbc:	18d4      	adds	r4, r2, r3
 8018bbe:	7dfb      	ldrb	r3, [r7, #23]
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f7ff fead 	bl	8018920 <tu_edpt_dir>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	461a      	mov	r2, r3
 8018bca:	797b      	ldrb	r3, [r7, #5]
 8018bcc:	54a3      	strb	r3, [r4, r2]
    }

    p_desc = tu_desc_next(p_desc);
 8018bce:	69f8      	ldr	r0, [r7, #28]
 8018bd0:	f7ff fed3 	bl	801897a <tu_desc_next>
 8018bd4:	61f8      	str	r0, [r7, #28]
  while( p_desc < desc_end )
 8018bd6:	69fa      	ldr	r2, [r7, #28]
 8018bd8:	69bb      	ldr	r3, [r7, #24]
 8018bda:	429a      	cmp	r2, r3
 8018bdc:	d3d8      	bcc.n	8018b90 <tu_edpt_bind_driver+0x24>
  }
}
 8018bde:	bf00      	nop
 8018be0:	bf00      	nop
 8018be2:	3724      	adds	r7, #36	; 0x24
 8018be4:	46bd      	mov	sp, r7
 8018be6:	bd90      	pop	{r4, r7, pc}
 8018be8:	0801c120 	.word	0x0801c120

08018bec <dump_str_line>:
#include <ctype.h>

char const* const tusb_strerr[TUSB_ERROR_COUNT] = { ERROR_TABLE(ERROR_STRING) };

static void dump_str_line(uint8_t const* buf, uint16_t count)
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b084      	sub	sp, #16
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
 8018bf4:	460b      	mov	r3, r1
 8018bf6:	807b      	strh	r3, [r7, #2]
  tu_printf("  |");
 8018bf8:	4813      	ldr	r0, [pc, #76]	; (8018c48 <dump_str_line+0x5c>)
 8018bfa:	f000 fad1 	bl	80191a0 <iprintf>

  // each line is 16 bytes
  for(uint16_t i=0; i<count; i++)
 8018bfe:	2300      	movs	r3, #0
 8018c00:	81fb      	strh	r3, [r7, #14]
 8018c02:	e016      	b.n	8018c32 <dump_str_line+0x46>
  {
    const char ch = buf[i];
 8018c04:	89fb      	ldrh	r3, [r7, #14]
 8018c06:	687a      	ldr	r2, [r7, #4]
 8018c08:	4413      	add	r3, r2
 8018c0a:	781b      	ldrb	r3, [r3, #0]
 8018c0c:	737b      	strb	r3, [r7, #13]
    tu_printf("%c", isprint(ch) ? ch : '.');
 8018c0e:	7b7b      	ldrb	r3, [r7, #13]
 8018c10:	3301      	adds	r3, #1
 8018c12:	4a0e      	ldr	r2, [pc, #56]	; (8018c4c <dump_str_line+0x60>)
 8018c14:	4413      	add	r3, r2
 8018c16:	781b      	ldrb	r3, [r3, #0]
 8018c18:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d001      	beq.n	8018c24 <dump_str_line+0x38>
 8018c20:	7b7b      	ldrb	r3, [r7, #13]
 8018c22:	e000      	b.n	8018c26 <dump_str_line+0x3a>
 8018c24:	232e      	movs	r3, #46	; 0x2e
 8018c26:	4618      	mov	r0, r3
 8018c28:	f000 fad2 	bl	80191d0 <putchar>
  for(uint16_t i=0; i<count; i++)
 8018c2c:	89fb      	ldrh	r3, [r7, #14]
 8018c2e:	3301      	adds	r3, #1
 8018c30:	81fb      	strh	r3, [r7, #14]
 8018c32:	89fa      	ldrh	r2, [r7, #14]
 8018c34:	887b      	ldrh	r3, [r7, #2]
 8018c36:	429a      	cmp	r2, r3
 8018c38:	d3e4      	bcc.n	8018c04 <dump_str_line+0x18>
  }

  tu_printf("|\r\n");
 8018c3a:	4805      	ldr	r0, [pc, #20]	; (8018c50 <dump_str_line+0x64>)
 8018c3c:	f000 fb4c 	bl	80192d8 <puts>
}
 8018c40:	bf00      	nop
 8018c42:	3710      	adds	r7, #16
 8018c44:	46bd      	mov	sp, r7
 8018c46:	bd80      	pop	{r7, pc}
 8018c48:	0801c278 	.word	0x0801c278
 8018c4c:	0801cabd 	.word	0x0801cabd
 8018c50:	0801c27c 	.word	0x0801c27c

08018c54 <tu_print_mem>:
 *  - buf   : buffer
 *  - count : number of item
 *  - indent: prefix spaces on every line
 */
void tu_print_mem(void const *buf, uint32_t count, uint8_t indent)
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b08e      	sub	sp, #56	; 0x38
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	60f8      	str	r0, [r7, #12]
 8018c5c:	60b9      	str	r1, [r7, #8]
 8018c5e:	4613      	mov	r3, r2
 8018c60:	71fb      	strb	r3, [r7, #7]
  uint8_t const size = 1; // fixed 1 byte for now
 8018c62:	2301      	movs	r3, #1
 8018c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if ( !buf || !count )
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d002      	beq.n	8018c74 <tu_print_mem+0x20>
 8018c6e:	68bb      	ldr	r3, [r7, #8]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d103      	bne.n	8018c7c <tu_print_mem+0x28>
  {
    tu_printf("NULL\r\n");
 8018c74:	4853      	ldr	r0, [pc, #332]	; (8018dc4 <tu_print_mem+0x170>)
 8018c76:	f000 fb2f 	bl	80192d8 <puts>
 8018c7a:	e0a0      	b.n	8018dbe <tu_print_mem+0x16a>
    return;
  }

  uint8_t const *buf8 = (uint8_t const *) buf;
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	637b      	str	r3, [r7, #52]	; 0x34

  char format[] = "%00X";
 8018c80:	4a51      	ldr	r2, [pc, #324]	; (8018dc8 <tu_print_mem+0x174>)
 8018c82:	f107 0314 	add.w	r3, r7, #20
 8018c86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c8a:	6018      	str	r0, [r3, #0]
 8018c8c:	3304      	adds	r3, #4
 8018c8e:	7019      	strb	r1, [r3, #0]
  format[2] += 2*size;
 8018c90:	7dba      	ldrb	r2, [r7, #22]
 8018c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c96:	005b      	lsls	r3, r3, #1
 8018c98:	b2db      	uxtb	r3, r3
 8018c9a:	4413      	add	r3, r2
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	75bb      	strb	r3, [r7, #22]

  const uint8_t item_per_line  = 16 / size;
 8018ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018ca4:	2210      	movs	r2, #16
 8018ca6:	fb92 f3f3 	sdiv	r3, r2, r3
 8018caa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  for(unsigned int i=0; i<count; i++)
 8018cae:	2300      	movs	r3, #0
 8018cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8018cb2:	e049      	b.n	8018d48 <tu_print_mem+0xf4>
  {
    unsigned int value=0;
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	613b      	str	r3, [r7, #16]

    if ( i%item_per_line == 0 )
 8018cb8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8018cc2:	fb01 f202 	mul.w	r2, r1, r2
 8018cc6:	1a9b      	subs	r3, r3, r2
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d123      	bne.n	8018d14 <tu_print_mem+0xc0>
    {
      // Print Ascii
      if ( i != 0 )
 8018ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d005      	beq.n	8018cde <tu_print_mem+0x8a>
      {
        dump_str_line(buf8-16, 16);
 8018cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cd4:	3b10      	subs	r3, #16
 8018cd6:	2110      	movs	r1, #16
 8018cd8:	4618      	mov	r0, r3
 8018cda:	f7ff ff87 	bl	8018bec <dump_str_line>
      }

      for(uint8_t s=0; s < indent; s++) tu_printf(" ");
 8018cde:	2300      	movs	r3, #0
 8018ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018ce4:	e007      	b.n	8018cf6 <tu_print_mem+0xa2>
 8018ce6:	2020      	movs	r0, #32
 8018ce8:	f000 fa72 	bl	80191d0 <putchar>
 8018cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cf0:	3301      	adds	r3, #1
 8018cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018cf6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018cfa:	79fb      	ldrb	r3, [r7, #7]
 8018cfc:	429a      	cmp	r2, r3
 8018cfe:	d3f2      	bcc.n	8018ce6 <tu_print_mem+0x92>

      // print offset or absolute address
      tu_printf("%04X: ", 16*i/item_per_line);
 8018d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d02:	011a      	lsls	r2, r3, #4
 8018d04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d0c:	4619      	mov	r1, r3
 8018d0e:	482f      	ldr	r0, [pc, #188]	; (8018dcc <tu_print_mem+0x178>)
 8018d10:	f000 fa46 	bl	80191a0 <iprintf>
    }

    memcpy(&value, buf8, size);
 8018d14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8018d18:	f107 0310 	add.w	r3, r7, #16
 8018d1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f000 f979 	bl	8019016 <memcpy>
    buf8 += size;
 8018d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018d2a:	4413      	add	r3, r2
 8018d2c:	637b      	str	r3, [r7, #52]	; 0x34

    tu_printf(" ");
 8018d2e:	2020      	movs	r0, #32
 8018d30:	f000 fa4e 	bl	80191d0 <putchar>
    tu_printf(format, value);
 8018d34:	693a      	ldr	r2, [r7, #16]
 8018d36:	f107 0314 	add.w	r3, r7, #20
 8018d3a:	4611      	mov	r1, r2
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	f000 fa2f 	bl	80191a0 <iprintf>
  for(unsigned int i=0; i<count; i++)
 8018d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d44:	3301      	adds	r3, #1
 8018d46:	633b      	str	r3, [r7, #48]	; 0x30
 8018d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018d4a:	68bb      	ldr	r3, [r7, #8]
 8018d4c:	429a      	cmp	r2, r3
 8018d4e:	d3b1      	bcc.n	8018cb4 <tu_print_mem+0x60>
  }

  // fill up last row to 16 for printing ascii
  const uint32_t remain = count%16;
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	f003 030f 	and.w	r3, r3, #15
 8018d56:	61fb      	str	r3, [r7, #28]
  uint8_t nback = (remain ? remain : 16);
 8018d58:	69fb      	ldr	r3, [r7, #28]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d002      	beq.n	8018d64 <tu_print_mem+0x110>
 8018d5e:	69fb      	ldr	r3, [r7, #28]
 8018d60:	b2db      	uxtb	r3, r3
 8018d62:	e000      	b.n	8018d66 <tu_print_mem+0x112>
 8018d64:	2310      	movs	r3, #16
 8018d66:	76fb      	strb	r3, [r7, #27]

  if ( remain )
 8018d68:	69fb      	ldr	r3, [r7, #28]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d01d      	beq.n	8018daa <tu_print_mem+0x156>
  {
    for(uint32_t i=0; i< 16-remain; i++)
 8018d6e:	2300      	movs	r3, #0
 8018d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d72:	e014      	b.n	8018d9e <tu_print_mem+0x14a>
    {
      tu_printf(" ");
 8018d74:	2020      	movs	r0, #32
 8018d76:	f000 fa2b 	bl	80191d0 <putchar>
      for(int j=0; j<2*size; j++) tu_printf(" ");
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8018d7e:	e005      	b.n	8018d8c <tu_print_mem+0x138>
 8018d80:	2020      	movs	r0, #32
 8018d82:	f000 fa25 	bl	80191d0 <putchar>
 8018d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d88:	3301      	adds	r3, #1
 8018d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8018d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d90:	005b      	lsls	r3, r3, #1
 8018d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d94:	429a      	cmp	r2, r3
 8018d96:	dbf3      	blt.n	8018d80 <tu_print_mem+0x12c>
    for(uint32_t i=0; i< 16-remain; i++)
 8018d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d9a:	3301      	adds	r3, #1
 8018d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d9e:	69fb      	ldr	r3, [r7, #28]
 8018da0:	f1c3 0310 	rsb	r3, r3, #16
 8018da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018da6:	429a      	cmp	r2, r3
 8018da8:	d3e4      	bcc.n	8018d74 <tu_print_mem+0x120>
    }
  }

  dump_str_line(buf8-nback, nback);
 8018daa:	7efb      	ldrb	r3, [r7, #27]
 8018dac:	425b      	negs	r3, r3
 8018dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018db0:	4413      	add	r3, r2
 8018db2:	7efa      	ldrb	r2, [r7, #27]
 8018db4:	b292      	uxth	r2, r2
 8018db6:	4611      	mov	r1, r2
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7ff ff17 	bl	8018bec <dump_str_line>
}
 8018dbe:	3738      	adds	r7, #56	; 0x38
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}
 8018dc4:	0801c280 	.word	0x0801c280
 8018dc8:	0801c290 	.word	0x0801c290
 8018dcc:	0801c288 	.word	0x0801c288

08018dd0 <__errno>:
 8018dd0:	4b01      	ldr	r3, [pc, #4]	; (8018dd8 <__errno+0x8>)
 8018dd2:	6818      	ldr	r0, [r3, #0]
 8018dd4:	4770      	bx	lr
 8018dd6:	bf00      	nop
 8018dd8:	200001bc 	.word	0x200001bc

08018ddc <std>:
 8018ddc:	2300      	movs	r3, #0
 8018dde:	b510      	push	{r4, lr}
 8018de0:	4604      	mov	r4, r0
 8018de2:	e9c0 3300 	strd	r3, r3, [r0]
 8018de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018dea:	6083      	str	r3, [r0, #8]
 8018dec:	8181      	strh	r1, [r0, #12]
 8018dee:	6643      	str	r3, [r0, #100]	; 0x64
 8018df0:	81c2      	strh	r2, [r0, #14]
 8018df2:	6183      	str	r3, [r0, #24]
 8018df4:	4619      	mov	r1, r3
 8018df6:	2208      	movs	r2, #8
 8018df8:	305c      	adds	r0, #92	; 0x5c
 8018dfa:	f000 f934 	bl	8019066 <memset>
 8018dfe:	4b05      	ldr	r3, [pc, #20]	; (8018e14 <std+0x38>)
 8018e00:	6263      	str	r3, [r4, #36]	; 0x24
 8018e02:	4b05      	ldr	r3, [pc, #20]	; (8018e18 <std+0x3c>)
 8018e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e06:	4b05      	ldr	r3, [pc, #20]	; (8018e1c <std+0x40>)
 8018e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e0a:	4b05      	ldr	r3, [pc, #20]	; (8018e20 <std+0x44>)
 8018e0c:	6224      	str	r4, [r4, #32]
 8018e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8018e10:	bd10      	pop	{r4, pc}
 8018e12:	bf00      	nop
 8018e14:	0801941d 	.word	0x0801941d
 8018e18:	0801943f 	.word	0x0801943f
 8018e1c:	08019477 	.word	0x08019477
 8018e20:	0801949b 	.word	0x0801949b

08018e24 <_cleanup_r>:
 8018e24:	4901      	ldr	r1, [pc, #4]	; (8018e2c <_cleanup_r+0x8>)
 8018e26:	f000 b8af 	b.w	8018f88 <_fwalk_reent>
 8018e2a:	bf00      	nop
 8018e2c:	080197a1 	.word	0x080197a1

08018e30 <__sfmoreglue>:
 8018e30:	b570      	push	{r4, r5, r6, lr}
 8018e32:	2268      	movs	r2, #104	; 0x68
 8018e34:	1e4d      	subs	r5, r1, #1
 8018e36:	4355      	muls	r5, r2
 8018e38:	460e      	mov	r6, r1
 8018e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018e3e:	f000 f93b 	bl	80190b8 <_malloc_r>
 8018e42:	4604      	mov	r4, r0
 8018e44:	b140      	cbz	r0, 8018e58 <__sfmoreglue+0x28>
 8018e46:	2100      	movs	r1, #0
 8018e48:	e9c0 1600 	strd	r1, r6, [r0]
 8018e4c:	300c      	adds	r0, #12
 8018e4e:	60a0      	str	r0, [r4, #8]
 8018e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018e54:	f000 f907 	bl	8019066 <memset>
 8018e58:	4620      	mov	r0, r4
 8018e5a:	bd70      	pop	{r4, r5, r6, pc}

08018e5c <__sfp_lock_acquire>:
 8018e5c:	4801      	ldr	r0, [pc, #4]	; (8018e64 <__sfp_lock_acquire+0x8>)
 8018e5e:	f000 b8d8 	b.w	8019012 <__retarget_lock_acquire_recursive>
 8018e62:	bf00      	nop
 8018e64:	2000957c 	.word	0x2000957c

08018e68 <__sfp_lock_release>:
 8018e68:	4801      	ldr	r0, [pc, #4]	; (8018e70 <__sfp_lock_release+0x8>)
 8018e6a:	f000 b8d3 	b.w	8019014 <__retarget_lock_release_recursive>
 8018e6e:	bf00      	nop
 8018e70:	2000957c 	.word	0x2000957c

08018e74 <__sinit_lock_acquire>:
 8018e74:	4801      	ldr	r0, [pc, #4]	; (8018e7c <__sinit_lock_acquire+0x8>)
 8018e76:	f000 b8cc 	b.w	8019012 <__retarget_lock_acquire_recursive>
 8018e7a:	bf00      	nop
 8018e7c:	2000957d 	.word	0x2000957d

08018e80 <__sinit_lock_release>:
 8018e80:	4801      	ldr	r0, [pc, #4]	; (8018e88 <__sinit_lock_release+0x8>)
 8018e82:	f000 b8c7 	b.w	8019014 <__retarget_lock_release_recursive>
 8018e86:	bf00      	nop
 8018e88:	2000957d 	.word	0x2000957d

08018e8c <__sinit>:
 8018e8c:	b510      	push	{r4, lr}
 8018e8e:	4604      	mov	r4, r0
 8018e90:	f7ff fff0 	bl	8018e74 <__sinit_lock_acquire>
 8018e94:	69a3      	ldr	r3, [r4, #24]
 8018e96:	b11b      	cbz	r3, 8018ea0 <__sinit+0x14>
 8018e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e9c:	f7ff bff0 	b.w	8018e80 <__sinit_lock_release>
 8018ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8018ea6:	4b13      	ldr	r3, [pc, #76]	; (8018ef4 <__sinit+0x68>)
 8018ea8:	4a13      	ldr	r2, [pc, #76]	; (8018ef8 <__sinit+0x6c>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8018eae:	42a3      	cmp	r3, r4
 8018eb0:	bf04      	itt	eq
 8018eb2:	2301      	moveq	r3, #1
 8018eb4:	61a3      	streq	r3, [r4, #24]
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f000 f820 	bl	8018efc <__sfp>
 8018ebc:	6060      	str	r0, [r4, #4]
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	f000 f81c 	bl	8018efc <__sfp>
 8018ec4:	60a0      	str	r0, [r4, #8]
 8018ec6:	4620      	mov	r0, r4
 8018ec8:	f000 f818 	bl	8018efc <__sfp>
 8018ecc:	2200      	movs	r2, #0
 8018ece:	60e0      	str	r0, [r4, #12]
 8018ed0:	2104      	movs	r1, #4
 8018ed2:	6860      	ldr	r0, [r4, #4]
 8018ed4:	f7ff ff82 	bl	8018ddc <std>
 8018ed8:	68a0      	ldr	r0, [r4, #8]
 8018eda:	2201      	movs	r2, #1
 8018edc:	2109      	movs	r1, #9
 8018ede:	f7ff ff7d 	bl	8018ddc <std>
 8018ee2:	68e0      	ldr	r0, [r4, #12]
 8018ee4:	2202      	movs	r2, #2
 8018ee6:	2112      	movs	r1, #18
 8018ee8:	f7ff ff78 	bl	8018ddc <std>
 8018eec:	2301      	movs	r3, #1
 8018eee:	61a3      	str	r3, [r4, #24]
 8018ef0:	e7d2      	b.n	8018e98 <__sinit+0xc>
 8018ef2:	bf00      	nop
 8018ef4:	0801cc20 	.word	0x0801cc20
 8018ef8:	08018e25 	.word	0x08018e25

08018efc <__sfp>:
 8018efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018efe:	4607      	mov	r7, r0
 8018f00:	f7ff ffac 	bl	8018e5c <__sfp_lock_acquire>
 8018f04:	4b1e      	ldr	r3, [pc, #120]	; (8018f80 <__sfp+0x84>)
 8018f06:	681e      	ldr	r6, [r3, #0]
 8018f08:	69b3      	ldr	r3, [r6, #24]
 8018f0a:	b913      	cbnz	r3, 8018f12 <__sfp+0x16>
 8018f0c:	4630      	mov	r0, r6
 8018f0e:	f7ff ffbd 	bl	8018e8c <__sinit>
 8018f12:	3648      	adds	r6, #72	; 0x48
 8018f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018f18:	3b01      	subs	r3, #1
 8018f1a:	d503      	bpl.n	8018f24 <__sfp+0x28>
 8018f1c:	6833      	ldr	r3, [r6, #0]
 8018f1e:	b30b      	cbz	r3, 8018f64 <__sfp+0x68>
 8018f20:	6836      	ldr	r6, [r6, #0]
 8018f22:	e7f7      	b.n	8018f14 <__sfp+0x18>
 8018f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018f28:	b9d5      	cbnz	r5, 8018f60 <__sfp+0x64>
 8018f2a:	4b16      	ldr	r3, [pc, #88]	; (8018f84 <__sfp+0x88>)
 8018f2c:	60e3      	str	r3, [r4, #12]
 8018f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018f32:	6665      	str	r5, [r4, #100]	; 0x64
 8018f34:	f000 f86c 	bl	8019010 <__retarget_lock_init_recursive>
 8018f38:	f7ff ff96 	bl	8018e68 <__sfp_lock_release>
 8018f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018f44:	6025      	str	r5, [r4, #0]
 8018f46:	61a5      	str	r5, [r4, #24]
 8018f48:	2208      	movs	r2, #8
 8018f4a:	4629      	mov	r1, r5
 8018f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018f50:	f000 f889 	bl	8019066 <memset>
 8018f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018f5c:	4620      	mov	r0, r4
 8018f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f60:	3468      	adds	r4, #104	; 0x68
 8018f62:	e7d9      	b.n	8018f18 <__sfp+0x1c>
 8018f64:	2104      	movs	r1, #4
 8018f66:	4638      	mov	r0, r7
 8018f68:	f7ff ff62 	bl	8018e30 <__sfmoreglue>
 8018f6c:	4604      	mov	r4, r0
 8018f6e:	6030      	str	r0, [r6, #0]
 8018f70:	2800      	cmp	r0, #0
 8018f72:	d1d5      	bne.n	8018f20 <__sfp+0x24>
 8018f74:	f7ff ff78 	bl	8018e68 <__sfp_lock_release>
 8018f78:	230c      	movs	r3, #12
 8018f7a:	603b      	str	r3, [r7, #0]
 8018f7c:	e7ee      	b.n	8018f5c <__sfp+0x60>
 8018f7e:	bf00      	nop
 8018f80:	0801cc20 	.word	0x0801cc20
 8018f84:	ffff0001 	.word	0xffff0001

08018f88 <_fwalk_reent>:
 8018f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f8c:	4606      	mov	r6, r0
 8018f8e:	4688      	mov	r8, r1
 8018f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018f94:	2700      	movs	r7, #0
 8018f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8018f9e:	d505      	bpl.n	8018fac <_fwalk_reent+0x24>
 8018fa0:	6824      	ldr	r4, [r4, #0]
 8018fa2:	2c00      	cmp	r4, #0
 8018fa4:	d1f7      	bne.n	8018f96 <_fwalk_reent+0xe>
 8018fa6:	4638      	mov	r0, r7
 8018fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fac:	89ab      	ldrh	r3, [r5, #12]
 8018fae:	2b01      	cmp	r3, #1
 8018fb0:	d907      	bls.n	8018fc2 <_fwalk_reent+0x3a>
 8018fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018fb6:	3301      	adds	r3, #1
 8018fb8:	d003      	beq.n	8018fc2 <_fwalk_reent+0x3a>
 8018fba:	4629      	mov	r1, r5
 8018fbc:	4630      	mov	r0, r6
 8018fbe:	47c0      	blx	r8
 8018fc0:	4307      	orrs	r7, r0
 8018fc2:	3568      	adds	r5, #104	; 0x68
 8018fc4:	e7e9      	b.n	8018f9a <_fwalk_reent+0x12>
	...

08018fc8 <__libc_init_array>:
 8018fc8:	b570      	push	{r4, r5, r6, lr}
 8018fca:	4d0d      	ldr	r5, [pc, #52]	; (8019000 <__libc_init_array+0x38>)
 8018fcc:	4c0d      	ldr	r4, [pc, #52]	; (8019004 <__libc_init_array+0x3c>)
 8018fce:	1b64      	subs	r4, r4, r5
 8018fd0:	10a4      	asrs	r4, r4, #2
 8018fd2:	2600      	movs	r6, #0
 8018fd4:	42a6      	cmp	r6, r4
 8018fd6:	d109      	bne.n	8018fec <__libc_init_array+0x24>
 8018fd8:	4d0b      	ldr	r5, [pc, #44]	; (8019008 <__libc_init_array+0x40>)
 8018fda:	4c0c      	ldr	r4, [pc, #48]	; (801900c <__libc_init_array+0x44>)
 8018fdc:	f001 f9ea 	bl	801a3b4 <_init>
 8018fe0:	1b64      	subs	r4, r4, r5
 8018fe2:	10a4      	asrs	r4, r4, #2
 8018fe4:	2600      	movs	r6, #0
 8018fe6:	42a6      	cmp	r6, r4
 8018fe8:	d105      	bne.n	8018ff6 <__libc_init_array+0x2e>
 8018fea:	bd70      	pop	{r4, r5, r6, pc}
 8018fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ff0:	4798      	blx	r3
 8018ff2:	3601      	adds	r6, #1
 8018ff4:	e7ee      	b.n	8018fd4 <__libc_init_array+0xc>
 8018ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ffa:	4798      	blx	r3
 8018ffc:	3601      	adds	r6, #1
 8018ffe:	e7f2      	b.n	8018fe6 <__libc_init_array+0x1e>
 8019000:	0801cc60 	.word	0x0801cc60
 8019004:	0801cc60 	.word	0x0801cc60
 8019008:	0801cc60 	.word	0x0801cc60
 801900c:	0801cc64 	.word	0x0801cc64

08019010 <__retarget_lock_init_recursive>:
 8019010:	4770      	bx	lr

08019012 <__retarget_lock_acquire_recursive>:
 8019012:	4770      	bx	lr

08019014 <__retarget_lock_release_recursive>:
 8019014:	4770      	bx	lr

08019016 <memcpy>:
 8019016:	440a      	add	r2, r1
 8019018:	4291      	cmp	r1, r2
 801901a:	f100 33ff 	add.w	r3, r0, #4294967295
 801901e:	d100      	bne.n	8019022 <memcpy+0xc>
 8019020:	4770      	bx	lr
 8019022:	b510      	push	{r4, lr}
 8019024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019028:	f803 4f01 	strb.w	r4, [r3, #1]!
 801902c:	4291      	cmp	r1, r2
 801902e:	d1f9      	bne.n	8019024 <memcpy+0xe>
 8019030:	bd10      	pop	{r4, pc}

08019032 <memmove>:
 8019032:	4288      	cmp	r0, r1
 8019034:	b510      	push	{r4, lr}
 8019036:	eb01 0402 	add.w	r4, r1, r2
 801903a:	d902      	bls.n	8019042 <memmove+0x10>
 801903c:	4284      	cmp	r4, r0
 801903e:	4623      	mov	r3, r4
 8019040:	d807      	bhi.n	8019052 <memmove+0x20>
 8019042:	1e43      	subs	r3, r0, #1
 8019044:	42a1      	cmp	r1, r4
 8019046:	d008      	beq.n	801905a <memmove+0x28>
 8019048:	f811 2b01 	ldrb.w	r2, [r1], #1
 801904c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019050:	e7f8      	b.n	8019044 <memmove+0x12>
 8019052:	4402      	add	r2, r0
 8019054:	4601      	mov	r1, r0
 8019056:	428a      	cmp	r2, r1
 8019058:	d100      	bne.n	801905c <memmove+0x2a>
 801905a:	bd10      	pop	{r4, pc}
 801905c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019060:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019064:	e7f7      	b.n	8019056 <memmove+0x24>

08019066 <memset>:
 8019066:	4402      	add	r2, r0
 8019068:	4603      	mov	r3, r0
 801906a:	4293      	cmp	r3, r2
 801906c:	d100      	bne.n	8019070 <memset+0xa>
 801906e:	4770      	bx	lr
 8019070:	f803 1b01 	strb.w	r1, [r3], #1
 8019074:	e7f9      	b.n	801906a <memset+0x4>
	...

08019078 <sbrk_aligned>:
 8019078:	b570      	push	{r4, r5, r6, lr}
 801907a:	4e0e      	ldr	r6, [pc, #56]	; (80190b4 <sbrk_aligned+0x3c>)
 801907c:	460c      	mov	r4, r1
 801907e:	6831      	ldr	r1, [r6, #0]
 8019080:	4605      	mov	r5, r0
 8019082:	b911      	cbnz	r1, 801908a <sbrk_aligned+0x12>
 8019084:	f000 f99a 	bl	80193bc <_sbrk_r>
 8019088:	6030      	str	r0, [r6, #0]
 801908a:	4621      	mov	r1, r4
 801908c:	4628      	mov	r0, r5
 801908e:	f000 f995 	bl	80193bc <_sbrk_r>
 8019092:	1c43      	adds	r3, r0, #1
 8019094:	d00a      	beq.n	80190ac <sbrk_aligned+0x34>
 8019096:	1cc4      	adds	r4, r0, #3
 8019098:	f024 0403 	bic.w	r4, r4, #3
 801909c:	42a0      	cmp	r0, r4
 801909e:	d007      	beq.n	80190b0 <sbrk_aligned+0x38>
 80190a0:	1a21      	subs	r1, r4, r0
 80190a2:	4628      	mov	r0, r5
 80190a4:	f000 f98a 	bl	80193bc <_sbrk_r>
 80190a8:	3001      	adds	r0, #1
 80190aa:	d101      	bne.n	80190b0 <sbrk_aligned+0x38>
 80190ac:	f04f 34ff 	mov.w	r4, #4294967295
 80190b0:	4620      	mov	r0, r4
 80190b2:	bd70      	pop	{r4, r5, r6, pc}
 80190b4:	20009584 	.word	0x20009584

080190b8 <_malloc_r>:
 80190b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190bc:	1ccd      	adds	r5, r1, #3
 80190be:	f025 0503 	bic.w	r5, r5, #3
 80190c2:	3508      	adds	r5, #8
 80190c4:	2d0c      	cmp	r5, #12
 80190c6:	bf38      	it	cc
 80190c8:	250c      	movcc	r5, #12
 80190ca:	2d00      	cmp	r5, #0
 80190cc:	4607      	mov	r7, r0
 80190ce:	db01      	blt.n	80190d4 <_malloc_r+0x1c>
 80190d0:	42a9      	cmp	r1, r5
 80190d2:	d905      	bls.n	80190e0 <_malloc_r+0x28>
 80190d4:	230c      	movs	r3, #12
 80190d6:	603b      	str	r3, [r7, #0]
 80190d8:	2600      	movs	r6, #0
 80190da:	4630      	mov	r0, r6
 80190dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190e0:	4e2e      	ldr	r6, [pc, #184]	; (801919c <_malloc_r+0xe4>)
 80190e2:	f000 fc11 	bl	8019908 <__malloc_lock>
 80190e6:	6833      	ldr	r3, [r6, #0]
 80190e8:	461c      	mov	r4, r3
 80190ea:	bb34      	cbnz	r4, 801913a <_malloc_r+0x82>
 80190ec:	4629      	mov	r1, r5
 80190ee:	4638      	mov	r0, r7
 80190f0:	f7ff ffc2 	bl	8019078 <sbrk_aligned>
 80190f4:	1c43      	adds	r3, r0, #1
 80190f6:	4604      	mov	r4, r0
 80190f8:	d14d      	bne.n	8019196 <_malloc_r+0xde>
 80190fa:	6834      	ldr	r4, [r6, #0]
 80190fc:	4626      	mov	r6, r4
 80190fe:	2e00      	cmp	r6, #0
 8019100:	d140      	bne.n	8019184 <_malloc_r+0xcc>
 8019102:	6823      	ldr	r3, [r4, #0]
 8019104:	4631      	mov	r1, r6
 8019106:	4638      	mov	r0, r7
 8019108:	eb04 0803 	add.w	r8, r4, r3
 801910c:	f000 f956 	bl	80193bc <_sbrk_r>
 8019110:	4580      	cmp	r8, r0
 8019112:	d13a      	bne.n	801918a <_malloc_r+0xd2>
 8019114:	6821      	ldr	r1, [r4, #0]
 8019116:	3503      	adds	r5, #3
 8019118:	1a6d      	subs	r5, r5, r1
 801911a:	f025 0503 	bic.w	r5, r5, #3
 801911e:	3508      	adds	r5, #8
 8019120:	2d0c      	cmp	r5, #12
 8019122:	bf38      	it	cc
 8019124:	250c      	movcc	r5, #12
 8019126:	4629      	mov	r1, r5
 8019128:	4638      	mov	r0, r7
 801912a:	f7ff ffa5 	bl	8019078 <sbrk_aligned>
 801912e:	3001      	adds	r0, #1
 8019130:	d02b      	beq.n	801918a <_malloc_r+0xd2>
 8019132:	6823      	ldr	r3, [r4, #0]
 8019134:	442b      	add	r3, r5
 8019136:	6023      	str	r3, [r4, #0]
 8019138:	e00e      	b.n	8019158 <_malloc_r+0xa0>
 801913a:	6822      	ldr	r2, [r4, #0]
 801913c:	1b52      	subs	r2, r2, r5
 801913e:	d41e      	bmi.n	801917e <_malloc_r+0xc6>
 8019140:	2a0b      	cmp	r2, #11
 8019142:	d916      	bls.n	8019172 <_malloc_r+0xba>
 8019144:	1961      	adds	r1, r4, r5
 8019146:	42a3      	cmp	r3, r4
 8019148:	6025      	str	r5, [r4, #0]
 801914a:	bf18      	it	ne
 801914c:	6059      	strne	r1, [r3, #4]
 801914e:	6863      	ldr	r3, [r4, #4]
 8019150:	bf08      	it	eq
 8019152:	6031      	streq	r1, [r6, #0]
 8019154:	5162      	str	r2, [r4, r5]
 8019156:	604b      	str	r3, [r1, #4]
 8019158:	4638      	mov	r0, r7
 801915a:	f104 060b 	add.w	r6, r4, #11
 801915e:	f000 fbd9 	bl	8019914 <__malloc_unlock>
 8019162:	f026 0607 	bic.w	r6, r6, #7
 8019166:	1d23      	adds	r3, r4, #4
 8019168:	1af2      	subs	r2, r6, r3
 801916a:	d0b6      	beq.n	80190da <_malloc_r+0x22>
 801916c:	1b9b      	subs	r3, r3, r6
 801916e:	50a3      	str	r3, [r4, r2]
 8019170:	e7b3      	b.n	80190da <_malloc_r+0x22>
 8019172:	6862      	ldr	r2, [r4, #4]
 8019174:	42a3      	cmp	r3, r4
 8019176:	bf0c      	ite	eq
 8019178:	6032      	streq	r2, [r6, #0]
 801917a:	605a      	strne	r2, [r3, #4]
 801917c:	e7ec      	b.n	8019158 <_malloc_r+0xa0>
 801917e:	4623      	mov	r3, r4
 8019180:	6864      	ldr	r4, [r4, #4]
 8019182:	e7b2      	b.n	80190ea <_malloc_r+0x32>
 8019184:	4634      	mov	r4, r6
 8019186:	6876      	ldr	r6, [r6, #4]
 8019188:	e7b9      	b.n	80190fe <_malloc_r+0x46>
 801918a:	230c      	movs	r3, #12
 801918c:	603b      	str	r3, [r7, #0]
 801918e:	4638      	mov	r0, r7
 8019190:	f000 fbc0 	bl	8019914 <__malloc_unlock>
 8019194:	e7a1      	b.n	80190da <_malloc_r+0x22>
 8019196:	6025      	str	r5, [r4, #0]
 8019198:	e7de      	b.n	8019158 <_malloc_r+0xa0>
 801919a:	bf00      	nop
 801919c:	20009580 	.word	0x20009580

080191a0 <iprintf>:
 80191a0:	b40f      	push	{r0, r1, r2, r3}
 80191a2:	4b0a      	ldr	r3, [pc, #40]	; (80191cc <iprintf+0x2c>)
 80191a4:	b513      	push	{r0, r1, r4, lr}
 80191a6:	681c      	ldr	r4, [r3, #0]
 80191a8:	b124      	cbz	r4, 80191b4 <iprintf+0x14>
 80191aa:	69a3      	ldr	r3, [r4, #24]
 80191ac:	b913      	cbnz	r3, 80191b4 <iprintf+0x14>
 80191ae:	4620      	mov	r0, r4
 80191b0:	f7ff fe6c 	bl	8018e8c <__sinit>
 80191b4:	ab05      	add	r3, sp, #20
 80191b6:	9a04      	ldr	r2, [sp, #16]
 80191b8:	68a1      	ldr	r1, [r4, #8]
 80191ba:	9301      	str	r3, [sp, #4]
 80191bc:	4620      	mov	r0, r4
 80191be:	f000 fd81 	bl	8019cc4 <_vfiprintf_r>
 80191c2:	b002      	add	sp, #8
 80191c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191c8:	b004      	add	sp, #16
 80191ca:	4770      	bx	lr
 80191cc:	200001bc 	.word	0x200001bc

080191d0 <putchar>:
 80191d0:	4b09      	ldr	r3, [pc, #36]	; (80191f8 <putchar+0x28>)
 80191d2:	b513      	push	{r0, r1, r4, lr}
 80191d4:	681c      	ldr	r4, [r3, #0]
 80191d6:	4601      	mov	r1, r0
 80191d8:	b134      	cbz	r4, 80191e8 <putchar+0x18>
 80191da:	69a3      	ldr	r3, [r4, #24]
 80191dc:	b923      	cbnz	r3, 80191e8 <putchar+0x18>
 80191de:	9001      	str	r0, [sp, #4]
 80191e0:	4620      	mov	r0, r4
 80191e2:	f7ff fe53 	bl	8018e8c <__sinit>
 80191e6:	9901      	ldr	r1, [sp, #4]
 80191e8:	68a2      	ldr	r2, [r4, #8]
 80191ea:	4620      	mov	r0, r4
 80191ec:	b002      	add	sp, #8
 80191ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191f2:	f001 b82b 	b.w	801a24c <_putc_r>
 80191f6:	bf00      	nop
 80191f8:	200001bc 	.word	0x200001bc

080191fc <_puts_r>:
 80191fc:	b570      	push	{r4, r5, r6, lr}
 80191fe:	460e      	mov	r6, r1
 8019200:	4605      	mov	r5, r0
 8019202:	b118      	cbz	r0, 801920c <_puts_r+0x10>
 8019204:	6983      	ldr	r3, [r0, #24]
 8019206:	b90b      	cbnz	r3, 801920c <_puts_r+0x10>
 8019208:	f7ff fe40 	bl	8018e8c <__sinit>
 801920c:	69ab      	ldr	r3, [r5, #24]
 801920e:	68ac      	ldr	r4, [r5, #8]
 8019210:	b913      	cbnz	r3, 8019218 <_puts_r+0x1c>
 8019212:	4628      	mov	r0, r5
 8019214:	f7ff fe3a 	bl	8018e8c <__sinit>
 8019218:	4b2c      	ldr	r3, [pc, #176]	; (80192cc <_puts_r+0xd0>)
 801921a:	429c      	cmp	r4, r3
 801921c:	d120      	bne.n	8019260 <_puts_r+0x64>
 801921e:	686c      	ldr	r4, [r5, #4]
 8019220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019222:	07db      	lsls	r3, r3, #31
 8019224:	d405      	bmi.n	8019232 <_puts_r+0x36>
 8019226:	89a3      	ldrh	r3, [r4, #12]
 8019228:	0598      	lsls	r0, r3, #22
 801922a:	d402      	bmi.n	8019232 <_puts_r+0x36>
 801922c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801922e:	f7ff fef0 	bl	8019012 <__retarget_lock_acquire_recursive>
 8019232:	89a3      	ldrh	r3, [r4, #12]
 8019234:	0719      	lsls	r1, r3, #28
 8019236:	d51d      	bpl.n	8019274 <_puts_r+0x78>
 8019238:	6923      	ldr	r3, [r4, #16]
 801923a:	b1db      	cbz	r3, 8019274 <_puts_r+0x78>
 801923c:	3e01      	subs	r6, #1
 801923e:	68a3      	ldr	r3, [r4, #8]
 8019240:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019244:	3b01      	subs	r3, #1
 8019246:	60a3      	str	r3, [r4, #8]
 8019248:	bb39      	cbnz	r1, 801929a <_puts_r+0x9e>
 801924a:	2b00      	cmp	r3, #0
 801924c:	da38      	bge.n	80192c0 <_puts_r+0xc4>
 801924e:	4622      	mov	r2, r4
 8019250:	210a      	movs	r1, #10
 8019252:	4628      	mov	r0, r5
 8019254:	f000 f93c 	bl	80194d0 <__swbuf_r>
 8019258:	3001      	adds	r0, #1
 801925a:	d011      	beq.n	8019280 <_puts_r+0x84>
 801925c:	250a      	movs	r5, #10
 801925e:	e011      	b.n	8019284 <_puts_r+0x88>
 8019260:	4b1b      	ldr	r3, [pc, #108]	; (80192d0 <_puts_r+0xd4>)
 8019262:	429c      	cmp	r4, r3
 8019264:	d101      	bne.n	801926a <_puts_r+0x6e>
 8019266:	68ac      	ldr	r4, [r5, #8]
 8019268:	e7da      	b.n	8019220 <_puts_r+0x24>
 801926a:	4b1a      	ldr	r3, [pc, #104]	; (80192d4 <_puts_r+0xd8>)
 801926c:	429c      	cmp	r4, r3
 801926e:	bf08      	it	eq
 8019270:	68ec      	ldreq	r4, [r5, #12]
 8019272:	e7d5      	b.n	8019220 <_puts_r+0x24>
 8019274:	4621      	mov	r1, r4
 8019276:	4628      	mov	r0, r5
 8019278:	f000 f98e 	bl	8019598 <__swsetup_r>
 801927c:	2800      	cmp	r0, #0
 801927e:	d0dd      	beq.n	801923c <_puts_r+0x40>
 8019280:	f04f 35ff 	mov.w	r5, #4294967295
 8019284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019286:	07da      	lsls	r2, r3, #31
 8019288:	d405      	bmi.n	8019296 <_puts_r+0x9a>
 801928a:	89a3      	ldrh	r3, [r4, #12]
 801928c:	059b      	lsls	r3, r3, #22
 801928e:	d402      	bmi.n	8019296 <_puts_r+0x9a>
 8019290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019292:	f7ff febf 	bl	8019014 <__retarget_lock_release_recursive>
 8019296:	4628      	mov	r0, r5
 8019298:	bd70      	pop	{r4, r5, r6, pc}
 801929a:	2b00      	cmp	r3, #0
 801929c:	da04      	bge.n	80192a8 <_puts_r+0xac>
 801929e:	69a2      	ldr	r2, [r4, #24]
 80192a0:	429a      	cmp	r2, r3
 80192a2:	dc06      	bgt.n	80192b2 <_puts_r+0xb6>
 80192a4:	290a      	cmp	r1, #10
 80192a6:	d004      	beq.n	80192b2 <_puts_r+0xb6>
 80192a8:	6823      	ldr	r3, [r4, #0]
 80192aa:	1c5a      	adds	r2, r3, #1
 80192ac:	6022      	str	r2, [r4, #0]
 80192ae:	7019      	strb	r1, [r3, #0]
 80192b0:	e7c5      	b.n	801923e <_puts_r+0x42>
 80192b2:	4622      	mov	r2, r4
 80192b4:	4628      	mov	r0, r5
 80192b6:	f000 f90b 	bl	80194d0 <__swbuf_r>
 80192ba:	3001      	adds	r0, #1
 80192bc:	d1bf      	bne.n	801923e <_puts_r+0x42>
 80192be:	e7df      	b.n	8019280 <_puts_r+0x84>
 80192c0:	6823      	ldr	r3, [r4, #0]
 80192c2:	250a      	movs	r5, #10
 80192c4:	1c5a      	adds	r2, r3, #1
 80192c6:	6022      	str	r2, [r4, #0]
 80192c8:	701d      	strb	r5, [r3, #0]
 80192ca:	e7db      	b.n	8019284 <_puts_r+0x88>
 80192cc:	0801cbe0 	.word	0x0801cbe0
 80192d0:	0801cc00 	.word	0x0801cc00
 80192d4:	0801cbc0 	.word	0x0801cbc0

080192d8 <puts>:
 80192d8:	4b02      	ldr	r3, [pc, #8]	; (80192e4 <puts+0xc>)
 80192da:	4601      	mov	r1, r0
 80192dc:	6818      	ldr	r0, [r3, #0]
 80192de:	f7ff bf8d 	b.w	80191fc <_puts_r>
 80192e2:	bf00      	nop
 80192e4:	200001bc 	.word	0x200001bc

080192e8 <cleanup_glue>:
 80192e8:	b538      	push	{r3, r4, r5, lr}
 80192ea:	460c      	mov	r4, r1
 80192ec:	6809      	ldr	r1, [r1, #0]
 80192ee:	4605      	mov	r5, r0
 80192f0:	b109      	cbz	r1, 80192f6 <cleanup_glue+0xe>
 80192f2:	f7ff fff9 	bl	80192e8 <cleanup_glue>
 80192f6:	4621      	mov	r1, r4
 80192f8:	4628      	mov	r0, r5
 80192fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192fe:	f000 bb0f 	b.w	8019920 <_free_r>
	...

08019304 <_reclaim_reent>:
 8019304:	4b2c      	ldr	r3, [pc, #176]	; (80193b8 <_reclaim_reent+0xb4>)
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	4283      	cmp	r3, r0
 801930a:	b570      	push	{r4, r5, r6, lr}
 801930c:	4604      	mov	r4, r0
 801930e:	d051      	beq.n	80193b4 <_reclaim_reent+0xb0>
 8019310:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019312:	b143      	cbz	r3, 8019326 <_reclaim_reent+0x22>
 8019314:	68db      	ldr	r3, [r3, #12]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d14a      	bne.n	80193b0 <_reclaim_reent+0xac>
 801931a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801931c:	6819      	ldr	r1, [r3, #0]
 801931e:	b111      	cbz	r1, 8019326 <_reclaim_reent+0x22>
 8019320:	4620      	mov	r0, r4
 8019322:	f000 fafd 	bl	8019920 <_free_r>
 8019326:	6961      	ldr	r1, [r4, #20]
 8019328:	b111      	cbz	r1, 8019330 <_reclaim_reent+0x2c>
 801932a:	4620      	mov	r0, r4
 801932c:	f000 faf8 	bl	8019920 <_free_r>
 8019330:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019332:	b111      	cbz	r1, 801933a <_reclaim_reent+0x36>
 8019334:	4620      	mov	r0, r4
 8019336:	f000 faf3 	bl	8019920 <_free_r>
 801933a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801933c:	b111      	cbz	r1, 8019344 <_reclaim_reent+0x40>
 801933e:	4620      	mov	r0, r4
 8019340:	f000 faee 	bl	8019920 <_free_r>
 8019344:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019346:	b111      	cbz	r1, 801934e <_reclaim_reent+0x4a>
 8019348:	4620      	mov	r0, r4
 801934a:	f000 fae9 	bl	8019920 <_free_r>
 801934e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019350:	b111      	cbz	r1, 8019358 <_reclaim_reent+0x54>
 8019352:	4620      	mov	r0, r4
 8019354:	f000 fae4 	bl	8019920 <_free_r>
 8019358:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801935a:	b111      	cbz	r1, 8019362 <_reclaim_reent+0x5e>
 801935c:	4620      	mov	r0, r4
 801935e:	f000 fadf 	bl	8019920 <_free_r>
 8019362:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019364:	b111      	cbz	r1, 801936c <_reclaim_reent+0x68>
 8019366:	4620      	mov	r0, r4
 8019368:	f000 fada 	bl	8019920 <_free_r>
 801936c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801936e:	b111      	cbz	r1, 8019376 <_reclaim_reent+0x72>
 8019370:	4620      	mov	r0, r4
 8019372:	f000 fad5 	bl	8019920 <_free_r>
 8019376:	69a3      	ldr	r3, [r4, #24]
 8019378:	b1e3      	cbz	r3, 80193b4 <_reclaim_reent+0xb0>
 801937a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801937c:	4620      	mov	r0, r4
 801937e:	4798      	blx	r3
 8019380:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019382:	b1b9      	cbz	r1, 80193b4 <_reclaim_reent+0xb0>
 8019384:	4620      	mov	r0, r4
 8019386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801938a:	f7ff bfad 	b.w	80192e8 <cleanup_glue>
 801938e:	5949      	ldr	r1, [r1, r5]
 8019390:	b941      	cbnz	r1, 80193a4 <_reclaim_reent+0xa0>
 8019392:	3504      	adds	r5, #4
 8019394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019396:	2d80      	cmp	r5, #128	; 0x80
 8019398:	68d9      	ldr	r1, [r3, #12]
 801939a:	d1f8      	bne.n	801938e <_reclaim_reent+0x8a>
 801939c:	4620      	mov	r0, r4
 801939e:	f000 fabf 	bl	8019920 <_free_r>
 80193a2:	e7ba      	b.n	801931a <_reclaim_reent+0x16>
 80193a4:	680e      	ldr	r6, [r1, #0]
 80193a6:	4620      	mov	r0, r4
 80193a8:	f000 faba 	bl	8019920 <_free_r>
 80193ac:	4631      	mov	r1, r6
 80193ae:	e7ef      	b.n	8019390 <_reclaim_reent+0x8c>
 80193b0:	2500      	movs	r5, #0
 80193b2:	e7ef      	b.n	8019394 <_reclaim_reent+0x90>
 80193b4:	bd70      	pop	{r4, r5, r6, pc}
 80193b6:	bf00      	nop
 80193b8:	200001bc 	.word	0x200001bc

080193bc <_sbrk_r>:
 80193bc:	b538      	push	{r3, r4, r5, lr}
 80193be:	4d06      	ldr	r5, [pc, #24]	; (80193d8 <_sbrk_r+0x1c>)
 80193c0:	2300      	movs	r3, #0
 80193c2:	4604      	mov	r4, r0
 80193c4:	4608      	mov	r0, r1
 80193c6:	602b      	str	r3, [r5, #0]
 80193c8:	f7e7 ff18 	bl	80011fc <_sbrk>
 80193cc:	1c43      	adds	r3, r0, #1
 80193ce:	d102      	bne.n	80193d6 <_sbrk_r+0x1a>
 80193d0:	682b      	ldr	r3, [r5, #0]
 80193d2:	b103      	cbz	r3, 80193d6 <_sbrk_r+0x1a>
 80193d4:	6023      	str	r3, [r4, #0]
 80193d6:	bd38      	pop	{r3, r4, r5, pc}
 80193d8:	20009588 	.word	0x20009588

080193dc <siprintf>:
 80193dc:	b40e      	push	{r1, r2, r3}
 80193de:	b500      	push	{lr}
 80193e0:	b09c      	sub	sp, #112	; 0x70
 80193e2:	ab1d      	add	r3, sp, #116	; 0x74
 80193e4:	9002      	str	r0, [sp, #8]
 80193e6:	9006      	str	r0, [sp, #24]
 80193e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80193ec:	4809      	ldr	r0, [pc, #36]	; (8019414 <siprintf+0x38>)
 80193ee:	9107      	str	r1, [sp, #28]
 80193f0:	9104      	str	r1, [sp, #16]
 80193f2:	4909      	ldr	r1, [pc, #36]	; (8019418 <siprintf+0x3c>)
 80193f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80193f8:	9105      	str	r1, [sp, #20]
 80193fa:	6800      	ldr	r0, [r0, #0]
 80193fc:	9301      	str	r3, [sp, #4]
 80193fe:	a902      	add	r1, sp, #8
 8019400:	f000 fb36 	bl	8019a70 <_svfiprintf_r>
 8019404:	9b02      	ldr	r3, [sp, #8]
 8019406:	2200      	movs	r2, #0
 8019408:	701a      	strb	r2, [r3, #0]
 801940a:	b01c      	add	sp, #112	; 0x70
 801940c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019410:	b003      	add	sp, #12
 8019412:	4770      	bx	lr
 8019414:	200001bc 	.word	0x200001bc
 8019418:	ffff0208 	.word	0xffff0208

0801941c <__sread>:
 801941c:	b510      	push	{r4, lr}
 801941e:	460c      	mov	r4, r1
 8019420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019424:	f000 ff5a 	bl	801a2dc <_read_r>
 8019428:	2800      	cmp	r0, #0
 801942a:	bfab      	itete	ge
 801942c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801942e:	89a3      	ldrhlt	r3, [r4, #12]
 8019430:	181b      	addge	r3, r3, r0
 8019432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019436:	bfac      	ite	ge
 8019438:	6563      	strge	r3, [r4, #84]	; 0x54
 801943a:	81a3      	strhlt	r3, [r4, #12]
 801943c:	bd10      	pop	{r4, pc}

0801943e <__swrite>:
 801943e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019442:	461f      	mov	r7, r3
 8019444:	898b      	ldrh	r3, [r1, #12]
 8019446:	05db      	lsls	r3, r3, #23
 8019448:	4605      	mov	r5, r0
 801944a:	460c      	mov	r4, r1
 801944c:	4616      	mov	r6, r2
 801944e:	d505      	bpl.n	801945c <__swrite+0x1e>
 8019450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019454:	2302      	movs	r3, #2
 8019456:	2200      	movs	r2, #0
 8019458:	f000 f9de 	bl	8019818 <_lseek_r>
 801945c:	89a3      	ldrh	r3, [r4, #12]
 801945e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019466:	81a3      	strh	r3, [r4, #12]
 8019468:	4632      	mov	r2, r6
 801946a:	463b      	mov	r3, r7
 801946c:	4628      	mov	r0, r5
 801946e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019472:	f000 b87f 	b.w	8019574 <_write_r>

08019476 <__sseek>:
 8019476:	b510      	push	{r4, lr}
 8019478:	460c      	mov	r4, r1
 801947a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801947e:	f000 f9cb 	bl	8019818 <_lseek_r>
 8019482:	1c43      	adds	r3, r0, #1
 8019484:	89a3      	ldrh	r3, [r4, #12]
 8019486:	bf15      	itete	ne
 8019488:	6560      	strne	r0, [r4, #84]	; 0x54
 801948a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801948e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019492:	81a3      	strheq	r3, [r4, #12]
 8019494:	bf18      	it	ne
 8019496:	81a3      	strhne	r3, [r4, #12]
 8019498:	bd10      	pop	{r4, pc}

0801949a <__sclose>:
 801949a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801949e:	f000 b8e9 	b.w	8019674 <_close_r>

080194a2 <strstr>:
 80194a2:	780a      	ldrb	r2, [r1, #0]
 80194a4:	b570      	push	{r4, r5, r6, lr}
 80194a6:	b96a      	cbnz	r2, 80194c4 <strstr+0x22>
 80194a8:	bd70      	pop	{r4, r5, r6, pc}
 80194aa:	429a      	cmp	r2, r3
 80194ac:	d109      	bne.n	80194c2 <strstr+0x20>
 80194ae:	460c      	mov	r4, r1
 80194b0:	4605      	mov	r5, r0
 80194b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d0f6      	beq.n	80194a8 <strstr+0x6>
 80194ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80194be:	429e      	cmp	r6, r3
 80194c0:	d0f7      	beq.n	80194b2 <strstr+0x10>
 80194c2:	3001      	adds	r0, #1
 80194c4:	7803      	ldrb	r3, [r0, #0]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d1ef      	bne.n	80194aa <strstr+0x8>
 80194ca:	4618      	mov	r0, r3
 80194cc:	e7ec      	b.n	80194a8 <strstr+0x6>
	...

080194d0 <__swbuf_r>:
 80194d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194d2:	460e      	mov	r6, r1
 80194d4:	4614      	mov	r4, r2
 80194d6:	4605      	mov	r5, r0
 80194d8:	b118      	cbz	r0, 80194e2 <__swbuf_r+0x12>
 80194da:	6983      	ldr	r3, [r0, #24]
 80194dc:	b90b      	cbnz	r3, 80194e2 <__swbuf_r+0x12>
 80194de:	f7ff fcd5 	bl	8018e8c <__sinit>
 80194e2:	4b21      	ldr	r3, [pc, #132]	; (8019568 <__swbuf_r+0x98>)
 80194e4:	429c      	cmp	r4, r3
 80194e6:	d12b      	bne.n	8019540 <__swbuf_r+0x70>
 80194e8:	686c      	ldr	r4, [r5, #4]
 80194ea:	69a3      	ldr	r3, [r4, #24]
 80194ec:	60a3      	str	r3, [r4, #8]
 80194ee:	89a3      	ldrh	r3, [r4, #12]
 80194f0:	071a      	lsls	r2, r3, #28
 80194f2:	d52f      	bpl.n	8019554 <__swbuf_r+0x84>
 80194f4:	6923      	ldr	r3, [r4, #16]
 80194f6:	b36b      	cbz	r3, 8019554 <__swbuf_r+0x84>
 80194f8:	6923      	ldr	r3, [r4, #16]
 80194fa:	6820      	ldr	r0, [r4, #0]
 80194fc:	1ac0      	subs	r0, r0, r3
 80194fe:	6963      	ldr	r3, [r4, #20]
 8019500:	b2f6      	uxtb	r6, r6
 8019502:	4283      	cmp	r3, r0
 8019504:	4637      	mov	r7, r6
 8019506:	dc04      	bgt.n	8019512 <__swbuf_r+0x42>
 8019508:	4621      	mov	r1, r4
 801950a:	4628      	mov	r0, r5
 801950c:	f000 f948 	bl	80197a0 <_fflush_r>
 8019510:	bb30      	cbnz	r0, 8019560 <__swbuf_r+0x90>
 8019512:	68a3      	ldr	r3, [r4, #8]
 8019514:	3b01      	subs	r3, #1
 8019516:	60a3      	str	r3, [r4, #8]
 8019518:	6823      	ldr	r3, [r4, #0]
 801951a:	1c5a      	adds	r2, r3, #1
 801951c:	6022      	str	r2, [r4, #0]
 801951e:	701e      	strb	r6, [r3, #0]
 8019520:	6963      	ldr	r3, [r4, #20]
 8019522:	3001      	adds	r0, #1
 8019524:	4283      	cmp	r3, r0
 8019526:	d004      	beq.n	8019532 <__swbuf_r+0x62>
 8019528:	89a3      	ldrh	r3, [r4, #12]
 801952a:	07db      	lsls	r3, r3, #31
 801952c:	d506      	bpl.n	801953c <__swbuf_r+0x6c>
 801952e:	2e0a      	cmp	r6, #10
 8019530:	d104      	bne.n	801953c <__swbuf_r+0x6c>
 8019532:	4621      	mov	r1, r4
 8019534:	4628      	mov	r0, r5
 8019536:	f000 f933 	bl	80197a0 <_fflush_r>
 801953a:	b988      	cbnz	r0, 8019560 <__swbuf_r+0x90>
 801953c:	4638      	mov	r0, r7
 801953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019540:	4b0a      	ldr	r3, [pc, #40]	; (801956c <__swbuf_r+0x9c>)
 8019542:	429c      	cmp	r4, r3
 8019544:	d101      	bne.n	801954a <__swbuf_r+0x7a>
 8019546:	68ac      	ldr	r4, [r5, #8]
 8019548:	e7cf      	b.n	80194ea <__swbuf_r+0x1a>
 801954a:	4b09      	ldr	r3, [pc, #36]	; (8019570 <__swbuf_r+0xa0>)
 801954c:	429c      	cmp	r4, r3
 801954e:	bf08      	it	eq
 8019550:	68ec      	ldreq	r4, [r5, #12]
 8019552:	e7ca      	b.n	80194ea <__swbuf_r+0x1a>
 8019554:	4621      	mov	r1, r4
 8019556:	4628      	mov	r0, r5
 8019558:	f000 f81e 	bl	8019598 <__swsetup_r>
 801955c:	2800      	cmp	r0, #0
 801955e:	d0cb      	beq.n	80194f8 <__swbuf_r+0x28>
 8019560:	f04f 37ff 	mov.w	r7, #4294967295
 8019564:	e7ea      	b.n	801953c <__swbuf_r+0x6c>
 8019566:	bf00      	nop
 8019568:	0801cbe0 	.word	0x0801cbe0
 801956c:	0801cc00 	.word	0x0801cc00
 8019570:	0801cbc0 	.word	0x0801cbc0

08019574 <_write_r>:
 8019574:	b538      	push	{r3, r4, r5, lr}
 8019576:	4d07      	ldr	r5, [pc, #28]	; (8019594 <_write_r+0x20>)
 8019578:	4604      	mov	r4, r0
 801957a:	4608      	mov	r0, r1
 801957c:	4611      	mov	r1, r2
 801957e:	2200      	movs	r2, #0
 8019580:	602a      	str	r2, [r5, #0]
 8019582:	461a      	mov	r2, r3
 8019584:	f7e7 fdea 	bl	800115c <_write>
 8019588:	1c43      	adds	r3, r0, #1
 801958a:	d102      	bne.n	8019592 <_write_r+0x1e>
 801958c:	682b      	ldr	r3, [r5, #0]
 801958e:	b103      	cbz	r3, 8019592 <_write_r+0x1e>
 8019590:	6023      	str	r3, [r4, #0]
 8019592:	bd38      	pop	{r3, r4, r5, pc}
 8019594:	20009588 	.word	0x20009588

08019598 <__swsetup_r>:
 8019598:	4b32      	ldr	r3, [pc, #200]	; (8019664 <__swsetup_r+0xcc>)
 801959a:	b570      	push	{r4, r5, r6, lr}
 801959c:	681d      	ldr	r5, [r3, #0]
 801959e:	4606      	mov	r6, r0
 80195a0:	460c      	mov	r4, r1
 80195a2:	b125      	cbz	r5, 80195ae <__swsetup_r+0x16>
 80195a4:	69ab      	ldr	r3, [r5, #24]
 80195a6:	b913      	cbnz	r3, 80195ae <__swsetup_r+0x16>
 80195a8:	4628      	mov	r0, r5
 80195aa:	f7ff fc6f 	bl	8018e8c <__sinit>
 80195ae:	4b2e      	ldr	r3, [pc, #184]	; (8019668 <__swsetup_r+0xd0>)
 80195b0:	429c      	cmp	r4, r3
 80195b2:	d10f      	bne.n	80195d4 <__swsetup_r+0x3c>
 80195b4:	686c      	ldr	r4, [r5, #4]
 80195b6:	89a3      	ldrh	r3, [r4, #12]
 80195b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80195bc:	0719      	lsls	r1, r3, #28
 80195be:	d42c      	bmi.n	801961a <__swsetup_r+0x82>
 80195c0:	06dd      	lsls	r5, r3, #27
 80195c2:	d411      	bmi.n	80195e8 <__swsetup_r+0x50>
 80195c4:	2309      	movs	r3, #9
 80195c6:	6033      	str	r3, [r6, #0]
 80195c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80195cc:	81a3      	strh	r3, [r4, #12]
 80195ce:	f04f 30ff 	mov.w	r0, #4294967295
 80195d2:	e03e      	b.n	8019652 <__swsetup_r+0xba>
 80195d4:	4b25      	ldr	r3, [pc, #148]	; (801966c <__swsetup_r+0xd4>)
 80195d6:	429c      	cmp	r4, r3
 80195d8:	d101      	bne.n	80195de <__swsetup_r+0x46>
 80195da:	68ac      	ldr	r4, [r5, #8]
 80195dc:	e7eb      	b.n	80195b6 <__swsetup_r+0x1e>
 80195de:	4b24      	ldr	r3, [pc, #144]	; (8019670 <__swsetup_r+0xd8>)
 80195e0:	429c      	cmp	r4, r3
 80195e2:	bf08      	it	eq
 80195e4:	68ec      	ldreq	r4, [r5, #12]
 80195e6:	e7e6      	b.n	80195b6 <__swsetup_r+0x1e>
 80195e8:	0758      	lsls	r0, r3, #29
 80195ea:	d512      	bpl.n	8019612 <__swsetup_r+0x7a>
 80195ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195ee:	b141      	cbz	r1, 8019602 <__swsetup_r+0x6a>
 80195f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195f4:	4299      	cmp	r1, r3
 80195f6:	d002      	beq.n	80195fe <__swsetup_r+0x66>
 80195f8:	4630      	mov	r0, r6
 80195fa:	f000 f991 	bl	8019920 <_free_r>
 80195fe:	2300      	movs	r3, #0
 8019600:	6363      	str	r3, [r4, #52]	; 0x34
 8019602:	89a3      	ldrh	r3, [r4, #12]
 8019604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019608:	81a3      	strh	r3, [r4, #12]
 801960a:	2300      	movs	r3, #0
 801960c:	6063      	str	r3, [r4, #4]
 801960e:	6923      	ldr	r3, [r4, #16]
 8019610:	6023      	str	r3, [r4, #0]
 8019612:	89a3      	ldrh	r3, [r4, #12]
 8019614:	f043 0308 	orr.w	r3, r3, #8
 8019618:	81a3      	strh	r3, [r4, #12]
 801961a:	6923      	ldr	r3, [r4, #16]
 801961c:	b94b      	cbnz	r3, 8019632 <__swsetup_r+0x9a>
 801961e:	89a3      	ldrh	r3, [r4, #12]
 8019620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019628:	d003      	beq.n	8019632 <__swsetup_r+0x9a>
 801962a:	4621      	mov	r1, r4
 801962c:	4630      	mov	r0, r6
 801962e:	f000 f92b 	bl	8019888 <__smakebuf_r>
 8019632:	89a0      	ldrh	r0, [r4, #12]
 8019634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019638:	f010 0301 	ands.w	r3, r0, #1
 801963c:	d00a      	beq.n	8019654 <__swsetup_r+0xbc>
 801963e:	2300      	movs	r3, #0
 8019640:	60a3      	str	r3, [r4, #8]
 8019642:	6963      	ldr	r3, [r4, #20]
 8019644:	425b      	negs	r3, r3
 8019646:	61a3      	str	r3, [r4, #24]
 8019648:	6923      	ldr	r3, [r4, #16]
 801964a:	b943      	cbnz	r3, 801965e <__swsetup_r+0xc6>
 801964c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019650:	d1ba      	bne.n	80195c8 <__swsetup_r+0x30>
 8019652:	bd70      	pop	{r4, r5, r6, pc}
 8019654:	0781      	lsls	r1, r0, #30
 8019656:	bf58      	it	pl
 8019658:	6963      	ldrpl	r3, [r4, #20]
 801965a:	60a3      	str	r3, [r4, #8]
 801965c:	e7f4      	b.n	8019648 <__swsetup_r+0xb0>
 801965e:	2000      	movs	r0, #0
 8019660:	e7f7      	b.n	8019652 <__swsetup_r+0xba>
 8019662:	bf00      	nop
 8019664:	200001bc 	.word	0x200001bc
 8019668:	0801cbe0 	.word	0x0801cbe0
 801966c:	0801cc00 	.word	0x0801cc00
 8019670:	0801cbc0 	.word	0x0801cbc0

08019674 <_close_r>:
 8019674:	b538      	push	{r3, r4, r5, lr}
 8019676:	4d06      	ldr	r5, [pc, #24]	; (8019690 <_close_r+0x1c>)
 8019678:	2300      	movs	r3, #0
 801967a:	4604      	mov	r4, r0
 801967c:	4608      	mov	r0, r1
 801967e:	602b      	str	r3, [r5, #0]
 8019680:	f7e7 fd88 	bl	8001194 <_close>
 8019684:	1c43      	adds	r3, r0, #1
 8019686:	d102      	bne.n	801968e <_close_r+0x1a>
 8019688:	682b      	ldr	r3, [r5, #0]
 801968a:	b103      	cbz	r3, 801968e <_close_r+0x1a>
 801968c:	6023      	str	r3, [r4, #0]
 801968e:	bd38      	pop	{r3, r4, r5, pc}
 8019690:	20009588 	.word	0x20009588

08019694 <__sflush_r>:
 8019694:	898a      	ldrh	r2, [r1, #12]
 8019696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801969a:	4605      	mov	r5, r0
 801969c:	0710      	lsls	r0, r2, #28
 801969e:	460c      	mov	r4, r1
 80196a0:	d458      	bmi.n	8019754 <__sflush_r+0xc0>
 80196a2:	684b      	ldr	r3, [r1, #4]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	dc05      	bgt.n	80196b4 <__sflush_r+0x20>
 80196a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	dc02      	bgt.n	80196b4 <__sflush_r+0x20>
 80196ae:	2000      	movs	r0, #0
 80196b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80196b6:	2e00      	cmp	r6, #0
 80196b8:	d0f9      	beq.n	80196ae <__sflush_r+0x1a>
 80196ba:	2300      	movs	r3, #0
 80196bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80196c0:	682f      	ldr	r7, [r5, #0]
 80196c2:	602b      	str	r3, [r5, #0]
 80196c4:	d032      	beq.n	801972c <__sflush_r+0x98>
 80196c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80196c8:	89a3      	ldrh	r3, [r4, #12]
 80196ca:	075a      	lsls	r2, r3, #29
 80196cc:	d505      	bpl.n	80196da <__sflush_r+0x46>
 80196ce:	6863      	ldr	r3, [r4, #4]
 80196d0:	1ac0      	subs	r0, r0, r3
 80196d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80196d4:	b10b      	cbz	r3, 80196da <__sflush_r+0x46>
 80196d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80196d8:	1ac0      	subs	r0, r0, r3
 80196da:	2300      	movs	r3, #0
 80196dc:	4602      	mov	r2, r0
 80196de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80196e0:	6a21      	ldr	r1, [r4, #32]
 80196e2:	4628      	mov	r0, r5
 80196e4:	47b0      	blx	r6
 80196e6:	1c43      	adds	r3, r0, #1
 80196e8:	89a3      	ldrh	r3, [r4, #12]
 80196ea:	d106      	bne.n	80196fa <__sflush_r+0x66>
 80196ec:	6829      	ldr	r1, [r5, #0]
 80196ee:	291d      	cmp	r1, #29
 80196f0:	d82c      	bhi.n	801974c <__sflush_r+0xb8>
 80196f2:	4a2a      	ldr	r2, [pc, #168]	; (801979c <__sflush_r+0x108>)
 80196f4:	40ca      	lsrs	r2, r1
 80196f6:	07d6      	lsls	r6, r2, #31
 80196f8:	d528      	bpl.n	801974c <__sflush_r+0xb8>
 80196fa:	2200      	movs	r2, #0
 80196fc:	6062      	str	r2, [r4, #4]
 80196fe:	04d9      	lsls	r1, r3, #19
 8019700:	6922      	ldr	r2, [r4, #16]
 8019702:	6022      	str	r2, [r4, #0]
 8019704:	d504      	bpl.n	8019710 <__sflush_r+0x7c>
 8019706:	1c42      	adds	r2, r0, #1
 8019708:	d101      	bne.n	801970e <__sflush_r+0x7a>
 801970a:	682b      	ldr	r3, [r5, #0]
 801970c:	b903      	cbnz	r3, 8019710 <__sflush_r+0x7c>
 801970e:	6560      	str	r0, [r4, #84]	; 0x54
 8019710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019712:	602f      	str	r7, [r5, #0]
 8019714:	2900      	cmp	r1, #0
 8019716:	d0ca      	beq.n	80196ae <__sflush_r+0x1a>
 8019718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801971c:	4299      	cmp	r1, r3
 801971e:	d002      	beq.n	8019726 <__sflush_r+0x92>
 8019720:	4628      	mov	r0, r5
 8019722:	f000 f8fd 	bl	8019920 <_free_r>
 8019726:	2000      	movs	r0, #0
 8019728:	6360      	str	r0, [r4, #52]	; 0x34
 801972a:	e7c1      	b.n	80196b0 <__sflush_r+0x1c>
 801972c:	6a21      	ldr	r1, [r4, #32]
 801972e:	2301      	movs	r3, #1
 8019730:	4628      	mov	r0, r5
 8019732:	47b0      	blx	r6
 8019734:	1c41      	adds	r1, r0, #1
 8019736:	d1c7      	bne.n	80196c8 <__sflush_r+0x34>
 8019738:	682b      	ldr	r3, [r5, #0]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d0c4      	beq.n	80196c8 <__sflush_r+0x34>
 801973e:	2b1d      	cmp	r3, #29
 8019740:	d001      	beq.n	8019746 <__sflush_r+0xb2>
 8019742:	2b16      	cmp	r3, #22
 8019744:	d101      	bne.n	801974a <__sflush_r+0xb6>
 8019746:	602f      	str	r7, [r5, #0]
 8019748:	e7b1      	b.n	80196ae <__sflush_r+0x1a>
 801974a:	89a3      	ldrh	r3, [r4, #12]
 801974c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019750:	81a3      	strh	r3, [r4, #12]
 8019752:	e7ad      	b.n	80196b0 <__sflush_r+0x1c>
 8019754:	690f      	ldr	r7, [r1, #16]
 8019756:	2f00      	cmp	r7, #0
 8019758:	d0a9      	beq.n	80196ae <__sflush_r+0x1a>
 801975a:	0793      	lsls	r3, r2, #30
 801975c:	680e      	ldr	r6, [r1, #0]
 801975e:	bf08      	it	eq
 8019760:	694b      	ldreq	r3, [r1, #20]
 8019762:	600f      	str	r7, [r1, #0]
 8019764:	bf18      	it	ne
 8019766:	2300      	movne	r3, #0
 8019768:	eba6 0807 	sub.w	r8, r6, r7
 801976c:	608b      	str	r3, [r1, #8]
 801976e:	f1b8 0f00 	cmp.w	r8, #0
 8019772:	dd9c      	ble.n	80196ae <__sflush_r+0x1a>
 8019774:	6a21      	ldr	r1, [r4, #32]
 8019776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019778:	4643      	mov	r3, r8
 801977a:	463a      	mov	r2, r7
 801977c:	4628      	mov	r0, r5
 801977e:	47b0      	blx	r6
 8019780:	2800      	cmp	r0, #0
 8019782:	dc06      	bgt.n	8019792 <__sflush_r+0xfe>
 8019784:	89a3      	ldrh	r3, [r4, #12]
 8019786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801978a:	81a3      	strh	r3, [r4, #12]
 801978c:	f04f 30ff 	mov.w	r0, #4294967295
 8019790:	e78e      	b.n	80196b0 <__sflush_r+0x1c>
 8019792:	4407      	add	r7, r0
 8019794:	eba8 0800 	sub.w	r8, r8, r0
 8019798:	e7e9      	b.n	801976e <__sflush_r+0xda>
 801979a:	bf00      	nop
 801979c:	20400001 	.word	0x20400001

080197a0 <_fflush_r>:
 80197a0:	b538      	push	{r3, r4, r5, lr}
 80197a2:	690b      	ldr	r3, [r1, #16]
 80197a4:	4605      	mov	r5, r0
 80197a6:	460c      	mov	r4, r1
 80197a8:	b913      	cbnz	r3, 80197b0 <_fflush_r+0x10>
 80197aa:	2500      	movs	r5, #0
 80197ac:	4628      	mov	r0, r5
 80197ae:	bd38      	pop	{r3, r4, r5, pc}
 80197b0:	b118      	cbz	r0, 80197ba <_fflush_r+0x1a>
 80197b2:	6983      	ldr	r3, [r0, #24]
 80197b4:	b90b      	cbnz	r3, 80197ba <_fflush_r+0x1a>
 80197b6:	f7ff fb69 	bl	8018e8c <__sinit>
 80197ba:	4b14      	ldr	r3, [pc, #80]	; (801980c <_fflush_r+0x6c>)
 80197bc:	429c      	cmp	r4, r3
 80197be:	d11b      	bne.n	80197f8 <_fflush_r+0x58>
 80197c0:	686c      	ldr	r4, [r5, #4]
 80197c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d0ef      	beq.n	80197aa <_fflush_r+0xa>
 80197ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80197cc:	07d0      	lsls	r0, r2, #31
 80197ce:	d404      	bmi.n	80197da <_fflush_r+0x3a>
 80197d0:	0599      	lsls	r1, r3, #22
 80197d2:	d402      	bmi.n	80197da <_fflush_r+0x3a>
 80197d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197d6:	f7ff fc1c 	bl	8019012 <__retarget_lock_acquire_recursive>
 80197da:	4628      	mov	r0, r5
 80197dc:	4621      	mov	r1, r4
 80197de:	f7ff ff59 	bl	8019694 <__sflush_r>
 80197e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80197e4:	07da      	lsls	r2, r3, #31
 80197e6:	4605      	mov	r5, r0
 80197e8:	d4e0      	bmi.n	80197ac <_fflush_r+0xc>
 80197ea:	89a3      	ldrh	r3, [r4, #12]
 80197ec:	059b      	lsls	r3, r3, #22
 80197ee:	d4dd      	bmi.n	80197ac <_fflush_r+0xc>
 80197f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197f2:	f7ff fc0f 	bl	8019014 <__retarget_lock_release_recursive>
 80197f6:	e7d9      	b.n	80197ac <_fflush_r+0xc>
 80197f8:	4b05      	ldr	r3, [pc, #20]	; (8019810 <_fflush_r+0x70>)
 80197fa:	429c      	cmp	r4, r3
 80197fc:	d101      	bne.n	8019802 <_fflush_r+0x62>
 80197fe:	68ac      	ldr	r4, [r5, #8]
 8019800:	e7df      	b.n	80197c2 <_fflush_r+0x22>
 8019802:	4b04      	ldr	r3, [pc, #16]	; (8019814 <_fflush_r+0x74>)
 8019804:	429c      	cmp	r4, r3
 8019806:	bf08      	it	eq
 8019808:	68ec      	ldreq	r4, [r5, #12]
 801980a:	e7da      	b.n	80197c2 <_fflush_r+0x22>
 801980c:	0801cbe0 	.word	0x0801cbe0
 8019810:	0801cc00 	.word	0x0801cc00
 8019814:	0801cbc0 	.word	0x0801cbc0

08019818 <_lseek_r>:
 8019818:	b538      	push	{r3, r4, r5, lr}
 801981a:	4d07      	ldr	r5, [pc, #28]	; (8019838 <_lseek_r+0x20>)
 801981c:	4604      	mov	r4, r0
 801981e:	4608      	mov	r0, r1
 8019820:	4611      	mov	r1, r2
 8019822:	2200      	movs	r2, #0
 8019824:	602a      	str	r2, [r5, #0]
 8019826:	461a      	mov	r2, r3
 8019828:	f7e7 fcdb 	bl	80011e2 <_lseek>
 801982c:	1c43      	adds	r3, r0, #1
 801982e:	d102      	bne.n	8019836 <_lseek_r+0x1e>
 8019830:	682b      	ldr	r3, [r5, #0]
 8019832:	b103      	cbz	r3, 8019836 <_lseek_r+0x1e>
 8019834:	6023      	str	r3, [r4, #0]
 8019836:	bd38      	pop	{r3, r4, r5, pc}
 8019838:	20009588 	.word	0x20009588

0801983c <__swhatbuf_r>:
 801983c:	b570      	push	{r4, r5, r6, lr}
 801983e:	460e      	mov	r6, r1
 8019840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019844:	2900      	cmp	r1, #0
 8019846:	b096      	sub	sp, #88	; 0x58
 8019848:	4614      	mov	r4, r2
 801984a:	461d      	mov	r5, r3
 801984c:	da08      	bge.n	8019860 <__swhatbuf_r+0x24>
 801984e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019852:	2200      	movs	r2, #0
 8019854:	602a      	str	r2, [r5, #0]
 8019856:	061a      	lsls	r2, r3, #24
 8019858:	d410      	bmi.n	801987c <__swhatbuf_r+0x40>
 801985a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801985e:	e00e      	b.n	801987e <__swhatbuf_r+0x42>
 8019860:	466a      	mov	r2, sp
 8019862:	f000 fd4d 	bl	801a300 <_fstat_r>
 8019866:	2800      	cmp	r0, #0
 8019868:	dbf1      	blt.n	801984e <__swhatbuf_r+0x12>
 801986a:	9a01      	ldr	r2, [sp, #4]
 801986c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019870:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019874:	425a      	negs	r2, r3
 8019876:	415a      	adcs	r2, r3
 8019878:	602a      	str	r2, [r5, #0]
 801987a:	e7ee      	b.n	801985a <__swhatbuf_r+0x1e>
 801987c:	2340      	movs	r3, #64	; 0x40
 801987e:	2000      	movs	r0, #0
 8019880:	6023      	str	r3, [r4, #0]
 8019882:	b016      	add	sp, #88	; 0x58
 8019884:	bd70      	pop	{r4, r5, r6, pc}
	...

08019888 <__smakebuf_r>:
 8019888:	898b      	ldrh	r3, [r1, #12]
 801988a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801988c:	079d      	lsls	r5, r3, #30
 801988e:	4606      	mov	r6, r0
 8019890:	460c      	mov	r4, r1
 8019892:	d507      	bpl.n	80198a4 <__smakebuf_r+0x1c>
 8019894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019898:	6023      	str	r3, [r4, #0]
 801989a:	6123      	str	r3, [r4, #16]
 801989c:	2301      	movs	r3, #1
 801989e:	6163      	str	r3, [r4, #20]
 80198a0:	b002      	add	sp, #8
 80198a2:	bd70      	pop	{r4, r5, r6, pc}
 80198a4:	ab01      	add	r3, sp, #4
 80198a6:	466a      	mov	r2, sp
 80198a8:	f7ff ffc8 	bl	801983c <__swhatbuf_r>
 80198ac:	9900      	ldr	r1, [sp, #0]
 80198ae:	4605      	mov	r5, r0
 80198b0:	4630      	mov	r0, r6
 80198b2:	f7ff fc01 	bl	80190b8 <_malloc_r>
 80198b6:	b948      	cbnz	r0, 80198cc <__smakebuf_r+0x44>
 80198b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198bc:	059a      	lsls	r2, r3, #22
 80198be:	d4ef      	bmi.n	80198a0 <__smakebuf_r+0x18>
 80198c0:	f023 0303 	bic.w	r3, r3, #3
 80198c4:	f043 0302 	orr.w	r3, r3, #2
 80198c8:	81a3      	strh	r3, [r4, #12]
 80198ca:	e7e3      	b.n	8019894 <__smakebuf_r+0xc>
 80198cc:	4b0d      	ldr	r3, [pc, #52]	; (8019904 <__smakebuf_r+0x7c>)
 80198ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80198d0:	89a3      	ldrh	r3, [r4, #12]
 80198d2:	6020      	str	r0, [r4, #0]
 80198d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198d8:	81a3      	strh	r3, [r4, #12]
 80198da:	9b00      	ldr	r3, [sp, #0]
 80198dc:	6163      	str	r3, [r4, #20]
 80198de:	9b01      	ldr	r3, [sp, #4]
 80198e0:	6120      	str	r0, [r4, #16]
 80198e2:	b15b      	cbz	r3, 80198fc <__smakebuf_r+0x74>
 80198e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80198e8:	4630      	mov	r0, r6
 80198ea:	f000 fd1b 	bl	801a324 <_isatty_r>
 80198ee:	b128      	cbz	r0, 80198fc <__smakebuf_r+0x74>
 80198f0:	89a3      	ldrh	r3, [r4, #12]
 80198f2:	f023 0303 	bic.w	r3, r3, #3
 80198f6:	f043 0301 	orr.w	r3, r3, #1
 80198fa:	81a3      	strh	r3, [r4, #12]
 80198fc:	89a0      	ldrh	r0, [r4, #12]
 80198fe:	4305      	orrs	r5, r0
 8019900:	81a5      	strh	r5, [r4, #12]
 8019902:	e7cd      	b.n	80198a0 <__smakebuf_r+0x18>
 8019904:	08018e25 	.word	0x08018e25

08019908 <__malloc_lock>:
 8019908:	4801      	ldr	r0, [pc, #4]	; (8019910 <__malloc_lock+0x8>)
 801990a:	f7ff bb82 	b.w	8019012 <__retarget_lock_acquire_recursive>
 801990e:	bf00      	nop
 8019910:	2000957b 	.word	0x2000957b

08019914 <__malloc_unlock>:
 8019914:	4801      	ldr	r0, [pc, #4]	; (801991c <__malloc_unlock+0x8>)
 8019916:	f7ff bb7d 	b.w	8019014 <__retarget_lock_release_recursive>
 801991a:	bf00      	nop
 801991c:	2000957b 	.word	0x2000957b

08019920 <_free_r>:
 8019920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019922:	2900      	cmp	r1, #0
 8019924:	d044      	beq.n	80199b0 <_free_r+0x90>
 8019926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801992a:	9001      	str	r0, [sp, #4]
 801992c:	2b00      	cmp	r3, #0
 801992e:	f1a1 0404 	sub.w	r4, r1, #4
 8019932:	bfb8      	it	lt
 8019934:	18e4      	addlt	r4, r4, r3
 8019936:	f7ff ffe7 	bl	8019908 <__malloc_lock>
 801993a:	4a1e      	ldr	r2, [pc, #120]	; (80199b4 <_free_r+0x94>)
 801993c:	9801      	ldr	r0, [sp, #4]
 801993e:	6813      	ldr	r3, [r2, #0]
 8019940:	b933      	cbnz	r3, 8019950 <_free_r+0x30>
 8019942:	6063      	str	r3, [r4, #4]
 8019944:	6014      	str	r4, [r2, #0]
 8019946:	b003      	add	sp, #12
 8019948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801994c:	f7ff bfe2 	b.w	8019914 <__malloc_unlock>
 8019950:	42a3      	cmp	r3, r4
 8019952:	d908      	bls.n	8019966 <_free_r+0x46>
 8019954:	6825      	ldr	r5, [r4, #0]
 8019956:	1961      	adds	r1, r4, r5
 8019958:	428b      	cmp	r3, r1
 801995a:	bf01      	itttt	eq
 801995c:	6819      	ldreq	r1, [r3, #0]
 801995e:	685b      	ldreq	r3, [r3, #4]
 8019960:	1949      	addeq	r1, r1, r5
 8019962:	6021      	streq	r1, [r4, #0]
 8019964:	e7ed      	b.n	8019942 <_free_r+0x22>
 8019966:	461a      	mov	r2, r3
 8019968:	685b      	ldr	r3, [r3, #4]
 801996a:	b10b      	cbz	r3, 8019970 <_free_r+0x50>
 801996c:	42a3      	cmp	r3, r4
 801996e:	d9fa      	bls.n	8019966 <_free_r+0x46>
 8019970:	6811      	ldr	r1, [r2, #0]
 8019972:	1855      	adds	r5, r2, r1
 8019974:	42a5      	cmp	r5, r4
 8019976:	d10b      	bne.n	8019990 <_free_r+0x70>
 8019978:	6824      	ldr	r4, [r4, #0]
 801997a:	4421      	add	r1, r4
 801997c:	1854      	adds	r4, r2, r1
 801997e:	42a3      	cmp	r3, r4
 8019980:	6011      	str	r1, [r2, #0]
 8019982:	d1e0      	bne.n	8019946 <_free_r+0x26>
 8019984:	681c      	ldr	r4, [r3, #0]
 8019986:	685b      	ldr	r3, [r3, #4]
 8019988:	6053      	str	r3, [r2, #4]
 801998a:	4421      	add	r1, r4
 801998c:	6011      	str	r1, [r2, #0]
 801998e:	e7da      	b.n	8019946 <_free_r+0x26>
 8019990:	d902      	bls.n	8019998 <_free_r+0x78>
 8019992:	230c      	movs	r3, #12
 8019994:	6003      	str	r3, [r0, #0]
 8019996:	e7d6      	b.n	8019946 <_free_r+0x26>
 8019998:	6825      	ldr	r5, [r4, #0]
 801999a:	1961      	adds	r1, r4, r5
 801999c:	428b      	cmp	r3, r1
 801999e:	bf04      	itt	eq
 80199a0:	6819      	ldreq	r1, [r3, #0]
 80199a2:	685b      	ldreq	r3, [r3, #4]
 80199a4:	6063      	str	r3, [r4, #4]
 80199a6:	bf04      	itt	eq
 80199a8:	1949      	addeq	r1, r1, r5
 80199aa:	6021      	streq	r1, [r4, #0]
 80199ac:	6054      	str	r4, [r2, #4]
 80199ae:	e7ca      	b.n	8019946 <_free_r+0x26>
 80199b0:	b003      	add	sp, #12
 80199b2:	bd30      	pop	{r4, r5, pc}
 80199b4:	20009580 	.word	0x20009580

080199b8 <__ssputs_r>:
 80199b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199bc:	688e      	ldr	r6, [r1, #8]
 80199be:	429e      	cmp	r6, r3
 80199c0:	4682      	mov	sl, r0
 80199c2:	460c      	mov	r4, r1
 80199c4:	4690      	mov	r8, r2
 80199c6:	461f      	mov	r7, r3
 80199c8:	d838      	bhi.n	8019a3c <__ssputs_r+0x84>
 80199ca:	898a      	ldrh	r2, [r1, #12]
 80199cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80199d0:	d032      	beq.n	8019a38 <__ssputs_r+0x80>
 80199d2:	6825      	ldr	r5, [r4, #0]
 80199d4:	6909      	ldr	r1, [r1, #16]
 80199d6:	eba5 0901 	sub.w	r9, r5, r1
 80199da:	6965      	ldr	r5, [r4, #20]
 80199dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80199e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80199e4:	3301      	adds	r3, #1
 80199e6:	444b      	add	r3, r9
 80199e8:	106d      	asrs	r5, r5, #1
 80199ea:	429d      	cmp	r5, r3
 80199ec:	bf38      	it	cc
 80199ee:	461d      	movcc	r5, r3
 80199f0:	0553      	lsls	r3, r2, #21
 80199f2:	d531      	bpl.n	8019a58 <__ssputs_r+0xa0>
 80199f4:	4629      	mov	r1, r5
 80199f6:	f7ff fb5f 	bl	80190b8 <_malloc_r>
 80199fa:	4606      	mov	r6, r0
 80199fc:	b950      	cbnz	r0, 8019a14 <__ssputs_r+0x5c>
 80199fe:	230c      	movs	r3, #12
 8019a00:	f8ca 3000 	str.w	r3, [sl]
 8019a04:	89a3      	ldrh	r3, [r4, #12]
 8019a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a0a:	81a3      	strh	r3, [r4, #12]
 8019a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8019a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a14:	6921      	ldr	r1, [r4, #16]
 8019a16:	464a      	mov	r2, r9
 8019a18:	f7ff fafd 	bl	8019016 <memcpy>
 8019a1c:	89a3      	ldrh	r3, [r4, #12]
 8019a1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a26:	81a3      	strh	r3, [r4, #12]
 8019a28:	6126      	str	r6, [r4, #16]
 8019a2a:	6165      	str	r5, [r4, #20]
 8019a2c:	444e      	add	r6, r9
 8019a2e:	eba5 0509 	sub.w	r5, r5, r9
 8019a32:	6026      	str	r6, [r4, #0]
 8019a34:	60a5      	str	r5, [r4, #8]
 8019a36:	463e      	mov	r6, r7
 8019a38:	42be      	cmp	r6, r7
 8019a3a:	d900      	bls.n	8019a3e <__ssputs_r+0x86>
 8019a3c:	463e      	mov	r6, r7
 8019a3e:	6820      	ldr	r0, [r4, #0]
 8019a40:	4632      	mov	r2, r6
 8019a42:	4641      	mov	r1, r8
 8019a44:	f7ff faf5 	bl	8019032 <memmove>
 8019a48:	68a3      	ldr	r3, [r4, #8]
 8019a4a:	1b9b      	subs	r3, r3, r6
 8019a4c:	60a3      	str	r3, [r4, #8]
 8019a4e:	6823      	ldr	r3, [r4, #0]
 8019a50:	4433      	add	r3, r6
 8019a52:	6023      	str	r3, [r4, #0]
 8019a54:	2000      	movs	r0, #0
 8019a56:	e7db      	b.n	8019a10 <__ssputs_r+0x58>
 8019a58:	462a      	mov	r2, r5
 8019a5a:	f000 fc73 	bl	801a344 <_realloc_r>
 8019a5e:	4606      	mov	r6, r0
 8019a60:	2800      	cmp	r0, #0
 8019a62:	d1e1      	bne.n	8019a28 <__ssputs_r+0x70>
 8019a64:	6921      	ldr	r1, [r4, #16]
 8019a66:	4650      	mov	r0, sl
 8019a68:	f7ff ff5a 	bl	8019920 <_free_r>
 8019a6c:	e7c7      	b.n	80199fe <__ssputs_r+0x46>
	...

08019a70 <_svfiprintf_r>:
 8019a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a74:	4698      	mov	r8, r3
 8019a76:	898b      	ldrh	r3, [r1, #12]
 8019a78:	061b      	lsls	r3, r3, #24
 8019a7a:	b09d      	sub	sp, #116	; 0x74
 8019a7c:	4607      	mov	r7, r0
 8019a7e:	460d      	mov	r5, r1
 8019a80:	4614      	mov	r4, r2
 8019a82:	d50e      	bpl.n	8019aa2 <_svfiprintf_r+0x32>
 8019a84:	690b      	ldr	r3, [r1, #16]
 8019a86:	b963      	cbnz	r3, 8019aa2 <_svfiprintf_r+0x32>
 8019a88:	2140      	movs	r1, #64	; 0x40
 8019a8a:	f7ff fb15 	bl	80190b8 <_malloc_r>
 8019a8e:	6028      	str	r0, [r5, #0]
 8019a90:	6128      	str	r0, [r5, #16]
 8019a92:	b920      	cbnz	r0, 8019a9e <_svfiprintf_r+0x2e>
 8019a94:	230c      	movs	r3, #12
 8019a96:	603b      	str	r3, [r7, #0]
 8019a98:	f04f 30ff 	mov.w	r0, #4294967295
 8019a9c:	e0d1      	b.n	8019c42 <_svfiprintf_r+0x1d2>
 8019a9e:	2340      	movs	r3, #64	; 0x40
 8019aa0:	616b      	str	r3, [r5, #20]
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8019aa6:	2320      	movs	r3, #32
 8019aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ab0:	2330      	movs	r3, #48	; 0x30
 8019ab2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019c5c <_svfiprintf_r+0x1ec>
 8019ab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019aba:	f04f 0901 	mov.w	r9, #1
 8019abe:	4623      	mov	r3, r4
 8019ac0:	469a      	mov	sl, r3
 8019ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ac6:	b10a      	cbz	r2, 8019acc <_svfiprintf_r+0x5c>
 8019ac8:	2a25      	cmp	r2, #37	; 0x25
 8019aca:	d1f9      	bne.n	8019ac0 <_svfiprintf_r+0x50>
 8019acc:	ebba 0b04 	subs.w	fp, sl, r4
 8019ad0:	d00b      	beq.n	8019aea <_svfiprintf_r+0x7a>
 8019ad2:	465b      	mov	r3, fp
 8019ad4:	4622      	mov	r2, r4
 8019ad6:	4629      	mov	r1, r5
 8019ad8:	4638      	mov	r0, r7
 8019ada:	f7ff ff6d 	bl	80199b8 <__ssputs_r>
 8019ade:	3001      	adds	r0, #1
 8019ae0:	f000 80aa 	beq.w	8019c38 <_svfiprintf_r+0x1c8>
 8019ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ae6:	445a      	add	r2, fp
 8019ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8019aea:	f89a 3000 	ldrb.w	r3, [sl]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	f000 80a2 	beq.w	8019c38 <_svfiprintf_r+0x1c8>
 8019af4:	2300      	movs	r3, #0
 8019af6:	f04f 32ff 	mov.w	r2, #4294967295
 8019afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019afe:	f10a 0a01 	add.w	sl, sl, #1
 8019b02:	9304      	str	r3, [sp, #16]
 8019b04:	9307      	str	r3, [sp, #28]
 8019b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8019b0c:	4654      	mov	r4, sl
 8019b0e:	2205      	movs	r2, #5
 8019b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b14:	4851      	ldr	r0, [pc, #324]	; (8019c5c <_svfiprintf_r+0x1ec>)
 8019b16:	f7e6 fb73 	bl	8000200 <memchr>
 8019b1a:	9a04      	ldr	r2, [sp, #16]
 8019b1c:	b9d8      	cbnz	r0, 8019b56 <_svfiprintf_r+0xe6>
 8019b1e:	06d0      	lsls	r0, r2, #27
 8019b20:	bf44      	itt	mi
 8019b22:	2320      	movmi	r3, #32
 8019b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b28:	0711      	lsls	r1, r2, #28
 8019b2a:	bf44      	itt	mi
 8019b2c:	232b      	movmi	r3, #43	; 0x2b
 8019b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b32:	f89a 3000 	ldrb.w	r3, [sl]
 8019b36:	2b2a      	cmp	r3, #42	; 0x2a
 8019b38:	d015      	beq.n	8019b66 <_svfiprintf_r+0xf6>
 8019b3a:	9a07      	ldr	r2, [sp, #28]
 8019b3c:	4654      	mov	r4, sl
 8019b3e:	2000      	movs	r0, #0
 8019b40:	f04f 0c0a 	mov.w	ip, #10
 8019b44:	4621      	mov	r1, r4
 8019b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b4a:	3b30      	subs	r3, #48	; 0x30
 8019b4c:	2b09      	cmp	r3, #9
 8019b4e:	d94e      	bls.n	8019bee <_svfiprintf_r+0x17e>
 8019b50:	b1b0      	cbz	r0, 8019b80 <_svfiprintf_r+0x110>
 8019b52:	9207      	str	r2, [sp, #28]
 8019b54:	e014      	b.n	8019b80 <_svfiprintf_r+0x110>
 8019b56:	eba0 0308 	sub.w	r3, r0, r8
 8019b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8019b5e:	4313      	orrs	r3, r2
 8019b60:	9304      	str	r3, [sp, #16]
 8019b62:	46a2      	mov	sl, r4
 8019b64:	e7d2      	b.n	8019b0c <_svfiprintf_r+0x9c>
 8019b66:	9b03      	ldr	r3, [sp, #12]
 8019b68:	1d19      	adds	r1, r3, #4
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	9103      	str	r1, [sp, #12]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	bfbb      	ittet	lt
 8019b72:	425b      	neglt	r3, r3
 8019b74:	f042 0202 	orrlt.w	r2, r2, #2
 8019b78:	9307      	strge	r3, [sp, #28]
 8019b7a:	9307      	strlt	r3, [sp, #28]
 8019b7c:	bfb8      	it	lt
 8019b7e:	9204      	strlt	r2, [sp, #16]
 8019b80:	7823      	ldrb	r3, [r4, #0]
 8019b82:	2b2e      	cmp	r3, #46	; 0x2e
 8019b84:	d10c      	bne.n	8019ba0 <_svfiprintf_r+0x130>
 8019b86:	7863      	ldrb	r3, [r4, #1]
 8019b88:	2b2a      	cmp	r3, #42	; 0x2a
 8019b8a:	d135      	bne.n	8019bf8 <_svfiprintf_r+0x188>
 8019b8c:	9b03      	ldr	r3, [sp, #12]
 8019b8e:	1d1a      	adds	r2, r3, #4
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	9203      	str	r2, [sp, #12]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	bfb8      	it	lt
 8019b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8019b9c:	3402      	adds	r4, #2
 8019b9e:	9305      	str	r3, [sp, #20]
 8019ba0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019c6c <_svfiprintf_r+0x1fc>
 8019ba4:	7821      	ldrb	r1, [r4, #0]
 8019ba6:	2203      	movs	r2, #3
 8019ba8:	4650      	mov	r0, sl
 8019baa:	f7e6 fb29 	bl	8000200 <memchr>
 8019bae:	b140      	cbz	r0, 8019bc2 <_svfiprintf_r+0x152>
 8019bb0:	2340      	movs	r3, #64	; 0x40
 8019bb2:	eba0 000a 	sub.w	r0, r0, sl
 8019bb6:	fa03 f000 	lsl.w	r0, r3, r0
 8019bba:	9b04      	ldr	r3, [sp, #16]
 8019bbc:	4303      	orrs	r3, r0
 8019bbe:	3401      	adds	r4, #1
 8019bc0:	9304      	str	r3, [sp, #16]
 8019bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bc6:	4826      	ldr	r0, [pc, #152]	; (8019c60 <_svfiprintf_r+0x1f0>)
 8019bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019bcc:	2206      	movs	r2, #6
 8019bce:	f7e6 fb17 	bl	8000200 <memchr>
 8019bd2:	2800      	cmp	r0, #0
 8019bd4:	d038      	beq.n	8019c48 <_svfiprintf_r+0x1d8>
 8019bd6:	4b23      	ldr	r3, [pc, #140]	; (8019c64 <_svfiprintf_r+0x1f4>)
 8019bd8:	bb1b      	cbnz	r3, 8019c22 <_svfiprintf_r+0x1b2>
 8019bda:	9b03      	ldr	r3, [sp, #12]
 8019bdc:	3307      	adds	r3, #7
 8019bde:	f023 0307 	bic.w	r3, r3, #7
 8019be2:	3308      	adds	r3, #8
 8019be4:	9303      	str	r3, [sp, #12]
 8019be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019be8:	4433      	add	r3, r6
 8019bea:	9309      	str	r3, [sp, #36]	; 0x24
 8019bec:	e767      	b.n	8019abe <_svfiprintf_r+0x4e>
 8019bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8019bf2:	460c      	mov	r4, r1
 8019bf4:	2001      	movs	r0, #1
 8019bf6:	e7a5      	b.n	8019b44 <_svfiprintf_r+0xd4>
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	3401      	adds	r4, #1
 8019bfc:	9305      	str	r3, [sp, #20]
 8019bfe:	4619      	mov	r1, r3
 8019c00:	f04f 0c0a 	mov.w	ip, #10
 8019c04:	4620      	mov	r0, r4
 8019c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c0a:	3a30      	subs	r2, #48	; 0x30
 8019c0c:	2a09      	cmp	r2, #9
 8019c0e:	d903      	bls.n	8019c18 <_svfiprintf_r+0x1a8>
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d0c5      	beq.n	8019ba0 <_svfiprintf_r+0x130>
 8019c14:	9105      	str	r1, [sp, #20]
 8019c16:	e7c3      	b.n	8019ba0 <_svfiprintf_r+0x130>
 8019c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c1c:	4604      	mov	r4, r0
 8019c1e:	2301      	movs	r3, #1
 8019c20:	e7f0      	b.n	8019c04 <_svfiprintf_r+0x194>
 8019c22:	ab03      	add	r3, sp, #12
 8019c24:	9300      	str	r3, [sp, #0]
 8019c26:	462a      	mov	r2, r5
 8019c28:	4b0f      	ldr	r3, [pc, #60]	; (8019c68 <_svfiprintf_r+0x1f8>)
 8019c2a:	a904      	add	r1, sp, #16
 8019c2c:	4638      	mov	r0, r7
 8019c2e:	f3af 8000 	nop.w
 8019c32:	1c42      	adds	r2, r0, #1
 8019c34:	4606      	mov	r6, r0
 8019c36:	d1d6      	bne.n	8019be6 <_svfiprintf_r+0x176>
 8019c38:	89ab      	ldrh	r3, [r5, #12]
 8019c3a:	065b      	lsls	r3, r3, #25
 8019c3c:	f53f af2c 	bmi.w	8019a98 <_svfiprintf_r+0x28>
 8019c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c42:	b01d      	add	sp, #116	; 0x74
 8019c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c48:	ab03      	add	r3, sp, #12
 8019c4a:	9300      	str	r3, [sp, #0]
 8019c4c:	462a      	mov	r2, r5
 8019c4e:	4b06      	ldr	r3, [pc, #24]	; (8019c68 <_svfiprintf_r+0x1f8>)
 8019c50:	a904      	add	r1, sp, #16
 8019c52:	4638      	mov	r0, r7
 8019c54:	f000 f9d4 	bl	801a000 <_printf_i>
 8019c58:	e7eb      	b.n	8019c32 <_svfiprintf_r+0x1c2>
 8019c5a:	bf00      	nop
 8019c5c:	0801cc24 	.word	0x0801cc24
 8019c60:	0801cc2e 	.word	0x0801cc2e
 8019c64:	00000000 	.word	0x00000000
 8019c68:	080199b9 	.word	0x080199b9
 8019c6c:	0801cc2a 	.word	0x0801cc2a

08019c70 <__sfputc_r>:
 8019c70:	6893      	ldr	r3, [r2, #8]
 8019c72:	3b01      	subs	r3, #1
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	b410      	push	{r4}
 8019c78:	6093      	str	r3, [r2, #8]
 8019c7a:	da08      	bge.n	8019c8e <__sfputc_r+0x1e>
 8019c7c:	6994      	ldr	r4, [r2, #24]
 8019c7e:	42a3      	cmp	r3, r4
 8019c80:	db01      	blt.n	8019c86 <__sfputc_r+0x16>
 8019c82:	290a      	cmp	r1, #10
 8019c84:	d103      	bne.n	8019c8e <__sfputc_r+0x1e>
 8019c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c8a:	f7ff bc21 	b.w	80194d0 <__swbuf_r>
 8019c8e:	6813      	ldr	r3, [r2, #0]
 8019c90:	1c58      	adds	r0, r3, #1
 8019c92:	6010      	str	r0, [r2, #0]
 8019c94:	7019      	strb	r1, [r3, #0]
 8019c96:	4608      	mov	r0, r1
 8019c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c9c:	4770      	bx	lr

08019c9e <__sfputs_r>:
 8019c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ca0:	4606      	mov	r6, r0
 8019ca2:	460f      	mov	r7, r1
 8019ca4:	4614      	mov	r4, r2
 8019ca6:	18d5      	adds	r5, r2, r3
 8019ca8:	42ac      	cmp	r4, r5
 8019caa:	d101      	bne.n	8019cb0 <__sfputs_r+0x12>
 8019cac:	2000      	movs	r0, #0
 8019cae:	e007      	b.n	8019cc0 <__sfputs_r+0x22>
 8019cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cb4:	463a      	mov	r2, r7
 8019cb6:	4630      	mov	r0, r6
 8019cb8:	f7ff ffda 	bl	8019c70 <__sfputc_r>
 8019cbc:	1c43      	adds	r3, r0, #1
 8019cbe:	d1f3      	bne.n	8019ca8 <__sfputs_r+0xa>
 8019cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019cc4 <_vfiprintf_r>:
 8019cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc8:	460d      	mov	r5, r1
 8019cca:	b09d      	sub	sp, #116	; 0x74
 8019ccc:	4614      	mov	r4, r2
 8019cce:	4698      	mov	r8, r3
 8019cd0:	4606      	mov	r6, r0
 8019cd2:	b118      	cbz	r0, 8019cdc <_vfiprintf_r+0x18>
 8019cd4:	6983      	ldr	r3, [r0, #24]
 8019cd6:	b90b      	cbnz	r3, 8019cdc <_vfiprintf_r+0x18>
 8019cd8:	f7ff f8d8 	bl	8018e8c <__sinit>
 8019cdc:	4b89      	ldr	r3, [pc, #548]	; (8019f04 <_vfiprintf_r+0x240>)
 8019cde:	429d      	cmp	r5, r3
 8019ce0:	d11b      	bne.n	8019d1a <_vfiprintf_r+0x56>
 8019ce2:	6875      	ldr	r5, [r6, #4]
 8019ce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ce6:	07d9      	lsls	r1, r3, #31
 8019ce8:	d405      	bmi.n	8019cf6 <_vfiprintf_r+0x32>
 8019cea:	89ab      	ldrh	r3, [r5, #12]
 8019cec:	059a      	lsls	r2, r3, #22
 8019cee:	d402      	bmi.n	8019cf6 <_vfiprintf_r+0x32>
 8019cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019cf2:	f7ff f98e 	bl	8019012 <__retarget_lock_acquire_recursive>
 8019cf6:	89ab      	ldrh	r3, [r5, #12]
 8019cf8:	071b      	lsls	r3, r3, #28
 8019cfa:	d501      	bpl.n	8019d00 <_vfiprintf_r+0x3c>
 8019cfc:	692b      	ldr	r3, [r5, #16]
 8019cfe:	b9eb      	cbnz	r3, 8019d3c <_vfiprintf_r+0x78>
 8019d00:	4629      	mov	r1, r5
 8019d02:	4630      	mov	r0, r6
 8019d04:	f7ff fc48 	bl	8019598 <__swsetup_r>
 8019d08:	b1c0      	cbz	r0, 8019d3c <_vfiprintf_r+0x78>
 8019d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d0c:	07dc      	lsls	r4, r3, #31
 8019d0e:	d50e      	bpl.n	8019d2e <_vfiprintf_r+0x6a>
 8019d10:	f04f 30ff 	mov.w	r0, #4294967295
 8019d14:	b01d      	add	sp, #116	; 0x74
 8019d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d1a:	4b7b      	ldr	r3, [pc, #492]	; (8019f08 <_vfiprintf_r+0x244>)
 8019d1c:	429d      	cmp	r5, r3
 8019d1e:	d101      	bne.n	8019d24 <_vfiprintf_r+0x60>
 8019d20:	68b5      	ldr	r5, [r6, #8]
 8019d22:	e7df      	b.n	8019ce4 <_vfiprintf_r+0x20>
 8019d24:	4b79      	ldr	r3, [pc, #484]	; (8019f0c <_vfiprintf_r+0x248>)
 8019d26:	429d      	cmp	r5, r3
 8019d28:	bf08      	it	eq
 8019d2a:	68f5      	ldreq	r5, [r6, #12]
 8019d2c:	e7da      	b.n	8019ce4 <_vfiprintf_r+0x20>
 8019d2e:	89ab      	ldrh	r3, [r5, #12]
 8019d30:	0598      	lsls	r0, r3, #22
 8019d32:	d4ed      	bmi.n	8019d10 <_vfiprintf_r+0x4c>
 8019d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019d36:	f7ff f96d 	bl	8019014 <__retarget_lock_release_recursive>
 8019d3a:	e7e9      	b.n	8019d10 <_vfiprintf_r+0x4c>
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8019d40:	2320      	movs	r3, #32
 8019d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d4a:	2330      	movs	r3, #48	; 0x30
 8019d4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019f10 <_vfiprintf_r+0x24c>
 8019d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d54:	f04f 0901 	mov.w	r9, #1
 8019d58:	4623      	mov	r3, r4
 8019d5a:	469a      	mov	sl, r3
 8019d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d60:	b10a      	cbz	r2, 8019d66 <_vfiprintf_r+0xa2>
 8019d62:	2a25      	cmp	r2, #37	; 0x25
 8019d64:	d1f9      	bne.n	8019d5a <_vfiprintf_r+0x96>
 8019d66:	ebba 0b04 	subs.w	fp, sl, r4
 8019d6a:	d00b      	beq.n	8019d84 <_vfiprintf_r+0xc0>
 8019d6c:	465b      	mov	r3, fp
 8019d6e:	4622      	mov	r2, r4
 8019d70:	4629      	mov	r1, r5
 8019d72:	4630      	mov	r0, r6
 8019d74:	f7ff ff93 	bl	8019c9e <__sfputs_r>
 8019d78:	3001      	adds	r0, #1
 8019d7a:	f000 80aa 	beq.w	8019ed2 <_vfiprintf_r+0x20e>
 8019d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d80:	445a      	add	r2, fp
 8019d82:	9209      	str	r2, [sp, #36]	; 0x24
 8019d84:	f89a 3000 	ldrb.w	r3, [sl]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	f000 80a2 	beq.w	8019ed2 <_vfiprintf_r+0x20e>
 8019d8e:	2300      	movs	r3, #0
 8019d90:	f04f 32ff 	mov.w	r2, #4294967295
 8019d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d98:	f10a 0a01 	add.w	sl, sl, #1
 8019d9c:	9304      	str	r3, [sp, #16]
 8019d9e:	9307      	str	r3, [sp, #28]
 8019da0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019da4:	931a      	str	r3, [sp, #104]	; 0x68
 8019da6:	4654      	mov	r4, sl
 8019da8:	2205      	movs	r2, #5
 8019daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dae:	4858      	ldr	r0, [pc, #352]	; (8019f10 <_vfiprintf_r+0x24c>)
 8019db0:	f7e6 fa26 	bl	8000200 <memchr>
 8019db4:	9a04      	ldr	r2, [sp, #16]
 8019db6:	b9d8      	cbnz	r0, 8019df0 <_vfiprintf_r+0x12c>
 8019db8:	06d1      	lsls	r1, r2, #27
 8019dba:	bf44      	itt	mi
 8019dbc:	2320      	movmi	r3, #32
 8019dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019dc2:	0713      	lsls	r3, r2, #28
 8019dc4:	bf44      	itt	mi
 8019dc6:	232b      	movmi	r3, #43	; 0x2b
 8019dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8019dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8019dd2:	d015      	beq.n	8019e00 <_vfiprintf_r+0x13c>
 8019dd4:	9a07      	ldr	r2, [sp, #28]
 8019dd6:	4654      	mov	r4, sl
 8019dd8:	2000      	movs	r0, #0
 8019dda:	f04f 0c0a 	mov.w	ip, #10
 8019dde:	4621      	mov	r1, r4
 8019de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019de4:	3b30      	subs	r3, #48	; 0x30
 8019de6:	2b09      	cmp	r3, #9
 8019de8:	d94e      	bls.n	8019e88 <_vfiprintf_r+0x1c4>
 8019dea:	b1b0      	cbz	r0, 8019e1a <_vfiprintf_r+0x156>
 8019dec:	9207      	str	r2, [sp, #28]
 8019dee:	e014      	b.n	8019e1a <_vfiprintf_r+0x156>
 8019df0:	eba0 0308 	sub.w	r3, r0, r8
 8019df4:	fa09 f303 	lsl.w	r3, r9, r3
 8019df8:	4313      	orrs	r3, r2
 8019dfa:	9304      	str	r3, [sp, #16]
 8019dfc:	46a2      	mov	sl, r4
 8019dfe:	e7d2      	b.n	8019da6 <_vfiprintf_r+0xe2>
 8019e00:	9b03      	ldr	r3, [sp, #12]
 8019e02:	1d19      	adds	r1, r3, #4
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	9103      	str	r1, [sp, #12]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	bfbb      	ittet	lt
 8019e0c:	425b      	neglt	r3, r3
 8019e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8019e12:	9307      	strge	r3, [sp, #28]
 8019e14:	9307      	strlt	r3, [sp, #28]
 8019e16:	bfb8      	it	lt
 8019e18:	9204      	strlt	r2, [sp, #16]
 8019e1a:	7823      	ldrb	r3, [r4, #0]
 8019e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8019e1e:	d10c      	bne.n	8019e3a <_vfiprintf_r+0x176>
 8019e20:	7863      	ldrb	r3, [r4, #1]
 8019e22:	2b2a      	cmp	r3, #42	; 0x2a
 8019e24:	d135      	bne.n	8019e92 <_vfiprintf_r+0x1ce>
 8019e26:	9b03      	ldr	r3, [sp, #12]
 8019e28:	1d1a      	adds	r2, r3, #4
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	9203      	str	r2, [sp, #12]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	bfb8      	it	lt
 8019e32:	f04f 33ff 	movlt.w	r3, #4294967295
 8019e36:	3402      	adds	r4, #2
 8019e38:	9305      	str	r3, [sp, #20]
 8019e3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019f20 <_vfiprintf_r+0x25c>
 8019e3e:	7821      	ldrb	r1, [r4, #0]
 8019e40:	2203      	movs	r2, #3
 8019e42:	4650      	mov	r0, sl
 8019e44:	f7e6 f9dc 	bl	8000200 <memchr>
 8019e48:	b140      	cbz	r0, 8019e5c <_vfiprintf_r+0x198>
 8019e4a:	2340      	movs	r3, #64	; 0x40
 8019e4c:	eba0 000a 	sub.w	r0, r0, sl
 8019e50:	fa03 f000 	lsl.w	r0, r3, r0
 8019e54:	9b04      	ldr	r3, [sp, #16]
 8019e56:	4303      	orrs	r3, r0
 8019e58:	3401      	adds	r4, #1
 8019e5a:	9304      	str	r3, [sp, #16]
 8019e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e60:	482c      	ldr	r0, [pc, #176]	; (8019f14 <_vfiprintf_r+0x250>)
 8019e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e66:	2206      	movs	r2, #6
 8019e68:	f7e6 f9ca 	bl	8000200 <memchr>
 8019e6c:	2800      	cmp	r0, #0
 8019e6e:	d03f      	beq.n	8019ef0 <_vfiprintf_r+0x22c>
 8019e70:	4b29      	ldr	r3, [pc, #164]	; (8019f18 <_vfiprintf_r+0x254>)
 8019e72:	bb1b      	cbnz	r3, 8019ebc <_vfiprintf_r+0x1f8>
 8019e74:	9b03      	ldr	r3, [sp, #12]
 8019e76:	3307      	adds	r3, #7
 8019e78:	f023 0307 	bic.w	r3, r3, #7
 8019e7c:	3308      	adds	r3, #8
 8019e7e:	9303      	str	r3, [sp, #12]
 8019e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e82:	443b      	add	r3, r7
 8019e84:	9309      	str	r3, [sp, #36]	; 0x24
 8019e86:	e767      	b.n	8019d58 <_vfiprintf_r+0x94>
 8019e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e8c:	460c      	mov	r4, r1
 8019e8e:	2001      	movs	r0, #1
 8019e90:	e7a5      	b.n	8019dde <_vfiprintf_r+0x11a>
 8019e92:	2300      	movs	r3, #0
 8019e94:	3401      	adds	r4, #1
 8019e96:	9305      	str	r3, [sp, #20]
 8019e98:	4619      	mov	r1, r3
 8019e9a:	f04f 0c0a 	mov.w	ip, #10
 8019e9e:	4620      	mov	r0, r4
 8019ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ea4:	3a30      	subs	r2, #48	; 0x30
 8019ea6:	2a09      	cmp	r2, #9
 8019ea8:	d903      	bls.n	8019eb2 <_vfiprintf_r+0x1ee>
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d0c5      	beq.n	8019e3a <_vfiprintf_r+0x176>
 8019eae:	9105      	str	r1, [sp, #20]
 8019eb0:	e7c3      	b.n	8019e3a <_vfiprintf_r+0x176>
 8019eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8019eb6:	4604      	mov	r4, r0
 8019eb8:	2301      	movs	r3, #1
 8019eba:	e7f0      	b.n	8019e9e <_vfiprintf_r+0x1da>
 8019ebc:	ab03      	add	r3, sp, #12
 8019ebe:	9300      	str	r3, [sp, #0]
 8019ec0:	462a      	mov	r2, r5
 8019ec2:	4b16      	ldr	r3, [pc, #88]	; (8019f1c <_vfiprintf_r+0x258>)
 8019ec4:	a904      	add	r1, sp, #16
 8019ec6:	4630      	mov	r0, r6
 8019ec8:	f3af 8000 	nop.w
 8019ecc:	4607      	mov	r7, r0
 8019ece:	1c78      	adds	r0, r7, #1
 8019ed0:	d1d6      	bne.n	8019e80 <_vfiprintf_r+0x1bc>
 8019ed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ed4:	07d9      	lsls	r1, r3, #31
 8019ed6:	d405      	bmi.n	8019ee4 <_vfiprintf_r+0x220>
 8019ed8:	89ab      	ldrh	r3, [r5, #12]
 8019eda:	059a      	lsls	r2, r3, #22
 8019edc:	d402      	bmi.n	8019ee4 <_vfiprintf_r+0x220>
 8019ede:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ee0:	f7ff f898 	bl	8019014 <__retarget_lock_release_recursive>
 8019ee4:	89ab      	ldrh	r3, [r5, #12]
 8019ee6:	065b      	lsls	r3, r3, #25
 8019ee8:	f53f af12 	bmi.w	8019d10 <_vfiprintf_r+0x4c>
 8019eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019eee:	e711      	b.n	8019d14 <_vfiprintf_r+0x50>
 8019ef0:	ab03      	add	r3, sp, #12
 8019ef2:	9300      	str	r3, [sp, #0]
 8019ef4:	462a      	mov	r2, r5
 8019ef6:	4b09      	ldr	r3, [pc, #36]	; (8019f1c <_vfiprintf_r+0x258>)
 8019ef8:	a904      	add	r1, sp, #16
 8019efa:	4630      	mov	r0, r6
 8019efc:	f000 f880 	bl	801a000 <_printf_i>
 8019f00:	e7e4      	b.n	8019ecc <_vfiprintf_r+0x208>
 8019f02:	bf00      	nop
 8019f04:	0801cbe0 	.word	0x0801cbe0
 8019f08:	0801cc00 	.word	0x0801cc00
 8019f0c:	0801cbc0 	.word	0x0801cbc0
 8019f10:	0801cc24 	.word	0x0801cc24
 8019f14:	0801cc2e 	.word	0x0801cc2e
 8019f18:	00000000 	.word	0x00000000
 8019f1c:	08019c9f 	.word	0x08019c9f
 8019f20:	0801cc2a 	.word	0x0801cc2a

08019f24 <_printf_common>:
 8019f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f28:	4616      	mov	r6, r2
 8019f2a:	4699      	mov	r9, r3
 8019f2c:	688a      	ldr	r2, [r1, #8]
 8019f2e:	690b      	ldr	r3, [r1, #16]
 8019f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019f34:	4293      	cmp	r3, r2
 8019f36:	bfb8      	it	lt
 8019f38:	4613      	movlt	r3, r2
 8019f3a:	6033      	str	r3, [r6, #0]
 8019f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019f40:	4607      	mov	r7, r0
 8019f42:	460c      	mov	r4, r1
 8019f44:	b10a      	cbz	r2, 8019f4a <_printf_common+0x26>
 8019f46:	3301      	adds	r3, #1
 8019f48:	6033      	str	r3, [r6, #0]
 8019f4a:	6823      	ldr	r3, [r4, #0]
 8019f4c:	0699      	lsls	r1, r3, #26
 8019f4e:	bf42      	ittt	mi
 8019f50:	6833      	ldrmi	r3, [r6, #0]
 8019f52:	3302      	addmi	r3, #2
 8019f54:	6033      	strmi	r3, [r6, #0]
 8019f56:	6825      	ldr	r5, [r4, #0]
 8019f58:	f015 0506 	ands.w	r5, r5, #6
 8019f5c:	d106      	bne.n	8019f6c <_printf_common+0x48>
 8019f5e:	f104 0a19 	add.w	sl, r4, #25
 8019f62:	68e3      	ldr	r3, [r4, #12]
 8019f64:	6832      	ldr	r2, [r6, #0]
 8019f66:	1a9b      	subs	r3, r3, r2
 8019f68:	42ab      	cmp	r3, r5
 8019f6a:	dc26      	bgt.n	8019fba <_printf_common+0x96>
 8019f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019f70:	1e13      	subs	r3, r2, #0
 8019f72:	6822      	ldr	r2, [r4, #0]
 8019f74:	bf18      	it	ne
 8019f76:	2301      	movne	r3, #1
 8019f78:	0692      	lsls	r2, r2, #26
 8019f7a:	d42b      	bmi.n	8019fd4 <_printf_common+0xb0>
 8019f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019f80:	4649      	mov	r1, r9
 8019f82:	4638      	mov	r0, r7
 8019f84:	47c0      	blx	r8
 8019f86:	3001      	adds	r0, #1
 8019f88:	d01e      	beq.n	8019fc8 <_printf_common+0xa4>
 8019f8a:	6823      	ldr	r3, [r4, #0]
 8019f8c:	68e5      	ldr	r5, [r4, #12]
 8019f8e:	6832      	ldr	r2, [r6, #0]
 8019f90:	f003 0306 	and.w	r3, r3, #6
 8019f94:	2b04      	cmp	r3, #4
 8019f96:	bf08      	it	eq
 8019f98:	1aad      	subeq	r5, r5, r2
 8019f9a:	68a3      	ldr	r3, [r4, #8]
 8019f9c:	6922      	ldr	r2, [r4, #16]
 8019f9e:	bf0c      	ite	eq
 8019fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019fa4:	2500      	movne	r5, #0
 8019fa6:	4293      	cmp	r3, r2
 8019fa8:	bfc4      	itt	gt
 8019faa:	1a9b      	subgt	r3, r3, r2
 8019fac:	18ed      	addgt	r5, r5, r3
 8019fae:	2600      	movs	r6, #0
 8019fb0:	341a      	adds	r4, #26
 8019fb2:	42b5      	cmp	r5, r6
 8019fb4:	d11a      	bne.n	8019fec <_printf_common+0xc8>
 8019fb6:	2000      	movs	r0, #0
 8019fb8:	e008      	b.n	8019fcc <_printf_common+0xa8>
 8019fba:	2301      	movs	r3, #1
 8019fbc:	4652      	mov	r2, sl
 8019fbe:	4649      	mov	r1, r9
 8019fc0:	4638      	mov	r0, r7
 8019fc2:	47c0      	blx	r8
 8019fc4:	3001      	adds	r0, #1
 8019fc6:	d103      	bne.n	8019fd0 <_printf_common+0xac>
 8019fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8019fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fd0:	3501      	adds	r5, #1
 8019fd2:	e7c6      	b.n	8019f62 <_printf_common+0x3e>
 8019fd4:	18e1      	adds	r1, r4, r3
 8019fd6:	1c5a      	adds	r2, r3, #1
 8019fd8:	2030      	movs	r0, #48	; 0x30
 8019fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019fde:	4422      	add	r2, r4
 8019fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019fe8:	3302      	adds	r3, #2
 8019fea:	e7c7      	b.n	8019f7c <_printf_common+0x58>
 8019fec:	2301      	movs	r3, #1
 8019fee:	4622      	mov	r2, r4
 8019ff0:	4649      	mov	r1, r9
 8019ff2:	4638      	mov	r0, r7
 8019ff4:	47c0      	blx	r8
 8019ff6:	3001      	adds	r0, #1
 8019ff8:	d0e6      	beq.n	8019fc8 <_printf_common+0xa4>
 8019ffa:	3601      	adds	r6, #1
 8019ffc:	e7d9      	b.n	8019fb2 <_printf_common+0x8e>
	...

0801a000 <_printf_i>:
 801a000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a004:	7e0f      	ldrb	r7, [r1, #24]
 801a006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a008:	2f78      	cmp	r7, #120	; 0x78
 801a00a:	4691      	mov	r9, r2
 801a00c:	4680      	mov	r8, r0
 801a00e:	460c      	mov	r4, r1
 801a010:	469a      	mov	sl, r3
 801a012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a016:	d807      	bhi.n	801a028 <_printf_i+0x28>
 801a018:	2f62      	cmp	r7, #98	; 0x62
 801a01a:	d80a      	bhi.n	801a032 <_printf_i+0x32>
 801a01c:	2f00      	cmp	r7, #0
 801a01e:	f000 80d8 	beq.w	801a1d2 <_printf_i+0x1d2>
 801a022:	2f58      	cmp	r7, #88	; 0x58
 801a024:	f000 80a3 	beq.w	801a16e <_printf_i+0x16e>
 801a028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a02c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a030:	e03a      	b.n	801a0a8 <_printf_i+0xa8>
 801a032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a036:	2b15      	cmp	r3, #21
 801a038:	d8f6      	bhi.n	801a028 <_printf_i+0x28>
 801a03a:	a101      	add	r1, pc, #4	; (adr r1, 801a040 <_printf_i+0x40>)
 801a03c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a040:	0801a099 	.word	0x0801a099
 801a044:	0801a0ad 	.word	0x0801a0ad
 801a048:	0801a029 	.word	0x0801a029
 801a04c:	0801a029 	.word	0x0801a029
 801a050:	0801a029 	.word	0x0801a029
 801a054:	0801a029 	.word	0x0801a029
 801a058:	0801a0ad 	.word	0x0801a0ad
 801a05c:	0801a029 	.word	0x0801a029
 801a060:	0801a029 	.word	0x0801a029
 801a064:	0801a029 	.word	0x0801a029
 801a068:	0801a029 	.word	0x0801a029
 801a06c:	0801a1b9 	.word	0x0801a1b9
 801a070:	0801a0dd 	.word	0x0801a0dd
 801a074:	0801a19b 	.word	0x0801a19b
 801a078:	0801a029 	.word	0x0801a029
 801a07c:	0801a029 	.word	0x0801a029
 801a080:	0801a1db 	.word	0x0801a1db
 801a084:	0801a029 	.word	0x0801a029
 801a088:	0801a0dd 	.word	0x0801a0dd
 801a08c:	0801a029 	.word	0x0801a029
 801a090:	0801a029 	.word	0x0801a029
 801a094:	0801a1a3 	.word	0x0801a1a3
 801a098:	682b      	ldr	r3, [r5, #0]
 801a09a:	1d1a      	adds	r2, r3, #4
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	602a      	str	r2, [r5, #0]
 801a0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a0a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a0a8:	2301      	movs	r3, #1
 801a0aa:	e0a3      	b.n	801a1f4 <_printf_i+0x1f4>
 801a0ac:	6820      	ldr	r0, [r4, #0]
 801a0ae:	6829      	ldr	r1, [r5, #0]
 801a0b0:	0606      	lsls	r6, r0, #24
 801a0b2:	f101 0304 	add.w	r3, r1, #4
 801a0b6:	d50a      	bpl.n	801a0ce <_printf_i+0xce>
 801a0b8:	680e      	ldr	r6, [r1, #0]
 801a0ba:	602b      	str	r3, [r5, #0]
 801a0bc:	2e00      	cmp	r6, #0
 801a0be:	da03      	bge.n	801a0c8 <_printf_i+0xc8>
 801a0c0:	232d      	movs	r3, #45	; 0x2d
 801a0c2:	4276      	negs	r6, r6
 801a0c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0c8:	485e      	ldr	r0, [pc, #376]	; (801a244 <_printf_i+0x244>)
 801a0ca:	230a      	movs	r3, #10
 801a0cc:	e019      	b.n	801a102 <_printf_i+0x102>
 801a0ce:	680e      	ldr	r6, [r1, #0]
 801a0d0:	602b      	str	r3, [r5, #0]
 801a0d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a0d6:	bf18      	it	ne
 801a0d8:	b236      	sxthne	r6, r6
 801a0da:	e7ef      	b.n	801a0bc <_printf_i+0xbc>
 801a0dc:	682b      	ldr	r3, [r5, #0]
 801a0de:	6820      	ldr	r0, [r4, #0]
 801a0e0:	1d19      	adds	r1, r3, #4
 801a0e2:	6029      	str	r1, [r5, #0]
 801a0e4:	0601      	lsls	r1, r0, #24
 801a0e6:	d501      	bpl.n	801a0ec <_printf_i+0xec>
 801a0e8:	681e      	ldr	r6, [r3, #0]
 801a0ea:	e002      	b.n	801a0f2 <_printf_i+0xf2>
 801a0ec:	0646      	lsls	r6, r0, #25
 801a0ee:	d5fb      	bpl.n	801a0e8 <_printf_i+0xe8>
 801a0f0:	881e      	ldrh	r6, [r3, #0]
 801a0f2:	4854      	ldr	r0, [pc, #336]	; (801a244 <_printf_i+0x244>)
 801a0f4:	2f6f      	cmp	r7, #111	; 0x6f
 801a0f6:	bf0c      	ite	eq
 801a0f8:	2308      	moveq	r3, #8
 801a0fa:	230a      	movne	r3, #10
 801a0fc:	2100      	movs	r1, #0
 801a0fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a102:	6865      	ldr	r5, [r4, #4]
 801a104:	60a5      	str	r5, [r4, #8]
 801a106:	2d00      	cmp	r5, #0
 801a108:	bfa2      	ittt	ge
 801a10a:	6821      	ldrge	r1, [r4, #0]
 801a10c:	f021 0104 	bicge.w	r1, r1, #4
 801a110:	6021      	strge	r1, [r4, #0]
 801a112:	b90e      	cbnz	r6, 801a118 <_printf_i+0x118>
 801a114:	2d00      	cmp	r5, #0
 801a116:	d04d      	beq.n	801a1b4 <_printf_i+0x1b4>
 801a118:	4615      	mov	r5, r2
 801a11a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a11e:	fb03 6711 	mls	r7, r3, r1, r6
 801a122:	5dc7      	ldrb	r7, [r0, r7]
 801a124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a128:	4637      	mov	r7, r6
 801a12a:	42bb      	cmp	r3, r7
 801a12c:	460e      	mov	r6, r1
 801a12e:	d9f4      	bls.n	801a11a <_printf_i+0x11a>
 801a130:	2b08      	cmp	r3, #8
 801a132:	d10b      	bne.n	801a14c <_printf_i+0x14c>
 801a134:	6823      	ldr	r3, [r4, #0]
 801a136:	07de      	lsls	r6, r3, #31
 801a138:	d508      	bpl.n	801a14c <_printf_i+0x14c>
 801a13a:	6923      	ldr	r3, [r4, #16]
 801a13c:	6861      	ldr	r1, [r4, #4]
 801a13e:	4299      	cmp	r1, r3
 801a140:	bfde      	ittt	le
 801a142:	2330      	movle	r3, #48	; 0x30
 801a144:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a148:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a14c:	1b52      	subs	r2, r2, r5
 801a14e:	6122      	str	r2, [r4, #16]
 801a150:	f8cd a000 	str.w	sl, [sp]
 801a154:	464b      	mov	r3, r9
 801a156:	aa03      	add	r2, sp, #12
 801a158:	4621      	mov	r1, r4
 801a15a:	4640      	mov	r0, r8
 801a15c:	f7ff fee2 	bl	8019f24 <_printf_common>
 801a160:	3001      	adds	r0, #1
 801a162:	d14c      	bne.n	801a1fe <_printf_i+0x1fe>
 801a164:	f04f 30ff 	mov.w	r0, #4294967295
 801a168:	b004      	add	sp, #16
 801a16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a16e:	4835      	ldr	r0, [pc, #212]	; (801a244 <_printf_i+0x244>)
 801a170:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a174:	6829      	ldr	r1, [r5, #0]
 801a176:	6823      	ldr	r3, [r4, #0]
 801a178:	f851 6b04 	ldr.w	r6, [r1], #4
 801a17c:	6029      	str	r1, [r5, #0]
 801a17e:	061d      	lsls	r5, r3, #24
 801a180:	d514      	bpl.n	801a1ac <_printf_i+0x1ac>
 801a182:	07df      	lsls	r7, r3, #31
 801a184:	bf44      	itt	mi
 801a186:	f043 0320 	orrmi.w	r3, r3, #32
 801a18a:	6023      	strmi	r3, [r4, #0]
 801a18c:	b91e      	cbnz	r6, 801a196 <_printf_i+0x196>
 801a18e:	6823      	ldr	r3, [r4, #0]
 801a190:	f023 0320 	bic.w	r3, r3, #32
 801a194:	6023      	str	r3, [r4, #0]
 801a196:	2310      	movs	r3, #16
 801a198:	e7b0      	b.n	801a0fc <_printf_i+0xfc>
 801a19a:	6823      	ldr	r3, [r4, #0]
 801a19c:	f043 0320 	orr.w	r3, r3, #32
 801a1a0:	6023      	str	r3, [r4, #0]
 801a1a2:	2378      	movs	r3, #120	; 0x78
 801a1a4:	4828      	ldr	r0, [pc, #160]	; (801a248 <_printf_i+0x248>)
 801a1a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a1aa:	e7e3      	b.n	801a174 <_printf_i+0x174>
 801a1ac:	0659      	lsls	r1, r3, #25
 801a1ae:	bf48      	it	mi
 801a1b0:	b2b6      	uxthmi	r6, r6
 801a1b2:	e7e6      	b.n	801a182 <_printf_i+0x182>
 801a1b4:	4615      	mov	r5, r2
 801a1b6:	e7bb      	b.n	801a130 <_printf_i+0x130>
 801a1b8:	682b      	ldr	r3, [r5, #0]
 801a1ba:	6826      	ldr	r6, [r4, #0]
 801a1bc:	6961      	ldr	r1, [r4, #20]
 801a1be:	1d18      	adds	r0, r3, #4
 801a1c0:	6028      	str	r0, [r5, #0]
 801a1c2:	0635      	lsls	r5, r6, #24
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	d501      	bpl.n	801a1cc <_printf_i+0x1cc>
 801a1c8:	6019      	str	r1, [r3, #0]
 801a1ca:	e002      	b.n	801a1d2 <_printf_i+0x1d2>
 801a1cc:	0670      	lsls	r0, r6, #25
 801a1ce:	d5fb      	bpl.n	801a1c8 <_printf_i+0x1c8>
 801a1d0:	8019      	strh	r1, [r3, #0]
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	6123      	str	r3, [r4, #16]
 801a1d6:	4615      	mov	r5, r2
 801a1d8:	e7ba      	b.n	801a150 <_printf_i+0x150>
 801a1da:	682b      	ldr	r3, [r5, #0]
 801a1dc:	1d1a      	adds	r2, r3, #4
 801a1de:	602a      	str	r2, [r5, #0]
 801a1e0:	681d      	ldr	r5, [r3, #0]
 801a1e2:	6862      	ldr	r2, [r4, #4]
 801a1e4:	2100      	movs	r1, #0
 801a1e6:	4628      	mov	r0, r5
 801a1e8:	f7e6 f80a 	bl	8000200 <memchr>
 801a1ec:	b108      	cbz	r0, 801a1f2 <_printf_i+0x1f2>
 801a1ee:	1b40      	subs	r0, r0, r5
 801a1f0:	6060      	str	r0, [r4, #4]
 801a1f2:	6863      	ldr	r3, [r4, #4]
 801a1f4:	6123      	str	r3, [r4, #16]
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a1fc:	e7a8      	b.n	801a150 <_printf_i+0x150>
 801a1fe:	6923      	ldr	r3, [r4, #16]
 801a200:	462a      	mov	r2, r5
 801a202:	4649      	mov	r1, r9
 801a204:	4640      	mov	r0, r8
 801a206:	47d0      	blx	sl
 801a208:	3001      	adds	r0, #1
 801a20a:	d0ab      	beq.n	801a164 <_printf_i+0x164>
 801a20c:	6823      	ldr	r3, [r4, #0]
 801a20e:	079b      	lsls	r3, r3, #30
 801a210:	d413      	bmi.n	801a23a <_printf_i+0x23a>
 801a212:	68e0      	ldr	r0, [r4, #12]
 801a214:	9b03      	ldr	r3, [sp, #12]
 801a216:	4298      	cmp	r0, r3
 801a218:	bfb8      	it	lt
 801a21a:	4618      	movlt	r0, r3
 801a21c:	e7a4      	b.n	801a168 <_printf_i+0x168>
 801a21e:	2301      	movs	r3, #1
 801a220:	4632      	mov	r2, r6
 801a222:	4649      	mov	r1, r9
 801a224:	4640      	mov	r0, r8
 801a226:	47d0      	blx	sl
 801a228:	3001      	adds	r0, #1
 801a22a:	d09b      	beq.n	801a164 <_printf_i+0x164>
 801a22c:	3501      	adds	r5, #1
 801a22e:	68e3      	ldr	r3, [r4, #12]
 801a230:	9903      	ldr	r1, [sp, #12]
 801a232:	1a5b      	subs	r3, r3, r1
 801a234:	42ab      	cmp	r3, r5
 801a236:	dcf2      	bgt.n	801a21e <_printf_i+0x21e>
 801a238:	e7eb      	b.n	801a212 <_printf_i+0x212>
 801a23a:	2500      	movs	r5, #0
 801a23c:	f104 0619 	add.w	r6, r4, #25
 801a240:	e7f5      	b.n	801a22e <_printf_i+0x22e>
 801a242:	bf00      	nop
 801a244:	0801cc35 	.word	0x0801cc35
 801a248:	0801cc46 	.word	0x0801cc46

0801a24c <_putc_r>:
 801a24c:	b570      	push	{r4, r5, r6, lr}
 801a24e:	460d      	mov	r5, r1
 801a250:	4614      	mov	r4, r2
 801a252:	4606      	mov	r6, r0
 801a254:	b118      	cbz	r0, 801a25e <_putc_r+0x12>
 801a256:	6983      	ldr	r3, [r0, #24]
 801a258:	b90b      	cbnz	r3, 801a25e <_putc_r+0x12>
 801a25a:	f7fe fe17 	bl	8018e8c <__sinit>
 801a25e:	4b1c      	ldr	r3, [pc, #112]	; (801a2d0 <_putc_r+0x84>)
 801a260:	429c      	cmp	r4, r3
 801a262:	d124      	bne.n	801a2ae <_putc_r+0x62>
 801a264:	6874      	ldr	r4, [r6, #4]
 801a266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a268:	07d8      	lsls	r0, r3, #31
 801a26a:	d405      	bmi.n	801a278 <_putc_r+0x2c>
 801a26c:	89a3      	ldrh	r3, [r4, #12]
 801a26e:	0599      	lsls	r1, r3, #22
 801a270:	d402      	bmi.n	801a278 <_putc_r+0x2c>
 801a272:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a274:	f7fe fecd 	bl	8019012 <__retarget_lock_acquire_recursive>
 801a278:	68a3      	ldr	r3, [r4, #8]
 801a27a:	3b01      	subs	r3, #1
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	60a3      	str	r3, [r4, #8]
 801a280:	da05      	bge.n	801a28e <_putc_r+0x42>
 801a282:	69a2      	ldr	r2, [r4, #24]
 801a284:	4293      	cmp	r3, r2
 801a286:	db1c      	blt.n	801a2c2 <_putc_r+0x76>
 801a288:	b2eb      	uxtb	r3, r5
 801a28a:	2b0a      	cmp	r3, #10
 801a28c:	d019      	beq.n	801a2c2 <_putc_r+0x76>
 801a28e:	6823      	ldr	r3, [r4, #0]
 801a290:	1c5a      	adds	r2, r3, #1
 801a292:	6022      	str	r2, [r4, #0]
 801a294:	701d      	strb	r5, [r3, #0]
 801a296:	b2ed      	uxtb	r5, r5
 801a298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a29a:	07da      	lsls	r2, r3, #31
 801a29c:	d405      	bmi.n	801a2aa <_putc_r+0x5e>
 801a29e:	89a3      	ldrh	r3, [r4, #12]
 801a2a0:	059b      	lsls	r3, r3, #22
 801a2a2:	d402      	bmi.n	801a2aa <_putc_r+0x5e>
 801a2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a2a6:	f7fe feb5 	bl	8019014 <__retarget_lock_release_recursive>
 801a2aa:	4628      	mov	r0, r5
 801a2ac:	bd70      	pop	{r4, r5, r6, pc}
 801a2ae:	4b09      	ldr	r3, [pc, #36]	; (801a2d4 <_putc_r+0x88>)
 801a2b0:	429c      	cmp	r4, r3
 801a2b2:	d101      	bne.n	801a2b8 <_putc_r+0x6c>
 801a2b4:	68b4      	ldr	r4, [r6, #8]
 801a2b6:	e7d6      	b.n	801a266 <_putc_r+0x1a>
 801a2b8:	4b07      	ldr	r3, [pc, #28]	; (801a2d8 <_putc_r+0x8c>)
 801a2ba:	429c      	cmp	r4, r3
 801a2bc:	bf08      	it	eq
 801a2be:	68f4      	ldreq	r4, [r6, #12]
 801a2c0:	e7d1      	b.n	801a266 <_putc_r+0x1a>
 801a2c2:	4629      	mov	r1, r5
 801a2c4:	4622      	mov	r2, r4
 801a2c6:	4630      	mov	r0, r6
 801a2c8:	f7ff f902 	bl	80194d0 <__swbuf_r>
 801a2cc:	4605      	mov	r5, r0
 801a2ce:	e7e3      	b.n	801a298 <_putc_r+0x4c>
 801a2d0:	0801cbe0 	.word	0x0801cbe0
 801a2d4:	0801cc00 	.word	0x0801cc00
 801a2d8:	0801cbc0 	.word	0x0801cbc0

0801a2dc <_read_r>:
 801a2dc:	b538      	push	{r3, r4, r5, lr}
 801a2de:	4d07      	ldr	r5, [pc, #28]	; (801a2fc <_read_r+0x20>)
 801a2e0:	4604      	mov	r4, r0
 801a2e2:	4608      	mov	r0, r1
 801a2e4:	4611      	mov	r1, r2
 801a2e6:	2200      	movs	r2, #0
 801a2e8:	602a      	str	r2, [r5, #0]
 801a2ea:	461a      	mov	r2, r3
 801a2ec:	f7e6 ff19 	bl	8001122 <_read>
 801a2f0:	1c43      	adds	r3, r0, #1
 801a2f2:	d102      	bne.n	801a2fa <_read_r+0x1e>
 801a2f4:	682b      	ldr	r3, [r5, #0]
 801a2f6:	b103      	cbz	r3, 801a2fa <_read_r+0x1e>
 801a2f8:	6023      	str	r3, [r4, #0]
 801a2fa:	bd38      	pop	{r3, r4, r5, pc}
 801a2fc:	20009588 	.word	0x20009588

0801a300 <_fstat_r>:
 801a300:	b538      	push	{r3, r4, r5, lr}
 801a302:	4d07      	ldr	r5, [pc, #28]	; (801a320 <_fstat_r+0x20>)
 801a304:	2300      	movs	r3, #0
 801a306:	4604      	mov	r4, r0
 801a308:	4608      	mov	r0, r1
 801a30a:	4611      	mov	r1, r2
 801a30c:	602b      	str	r3, [r5, #0]
 801a30e:	f7e6 ff4d 	bl	80011ac <_fstat>
 801a312:	1c43      	adds	r3, r0, #1
 801a314:	d102      	bne.n	801a31c <_fstat_r+0x1c>
 801a316:	682b      	ldr	r3, [r5, #0]
 801a318:	b103      	cbz	r3, 801a31c <_fstat_r+0x1c>
 801a31a:	6023      	str	r3, [r4, #0]
 801a31c:	bd38      	pop	{r3, r4, r5, pc}
 801a31e:	bf00      	nop
 801a320:	20009588 	.word	0x20009588

0801a324 <_isatty_r>:
 801a324:	b538      	push	{r3, r4, r5, lr}
 801a326:	4d06      	ldr	r5, [pc, #24]	; (801a340 <_isatty_r+0x1c>)
 801a328:	2300      	movs	r3, #0
 801a32a:	4604      	mov	r4, r0
 801a32c:	4608      	mov	r0, r1
 801a32e:	602b      	str	r3, [r5, #0]
 801a330:	f7e6 ff4c 	bl	80011cc <_isatty>
 801a334:	1c43      	adds	r3, r0, #1
 801a336:	d102      	bne.n	801a33e <_isatty_r+0x1a>
 801a338:	682b      	ldr	r3, [r5, #0]
 801a33a:	b103      	cbz	r3, 801a33e <_isatty_r+0x1a>
 801a33c:	6023      	str	r3, [r4, #0]
 801a33e:	bd38      	pop	{r3, r4, r5, pc}
 801a340:	20009588 	.word	0x20009588

0801a344 <_realloc_r>:
 801a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a348:	4680      	mov	r8, r0
 801a34a:	4614      	mov	r4, r2
 801a34c:	460e      	mov	r6, r1
 801a34e:	b921      	cbnz	r1, 801a35a <_realloc_r+0x16>
 801a350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a354:	4611      	mov	r1, r2
 801a356:	f7fe beaf 	b.w	80190b8 <_malloc_r>
 801a35a:	b92a      	cbnz	r2, 801a368 <_realloc_r+0x24>
 801a35c:	f7ff fae0 	bl	8019920 <_free_r>
 801a360:	4625      	mov	r5, r4
 801a362:	4628      	mov	r0, r5
 801a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a368:	f000 f81b 	bl	801a3a2 <_malloc_usable_size_r>
 801a36c:	4284      	cmp	r4, r0
 801a36e:	4607      	mov	r7, r0
 801a370:	d802      	bhi.n	801a378 <_realloc_r+0x34>
 801a372:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a376:	d812      	bhi.n	801a39e <_realloc_r+0x5a>
 801a378:	4621      	mov	r1, r4
 801a37a:	4640      	mov	r0, r8
 801a37c:	f7fe fe9c 	bl	80190b8 <_malloc_r>
 801a380:	4605      	mov	r5, r0
 801a382:	2800      	cmp	r0, #0
 801a384:	d0ed      	beq.n	801a362 <_realloc_r+0x1e>
 801a386:	42bc      	cmp	r4, r7
 801a388:	4622      	mov	r2, r4
 801a38a:	4631      	mov	r1, r6
 801a38c:	bf28      	it	cs
 801a38e:	463a      	movcs	r2, r7
 801a390:	f7fe fe41 	bl	8019016 <memcpy>
 801a394:	4631      	mov	r1, r6
 801a396:	4640      	mov	r0, r8
 801a398:	f7ff fac2 	bl	8019920 <_free_r>
 801a39c:	e7e1      	b.n	801a362 <_realloc_r+0x1e>
 801a39e:	4635      	mov	r5, r6
 801a3a0:	e7df      	b.n	801a362 <_realloc_r+0x1e>

0801a3a2 <_malloc_usable_size_r>:
 801a3a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3a6:	1f18      	subs	r0, r3, #4
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	bfbc      	itt	lt
 801a3ac:	580b      	ldrlt	r3, [r1, r0]
 801a3ae:	18c0      	addlt	r0, r0, r3
 801a3b0:	4770      	bx	lr
	...

0801a3b4 <_init>:
 801a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3b6:	bf00      	nop
 801a3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3ba:	bc08      	pop	{r3}
 801a3bc:	469e      	mov	lr, r3
 801a3be:	4770      	bx	lr

0801a3c0 <_fini>:
 801a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c2:	bf00      	nop
 801a3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3c6:	bc08      	pop	{r3}
 801a3c8:	469e      	mov	lr, r3
 801a3ca:	4770      	bx	lr
