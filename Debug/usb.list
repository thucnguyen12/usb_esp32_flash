
usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002850  08018ebc  08018ebc  00028ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b70c  0801b70c  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  0801b70c  0801b70c  0002b70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b714  0801b714  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b714  0801b714  0002b714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b718  0801b718  0002b718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0801b71c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030220  2**0
                  CONTENTS
 10 .bss          00009328  20000220  20000220  00030220  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009548  20009548  00030220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035179  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008ace  00000000  00000000  000653c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a20  00000000  00000000  0006de98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002740  00000000  00000000  000708b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000316f2  00000000  00000000  00072ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003cae9  00000000  00000000  000a46ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5972  00000000  00000000  000e11d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d6b45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b718  00000000  00000000  001d6b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018ea4 	.word	0x08018ea4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08018ea4 	.word	0x08018ea4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_DMA_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2105      	movs	r1, #5
 80005ca:	2038      	movs	r0, #56	; 0x38
 80005cc:	f000 ff46 	bl	800145c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005d0:	2038      	movs	r0, #56	; 0x38
 80005d2:	f000 ff6f 	bl	80014b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2105      	movs	r1, #5
 80005da:	203b      	movs	r0, #59	; 0x3b
 80005dc:	f000 ff3e 	bl	800145c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005e0:	203b      	movs	r0, #59	; 0x3b
 80005e2:	f000 ff67 	bl	80014b4 <HAL_NVIC_EnableIRQ>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <__NVIC_SystemReset+0x24>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000606:	4904      	ldr	r1, [pc, #16]	; (8000618 <__NVIC_SystemReset+0x24>)
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_SystemReset+0x28>)
 800060a:	4313      	orrs	r3, r2
 800060c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <__NVIC_SystemReset+0x20>
 8000618:	e000ed00 	.word	0xe000ed00
 800061c:	05fa0004 	.word	0x05fa0004

08000620 <tud_cdc_n_write_str>:
{
  return tud_cdc_n_write(itf, &ch, 1);
}

static inline uint32_t tud_cdc_n_write_str (uint8_t itf, char const* str)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
  return tud_cdc_n_write(itf, str, strlen(str));
 800062c:	6838      	ldr	r0, [r7, #0]
 800062e:	f7ff fdd9 	bl	80001e4 <strlen>
 8000632:	4602      	mov	r2, r0
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f010 fe69 	bl	8011310 <tud_cdc_n_write>
 800063e:	4603      	mov	r3, r0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <tud_cdc_connected>:

static inline bool tud_cdc_connected (void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 800064c:	2000      	movs	r0, #0
 800064e:	f010 fde3 	bl	8011218 <tud_cdc_n_connected>
 8000652:	4603      	mov	r3, r0
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}

08000658 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 800065c:	2000      	movs	r0, #0
 800065e:	f010 fe1b 	bl	8011298 <tud_cdc_n_available>
 8000662:	4603      	mov	r3, r0
}
 8000664:	4618      	mov	r0, r3
 8000666:	bd80      	pop	{r7, pc}

08000668 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	2000      	movs	r0, #0
 8000678:	f010 fe26 	bl	80112c8 <tud_cdc_n_read>
 800067c:	4603      	mov	r3, r0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	2000      	movs	r0, #0
 8000696:	f010 fe3b 	bl	8011310 <tud_cdc_n_write>
 800069a:	4603      	mov	r3, r0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <tud_cdc_write_str>:

static inline uint32_t tud_cdc_write_str (char const* str)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  return tud_cdc_n_write_str(0, str);
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ffb6 	bl	8000620 <tud_cdc_n_write_str>
 80006b4:	4603      	mov	r3, r0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <tud_cdc_write_flush>:

static inline uint32_t tud_cdc_write_flush (void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f010 fe50 	bl	8011368 <tud_cdc_n_write_flush>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	bd80      	pop	{r7, pc}

080006ce <tud_cdc_write_available>:

static inline uint32_t tud_cdc_write_available(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_available(0);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f010 fece 	bl	8011474 <tud_cdc_n_write_available>
 80006d8:	4603      	mov	r3, r0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <vApplicationGetIdleTaskMemory+0x2c>)
 80006f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <vApplicationGetIdleTaskMemory+0x30>)
 80006f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	200014f8 	.word	0x200014f8
 8000710:	200015ac 	.word	0x200015ac

08000714 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_FREERTOS_Init+0x30>)
 800071c:	1d3c      	adds	r4, r7, #4
 800071e:	461d      	mov	r5, r3
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f00a fda4 	bl	800b27e <osThreadCreate>
 8000736:	4603      	mov	r3, r0
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <MX_FREERTOS_Init+0x34>)
 800073a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bdb0      	pop	{r4, r5, r7, pc}
 8000744:	08018ec8 	.word	0x08018ec8
 8000748:	2000023c 	.word	0x2000023c

0800074c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af04      	add	r7, sp, #16
 8000752:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  /* USER CODE BEGIN StartDefaultTask */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000764:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077a:	4619      	mov	r1, r3
 800077c:	485d      	ldr	r0, [pc, #372]	; (80008f4 <StartDefaultTask+0x1a8>)
 800077e:	f001 fb9b 	bl	8001eb8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	485a      	ldr	r0, [pc, #360]	; (80008f4 <StartDefaultTask+0x1a8>)
 800078a:	f001 fe77 	bl	800247c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	4857      	ldr	r0, [pc, #348]	; (80008f4 <StartDefaultTask+0x1a8>)
 8000796:	f001 fe71 	bl	800247c <HAL_GPIO_WritePin>

    MX_FATFS_Init();
 800079a:	f005 fe97 	bl	80064cc <MX_FATFS_Init>

    vTaskDelay(500);		// time for usb renum
 800079e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a2:	f00c f901 	bl	800c9a8 <vTaskDelay>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4851      	ldr	r0, [pc, #324]	; (80008f4 <StartDefaultTask+0x1a8>)
 80007ae:	f001 fe65 	bl	800247c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b8:	484e      	ldr	r0, [pc, #312]	; (80008f4 <StartDefaultTask+0x1a8>)
 80007ba:	f001 fe5f 	bl	800247c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	4847      	ldr	r0, [pc, #284]	; (80008f4 <StartDefaultTask+0x1a8>)
 80007d8:	f001 fb6e 	bl	8001eb8 <HAL_GPIO_Init>

    MX_USB_DEVICE_Init();
 80007dc:	f00f f904 	bl	800f9e8 <MX_USB_DEVICE_Init>
    DEBUG_INFO("tusb_init\r\n");
 80007e0:	f00f fcd6 	bl	8010190 <app_debug_get_ms>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4a44      	ldr	r2, [pc, #272]	; (80008f8 <StartDefaultTask+0x1ac>)
 80007e8:	4619      	mov	r1, r3
 80007ea:	4844      	ldr	r0, [pc, #272]	; (80008fc <StartDefaultTask+0x1b0>)
 80007ec:	f00f fe4c 	bl	8010488 <app_debug_print_raw>


    flash_res = f_mount(&USERFatFS, USERPath, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	4943      	ldr	r1, [pc, #268]	; (8000900 <StartDefaultTask+0x1b4>)
 80007f4:	4843      	ldr	r0, [pc, #268]	; (8000904 <StartDefaultTask+0x1b8>)
 80007f6:	f009 fd29 	bl	800a24c <f_mount>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b42      	ldr	r3, [pc, #264]	; (8000908 <StartDefaultTask+0x1bc>)
 8000800:	701a      	strb	r2, [r3, #0]
	if (flash_res != FR_OK)
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <StartDefaultTask+0x1bc>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d033      	beq.n	8000872 <StartDefaultTask+0x126>
	{
		DEBUG_WARN("Mount flash fail\r\n");
 800080a:	f00f fcc1 	bl	8010190 <app_debug_get_ms>
 800080e:	4603      	mov	r3, r0
 8000810:	4a39      	ldr	r2, [pc, #228]	; (80008f8 <StartDefaultTask+0x1ac>)
 8000812:	4619      	mov	r1, r3
 8000814:	483d      	ldr	r0, [pc, #244]	; (800090c <StartDefaultTask+0x1c0>)
 8000816:	f00f fe37 	bl	8010488 <app_debug_print_raw>
		flash_res = f_mkfs(USERPath, FM_ANY, 0, gFSWork, sizeof gFSWork);
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <StartDefaultTask+0x1c4>)
 8000822:	2200      	movs	r2, #0
 8000824:	2107      	movs	r1, #7
 8000826:	4836      	ldr	r0, [pc, #216]	; (8000900 <StartDefaultTask+0x1b4>)
 8000828:	f009 ff3a 	bl	800a6a0 <f_mkfs>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b35      	ldr	r3, [pc, #212]	; (8000908 <StartDefaultTask+0x1bc>)
 8000832:	701a      	strb	r2, [r3, #0]
		flash_res = f_mount(&USERFatFS, USERPath, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	4932      	ldr	r1, [pc, #200]	; (8000900 <StartDefaultTask+0x1b4>)
 8000838:	4832      	ldr	r0, [pc, #200]	; (8000904 <StartDefaultTask+0x1b8>)
 800083a:	f009 fd07 	bl	800a24c <f_mount>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b31      	ldr	r3, [pc, #196]	; (8000908 <StartDefaultTask+0x1bc>)
 8000844:	701a      	strb	r2, [r3, #0]
		if (flash_res == FR_OK)
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <StartDefaultTask+0x1bc>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d108      	bne.n	8000860 <StartDefaultTask+0x114>
		{
			DEBUG_INFO ("format disk and mount again\r\n");
 800084e:	f00f fc9f 	bl	8010190 <app_debug_get_ms>
 8000852:	4603      	mov	r3, r0
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <StartDefaultTask+0x1ac>)
 8000856:	4619      	mov	r1, r3
 8000858:	482e      	ldr	r0, [pc, #184]	; (8000914 <StartDefaultTask+0x1c8>)
 800085a:	f00f fe15 	bl	8010488 <app_debug_print_raw>
 800085e:	e010      	b.n	8000882 <StartDefaultTask+0x136>
		}
		else
		{
			DEBUG_ERROR("Mount flash error\r\n");
 8000860:	f00f fc96 	bl	8010190 <app_debug_get_ms>
 8000864:	4603      	mov	r3, r0
 8000866:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <StartDefaultTask+0x1ac>)
 8000868:	4619      	mov	r1, r3
 800086a:	482b      	ldr	r0, [pc, #172]	; (8000918 <StartDefaultTask+0x1cc>)
 800086c:	f00f fe0c 	bl	8010488 <app_debug_print_raw>
 8000870:	e007      	b.n	8000882 <StartDefaultTask+0x136>
		}
	}
	else
	{
		DEBUG_INFO ("Mount flash ok\r\n");
 8000872:	f00f fc8d 	bl	8010190 <app_debug_get_ms>
 8000876:	4603      	mov	r3, r0
 8000878:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <StartDefaultTask+0x1ac>)
 800087a:	4619      	mov	r1, r3
 800087c:	4827      	ldr	r0, [pc, #156]	; (800091c <StartDefaultTask+0x1d0>)
 800087e:	f00f fe03 	bl	8010488 <app_debug_print_raw>
	}
	TCHAR label[32];
	f_getlabel(USERPath, label, 0);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	481d      	ldr	r0, [pc, #116]	; (8000900 <StartDefaultTask+0x1b4>)
 800088c:	f009 fd42 	bl	800a314 <f_getlabel>
	DEBUG_INFO("Label %s\r\n", label);
 8000890:	f00f fc7e 	bl	8010190 <app_debug_get_ms>
 8000894:	4601      	mov	r1, r0
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <StartDefaultTask+0x1ac>)
 800089c:	4820      	ldr	r0, [pc, #128]	; (8000920 <StartDefaultTask+0x1d4>)
 800089e:	f00f fdf3 	bl	8010488 <app_debug_print_raw>
	if (strcmp(label, "BSAFE JIG"))
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	491f      	ldr	r1, [pc, #124]	; (8000924 <StartDefaultTask+0x1d8>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fc91 	bl	80001d0 <strcmp>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00a      	beq.n	80008ca <StartDefaultTask+0x17e>
	{
		DEBUG_INFO("Set label\r\n");
 80008b4:	f00f fc6c 	bl	8010190 <app_debug_get_ms>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <StartDefaultTask+0x1ac>)
 80008bc:	4619      	mov	r1, r3
 80008be:	481a      	ldr	r0, [pc, #104]	; (8000928 <StartDefaultTask+0x1dc>)
 80008c0:	f00f fde2 	bl	8010488 <app_debug_print_raw>
		f_setlabel("BSAFE JIG");
 80008c4:	4817      	ldr	r0, [pc, #92]	; (8000924 <StartDefaultTask+0x1d8>)
 80008c6:	f009 fdc7 	bl	800a458 <f_setlabel>
	}

    tusb_init();
 80008ca:	f016 fded 	bl	80174a8 <tusb_init>
  // Create CDC task
  (void) xTaskCreateStatic(cdc_task, "cdc", CDC_STACK_SZIE, NULL, configMAX_PRIORITIES-2, cdc_stack, &cdc_taskdef);
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <StartDefaultTask+0x1e0>)
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <StartDefaultTask+0x1e4>)
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	2305      	movs	r3, #5
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	4915      	ldr	r1, [pc, #84]	; (8000934 <StartDefaultTask+0x1e8>)
 80008e0:	4815      	ldr	r0, [pc, #84]	; (8000938 <StartDefaultTask+0x1ec>)
 80008e2:	f00b fe39 	bl	800c558 <xTaskCreateStatic>

  /* Infinite loop */
  for(;;)
  {
    tud_task();
 80008e6:	f013 fb39 	bl	8013f5c <tud_task>
    osDelay(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f00a fd13 	bl	800b316 <osDelay>
    tud_task();
 80008f0:	e7f9      	b.n	80008e6 <StartDefaultTask+0x19a>
 80008f2:	bf00      	nop
 80008f4:	40020000 	.word	0x40020000
 80008f8:	08018ee4 	.word	0x08018ee4
 80008fc:	08018ee8 	.word	0x08018ee8
 8000900:	20001d34 	.word	0x20001d34
 8000904:	20001d38 	.word	0x20001d38
 8000908:	20001240 	.word	0x20001240
 800090c:	08018f0c 	.word	0x08018f0c
 8000910:	20000240 	.word	0x20000240
 8000914:	08018f38 	.word	0x08018f38
 8000918:	08018f70 	.word	0x08018f70
 800091c:	08018f9c 	.word	0x08018f9c
 8000920:	08018fc4 	.word	0x08018fc4
 8000924:	08018fe8 	.word	0x08018fe8
 8000928:	08018ff4 	.word	0x08018ff4
 800092c:	20001444 	.word	0x20001444
 8000930:	20001244 	.word	0x20001244
 8000934:	08019018 	.word	0x08019018
 8000938:	08000961 	.word	0x08000961

0800093c <cdc_tx>:

static bool m_cdc_debug_register = false;
static lwrb_t m_ringbuffer_usb_cdc_tx;
static uint8_t m_lwrb_tx_raw_buffer[USB_CDC_TX_RING_BUFFER_SIZE];
uint32_t cdc_tx(const void *buffer, uint32_t size)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	lwrb_write(&m_ringbuffer_usb_cdc_tx, buffer, size);
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <cdc_tx+0x20>)
 800094c:	f010 fa91 	bl	8010e72 <lwrb_write>
	return size;
 8000950:	683b      	ldr	r3, [r7, #0]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200017b0 	.word	0x200017b0

08000960 <cdc_task>:

void cdc_task(void* params)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b096      	sub	sp, #88	; 0x58
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	lwrb_init(&m_ringbuffer_usb_cdc_tx, m_lwrb_tx_raw_buffer, USB_CDC_TX_RING_BUFFER_SIZE);
 8000968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096c:	4938      	ldr	r1, [pc, #224]	; (8000a50 <cdc_task+0xf0>)
 800096e:	4839      	ldr	r0, [pc, #228]	; (8000a54 <cdc_task+0xf4>)
 8000970:	f010 fa5e 	bl	8010e30 <lwrb_init>
	for (;;)
	{
//	    // connected() check for DTR bit
//	    // Most but not all terminal client set this when making connection
	    if (tud_cdc_connected())
 8000974:	f7ff fe68 	bl	8000648 <tud_cdc_connected>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d031      	beq.n	80009e2 <cdc_task+0x82>
		{
	    	if (m_cdc_debug_register == false)
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <cdc_task+0xf8>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	f083 0301 	eor.w	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d005      	beq.n	8000998 <cdc_task+0x38>
	    	{
	    		m_cdc_debug_register = true;
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <cdc_task+0xf8>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
	    		app_debug_register_callback_print(cdc_tx);
 8000992:	4832      	ldr	r0, [pc, #200]	; (8000a5c <cdc_task+0xfc>)
 8000994:	f00f ffbe 	bl	8010914 <app_debug_register_callback_print>
	    	}
			// There are data available
			if (tud_cdc_available())
 8000998:	f7ff fe5e 	bl	8000658 <tud_cdc_available>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d034      	beq.n	8000a0c <cdc_task+0xac>
			{
				uint8_t buf[64];

				// read and echo back
				uint32_t count = tud_cdc_read(buf, sizeof(buf));
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe5d 	bl	8000668 <tud_cdc_read>
 80009ae:	6538      	str	r0, [r7, #80]	; 0x50
				(void) count;

				if (count && strstr((char*)buf, "RESET"))
 80009b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d02a      	beq.n	8000a0c <cdc_task+0xac>
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4929      	ldr	r1, [pc, #164]	; (8000a60 <cdc_task+0x100>)
 80009bc:	4618      	mov	r0, r3
 80009be:	f017 fae8 	bl	8017f92 <strstr>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d021      	beq.n	8000a0c <cdc_task+0xac>
				{
					tud_cdc_write_flush();
 80009c8:	f7ff fe79 	bl	80006be <tud_cdc_write_flush>
					tud_cdc_write_str("System reset\r\n");
 80009cc:	4825      	ldr	r0, [pc, #148]	; (8000a64 <cdc_task+0x104>)
 80009ce:	f7ff fe69 	bl	80006a4 <tud_cdc_write_str>
					tud_cdc_write_flush();
 80009d2:	f7ff fe74 	bl	80006be <tud_cdc_write_flush>
					vTaskDelay(1000);
 80009d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009da:	f00b ffe5 	bl	800c9a8 <vTaskDelay>
					NVIC_SystemReset();
 80009de:	f7ff fe09 	bl	80005f4 <__NVIC_SystemReset>
//				tud_cdc_write_flush();
			}
		}
	    else
	    {
	    	if (m_cdc_debug_register)
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <cdc_task+0xf8>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d010      	beq.n	8000a0c <cdc_task+0xac>
	    	{
	    		m_cdc_debug_register = false;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <cdc_task+0xf8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	    		app_debug_unregister_callback_print(cdc_tx);
 80009f0:	481a      	ldr	r0, [pc, #104]	; (8000a5c <cdc_task+0xfc>)
 80009f2:	f00f ffd7 	bl	80109a4 <app_debug_unregister_callback_print>
		    	// Flush all cdc tx buffer
		    	char tmp[1];
		    	while (lwrb_read(&m_ringbuffer_usb_cdc_tx, tmp, 1))
 80009f6:	bf00      	nop
 80009f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009fc:	2201      	movs	r2, #1
 80009fe:	4619      	mov	r1, r3
 8000a00:	4814      	ldr	r0, [pc, #80]	; (8000a54 <cdc_task+0xf4>)
 8000a02:	f010 faad 	bl	8010f60 <lwrb_read>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1f5      	bne.n	80009f8 <cdc_task+0x98>

	    char buffer[ (TUD_OPT_HIGH_SPEED ? 512 : 64)];
	    uint32_t size;
	    while (1)
	    {
	    	uint32_t avai = tud_cdc_write_available();
 8000a0c:	f7ff fe5f 	bl	80006ce <tud_cdc_write_available>
 8000a10:	6578      	str	r0, [r7, #84]	; 0x54
	    	if (avai >= sizeof(buffer))
 8000a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a14:	2b3f      	cmp	r3, #63	; 0x3f
 8000a16:	d901      	bls.n	8000a1c <cdc_task+0xbc>
	    	{
	    		avai = sizeof(buffer);
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
	    	}
			size = lwrb_read(&m_ringbuffer_usb_cdc_tx, buffer, avai);
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <cdc_task+0xf4>)
 8000a26:	f010 fa9b 	bl	8010f60 <lwrb_read>
 8000a2a:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (size)
 8000a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d008      	beq.n	8000a44 <cdc_task+0xe4>
			{
				tud_cdc_write(buffer, size);
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe24 	bl	8000686 <tud_cdc_write>
				tud_cdc_write_flush();
 8000a3e:	f7ff fe3e 	bl	80006be <tud_cdc_write_flush>
	    {
 8000a42:	e7e3      	b.n	8000a0c <cdc_task+0xac>
			}
			else
			{
				break;
 8000a44:	bf00      	nop
			}
	    }
	    vTaskDelay(pdMS_TO_TICKS(1));
 8000a46:	2001      	movs	r0, #1
 8000a48:	f00b ffae 	bl	800c9a8 <vTaskDelay>
	{
 8000a4c:	e792      	b.n	8000974 <cdc_task+0x14>
 8000a4e:	bf00      	nop
 8000a50:	200017c4 	.word	0x200017c4
 8000a54:	200017b0 	.word	0x200017b0
 8000a58:	200017ac 	.word	0x200017ac
 8000a5c:	0800093d 	.word	0x0800093d
 8000a60:	0801901c 	.word	0x0801901c
 8000a64:	08019024 	.word	0x08019024

08000a68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_GPIO_Init+0x9c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <MX_GPIO_Init+0x9c>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_GPIO_Init+0x9c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_GPIO_Init+0x9c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <MX_GPIO_Init+0x9c>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_GPIO_Init+0x9c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_GPIO_Init+0x9c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <MX_GPIO_Init+0x9c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_GPIO_Init+0x9c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <MX_GPIO_Init+0xa0>)
 8000ada:	f001 fccf 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000ade:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_GPIO_Init+0xa0>)
 8000af8:	f001 f9de 	bl	8001eb8 <HAL_GPIO_Init>

}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fb70 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f828 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f7ff ffa6 	bl	8000a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1c:	f7ff fd42 	bl	80005a4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b20:	f000 f8e6 	bl	8000cf0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	m_lock_debug = xSemaphoreCreateMutex();
 8000b24:	2001      	movs	r0, #1
 8000b26:	f00a fedc 	bl	800b8e2 <xQueueCreateMutex>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <main+0x4c>)
 8000b2e:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(m_lock_debug);
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <main+0x4c>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	2300      	movs	r3, #0
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f00a ff05 	bl	800b948 <xQueueGenericSend>
	app_debug_init(sys_get_ms, lock_debug);
 8000b3e:	4907      	ldr	r1, [pc, #28]	; (8000b5c <main+0x50>)
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <main+0x54>)
 8000b42:	f00f fb0f 	bl	8010164 <app_debug_init>
	app_debug_register_callback_print(rtt_tx);
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <main+0x58>)
 8000b48:	f00f fee4 	bl	8010914 <app_debug_register_callback_print>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b4c:	f7ff fde2 	bl	8000714 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b50:	f00a fb8e 	bl	800b270 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <main+0x48>
 8000b56:	bf00      	nop
 8000b58:	20001bc4 	.word	0x20001bc4
 8000b5c:	08000c69 	.word	0x08000c69
 8000b60:	08000c3d 	.word	0x08000c3d
 8000b64:	08000c4b 	.word	0x08000c4b

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	2230      	movs	r2, #48	; 0x30
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f016 ffed 	bl	8017b56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a27      	ldr	r2, [pc, #156]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bdc:	23a8      	movs	r3, #168	; 0xa8
 8000bde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000be4:	2307      	movs	r3, #7
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 f879 	bl	8002ce4 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bf8:	f000 f869 	bl	8000cce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2302      	movs	r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2105      	movs	r1, #5
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fb8a 	bl	8003334 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c26:	f000 f852 	bl	8000cce <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3750      	adds	r7, #80	; 0x50
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <sys_get_ms>:

/* USER CODE BEGIN 4 */
uint32_t sys_get_ms(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000c40:	f000 fb0e 	bl	8001260 <HAL_GetTick>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <rtt_tx>:

uint32_t rtt_tx(const void *buffer, uint32_t size)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
    return SEGGER_RTT_Write(0, buffer, size);
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f00d fac9 	bl	800e1f0 <SEGGER_RTT_Write>
 8000c5e:	4603      	mov	r3, r0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <lock_debug>:


bool lock_debug(bool lock, uint32_t timeout_ms)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
	if (lock)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00c      	beq.n	8000c94 <lock_debug+0x2c>
		return xSemaphoreTake(m_lock_debug, timeout_ms);
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <lock_debug+0x44>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6839      	ldr	r1, [r7, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f00b f967 	bl	800bf54 <xQueueSemaphoreTake>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bf14      	ite	ne
 8000c8c:	2301      	movne	r3, #1
 8000c8e:	2300      	moveq	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	e007      	b.n	8000ca4 <lock_debug+0x3c>
	xSemaphoreGive(m_lock_debug);
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <lock_debug+0x44>)
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	f00a fe53 	bl	800b948 <xQueueGenericSend>
	return true;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20001bc4 	.word	0x20001bc4

08000cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc0:	d101      	bne.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cc2:	f000 fab9 	bl	8001238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd2:	b672      	cpsid	i
}
 8000cd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <Error_Handler+0x8>

08000cd8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000cf6:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <MX_SPI1_Init+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000cfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d24:	2208      	movs	r2, #8
 8000d26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_SPI1_Init+0x64>)
 8000d42:	f002 fddd 	bl	8003900 <HAL_SPI_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d4c:	f7ff ffbf 	bl	8000cce <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20001bc8 	.word	0x20001bc8
 8000d58:	40013000 	.word	0x40013000

08000d5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a47      	ldr	r2, [pc, #284]	; (8000e98 <HAL_SPI_MspInit+0x13c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	f040 8088 	bne.w	8000e90 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	4b45      	ldr	r3, [pc, #276]	; (8000e9c <HAL_SPI_MspInit+0x140>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	4a44      	ldr	r2, [pc, #272]	; (8000e9c <HAL_SPI_MspInit+0x140>)
 8000d8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d90:	4b42      	ldr	r3, [pc, #264]	; (8000e9c <HAL_SPI_MspInit+0x140>)
 8000d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4b3e      	ldr	r3, [pc, #248]	; (8000e9c <HAL_SPI_MspInit+0x140>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a3d      	ldr	r2, [pc, #244]	; (8000e9c <HAL_SPI_MspInit+0x140>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <HAL_SPI_MspInit+0x140>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000db8:	2338      	movs	r3, #56	; 0x38
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc8:	2305      	movs	r3, #5
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4833      	ldr	r0, [pc, #204]	; (8000ea0 <HAL_SPI_MspInit+0x144>)
 8000dd4:	f001 f870 	bl	8001eb8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000dda:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <HAL_SPI_MspInit+0x14c>)
 8000ddc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000de0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000de4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e18:	4822      	ldr	r0, [pc, #136]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000e1a:	f000 fb63 	bl	80014e4 <HAL_DMA_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000e24:	f7ff ff53 	bl	8000cce <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000e2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_SPI_MspInit+0x148>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e36:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <HAL_SPI_MspInit+0x154>)
 8000e38:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e3c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e44:	2240      	movs	r2, #64	; 0x40
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e76:	f000 fb35 	bl	80014e4 <HAL_DMA_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000e80:	f7ff ff25 	bl	8000cce <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e88:	649a      	str	r2, [r3, #72]	; 0x48
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_SPI_MspInit+0x150>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40013000 	.word	0x40013000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	20001c20 	.word	0x20001c20
 8000ea8:	40026410 	.word	0x40026410
 8000eac:	20001c80 	.word	0x20001c80
 8000eb0:	40026458 	.word	0x40026458

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_MspInit+0x54>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_MspInit+0x54>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x54>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_MspInit+0x54>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_MspInit+0x54>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_MspInit+0x54>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	f06f 0001 	mvn.w	r0, #1
 8000efa:	f000 faaf 	bl	800145c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	201c      	movs	r0, #28
 8000f22:	f000 fa9b 	bl	800145c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f26:	201c      	movs	r0, #28
 8000f28:	f000 fac4 	bl	80014b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_InitTick+0xa8>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <HAL_InitTick+0xa8>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_InitTick+0xa8>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f48:	f107 0210 	add.w	r2, r7, #16
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fca2 	bl	800389c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f58:	f002 fc8c 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_InitTick+0xac>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0c9b      	lsrs	r3, r3, #18
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f84:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <HAL_InitTick+0xb0>)
 8000f94:	f003 fd4e 	bl	8004a34 <HAL_TIM_Base_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d104      	bne.n	8000fa8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <HAL_InitTick+0xb0>)
 8000fa0:	f003 fe42 	bl	8004c28 <HAL_TIM_Base_Start_IT>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	e000      	b.n	8000faa <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3730      	adds	r7, #48	; 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	20001ce0 	.word	0x20001ce0

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM2_IRQHandler+0x10>)
 8000ff2:	f003 fedf 	bl	8004db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20001ce0 	.word	0x20001ce0

08001000 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <DMA2_Stream0_IRQHandler+0x10>)
 8001006:	f000 fced 	bl	80019e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20001c20 	.word	0x20001c20

08001014 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <DMA2_Stream3_IRQHandler+0x10>)
 800101a:	f000 fce3 	bl	80019e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20001c80 	.word	0x20001c80

08001028 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
    tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 800102c:	2000      	movs	r0, #0
 800102e:	f016 f92d 	bl	801728c <dcd_int_handler>
    return;
 8001032:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001034:	bd80      	pop	{r7, pc}

08001036 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e00a      	b.n	800105e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001048:	f3af 8000 	nop.w
 800104c:	4601      	mov	r1, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	b2ca      	uxtb	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbf0      	blt.n	8001048 <_read+0x12>
	}

return len;
 8001066:	687b      	ldr	r3, [r7, #4]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e009      	b.n	8001096 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	60ba      	str	r2, [r7, #8]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbf1      	blt.n	8001082 <_write+0x12>
	}
	return len;
 800109e:	687b      	ldr	r3, [r7, #4]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_close>:

int _close(int file)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	return -1;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d0:	605a      	str	r2, [r3, #4]
	return 0;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_isatty>:

int _isatty(int file)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b085      	sub	sp, #20
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
	return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f016 fbbe 	bl	80178c0 <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20020000 	.word	0x20020000
 8001170:	00000400 	.word	0x00000400
 8001174:	20001d28 	.word	0x20001d28
 8001178:	20009548 	.word	0x20009548

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011bc:	4c0b      	ldr	r4, [pc, #44]	; (80011ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ca:	f7ff ffd7 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f016 fc73 	bl	8017ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fc9b 	bl	8000b0c <main>
  bx  lr    
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80011e4:	0801b71c 	.word	0x0801b71c
  ldr r2, =_sbss
 80011e8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80011ec:	20009548 	.word	0x20009548

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f8fd 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	200f      	movs	r0, #15
 8001224:	f7ff fe72 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fe44 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008
 800125c:	20001d2c 	.word	0x20001d2c

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20001d2c 	.word	0x20001d2c

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008

080012c0 <__NVIC_SetPriorityGrouping>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b07      	cmp	r3, #7
 8001428:	d00f      	beq.n	800144a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b06      	cmp	r3, #6
 800142e:	d00c      	beq.n	800144a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d009      	beq.n	800144a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d006      	beq.n	800144a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d003      	beq.n	800144a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001442:	2190      	movs	r1, #144	; 0x90
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001446:	f7ff fc47 	bl	8000cd8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff38 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	08019034 	.word	0x08019034

0800145c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d903      	bls.n	800147c <HAL_NVIC_SetPriority+0x20>
 8001474:	21a8      	movs	r1, #168	; 0xa8
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <HAL_NVIC_SetPriority+0x54>)
 8001478:	f7ff fc2e 	bl	8000cd8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	d903      	bls.n	800148a <HAL_NVIC_SetPriority+0x2e>
 8001482:	21a9      	movs	r1, #169	; 0xa9
 8001484:	480a      	ldr	r0, [pc, #40]	; (80014b0 <HAL_NVIC_SetPriority+0x54>)
 8001486:	f7ff fc27 	bl	8000cd8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148a:	f7ff ff3d 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800148e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	6978      	ldr	r0, [r7, #20]
 8001496:	f7ff ff8d 	bl	80013b4 <NVIC_EncodePriority>
 800149a:	4602      	mov	r2, r0
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff5c 	bl	8001360 <__NVIC_SetPriority>
}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	08019034 	.word	0x08019034

080014b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da03      	bge.n	80014ce <HAL_NVIC_EnableIRQ+0x1a>
 80014c6:	21bc      	movs	r1, #188	; 0xbc
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_NVIC_EnableIRQ+0x2c>)
 80014ca:	f7ff fc05 	bl	8000cd8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff26 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	08019034 	.word	0x08019034

080014e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff feb6 	bl	8001260 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e203      	b.n	8001908 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a8b      	ldr	r2, [pc, #556]	; (8001734 <HAL_DMA_Init+0x250>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d04e      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a8a      	ldr	r2, [pc, #552]	; (8001738 <HAL_DMA_Init+0x254>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d049      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a88      	ldr	r2, [pc, #544]	; (800173c <HAL_DMA_Init+0x258>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d044      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a87      	ldr	r2, [pc, #540]	; (8001740 <HAL_DMA_Init+0x25c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d03f      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a85      	ldr	r2, [pc, #532]	; (8001744 <HAL_DMA_Init+0x260>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d03a      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a84      	ldr	r2, [pc, #528]	; (8001748 <HAL_DMA_Init+0x264>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d035      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a82      	ldr	r2, [pc, #520]	; (800174c <HAL_DMA_Init+0x268>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d030      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a81      	ldr	r2, [pc, #516]	; (8001750 <HAL_DMA_Init+0x26c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d02b      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a7f      	ldr	r2, [pc, #508]	; (8001754 <HAL_DMA_Init+0x270>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d026      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a7e      	ldr	r2, [pc, #504]	; (8001758 <HAL_DMA_Init+0x274>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d021      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a7c      	ldr	r2, [pc, #496]	; (800175c <HAL_DMA_Init+0x278>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01c      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7b      	ldr	r2, [pc, #492]	; (8001760 <HAL_DMA_Init+0x27c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d017      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a79      	ldr	r2, [pc, #484]	; (8001764 <HAL_DMA_Init+0x280>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d012      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a78      	ldr	r2, [pc, #480]	; (8001768 <HAL_DMA_Init+0x284>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00d      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a76      	ldr	r2, [pc, #472]	; (800176c <HAL_DMA_Init+0x288>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d008      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a75      	ldr	r2, [pc, #468]	; (8001770 <HAL_DMA_Init+0x28c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d003      	beq.n	80015a8 <HAL_DMA_Init+0xc4>
 80015a0:	21b7      	movs	r1, #183	; 0xb7
 80015a2:	4874      	ldr	r0, [pc, #464]	; (8001774 <HAL_DMA_Init+0x290>)
 80015a4:	f7ff fb98 	bl	8000cd8 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d026      	beq.n	80015fe <HAL_DMA_Init+0x11a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015b8:	d021      	beq.n	80015fe <HAL_DMA_Init+0x11a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015c2:	d01c      	beq.n	80015fe <HAL_DMA_Init+0x11a>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80015cc:	d017      	beq.n	80015fe <HAL_DMA_Init+0x11a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015d6:	d012      	beq.n	80015fe <HAL_DMA_Init+0x11a>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80015e0:	d00d      	beq.n	80015fe <HAL_DMA_Init+0x11a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80015ea:	d008      	beq.n	80015fe <HAL_DMA_Init+0x11a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80015f4:	d003      	beq.n	80015fe <HAL_DMA_Init+0x11a>
 80015f6:	21b8      	movs	r1, #184	; 0xb8
 80015f8:	485e      	ldr	r0, [pc, #376]	; (8001774 <HAL_DMA_Init+0x290>)
 80015fa:	f7ff fb6d 	bl	8000cd8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_DMA_Init+0x13a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b40      	cmp	r3, #64	; 0x40
 800160c:	d007      	beq.n	800161e <HAL_DMA_Init+0x13a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b80      	cmp	r3, #128	; 0x80
 8001614:	d003      	beq.n	800161e <HAL_DMA_Init+0x13a>
 8001616:	21b9      	movs	r1, #185	; 0xb9
 8001618:	4856      	ldr	r0, [pc, #344]	; (8001774 <HAL_DMA_Init+0x290>)
 800161a:	f7ff fb5d 	bl	8000cd8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001626:	d007      	beq.n	8001638 <HAL_DMA_Init+0x154>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_DMA_Init+0x154>
 8001630:	21ba      	movs	r1, #186	; 0xba
 8001632:	4850      	ldr	r0, [pc, #320]	; (8001774 <HAL_DMA_Init+0x290>)
 8001634:	f7ff fb50 	bl	8000cd8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001640:	d007      	beq.n	8001652 <HAL_DMA_Init+0x16e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_DMA_Init+0x16e>
 800164a:	21bb      	movs	r1, #187	; 0xbb
 800164c:	4849      	ldr	r0, [pc, #292]	; (8001774 <HAL_DMA_Init+0x290>)
 800164e:	f7ff fb43 	bl	8000cd8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00d      	beq.n	8001676 <HAL_DMA_Init+0x192>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001662:	d008      	beq.n	8001676 <HAL_DMA_Init+0x192>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166c:	d003      	beq.n	8001676 <HAL_DMA_Init+0x192>
 800166e:	21bc      	movs	r1, #188	; 0xbc
 8001670:	4840      	ldr	r0, [pc, #256]	; (8001774 <HAL_DMA_Init+0x290>)
 8001672:	f7ff fb31 	bl	8000cd8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00d      	beq.n	800169a <HAL_DMA_Init+0x1b6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001686:	d008      	beq.n	800169a <HAL_DMA_Init+0x1b6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001690:	d003      	beq.n	800169a <HAL_DMA_Init+0x1b6>
 8001692:	21bd      	movs	r1, #189	; 0xbd
 8001694:	4837      	ldr	r0, [pc, #220]	; (8001774 <HAL_DMA_Init+0x290>)
 8001696:	f7ff fb1f 	bl	8000cd8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00c      	beq.n	80016bc <HAL_DMA_Init+0x1d8>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016aa:	d007      	beq.n	80016bc <HAL_DMA_Init+0x1d8>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d003      	beq.n	80016bc <HAL_DMA_Init+0x1d8>
 80016b4:	21be      	movs	r1, #190	; 0xbe
 80016b6:	482f      	ldr	r0, [pc, #188]	; (8001774 <HAL_DMA_Init+0x290>)
 80016b8:	f7ff fb0e 	bl	8000cd8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d012      	beq.n	80016ea <HAL_DMA_Init+0x206>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016cc:	d00d      	beq.n	80016ea <HAL_DMA_Init+0x206>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016d6:	d008      	beq.n	80016ea <HAL_DMA_Init+0x206>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80016e0:	d003      	beq.n	80016ea <HAL_DMA_Init+0x206>
 80016e2:	21bf      	movs	r1, #191	; 0xbf
 80016e4:	4823      	ldr	r0, [pc, #140]	; (8001774 <HAL_DMA_Init+0x290>)
 80016e6:	f7ff faf7 	bl	8000cd8 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_DMA_Init+0x21e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d003      	beq.n	8001702 <HAL_DMA_Init+0x21e>
 80016fa:	21c0      	movs	r1, #192	; 0xc0
 80016fc:	481d      	ldr	r0, [pc, #116]	; (8001774 <HAL_DMA_Init+0x290>)
 80016fe:	f7ff faeb 	bl	8000cd8 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2b00      	cmp	r3, #0
 8001708:	d064      	beq.n	80017d4 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	d032      	beq.n	8001778 <HAL_DMA_Init+0x294>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	2b01      	cmp	r3, #1
 8001718:	d02e      	beq.n	8001778 <HAL_DMA_Init+0x294>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	2b02      	cmp	r3, #2
 8001720:	d02a      	beq.n	8001778 <HAL_DMA_Init+0x294>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	2b03      	cmp	r3, #3
 8001728:	d026      	beq.n	8001778 <HAL_DMA_Init+0x294>
 800172a:	21c5      	movs	r1, #197	; 0xc5
 800172c:	4811      	ldr	r0, [pc, #68]	; (8001774 <HAL_DMA_Init+0x290>)
 800172e:	f7ff fad3 	bl	8000cd8 <assert_failed>
 8001732:	e021      	b.n	8001778 <HAL_DMA_Init+0x294>
 8001734:	40026010 	.word	0x40026010
 8001738:	40026028 	.word	0x40026028
 800173c:	40026040 	.word	0x40026040
 8001740:	40026058 	.word	0x40026058
 8001744:	40026070 	.word	0x40026070
 8001748:	40026088 	.word	0x40026088
 800174c:	400260a0 	.word	0x400260a0
 8001750:	400260b8 	.word	0x400260b8
 8001754:	40026410 	.word	0x40026410
 8001758:	40026428 	.word	0x40026428
 800175c:	40026440 	.word	0x40026440
 8001760:	40026458 	.word	0x40026458
 8001764:	40026470 	.word	0x40026470
 8001768:	40026488 	.word	0x40026488
 800176c:	400264a0 	.word	0x400264a0
 8001770:	400264b8 	.word	0x400264b8
 8001774:	08019070 	.word	0x08019070
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	2b00      	cmp	r3, #0
 800177e:	d012      	beq.n	80017a6 <HAL_DMA_Init+0x2c2>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001788:	d00d      	beq.n	80017a6 <HAL_DMA_Init+0x2c2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001792:	d008      	beq.n	80017a6 <HAL_DMA_Init+0x2c2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800179c:	d003      	beq.n	80017a6 <HAL_DMA_Init+0x2c2>
 800179e:	21c6      	movs	r1, #198	; 0xc6
 80017a0:	485b      	ldr	r0, [pc, #364]	; (8001910 <HAL_DMA_Init+0x42c>)
 80017a2:	f7ff fa99 	bl	8000cd8 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d012      	beq.n	80017d4 <HAL_DMA_Init+0x2f0>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017b6:	d00d      	beq.n	80017d4 <HAL_DMA_Init+0x2f0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017c0:	d008      	beq.n	80017d4 <HAL_DMA_Init+0x2f0>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80017ca:	d003      	beq.n	80017d4 <HAL_DMA_Init+0x2f0>
 80017cc:	21c7      	movs	r1, #199	; 0xc7
 80017ce:	4850      	ldr	r0, [pc, #320]	; (8001910 <HAL_DMA_Init+0x42c>)
 80017d0:	f7ff fa82 	bl	8000cd8 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f4:	e00f      	b.n	8001816 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f6:	f7ff fd33 	bl	8001260 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b05      	cmp	r3, #5
 8001802:	d908      	bls.n	8001816 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2220      	movs	r2, #32
 8001808:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e078      	b.n	8001908 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e8      	bne.n	80017f6 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_DMA_Init+0x430>)
 8001830:	4013      	ands	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	2b04      	cmp	r3, #4
 800186e:	d107      	bne.n	8001880 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4313      	orrs	r3, r2
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f023 0307 	bic.w	r3, r3, #7
 8001896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d117      	bne.n	80018da <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00e      	beq.n	80018da <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fa7f 	bl	8001dc0 <DMA_CheckFifoParam>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018d6:	2301      	movs	r3, #1
 80018d8:	e016      	b.n	8001908 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fa36 	bl	8001d54 <DMA_CalcBaseAndBitshift>
 80018e8:	4603      	mov	r3, r0
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	223f      	movs	r2, #63	; 0x3f
 80018f2:	409a      	lsls	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	08019070 	.word	0x08019070
 8001914:	f010803f 	.word	0xf010803f

08001918 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_DMA_Start_IT+0x26>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d304      	bcc.n	8001948 <HAL_DMA_Start_IT+0x30>
 800193e:	f240 11cb 	movw	r1, #459	; 0x1cb
 8001942:	4827      	ldr	r0, [pc, #156]	; (80019e0 <HAL_DMA_Start_IT+0xc8>)
 8001944:	f7ff f9c8 	bl	8000cd8 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_DMA_Start_IT+0x3e>
 8001952:	2302      	movs	r3, #2
 8001954:	e040      	b.n	80019d8 <HAL_DMA_Start_IT+0xc0>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d12f      	bne.n	80019ca <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2202      	movs	r2, #2
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f9ba 	bl	8001cf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001988:	223f      	movs	r2, #63	; 0x3f
 800198a:	409a      	lsls	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0216 	orr.w	r2, r2, #22
 800199e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0208 	orr.w	r2, r2, #8
 80019b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e005      	b.n	80019d6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019d2:	2302      	movs	r3, #2
 80019d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08019070 	.word	0x08019070

080019e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019f0:	4b8e      	ldr	r3, [pc, #568]	; (8001c2c <HAL_DMA_IRQHandler+0x248>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a8e      	ldr	r2, [pc, #568]	; (8001c30 <HAL_DMA_IRQHandler+0x24c>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0e:	2208      	movs	r2, #8
 8001a10:	409a      	lsls	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01a      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	2201      	movs	r2, #1
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d012      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	2201      	movs	r2, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f043 0202 	orr.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d012      	beq.n	8001abc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00b      	beq.n	8001abc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f043 0204 	orr.w	r2, r3, #4
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d043      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03c      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	2210      	movs	r2, #16
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d018      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d108      	bne.n	8001b14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d024      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
 8001b12:	e01f      	b.n	8001b54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01b      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
 8001b24:	e016      	b.n	8001b54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0208 	bic.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	2220      	movs	r2, #32
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 808f 	beq.w	8001c84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8087 	beq.w	8001c84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d136      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0216 	bic.w	r2, r2, #22
 8001b9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d103      	bne.n	8001bbe <HAL_DMA_IRQHandler+0x1da>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0208 	bic.w	r2, r2, #8
 8001bcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	223f      	movs	r2, #63	; 0x3f
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d07e      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
        }
        return;
 8001bfa:	e079      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01d      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10d      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d031      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
 8001c28:	e02c      	b.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d023      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
 8001c44:	e01e      	b.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10f      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0210 	bic.w	r2, r2, #16
 8001c62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d032      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d022      	beq.n	8001cde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d307      	bcc.n	8001ccc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f2      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x2cc>
 8001cca:	e000      	b.n	8001cce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ccc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
 8001cee:	e000      	b.n	8001cf2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cf0:	bf00      	nop
    }
  }
}
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b40      	cmp	r3, #64	; 0x40
 8001d24:	d108      	bne.n	8001d38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d36:	e007      	b.n	8001d48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3b10      	subs	r3, #16
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <DMA_CalcBaseAndBitshift+0x64>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d6e:	4a13      	ldr	r2, [pc, #76]	; (8001dbc <DMA_CalcBaseAndBitshift+0x68>)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d909      	bls.n	8001d96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d8a:	f023 0303 	bic.w	r3, r3, #3
 8001d8e:	1d1a      	adds	r2, r3, #4
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	659a      	str	r2, [r3, #88]	; 0x58
 8001d94:	e007      	b.n	8001da6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	aaaaaaab 	.word	0xaaaaaaab
 8001dbc:	0801ad64 	.word	0x0801ad64

08001dc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d11f      	bne.n	8001e1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d856      	bhi.n	8001e8e <DMA_CheckFifoParam+0xce>
 8001de0:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <DMA_CheckFifoParam+0x28>)
 8001de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de6:	bf00      	nop
 8001de8:	08001df9 	.word	0x08001df9
 8001dec:	08001e0b 	.word	0x08001e0b
 8001df0:	08001df9 	.word	0x08001df9
 8001df4:	08001e8f 	.word	0x08001e8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d046      	beq.n	8001e92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e08:	e043      	b.n	8001e92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e12:	d140      	bne.n	8001e96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e18:	e03d      	b.n	8001e96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e22:	d121      	bne.n	8001e68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d837      	bhi.n	8001e9a <DMA_CheckFifoParam+0xda>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <DMA_CheckFifoParam+0x70>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001e41 	.word	0x08001e41
 8001e34:	08001e47 	.word	0x08001e47
 8001e38:	08001e41 	.word	0x08001e41
 8001e3c:	08001e59 	.word	0x08001e59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
      break;
 8001e44:	e030      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d025      	beq.n	8001e9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e56:	e022      	b.n	8001e9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e60:	d11f      	bne.n	8001ea2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e66:	e01c      	b.n	8001ea2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d903      	bls.n	8001e76 <DMA_CheckFifoParam+0xb6>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d003      	beq.n	8001e7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e74:	e018      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
      break;
 8001e7a:	e015      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00e      	beq.n	8001ea6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e8c:	e00b      	b.n	8001ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8001e8e:	bf00      	nop
 8001e90:	e00a      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001e92:	bf00      	nop
 8001e94:	e008      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001e96:	bf00      	nop
 8001e98:	e006      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9a:	bf00      	nop
 8001e9c:	e004      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9e:	bf00      	nop
 8001ea0:	e002      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ea2:	bf00      	nop
 8001ea4:	e000      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ea6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a39      	ldr	r2, [pc, #228]	; (8001fb8 <HAL_GPIO_Init+0x100>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d023      	beq.n	8001f1e <HAL_GPIO_Init+0x66>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a38      	ldr	r2, [pc, #224]	; (8001fbc <HAL_GPIO_Init+0x104>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01f      	beq.n	8001f1e <HAL_GPIO_Init+0x66>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a37      	ldr	r2, [pc, #220]	; (8001fc0 <HAL_GPIO_Init+0x108>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01b      	beq.n	8001f1e <HAL_GPIO_Init+0x66>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a36      	ldr	r2, [pc, #216]	; (8001fc4 <HAL_GPIO_Init+0x10c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d017      	beq.n	8001f1e <HAL_GPIO_Init+0x66>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a35      	ldr	r2, [pc, #212]	; (8001fc8 <HAL_GPIO_Init+0x110>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x66>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a34      	ldr	r2, [pc, #208]	; (8001fcc <HAL_GPIO_Init+0x114>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00f      	beq.n	8001f1e <HAL_GPIO_Init+0x66>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a33      	ldr	r2, [pc, #204]	; (8001fd0 <HAL_GPIO_Init+0x118>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00b      	beq.n	8001f1e <HAL_GPIO_Init+0x66>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a32      	ldr	r2, [pc, #200]	; (8001fd4 <HAL_GPIO_Init+0x11c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <HAL_GPIO_Init+0x66>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <HAL_GPIO_Init+0x120>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x66>
 8001f16:	21ac      	movs	r1, #172	; 0xac
 8001f18:	4830      	ldr	r0, [pc, #192]	; (8001fdc <HAL_GPIO_Init+0x124>)
 8001f1a:	f7fe fedd 	bl	8000cd8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_GPIO_Init+0x7c>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	041b      	lsls	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x84>
 8001f34:	21ad      	movs	r1, #173	; 0xad
 8001f36:	4829      	ldr	r0, [pc, #164]	; (8001fdc <HAL_GPIO_Init+0x124>)
 8001f38:	f7fe fece 	bl	8000cd8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d035      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d031      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b11      	cmp	r3, #17
 8001f52:	d02d      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d029      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b12      	cmp	r3, #18
 8001f62:	d025      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001f6c:	d020      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001f76:	d01b      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001f80:	d016      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001f8a:	d011      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001f94:	d00c      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001f9e:	d007      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0xf8>
 8001fa8:	21ae      	movs	r1, #174	; 0xae
 8001faa:	480c      	ldr	r0, [pc, #48]	; (8001fdc <HAL_GPIO_Init+0x124>)
 8001fac:	f7fe fe94 	bl	8000cd8 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	e242      	b.n	800243c <HAL_GPIO_Init+0x584>
 8001fb6:	bf00      	nop
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40021400 	.word	0x40021400
 8001fd0:	40021800 	.word	0x40021800
 8001fd4:	40021c00 	.word	0x40021c00
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	080190a8 	.word	0x080190a8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 821c 	bne.w	8002436 <HAL_GPIO_Init+0x57e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d005      	beq.n	8002016 <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002012:	2b02      	cmp	r3, #2
 8002014:	d144      	bne.n	80020a0 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00f      	beq.n	800203e <HAL_GPIO_Init+0x186>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d00b      	beq.n	800203e <HAL_GPIO_Init+0x186>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x186>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x186>
 8002036:	21c0      	movs	r1, #192	; 0xc0
 8002038:	4881      	ldr	r0, [pc, #516]	; (8002240 <HAL_GPIO_Init+0x388>)
 800203a:	f7fe fe4d 	bl	8000cd8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d027      	beq.n	80020fc <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <HAL_GPIO_Init+0x214>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d007      	beq.n	80020cc <HAL_GPIO_Init+0x214>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x214>
 80020c4:	21d1      	movs	r1, #209	; 0xd1
 80020c6:	485e      	ldr	r0, [pc, #376]	; (8002240 <HAL_GPIO_Init+0x388>)
 80020c8:	f7fe fe06 	bl	8000cd8 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	f040 80c1 	bne.w	800228c <HAL_GPIO_Init+0x3d4>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8098 	beq.w	8002244 <HAL_GPIO_Init+0x38c>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b09      	cmp	r3, #9
 800211a:	f000 8093 	beq.w	8002244 <HAL_GPIO_Init+0x38c>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 808e 	beq.w	8002244 <HAL_GPIO_Init+0x38c>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8089 	beq.w	8002244 <HAL_GPIO_Init+0x38c>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8084 	beq.w	8002244 <HAL_GPIO_Init+0x38c>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d07f      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d07b      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d077      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d073      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d06f      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d06b      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d067      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d063      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d05f      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d05b      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d057      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d053      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b09      	cmp	r3, #9
 80021a2:	d04f      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d04b      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b09      	cmp	r3, #9
 80021b2:	d047      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b07      	cmp	r3, #7
 80021ba:	d043      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b07      	cmp	r3, #7
 80021c2:	d03f      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b07      	cmp	r3, #7
 80021ca:	d03b      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d037      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d033      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d02f      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	d02b      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b09      	cmp	r3, #9
 80021f2:	d027      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b0a      	cmp	r3, #10
 80021fa:	d023      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b0a      	cmp	r3, #10
 8002202:	d01f      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b0b      	cmp	r3, #11
 800220a:	d01b      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	d017      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d013      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b0d      	cmp	r3, #13
 8002222:	d00f      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d00b      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d007      	beq.n	8002244 <HAL_GPIO_Init+0x38c>
 8002234:	21de      	movs	r1, #222	; 0xde
 8002236:	4802      	ldr	r0, [pc, #8]	; (8002240 <HAL_GPIO_Init+0x388>)
 8002238:	f7fe fd4e 	bl	8000cd8 <assert_failed>
 800223c:	e002      	b.n	8002244 <HAL_GPIO_Init+0x38c>
 800223e:	bf00      	nop
 8002240:	080190a8 	.word	0x080190a8
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80b4 	beq.w	8002436 <HAL_GPIO_Init+0x57e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b5f      	ldr	r3, [pc, #380]	; (8002450 <HAL_GPIO_Init+0x598>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a5e      	ldr	r2, [pc, #376]	; (8002450 <HAL_GPIO_Init+0x598>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b5c      	ldr	r3, [pc, #368]	; (8002450 <HAL_GPIO_Init+0x598>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ea:	4a5a      	ldr	r2, [pc, #360]	; (8002454 <HAL_GPIO_Init+0x59c>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a51      	ldr	r2, [pc, #324]	; (8002458 <HAL_GPIO_Init+0x5a0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02b      	beq.n	800236e <HAL_GPIO_Init+0x4b6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a50      	ldr	r2, [pc, #320]	; (800245c <HAL_GPIO_Init+0x5a4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x4b2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4f      	ldr	r2, [pc, #316]	; (8002460 <HAL_GPIO_Init+0x5a8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x4ae>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4e      	ldr	r2, [pc, #312]	; (8002464 <HAL_GPIO_Init+0x5ac>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x4aa>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4d      	ldr	r2, [pc, #308]	; (8002468 <HAL_GPIO_Init+0x5b0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x4a6>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4c      	ldr	r2, [pc, #304]	; (800246c <HAL_GPIO_Init+0x5b4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x4a2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4b      	ldr	r2, [pc, #300]	; (8002470 <HAL_GPIO_Init+0x5b8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x49e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_GPIO_Init+0x5bc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x49a>
 800234e:	2307      	movs	r3, #7
 8002350:	e00e      	b.n	8002370 <HAL_GPIO_Init+0x4b8>
 8002352:	2308      	movs	r3, #8
 8002354:	e00c      	b.n	8002370 <HAL_GPIO_Init+0x4b8>
 8002356:	2306      	movs	r3, #6
 8002358:	e00a      	b.n	8002370 <HAL_GPIO_Init+0x4b8>
 800235a:	2305      	movs	r3, #5
 800235c:	e008      	b.n	8002370 <HAL_GPIO_Init+0x4b8>
 800235e:	2304      	movs	r3, #4
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x4b8>
 8002362:	2303      	movs	r3, #3
 8002364:	e004      	b.n	8002370 <HAL_GPIO_Init+0x4b8>
 8002366:	2302      	movs	r3, #2
 8002368:	e002      	b.n	8002370 <HAL_GPIO_Init+0x4b8>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x4b8>
 800236e:	2300      	movs	r3, #0
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f002 0203 	and.w	r2, r2, #3
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	4093      	lsls	r3, r2
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002380:	4934      	ldr	r1, [pc, #208]	; (8002454 <HAL_GPIO_Init+0x59c>)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238e:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_GPIO_Init+0x5c0>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x4fa>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b2:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_GPIO_Init+0x5c0>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b8:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_GPIO_Init+0x5c0>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x524>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <HAL_GPIO_Init+0x5c0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023e2:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_GPIO_Init+0x5c0>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x54e>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_GPIO_Init+0x5c0>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_GPIO_Init+0x5c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x578>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002430:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_GPIO_Init+0x5c0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	f67f adce 	bls.w	8001fe0 <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40013800 	.word	0x40013800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40021000 	.word	0x40021000
 800246c:	40021400 	.word	0x40021400
 8002470:	40021800 	.word	0x40021800
 8002474:	40021c00 	.word	0x40021c00
 8002478:	40013c00 	.word	0x40013c00

0800247c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <HAL_GPIO_WritePin+0x20>
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	041b      	lsls	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_GPIO_WritePin+0x2a>
 800249c:	f240 119d 	movw	r1, #413	; 0x19d
 80024a0:	480e      	ldr	r0, [pc, #56]	; (80024dc <HAL_GPIO_WritePin+0x60>)
 80024a2:	f7fe fc19 	bl	8000cd8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80024a6:	787b      	ldrb	r3, [r7, #1]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_GPIO_WritePin+0x40>
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d004      	beq.n	80024bc <HAL_GPIO_WritePin+0x40>
 80024b2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80024b6:	4809      	ldr	r0, [pc, #36]	; (80024dc <HAL_GPIO_WritePin+0x60>)
 80024b8:	f7fe fc0e 	bl	8000cd8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	080190a8 	.word	0x080190a8

080024e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	b08f      	sub	sp, #60	; 0x3c
 80024e4:	af0a      	add	r7, sp, #40	; 0x28
 80024e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e11d      	b.n	800272e <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024fa:	d008      	beq.n	800250e <HAL_PCD_Init+0x2e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a8d      	ldr	r2, [pc, #564]	; (8002738 <HAL_PCD_Init+0x258>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d003      	beq.n	800250e <HAL_PCD_Init+0x2e>
 8002506:	2187      	movs	r1, #135	; 0x87
 8002508:	488c      	ldr	r0, [pc, #560]	; (800273c <HAL_PCD_Init+0x25c>)
 800250a:	f7fe fbe5 	bl	8000cd8 <assert_failed>

  USBx = hpcd->Instance;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d106      	bne.n	800252e <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f00d fc01 	bl	800fd30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d102      	bne.n	8002548 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fe87 	bl	8005260 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	687e      	ldr	r6, [r7, #4]
 800255a:	466d      	mov	r5, sp
 800255c:	f106 0410 	add.w	r4, r6, #16
 8002560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002568:	e894 0003 	ldmia.w	r4, {r0, r1}
 800256c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002570:	1d33      	adds	r3, r6, #4
 8002572:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002574:	6838      	ldr	r0, [r7, #0]
 8002576:	f002 fe01 	bl	800517c <USB_CoreInit>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0d0      	b.n	800272e <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fe75 	bl	8005282 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	e04a      	b.n	8002634 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	333d      	adds	r3, #61	; 0x3d
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	333c      	adds	r3, #60	; 0x3c
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	b298      	uxth	r0, r3
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3344      	adds	r3, #68	; 0x44
 80025da:	4602      	mov	r2, r0
 80025dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3340      	adds	r3, #64	; 0x40
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	3348      	adds	r3, #72	; 0x48
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	334c      	adds	r3, #76	; 0x4c
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	3354      	adds	r3, #84	; 0x54
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	3301      	adds	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	429a      	cmp	r2, r3
 800263c:	d3af      	bcc.n	800259e <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e044      	b.n	80026ce <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	3301      	adds	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3b5      	bcc.n	8002644 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	687e      	ldr	r6, [r7, #4]
 80026e0:	466d      	mov	r5, sp
 80026e2:	f106 0410 	add.w	r4, r6, #16
 80026e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026f6:	1d33      	adds	r3, r6, #4
 80026f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026fa:	6838      	ldr	r0, [r7, #0]
 80026fc:	f002 fe0e 	bl	800531c <USB_DevInit>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e00d      	b.n	800272e <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fe0f 	bl	800634a <USB_DevDisconnect>

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002736:	bf00      	nop
 8002738:	40040000 	.word	0x40040000
 800273c:	080190e4 	.word	0x080190e4

08002740 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_PCD_Start+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e020      	b.n	800279e <HAL_PCD_Start+0x5e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	2b01      	cmp	r3, #1
 800276a:	d109      	bne.n	8002780 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002770:	2b01      	cmp	r3, #1
 8002772:	d005      	beq.n	8002780 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fd5a 	bl	800523e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f003 fdba 	bl	8006308 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	4608      	mov	r0, r1
 80027b0:	4611      	mov	r1, r2
 80027b2:	461a      	mov	r2, r3
 80027b4:	4603      	mov	r3, r0
 80027b6:	70fb      	strb	r3, [r7, #3]
 80027b8:	460b      	mov	r3, r1
 80027ba:	803b      	strh	r3, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da0f      	bge.n	80027ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 020f 	and.w	r2, r3, #15
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	3338      	adds	r3, #56	; 0x38
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	705a      	strb	r2, [r3, #1]
 80027ea:	e00f      	b.n	800280c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 020f 	and.w	r2, r3, #15
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	b2da      	uxtb	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002818:	883a      	ldrh	r2, [r7, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	78ba      	ldrb	r2, [r7, #2]
 8002822:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002836:	78bb      	ldrb	r3, [r7, #2]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d102      	bne.n	8002842 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_PCD_EP_Open+0xaa>
 800284c:	2302      	movs	r3, #2
 800284e:	e00e      	b.n	800286e <HAL_PCD_EP_Open+0xc8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68f9      	ldr	r1, [r7, #12]
 800285e:	4618      	mov	r0, r3
 8002860:	f002 ff3d 	bl	80056de <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800286c:	7afb      	ldrb	r3, [r7, #11]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002886:	2b00      	cmp	r3, #0
 8002888:	da0f      	bge.n	80028aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f003 020f 	and.w	r2, r3, #15
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	3338      	adds	r3, #56	; 0x38
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	3304      	adds	r3, #4
 80028a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	705a      	strb	r2, [r3, #1]
 80028a8:	e00f      	b.n	80028ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	f003 020f 	and.w	r2, r3, #15
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	3304      	adds	r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_PCD_EP_Close+0x6e>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e00e      	b.n	8002902 <HAL_PCD_EP_Close+0x8c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68f9      	ldr	r1, [r7, #12]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 ff7a 	bl	80057ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b086      	sub	sp, #24
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	460b      	mov	r3, r1
 8002918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800291a:	7afb      	ldrb	r3, [r7, #11]
 800291c:	f003 020f 	and.w	r2, r3, #15
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	3304      	adds	r3, #4
 8002932:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2200      	movs	r2, #0
 8002944:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2200      	movs	r2, #0
 800294a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	b2da      	uxtb	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6979      	ldr	r1, [r7, #20]
 800297e:	f003 fa59 	bl	8005e34 <USB_EP0StartXfer>
 8002982:	e008      	b.n	8002996 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	f003 f807 	bl	80059a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 020f 	and.w	r2, r3, #15
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	460b      	mov	r3, r1
 80029de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e0:	7afb      	ldrb	r3, [r7, #11]
 80029e2:	f003 020f 	and.w	r2, r3, #15
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	3338      	adds	r3, #56	; 0x38
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	3304      	adds	r3, #4
 80029f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2200      	movs	r2, #0
 8002a08:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a10:	7afb      	ldrb	r3, [r7, #11]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d102      	bne.n	8002a2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6979      	ldr	r1, [r7, #20]
 8002a42:	f003 f9f7 	bl	8005e34 <USB_EP0StartXfer>
 8002a46:	e008      	b.n	8002a5a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	6979      	ldr	r1, [r7, #20]
 8002a56:	f002 ffa5 	bl	80059a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d901      	bls.n	8002a82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e050      	b.n	8002b24 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da0f      	bge.n	8002aaa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 020f 	and.w	r2, r3, #15
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	3338      	adds	r3, #56	; 0x38
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	705a      	strb	r2, [r3, #1]
 8002aa8:	e00d      	b.n	8002ac6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_PCD_EP_SetStall+0x82>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e01e      	b.n	8002b24 <HAL_PCD_EP_SetStall+0xc0>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68f9      	ldr	r1, [r7, #12]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 fb33 	bl	8006160 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	b2d9      	uxtb	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b14:	461a      	mov	r2, r3
 8002b16:	f003 fc47 	bl	80063a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	f003 020f 	and.w	r2, r3, #15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d901      	bls.n	8002b4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e042      	b.n	8002bd0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	da0f      	bge.n	8002b72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	f003 020f 	and.w	r2, r3, #15
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	3338      	adds	r3, #56	; 0x38
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	3304      	adds	r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	705a      	strb	r2, [r3, #1]
 8002b70:	e00f      	b.n	8002b92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 020f 	and.w	r2, r3, #15
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4413      	add	r3, r2
 8002b88:	3304      	adds	r3, #4
 8002b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_PCD_EP_ClrStall+0x86>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e00e      	b.n	8002bd0 <HAL_PCD_EP_ClrStall+0xa4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fb3b 	bl	800623c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_PCD_EP_Flush+0x1a>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e01b      	b.n	8002c2a <HAL_PCD_EP_Flush+0x52>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	da09      	bge.n	8002c16 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f002 fce8 	bl	80055e4 <USB_FlushTxFifo>
 8002c14:	e004      	b.n	8002c20 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 fd16 	bl	800564c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d107      	bne.n	8002c60 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c50:	883b      	ldrh	r3, [r7, #0]
 8002c52:	0419      	lsls	r1, r3, #16
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	629a      	str	r2, [r3, #40]	; 0x28
 8002c5e:	e028      	b.n	8002cb2 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	e00d      	b.n	8002c90 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	3340      	adds	r3, #64	; 0x40
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0c1b      	lsrs	r3, r3, #16
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	4413      	add	r3, r2
 8002c88:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3ec      	bcc.n	8002c74 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c9a:	883b      	ldrh	r3, [r7, #0]
 8002c9c:	0418      	lsls	r0, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6819      	ldr	r1, [r3, #0]
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4302      	orrs	r2, r0
 8002caa:	3340      	adds	r3, #64	; 0x40
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	887a      	ldrh	r2, [r7, #2]
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e314      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b0f      	cmp	r3, #15
 8002cfc:	d903      	bls.n	8002d06 <HAL_RCC_OscConfig+0x22>
 8002cfe:	21e6      	movs	r1, #230	; 0xe6
 8002d00:	4897      	ldr	r0, [pc, #604]	; (8002f60 <HAL_RCC_OscConfig+0x27c>)
 8002d02:	f7fd ffe9 	bl	8000cd8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8088 	beq.w	8002e24 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <HAL_RCC_OscConfig+0x54>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d24:	d008      	beq.n	8002d38 <HAL_RCC_OscConfig+0x54>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d2e:	d003      	beq.n	8002d38 <HAL_RCC_OscConfig+0x54>
 8002d30:	21eb      	movs	r1, #235	; 0xeb
 8002d32:	488b      	ldr	r0, [pc, #556]	; (8002f60 <HAL_RCC_OscConfig+0x27c>)
 8002d34:	f7fd ffd0 	bl	8000cd8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d38:	4b8a      	ldr	r3, [pc, #552]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d00c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d44:	4b87      	ldr	r3, [pc, #540]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d112      	bne.n	8002d76 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d50:	4b84      	ldr	r3, [pc, #528]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5c:	d10b      	bne.n	8002d76 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5e:	4b81      	ldr	r3, [pc, #516]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d05b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x13e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d157      	bne.n	8002e22 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e2d4      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCC_OscConfig+0xaa>
 8002d80:	4b78      	ldr	r3, [pc, #480]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a77      	ldr	r2, [pc, #476]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	e01d      	b.n	8002dca <HAL_RCC_OscConfig+0xe6>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0xce>
 8002d98:	4b72      	ldr	r3, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a71      	ldr	r2, [pc, #452]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	e00b      	b.n	8002dca <HAL_RCC_OscConfig+0xe6>
 8002db2:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6b      	ldr	r2, [pc, #428]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b69      	ldr	r3, [pc, #420]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a68      	ldr	r2, [pc, #416]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d013      	beq.n	8002dfa <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fa45 	bl	8001260 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dda:	f7fe fa41 	bl	8001260 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b64      	cmp	r3, #100	; 0x64
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e299      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dec:	4b5d      	ldr	r3, [pc, #372]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0xf6>
 8002df8:	e014      	b.n	8002e24 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fa31 	bl	8001260 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e02:	f7fe fa2d 	bl	8001260 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b64      	cmp	r3, #100	; 0x64
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e285      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x11e>
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d079      	beq.n	8002f24 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_OscConfig+0x166>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d004      	beq.n	8002e4a <HAL_RCC_OscConfig+0x166>
 8002e40:	f240 111d 	movw	r1, #285	; 0x11d
 8002e44:	4846      	ldr	r0, [pc, #280]	; (8002f60 <HAL_RCC_OscConfig+0x27c>)
 8002e46:	f7fd ff47 	bl	8000cd8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b1f      	cmp	r3, #31
 8002e50:	d904      	bls.n	8002e5c <HAL_RCC_OscConfig+0x178>
 8002e52:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002e56:	4842      	ldr	r0, [pc, #264]	; (8002f60 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	f7fd ff3e 	bl	8000cd8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5c:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e68:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d11c      	bne.n	8002eae <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e74:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d116      	bne.n	8002eae <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e80:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1b4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e243      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b32      	ldr	r3, [pc, #200]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	492f      	ldr	r1, [pc, #188]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eac:	e03a      	b.n	8002f24 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d020      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <HAL_RCC_OscConfig+0x284>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f9d0 	bl	8001260 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe f9cc 	bl	8001260 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e224      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	491c      	ldr	r1, [pc, #112]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
 8002ef6:	e015      	b.n	8002f24 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x284>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7fe f9af 	bl	8001260 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f06:	f7fe f9ab 	bl	8001260 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e203      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d045      	beq.n	8002fbc <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_OscConfig+0x266>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d004      	beq.n	8002f4a <HAL_RCC_OscConfig+0x266>
 8002f40:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002f44:	4806      	ldr	r0, [pc, #24]	; (8002f60 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	f7fd fec7 	bl	8000cd8 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01e      	beq.n	8002f90 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCC_OscConfig+0x288>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe f982 	bl	8001260 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5e:	e010      	b.n	8002f82 <HAL_RCC_OscConfig+0x29e>
 8002f60:	0801911c 	.word	0x0801911c
 8002f64:	40023800 	.word	0x40023800
 8002f68:	42470000 	.word	0x42470000
 8002f6c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe f976 	bl	8001260 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e1ce      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b5e      	ldr	r3, [pc, #376]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x28c>
 8002f8e:	e015      	b.n	8002fbc <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f90:	4b5b      	ldr	r3, [pc, #364]	; (8003100 <HAL_RCC_OscConfig+0x41c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe f963 	bl	8001260 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fe f95f 	bl	8001260 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e1b7      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	4b52      	ldr	r3, [pc, #328]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80b0 	beq.w	800312a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x30c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x30c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d004      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x30c>
 8002fe6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002fea:	4846      	ldr	r0, [pc, #280]	; (8003104 <HAL_RCC_OscConfig+0x420>)
 8002fec:	f7fd fe74 	bl	8000cd8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff0:	4b42      	ldr	r3, [pc, #264]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10f      	bne.n	800301c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	4b3e      	ldr	r3, [pc, #248]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	4a3d      	ldr	r2, [pc, #244]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6413      	str	r3, [r2, #64]	; 0x40
 800300c:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003018:	2301      	movs	r3, #1
 800301a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	4b3a      	ldr	r3, [pc, #232]	; (8003108 <HAL_RCC_OscConfig+0x424>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d118      	bne.n	800305a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003028:	4b37      	ldr	r3, [pc, #220]	; (8003108 <HAL_RCC_OscConfig+0x424>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a36      	ldr	r2, [pc, #216]	; (8003108 <HAL_RCC_OscConfig+0x424>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003034:	f7fe f914 	bl	8001260 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fe f910 	bl	8001260 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e168      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <HAL_RCC_OscConfig+0x424>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d106      	bne.n	8003070 <HAL_RCC_OscConfig+0x38c>
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a25      	ldr	r2, [pc, #148]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	e01c      	b.n	80030aa <HAL_RCC_OscConfig+0x3c6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x3ae>
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a1f      	ldr	r2, [pc, #124]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	e00b      	b.n	80030aa <HAL_RCC_OscConfig+0x3c6>
 8003092:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d015      	beq.n	80030de <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fe f8d5 	bl	8001260 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fe f8d1 	bl	8001260 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e127      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_OscConfig+0x418>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ee      	beq.n	80030ba <HAL_RCC_OscConfig+0x3d6>
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030de:	f7fe f8bf 	bl	8001260 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e4:	e012      	b.n	800310c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe f8bb 	bl	8001260 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d909      	bls.n	800310c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e111      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470e80 	.word	0x42470e80
 8003104:	0801911c 	.word	0x0801911c
 8003108:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	4b86      	ldr	r3, [pc, #536]	; (8003328 <HAL_RCC_OscConfig+0x644>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e6      	bne.n	80030e6 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b82      	ldr	r3, [pc, #520]	; (8003328 <HAL_RCC_OscConfig+0x644>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a81      	ldr	r2, [pc, #516]	; (8003328 <HAL_RCC_OscConfig+0x644>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <HAL_RCC_OscConfig+0x468>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d008      	beq.n	800314c <HAL_RCC_OscConfig+0x468>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d004      	beq.n	800314c <HAL_RCC_OscConfig+0x468>
 8003142:	f240 11cd 	movw	r1, #461	; 0x1cd
 8003146:	4879      	ldr	r0, [pc, #484]	; (800332c <HAL_RCC_OscConfig+0x648>)
 8003148:	f7fd fdc6 	bl	8000cd8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80e4 	beq.w	800331e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003156:	4b74      	ldr	r3, [pc, #464]	; (8003328 <HAL_RCC_OscConfig+0x644>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b08      	cmp	r3, #8
 8003160:	f000 80a5 	beq.w	80032ae <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b02      	cmp	r3, #2
 800316a:	f040 8089 	bne.w	8003280 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_RCC_OscConfig+0x4a6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317e:	d004      	beq.n	800318a <HAL_RCC_OscConfig+0x4a6>
 8003180:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8003184:	4869      	ldr	r0, [pc, #420]	; (800332c <HAL_RCC_OscConfig+0x648>)
 8003186:	f7fd fda7 	bl	8000cd8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	2b3f      	cmp	r3, #63	; 0x3f
 8003190:	d904      	bls.n	800319c <HAL_RCC_OscConfig+0x4b8>
 8003192:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003196:	4865      	ldr	r0, [pc, #404]	; (800332c <HAL_RCC_OscConfig+0x648>)
 8003198:	f7fd fd9e 	bl	8000cd8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	2b31      	cmp	r3, #49	; 0x31
 80031a2:	d904      	bls.n	80031ae <HAL_RCC_OscConfig+0x4ca>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80031ac:	d904      	bls.n	80031b8 <HAL_RCC_OscConfig+0x4d4>
 80031ae:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80031b2:	485e      	ldr	r0, [pc, #376]	; (800332c <HAL_RCC_OscConfig+0x648>)
 80031b4:	f7fd fd90 	bl	8000cd8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d010      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4fe>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4fe>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	2b06      	cmp	r3, #6
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4fe>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d004      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4fe>
 80031d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80031dc:	4853      	ldr	r0, [pc, #332]	; (800332c <HAL_RCC_OscConfig+0x648>)
 80031de:	f7fd fd7b 	bl	8000cd8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d903      	bls.n	80031f2 <HAL_RCC_OscConfig+0x50e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	d904      	bls.n	80031fc <HAL_RCC_OscConfig+0x518>
 80031f2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80031f6:	484d      	ldr	r0, [pc, #308]	; (800332c <HAL_RCC_OscConfig+0x648>)
 80031f8:	f7fd fd6e 	bl	8000cd8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fc:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HAL_RCC_OscConfig+0x64c>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe f82d 	bl	8001260 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe f829 	bl	8001260 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e081      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321c:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_RCC_OscConfig+0x644>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	019b      	lsls	r3, r3, #6
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	3b01      	subs	r3, #1
 8003242:	041b      	lsls	r3, r3, #16
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	4936      	ldr	r1, [pc, #216]	; (8003328 <HAL_RCC_OscConfig+0x644>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003252:	4b37      	ldr	r3, [pc, #220]	; (8003330 <HAL_RCC_OscConfig+0x64c>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe f802 	bl	8001260 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003260:	f7fd fffe 	bl	8001260 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e056      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_RCC_OscConfig+0x644>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x57c>
 800327e:	e04e      	b.n	800331e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_RCC_OscConfig+0x64c>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7fd ffeb 	bl	8001260 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328e:	f7fd ffe7 	bl	8001260 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e03f      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCC_OscConfig+0x644>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x5aa>
 80032ac:	e037      	b.n	800331e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e032      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCC_OscConfig+0x644>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d028      	beq.n	800331a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d121      	bne.n	800331a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d11a      	bne.n	800331a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ea:	4013      	ands	r3, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d111      	bne.n	800331a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	3b01      	subs	r3, #1
 8003304:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d107      	bne.n	800331a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	0801911c 	.word	0x0801911c
 8003330:	42470060 	.word	0x42470060

08003334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e174      	b.n	8003632 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_RCC_ClockConfig+0x24>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b0f      	cmp	r3, #15
 8003356:	d904      	bls.n	8003362 <HAL_RCC_ClockConfig+0x2e>
 8003358:	f240 215a 	movw	r1, #602	; 0x25a
 800335c:	487b      	ldr	r0, [pc, #492]	; (800354c <HAL_RCC_ClockConfig+0x218>)
 800335e:	f7fd fcbb 	bl	8000cd8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d019      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d016      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d013      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d010      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b04      	cmp	r3, #4
 800337e:	d00d      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d00a      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b06      	cmp	r3, #6
 800338a:	d007      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2b07      	cmp	r3, #7
 8003390:	d004      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
 8003392:	f240 215b 	movw	r1, #603	; 0x25b
 8003396:	486d      	ldr	r0, [pc, #436]	; (800354c <HAL_RCC_ClockConfig+0x218>)
 8003398:	f7fd fc9e 	bl	8000cd8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b6c      	ldr	r3, [pc, #432]	; (8003550 <HAL_RCC_ClockConfig+0x21c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d90c      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b69      	ldr	r3, [pc, #420]	; (8003550 <HAL_RCC_ClockConfig+0x21c>)
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_ClockConfig+0x21c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e136      	b.n	8003632 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d049      	beq.n	8003464 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033dc:	4b5d      	ldr	r3, [pc, #372]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a5c      	ldr	r2, [pc, #368]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 80033e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4b57      	ldr	r3, [pc, #348]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 80033fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d024      	beq.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d020      	beq.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b90      	cmp	r3, #144	; 0x90
 8003416:	d01c      	beq.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2ba0      	cmp	r3, #160	; 0xa0
 800341e:	d018      	beq.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2bb0      	cmp	r3, #176	; 0xb0
 8003426:	d014      	beq.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2bc0      	cmp	r3, #192	; 0xc0
 800342e:	d010      	beq.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2bd0      	cmp	r3, #208	; 0xd0
 8003436:	d00c      	beq.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2be0      	cmp	r3, #224	; 0xe0
 800343e:	d008      	beq.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2bf0      	cmp	r3, #240	; 0xf0
 8003446:	d004      	beq.n	8003452 <HAL_RCC_ClockConfig+0x11e>
 8003448:	f240 217e 	movw	r1, #638	; 0x27e
 800344c:	483f      	ldr	r0, [pc, #252]	; (800354c <HAL_RCC_ClockConfig+0x218>)
 800344e:	f7fd fc43 	bl	8000cd8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003452:	4b40      	ldr	r3, [pc, #256]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	493d      	ldr	r1, [pc, #244]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d059      	beq.n	8003524 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d010      	beq.n	800349a <HAL_RCC_ClockConfig+0x166>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d00c      	beq.n	800349a <HAL_RCC_ClockConfig+0x166>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d008      	beq.n	800349a <HAL_RCC_ClockConfig+0x166>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d004      	beq.n	800349a <HAL_RCC_ClockConfig+0x166>
 8003490:	f240 2185 	movw	r1, #645	; 0x285
 8003494:	482d      	ldr	r0, [pc, #180]	; (800354c <HAL_RCC_ClockConfig+0x218>)
 8003496:	f7fd fc1f 	bl	8000cd8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d119      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0bf      	b.n	8003632 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0af      	b.n	8003632 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0a7      	b.n	8003632 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4919      	ldr	r1, [pc, #100]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fd feb4 	bl	8001260 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fd feb0 	bl	8001260 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e08f      	b.n	8003632 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_RCC_ClockConfig+0x220>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x21c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d212      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_RCC_ClockConfig+0x21c>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_RCC_ClockConfig+0x21c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d007      	beq.n	8003558 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e072      	b.n	8003632 <HAL_RCC_ClockConfig+0x2fe>
 800354c:	0801911c 	.word	0x0801911c
 8003550:	40023c00 	.word	0x40023c00
 8003554:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d025      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d018      	beq.n	800359e <HAL_RCC_ClockConfig+0x26a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003574:	d013      	beq.n	800359e <HAL_RCC_ClockConfig+0x26a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800357e:	d00e      	beq.n	800359e <HAL_RCC_ClockConfig+0x26a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003588:	d009      	beq.n	800359e <HAL_RCC_ClockConfig+0x26a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003592:	d004      	beq.n	800359e <HAL_RCC_ClockConfig+0x26a>
 8003594:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003598:	4828      	ldr	r0, [pc, #160]	; (800363c <HAL_RCC_ClockConfig+0x308>)
 800359a:	f7fd fb9d 	bl	8000cd8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359e:	4b28      	ldr	r3, [pc, #160]	; (8003640 <HAL_RCC_ClockConfig+0x30c>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4925      	ldr	r1, [pc, #148]	; (8003640 <HAL_RCC_ClockConfig+0x30c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d026      	beq.n	800360a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d018      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x2c2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035cc:	d013      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x2c2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035d6:	d00e      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x2c2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80035e0:	d009      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x2c2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80035ea:	d004      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x2c2>
 80035ec:	f240 21ca 	movw	r1, #714	; 0x2ca
 80035f0:	4812      	ldr	r0, [pc, #72]	; (800363c <HAL_RCC_ClockConfig+0x308>)
 80035f2:	f7fd fb71 	bl	8000cd8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_RCC_ClockConfig+0x30c>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	490e      	ldr	r1, [pc, #56]	; (8003640 <HAL_RCC_ClockConfig+0x30c>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800360a:	f000 f821 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x30c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	490a      	ldr	r1, [pc, #40]	; (8003644 <HAL_RCC_ClockConfig+0x310>)
 800361c:	5ccb      	ldrb	r3, [r1, r3]
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x314>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x318>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd fc6e 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	0801911c 	.word	0x0801911c
 8003640:	40023800 	.word	0x40023800
 8003644:	0801ad4c 	.word	0x0801ad4c
 8003648:	20000000 	.word	0x20000000
 800364c:	20000004 	.word	0x20000004

08003650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003654:	b094      	sub	sp, #80	; 0x50
 8003656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	647b      	str	r3, [r7, #68]	; 0x44
 800365c:	2300      	movs	r3, #0
 800365e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003660:	2300      	movs	r3, #0
 8003662:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003668:	4b79      	ldr	r3, [pc, #484]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	d00d      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x40>
 8003674:	2b08      	cmp	r3, #8
 8003676:	f200 80e1 	bhi.w	800383c <HAL_RCC_GetSysClockFreq+0x1ec>
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x34>
 800367e:	2b04      	cmp	r3, #4
 8003680:	d003      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x3a>
 8003682:	e0db      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b73      	ldr	r3, [pc, #460]	; (8003854 <HAL_RCC_GetSysClockFreq+0x204>)
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003688:	e0db      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800368a:	4b73      	ldr	r3, [pc, #460]	; (8003858 <HAL_RCC_GetSysClockFreq+0x208>)
 800368c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800368e:	e0d8      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003690:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003698:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369a:	4b6d      	ldr	r3, [pc, #436]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d063      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a6:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	2200      	movs	r2, #0
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ba:	2300      	movs	r3, #0
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
 80036be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036c2:	4622      	mov	r2, r4
 80036c4:	462b      	mov	r3, r5
 80036c6:	f04f 0000 	mov.w	r0, #0
 80036ca:	f04f 0100 	mov.w	r1, #0
 80036ce:	0159      	lsls	r1, r3, #5
 80036d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d4:	0150      	lsls	r0, r2, #5
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4621      	mov	r1, r4
 80036dc:	1a51      	subs	r1, r2, r1
 80036de:	6139      	str	r1, [r7, #16]
 80036e0:	4629      	mov	r1, r5
 80036e2:	eb63 0301 	sbc.w	r3, r3, r1
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f4:	4659      	mov	r1, fp
 80036f6:	018b      	lsls	r3, r1, #6
 80036f8:	4651      	mov	r1, sl
 80036fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036fe:	4651      	mov	r1, sl
 8003700:	018a      	lsls	r2, r1, #6
 8003702:	4651      	mov	r1, sl
 8003704:	ebb2 0801 	subs.w	r8, r2, r1
 8003708:	4659      	mov	r1, fp
 800370a:	eb63 0901 	sbc.w	r9, r3, r1
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800371e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003722:	4690      	mov	r8, r2
 8003724:	4699      	mov	r9, r3
 8003726:	4623      	mov	r3, r4
 8003728:	eb18 0303 	adds.w	r3, r8, r3
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	462b      	mov	r3, r5
 8003730:	eb49 0303 	adc.w	r3, r9, r3
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003742:	4629      	mov	r1, r5
 8003744:	024b      	lsls	r3, r1, #9
 8003746:	4621      	mov	r1, r4
 8003748:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800374c:	4621      	mov	r1, r4
 800374e:	024a      	lsls	r2, r1, #9
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003756:	2200      	movs	r2, #0
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
 800375a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800375c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003760:	f7fc fd9e 	bl	80002a0 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4613      	mov	r3, r2
 800376a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800376c:	e058      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376e:	4b38      	ldr	r3, [pc, #224]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	2200      	movs	r2, #0
 8003776:	4618      	mov	r0, r3
 8003778:	4611      	mov	r1, r2
 800377a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800377e:	623b      	str	r3, [r7, #32]
 8003780:	2300      	movs	r3, #0
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	f04f 0000 	mov.w	r0, #0
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	0159      	lsls	r1, r3, #5
 8003796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800379a:	0150      	lsls	r0, r2, #5
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4641      	mov	r1, r8
 80037a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037a6:	4649      	mov	r1, r9
 80037a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037c0:	ebb2 040a 	subs.w	r4, r2, sl
 80037c4:	eb63 050b 	sbc.w	r5, r3, fp
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	00eb      	lsls	r3, r5, #3
 80037d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d6:	00e2      	lsls	r2, r4, #3
 80037d8:	4614      	mov	r4, r2
 80037da:	461d      	mov	r5, r3
 80037dc:	4643      	mov	r3, r8
 80037de:	18e3      	adds	r3, r4, r3
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	464b      	mov	r3, r9
 80037e4:	eb45 0303 	adc.w	r3, r5, r3
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037f6:	4629      	mov	r1, r5
 80037f8:	028b      	lsls	r3, r1, #10
 80037fa:	4621      	mov	r1, r4
 80037fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003800:	4621      	mov	r1, r4
 8003802:	028a      	lsls	r2, r1, #10
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380a:	2200      	movs	r2, #0
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	61fa      	str	r2, [r7, #28]
 8003810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003814:	f7fc fd44 	bl	80002a0 <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4613      	mov	r3, r2
 800381e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	3301      	adds	r3, #1
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800383a:	e002      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetSysClockFreq+0x204>)
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003844:	4618      	mov	r0, r3
 8003846:	3750      	adds	r7, #80	; 0x50
 8003848:	46bd      	mov	sp, r7
 800384a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	00f42400 	.word	0x00f42400
 8003858:	007a1200 	.word	0x007a1200

0800385c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003878:	f7ff fff0 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4903      	ldr	r1, [pc, #12]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	0801ad5c 	.word	0x0801ad5c

0800389c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	220f      	movs	r2, #15
 80038aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_RCC_GetClockConfig+0x5c>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0203 	and.w	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <HAL_RCC_GetClockConfig+0x5c>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <HAL_RCC_GetClockConfig+0x5c>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RCC_GetClockConfig+0x5c>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	08db      	lsrs	r3, r3, #3
 80038d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <HAL_RCC_GetClockConfig+0x60>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0207 	and.w	r2, r3, #7
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40023c00 	.word	0x40023c00

08003900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e17e      	b.n	8003c10 <HAL_SPI_Init+0x310>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a70      	ldr	r2, [pc, #448]	; (8003ad8 <HAL_SPI_Init+0x1d8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <HAL_SPI_Init+0x3a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a6e      	ldr	r2, [pc, #440]	; (8003adc <HAL_SPI_Init+0x1dc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_SPI_Init+0x3a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6d      	ldr	r2, [pc, #436]	; (8003ae0 <HAL_SPI_Init+0x1e0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_SPI_Init+0x3a>
 8003930:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003934:	486b      	ldr	r0, [pc, #428]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003936:	f7fd f9cf 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_SPI_Init+0x56>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394a:	d004      	beq.n	8003956 <HAL_SPI_Init+0x56>
 800394c:	f240 1141 	movw	r1, #321	; 0x141
 8003950:	4864      	ldr	r0, [pc, #400]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003952:	f7fd f9c1 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00e      	beq.n	800397c <HAL_SPI_Init+0x7c>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003966:	d009      	beq.n	800397c <HAL_SPI_Init+0x7c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003970:	d004      	beq.n	800397c <HAL_SPI_Init+0x7c>
 8003972:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003976:	485b      	ldr	r0, [pc, #364]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003978:	f7fd f9ae 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003984:	d008      	beq.n	8003998 <HAL_SPI_Init+0x98>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <HAL_SPI_Init+0x98>
 800398e:	f240 1143 	movw	r1, #323	; 0x143
 8003992:	4854      	ldr	r0, [pc, #336]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003994:	f7fd f9a0 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a0:	d00d      	beq.n	80039be <HAL_SPI_Init+0xbe>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_SPI_Init+0xbe>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b2:	d004      	beq.n	80039be <HAL_SPI_Init+0xbe>
 80039b4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80039b8:	484a      	ldr	r0, [pc, #296]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 80039ba:	f7fd f98d 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d020      	beq.n	8003a08 <HAL_SPI_Init+0x108>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d01c      	beq.n	8003a08 <HAL_SPI_Init+0x108>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d018      	beq.n	8003a08 <HAL_SPI_Init+0x108>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	2b18      	cmp	r3, #24
 80039dc:	d014      	beq.n	8003a08 <HAL_SPI_Init+0x108>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d010      	beq.n	8003a08 <HAL_SPI_Init+0x108>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	2b28      	cmp	r3, #40	; 0x28
 80039ec:	d00c      	beq.n	8003a08 <HAL_SPI_Init+0x108>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	2b30      	cmp	r3, #48	; 0x30
 80039f4:	d008      	beq.n	8003a08 <HAL_SPI_Init+0x108>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	2b38      	cmp	r3, #56	; 0x38
 80039fc:	d004      	beq.n	8003a08 <HAL_SPI_Init+0x108>
 80039fe:	f240 1145 	movw	r1, #325	; 0x145
 8003a02:	4838      	ldr	r0, [pc, #224]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003a04:	f7fd f968 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_SPI_Init+0x122>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d004      	beq.n	8003a22 <HAL_SPI_Init+0x122>
 8003a18:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003a1c:	4831      	ldr	r0, [pc, #196]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003a1e:	f7fd f95b 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_SPI_Init+0x13c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d004      	beq.n	8003a3c <HAL_SPI_Init+0x13c>
 8003a32:	f240 1147 	movw	r1, #327	; 0x147
 8003a36:	482b      	ldr	r0, [pc, #172]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003a38:	f7fd f94e 	bl	8000cd8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d151      	bne.n	8003ae8 <HAL_SPI_Init+0x1e8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_SPI_Init+0x15e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d004      	beq.n	8003a5e <HAL_SPI_Init+0x15e>
 8003a54:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003a58:	4822      	ldr	r0, [pc, #136]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003a5a:	f7fd f93d 	bl	8000cd8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_SPI_Init+0x178>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d004      	beq.n	8003a78 <HAL_SPI_Init+0x178>
 8003a6e:	f240 114b 	movw	r1, #331	; 0x14b
 8003a72:	481c      	ldr	r0, [pc, #112]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003a74:	f7fd f930 	bl	8000cd8 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a80:	d125      	bne.n	8003ace <HAL_SPI_Init+0x1ce>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d059      	beq.n	8003b3e <HAL_SPI_Init+0x23e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d055      	beq.n	8003b3e <HAL_SPI_Init+0x23e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d051      	beq.n	8003b3e <HAL_SPI_Init+0x23e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	2b18      	cmp	r3, #24
 8003aa0:	d04d      	beq.n	8003b3e <HAL_SPI_Init+0x23e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d049      	beq.n	8003b3e <HAL_SPI_Init+0x23e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	2b28      	cmp	r3, #40	; 0x28
 8003ab0:	d045      	beq.n	8003b3e <HAL_SPI_Init+0x23e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2b30      	cmp	r3, #48	; 0x30
 8003ab8:	d041      	beq.n	8003b3e <HAL_SPI_Init+0x23e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	2b38      	cmp	r3, #56	; 0x38
 8003ac0:	d03d      	beq.n	8003b3e <HAL_SPI_Init+0x23e>
 8003ac2:	f240 114f 	movw	r1, #335	; 0x14f
 8003ac6:	4807      	ldr	r0, [pc, #28]	; (8003ae4 <HAL_SPI_Init+0x1e4>)
 8003ac8:	f7fd f906 	bl	8000cd8 <assert_failed>
 8003acc:	e037      	b.n	8003b3e <HAL_SPI_Init+0x23e>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	61da      	str	r2, [r3, #28]
 8003ad4:	e033      	b.n	8003b3e <HAL_SPI_Init+0x23e>
 8003ad6:	bf00      	nop
 8003ad8:	40013000 	.word	0x40013000
 8003adc:	40003800 	.word	0x40003800
 8003ae0:	40003c00 	.word	0x40003c00
 8003ae4:	08019154 	.word	0x08019154
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_SPI_Init+0x232>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d01c      	beq.n	8003b32 <HAL_SPI_Init+0x232>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d018      	beq.n	8003b32 <HAL_SPI_Init+0x232>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2b18      	cmp	r3, #24
 8003b06:	d014      	beq.n	8003b32 <HAL_SPI_Init+0x232>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d010      	beq.n	8003b32 <HAL_SPI_Init+0x232>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	2b28      	cmp	r3, #40	; 0x28
 8003b16:	d00c      	beq.n	8003b32 <HAL_SPI_Init+0x232>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	2b30      	cmp	r3, #48	; 0x30
 8003b1e:	d008      	beq.n	8003b32 <HAL_SPI_Init+0x232>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	2b38      	cmp	r3, #56	; 0x38
 8003b26:	d004      	beq.n	8003b32 <HAL_SPI_Init+0x232>
 8003b28:	f240 1159 	movw	r1, #345	; 0x159
 8003b2c:	483a      	ldr	r0, [pc, #232]	; (8003c18 <HAL_SPI_Init+0x318>)
 8003b2e:	f7fd f8d3 	bl	8000cd8 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <HAL_SPI_Init+0x25e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7fd f8ff 	bl	8000d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc2:	ea42 0103 	orr.w	r1, r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	0c1b      	lsrs	r3, r3, #16
 8003bdc:	f003 0104 	and.w	r1, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f003 0210 	and.w	r2, r3, #16
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	08019154 	.word	0x08019154

08003c1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08c      	sub	sp, #48	; 0x30
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <HAL_SPI_TransmitReceive+0x2a>
 8003c3c:	f240 417c 	movw	r1, #1148	; 0x47c
 8003c40:	4884      	ldr	r0, [pc, #528]	; (8003e54 <HAL_SPI_TransmitReceive+0x238>)
 8003c42:	f7fd f849 	bl	8000cd8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x38>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e18d      	b.n	8003f70 <HAL_SPI_TransmitReceive+0x354>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c5c:	f7fd fb00 	bl	8001260 <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c72:	887b      	ldrh	r3, [r7, #2]
 8003c74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d00f      	beq.n	8003c9e <HAL_SPI_TransmitReceive+0x82>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c84:	d107      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x7a>
 8003c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d003      	beq.n	8003c9e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
 8003c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c9c:	e15e      	b.n	8003f5c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x94>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x94>
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cb6:	e151      	b.n	8003f5c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d003      	beq.n	8003ccc <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2205      	movs	r2, #5
 8003cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	887a      	ldrh	r2, [r7, #2]
 8003ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	887a      	ldrh	r2, [r7, #2]
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d007      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d28:	d178      	bne.n	8003e1c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x11c>
 8003d32:	8b7b      	ldrh	r3, [r7, #26]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d166      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d5c:	e053      	b.n	8003e06 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d11b      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x188>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0x188>
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d113      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	881a      	ldrh	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	1c9a      	adds	r2, r3, #2
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d119      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x1ca>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d014      	beq.n	8003de6 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003de2:	2301      	movs	r3, #1
 8003de4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003de6:	f7fd fa3b 	bl	8001260 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d807      	bhi.n	8003e06 <HAL_SPI_TransmitReceive+0x1ea>
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d003      	beq.n	8003e06 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e04:	e0aa      	b.n	8003f5c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1a6      	bne.n	8003d5e <HAL_SPI_TransmitReceive+0x142>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1a1      	bne.n	8003d5e <HAL_SPI_TransmitReceive+0x142>
 8003e1a:	e07f      	b.n	8003f1c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_SPI_TransmitReceive+0x20e>
 8003e24:	8b7b      	ldrh	r3, [r7, #26]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d16e      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	7812      	ldrb	r2, [r2, #0]
 8003e36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e50:	e05a      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x2ec>
 8003e52:	bf00      	nop
 8003e54:	08019154 	.word	0x08019154
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d11c      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x284>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d017      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x284>
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d114      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d119      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x2c6>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d014      	beq.n	8003ee2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ee2:	f7fd f9bd 	bl	8001260 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d803      	bhi.n	8003efa <HAL_SPI_TransmitReceive+0x2de>
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d102      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x2e4>
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f06:	e029      	b.n	8003f5c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1a2      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x23c>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d19d      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fd45 	bl	80049b0 <SPI_EndRxTxTransaction>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f38:	e010      	b.n	8003f5c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	e000      	b.n	8003f5c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8003f5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3730      	adds	r7, #48	; 0x30
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]

  /* Check tx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <HAL_SPI_Transmit_DMA+0x24>
 8003f92:	f240 615c 	movw	r1, #1628	; 0x65c
 8003f96:	485c      	ldr	r0, [pc, #368]	; (8004108 <HAL_SPI_Transmit_DMA+0x190>)
 8003f98:	f7fc fe9e 	bl	8000cd8 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <HAL_SPI_Transmit_DMA+0x40>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fac:	d004      	beq.n	8003fb8 <HAL_SPI_Transmit_DMA+0x40>
 8003fae:	f240 615f 	movw	r1, #1631	; 0x65f
 8003fb2:	4855      	ldr	r0, [pc, #340]	; (8004108 <HAL_SPI_Transmit_DMA+0x190>)
 8003fb4:	f7fc fe90 	bl	8000cd8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_SPI_Transmit_DMA+0x4e>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e09b      	b.n	80040fe <HAL_SPI_Transmit_DMA+0x186>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Transmit_DMA+0x68>
  {
    errorcode = HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fde:	e089      	b.n	80040f4 <HAL_SPI_Transmit_DMA+0x17c>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_SPI_Transmit_DMA+0x74>
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <HAL_SPI_Transmit_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ff0:	e080      	b.n	80040f4 <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004038:	d10f      	bne.n	800405a <HAL_SPI_Transmit_DMA+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004048:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405e:	4a2b      	ldr	r2, [pc, #172]	; (800410c <HAL_SPI_Transmit_DMA+0x194>)
 8004060:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <HAL_SPI_Transmit_DMA+0x198>)
 8004068:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406e:	4a29      	ldr	r2, [pc, #164]	; (8004114 <HAL_SPI_Transmit_DMA+0x19c>)
 8004070:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	2200      	movs	r2, #0
 8004078:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4619      	mov	r1, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004090:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004092:	f7fd fc41 	bl	8001918 <HAL_DMA_Start_IT>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f043 0210 	orr.w	r2, r3, #16
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80040b4:	e01e      	b.n	80040f4 <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d007      	beq.n	80040d4 <HAL_SPI_Transmit_DMA+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0220 	orr.w	r2, r2, #32
 80040e2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0202 	orr.w	r2, r2, #2
 80040f2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	08019154 	.word	0x08019154
 800410c:	08004741 	.word	0x08004741
 8004110:	08004561 	.word	0x08004561
 8004114:	08004795 	.word	0x08004795

08004118 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_SPI_Receive_DMA+0x24>
 8004132:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
 8004136:	4862      	ldr	r0, [pc, #392]	; (80042c0 <HAL_SPI_Receive_DMA+0x1a8>)
 8004138:	f7fc fdce 	bl	8000cd8 <assert_failed>

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d119      	bne.n	8004178 <HAL_SPI_Receive_DMA+0x60>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414c:	d114      	bne.n	8004178 <HAL_SPI_Receive_DMA+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2204      	movs	r2, #4
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <HAL_SPI_Receive_DMA+0x50>
 800415e:	f240 61cf 	movw	r1, #1743	; 0x6cf
 8004162:	4857      	ldr	r0, [pc, #348]	; (80042c0 <HAL_SPI_Receive_DMA+0x1a8>)
 8004164:	f7fc fdb8 	bl	8000cd8 <assert_failed>

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f8ae 	bl	80042d0 <HAL_SPI_TransmitReceive_DMA>
 8004174:	4603      	mov	r3, r0
 8004176:	e09f      	b.n	80042b8 <HAL_SPI_Receive_DMA+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_SPI_Receive_DMA+0x6e>
 8004182:	2302      	movs	r3, #2
 8004184:	e098      	b.n	80042b8 <HAL_SPI_Receive_DMA+0x1a0>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d002      	beq.n	80041a0 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_BUSY;
 800419a:	2302      	movs	r3, #2
 800419c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800419e:	e086      	b.n	80042ae <HAL_SPI_Receive_DMA+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_SPI_Receive_DMA+0x94>
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <HAL_SPI_Receive_DMA+0x9a>
  {
    errorcode = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041b0:	e07d      	b.n	80042ae <HAL_SPI_Receive_DMA+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2204      	movs	r2, #4
 80041b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	88fa      	ldrh	r2, [r7, #6]
 80041ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f2:	d10f      	bne.n	8004214 <HAL_SPI_Receive_DMA+0xfc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004202:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004212:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004218:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <HAL_SPI_Receive_DMA+0x1ac>)
 800421a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004220:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <HAL_SPI_Receive_DMA+0x1b0>)
 8004222:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004228:	4a28      	ldr	r2, [pc, #160]	; (80042cc <HAL_SPI_Receive_DMA+0x1b4>)
 800422a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	2200      	movs	r2, #0
 8004232:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	4619      	mov	r1, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800424c:	f7fd fb64 	bl	8001918 <HAL_DMA_Start_IT>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00c      	beq.n	8004270 <HAL_SPI_Receive_DMA+0x158>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f043 0210 	orr.w	r2, r3, #16
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800426e:	e01e      	b.n	80042ae <HAL_SPI_Receive_DMA+0x196>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b40      	cmp	r3, #64	; 0x40
 800427c:	d007      	beq.n	800428e <HAL_SPI_Receive_DMA+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0220 	orr.w	r2, r2, #32
 800429c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	08019154 	.word	0x08019154
 80042c4:	0800475d 	.word	0x0800475d
 80042c8:	08004609 	.word	0x08004609
 80042cc:	08004795 	.word	0x08004795

080042d0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	75fb      	strb	r3, [r7, #23]

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <HAL_SPI_TransmitReceive_DMA+0x24>
 80042ea:	f240 713e 	movw	r1, #1854	; 0x73e
 80042ee:	4882      	ldr	r0, [pc, #520]	; (80044f8 <HAL_SPI_TransmitReceive_DMA+0x228>)
 80042f0:	f7fc fcf2 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <HAL_SPI_TransmitReceive_DMA+0x36>
 80042fc:	f240 713f 	movw	r1, #1855	; 0x73f
 8004300:	487d      	ldr	r0, [pc, #500]	; (80044f8 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8004302:	f7fc fce9 	bl	8000cd8 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <HAL_SPI_TransmitReceive_DMA+0x48>
 800430e:	f240 7142 	movw	r1, #1858	; 0x742
 8004312:	4879      	ldr	r0, [pc, #484]	; (80044f8 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8004314:	f7fc fce0 	bl	8000cd8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_SPI_TransmitReceive_DMA+0x56>
 8004322:	2302      	movs	r3, #2
 8004324:	e0e3      	b.n	80044ee <HAL_SPI_TransmitReceive_DMA+0x21e>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004334:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800433c:	7dbb      	ldrb	r3, [r7, #22]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d00d      	beq.n	800435e <HAL_SPI_TransmitReceive_DMA+0x8e>
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004348:	d106      	bne.n	8004358 <HAL_SPI_TransmitReceive_DMA+0x88>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <HAL_SPI_TransmitReceive_DMA+0x88>
 8004352:	7dbb      	ldrb	r3, [r7, #22]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d002      	beq.n	800435e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_BUSY;
 8004358:	2302      	movs	r3, #2
 800435a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800435c:	e0c2      	b.n	80044e4 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_SPI_TransmitReceive_DMA+0xa0>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_SPI_TransmitReceive_DMA+0xa0>
 800436a:	887b      	ldrh	r3, [r7, #2]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <HAL_SPI_TransmitReceive_DMA+0xa6>
  {
    errorcode = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004374:	e0b6      	b.n	80044e4 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b04      	cmp	r3, #4
 8004380:	d003      	beq.n	800438a <HAL_SPI_TransmitReceive_DMA+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2205      	movs	r2, #5
 8004386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	887a      	ldrh	r2, [r7, #2]
 800439a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	887a      	ldrh	r2, [r7, #2]
 80043b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d108      	bne.n	80043de <HAL_SPI_TransmitReceive_DMA+0x10e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	4a4a      	ldr	r2, [pc, #296]	; (80044fc <HAL_SPI_TransmitReceive_DMA+0x22c>)
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	4a49      	ldr	r2, [pc, #292]	; (8004500 <HAL_SPI_TransmitReceive_DMA+0x230>)
 80043da:	63da      	str	r2, [r3, #60]	; 0x3c
 80043dc:	e007      	b.n	80043ee <HAL_SPI_TransmitReceive_DMA+0x11e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	4a48      	ldr	r2, [pc, #288]	; (8004504 <HAL_SPI_TransmitReceive_DMA+0x234>)
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ea:	4a47      	ldr	r2, [pc, #284]	; (8004508 <HAL_SPI_TransmitReceive_DMA+0x238>)
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	4a46      	ldr	r2, [pc, #280]	; (800450c <HAL_SPI_TransmitReceive_DMA+0x23c>)
 80043f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fa:	2200      	movs	r2, #0
 80043fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	4619      	mov	r1, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004414:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004416:	f7fd fa7f 	bl	8001918 <HAL_DMA_Start_IT>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00c      	beq.n	800443a <HAL_SPI_TransmitReceive_DMA+0x16a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	f043 0210 	orr.w	r2, r3, #16
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004438:	e054      	b.n	80044e4 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444e:	2200      	movs	r2, #0
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004456:	2200      	movs	r2, #0
 8004458:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445e:	2200      	movs	r2, #0
 8004460:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004466:	2200      	movs	r2, #0
 8004468:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4619      	mov	r1, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004480:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004482:	f7fd fa49 	bl	8001918 <HAL_DMA_Start_IT>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <HAL_SPI_TransmitReceive_DMA+0x1d6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f043 0210 	orr.w	r2, r3, #16
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80044a4:	e01e      	b.n	80044e4 <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d007      	beq.n	80044c4 <HAL_SPI_TransmitReceive_DMA+0x1f4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0220 	orr.w	r2, r2, #32
 80044d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0202 	orr.w	r2, r2, #2
 80044e2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	08019154 	.word	0x08019154
 80044fc:	0800475d 	.word	0x0800475d
 8004500:	08004609 	.word	0x08004609
 8004504:	08004779 	.word	0x08004779
 8004508:	080046b1 	.word	0x080046b1
 800450c:	08004795 	.word	0x08004795

08004510 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800456e:	f7fc fe77 	bl	8001260 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004582:	d03b      	beq.n	80045fc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0220 	bic.w	r2, r2, #32
 8004592:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0202 	bic.w	r2, r2, #2
 80045a2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	2164      	movs	r1, #100	; 0x64
 80045a8:	6978      	ldr	r0, [r7, #20]
 80045aa:	f000 fa01 	bl	80049b0 <SPI_EndRxTxTransaction>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045f4:	6978      	ldr	r0, [r7, #20]
 80045f6:	f7ff ffa9 	bl	800454c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045fa:	e002      	b.n	8004602 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f009 fe3b 	bl	800e278 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004616:	f7fc fe23 	bl	8001260 <HAL_GetTick>
 800461a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d03b      	beq.n	80046a4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0220 	bic.w	r2, r2, #32
 800463a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <SPI_DMAReceiveCplt+0x58>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464c:	d108      	bne.n	8004660 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0203 	bic.w	r2, r2, #3
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	e007      	b.n	8004670 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	2164      	movs	r1, #100	; 0x64
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f935 	bl	80048e4 <SPI_EndRxTransaction>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff ff55 	bl	800454c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80046a2:	e002      	b.n	80046aa <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f009 fdfb 	bl	800e2a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046be:	f7fc fdcf 	bl	8001260 <HAL_GetTick>
 80046c2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d2:	d02f      	beq.n	8004734 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0220 	bic.w	r2, r2, #32
 80046e2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	2164      	movs	r1, #100	; 0x64
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f961 	bl	80049b0 <SPI_EndRxTxTransaction>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0203 	bic.w	r2, r2, #3
 800470e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff ff0d 	bl	800454c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004732:	e002      	b.n	800473a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f009 fda9 	bl	800e28c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff fede 	bl	8004510 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff feda 	bl	8004524 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff fed6 	bl	8004538 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0203 	bic.w	r2, r2, #3
 80047b0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	f043 0210 	orr.w	r2, r3, #16
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff fec0 	bl	800454c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047e4:	f7fc fd3c 	bl	8001260 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047f4:	f7fc fd34 	bl	8001260 <HAL_GetTick>
 80047f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047fa:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	015b      	lsls	r3, r3, #5
 8004800:	0d1b      	lsrs	r3, r3, #20
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480a:	e054      	b.n	80048b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d050      	beq.n	80048b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004814:	f7fc fd24 	bl	8001260 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	429a      	cmp	r2, r3
 8004822:	d902      	bls.n	800482a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d13d      	bne.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004842:	d111      	bne.n	8004868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484c:	d004      	beq.n	8004858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004856:	d107      	bne.n	8004868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004870:	d10f      	bne.n	8004892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e017      	b.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4013      	ands	r3, r2
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	bf0c      	ite	eq
 80048c6:	2301      	moveq	r3, #1
 80048c8:	2300      	movne	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d19b      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000000 	.word	0x20000000

080048e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f8:	d111      	bne.n	800491e <SPI_EndRxTransaction+0x3a>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004902:	d004      	beq.n	800490e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490c:	d107      	bne.n	800491e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004926:	d12a      	bne.n	800497e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004930:	d012      	beq.n	8004958 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2200      	movs	r2, #0
 800493a:	2180      	movs	r1, #128	; 0x80
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff ff49 	bl	80047d4 <SPI_WaitFlagStateUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02d      	beq.n	80049a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e026      	b.n	80049a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	2101      	movs	r1, #1
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7ff ff36 	bl	80047d4 <SPI_WaitFlagStateUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01a      	beq.n	80049a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	f043 0220 	orr.w	r2, r3, #32
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e013      	b.n	80049a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2200      	movs	r2, #0
 8004986:	2101      	movs	r1, #1
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff ff23 	bl	80047d4 <SPI_WaitFlagStateUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e000      	b.n	80049a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <SPI_EndRxTxTransaction+0x7c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <SPI_EndRxTxTransaction+0x80>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	0d5b      	lsrs	r3, r3, #21
 80049c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049da:	d112      	bne.n	8004a02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2200      	movs	r2, #0
 80049e4:	2180      	movs	r1, #128	; 0x80
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff fef4 	bl	80047d4 <SPI_WaitFlagStateUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d016      	beq.n	8004a20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f043 0220 	orr.w	r2, r3, #32
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e00f      	b.n	8004a22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b80      	cmp	r3, #128	; 0x80
 8004a1a:	d0f2      	beq.n	8004a02 <SPI_EndRxTxTransaction+0x52>
 8004a1c:	e000      	b.n	8004a20 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a1e:	bf00      	nop
  }

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000000 	.word	0x20000000
 8004a30:	165e9f81 	.word	0x165e9f81

08004a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e0c5      	b.n	8004bd2 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a64      	ldr	r2, [pc, #400]	; (8004bdc <HAL_TIM_Base_Init+0x1a8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d045      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d040      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a60      	ldr	r2, [pc, #384]	; (8004be0 <HAL_TIM_Base_Init+0x1ac>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d03b      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a5e      	ldr	r2, [pc, #376]	; (8004be4 <HAL_TIM_Base_Init+0x1b0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d036      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a5d      	ldr	r2, [pc, #372]	; (8004be8 <HAL_TIM_Base_Init+0x1b4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d031      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a5b      	ldr	r2, [pc, #364]	; (8004bec <HAL_TIM_Base_Init+0x1b8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02c      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a5a      	ldr	r2, [pc, #360]	; (8004bf0 <HAL_TIM_Base_Init+0x1bc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d027      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a58      	ldr	r2, [pc, #352]	; (8004bf4 <HAL_TIM_Base_Init+0x1c0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d022      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a57      	ldr	r2, [pc, #348]	; (8004bf8 <HAL_TIM_Base_Init+0x1c4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d01d      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a55      	ldr	r2, [pc, #340]	; (8004bfc <HAL_TIM_Base_Init+0x1c8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d018      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a54      	ldr	r2, [pc, #336]	; (8004c00 <HAL_TIM_Base_Init+0x1cc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a52      	ldr	r2, [pc, #328]	; (8004c04 <HAL_TIM_Base_Init+0x1d0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00e      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a51      	ldr	r2, [pc, #324]	; (8004c08 <HAL_TIM_Base_Init+0x1d4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d009      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a4f      	ldr	r2, [pc, #316]	; (8004c0c <HAL_TIM_Base_Init+0x1d8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_TIM_Base_Init+0xa8>
 8004ad2:	f240 1113 	movw	r1, #275	; 0x113
 8004ad6:	484e      	ldr	r0, [pc, #312]	; (8004c10 <HAL_TIM_Base_Init+0x1dc>)
 8004ad8:	f7fc f8fe 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d014      	beq.n	8004b0e <HAL_TIM_Base_Init+0xda>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d010      	beq.n	8004b0e <HAL_TIM_Base_Init+0xda>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d00c      	beq.n	8004b0e <HAL_TIM_Base_Init+0xda>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d008      	beq.n	8004b0e <HAL_TIM_Base_Init+0xda>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d004      	beq.n	8004b0e <HAL_TIM_Base_Init+0xda>
 8004b04:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004b08:	4841      	ldr	r0, [pc, #260]	; (8004c10 <HAL_TIM_Base_Init+0x1dc>)
 8004b0a:	f7fc f8e5 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00e      	beq.n	8004b34 <HAL_TIM_Base_Init+0x100>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1e:	d009      	beq.n	8004b34 <HAL_TIM_Base_Init+0x100>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b28:	d004      	beq.n	8004b34 <HAL_TIM_Base_Init+0x100>
 8004b2a:	f240 1115 	movw	r1, #277	; 0x115
 8004b2e:	4838      	ldr	r0, [pc, #224]	; (8004c10 <HAL_TIM_Base_Init+0x1dc>)
 8004b30:	f7fc f8d2 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_TIM_Base_Init+0x11a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b80      	cmp	r3, #128	; 0x80
 8004b42:	d004      	beq.n	8004b4e <HAL_TIM_Base_Init+0x11a>
 8004b44:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004b48:	4831      	ldr	r0, [pc, #196]	; (8004c10 <HAL_TIM_Base_Init+0x1dc>)
 8004b4a:	f7fc f8c5 	bl	8000cd8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f856 	bl	8004c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f000 fa4a 	bl	8005014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40001000 	.word	0x40001000
 8004bf0:	40001400 	.word	0x40001400
 8004bf4:	40010400 	.word	0x40010400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	40001800 	.word	0x40001800
 8004c08:	40001c00 	.word	0x40001c00
 8004c0c:	40002000 	.word	0x40002000
 8004c10:	0801918c 	.word	0x0801918c

08004c14 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a51      	ldr	r2, [pc, #324]	; (8004d7c <HAL_TIM_Base_Start_IT+0x154>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d045      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c42:	d040      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a4d      	ldr	r2, [pc, #308]	; (8004d80 <HAL_TIM_Base_Start_IT+0x158>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d03b      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a4c      	ldr	r2, [pc, #304]	; (8004d84 <HAL_TIM_Base_Start_IT+0x15c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d036      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <HAL_TIM_Base_Start_IT+0x160>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d031      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a49      	ldr	r2, [pc, #292]	; (8004d8c <HAL_TIM_Base_Start_IT+0x164>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d02c      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a47      	ldr	r2, [pc, #284]	; (8004d90 <HAL_TIM_Base_Start_IT+0x168>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d027      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a46      	ldr	r2, [pc, #280]	; (8004d94 <HAL_TIM_Base_Start_IT+0x16c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a44      	ldr	r2, [pc, #272]	; (8004d98 <HAL_TIM_Base_Start_IT+0x170>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01d      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a43      	ldr	r2, [pc, #268]	; (8004d9c <HAL_TIM_Base_Start_IT+0x174>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d018      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a41      	ldr	r2, [pc, #260]	; (8004da0 <HAL_TIM_Base_Start_IT+0x178>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a40      	ldr	r2, [pc, #256]	; (8004da4 <HAL_TIM_Base_Start_IT+0x17c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a3e      	ldr	r2, [pc, #248]	; (8004da8 <HAL_TIM_Base_Start_IT+0x180>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a3d      	ldr	r2, [pc, #244]	; (8004dac <HAL_TIM_Base_Start_IT+0x184>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_TIM_Base_Start_IT+0x9e>
 8004cbc:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004cc0:	483b      	ldr	r0, [pc, #236]	; (8004db0 <HAL_TIM_Base_Start_IT+0x188>)
 8004cc2:	f7fc f809 	bl	8000cd8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d001      	beq.n	8004cd6 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e04e      	b.n	8004d74 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <HAL_TIM_Base_Start_IT+0x154>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x116>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d01d      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x116>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <HAL_TIM_Base_Start_IT+0x158>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x116>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <HAL_TIM_Base_Start_IT+0x15c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x116>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_TIM_Base_Start_IT+0x160>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x116>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1b      	ldr	r2, [pc, #108]	; (8004d94 <HAL_TIM_Base_Start_IT+0x16c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x116>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1a      	ldr	r2, [pc, #104]	; (8004d98 <HAL_TIM_Base_Start_IT+0x170>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0x116>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <HAL_TIM_Base_Start_IT+0x17c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d111      	bne.n	8004d62 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d010      	beq.n	8004d72 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	e007      	b.n	8004d72 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40001000 	.word	0x40001000
 8004d90:	40001400 	.word	0x40001400
 8004d94:	40010400 	.word	0x40010400
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40014400 	.word	0x40014400
 8004da0:	40014800 	.word	0x40014800
 8004da4:	40001800 	.word	0x40001800
 8004da8:	40001c00 	.word	0x40001c00
 8004dac:	40002000 	.word	0x40002000
 8004db0:	0801918c 	.word	0x0801918c

08004db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d122      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0202 	mvn.w	r2, #2
 8004de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f8ee 	bl	8004fd8 <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f8e0 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f8f1 	bl	8004fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0204 	mvn.w	r2, #4
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f8c4 	bl	8004fd8 <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f8b6 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f8c7 	bl	8004fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0208 	mvn.w	r2, #8
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f89a 	bl	8004fd8 <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f88c 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f89d 	bl	8004fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d122      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	d11b      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0210 	mvn.w	r2, #16
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f870 	bl	8004fd8 <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f862 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f873 	bl	8004fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d10e      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0201 	mvn.w	r2, #1
 8004f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fb febc 	bl	8000cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b80      	cmp	r3, #128	; 0x80
 8004f44:	d10e      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d107      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f902 	bl	8005168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d10e      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d107      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f838 	bl	8005000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0220 	mvn.w	r2, #32
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8cc 	bl	8005154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a40      	ldr	r2, [pc, #256]	; (8005128 <TIM_Base_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005032:	d00f      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a3d      	ldr	r2, [pc, #244]	; (800512c <TIM_Base_SetConfig+0x118>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <TIM_Base_SetConfig+0x11c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3b      	ldr	r2, [pc, #236]	; (8005134 <TIM_Base_SetConfig+0x120>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a3a      	ldr	r2, [pc, #232]	; (8005138 <TIM_Base_SetConfig+0x124>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d108      	bne.n	8005066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2f      	ldr	r2, [pc, #188]	; (8005128 <TIM_Base_SetConfig+0x114>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d02b      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d027      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2c      	ldr	r2, [pc, #176]	; (800512c <TIM_Base_SetConfig+0x118>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d023      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <TIM_Base_SetConfig+0x11c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01f      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <TIM_Base_SetConfig+0x120>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01b      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a29      	ldr	r2, [pc, #164]	; (8005138 <TIM_Base_SetConfig+0x124>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d017      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a28      	ldr	r2, [pc, #160]	; (800513c <TIM_Base_SetConfig+0x128>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a27      	ldr	r2, [pc, #156]	; (8005140 <TIM_Base_SetConfig+0x12c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00f      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a26      	ldr	r2, [pc, #152]	; (8005144 <TIM_Base_SetConfig+0x130>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00b      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a25      	ldr	r2, [pc, #148]	; (8005148 <TIM_Base_SetConfig+0x134>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a24      	ldr	r2, [pc, #144]	; (800514c <TIM_Base_SetConfig+0x138>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a23      	ldr	r2, [pc, #140]	; (8005150 <TIM_Base_SetConfig+0x13c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d108      	bne.n	80050d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <TIM_Base_SetConfig+0x114>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_Base_SetConfig+0xf8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a0c      	ldr	r2, [pc, #48]	; (8005138 <TIM_Base_SetConfig+0x124>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d103      	bne.n	8005114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	615a      	str	r2, [r3, #20]
}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40010000 	.word	0x40010000
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40010400 	.word	0x40010400
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800
 8005148:	40001800 	.word	0x40001800
 800514c:	40001c00 	.word	0x40001c00
 8005150:	40002000 	.word	0x40002000

08005154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800517c:	b084      	sub	sp, #16
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	f107 001c 	add.w	r0, r7, #28
 800518a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	2b01      	cmp	r3, #1
 8005192:	d122      	bne.n	80051da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d105      	bne.n	80051ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f001 f948 	bl	8006464 <USB_CoreReset>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	e01a      	b.n	8005210 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f001 f93c 	bl	8006464 <USB_CoreReset>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
 8005202:	e005      	b.n	8005210 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	2b01      	cmp	r3, #1
 8005214:	d10b      	bne.n	800522e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f043 0206 	orr.w	r2, r3, #6
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f043 0220 	orr.w	r2, r3, #32
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800523a:	b004      	add	sp, #16
 800523c:	4770      	bx	lr

0800523e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f023 0201 	bic.w	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d115      	bne.n	80052d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052b0:	2001      	movs	r0, #1
 80052b2:	f7fb ffe1 	bl	8001278 <HAL_Delay>
      ms++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 f865 	bl	800638c <USB_GetMode>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d01e      	beq.n	8005306 <USB_SetCurrentMode+0x84>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b31      	cmp	r3, #49	; 0x31
 80052cc:	d9f0      	bls.n	80052b0 <USB_SetCurrentMode+0x2e>
 80052ce:	e01a      	b.n	8005306 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d115      	bne.n	8005302 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052e2:	2001      	movs	r0, #1
 80052e4:	f7fb ffc8 	bl	8001278 <HAL_Delay>
      ms++;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 f84c 	bl	800638c <USB_GetMode>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <USB_SetCurrentMode+0x84>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b31      	cmp	r3, #49	; 0x31
 80052fe:	d9f0      	bls.n	80052e2 <USB_SetCurrentMode+0x60>
 8005300:	e001      	b.n	8005306 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e005      	b.n	8005312 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b32      	cmp	r3, #50	; 0x32
 800530a:	d101      	bne.n	8005310 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800531c:	b084      	sub	sp, #16
 800531e:	b580      	push	{r7, lr}
 8005320:	b086      	sub	sp, #24
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800532a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e009      	b.n	8005350 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3340      	adds	r3, #64	; 0x40
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	2200      	movs	r2, #0
 8005348:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3301      	adds	r3, #1
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b0e      	cmp	r3, #14
 8005354:	d9f2      	bls.n	800533c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d11c      	bne.n	8005396 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800536a:	f043 0302 	orr.w	r3, r3, #2
 800536e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
 8005394:	e00b      	b.n	80053ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	4619      	mov	r1, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	461a      	mov	r2, r3
 80053ca:	680b      	ldr	r3, [r1, #0]
 80053cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d10c      	bne.n	80053ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053da:	2100      	movs	r1, #0
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f965 	bl	80056ac <USB_SetDevSpeed>
 80053e2:	e008      	b.n	80053f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053e4:	2101      	movs	r1, #1
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f960 	bl	80056ac <USB_SetDevSpeed>
 80053ec:	e003      	b.n	80053f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053ee:	2103      	movs	r1, #3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f95b 	bl	80056ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053f6:	2110      	movs	r1, #16
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8f3 	bl	80055e4 <USB_FlushTxFifo>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f91f 	bl	800564c <USB_FlushRxFifo>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	461a      	mov	r2, r3
 8005420:	2300      	movs	r3, #0
 8005422:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542a:	461a      	mov	r2, r3
 800542c:	2300      	movs	r3, #0
 800542e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	461a      	mov	r2, r3
 8005438:	2300      	movs	r3, #0
 800543a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	e043      	b.n	80054ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005458:	d118      	bne.n	800548c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e013      	b.n	800549e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	461a      	mov	r2, r3
 8005484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e008      	b.n	800549e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	461a      	mov	r2, r3
 800549a:	2300      	movs	r3, #0
 800549c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	461a      	mov	r2, r3
 80054ac:	2300      	movs	r3, #0
 80054ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	461a      	mov	r2, r3
 80054be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	3301      	adds	r3, #1
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d3b7      	bcc.n	8005442 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d2:	2300      	movs	r3, #0
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	e043      	b.n	8005560 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ee:	d118      	bne.n	8005522 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	461a      	mov	r2, r3
 8005504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e013      	b.n	8005534 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	461a      	mov	r2, r3
 800551a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	e008      	b.n	8005534 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552e:	461a      	mov	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	461a      	mov	r2, r3
 8005542:	2300      	movs	r3, #0
 8005544:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	461a      	mov	r2, r3
 8005554:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005558:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	3301      	adds	r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	429a      	cmp	r2, r3
 8005566:	d3b7      	bcc.n	80054d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800557a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005588:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f043 0210 	orr.w	r2, r3, #16
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <USB_DevInit+0x2c4>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f043 0208 	orr.w	r2, r3, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d107      	bne.n	80055d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055dc:	b004      	add	sp, #16
 80055de:	4770      	bx	lr
 80055e0:	803c3800 	.word	0x803c3800

080055e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a13      	ldr	r2, [pc, #76]	; (8005648 <USB_FlushTxFifo+0x64>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d901      	bls.n	8005604 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e01b      	b.n	800563c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	daf2      	bge.n	80055f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	019b      	lsls	r3, r3, #6
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <USB_FlushTxFifo+0x64>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e006      	b.n	800563c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b20      	cmp	r3, #32
 8005638:	d0f0      	beq.n	800561c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	00030d40 	.word	0x00030d40

0800564c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <USB_FlushRxFifo+0x5c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e018      	b.n	800569c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	daf2      	bge.n	8005658 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2210      	movs	r2, #16
 800567a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3301      	adds	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <USB_FlushRxFifo+0x5c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e006      	b.n	800569c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d0f0      	beq.n	800567c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	00030d40 	.word	0x00030d40

080056ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d13a      	bne.n	8005770 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	2101      	movs	r1, #1
 800570c:	fa01 f303 	lsl.w	r3, r1, r3
 8005710:	b29b      	uxth	r3, r3
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005718:	4313      	orrs	r3, r2
 800571a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d155      	bne.n	80057de <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	791b      	ldrb	r3, [r3, #4]
 800574c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800574e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	059b      	lsls	r3, r3, #22
 8005754:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005756:	4313      	orrs	r3, r2
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e036      	b.n	80057de <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578e:	4313      	orrs	r3, r2
 8005790:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d11a      	bne.n	80057de <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	791b      	ldrb	r3, [r3, #4]
 80057c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057c4:	430b      	orrs	r3, r1
 80057c6:	4313      	orrs	r3, r2
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057dc:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d161      	bne.n	80058cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800581a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800581e:	d11f      	bne.n	8005860 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800583e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800585e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	2101      	movs	r1, #1
 8005872:	fa01 f303 	lsl.w	r3, r1, r3
 8005876:	b29b      	uxth	r3, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	68f9      	ldr	r1, [r7, #12]
 800587c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005880:	4013      	ands	r3, r2
 8005882:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	2101      	movs	r1, #1
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	b29b      	uxth	r3, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a4:	4013      	ands	r3, r2
 80058a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	0159      	lsls	r1, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	440b      	add	r3, r1
 80058be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c2:	4619      	mov	r1, r3
 80058c4:	4b35      	ldr	r3, [pc, #212]	; (800599c <USB_DeactivateEndpoint+0x1b0>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]
 80058ca:	e060      	b.n	800598e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e2:	d11f      	bne.n	8005924 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005902:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005922:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f303 	lsl.w	r3, r1, r3
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	43db      	mvns	r3, r3
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005944:	4013      	ands	r3, r2
 8005946:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	43db      	mvns	r3, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4013      	ands	r3, r2
 800596a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	0159      	lsls	r1, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	440b      	add	r3, r1
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	4619      	mov	r1, r3
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <USB_DeactivateEndpoint+0x1b4>)
 800598a:	4013      	ands	r3, r2
 800598c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	ec337800 	.word	0xec337800
 80059a0:	eff37800 	.word	0xeff37800

080059a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	4613      	mov	r3, r2
 80059b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	f040 815c 	bne.w	8005c7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d132      	bne.n	8005a34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2c:	0cdb      	lsrs	r3, r3, #19
 8005a2e:	04db      	lsls	r3, r3, #19
 8005a30:	6113      	str	r3, [r2, #16]
 8005a32:	e074      	b.n	8005b1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4e:	0cdb      	lsrs	r3, r3, #19
 8005a50:	04db      	lsls	r3, r3, #19
 8005a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6999      	ldr	r1, [r3, #24]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	440b      	add	r3, r1
 8005a90:	1e59      	subs	r1, r3, #1
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a9c:	4b9d      	ldr	r3, [pc, #628]	; (8005d14 <USB_EPStartXfer+0x370>)
 8005a9e:	400b      	ands	r3, r1
 8005aa0:	69b9      	ldr	r1, [r7, #24]
 8005aa2:	0148      	lsls	r0, r1, #5
 8005aa4:	69f9      	ldr	r1, [r7, #28]
 8005aa6:	4401      	add	r1, r0
 8005aa8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aac:	4313      	orrs	r3, r2
 8005aae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac6:	69b9      	ldr	r1, [r7, #24]
 8005ac8:	0148      	lsls	r0, r1, #5
 8005aca:	69f9      	ldr	r1, [r7, #28]
 8005acc:	4401      	add	r1, r0
 8005ace:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	791b      	ldrb	r3, [r3, #4]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d11f      	bne.n	8005b1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005afc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d14b      	bne.n	8005bbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	461a      	mov	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	791b      	ldrb	r3, [r3, #4]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d128      	bne.n	8005b9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d110      	bne.n	8005b7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e00f      	b.n	8005b9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e133      	b.n	8005e24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	791b      	ldrb	r3, [r3, #4]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d015      	beq.n	8005c10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 811b 	beq.w	8005e24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	2101      	movs	r1, #1
 8005c00:	fa01 f303 	lsl.w	r3, r1, r3
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	634b      	str	r3, [r1, #52]	; 0x34
 8005c0e:	e109      	b.n	8005e24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d110      	bne.n	8005c42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	e00f      	b.n	8005c62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6919      	ldr	r1, [r3, #16]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	b298      	uxth	r0, r3
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fa34 	bl	80060e4 <USB_WritePacket>
 8005c7c:	e0d2      	b.n	8005e24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c98:	0cdb      	lsrs	r3, r3, #19
 8005c9a:	04db      	lsls	r3, r3, #19
 8005c9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d126      	bne.n	8005d18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce0:	69b9      	ldr	r1, [r7, #24]
 8005ce2:	0148      	lsls	r0, r1, #5
 8005ce4:	69f9      	ldr	r1, [r7, #28]
 8005ce6:	4401      	add	r1, r0
 8005ce8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cec:	4313      	orrs	r3, r2
 8005cee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d0e:	6113      	str	r3, [r2, #16]
 8005d10:	e03a      	b.n	8005d88 <USB_EPStartXfer+0x3e4>
 8005d12:	bf00      	nop
 8005d14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	1e5a      	subs	r2, r3, #1
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	8afa      	ldrh	r2, [r7, #22]
 8005d34:	fb03 f202 	mul.w	r2, r3, r2
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	8afb      	ldrh	r3, [r7, #22]
 8005d4c:	04d9      	lsls	r1, r3, #19
 8005d4e:	4b38      	ldr	r3, [pc, #224]	; (8005e30 <USB_EPStartXfer+0x48c>)
 8005d50:	400b      	ands	r3, r1
 8005d52:	69b9      	ldr	r1, [r7, #24]
 8005d54:	0148      	lsls	r0, r1, #5
 8005d56:	69f9      	ldr	r1, [r7, #28]
 8005d58:	4401      	add	r1, r0
 8005d5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d78:	69b9      	ldr	r1, [r7, #24]
 8005d7a:	0148      	lsls	r0, r1, #5
 8005d7c:	69f9      	ldr	r1, [r7, #28]
 8005d7e:	4401      	add	r1, r0
 8005d80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d84:	4313      	orrs	r3, r2
 8005d86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d10d      	bne.n	8005daa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6919      	ldr	r1, [r3, #16]
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	460a      	mov	r2, r1
 8005da8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	791b      	ldrb	r3, [r3, #4]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d128      	bne.n	8005e04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d110      	bne.n	8005de4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ddc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e00f      	b.n	8005e04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	1ff80000 	.word	0x1ff80000

08005e34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	f040 80ce 	bne.w	8005ff2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d132      	bne.n	8005ec4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebc:	0cdb      	lsrs	r3, r3, #19
 8005ebe:	04db      	lsls	r3, r3, #19
 8005ec0:	6113      	str	r3, [r2, #16]
 8005ec2:	e04e      	b.n	8005f62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ede:	0cdb      	lsrs	r3, r3, #19
 8005ee0:	04db      	lsls	r3, r3, #19
 8005ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d903      	bls.n	8005f1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f52:	6939      	ldr	r1, [r7, #16]
 8005f54:	0148      	lsls	r0, r1, #5
 8005f56:	6979      	ldr	r1, [r7, #20]
 8005f58:	4401      	add	r1, r0
 8005f5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d11e      	bne.n	8005fa6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	e097      	b.n	80060d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8083 	beq.w	80060d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	6979      	ldr	r1, [r7, #20]
 8005fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fec:	4313      	orrs	r3, r2
 8005fee:	634b      	str	r3, [r1, #52]	; 0x34
 8005ff0:	e071      	b.n	80060d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600c:	0cdb      	lsrs	r3, r3, #19
 800600e:	04db      	lsls	r3, r3, #19
 8006010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006034:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800606c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006084:	6939      	ldr	r1, [r7, #16]
 8006086:	0148      	lsls	r0, r1, #5
 8006088:	6979      	ldr	r1, [r7, #20]
 800608a:	4401      	add	r1, r0
 800608c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006090:	4313      	orrs	r3, r2
 8006092:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d10d      	bne.n	80060b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6919      	ldr	r1, [r3, #16]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	460a      	mov	r2, r1
 80060b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	; 0x24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	4611      	mov	r1, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	460b      	mov	r3, r1
 80060f4:	71fb      	strb	r3, [r7, #7]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006102:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d123      	bne.n	8006152 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800610a:	88bb      	ldrh	r3, [r7, #4]
 800610c:	3303      	adds	r3, #3
 800610e:	089b      	lsrs	r3, r3, #2
 8006110:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006112:	2300      	movs	r3, #0
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	e018      	b.n	800614a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	031a      	lsls	r2, r3, #12
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006124:	461a      	mov	r2, r3
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	3301      	adds	r3, #1
 8006130:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3301      	adds	r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	3301      	adds	r3, #1
 800613c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3301      	adds	r3, #1
 8006142:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	3301      	adds	r3, #1
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	429a      	cmp	r2, r3
 8006150:	d3e2      	bcc.n	8006118 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3724      	adds	r7, #36	; 0x24
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d12c      	bne.n	80061d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	db12      	blt.n	80061b4 <USB_EPSetStall+0x54>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00f      	beq.n	80061b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e02b      	b.n	800622e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	db12      	blt.n	800620e <USB_EPSetStall+0xae>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00f      	beq.n	800620e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800620c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800622c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d128      	bne.n	80062aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006276:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	791b      	ldrb	r3, [r3, #4]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d003      	beq.n	8006288 <USB_EPClearStall+0x4c>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	791b      	ldrb	r3, [r3, #4]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d138      	bne.n	80062fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	e027      	b.n	80062fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	791b      	ldrb	r3, [r3, #4]
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d003      	beq.n	80062da <USB_EPClearStall+0x9e>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	791b      	ldrb	r3, [r3, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d10f      	bne.n	80062fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006336:	f023 0302 	bic.w	r3, r3, #2
 800633a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006364:	f023 0303 	bic.w	r3, r3, #3
 8006368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006378:	f043 0302 	orr.w	r3, r3, #2
 800637c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	f003 0301 	and.w	r3, r3, #1
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	460b      	mov	r3, r1
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	333c      	adds	r3, #60	; 0x3c
 80063be:	3304      	adds	r3, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4a26      	ldr	r2, [pc, #152]	; (8006460 <USB_EP0_OutStart+0xb8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d90a      	bls.n	80063e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063dc:	d101      	bne.n	80063e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e037      	b.n	8006452 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	461a      	mov	r2, r3
 80063ea:	2300      	movs	r3, #0
 80063ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006410:	f043 0318 	orr.w	r3, r3, #24
 8006414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006424:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006428:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10f      	bne.n	8006450 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800644e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	4f54300a 	.word	0x4f54300a

08006464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4a13      	ldr	r2, [pc, #76]	; (80064c8 <USB_CoreReset+0x64>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d901      	bls.n	8006482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e01b      	b.n	80064ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	daf2      	bge.n	8006470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f043 0201 	orr.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <USB_CoreReset+0x64>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d901      	bls.n	80064ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e006      	b.n	80064ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d0f0      	beq.n	800649a <USB_CoreReset+0x36>

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	00030d40 	.word	0x00030d40

080064cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80064d0:	4904      	ldr	r1, [pc, #16]	; (80064e4 <MX_FATFS_Init+0x18>)
 80064d2:	4805      	ldr	r0, [pc, #20]	; (80064e8 <MX_FATFS_Init+0x1c>)
 80064d4:	f004 fd80 	bl	800afd8 <FATFS_LinkDriver>
 80064d8:	4603      	mov	r3, r0
 80064da:	461a      	mov	r2, r3
 80064dc:	4b03      	ldr	r3, [pc, #12]	; (80064ec <MX_FATFS_Init+0x20>)
 80064de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80064e0:	bf00      	nop
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20001d34 	.word	0x20001d34
 80064e8:	2000000c 	.word	0x2000000c
 80064ec:	20001d30 	.word	0x20001d30

080064f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80064f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <spi_flash_delay>:
static app_flash_drv_t m_spi_flash;
static void spi_flash_delay(void *arg, uint32_t ms);
//static QueueHandle_t m_cmd_queue;

static void spi_flash_delay(void *arg, uint32_t ms)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
    uint32_t now = xTaskGetTickCount();
 800650a:	f006 fb95 	bl	800cc38 <xTaskGetTickCount>
 800650e:	4603      	mov	r3, r0
 8006510:	60fb      	str	r3, [r7, #12]
    vTaskDelayUntil(&now, ms);
 8006512:	f107 030c 	add.w	r3, r7, #12
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f006 f9c7 	bl	800c8ac <vTaskDelayUntil>
}
 800651e:	bf00      	nop
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <storage_flash_initialize>:


void storage_flash_initialize(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
    app_drv_spi_initialize();
 800652c:	f007 fec2 	bl	800e2b4 <app_drv_spi_initialize>
    m_spi_flash.error = false;
 8006530:	4b17      	ldr	r3, [pc, #92]	; (8006590 <storage_flash_initialize+0x68>)
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    m_spi_flash.spi = &hspi1;
 8006538:	4b15      	ldr	r3, [pc, #84]	; (8006590 <storage_flash_initialize+0x68>)
 800653a:	4a16      	ldr	r2, [pc, #88]	; (8006594 <storage_flash_initialize+0x6c>)
 800653c:	601a      	str	r2, [r3, #0]
    m_spi_flash.callback.spi_cs = app_drv_spi_cs;
 800653e:	4b14      	ldr	r3, [pc, #80]	; (8006590 <storage_flash_initialize+0x68>)
 8006540:	4a15      	ldr	r2, [pc, #84]	; (8006598 <storage_flash_initialize+0x70>)
 8006542:	615a      	str	r2, [r3, #20]
    m_spi_flash.callback.spi_rx_buffer = app_drv_spi_receive_frame;
 8006544:	4b12      	ldr	r3, [pc, #72]	; (8006590 <storage_flash_initialize+0x68>)
 8006546:	4a15      	ldr	r2, [pc, #84]	; (800659c <storage_flash_initialize+0x74>)
 8006548:	609a      	str	r2, [r3, #8]
    m_spi_flash.callback.spi_tx_buffer = app_drv_spi_transmit_frame;
 800654a:	4b11      	ldr	r3, [pc, #68]	; (8006590 <storage_flash_initialize+0x68>)
 800654c:	4a14      	ldr	r2, [pc, #80]	; (80065a0 <storage_flash_initialize+0x78>)
 800654e:	605a      	str	r2, [r3, #4]
    m_spi_flash.callback.spi_tx_rx = app_drv_spi_transmit_receive_frame;
 8006550:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <storage_flash_initialize+0x68>)
 8006552:	4a14      	ldr	r2, [pc, #80]	; (80065a4 <storage_flash_initialize+0x7c>)
 8006554:	60da      	str	r2, [r3, #12]
    m_spi_flash.callback.spi_tx_byte = app_drv_spi_transmit_byte;
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <storage_flash_initialize+0x68>)
 8006558:	4a13      	ldr	r2, [pc, #76]	; (80065a8 <storage_flash_initialize+0x80>)
 800655a:	611a      	str	r2, [r3, #16]
    m_spi_flash.callback.delay_ms = spi_flash_delay;
 800655c:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <storage_flash_initialize+0x68>)
 800655e:	4a13      	ldr	r2, [pc, #76]	; (80065ac <storage_flash_initialize+0x84>)
 8006560:	619a      	str	r2, [r3, #24]

    if (app_spi_flash_initialize(&m_spi_flash) == false)
 8006562:	480b      	ldr	r0, [pc, #44]	; (8006590 <storage_flash_initialize+0x68>)
 8006564:	f007 ff64 	bl	800e430 <app_spi_flash_initialize>
 8006568:	4603      	mov	r3, r0
 800656a:	f083 0301 	eor.w	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <storage_flash_initialize+0x64>
    {
        m_spi_flash.error = true;
 8006574:	4b06      	ldr	r3, [pc, #24]	; (8006590 <storage_flash_initialize+0x68>)
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        DEBUG_ERROR("SPI flash error\r\n");
 800657c:	f009 fe08 	bl	8010190 <app_debug_get_ms>
 8006580:	4603      	mov	r3, r0
 8006582:	4a0b      	ldr	r2, [pc, #44]	; (80065b0 <storage_flash_initialize+0x88>)
 8006584:	4619      	mov	r1, r3
 8006586:	480b      	ldr	r0, [pc, #44]	; (80065b4 <storage_flash_initialize+0x8c>)
 8006588:	f009 ff7e 	bl	8010488 <app_debug_print_raw>

//    if (!m_cmd_queue)
//    {
//        m_cmd_queue = xQueueCreate(4, sizeof(uint8_t));
//    }
}
 800658c:	bf00      	nop
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20002d74 	.word	0x20002d74
 8006594:	20001bc8 	.word	0x20001bc8
 8006598:	0800e3d5 	.word	0x0800e3d5
 800659c:	0800e319 	.word	0x0800e319
 80065a0:	0800e2d9 	.word	0x0800e2d9
 80065a4:	0800e359 	.word	0x0800e359
 80065a8:	0800e3a1 	.word	0x0800e3a1
 80065ac:	08006501 	.word	0x08006501
 80065b0:	080191c4 	.word	0x080191c4
 80065b4:	080191c8 	.word	0x080191c8

080065b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = RES_OK;
 80065c2:	4b06      	ldr	r3, [pc, #24]	; (80065dc <USER_initialize+0x24>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
    storage_flash_initialize();
 80065c8:	f7ff ffae 	bl	8006528 <storage_flash_initialize>
    return Stat;
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <USER_initialize+0x24>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000009 	.word	0x20000009

080065e0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80065ea:	4b06      	ldr	r3, [pc, #24]	; (8006604 <USER_status+0x24>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	701a      	strb	r2, [r3, #0]
    return Stat;
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <USER_status+0x24>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000009 	.word	0x20000009

08006608 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4603      	mov	r3, r0
 8006616:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	uint32_t i;
	uint32_t addr = sector * APP_SPI_FLASH_SECTOR_SIZE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	031b      	lsls	r3, r3, #12
 800661c:	613b      	str	r3, [r7, #16]
	DEBUG_VERBOSE("Read data at sector %d to %d\r\n", sector, sector + count);
	for (i=0; i<count; i++)
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	e014      	b.n	800664e <USER_read+0x46>
	{
		app_spi_flash_read_bytes(&m_spi_flash, addr, buff, APP_SPI_FLASH_SECTOR_SIZE);
 8006624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	6939      	ldr	r1, [r7, #16]
 800662c:	480c      	ldr	r0, [pc, #48]	; (8006660 <USER_read+0x58>)
 800662e:	f008 f9cf 	bl	800e9d0 <app_spi_flash_read_bytes>
		sector++;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3301      	adds	r3, #1
 8006636:	607b      	str	r3, [r7, #4]
		buff += APP_SPI_FLASH_SECTOR_SIZE;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663e:	60bb      	str	r3, [r7, #8]
		addr += APP_SPI_FLASH_SECTOR_SIZE;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006646:	613b      	str	r3, [r7, #16]
	for (i=0; i<count; i++)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	3301      	adds	r3, #1
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d3e6      	bcc.n	8006624 <USER_read+0x1c>
	}
    return RES_OK;
 8006656:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	20002d74 	.word	0x20002d74

08006664 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4603      	mov	r3, r0
 8006672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	  /* USER CODE HERE */
	uint32_t i;
	uint32_t addr = sector * APP_SPI_FLASH_SECTOR_SIZE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	031b      	lsls	r3, r3, #12
 8006678:	613b      	str	r3, [r7, #16]
	for (i=0; i<count ;i++)
 800667a:	2300      	movs	r3, #0
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e018      	b.n	80066b2 <USER_write+0x4e>
	{
		app_spi_flash_erase_sector_4k(&m_spi_flash, sector);
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4810      	ldr	r0, [pc, #64]	; (80066c4 <USER_write+0x60>)
 8006684:	f008 fa56 	bl	800eb34 <app_spi_flash_erase_sector_4k>
		app_spi_flash_write(&m_spi_flash, addr, buff, APP_SPI_FLASH_SECTOR_SIZE);
 8006688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	6939      	ldr	r1, [r7, #16]
 8006690:	480c      	ldr	r0, [pc, #48]	; (80066c4 <USER_write+0x60>)
 8006692:	f008 f923 	bl	800e8dc <app_spi_flash_write>
		sector++;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3301      	adds	r3, #1
 800669a:	607b      	str	r3, [r7, #4]
		buff += APP_SPI_FLASH_SECTOR_SIZE;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a2:	60bb      	str	r3, [r7, #8]
		addr += APP_SPI_FLASH_SECTOR_SIZE;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066aa:	613b      	str	r3, [r7, #16]
	for (i=0; i<count ;i++)
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	3301      	adds	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d3e2      	bcc.n	8006680 <USER_write+0x1c>
	}

    return RES_OK;
 80066ba:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20002d74 	.word	0x20002d74

080066c8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	603a      	str	r2, [r7, #0]
 80066d2:	71fb      	strb	r3, [r7, #7]
 80066d4:	460b      	mov	r3, r1
 80066d6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	75fb      	strb	r3, [r7, #23]
	switch(cmd)
 80066dc:	79bb      	ldrb	r3, [r7, #6]
 80066de:	2b19      	cmp	r3, #25
 80066e0:	d876      	bhi.n	80067d0 <USER_ioctl+0x108>
 80066e2:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <USER_ioctl+0x20>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	08006751 	.word	0x08006751
 80066ec:	08006773 	.word	0x08006773
 80066f0:	08006765 	.word	0x08006765
 80066f4:	08006757 	.word	0x08006757
 80066f8:	080067d1 	.word	0x080067d1
 80066fc:	080067d1 	.word	0x080067d1
 8006700:	080067d1 	.word	0x080067d1
 8006704:	080067d1 	.word	0x080067d1
 8006708:	080067d1 	.word	0x080067d1
 800670c:	080067d1 	.word	0x080067d1
 8006710:	080067d1 	.word	0x080067d1
 8006714:	080067d1 	.word	0x080067d1
 8006718:	080067d1 	.word	0x080067d1
 800671c:	080067d1 	.word	0x080067d1
 8006720:	080067d1 	.word	0x080067d1
 8006724:	080067d1 	.word	0x080067d1
 8006728:	080067d1 	.word	0x080067d1
 800672c:	080067d1 	.word	0x080067d1
 8006730:	080067d1 	.word	0x080067d1
 8006734:	080067d1 	.word	0x080067d1
 8006738:	080067d1 	.word	0x080067d1
 800673c:	080067d1 	.word	0x080067d1
 8006740:	080067d1 	.word	0x080067d1
 8006744:	08006783 	.word	0x08006783
 8006748:	0800679b 	.word	0x0800679b
 800674c:	080067c1 	.word	0x080067c1
	{
		case CTRL_SYNC :
			res = RES_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	75fb      	strb	r3, [r7, #23]
			break;
 8006754:	e03f      	b.n	80067d6 <USER_ioctl+0x10e>
//				W25X_Erase_Sector(i);
//
//			break;

		case GET_BLOCK_SIZE:
			*(DWORD*)buff = 65536;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800675c:	601a      	str	r2, [r3, #0]
//			DEBUG_INFO ("get block size \r\n");
			res = RES_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	75fb      	strb	r3, [r7, #23]
		//	buf[1] = (u8)(FLASH_BLOCK_SIZE & 0xFF);
		//	buf[0] = (u8)(FLASH_BLOCK_SIZE >> 8);
			break;
 8006762:	e038      	b.n	80067d6 <USER_ioctl+0x10e>


		case GET_SECTOR_SIZE:
			*(DWORD*)buff = APP_SPI_FLASH_SECTOR_SIZE;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800676a:	601a      	str	r2, [r3, #0]
//			DEBUG_INFO ("get sector size \r\n");
			res = RES_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	75fb      	strb	r3, [r7, #23]
		//	buf[0] = (u8)(FLASH_SECTOR_SIZE & 0xFF);
		//	buf[1] = (u8)(FLASH_SECTOR_SIZE >> 8);
			break;
 8006770:	e031      	b.n	80067d6 <USER_ioctl+0x10e>

		case GET_SECTOR_COUNT:
			*(DWORD*)buff = m_spi_flash.info.size/APP_SPI_FLASH_SECTOR_SIZE;
 8006772:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <USER_ioctl+0x118>)
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	0b1a      	lsrs	r2, r3, #12
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	601a      	str	r2, [r3, #0]
			DEBUG_VERBOSE("User diskio sector count %u\r\n", *(DWORD*)buff);
			res = RES_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	75fb      	strb	r3, [r7, #23]
		//	buf[0] = (u8)(FLASH_SECTOR_COUNT & 0xFF);
		//	buf[1] = (u8)(FLASH_SECTOR_COUNT >> 8);
			break;
 8006780:	e029      	b.n	80067d6 <USER_ioctl+0x10e>

		case DISKIO_CMD_WRITE_RAW:
		{
			user_diskio_raw_cmd_t *cmd = (user_diskio_raw_cmd_t*)buff;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	60bb      	str	r3, [r7, #8]
			app_spi_flash_write(&m_spi_flash, cmd->addr, cmd->buffer, cmd->size);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6819      	ldr	r1, [r3, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	889b      	ldrh	r3, [r3, #4]
 8006792:	4813      	ldr	r0, [pc, #76]	; (80067e0 <USER_ioctl+0x118>)
 8006794:	f008 f8a2 	bl	800e8dc <app_spi_flash_write>
		}
			break;
 8006798:	e01d      	b.n	80067d6 <USER_ioctl+0x10e>
		case DISKIO_CMD_READ_RAW:
		{
			user_diskio_raw_cmd_t *cmd = (user_diskio_raw_cmd_t*)buff;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	60fb      	str	r3, [r7, #12]
			app_spi_flash_erase_sector_4k(&m_spi_flash, cmd->addr/APP_SPI_FLASH_SECTOR_SIZE);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	0b1b      	lsrs	r3, r3, #12
 80067a4:	4619      	mov	r1, r3
 80067a6:	480e      	ldr	r0, [pc, #56]	; (80067e0 <USER_ioctl+0x118>)
 80067a8:	f008 f9c4 	bl	800eb34 <app_spi_flash_erase_sector_4k>
			app_spi_flash_read_bytes(&m_spi_flash, cmd->addr, cmd->buffer, cmd->size);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	889b      	ldrh	r3, [r3, #4]
 80067b8:	4809      	ldr	r0, [pc, #36]	; (80067e0 <USER_ioctl+0x118>)
 80067ba:	f008 f909 	bl	800e9d0 <app_spi_flash_read_bytes>
		}
			break;
 80067be:	e00a      	b.n	80067d6 <USER_ioctl+0x10e>

		case DISKIO_CMD_ERASE:
		{
			DWORD sector = *(DWORD*)buff;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	613b      	str	r3, [r7, #16]
			app_spi_flash_erase_sector_4k(&m_spi_flash, sector);
 80067c6:	6939      	ldr	r1, [r7, #16]
 80067c8:	4805      	ldr	r0, [pc, #20]	; (80067e0 <USER_ioctl+0x118>)
 80067ca:	f008 f9b3 	bl	800eb34 <app_spi_flash_erase_sector_4k>
		}
			break;
 80067ce:	e002      	b.n	80067d6 <USER_ioctl+0x10e>

		default:
			res = RES_PARERR;
 80067d0:	2304      	movs	r3, #4
 80067d2:	75fb      	strb	r3, [r7, #23]
			break;
 80067d4:	bf00      	nop
	}
	return res;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END IOCTL */
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20002d74 	.word	0x20002d74

080067e4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80067f0:	f241 0074 	movw	r0, #4212	; 0x1074
 80067f4:	f009 fc4e 	bl	8010094 <USBD_static_malloc>
 80067f8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d109      	bne.n	8006814 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	32b0      	adds	r2, #176	; 0xb0
 800680a:	2100      	movs	r1, #0
 800680c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006810:	2302      	movs	r3, #2
 8006812:	e06e      	b.n	80068f2 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	32b0      	adds	r2, #176	; 0xb0
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	32b0      	adds	r2, #176	; 0xb0
 800682e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	7c1b      	ldrb	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d12b      	bne.n	8006898 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006840:	4b2e      	ldr	r3, [pc, #184]	; (80068fc <USBD_MSC_Init+0x118>)
 8006842:	7819      	ldrb	r1, [r3, #0]
 8006844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006848:	2202      	movs	r2, #2
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f009 fb2b 	bl	800fea6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006850:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <USBD_MSC_Init+0x118>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 020f 	and.w	r2, r3, #15
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006868:	2201      	movs	r2, #1
 800686a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800686c:	4b24      	ldr	r3, [pc, #144]	; (8006900 <USBD_MSC_Init+0x11c>)
 800686e:	7819      	ldrb	r1, [r3, #0]
 8006870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006874:	2202      	movs	r2, #2
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f009 fb15 	bl	800fea6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800687c:	4b20      	ldr	r3, [pc, #128]	; (8006900 <USBD_MSC_Init+0x11c>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	f003 020f 	and.w	r2, r3, #15
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	3324      	adds	r3, #36	; 0x24
 8006892:	2201      	movs	r2, #1
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	e028      	b.n	80068ea <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006898:	4b18      	ldr	r3, [pc, #96]	; (80068fc <USBD_MSC_Init+0x118>)
 800689a:	7819      	ldrb	r1, [r3, #0]
 800689c:	2340      	movs	r3, #64	; 0x40
 800689e:	2202      	movs	r2, #2
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f009 fb00 	bl	800fea6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80068a6:	4b15      	ldr	r3, [pc, #84]	; (80068fc <USBD_MSC_Init+0x118>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	f003 020f 	and.w	r2, r3, #15
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068be:	2201      	movs	r2, #1
 80068c0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80068c2:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <USBD_MSC_Init+0x11c>)
 80068c4:	7819      	ldrb	r1, [r3, #0]
 80068c6:	2340      	movs	r3, #64	; 0x40
 80068c8:	2202      	movs	r2, #2
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f009 faeb 	bl	800fea6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <USBD_MSC_Init+0x11c>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	f003 020f 	and.w	r2, r3, #15
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	3324      	adds	r3, #36	; 0x24
 80068e6:	2201      	movs	r2, #1
 80068e8:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa2c 	bl	8006d48 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000083 	.word	0x20000083
 8006900:	20000082 	.word	0x20000082

08006904 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8006910:	4b26      	ldr	r3, [pc, #152]	; (80069ac <USBD_MSC_DeInit+0xa8>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f009 faeb 	bl	800fef2 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800691c:	4b23      	ldr	r3, [pc, #140]	; (80069ac <USBD_MSC_DeInit+0xa8>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f003 020f 	and.w	r2, r3, #15
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006934:	2200      	movs	r2, #0
 8006936:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <USBD_MSC_DeInit+0xac>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f009 fad7 	bl	800fef2 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8006944:	4b1a      	ldr	r3, [pc, #104]	; (80069b0 <USBD_MSC_DeInit+0xac>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	f003 020f 	and.w	r2, r3, #15
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	3324      	adds	r3, #36	; 0x24
 800695a:	2200      	movs	r2, #0
 800695c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	32b0      	adds	r2, #176	; 0xb0
 8006968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d018      	beq.n	80069a2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fa6f 	bl	8006e54 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	32b0      	adds	r2, #176	; 0xb0
 8006980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006984:	4618      	mov	r0, r3
 8006986:	f009 fb93 	bl	80100b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	32b0      	adds	r2, #176	; 0xb0
 8006994:	2100      	movs	r1, #0
 8006996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000083 	.word	0x20000083
 80069b0:	20000082 	.word	0x20000082

080069b4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	32b0      	adds	r2, #176	; 0xb0
 80069c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069cc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e0e1      	b.n	8006ba4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d053      	beq.n	8006a94 <USBD_MSC_Setup+0xe0>
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	f040 80d1 	bne.w	8006b94 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2bfe      	cmp	r3, #254	; 0xfe
 80069f8:	d002      	beq.n	8006a00 <USBD_MSC_Setup+0x4c>
 80069fa:	2bff      	cmp	r3, #255	; 0xff
 80069fc:	d02a      	beq.n	8006a54 <USBD_MSC_Setup+0xa0>
 80069fe:	e041      	b.n	8006a84 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	885b      	ldrh	r3, [r3, #2]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11e      	bne.n	8006a46 <USBD_MSC_Setup+0x92>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	88db      	ldrh	r3, [r3, #6]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d11a      	bne.n	8006a46 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da15      	bge.n	8006a46 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	33b0      	adds	r3, #176	; 0xb0
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	4798      	blx	r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	461a      	mov	r2, r3
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f002 f8a0 	bl	8008b82 <USBD_CtlSendData>
 8006a42:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a44:	e025      	b.n	8006a92 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f002 f829 	bl	8008aa0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	75fb      	strb	r3, [r7, #23]
          break;
 8006a52:	e01e      	b.n	8006a92 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	885b      	ldrh	r3, [r3, #2]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10c      	bne.n	8006a76 <USBD_MSC_Setup+0xc2>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	88db      	ldrh	r3, [r3, #6]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d108      	bne.n	8006a76 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	db03      	blt.n	8006a76 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f9bc 	bl	8006dec <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a74:	e00d      	b.n	8006a92 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f002 f811 	bl	8008aa0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	75fb      	strb	r3, [r7, #23]
          break;
 8006a82:	e006      	b.n	8006a92 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f002 f80a 	bl	8008aa0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a90:	bf00      	nop
      }
      break;
 8006a92:	e086      	b.n	8006ba2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	785b      	ldrb	r3, [r3, #1]
 8006a98:	2b0b      	cmp	r3, #11
 8006a9a:	d872      	bhi.n	8006b82 <USBD_MSC_Setup+0x1ce>
 8006a9c:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <USBD_MSC_Setup+0xf0>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006ad5 	.word	0x08006ad5
 8006aa8:	08006b51 	.word	0x08006b51
 8006aac:	08006b83 	.word	0x08006b83
 8006ab0:	08006b83 	.word	0x08006b83
 8006ab4:	08006b83 	.word	0x08006b83
 8006ab8:	08006b83 	.word	0x08006b83
 8006abc:	08006b83 	.word	0x08006b83
 8006ac0:	08006b83 	.word	0x08006b83
 8006ac4:	08006b83 	.word	0x08006b83
 8006ac8:	08006b83 	.word	0x08006b83
 8006acc:	08006aff 	.word	0x08006aff
 8006ad0:	08006b29 	.word	0x08006b29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d107      	bne.n	8006af0 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ae0:	f107 030e 	add.w	r3, r7, #14
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f002 f84a 	bl	8008b82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aee:	e050      	b.n	8006b92 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 ffd4 	bl	8008aa0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006af8:	2303      	movs	r3, #3
 8006afa:	75fb      	strb	r3, [r7, #23]
          break;
 8006afc:	e049      	b.n	8006b92 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d107      	bne.n	8006b1a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f002 f835 	bl	8008b82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b18:	e03b      	b.n	8006b92 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 ffbf 	bl	8008aa0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b22:	2303      	movs	r3, #3
 8006b24:	75fb      	strb	r3, [r7, #23]
          break;
 8006b26:	e034      	b.n	8006b92 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d106      	bne.n	8006b42 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	885b      	ldrh	r3, [r3, #2]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b40:	e027      	b.n	8006b92 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 ffab 	bl	8008aa0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4e:	e020      	b.n	8006b92 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d119      	bne.n	8006b90 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d115      	bne.n	8006b90 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	889b      	ldrh	r3, [r3, #4]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f009 f9df 	bl	800ff30 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	889b      	ldrh	r3, [r3, #4]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fb54 	bl	8007228 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8006b80:	e006      	b.n	8006b90 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 ff8b 	bl	8008aa0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b8e:	e000      	b.n	8006b92 <USBD_MSC_Setup+0x1de>
          break;
 8006b90:	bf00      	nop
      }
      break;
 8006b92:	e006      	b.n	8006ba2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 ff82 	bl	8008aa0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f961 	bl	8006e84 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f98d 	bl	8006efc <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006bf4:	2181      	movs	r1, #129	; 0x81
 8006bf6:	4812      	ldr	r0, [pc, #72]	; (8006c40 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006bf8:	f001 fefb 	bl	80089f2 <USBD_GetEpDesc>
 8006bfc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006bfe:	2101      	movs	r1, #1
 8006c00:	480f      	ldr	r0, [pc, #60]	; (8006c40 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006c02:	f001 fef6 	bl	80089f2 <USBD_GetEpDesc>
 8006c06:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d006      	beq.n	8006c1c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	711a      	strb	r2, [r3, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f042 0202 	orr.w	r2, r2, #2
 8006c1a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2200      	movs	r2, #0
 8006c26:	711a      	strb	r2, [r3, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f042 0202 	orr.w	r2, r2, #2
 8006c2e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006c36:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000058 	.word	0x20000058

08006c44 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006c4c:	2181      	movs	r1, #129	; 0x81
 8006c4e:	4812      	ldr	r0, [pc, #72]	; (8006c98 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006c50:	f001 fecf 	bl	80089f2 <USBD_GetEpDesc>
 8006c54:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006c56:	2101      	movs	r1, #1
 8006c58:	480f      	ldr	r0, [pc, #60]	; (8006c98 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006c5a:	f001 feca 	bl	80089f2 <USBD_GetEpDesc>
 8006c5e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d006      	beq.n	8006c74 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c6e:	711a      	strb	r2, [r3, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d006      	beq.n	8006c88 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c82:	711a      	strb	r2, [r3, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006c8e:	4b02      	ldr	r3, [pc, #8]	; (8006c98 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000058 	.word	0x20000058

08006c9c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006ca4:	2181      	movs	r1, #129	; 0x81
 8006ca6:	4812      	ldr	r0, [pc, #72]	; (8006cf0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8006ca8:	f001 fea3 	bl	80089f2 <USBD_GetEpDesc>
 8006cac:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006cae:	2101      	movs	r1, #1
 8006cb0:	480f      	ldr	r0, [pc, #60]	; (8006cf0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8006cb2:	f001 fe9e 	bl	80089f2 <USBD_GetEpDesc>
 8006cb6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d006      	beq.n	8006ccc <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc6:	711a      	strb	r2, [r3, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d006      	beq.n	8006ce0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cda:	711a      	strb	r2, [r3, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006ce6:	4b02      	ldr	r3, [pc, #8]	; (8006cf0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	20000058 	.word	0x20000058

08006cf4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	220a      	movs	r2, #10
 8006d00:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006d02:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	20000078 	.word	0x20000078

08006d14 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e009      	b.n	8006d3c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	33b0      	adds	r3, #176	; 0xb0
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	32b0      	adds	r2, #176	; 0xb0
 8006d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d039      	beq.n	8006dda <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	33b0      	adds	r3, #176	; 0xb0
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2000      	movs	r0, #0
 8006daa:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <MSC_BOT_Init+0x9c>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f009 f8bc 	bl	800ff30 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8006db8:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <MSC_BOT_Init+0xa0>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f009 f8b6 	bl	800ff30 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006dc4:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <MSC_BOT_Init+0x9c>)
 8006dc6:	7819      	ldrb	r1, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006dce:	3210      	adds	r2, #16
 8006dd0:	231f      	movs	r3, #31
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f009 f92a 	bl	801002c <USBD_LL_PrepareReceive>
 8006dd8:	e000      	b.n	8006ddc <MSC_BOT_Init+0x94>
    return;
 8006dda:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000083 	.word	0x20000083
 8006de8:	20000082 	.word	0x20000082

08006dec <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32b0      	adds	r2, #176	; 0xb0
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01c      	beq.n	8006e44 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8006e16:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <MSC_BOT_Reset+0x60>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f009 f8c5 	bl	800ffac <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8006e22:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <MSC_BOT_Reset+0x64>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f009 f8bf 	bl	800ffac <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006e2e:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <MSC_BOT_Reset+0x64>)
 8006e30:	7819      	ldrb	r1, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006e38:	3210      	adds	r2, #16
 8006e3a:	231f      	movs	r3, #31
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f009 f8f5 	bl	801002c <USBD_LL_PrepareReceive>
 8006e42:	e000      	b.n	8006e46 <MSC_BOT_Reset+0x5a>
    return;
 8006e44:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000082 	.word	0x20000082
 8006e50:	20000083 	.word	0x20000083

08006e54 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32b0      	adds	r2, #176	; 0xb0
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	721a      	strb	r2, [r3, #8]
  }
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32b0      	adds	r2, #176	; 0xb0
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d022      	beq.n	8006eec <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	7a1b      	ldrb	r3, [r3, #8]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d005      	beq.n	8006eba <MSC_BOT_DataIn+0x36>
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	db1e      	blt.n	8006ef0 <MSC_BOT_DataIn+0x6c>
 8006eb2:	3b03      	subs	r3, #3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d81b      	bhi.n	8006ef0 <MSC_BOT_DataIn+0x6c>
 8006eb8:	e013      	b.n	8006ee2 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec0:	7f59      	ldrb	r1, [r3, #29]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec8:	331f      	adds	r3, #31
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f9e5 	bl	800729c <SCSI_ProcessCmd>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	da0d      	bge.n	8006ef4 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006ed8:	2101      	movs	r1, #1
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f920 	bl	8007120 <MSC_BOT_SendCSW>
      }
      break;
 8006ee0:	e008      	b.n	8006ef4 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f91b 	bl	8007120 <MSC_BOT_SendCSW>
      break;
 8006eea:	e004      	b.n	8006ef6 <MSC_BOT_DataIn+0x72>
    return;
 8006eec:	bf00      	nop
 8006eee:	e002      	b.n	8006ef6 <MSC_BOT_DataIn+0x72>

    default:
      break;
 8006ef0:	bf00      	nop
 8006ef2:	e000      	b.n	8006ef6 <MSC_BOT_DataIn+0x72>
      break;
 8006ef4:	bf00      	nop
  }
}
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32b0      	adds	r2, #176	; 0xb0
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01e      	beq.n	8006f5c <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	7a1b      	ldrb	r3, [r3, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <MSC_BOT_DataOut+0x30>
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d004      	beq.n	8006f34 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006f2a:	e01a      	b.n	8006f62 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f81b 	bl	8006f68 <MSC_BOT_CBW_Decode>
      break;
 8006f32:	e016      	b.n	8006f62 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3a:	7f59      	ldrb	r1, [r3, #29]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f42:	331f      	adds	r3, #31
 8006f44:	461a      	mov	r2, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f9a8 	bl	800729c <SCSI_ProcessCmd>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da06      	bge.n	8006f60 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006f52:	2101      	movs	r1, #1
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f8e3 	bl	8007120 <MSC_BOT_SendCSW>
      break;
 8006f5a:	e001      	b.n	8006f60 <MSC_BOT_DataOut+0x64>
    return;
 8006f5c:	bf00      	nop
 8006f5e:	e000      	b.n	8006f62 <MSC_BOT_DataOut+0x66>
      break;
 8006f60:	bf00      	nop
  }
}
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	32b0      	adds	r2, #176	; 0xb0
 8006f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 8085 	beq.w	8007092 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f96:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fa6:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8006fa8:	4b3d      	ldr	r3, [pc, #244]	; (80070a0 <MSC_BOT_CBW_Decode+0x138>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f009 f85d 	bl	801006e <USBD_LL_GetRxDataSize>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b1f      	cmp	r3, #31
 8006fb8:	d118      	bne.n	8006fec <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc0:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8006fc2:	4a38      	ldr	r2, [pc, #224]	; (80070a4 <MSC_BOT_CBW_Decode+0x13c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d111      	bne.n	8006fec <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fce:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d80b      	bhi.n	8006fec <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fda:	7f9b      	ldrb	r3, [r3, #30]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe6:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d90f      	bls.n	800700c <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff2:	7f59      	ldrb	r1, [r3, #29]
 8006ff4:	2320      	movs	r3, #32
 8006ff6:	2205      	movs	r2, #5
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fe79 	bl	8007cf0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2202      	movs	r2, #2
 8007002:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8cb 	bl	80071a0 <MSC_BOT_Abort>
 800700a:	e045      	b.n	8007098 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007012:	7f59      	ldrb	r1, [r3, #29]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800701a:	331f      	adds	r3, #31
 800701c:	461a      	mov	r2, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f93c 	bl	800729c <SCSI_ProcessCmd>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	da0c      	bge.n	8007044 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	7a1b      	ldrb	r3, [r3, #8]
 800702e:	2b05      	cmp	r3, #5
 8007030:	d104      	bne.n	800703c <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007032:	2101      	movs	r1, #1
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f873 	bl	8007120 <MSC_BOT_SendCSW>
 800703a:	e02d      	b.n	8007098 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f8af 	bl	80071a0 <MSC_BOT_Abort>
 8007042:	e029      	b.n	8007098 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	7a1b      	ldrb	r3, [r3, #8]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d024      	beq.n	8007096 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007050:	2b01      	cmp	r3, #1
 8007052:	d020      	beq.n	8007096 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007058:	2b03      	cmp	r3, #3
 800705a:	d01c      	beq.n	8007096 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d009      	beq.n	8007078 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f103 0110 	add.w	r1, r3, #16
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	461a      	mov	r2, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f819 	bl	80070a8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007076:	e00f      	b.n	8007098 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007080:	2100      	movs	r1, #0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f84c 	bl	8007120 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007088:	e006      	b.n	8007098 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f888 	bl	80071a0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007090:	e002      	b.n	8007098 <MSC_BOT_CBW_Decode+0x130>
    return;
 8007092:	bf00      	nop
 8007094:	e000      	b.n	8007098 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8007096:	bf00      	nop
    }
  }
}
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000083 	.word	0x20000083
 80070a4:	43425355 	.word	0x43425355

080070a8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	32b0      	adds	r2, #176	; 0xb0
 80070be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d023      	beq.n	8007112 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	4293      	cmp	r3, r2
 80070d6:	bf28      	it	cs
 80070d8:	4613      	movcs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070ee:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2204      	movs	r2, #4
 8007100:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8007102:	4b06      	ldr	r3, [pc, #24]	; (800711c <MSC_BOT_SendData+0x74>)
 8007104:	7819      	ldrb	r1, [r3, #0]
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f008 ff6d 	bl	800ffea <USBD_LL_Transmit>
 8007110:	e000      	b.n	8007114 <MSC_BOT_SendData+0x6c>
    return;
 8007112:	bf00      	nop
}
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000082 	.word	0x20000082

08007120 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	32b0      	adds	r2, #176	; 0xb0
 8007136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d024      	beq.n	800718c <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007148:	461a      	mov	r2, r3
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <MSC_BOT_SendCSW+0x74>)
 800714c:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007154:	461a      	mov	r2, r3
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8007162:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <MSC_BOT_SendCSW+0x78>)
 8007164:	7819      	ldrb	r1, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 800716c:	3210      	adds	r2, #16
 800716e:	230d      	movs	r3, #13
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f008 ff3a 	bl	800ffea <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <MSC_BOT_SendCSW+0x7c>)
 8007178:	7819      	ldrb	r1, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8007180:	3210      	adds	r2, #16
 8007182:	231f      	movs	r3, #31
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f008 ff51 	bl	801002c <USBD_LL_PrepareReceive>
 800718a:	e000      	b.n	800718e <MSC_BOT_SendCSW+0x6e>
    return;
 800718c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	53425355 	.word	0x53425355
 8007198:	20000082 	.word	0x20000082
 800719c:	20000083 	.word	0x20000083

080071a0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	32b0      	adds	r2, #176	; 0xb0
 80071b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d02c      	beq.n	8007218 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c4:	7f1b      	ldrb	r3, [r3, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10f      	bne.n	80071ea <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d0:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <MSC_BOT_Abort+0x80>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f008 fec2 	bl	800ff6e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80071ea:	4b0e      	ldr	r3, [pc, #56]	; (8007224 <MSC_BOT_Abort+0x84>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f008 febc 	bl	800ff6e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	7a5b      	ldrb	r3, [r3, #9]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d10d      	bne.n	800721a <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <MSC_BOT_Abort+0x84>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f008 feb2 	bl	800ff6e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <MSC_BOT_Abort+0x80>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f008 feac 	bl	800ff6e <USBD_LL_StallEP>
 8007216:	e000      	b.n	800721a <MSC_BOT_Abort+0x7a>
    return;
 8007218:	bf00      	nop
  }
}
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000083 	.word	0x20000083
 8007224:	20000082 	.word	0x20000082

08007228 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	32b0      	adds	r2, #176	; 0xb0
 800723e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007242:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01d      	beq.n	8007286 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	7a5b      	ldrb	r3, [r3, #9]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d10c      	bne.n	800726c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <MSC_BOT_CplClrFeature+0x6c>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f008 fe88 	bl	800ff6e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800725e:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <MSC_BOT_CplClrFeature+0x70>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f008 fe82 	bl	800ff6e <USBD_LL_StallEP>
 800726a:	e00f      	b.n	800728c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800726c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da0a      	bge.n	800728a <MSC_BOT_CplClrFeature+0x62>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	7a5b      	ldrb	r3, [r3, #9]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d006      	beq.n	800728a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800727c:	2101      	movs	r1, #1
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff ff4e 	bl	8007120 <MSC_BOT_SendCSW>
 8007284:	e002      	b.n	800728c <MSC_BOT_CplClrFeature+0x64>
    return;
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800728a:	bf00      	nop
  }
}
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000082 	.word	0x20000082
 8007298:	20000083 	.word	0x20000083

0800729c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	460b      	mov	r3, r1
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	32b0      	adds	r2, #176	; 0xb0
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80072c0:	f04f 33ff 	mov.w	r3, #4294967295
 80072c4:	e168      	b.n	8007598 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2baa      	cmp	r3, #170	; 0xaa
 80072cc:	f000 8144 	beq.w	8007558 <SCSI_ProcessCmd+0x2bc>
 80072d0:	2baa      	cmp	r3, #170	; 0xaa
 80072d2:	f300 8153 	bgt.w	800757c <SCSI_ProcessCmd+0x2e0>
 80072d6:	2ba8      	cmp	r3, #168	; 0xa8
 80072d8:	f000 812c 	beq.w	8007534 <SCSI_ProcessCmd+0x298>
 80072dc:	2ba8      	cmp	r3, #168	; 0xa8
 80072de:	f300 814d 	bgt.w	800757c <SCSI_ProcessCmd+0x2e0>
 80072e2:	2b5a      	cmp	r3, #90	; 0x5a
 80072e4:	f300 80c0 	bgt.w	8007468 <SCSI_ProcessCmd+0x1cc>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f2c0 8147 	blt.w	800757c <SCSI_ProcessCmd+0x2e0>
 80072ee:	2b5a      	cmp	r3, #90	; 0x5a
 80072f0:	f200 8144 	bhi.w	800757c <SCSI_ProcessCmd+0x2e0>
 80072f4:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <SCSI_ProcessCmd+0x60>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	0800746f 	.word	0x0800746f
 8007300:	0800757d 	.word	0x0800757d
 8007304:	0800757d 	.word	0x0800757d
 8007308:	08007481 	.word	0x08007481
 800730c:	0800757d 	.word	0x0800757d
 8007310:	0800757d 	.word	0x0800757d
 8007314:	0800757d 	.word	0x0800757d
 8007318:	0800757d 	.word	0x0800757d
 800731c:	0800757d 	.word	0x0800757d
 8007320:	0800757d 	.word	0x0800757d
 8007324:	0800757d 	.word	0x0800757d
 8007328:	0800757d 	.word	0x0800757d
 800732c:	0800757d 	.word	0x0800757d
 8007330:	0800757d 	.word	0x0800757d
 8007334:	0800757d 	.word	0x0800757d
 8007338:	0800757d 	.word	0x0800757d
 800733c:	0800757d 	.word	0x0800757d
 8007340:	0800757d 	.word	0x0800757d
 8007344:	08007493 	.word	0x08007493
 8007348:	0800757d 	.word	0x0800757d
 800734c:	0800757d 	.word	0x0800757d
 8007350:	0800757d 	.word	0x0800757d
 8007354:	0800757d 	.word	0x0800757d
 8007358:	0800757d 	.word	0x0800757d
 800735c:	0800757d 	.word	0x0800757d
 8007360:	0800757d 	.word	0x0800757d
 8007364:	080074c9 	.word	0x080074c9
 8007368:	080074a5 	.word	0x080074a5
 800736c:	0800757d 	.word	0x0800757d
 8007370:	0800757d 	.word	0x0800757d
 8007374:	080074b7 	.word	0x080074b7
 8007378:	0800757d 	.word	0x0800757d
 800737c:	0800757d 	.word	0x0800757d
 8007380:	0800757d 	.word	0x0800757d
 8007384:	0800757d 	.word	0x0800757d
 8007388:	080074ed 	.word	0x080074ed
 800738c:	0800757d 	.word	0x0800757d
 8007390:	080074ff 	.word	0x080074ff
 8007394:	0800757d 	.word	0x0800757d
 8007398:	0800757d 	.word	0x0800757d
 800739c:	08007523 	.word	0x08007523
 80073a0:	0800757d 	.word	0x0800757d
 80073a4:	08007547 	.word	0x08007547
 80073a8:	0800757d 	.word	0x0800757d
 80073ac:	0800757d 	.word	0x0800757d
 80073b0:	0800757d 	.word	0x0800757d
 80073b4:	0800757d 	.word	0x0800757d
 80073b8:	0800756b 	.word	0x0800756b
 80073bc:	0800757d 	.word	0x0800757d
 80073c0:	0800757d 	.word	0x0800757d
 80073c4:	0800757d 	.word	0x0800757d
 80073c8:	0800757d 	.word	0x0800757d
 80073cc:	0800757d 	.word	0x0800757d
 80073d0:	0800757d 	.word	0x0800757d
 80073d4:	0800757d 	.word	0x0800757d
 80073d8:	0800757d 	.word	0x0800757d
 80073dc:	0800757d 	.word	0x0800757d
 80073e0:	0800757d 	.word	0x0800757d
 80073e4:	0800757d 	.word	0x0800757d
 80073e8:	0800757d 	.word	0x0800757d
 80073ec:	0800757d 	.word	0x0800757d
 80073f0:	0800757d 	.word	0x0800757d
 80073f4:	0800757d 	.word	0x0800757d
 80073f8:	0800757d 	.word	0x0800757d
 80073fc:	0800757d 	.word	0x0800757d
 8007400:	0800757d 	.word	0x0800757d
 8007404:	0800757d 	.word	0x0800757d
 8007408:	0800757d 	.word	0x0800757d
 800740c:	0800757d 	.word	0x0800757d
 8007410:	0800757d 	.word	0x0800757d
 8007414:	0800757d 	.word	0x0800757d
 8007418:	0800757d 	.word	0x0800757d
 800741c:	0800757d 	.word	0x0800757d
 8007420:	0800757d 	.word	0x0800757d
 8007424:	0800757d 	.word	0x0800757d
 8007428:	0800757d 	.word	0x0800757d
 800742c:	0800757d 	.word	0x0800757d
 8007430:	0800757d 	.word	0x0800757d
 8007434:	0800757d 	.word	0x0800757d
 8007438:	0800757d 	.word	0x0800757d
 800743c:	0800757d 	.word	0x0800757d
 8007440:	0800757d 	.word	0x0800757d
 8007444:	0800757d 	.word	0x0800757d
 8007448:	0800757d 	.word	0x0800757d
 800744c:	0800757d 	.word	0x0800757d
 8007450:	0800757d 	.word	0x0800757d
 8007454:	0800757d 	.word	0x0800757d
 8007458:	0800757d 	.word	0x0800757d
 800745c:	0800757d 	.word	0x0800757d
 8007460:	0800757d 	.word	0x0800757d
 8007464:	080074db 	.word	0x080074db
 8007468:	2b9e      	cmp	r3, #158	; 0x9e
 800746a:	d051      	beq.n	8007510 <SCSI_ProcessCmd+0x274>
 800746c:	e086      	b.n	800757c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800746e:	7afb      	ldrb	r3, [r7, #11]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	4619      	mov	r1, r3
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f893 	bl	80075a0 <SCSI_TestUnitReady>
 800747a:	4603      	mov	r3, r0
 800747c:	75fb      	strb	r3, [r7, #23]
      break;
 800747e:	e089      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8007480:	7afb      	ldrb	r3, [r7, #11]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	4619      	mov	r1, r3
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fb98 	bl	8007bbc <SCSI_RequestSense>
 800748c:	4603      	mov	r3, r0
 800748e:	75fb      	strb	r3, [r7, #23]
      break;
 8007490:	e080      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8007492:	7afb      	ldrb	r3, [r7, #11]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	4619      	mov	r1, r3
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f8df 	bl	800765c <SCSI_Inquiry>
 800749e:	4603      	mov	r3, r0
 80074a0:	75fb      	strb	r3, [r7, #23]
      break;
 80074a2:	e077      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80074a4:	7afb      	ldrb	r3, [r7, #11]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4619      	mov	r1, r3
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 fc7c 	bl	8007da8 <SCSI_StartStopUnit>
 80074b0:	4603      	mov	r3, r0
 80074b2:	75fb      	strb	r3, [r7, #23]
      break;
 80074b4:	e06e      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80074b6:	7afb      	ldrb	r3, [r7, #11]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4619      	mov	r1, r3
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 fcd0 	bl	8007e62 <SCSI_AllowPreventRemovable>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]
      break;
 80074c6:	e065      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	4619      	mov	r1, r3
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fb14 	bl	8007afc <SCSI_ModeSense6>
 80074d4:	4603      	mov	r3, r0
 80074d6:	75fb      	strb	r3, [r7, #23]
      break;
 80074d8:	e05c      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80074da:	7afb      	ldrb	r3, [r7, #11]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4619      	mov	r1, r3
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fb3b 	bl	8007b5c <SCSI_ModeSense10>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75fb      	strb	r3, [r7, #23]
      break;
 80074ea:	e053      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80074ec:	7afb      	ldrb	r3, [r7, #11]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	4619      	mov	r1, r3
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fa85 	bl	8007a02 <SCSI_ReadFormatCapacity>
 80074f8:	4603      	mov	r3, r0
 80074fa:	75fb      	strb	r3, [r7, #23]
      break;
 80074fc:	e04a      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	4619      	mov	r1, r3
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f929 	bl	800775c <SCSI_ReadCapacity10>
 800750a:	4603      	mov	r3, r0
 800750c:	75fb      	strb	r3, [r7, #23]
      break;
 800750e:	e041      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	4619      	mov	r1, r3
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 f9af 	bl	800787a <SCSI_ReadCapacity16>
 800751c:	4603      	mov	r3, r0
 800751e:	75fb      	strb	r3, [r7, #23]
      break;
 8007520:	e038      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	4619      	mov	r1, r3
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fccb 	bl	8007ec4 <SCSI_Read10>
 800752e:	4603      	mov	r3, r0
 8007530:	75fb      	strb	r3, [r7, #23]
      break;
 8007532:	e02f      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	4619      	mov	r1, r3
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 fd79 	bl	8008032 <SCSI_Read12>
 8007540:	4603      	mov	r3, r0
 8007542:	75fb      	strb	r3, [r7, #23]
      break;
 8007544:	e026      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8007546:	7afb      	ldrb	r3, [r7, #11]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4619      	mov	r1, r3
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fe31 	bl	80081b4 <SCSI_Write10>
 8007552:	4603      	mov	r3, r0
 8007554:	75fb      	strb	r3, [r7, #23]
      break;
 8007556:	e01d      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8007558:	7afb      	ldrb	r3, [r7, #11]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4619      	mov	r1, r3
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 ff0c 	bl	800837c <SCSI_Write12>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]
      break;
 8007568:	e014      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800756a:	7afb      	ldrb	r3, [r7, #11]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4619      	mov	r1, r3
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fff7 	bl	8008564 <SCSI_Verify10>
 8007576:	4603      	mov	r3, r0
 8007578:	75fb      	strb	r3, [r7, #23]
      break;
 800757a:	e00b      	b.n	8007594 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800757c:	7af9      	ldrb	r1, [r7, #11]
 800757e:	2320      	movs	r3, #32
 8007580:	2205      	movs	r2, #5
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 fbb4 	bl	8007cf0 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2202      	movs	r2, #2
 800758c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800758e:	23ff      	movs	r3, #255	; 0xff
 8007590:	75fb      	strb	r3, [r7, #23]
      break;
 8007592:	bf00      	nop
  }

  return ret;
 8007594:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	460b      	mov	r3, r1
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	32b0      	adds	r2, #176	; 0xb0
 80075b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295
 80075c8:	e043      	b.n	8007652 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00b      	beq.n	80075ee <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075dc:	7f59      	ldrb	r1, [r3, #29]
 80075de:	2320      	movs	r3, #32
 80075e0:	2205      	movs	r2, #5
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fb84 	bl	8007cf0 <SCSI_SenseCode>

    return -1;
 80075e8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ec:	e031      	b.n	8007652 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d10b      	bne.n	8007614 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80075fc:	7af9      	ldrb	r1, [r7, #11]
 80075fe:	233a      	movs	r3, #58	; 0x3a
 8007600:	2202      	movs	r2, #2
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 fb74 	bl	8007cf0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2205      	movs	r2, #5
 800760c:	721a      	strb	r2, [r3, #8]
    return -1;
 800760e:	f04f 33ff 	mov.w	r3, #4294967295
 8007612:	e01e      	b.n	8007652 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	33b0      	adds	r3, #176	; 0xb0
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	7afa      	ldrb	r2, [r7, #11]
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007632:	7af9      	ldrb	r1, [r7, #11]
 8007634:	233a      	movs	r3, #58	; 0x3a
 8007636:	2202      	movs	r2, #2
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fb59 	bl	8007cf0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2205      	movs	r2, #5
 8007642:	721a      	strb	r2, [r3, #8]

    return -1;
 8007644:	f04f 33ff 	mov.w	r3, #4294967295
 8007648:	e003      	b.n	8007652 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2200      	movs	r2, #0
 800764e:	60da      	str	r2, [r3, #12]

  return 0;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	460b      	mov	r3, r1
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	32b0      	adds	r2, #176	; 0xb0
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d102      	bne.n	8007686 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8007680:	f04f 33ff 	mov.w	r3, #4294967295
 8007684:	e062      	b.n	800774c <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007698:	7f59      	ldrb	r1, [r3, #29]
 800769a:	2320      	movs	r3, #32
 800769c:	2205      	movs	r2, #5
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fb26 	bl	8007cf0 <SCSI_SenseCode>
    return -1;
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295
 80076a8:	e050      	b.n	800774c <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3301      	adds	r3, #1
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d021      	beq.n	80076fc <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3302      	adds	r3, #2
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d105      	bne.n	80076ce <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80076c2:	2206      	movs	r2, #6
 80076c4:	4923      	ldr	r1, [pc, #140]	; (8007754 <SCSI_Inquiry+0xf8>)
 80076c6:	69b8      	ldr	r0, [r7, #24]
 80076c8:	f001 f8f8 	bl	80088bc <SCSI_UpdateBotData>
 80076cc:	e03d      	b.n	800774a <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3302      	adds	r3, #2
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b80      	cmp	r3, #128	; 0x80
 80076d6:	d105      	bne.n	80076e4 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80076d8:	2208      	movs	r2, #8
 80076da:	491f      	ldr	r1, [pc, #124]	; (8007758 <SCSI_Inquiry+0xfc>)
 80076dc:	69b8      	ldr	r0, [r7, #24]
 80076de:	f001 f8ed 	bl	80088bc <SCSI_UpdateBotData>
 80076e2:	e032      	b.n	800774a <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ea:	7f59      	ldrb	r1, [r3, #29]
 80076ec:	2324      	movs	r3, #36	; 0x24
 80076ee:	2205      	movs	r2, #5
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fafd 	bl	8007cf0 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295
 80076fa:	e027      	b.n	800774c <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	33b0      	adds	r3, #176	; 0xb0
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	69d9      	ldr	r1, [r3, #28]
 800770e:	7afa      	ldrb	r2, [r7, #11]
 8007710:	4613      	mov	r3, r2
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3304      	adds	r3, #4
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b29b      	uxth	r3, r3
 8007724:	3305      	adds	r3, #5
 8007726:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3304      	adds	r3, #4
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	8bfa      	ldrh	r2, [r7, #30]
 8007732:	429a      	cmp	r2, r3
 8007734:	d303      	bcc.n	800773e <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3304      	adds	r3, #4
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800773e:	8bfb      	ldrh	r3, [r7, #30]
 8007740:	461a      	mov	r2, r3
 8007742:	6979      	ldr	r1, [r7, #20]
 8007744:	69b8      	ldr	r0, [r7, #24]
 8007746:	f001 f8b9 	bl	80088bc <SCSI_UpdateBotData>
  }

  return 0;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000084 	.word	0x20000084
 8007758:	2000008c 	.word	0x2000008c

0800775c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800775c:	b590      	push	{r4, r7, lr}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	460b      	mov	r3, r1
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	32b0      	adds	r2, #176	; 0xb0
 8007774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007778:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d102      	bne.n	8007786 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8007780:	f04f 33ff 	mov.w	r3, #4294967295
 8007784:	e075      	b.n	8007872 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	33b0      	adds	r3, #176	; 0xb0
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	685c      	ldr	r4, [r3, #4]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800779e:	3308      	adds	r3, #8
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 80077a6:	3204      	adds	r2, #4
 80077a8:	7af8      	ldrb	r0, [r7, #11]
 80077aa:	4619      	mov	r1, r3
 80077ac:	47a0      	blx	r4
 80077ae:	4603      	mov	r3, r0
 80077b0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80077b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <SCSI_ReadCapacity10+0x6c>
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d108      	bne.n	80077da <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80077c8:	7af9      	ldrb	r1, [r7, #11]
 80077ca:	233a      	movs	r3, #58	; 0x3a
 80077cc:	2202      	movs	r2, #2
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fa8e 	bl	8007cf0 <SCSI_SenseCode>
    return -1;
 80077d4:	f04f 33ff 	mov.w	r3, #4294967295
 80077d8:	e04b      	b.n	8007872 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e2:	3b01      	subs	r3, #1
 80077e4:	0e1b      	lsrs	r3, r3, #24
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f4:	3b01      	subs	r3, #1
 80077f6:	0c1b      	lsrs	r3, r3, #16
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007806:	3b01      	subs	r3, #1
 8007808:	0a1b      	lsrs	r3, r3, #8
 800780a:	b2da      	uxtb	r2, r3
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007818:	b2db      	uxtb	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	b2da      	uxtb	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007828:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800782c:	161b      	asrs	r3, r3, #24
 800782e:	b2da      	uxtb	r2, r3
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800783a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800783e:	141b      	asrs	r3, r3, #16
 8007840:	b2da      	uxtb	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007850:	0a1b      	lsrs	r3, r3, #8
 8007852:	b29b      	uxth	r3, r3
 8007854:	b2da      	uxtb	r2, r3
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007860:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007864:	b2da      	uxtb	r2, r3
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2208      	movs	r2, #8
 800786e:	60da      	str	r2, [r3, #12]

  return 0;
 8007870:	2300      	movs	r3, #0

}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	bd90      	pop	{r4, r7, pc}

0800787a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800787a:	b590      	push	{r4, r7, lr}
 800787c:	b089      	sub	sp, #36	; 0x24
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	460b      	mov	r3, r1
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	32b0      	adds	r2, #176	; 0xb0
 8007892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007896:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d102      	bne.n	80078a4 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800789e:	f04f 33ff 	mov.w	r3, #4294967295
 80078a2:	e0aa      	b.n	80079fa <SCSI_ReadCapacity16+0x180>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	33b0      	adds	r3, #176	; 0xb0
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	685c      	ldr	r4, [r3, #4]
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80078bc:	3308      	adds	r3, #8
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 80078c4:	3204      	adds	r2, #4
 80078c6:	7af8      	ldrb	r0, [r7, #11]
 80078c8:	4619      	mov	r1, r3
 80078ca:	47a0      	blx	r4
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80078d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d106      	bne.n	80078e6 <SCSI_ReadCapacity16+0x6c>
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078de:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d108      	bne.n	80078f8 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80078e6:	7af9      	ldrb	r1, [r7, #11]
 80078e8:	233a      	movs	r3, #58	; 0x3a
 80078ea:	2202      	movs	r2, #2
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f9ff 	bl	8007cf0 <SCSI_SenseCode>
    return -1;
 80078f2:	f04f 33ff 	mov.w	r3, #4294967295
 80078f6:	e080      	b.n	80079fa <SCSI_ReadCapacity16+0x180>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	330a      	adds	r3, #10
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	330b      	adds	r3, #11
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007908:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	330c      	adds	r3, #12
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007912:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	320d      	adds	r2, #13
 8007918:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800791a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007920:	2300      	movs	r3, #0
 8007922:	77fb      	strb	r3, [r7, #31]
 8007924:	e007      	b.n	8007936 <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 8007926:	7ffb      	ldrb	r3, [r7, #31]
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4413      	add	r3, r2
 800792c:	2200      	movs	r2, #0
 800792e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007930:	7ffb      	ldrb	r3, [r7, #31]
 8007932:	3301      	adds	r3, #1
 8007934:	77fb      	strb	r3, [r7, #31]
 8007936:	7ffa      	ldrb	r2, [r7, #31]
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	429a      	cmp	r2, r3
 800793e:	d3f2      	bcc.n	8007926 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007948:	3b01      	subs	r3, #1
 800794a:	0e1b      	lsrs	r3, r3, #24
 800794c:	b2da      	uxtb	r2, r3
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800795a:	3b01      	subs	r3, #1
 800795c:	0c1b      	lsrs	r3, r3, #16
 800795e:	b2da      	uxtb	r2, r3
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800796a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800796c:	3b01      	subs	r3, #1
 800796e:	0a1b      	lsrs	r3, r3, #8
 8007970:	b2da      	uxtb	r2, r3
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800797c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800797e:	b2db      	uxtb	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	b2da      	uxtb	r2, r3
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007992:	161b      	asrs	r3, r3, #24
 8007994:	b2da      	uxtb	r2, r3
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80079a4:	141b      	asrs	r3, r3, #16
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	330a      	adds	r3, #10
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	330b      	adds	r3, #11
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80079e0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	330c      	adds	r3, #12
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80079ea:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	320d      	adds	r2, #13
 80079f0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80079f2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	60da      	str	r2, [r3, #12]

  return 0;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3724      	adds	r7, #36	; 0x24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd90      	pop	{r4, r7, pc}

08007a02 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b088      	sub	sp, #32
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	607a      	str	r2, [r7, #4]
 8007a0e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	32b0      	adds	r2, #176	; 0xb0
 8007a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d102      	bne.n	8007a2c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	e063      	b.n	8007af4 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	33b0      	adds	r3, #176	; 0xb0
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f107 0214 	add.w	r2, r7, #20
 8007a42:	f107 0110 	add.w	r1, r7, #16
 8007a46:	7af8      	ldrb	r0, [r7, #11]
 8007a48:	4798      	blx	r3
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d106      	bne.n	8007a64 <SCSI_ReadFormatCapacity+0x62>
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a5c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d108      	bne.n	8007a76 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007a64:	7af9      	ldrb	r1, [r7, #11]
 8007a66:	233a      	movs	r3, #58	; 0x3a
 8007a68:	2202      	movs	r2, #2
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f940 	bl	8007cf0 <SCSI_SenseCode>
    return -1;
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295
 8007a74:	e03e      	b.n	8007af4 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8007a76:	2300      	movs	r3, #0
 8007a78:	83fb      	strh	r3, [r7, #30]
 8007a7a:	e007      	b.n	8007a8c <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8007a7c:	8bfb      	ldrh	r3, [r7, #30]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	4413      	add	r3, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007a86:	8bfb      	ldrh	r3, [r7, #30]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	83fb      	strh	r3, [r7, #30]
 8007a8c:	8bfb      	ldrh	r3, [r7, #30]
 8007a8e:	2b0b      	cmp	r3, #11
 8007a90:	d9f4      	bls.n	8007a7c <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2208      	movs	r2, #8
 8007a96:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	0e1b      	lsrs	r3, r3, #24
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	0c1b      	lsrs	r3, r3, #16
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2202      	movs	r2, #2
 8007acc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007ace:	8abb      	ldrh	r3, [r7, #20]
 8007ad0:	141b      	asrs	r3, r3, #16
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007ad8:	8abb      	ldrh	r3, [r7, #20]
 8007ada:	0a1b      	lsrs	r3, r3, #8
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007ae4:	8abb      	ldrh	r3, [r7, #20]
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	220c      	movs	r2, #12
 8007af0:	60da      	str	r2, [r3, #12]

  return 0;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3720      	adds	r7, #32
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	460b      	mov	r3, r1
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	32b0      	adds	r2, #176	; 0xb0
 8007b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b18:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007b1a:	2317      	movs	r3, #23
 8007b1c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8007b24:	f04f 33ff 	mov.w	r3, #4294967295
 8007b28:	e011      	b.n	8007b4e <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	8afa      	ldrh	r2, [r7, #22]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d303      	bcc.n	8007b40 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007b40:	8afb      	ldrh	r3, [r7, #22]
 8007b42:	461a      	mov	r2, r3
 8007b44:	4904      	ldr	r1, [pc, #16]	; (8007b58 <SCSI_ModeSense6+0x5c>)
 8007b46:	6938      	ldr	r0, [r7, #16]
 8007b48:	f000 feb8 	bl	80088bc <SCSI_UpdateBotData>

  return 0;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000094 	.word	0x20000094

08007b5c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	460b      	mov	r3, r1
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	32b0      	adds	r2, #176	; 0xb0
 8007b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b78:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007b7a:	231b      	movs	r3, #27
 8007b7c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d102      	bne.n	8007b8a <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8007b84:	f04f 33ff 	mov.w	r3, #4294967295
 8007b88:	e011      	b.n	8007bae <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	8afa      	ldrh	r2, [r7, #22]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d303      	bcc.n	8007ba0 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007ba0:	8afb      	ldrh	r3, [r7, #22]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	4904      	ldr	r1, [pc, #16]	; (8007bb8 <SCSI_ModeSense10+0x5c>)
 8007ba6:	6938      	ldr	r0, [r7, #16]
 8007ba8:	f000 fe88 	bl	80088bc <SCSI_UpdateBotData>

  return 0;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	200000ac 	.word	0x200000ac

08007bbc <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	607a      	str	r2, [r7, #4]
 8007bc8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	32b0      	adds	r2, #176	; 0xb0
 8007bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d102      	bne.n	8007be6 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8007be0:	f04f 33ff 	mov.w	r3, #4294967295
 8007be4:	e080      	b.n	8007ce8 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf8:	7f59      	ldrb	r1, [r3, #29]
 8007bfa:	2320      	movs	r3, #32
 8007bfc:	2205      	movs	r2, #5
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 f876 	bl	8007cf0 <SCSI_SenseCode>
    return -1;
 8007c04:	f04f 33ff 	mov.w	r3, #4294967295
 8007c08:	e06e      	b.n	8007ce8 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	75fb      	strb	r3, [r7, #23]
 8007c0e:	e007      	b.n	8007c20 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4413      	add	r3, r2
 8007c16:	2200      	movs	r2, #0
 8007c18:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	2b11      	cmp	r3, #17
 8007c24:	d9f4      	bls.n	8007c10 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	2270      	movs	r2, #112	; 0x70
 8007c2a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	220c      	movs	r2, #12
 8007c30:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c38:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c42:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d03f      	beq.n	8007cca <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c50:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007c54:	461a      	mov	r2, r3
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8007c5c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c6a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	4413      	add	r3, r2
 8007c78:	791a      	ldrb	r2, [r3, #4]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c84:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	4413      	add	r3, r2
 8007c92:	795a      	ldrb	r2, [r3, #5]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d105      	bne.n	8007cca <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2212      	movs	r2, #18
 8007cce:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b12      	cmp	r3, #18
 8007cd8:	d805      	bhi.n	8007ce6 <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	70fb      	strb	r3, [r7, #3]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70bb      	strb	r3, [r7, #2]
 8007d06:	4613      	mov	r3, r2
 8007d08:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	32b0      	adds	r2, #176	; 0xb0
 8007d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d18:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d03d      	beq.n	8007d9c <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d26:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8007d32:	78b9      	ldrb	r1, [r7, #2]
 8007d34:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d3e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	787a      	ldrb	r2, [r7, #1]
 8007d4e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d56:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	4413      	add	r3, r2
 8007d64:	2200      	movs	r2, #0
 8007d66:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007d72:	3301      	adds	r3, #1
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d86:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d107      	bne.n	8007d9e <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8007d9a:	e000      	b.n	8007d9e <SCSI_SenseCode+0xae>
    return;
 8007d9c:	bf00      	nop
  }
}
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	460b      	mov	r3, r1
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	32b0      	adds	r2, #176	; 0xb0
 8007dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8007dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd0:	e043      	b.n	8007e5a <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d10f      	bne.n	8007e00 <SCSI_StartStopUnit+0x58>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3304      	adds	r3, #4
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d108      	bne.n	8007e00 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007dee:	7af9      	ldrb	r1, [r7, #11]
 8007df0:	2324      	movs	r3, #36	; 0x24
 8007df2:	2205      	movs	r2, #5
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff ff7b 	bl	8007cf0 <SCSI_SenseCode>

    return -1;
 8007dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfe:	e02c      	b.n	8007e5a <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d106      	bne.n	8007e1c <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8007e1a:	e01a      	b.n	8007e52 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d106      	bne.n	8007e38 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e30:	2202      	movs	r2, #2
 8007e32:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8007e36:	e00c      	b.n	8007e52 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d105      	bne.n	8007e52 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2200      	movs	r2, #0
 8007e56:	60da      	str	r2, [r3, #12]

  return 0;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b087      	sub	sp, #28
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	607a      	str	r2, [r7, #4]
 8007e6e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	32b0      	adds	r2, #176	; 0xb0
 8007e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8007e86:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8a:	e015      	b.n	8007eb8 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8007ea2:	e005      	b.n	8007eb0 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	60da      	str	r2, [r3, #12]

  return 0;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	32b0      	adds	r2, #176	; 0xb0
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d102      	bne.n	8007eee <SCSI_Read10+0x2a>
  {
    return -1;
 8007ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eec:	e09d      	b.n	800802a <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	7a1b      	ldrb	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f040 808f 	bne.w	8008016 <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efe:	7f1b      	ldrb	r3, [r3, #28]
 8007f00:	b25b      	sxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	db0b      	blt.n	8007f1e <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0c:	7f59      	ldrb	r1, [r3, #29]
 8007f0e:	2320      	movs	r3, #32
 8007f10:	2205      	movs	r2, #5
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff feec 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1c:	e085      	b.n	800802a <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f24:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d108      	bne.n	8007f3e <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f2c:	7af9      	ldrb	r1, [r7, #11]
 8007f2e:	233a      	movs	r3, #58	; 0x3a
 8007f30:	2202      	movs	r2, #2
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff fedc 	bl	8007cf0 <SCSI_SenseCode>

      return -1;
 8007f38:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3c:	e075      	b.n	800802a <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	33b0      	adds	r3, #176	; 0xb0
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	7afa      	ldrb	r2, [r7, #11]
 8007f52:	4610      	mov	r0, r2
 8007f54:	4798      	blx	r3
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d008      	beq.n	8007f6e <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f5c:	7af9      	ldrb	r1, [r7, #11]
 8007f5e:	233a      	movs	r3, #58	; 0x3a
 8007f60:	2202      	movs	r2, #2
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff fec4 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 8007f68:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6c:	e05d      	b.n	800802a <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3302      	adds	r3, #2
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3303      	adds	r3, #3
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007f7e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007f88:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	3205      	adds	r2, #5
 8007f8e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007f90:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f98:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3307      	adds	r3, #7
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	3208      	adds	r2, #8
 8007fa6:	7812      	ldrb	r2, [r2, #0]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fb0:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	7af9      	ldrb	r1, [r7, #11]
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 fb0c 	bl	80085e2 <SCSI_CheckAddressRange>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	da02      	bge.n	8007fd6 <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd4:	e029      	b.n	800802a <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	6979      	ldr	r1, [r7, #20]
 8007fe8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007fec:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d00b      	beq.n	8008010 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffe:	7f59      	ldrb	r1, [r3, #29]
 8008000:	2320      	movs	r3, #32
 8008002:	2205      	movs	r2, #5
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff fe73 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 800800a:	f04f 33ff 	mov.w	r3, #4294967295
 800800e:	e00c      	b.n	800802a <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2202      	movs	r2, #2
 8008014:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800801c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	4619      	mov	r1, r3
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fb0a 	bl	800863c <SCSI_ProcessRead>
 8008028:	4603      	mov	r3, r0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b086      	sub	sp, #24
 8008036:	af00      	add	r7, sp, #0
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	460b      	mov	r3, r1
 800803c:	607a      	str	r2, [r7, #4]
 800803e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	32b0      	adds	r2, #176	; 0xb0
 800804a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <SCSI_Read12+0x2a>
  {
    return -1;
 8008056:	f04f 33ff 	mov.w	r3, #4294967295
 800805a:	e0a7      	b.n	80081ac <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	7a1b      	ldrb	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f040 8099 	bne.w	8008198 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	7f1b      	ldrb	r3, [r3, #28]
 800806e:	b25b      	sxtb	r3, r3
 8008070:	2b00      	cmp	r3, #0
 8008072:	db0b      	blt.n	800808c <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807a:	7f59      	ldrb	r1, [r3, #29]
 800807c:	2320      	movs	r3, #32
 800807e:	2205      	movs	r2, #5
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff fe35 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 8008086:	f04f 33ff 	mov.w	r3, #4294967295
 800808a:	e08f      	b.n	80081ac <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008092:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008096:	2b02      	cmp	r3, #2
 8008098:	d108      	bne.n	80080ac <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800809a:	7af9      	ldrb	r1, [r7, #11]
 800809c:	233a      	movs	r3, #58	; 0x3a
 800809e:	2202      	movs	r2, #2
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff fe25 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 80080a6:	f04f 33ff 	mov.w	r3, #4294967295
 80080aa:	e07f      	b.n	80081ac <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	33b0      	adds	r3, #176	; 0xb0
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	7afa      	ldrb	r2, [r7, #11]
 80080c0:	4610      	mov	r0, r2
 80080c2:	4798      	blx	r3
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d008      	beq.n	80080dc <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80080ca:	7af9      	ldrb	r1, [r7, #11]
 80080cc:	233a      	movs	r3, #58	; 0x3a
 80080ce:	2202      	movs	r2, #2
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f7ff fe0d 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 80080d6:	f04f 33ff 	mov.w	r3, #4294967295
 80080da:	e067      	b.n	80081ac <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3302      	adds	r3, #2
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3303      	adds	r3, #3
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80080ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3304      	adds	r3, #4
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80080f6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	3205      	adds	r2, #5
 80080fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80080fe:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008106:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3306      	adds	r3, #6
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3307      	adds	r3, #7
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008118:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3308      	adds	r3, #8
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008122:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	3209      	adds	r2, #9
 8008128:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800812a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008132:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800813a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008144:	7af9      	ldrb	r1, [r7, #11]
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fa4b 	bl	80085e2 <SCSI_CheckAddressRange>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	da02      	bge.n	8008158 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008152:	f04f 33ff 	mov.w	r3, #4294967295
 8008156:	e029      	b.n	80081ac <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815e:	699a      	ldr	r2, [r3, #24]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008168:	6979      	ldr	r1, [r7, #20]
 800816a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800816e:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8008172:	fb01 f303 	mul.w	r3, r1, r3
 8008176:	429a      	cmp	r2, r3
 8008178:	d00b      	beq.n	8008192 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008180:	7f59      	ldrb	r1, [r3, #29]
 8008182:	2320      	movs	r3, #32
 8008184:	2205      	movs	r2, #5
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7ff fdb2 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 800818c:	f04f 33ff 	mov.w	r3, #4294967295
 8008190:	e00c      	b.n	80081ac <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2202      	movs	r2, #2
 8008196:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800819e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80081a0:	7afb      	ldrb	r3, [r7, #11]
 80081a2:	4619      	mov	r1, r3
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fa49 	bl	800863c <SCSI_ProcessRead>
 80081aa:	4603      	mov	r3, r0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	460b      	mov	r3, r1
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	32b0      	adds	r2, #176	; 0xb0
 80081cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <SCSI_Write10+0x2a>
  {
    return -1;
 80081d8:	f04f 33ff 	mov.w	r3, #4294967295
 80081dc:	e0c7      	b.n	800836e <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	7a1b      	ldrb	r3, [r3, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f040 80bd 	bne.w	8008362 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10b      	bne.n	800820c <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fa:	7f59      	ldrb	r1, [r3, #29]
 80081fc:	2320      	movs	r3, #32
 80081fe:	2205      	movs	r2, #5
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff fd75 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 8008206:	f04f 33ff 	mov.w	r3, #4294967295
 800820a:	e0b0      	b.n	800836e <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008212:	7f1b      	ldrb	r3, [r3, #28]
 8008214:	b25b      	sxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	da0b      	bge.n	8008232 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008220:	7f59      	ldrb	r1, [r3, #29]
 8008222:	2320      	movs	r3, #32
 8008224:	2205      	movs	r2, #5
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fd62 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 800822c:	f04f 33ff 	mov.w	r3, #4294967295
 8008230:	e09d      	b.n	800836e <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	33b0      	adds	r3, #176	; 0xb0
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	7afa      	ldrb	r2, [r7, #11]
 8008246:	4610      	mov	r0, r2
 8008248:	4798      	blx	r3
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d008      	beq.n	8008262 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008250:	7af9      	ldrb	r1, [r7, #11]
 8008252:	233a      	movs	r3, #58	; 0x3a
 8008254:	2202      	movs	r2, #2
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7ff fd4a 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 800825c:	f04f 33ff 	mov.w	r3, #4294967295
 8008260:	e085      	b.n	800836e <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	33b0      	adds	r3, #176	; 0xb0
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	7afa      	ldrb	r2, [r7, #11]
 8008276:	4610      	mov	r0, r2
 8008278:	4798      	blx	r3
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008280:	7af9      	ldrb	r1, [r7, #11]
 8008282:	2327      	movs	r3, #39	; 0x27
 8008284:	2202      	movs	r2, #2
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7ff fd32 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 800828c:	f04f 33ff 	mov.w	r3, #4294967295
 8008290:	e06d      	b.n	800836e <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3302      	adds	r3, #2
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3303      	adds	r3, #3
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80082a2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3304      	adds	r3, #4
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80082ac:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	3205      	adds	r2, #5
 80082b2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80082b4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082bc:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3307      	adds	r3, #7
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	3208      	adds	r2, #8
 80082ca:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80082cc:	4313      	orrs	r3, r2
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082d4:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	7af9      	ldrb	r1, [r7, #11]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 f97a 	bl	80085e2 <SCSI_CheckAddressRange>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da02      	bge.n	80082fa <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80082f4:	f04f 33ff 	mov.w	r3, #4294967295
 80082f8:	e039      	b.n	800836e <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008308:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800830c:	fb02 f303 	mul.w	r3, r2, r3
 8008310:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	429a      	cmp	r2, r3
 800831e:	d00b      	beq.n	8008338 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008326:	7f59      	ldrb	r1, [r3, #29]
 8008328:	2320      	movs	r3, #32
 800832a:	2205      	movs	r2, #5
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7ff fcdf 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 8008332:	f04f 33ff 	mov.w	r3, #4294967295
 8008336:	e01a      	b.n	800836e <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833e:	bf28      	it	cs
 8008340:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8008344:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2201      	movs	r2, #1
 800834a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800834c:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <SCSI_Write10+0x1c4>)
 800834e:	7819      	ldrb	r1, [r3, #0]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f103 0210 	add.w	r2, r3, #16
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f007 fe67 	bl	801002c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800835e:	2300      	movs	r3, #0
 8008360:	e005      	b.n	800836e <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 8008362:	7afb      	ldrb	r3, [r7, #11]
 8008364:	4619      	mov	r1, r3
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 f9fe 	bl	8008768 <SCSI_ProcessWrite>
 800836c:	4603      	mov	r3, r0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000083 	.word	0x20000083

0800837c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	460b      	mov	r3, r1
 8008386:	607a      	str	r2, [r7, #4]
 8008388:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	32b0      	adds	r2, #176	; 0xb0
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <SCSI_Write12+0x2a>
  {
    return -1;
 80083a0:	f04f 33ff 	mov.w	r3, #4294967295
 80083a4:	e0d7      	b.n	8008556 <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	7a1b      	ldrb	r3, [r3, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f040 80cd 	bne.w	800854a <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10b      	bne.n	80083d4 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c2:	7f59      	ldrb	r1, [r3, #29]
 80083c4:	2320      	movs	r3, #32
 80083c6:	2205      	movs	r2, #5
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7ff fc91 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 80083ce:	f04f 33ff 	mov.w	r3, #4294967295
 80083d2:	e0c0      	b.n	8008556 <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083da:	7f1b      	ldrb	r3, [r3, #28]
 80083dc:	b25b      	sxtb	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	da0b      	bge.n	80083fa <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e8:	7f59      	ldrb	r1, [r3, #29]
 80083ea:	2320      	movs	r3, #32
 80083ec:	2205      	movs	r2, #5
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff fc7e 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 80083f4:	f04f 33ff 	mov.w	r3, #4294967295
 80083f8:	e0ad      	b.n	8008556 <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	33b0      	adds	r3, #176	; 0xb0
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	7afa      	ldrb	r2, [r7, #11]
 800840e:	4610      	mov	r0, r2
 8008410:	4798      	blx	r3
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008418:	7af9      	ldrb	r1, [r7, #11]
 800841a:	233a      	movs	r3, #58	; 0x3a
 800841c:	2202      	movs	r2, #2
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fc66 	bl	8007cf0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	2205      	movs	r2, #5
 8008428:	721a      	strb	r2, [r3, #8]
      return -1;
 800842a:	f04f 33ff 	mov.w	r3, #4294967295
 800842e:	e092      	b.n	8008556 <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	33b0      	adds	r3, #176	; 0xb0
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	7afa      	ldrb	r2, [r7, #11]
 8008444:	4610      	mov	r0, r2
 8008446:	4798      	blx	r3
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800844e:	7af9      	ldrb	r1, [r7, #11]
 8008450:	2327      	movs	r3, #39	; 0x27
 8008452:	2202      	movs	r2, #2
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f7ff fc4b 	bl	8007cf0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2205      	movs	r2, #5
 800845e:	721a      	strb	r2, [r3, #8]
      return -1;
 8008460:	f04f 33ff 	mov.w	r3, #4294967295
 8008464:	e077      	b.n	8008556 <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3302      	adds	r3, #2
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3303      	adds	r3, #3
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008476:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3304      	adds	r3, #4
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008480:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	3205      	adds	r2, #5
 8008486:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008488:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008490:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3306      	adds	r3, #6
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3307      	adds	r3, #7
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80084a2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3308      	adds	r3, #8
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80084ac:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	3209      	adds	r2, #9
 80084b2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80084b4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084bc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ce:	7af9      	ldrb	r1, [r7, #11]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f886 	bl	80085e2 <SCSI_CheckAddressRange>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da02      	bge.n	80084e2 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80084dc:	f04f 33ff 	mov.w	r3, #4294967295
 80084e0:	e039      	b.n	8008556 <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084f0:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80084f4:	fb02 f303 	mul.w	r3, r2, r3
 80084f8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	429a      	cmp	r2, r3
 8008506:	d00b      	beq.n	8008520 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800850e:	7f59      	ldrb	r1, [r3, #29]
 8008510:	2320      	movs	r3, #32
 8008512:	2205      	movs	r2, #5
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff fbeb 	bl	8007cf0 <SCSI_SenseCode>
      return -1;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295
 800851e:	e01a      	b.n	8008556 <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008526:	bf28      	it	cs
 8008528:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800852c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2201      	movs	r2, #1
 8008532:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008534:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <SCSI_Write12+0x1e4>)
 8008536:	7819      	ldrb	r1, [r3, #0]
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f103 0210 	add.w	r2, r3, #16
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f007 fd73 	bl	801002c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008546:	2300      	movs	r3, #0
 8008548:	e005      	b.n	8008556 <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800854a:	7afb      	ldrb	r3, [r7, #11]
 800854c:	4619      	mov	r1, r3
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 f90a 	bl	8008768 <SCSI_ProcessWrite>
 8008554:	4603      	mov	r3, r0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000083 	.word	0x20000083

08008564 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	460b      	mov	r3, r1
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	32b0      	adds	r2, #176	; 0xb0
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d102      	bne.n	800858e <SCSI_Verify10+0x2a>
  {
    return -1;
 8008588:	f04f 33ff 	mov.w	r3, #4294967295
 800858c:	e025      	b.n	80085da <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3301      	adds	r3, #1
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d008      	beq.n	80085ae <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800859c:	7af9      	ldrb	r1, [r7, #11]
 800859e:	2324      	movs	r3, #36	; 0x24
 80085a0:	2205      	movs	r2, #5
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff fba4 	bl	8007cf0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80085a8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ac:	e015      	b.n	80085da <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085be:	7af9      	ldrb	r1, [r7, #11]
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f80e 	bl	80085e2 <SCSI_CheckAddressRange>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	da02      	bge.n	80085d2 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295
 80085d0:	e003      	b.n	80085da <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2200      	movs	r2, #0
 80085d6:	60da      	str	r2, [r3, #12]

  return 0;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b086      	sub	sp, #24
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	60f8      	str	r0, [r7, #12]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
 80085ee:	460b      	mov	r3, r1
 80085f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	32b0      	adds	r2, #176	; 0xb0
 80085fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008600:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d102      	bne.n	800860e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8008608:	f04f 33ff 	mov.w	r3, #4294967295
 800860c:	e012      	b.n	8008634 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	441a      	add	r2, r3
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800861a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800861c:	429a      	cmp	r2, r3
 800861e:	d908      	bls.n	8008632 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008620:	7af9      	ldrb	r1, [r7, #11]
 8008622:	2321      	movs	r3, #33	; 0x21
 8008624:	2205      	movs	r2, #5
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f7ff fb62 	bl	8007cf0 <SCSI_SenseCode>
    return -1;
 800862c:	f04f 33ff 	mov.w	r3, #4294967295
 8008630:	e000      	b.n	8008634 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	32b0      	adds	r2, #176	; 0xb0
 8008652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008656:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d102      	bne.n	8008664 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800865e:	f04f 33ff 	mov.w	r3, #4294967295
 8008662:	e07b      	b.n	800875c <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800866a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008672:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8008676:	fb02 f303 	mul.w	r3, r2, r3
 800867a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008682:	bf28      	it	cs
 8008684:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8008688:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	33b0      	adds	r3, #176	; 0xb0
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	691c      	ldr	r4, [r3, #16]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f103 0110 	add.w	r1, r3, #16
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80086b4:	4618      	mov	r0, r3
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80086bc:	b29b      	uxth	r3, r3
 80086be:	78f8      	ldrb	r0, [r7, #3]
 80086c0:	47a0      	blx	r4
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	da08      	bge.n	80086da <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80086c8:	78f9      	ldrb	r1, [r7, #3]
 80086ca:	2311      	movs	r3, #17
 80086cc:	2204      	movs	r2, #4
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff fb0e 	bl	8007cf0 <SCSI_SenseCode>
    return -1;
 80086d4:	f04f 33ff 	mov.w	r3, #4294967295
 80086d8:	e040      	b.n	800875c <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80086da:	4b22      	ldr	r3, [pc, #136]	; (8008764 <SCSI_ProcessRead+0x128>)
 80086dc:	7819      	ldrb	r1, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f103 0210 	add.w	r2, r3, #16
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f007 fc7f 	bl	800ffea <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80086fe:	4619      	mov	r1, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	fbb3 f3f1 	udiv	r3, r3, r1
 8008706:	4413      	add	r3, r2
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800870e:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800871e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008722:	4619      	mov	r1, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	fbb3 f3f1 	udiv	r3, r3, r1
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008732:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800873a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008746:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800874e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008750:	2b00      	cmp	r3, #0
 8008752:	d102      	bne.n	800875a <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2203      	movs	r2, #3
 8008758:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	bd90      	pop	{r4, r7, pc}
 8008764:	20000082 	.word	0x20000082

08008768 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008768:	b590      	push	{r4, r7, lr}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	32b0      	adds	r2, #176	; 0xb0
 800877e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008782:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800878a:	f04f 33ff 	mov.w	r3, #4294967295
 800878e:	e08e      	b.n	80088ae <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800879e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80087a2:	fb02 f303 	mul.w	r3, r2, r3
 80087a6:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ae:	bf28      	it	cs
 80087b0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80087b4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	33b0      	adds	r3, #176	; 0xb0
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	695c      	ldr	r4, [r3, #20]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f103 0110 	add.w	r1, r3, #16
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80087e0:	4618      	mov	r0, r3
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	78f8      	ldrb	r0, [r7, #3]
 80087ec:	47a0      	blx	r4
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da08      	bge.n	8008806 <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80087f4:	78f9      	ldrb	r1, [r7, #3]
 80087f6:	2303      	movs	r3, #3
 80087f8:	2204      	movs	r2, #4
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff fa78 	bl	8007cf0 <SCSI_SenseCode>
    return -1;
 8008800:	f04f 33ff 	mov.w	r3, #4294967295
 8008804:	e053      	b.n	80088ae <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800880c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008814:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008818:	4619      	mov	r1, r3
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008820:	4413      	add	r3, r2
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008828:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008830:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008838:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800883c:	4619      	mov	r1, r3
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	fbb3 f3f1 	udiv	r3, r3, r1
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800884c:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008860:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886a:	2b00      	cmp	r3, #0
 800886c:	d104      	bne.n	8008878 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800886e:	2100      	movs	r1, #0
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7fe fc55 	bl	8007120 <MSC_BOT_SendCSW>
 8008876:	e019      	b.n	80088ac <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008886:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800888a:	fb02 f303 	mul.w	r3, r2, r3
 800888e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008892:	bf28      	it	cs
 8008894:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8008898:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800889a:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <SCSI_ProcessWrite+0x150>)
 800889c:	7819      	ldrb	r1, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f103 0210 	add.w	r2, r3, #16
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f007 fbc0 	bl	801002c <USBD_LL_PrepareReceive>
  }

  return 0;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd90      	pop	{r4, r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000083 	.word	0x20000083

080088bc <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80088d4:	f04f 33ff 	mov.w	r3, #4294967295
 80088d8:	e013      	b.n	8008902 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80088da:	8afa      	ldrh	r2, [r7, #22]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80088e0:	e00b      	b.n	80088fa <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80088e2:	8afb      	ldrh	r3, [r7, #22]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80088e8:	8afb      	ldrh	r3, [r7, #22]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	441a      	add	r2, r3
 80088ee:	8afb      	ldrh	r3, [r7, #22]
 80088f0:	7811      	ldrb	r1, [r2, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	460a      	mov	r2, r1
 80088f8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80088fa:	8afb      	ldrh	r3, [r7, #22]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1f0      	bne.n	80088e2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b086      	sub	sp, #24
 8008912:	af00      	add	r7, sp, #0
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	4613      	mov	r3, r2
 800891a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008922:	2303      	movs	r3, #3
 8008924:	e01f      	b.n	8008966 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	79fa      	ldrb	r2, [r7, #7]
 8008958:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f007 fa3c 	bl	800fdd8 <USBD_LL_Init>
 8008960:	4603      	mov	r3, r0
 8008962:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008964:	7dfb      	ldrb	r3, [r7, #23]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008982:	2303      	movs	r3, #3
 8008984:	e025      	b.n	80089d2 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	32ae      	adds	r2, #174	; 0xae
 8008998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00f      	beq.n	80089c2 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	32ae      	adds	r2, #174	; 0xae
 80089ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b2:	f107 020e 	add.w	r2, r7, #14
 80089b6:	4610      	mov	r0, r2
 80089b8:	4798      	blx	r3
 80089ba:	4602      	mov	r2, r0
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b082      	sub	sp, #8
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f007 fa44 	bl	800fe70 <USBD_LL_Start>
 80089e8:	4603      	mov	r3, r0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b086      	sub	sp, #24
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	885b      	ldrh	r3, [r3, #2]
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d920      	bls.n	8008a5c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a22:	e013      	b.n	8008a4c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a24:	f107 030a 	add.w	r3, r7, #10
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6978      	ldr	r0, [r7, #20]
 8008a2c:	f000 f81b 	bl	8008a66 <USBD_GetNextDesc>
 8008a30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	2b05      	cmp	r3, #5
 8008a38:	d108      	bne.n	8008a4c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	789b      	ldrb	r3, [r3, #2]
 8008a42:	78fa      	ldrb	r2, [r7, #3]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d008      	beq.n	8008a5a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	885b      	ldrh	r3, [r3, #2]
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	897b      	ldrh	r3, [r7, #10]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d8e5      	bhi.n	8008a24 <USBD_GetEpDesc+0x32>
 8008a58:	e000      	b.n	8008a5c <USBD_GetEpDesc+0x6a>
          break;
 8008a5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a5c:	693b      	ldr	r3, [r7, #16]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	881a      	ldrh	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4413      	add	r3, r2
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4413      	add	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a92:	68fb      	ldr	r3, [r7, #12]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aaa:	2180      	movs	r1, #128	; 0x80
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f007 fa5e 	bl	800ff6e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f007 fa5a 	bl	800ff6e <USBD_LL_StallEP>
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b086      	sub	sp, #24
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	60b9      	str	r1, [r7, #8]
 8008acc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d036      	beq.n	8008b46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008adc:	6938      	ldr	r0, [r7, #16]
 8008ade:	f000 f836 	bl	8008b4e <USBD_GetLen>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	4413      	add	r3, r2
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	7812      	ldrb	r2, [r2, #0]
 8008afa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
 8008afe:	3301      	adds	r3, #1
 8008b00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	4413      	add	r3, r2
 8008b08:	2203      	movs	r2, #3
 8008b0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b12:	e013      	b.n	8008b3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	4413      	add	r3, r2
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	7812      	ldrb	r2, [r2, #0]
 8008b1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	3301      	adds	r3, #1
 8008b24:	613b      	str	r3, [r7, #16]
    idx++;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4413      	add	r3, r2
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e7      	bne.n	8008b14 <USBD_GetString+0x52>
 8008b44:	e000      	b.n	8008b48 <USBD_GetString+0x86>
    return;
 8008b46:	bf00      	nop
  }
}
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b5e:	e005      	b.n	8008b6c <USBD_GetLen+0x1e>
  {
    len++;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	3301      	adds	r3, #1
 8008b64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1f5      	bne.n	8008b60 <USBD_GetLen+0x12>
  }

  return len;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	60f8      	str	r0, [r7, #12]
 8008b8a:	60b9      	str	r1, [r7, #8]
 8008b8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2202      	movs	r2, #2
 8008b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f007 fa1e 	bl	800ffea <USBD_LL_Transmit>

  return USBD_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	4a08      	ldr	r2, [pc, #32]	; (8008be8 <disk_status+0x30>)
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	79fa      	ldrb	r2, [r7, #7]
 8008bd0:	4905      	ldr	r1, [pc, #20]	; (8008be8 <disk_status+0x30>)
 8008bd2:	440a      	add	r2, r1
 8008bd4:	7a12      	ldrb	r2, [r2, #8]
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	4798      	blx	r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20002dd4 	.word	0x20002dd4

08008bec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	4a0d      	ldr	r2, [pc, #52]	; (8008c34 <disk_initialize+0x48>)
 8008bfe:	5cd3      	ldrb	r3, [r2, r3]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d111      	bne.n	8008c28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	4a0b      	ldr	r2, [pc, #44]	; (8008c34 <disk_initialize+0x48>)
 8008c08:	2101      	movs	r1, #1
 8008c0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	4a09      	ldr	r2, [pc, #36]	; (8008c34 <disk_initialize+0x48>)
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	79fa      	ldrb	r2, [r7, #7]
 8008c1a:	4906      	ldr	r1, [pc, #24]	; (8008c34 <disk_initialize+0x48>)
 8008c1c:	440a      	add	r2, r1
 8008c1e:	7a12      	ldrb	r2, [r2, #8]
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20002dd4 	.word	0x20002dd4

08008c38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c38:	b590      	push	{r4, r7, lr}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	4a0a      	ldr	r2, [pc, #40]	; (8008c74 <disk_read+0x3c>)
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	689c      	ldr	r4, [r3, #8]
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	4a07      	ldr	r2, [pc, #28]	; (8008c74 <disk_read+0x3c>)
 8008c58:	4413      	add	r3, r2
 8008c5a:	7a18      	ldrb	r0, [r3, #8]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	47a0      	blx	r4
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd90      	pop	{r4, r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20002dd4 	.word	0x20002dd4

08008c78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008c78:	b590      	push	{r4, r7, lr}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
 8008c82:	603b      	str	r3, [r7, #0]
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	4a0a      	ldr	r2, [pc, #40]	; (8008cb4 <disk_write+0x3c>)
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	68dc      	ldr	r4, [r3, #12]
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	4a07      	ldr	r2, [pc, #28]	; (8008cb4 <disk_write+0x3c>)
 8008c98:	4413      	add	r3, r2
 8008c9a:	7a18      	ldrb	r0, [r3, #8]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	47a0      	blx	r4
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd90      	pop	{r4, r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20002dd4 	.word	0x20002dd4

08008cb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	603a      	str	r2, [r7, #0]
 8008cc2:	71fb      	strb	r3, [r7, #7]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <disk_ioctl+0x38>)
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	79fa      	ldrb	r2, [r7, #7]
 8008cd6:	4906      	ldr	r1, [pc, #24]	; (8008cf0 <disk_ioctl+0x38>)
 8008cd8:	440a      	add	r2, r1
 8008cda:	7a10      	ldrb	r0, [r2, #8]
 8008cdc:	79b9      	ldrb	r1, [r7, #6]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	4798      	blx	r3
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	73fb      	strb	r3, [r7, #15]
  return res;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20002dd4 	.word	0x20002dd4

08008cf4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d04:	89fb      	ldrh	r3, [r7, #14]
 8008d06:	021b      	lsls	r3, r3, #8
 8008d08:	b21a      	sxth	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	b21b      	sxth	r3, r3
 8008d10:	4313      	orrs	r3, r2
 8008d12:	b21b      	sxth	r3, r3
 8008d14:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d16:	89fb      	ldrh	r3, [r7, #14]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3303      	adds	r3, #3
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	3202      	adds	r2, #2
 8008d3c:	7812      	ldrb	r2, [r2, #0]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	021b      	lsls	r3, r3, #8
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	3201      	adds	r2, #1
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	021b      	lsls	r3, r3, #8
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	7812      	ldrb	r2, [r2, #0]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]
	return rv;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	887a      	ldrh	r2, [r7, #2]
 8008d7e:	b2d2      	uxtb	r2, r2
 8008d80:	701a      	strb	r2, [r3, #0]
 8008d82:	887b      	ldrh	r3, [r7, #2]
 8008d84:	0a1b      	lsrs	r3, r3, #8
 8008d86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	607a      	str	r2, [r7, #4]
 8008d8e:	887a      	ldrh	r2, [r7, #2]
 8008d90:	b2d2      	uxtb	r2, r2
 8008d92:	701a      	strb	r2, [r3, #0]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	0a1b      	lsrs	r3, r3, #8
 8008dba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	b2d2      	uxtb	r2, r2
 8008dc6:	701a      	strb	r2, [r3, #0]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	0a1b      	lsrs	r3, r3, #8
 8008dcc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	607a      	str	r2, [r7, #4]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	0a1b      	lsrs	r3, r3, #8
 8008dde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	607a      	str	r2, [r7, #4]
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	b2d2      	uxtb	r2, r2
 8008dea:	701a      	strb	r2, [r3, #0]
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00d      	beq.n	8008e2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	1c53      	adds	r3, r2, #1
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	1c59      	adds	r1, r3, #1
 8008e1c:	6179      	str	r1, [r7, #20]
 8008e1e:	7812      	ldrb	r2, [r2, #0]
 8008e20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	607b      	str	r3, [r7, #4]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1f1      	bne.n	8008e12 <mem_cpy+0x1a>
	}
}
 8008e2e:	bf00      	nop
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e3a:	b480      	push	{r7}
 8008e3c:	b087      	sub	sp, #28
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	617a      	str	r2, [r7, #20]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	607b      	str	r3, [r7, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f3      	bne.n	8008e4a <mem_set+0x10>
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <chk_chr>:
	return r;
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008e7a:	e002      	b.n	8008e82 <chk_chr+0x12>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	607b      	str	r3, [r7, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d005      	beq.n	8008e96 <chk_chr+0x26>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d1f2      	bne.n	8008e7c <chk_chr+0xc>
	return *str;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	781b      	ldrb	r3, [r3, #0]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d009      	beq.n	8008ec8 <lock_fs+0x22>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f002 f98f 	bl	800b1dc <ff_req_grant>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <lock_fs+0x22>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e000      	b.n	8008eca <lock_fs+0x24>
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00d      	beq.n	8008f00 <unlock_fs+0x2e>
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	2b0c      	cmp	r3, #12
 8008ee8:	d00a      	beq.n	8008f00 <unlock_fs+0x2e>
 8008eea:	78fb      	ldrb	r3, [r7, #3]
 8008eec:	2b0b      	cmp	r3, #11
 8008eee:	d007      	beq.n	8008f00 <unlock_fs+0x2e>
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	2b0f      	cmp	r3, #15
 8008ef4:	d004      	beq.n	8008f00 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f002 f983 	bl	800b206 <ff_rel_grant>
	}
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	e010      	b.n	8008f38 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008f16:	4a0d      	ldr	r2, [pc, #52]	; (8008f4c <clear_lock+0x44>)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	4413      	add	r3, r2
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d105      	bne.n	8008f32 <clear_lock+0x2a>
 8008f26:	4a09      	ldr	r2, [pc, #36]	; (8008f4c <clear_lock+0x44>)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	4413      	add	r3, r2
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3301      	adds	r3, #1
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d9eb      	bls.n	8008f16 <clear_lock+0xe>
	}
}
 8008f3e:	bf00      	nop
 8008f40:	bf00      	nop
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	20002db4 	.word	0x20002db4

08008f50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	78db      	ldrb	r3, [r3, #3]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d034      	beq.n	8008fce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7858      	ldrb	r0, [r3, #1]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008f74:	2301      	movs	r3, #1
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	f7ff fe7e 	bl	8008c78 <disk_write>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	73fb      	strb	r3, [r7, #15]
 8008f86:	e022      	b.n	8008fce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	1ad2      	subs	r2, r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d217      	bcs.n	8008fce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	789b      	ldrb	r3, [r3, #2]
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	e010      	b.n	8008fc8 <sync_window+0x78>
					wsect += fs->fsize;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	4413      	add	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	7858      	ldrb	r0, [r3, #1]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008fba:	2301      	movs	r3, #1
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	f7ff fe5b 	bl	8008c78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	613b      	str	r3, [r7, #16]
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d8eb      	bhi.n	8008fa6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d01b      	beq.n	8009028 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff ffad 	bl	8008f50 <sync_window>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d113      	bne.n	8009028 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	7858      	ldrb	r0, [r3, #1]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800900a:	2301      	movs	r3, #1
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	f7ff fe13 	bl	8008c38 <disk_read>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d004      	beq.n	8009022 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009018:	f04f 33ff 	mov.w	r3, #4294967295
 800901c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800901e:	2301      	movs	r3, #1
 8009020:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8009028:	7bfb      	ldrb	r3, [r7, #15]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff ff87 	bl	8008f50 <sync_window>
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d159      	bne.n	8009100 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b03      	cmp	r3, #3
 8009052:	d149      	bne.n	80090e8 <sync_fs+0xb4>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	791b      	ldrb	r3, [r3, #4]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d145      	bne.n	80090e8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	899b      	ldrh	r3, [r3, #12]
 8009066:	461a      	mov	r2, r3
 8009068:	2100      	movs	r1, #0
 800906a:	f7ff fee6 	bl	8008e3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	333c      	adds	r3, #60	; 0x3c
 8009072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009076:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fe75 	bl	8008d6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	333c      	adds	r3, #60	; 0x3c
 8009084:	4921      	ldr	r1, [pc, #132]	; (800910c <sync_fs+0xd8>)
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff fe8a 	bl	8008da0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	333c      	adds	r3, #60	; 0x3c
 8009090:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009094:	491e      	ldr	r1, [pc, #120]	; (8009110 <sync_fs+0xdc>)
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff fe82 	bl	8008da0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	333c      	adds	r3, #60	; 0x3c
 80090a0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f7ff fe78 	bl	8008da0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	333c      	adds	r3, #60	; 0x3c
 80090b4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	4619      	mov	r1, r3
 80090be:	4610      	mov	r0, r2
 80090c0:	f7ff fe6e 	bl	8008da0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c8:	1c5a      	adds	r2, r3, #1
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	7858      	ldrb	r0, [r3, #1]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090dc:	2301      	movs	r3, #1
 80090de:	f7ff fdcb 	bl	8008c78 <disk_write>
			fs->fsi_flag = 0;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2200      	movs	r2, #0
 80090ee:	2100      	movs	r1, #0
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff fde1 	bl	8008cb8 <disk_ioctl>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <sync_fs+0xcc>
 80090fc:	2301      	movs	r3, #1
 80090fe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	41615252 	.word	0x41615252
 8009110:	61417272 	.word	0x61417272

08009114 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	3b02      	subs	r3, #2
 8009122:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	3b02      	subs	r3, #2
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d301      	bcc.n	8009134 <clust2sect+0x20>
 8009130:	2300      	movs	r3, #0
 8009132:	e008      	b.n	8009146 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	895b      	ldrh	r3, [r3, #10]
 8009138:	461a      	mov	r2, r3
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	fb03 f202 	mul.w	r2, r3, r2
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009144:	4413      	add	r3, r2
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d904      	bls.n	8009172 <get_fat+0x20>
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d302      	bcc.n	8009178 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009172:	2301      	movs	r3, #1
 8009174:	617b      	str	r3, [r7, #20]
 8009176:	e0bb      	b.n	80092f0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009178:	f04f 33ff 	mov.w	r3, #4294967295
 800917c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b03      	cmp	r3, #3
 8009184:	f000 8083 	beq.w	800928e <get_fat+0x13c>
 8009188:	2b03      	cmp	r3, #3
 800918a:	f300 80a7 	bgt.w	80092dc <get_fat+0x18a>
 800918e:	2b01      	cmp	r3, #1
 8009190:	d002      	beq.n	8009198 <get_fat+0x46>
 8009192:	2b02      	cmp	r3, #2
 8009194:	d056      	beq.n	8009244 <get_fat+0xf2>
 8009196:	e0a1      	b.n	80092dc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	899b      	ldrh	r3, [r3, #12]
 80091ae:	4619      	mov	r1, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80091b6:	4413      	add	r3, r2
 80091b8:	4619      	mov	r1, r3
 80091ba:	6938      	ldr	r0, [r7, #16]
 80091bc:	f7ff ff0c 	bl	8008fd8 <move_window>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f040 808d 	bne.w	80092e2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	60fa      	str	r2, [r7, #12]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	8992      	ldrh	r2, [r2, #12]
 80091d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80091d6:	fb01 f202 	mul.w	r2, r1, r2
 80091da:	1a9b      	subs	r3, r3, r2
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	4413      	add	r3, r2
 80091e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	899b      	ldrh	r3, [r3, #12]
 80091ee:	4619      	mov	r1, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80091f6:	4413      	add	r3, r2
 80091f8:	4619      	mov	r1, r3
 80091fa:	6938      	ldr	r0, [r7, #16]
 80091fc:	f7ff feec 	bl	8008fd8 <move_window>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d16f      	bne.n	80092e6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	899b      	ldrh	r3, [r3, #12]
 800920a:	461a      	mov	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009212:	fb01 f202 	mul.w	r2, r1, r2
 8009216:	1a9b      	subs	r3, r3, r2
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4413      	add	r3, r2
 800921c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	461a      	mov	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	4313      	orrs	r3, r2
 8009228:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <get_fat+0xe8>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	091b      	lsrs	r3, r3, #4
 8009238:	e002      	b.n	8009240 <get_fat+0xee>
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009240:	617b      	str	r3, [r7, #20]
			break;
 8009242:	e055      	b.n	80092f0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	899b      	ldrh	r3, [r3, #12]
 800924c:	085b      	lsrs	r3, r3, #1
 800924e:	b29b      	uxth	r3, r3
 8009250:	4619      	mov	r1, r3
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	fbb3 f3f1 	udiv	r3, r3, r1
 8009258:	4413      	add	r3, r2
 800925a:	4619      	mov	r1, r3
 800925c:	6938      	ldr	r0, [r7, #16]
 800925e:	f7ff febb 	bl	8008fd8 <move_window>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d140      	bne.n	80092ea <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	005b      	lsls	r3, r3, #1
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	8992      	ldrh	r2, [r2, #12]
 8009276:	fbb3 f0f2 	udiv	r0, r3, r2
 800927a:	fb00 f202 	mul.w	r2, r0, r2
 800927e:	1a9b      	subs	r3, r3, r2
 8009280:	440b      	add	r3, r1
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff fd36 	bl	8008cf4 <ld_word>
 8009288:	4603      	mov	r3, r0
 800928a:	617b      	str	r3, [r7, #20]
			break;
 800928c:	e030      	b.n	80092f0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	899b      	ldrh	r3, [r3, #12]
 8009296:	089b      	lsrs	r3, r3, #2
 8009298:	b29b      	uxth	r3, r3
 800929a:	4619      	mov	r1, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	fbb3 f3f1 	udiv	r3, r3, r1
 80092a2:	4413      	add	r3, r2
 80092a4:	4619      	mov	r1, r3
 80092a6:	6938      	ldr	r0, [r7, #16]
 80092a8:	f7ff fe96 	bl	8008fd8 <move_window>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d11d      	bne.n	80092ee <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	8992      	ldrh	r2, [r2, #12]
 80092c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80092c4:	fb00 f202 	mul.w	r2, r0, r2
 80092c8:	1a9b      	subs	r3, r3, r2
 80092ca:	440b      	add	r3, r1
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff fd29 	bl	8008d24 <ld_dword>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80092d8:	617b      	str	r3, [r7, #20]
			break;
 80092da:	e009      	b.n	80092f0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80092dc:	2301      	movs	r3, #1
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	e006      	b.n	80092f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092e2:	bf00      	nop
 80092e4:	e004      	b.n	80092f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092e6:	bf00      	nop
 80092e8:	e002      	b.n	80092f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80092ea:	bf00      	nop
 80092ec:	e000      	b.n	80092f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80092ee:	bf00      	nop
		}
	}

	return val;
 80092f0:	697b      	ldr	r3, [r7, #20]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80092fa:	b590      	push	{r4, r7, lr}
 80092fc:	b089      	sub	sp, #36	; 0x24
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009306:	2302      	movs	r3, #2
 8009308:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2b01      	cmp	r3, #1
 800930e:	f240 8102 	bls.w	8009516 <put_fat+0x21c>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	429a      	cmp	r2, r3
 800931a:	f080 80fc 	bcs.w	8009516 <put_fat+0x21c>
		switch (fs->fs_type) {
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b03      	cmp	r3, #3
 8009324:	f000 80b6 	beq.w	8009494 <put_fat+0x19a>
 8009328:	2b03      	cmp	r3, #3
 800932a:	f300 80fd 	bgt.w	8009528 <put_fat+0x22e>
 800932e:	2b01      	cmp	r3, #1
 8009330:	d003      	beq.n	800933a <put_fat+0x40>
 8009332:	2b02      	cmp	r3, #2
 8009334:	f000 8083 	beq.w	800943e <put_fat+0x144>
 8009338:	e0f6      	b.n	8009528 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	61bb      	str	r3, [r7, #24]
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	085b      	lsrs	r3, r3, #1
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	4413      	add	r3, r2
 8009346:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	899b      	ldrh	r3, [r3, #12]
 8009350:	4619      	mov	r1, r3
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	fbb3 f3f1 	udiv	r3, r3, r1
 8009358:	4413      	add	r3, r2
 800935a:	4619      	mov	r1, r3
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff fe3b 	bl	8008fd8 <move_window>
 8009362:	4603      	mov	r3, r0
 8009364:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009366:	7ffb      	ldrb	r3, [r7, #31]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f040 80d6 	bne.w	800951a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	61ba      	str	r2, [r7, #24]
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	8992      	ldrh	r2, [r2, #12]
 800937e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009382:	fb00 f202 	mul.w	r2, r0, r2
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	440b      	add	r3, r1
 800938a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00d      	beq.n	80093b2 <put_fat+0xb8>
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	b25b      	sxtb	r3, r3
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	b25a      	sxtb	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	011b      	lsls	r3, r3, #4
 80093a8:	b25b      	sxtb	r3, r3
 80093aa:	4313      	orrs	r3, r2
 80093ac:	b25b      	sxtb	r3, r3
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	e001      	b.n	80093b6 <put_fat+0xbc>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2201      	movs	r2, #1
 80093be:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	899b      	ldrh	r3, [r3, #12]
 80093c8:	4619      	mov	r1, r3
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80093d0:	4413      	add	r3, r2
 80093d2:	4619      	mov	r1, r3
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f7ff fdff 	bl	8008fd8 <move_window>
 80093da:	4603      	mov	r3, r0
 80093dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093de:	7ffb      	ldrb	r3, [r7, #31]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f040 809c 	bne.w	800951e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	899b      	ldrh	r3, [r3, #12]
 80093f0:	461a      	mov	r2, r3
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80093f8:	fb00 f202 	mul.w	r2, r0, r2
 80093fc:	1a9b      	subs	r3, r3, r2
 80093fe:	440b      	add	r3, r1
 8009400:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <put_fat+0x11a>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	091b      	lsrs	r3, r3, #4
 8009410:	b2db      	uxtb	r3, r3
 8009412:	e00e      	b.n	8009432 <put_fat+0x138>
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	b25b      	sxtb	r3, r3
 800941a:	f023 030f 	bic.w	r3, r3, #15
 800941e:	b25a      	sxtb	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	b25b      	sxtb	r3, r3
 8009426:	f003 030f 	and.w	r3, r3, #15
 800942a:	b25b      	sxtb	r3, r3
 800942c:	4313      	orrs	r3, r2
 800942e:	b25b      	sxtb	r3, r3
 8009430:	b2db      	uxtb	r3, r3
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2201      	movs	r2, #1
 800943a:	70da      	strb	r2, [r3, #3]
			break;
 800943c:	e074      	b.n	8009528 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	899b      	ldrh	r3, [r3, #12]
 8009446:	085b      	lsrs	r3, r3, #1
 8009448:	b29b      	uxth	r3, r3
 800944a:	4619      	mov	r1, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009452:	4413      	add	r3, r2
 8009454:	4619      	mov	r1, r3
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7ff fdbe 	bl	8008fd8 <move_window>
 800945c:	4603      	mov	r3, r0
 800945e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009460:	7ffb      	ldrb	r3, [r7, #31]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d15d      	bne.n	8009522 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	005b      	lsls	r3, r3, #1
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	8992      	ldrh	r2, [r2, #12]
 8009474:	fbb3 f0f2 	udiv	r0, r3, r2
 8009478:	fb00 f202 	mul.w	r2, r0, r2
 800947c:	1a9b      	subs	r3, r3, r2
 800947e:	440b      	add	r3, r1
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	b292      	uxth	r2, r2
 8009484:	4611      	mov	r1, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fc6f 	bl	8008d6a <st_word>
			fs->wflag = 1;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2201      	movs	r2, #1
 8009490:	70da      	strb	r2, [r3, #3]
			break;
 8009492:	e049      	b.n	8009528 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	899b      	ldrh	r3, [r3, #12]
 800949c:	089b      	lsrs	r3, r3, #2
 800949e:	b29b      	uxth	r3, r3
 80094a0:	4619      	mov	r1, r3
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80094a8:	4413      	add	r3, r2
 80094aa:	4619      	mov	r1, r3
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7ff fd93 	bl	8008fd8 <move_window>
 80094b2:	4603      	mov	r3, r0
 80094b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094b6:	7ffb      	ldrb	r3, [r7, #31]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d134      	bne.n	8009526 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	8992      	ldrh	r2, [r2, #12]
 80094d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80094d4:	fb00 f202 	mul.w	r2, r0, r2
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	440b      	add	r3, r1
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fc21 	bl	8008d24 <ld_dword>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80094e8:	4323      	orrs	r3, r4
 80094ea:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	8992      	ldrh	r2, [r2, #12]
 80094fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80094fe:	fb00 f202 	mul.w	r2, r0, r2
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	440b      	add	r3, r1
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	4618      	mov	r0, r3
 800950a:	f7ff fc49 	bl	8008da0 <st_dword>
			fs->wflag = 1;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	70da      	strb	r2, [r3, #3]
			break;
 8009514:	e008      	b.n	8009528 <put_fat+0x22e>
		}
	}
 8009516:	bf00      	nop
 8009518:	e006      	b.n	8009528 <put_fat+0x22e>
			if (res != FR_OK) break;
 800951a:	bf00      	nop
 800951c:	e004      	b.n	8009528 <put_fat+0x22e>
			if (res != FR_OK) break;
 800951e:	bf00      	nop
 8009520:	e002      	b.n	8009528 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009522:	bf00      	nop
 8009524:	e000      	b.n	8009528 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009526:	bf00      	nop
	return res;
 8009528:	7ffb      	ldrb	r3, [r7, #31]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3724      	adds	r7, #36	; 0x24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd90      	pop	{r4, r7, pc}

08009532 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b088      	sub	sp, #32
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10d      	bne.n	8009564 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d004      	beq.n	800955e <create_chain+0x2c>
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	69ba      	ldr	r2, [r7, #24]
 800955a:	429a      	cmp	r2, r3
 800955c:	d31b      	bcc.n	8009596 <create_chain+0x64>
 800955e:	2301      	movs	r3, #1
 8009560:	61bb      	str	r3, [r7, #24]
 8009562:	e018      	b.n	8009596 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fdf3 	bl	8009152 <get_fat>
 800956c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d801      	bhi.n	8009578 <create_chain+0x46>
 8009574:	2301      	movs	r3, #1
 8009576:	e070      	b.n	800965a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957e:	d101      	bne.n	8009584 <create_chain+0x52>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	e06a      	b.n	800965a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	429a      	cmp	r2, r3
 800958c:	d201      	bcs.n	8009592 <create_chain+0x60>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	e063      	b.n	800965a <create_chain+0x128>
		scl = clst;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	3301      	adds	r3, #1
 800959e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d307      	bcc.n	80095ba <create_chain+0x88>
				ncl = 2;
 80095aa:	2302      	movs	r3, #2
 80095ac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80095ae:	69fa      	ldr	r2, [r7, #28]
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d901      	bls.n	80095ba <create_chain+0x88>
 80095b6:	2300      	movs	r3, #0
 80095b8:	e04f      	b.n	800965a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80095ba:	69f9      	ldr	r1, [r7, #28]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fdc8 	bl	8009152 <get_fat>
 80095c2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00e      	beq.n	80095e8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d003      	beq.n	80095d8 <create_chain+0xa6>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d6:	d101      	bne.n	80095dc <create_chain+0xaa>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	e03e      	b.n	800965a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d1da      	bne.n	800959a <create_chain+0x68>
 80095e4:	2300      	movs	r3, #0
 80095e6:	e038      	b.n	800965a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80095e8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80095ea:	f04f 32ff 	mov.w	r2, #4294967295
 80095ee:	69f9      	ldr	r1, [r7, #28]
 80095f0:	6938      	ldr	r0, [r7, #16]
 80095f2:	f7ff fe82 	bl	80092fa <put_fat>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <create_chain+0xe2>
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d006      	beq.n	8009614 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009606:	69fa      	ldr	r2, [r7, #28]
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6938      	ldr	r0, [r7, #16]
 800960c:	f7ff fe75 	bl	80092fa <put_fat>
 8009610:	4603      	mov	r3, r0
 8009612:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009614:	7dfb      	ldrb	r3, [r7, #23]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d116      	bne.n	8009648 <create_chain+0x116>
		fs->last_clst = ncl;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	69fa      	ldr	r2, [r7, #28]
 800961e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	69da      	ldr	r2, [r3, #28]
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	3b02      	subs	r3, #2
 800962a:	429a      	cmp	r2, r3
 800962c:	d804      	bhi.n	8009638 <create_chain+0x106>
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	1e5a      	subs	r2, r3, #1
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	791b      	ldrb	r3, [r3, #4]
 800963c:	f043 0301 	orr.w	r3, r3, #1
 8009640:	b2da      	uxtb	r2, r3
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	711a      	strb	r2, [r3, #4]
 8009646:	e007      	b.n	8009658 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d102      	bne.n	8009654 <create_chain+0x122>
 800964e:	f04f 33ff 	mov.w	r3, #4294967295
 8009652:	e000      	b.n	8009656 <create_chain+0x124>
 8009654:	2301      	movs	r3, #1
 8009656:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009658:	69fb      	ldr	r3, [r7, #28]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3720      	adds	r7, #32
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b086      	sub	sp, #24
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009678:	d204      	bcs.n	8009684 <dir_sdi+0x22>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	f003 031f 	and.w	r3, r3, #31
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009684:	2302      	movs	r3, #2
 8009686:	e071      	b.n	800976c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d106      	bne.n	80096a8 <dir_sdi+0x46>
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d902      	bls.n	80096a8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10c      	bne.n	80096c8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	095b      	lsrs	r3, r3, #5
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	8912      	ldrh	r2, [r2, #8]
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d301      	bcc.n	80096be <dir_sdi+0x5c>
 80096ba:	2302      	movs	r3, #2
 80096bc:	e056      	b.n	800976c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	61da      	str	r2, [r3, #28]
 80096c6:	e02d      	b.n	8009724 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	895b      	ldrh	r3, [r3, #10]
 80096cc:	461a      	mov	r2, r3
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	899b      	ldrh	r3, [r3, #12]
 80096d2:	fb02 f303 	mul.w	r3, r2, r3
 80096d6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096d8:	e019      	b.n	800970e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6979      	ldr	r1, [r7, #20]
 80096de:	4618      	mov	r0, r3
 80096e0:	f7ff fd37 	bl	8009152 <get_fat>
 80096e4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ec:	d101      	bne.n	80096f2 <dir_sdi+0x90>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e03c      	b.n	800976c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d904      	bls.n	8009702 <dir_sdi+0xa0>
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d301      	bcc.n	8009706 <dir_sdi+0xa4>
 8009702:	2302      	movs	r3, #2
 8009704:	e032      	b.n	800976c <dir_sdi+0x10a>
			ofs -= csz;
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	429a      	cmp	r2, r3
 8009714:	d2e1      	bcs.n	80096da <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009716:	6979      	ldr	r1, [r7, #20]
 8009718:	6938      	ldr	r0, [r7, #16]
 800971a:	f7ff fcfb 	bl	8009114 <clust2sect>
 800971e:	4602      	mov	r2, r0
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <dir_sdi+0xd4>
 8009732:	2302      	movs	r3, #2
 8009734:	e01a      	b.n	800976c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	69da      	ldr	r2, [r3, #28]
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	899b      	ldrh	r3, [r3, #12]
 800973e:	4619      	mov	r1, r3
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	fbb3 f3f1 	udiv	r3, r3, r1
 8009746:	441a      	add	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	899b      	ldrh	r3, [r3, #12]
 8009756:	461a      	mov	r2, r3
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	fbb3 f0f2 	udiv	r0, r3, r2
 800975e:	fb00 f202 	mul.w	r2, r0, r2
 8009762:	1a9b      	subs	r3, r3, r2
 8009764:	18ca      	adds	r2, r1, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	3320      	adds	r3, #32
 800978a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <dir_next+0x28>
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800979a:	d301      	bcc.n	80097a0 <dir_next+0x2c>
 800979c:	2304      	movs	r3, #4
 800979e:	e0bb      	b.n	8009918 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	899b      	ldrh	r3, [r3, #12]
 80097a4:	461a      	mov	r2, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80097ac:	fb01 f202 	mul.w	r2, r1, r2
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f040 809d 	bne.w	80098f2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10b      	bne.n	80097e2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	8912      	ldrh	r2, [r2, #8]
 80097d2:	4293      	cmp	r3, r2
 80097d4:	f0c0 808d 	bcc.w	80098f2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	61da      	str	r2, [r3, #28]
 80097de:	2304      	movs	r3, #4
 80097e0:	e09a      	b.n	8009918 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	899b      	ldrh	r3, [r3, #12]
 80097e6:	461a      	mov	r2, r3
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	8952      	ldrh	r2, [r2, #10]
 80097f2:	3a01      	subs	r2, #1
 80097f4:	4013      	ands	r3, r2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d17b      	bne.n	80098f2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f7ff fca5 	bl	8009152 <get_fat>
 8009808:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d801      	bhi.n	8009814 <dir_next+0xa0>
 8009810:	2302      	movs	r3, #2
 8009812:	e081      	b.n	8009918 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d101      	bne.n	8009820 <dir_next+0xac>
 800981c:	2301      	movs	r3, #1
 800981e:	e07b      	b.n	8009918 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	429a      	cmp	r2, r3
 8009828:	d359      	bcc.n	80098de <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d104      	bne.n	800983a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	61da      	str	r2, [r3, #28]
 8009836:	2304      	movs	r3, #4
 8009838:	e06e      	b.n	8009918 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	f7ff fe75 	bl	8009532 <create_chain>
 8009848:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <dir_next+0xe0>
 8009850:	2307      	movs	r3, #7
 8009852:	e061      	b.n	8009918 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d101      	bne.n	800985e <dir_next+0xea>
 800985a:	2302      	movs	r3, #2
 800985c:	e05c      	b.n	8009918 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009864:	d101      	bne.n	800986a <dir_next+0xf6>
 8009866:	2301      	movs	r3, #1
 8009868:	e056      	b.n	8009918 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f7ff fb70 	bl	8008f50 <sync_window>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <dir_next+0x106>
 8009876:	2301      	movs	r3, #1
 8009878:	e04e      	b.n	8009918 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	899b      	ldrh	r3, [r3, #12]
 8009884:	461a      	mov	r2, r3
 8009886:	2100      	movs	r1, #0
 8009888:	f7ff fad7 	bl	8008e3a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800988c:	2300      	movs	r3, #0
 800988e:	613b      	str	r3, [r7, #16]
 8009890:	6979      	ldr	r1, [r7, #20]
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7ff fc3e 	bl	8009114 <clust2sect>
 8009898:	4602      	mov	r2, r0
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	639a      	str	r2, [r3, #56]	; 0x38
 800989e:	e012      	b.n	80098c6 <dir_next+0x152>
						fs->wflag = 1;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2201      	movs	r2, #1
 80098a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff fb52 	bl	8008f50 <sync_window>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <dir_next+0x142>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e030      	b.n	8009918 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	3301      	adds	r3, #1
 80098ba:	613b      	str	r3, [r7, #16]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	639a      	str	r2, [r3, #56]	; 0x38
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	895b      	ldrh	r3, [r3, #10]
 80098ca:	461a      	mov	r2, r3
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d3e6      	bcc.n	80098a0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	1ad2      	subs	r2, r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80098e4:	6979      	ldr	r1, [r7, #20]
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f7ff fc14 	bl	8009114 <clust2sect>
 80098ec:	4602      	mov	r2, r0
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	899b      	ldrh	r3, [r3, #12]
 8009902:	461a      	mov	r2, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	fbb3 f0f2 	udiv	r0, r3, r2
 800990a:	fb00 f202 	mul.w	r2, r0, r2
 800990e:	1a9b      	subs	r3, r3, r2
 8009910:	18ca      	adds	r2, r1, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009930:	2100      	movs	r1, #0
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff fe95 	bl	8009662 <dir_sdi>
 8009938:	4603      	mov	r3, r0
 800993a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800993c:	7dfb      	ldrb	r3, [r7, #23]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d12b      	bne.n	800999a <dir_alloc+0x7a>
		n = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	4619      	mov	r1, r3
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7ff fb43 	bl	8008fd8 <move_window>
 8009952:	4603      	mov	r3, r0
 8009954:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d11d      	bne.n	8009998 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2be5      	cmp	r3, #229	; 0xe5
 8009964:	d004      	beq.n	8009970 <dir_alloc+0x50>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d107      	bne.n	8009980 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	3301      	adds	r3, #1
 8009974:	613b      	str	r3, [r7, #16]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	429a      	cmp	r2, r3
 800997c:	d102      	bne.n	8009984 <dir_alloc+0x64>
 800997e:	e00c      	b.n	800999a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009980:	2300      	movs	r3, #0
 8009982:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009984:	2101      	movs	r1, #1
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff fef4 	bl	8009774 <dir_next>
 800998c:	4603      	mov	r3, r0
 800998e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0d7      	beq.n	8009946 <dir_alloc+0x26>
 8009996:	e000      	b.n	800999a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009998:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	2b04      	cmp	r3, #4
 800999e:	d101      	bne.n	80099a4 <dir_alloc+0x84>
 80099a0:	2307      	movs	r3, #7
 80099a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	331a      	adds	r3, #26
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff f998 	bl	8008cf4 <ld_word>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <pick_lfn+0x1e>
 80099ca:	2300      	movs	r3, #0
 80099cc:	e04d      	b.n	8009a6a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099d6:	1e5a      	subs	r2, r3, #1
 80099d8:	4613      	mov	r3, r2
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80099e4:	2301      	movs	r3, #1
 80099e6:	81fb      	strh	r3, [r7, #14]
 80099e8:	2300      	movs	r3, #0
 80099ea:	613b      	str	r3, [r7, #16]
 80099ec:	e028      	b.n	8009a40 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80099ee:	4a21      	ldr	r2, [pc, #132]	; (8009a74 <pick_lfn+0xc4>)
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	4413      	add	r3, r2
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	4413      	add	r3, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff f979 	bl	8008cf4 <ld_word>
 8009a02:	4603      	mov	r3, r0
 8009a04:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009a06:	89fb      	ldrh	r3, [r7, #14]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00f      	beq.n	8009a2c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2bfe      	cmp	r3, #254	; 0xfe
 8009a10:	d901      	bls.n	8009a16 <pick_lfn+0x66>
 8009a12:	2300      	movs	r3, #0
 8009a14:	e029      	b.n	8009a6a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009a16:	89bb      	ldrh	r3, [r7, #12]
 8009a18:	81fb      	strh	r3, [r7, #14]
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	617a      	str	r2, [r7, #20]
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	4413      	add	r3, r2
 8009a26:	89fa      	ldrh	r2, [r7, #14]
 8009a28:	801a      	strh	r2, [r3, #0]
 8009a2a:	e006      	b.n	8009a3a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009a2c:	89bb      	ldrh	r3, [r7, #12]
 8009a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d001      	beq.n	8009a3a <pick_lfn+0x8a>
 8009a36:	2300      	movs	r3, #0
 8009a38:	e017      	b.n	8009a6a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	613b      	str	r3, [r7, #16]
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2b0c      	cmp	r3, #12
 8009a44:	d9d3      	bls.n	80099ee <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00a      	beq.n	8009a68 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2bfe      	cmp	r3, #254	; 0xfe
 8009a56:	d901      	bls.n	8009a5c <pick_lfn+0xac>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e006      	b.n	8009a6a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	4413      	add	r3, r2
 8009a64:	2200      	movs	r2, #0
 8009a66:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009a68:	2301      	movs	r3, #1
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	0801ad6c 	.word	0x0801ad6c

08009a78 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009a84:	230b      	movs	r3, #11
 8009a86:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	0852      	lsrs	r2, r2, #1
 8009a8e:	01db      	lsls	r3, r3, #7
 8009a90:	4313      	orrs	r3, r2
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	1c59      	adds	r1, r3, #1
 8009a98:	6079      	str	r1, [r7, #4]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	60bb      	str	r3, [r7, #8]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1ed      	bne.n	8009a88 <sum_sfn+0x10>
	return sum;
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b086      	sub	sp, #24
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8009ace:	23ff      	movs	r3, #255	; 0xff
 8009ad0:	757b      	strb	r3, [r7, #21]
 8009ad2:	23ff      	movs	r3, #255	; 0xff
 8009ad4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8009ad6:	e081      	b.n	8009bdc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	4619      	mov	r1, r3
 8009ade:	6938      	ldr	r0, [r7, #16]
 8009ae0:	f7ff fa7a 	bl	8008fd8 <move_window>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d17c      	bne.n	8009be8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8009af6:	7dbb      	ldrb	r3, [r7, #22]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009afc:	2304      	movs	r3, #4
 8009afe:	75fb      	strb	r3, [r7, #23]
 8009b00:	e077      	b.n	8009bf2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	330b      	adds	r3, #11
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b0e:	73fb      	strb	r3, [r7, #15]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7bfa      	ldrb	r2, [r7, #15]
 8009b14:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009b16:	7dbb      	ldrb	r3, [r7, #22]
 8009b18:	2be5      	cmp	r3, #229	; 0xe5
 8009b1a:	d00e      	beq.n	8009b3a <dir_read+0x80>
 8009b1c:	7dbb      	ldrb	r3, [r7, #22]
 8009b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8009b20:	d00b      	beq.n	8009b3a <dir_read+0x80>
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	f023 0320 	bic.w	r3, r3, #32
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	bf0c      	ite	eq
 8009b2c:	2301      	moveq	r3, #1
 8009b2e:	2300      	movne	r3, #0
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	461a      	mov	r2, r3
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d002      	beq.n	8009b40 <dir_read+0x86>
				ord = 0xFF;
 8009b3a:	23ff      	movs	r3, #255	; 0xff
 8009b3c:	757b      	strb	r3, [r7, #21]
 8009b3e:	e044      	b.n	8009bca <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	2b0f      	cmp	r3, #15
 8009b44:	d12f      	bne.n	8009ba6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009b46:	7dbb      	ldrb	r3, [r7, #22]
 8009b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00d      	beq.n	8009b6c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	7b5b      	ldrb	r3, [r3, #13]
 8009b56:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009b58:	7dbb      	ldrb	r3, [r7, #22]
 8009b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b5e:	75bb      	strb	r3, [r7, #22]
 8009b60:	7dbb      	ldrb	r3, [r7, #22]
 8009b62:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	695a      	ldr	r2, [r3, #20]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009b6c:	7dba      	ldrb	r2, [r7, #22]
 8009b6e:	7d7b      	ldrb	r3, [r7, #21]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d115      	bne.n	8009ba0 <dir_read+0xe6>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	330d      	adds	r3, #13
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	7d3a      	ldrb	r2, [r7, #20]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d10e      	bne.n	8009ba0 <dir_read+0xe6>
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	691a      	ldr	r2, [r3, #16]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	f7ff ff0f 	bl	80099b0 <pick_lfn>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <dir_read+0xe6>
 8009b98:	7d7b      	ldrb	r3, [r7, #21]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	e000      	b.n	8009ba2 <dir_read+0xe8>
 8009ba0:	23ff      	movs	r3, #255	; 0xff
 8009ba2:	757b      	strb	r3, [r7, #21]
 8009ba4:	e011      	b.n	8009bca <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8009ba6:	7d7b      	ldrb	r3, [r7, #21]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d109      	bne.n	8009bc0 <dir_read+0x106>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff ff61 	bl	8009a78 <sum_sfn>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	7d3b      	ldrb	r3, [r7, #20]
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d015      	beq.n	8009bec <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8009bc8:	e010      	b.n	8009bec <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009bca:	2100      	movs	r1, #0
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff fdd1 	bl	8009774 <dir_next>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d109      	bne.n	8009bf0 <dir_read+0x136>
	while (dp->sect) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f47f af79 	bne.w	8009ad8 <dir_read+0x1e>
 8009be6:	e004      	b.n	8009bf2 <dir_read+0x138>
		if (res != FR_OK) break;
 8009be8:	bf00      	nop
 8009bea:	e002      	b.n	8009bf2 <dir_read+0x138>
					break;
 8009bec:	bf00      	nop
 8009bee:	e000      	b.n	8009bf2 <dir_read+0x138>
		if (res != FR_OK) break;
 8009bf0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <dir_read+0x144>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	61da      	str	r2, [r3, #28]
	return res;
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009c10:	f04f 33ff 	mov.w	r3, #4294967295
 8009c14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d031      	beq.n	8009c82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	e002      	b.n	8009c2c <get_ldnumber+0x24>
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	617b      	str	r3, [r7, #20]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b1f      	cmp	r3, #31
 8009c32:	d903      	bls.n	8009c3c <get_ldnumber+0x34>
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b3a      	cmp	r3, #58	; 0x3a
 8009c3a:	d1f4      	bne.n	8009c26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b3a      	cmp	r3, #58	; 0x3a
 8009c42:	d11c      	bne.n	8009c7e <get_ldnumber+0x76>
			tp = *path;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	60fa      	str	r2, [r7, #12]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	3b30      	subs	r3, #48	; 0x30
 8009c54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2b09      	cmp	r3, #9
 8009c5a:	d80e      	bhi.n	8009c7a <get_ldnumber+0x72>
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d10a      	bne.n	8009c7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d107      	bne.n	8009c7a <get_ldnumber+0x72>
					vol = (int)i;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	3301      	adds	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	e002      	b.n	8009c84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009c7e:	2300      	movs	r3, #0
 8009c80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009c82:	693b      	ldr	r3, [r7, #16]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	371c      	adds	r7, #28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	70da      	strb	r2, [r3, #3]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7ff f994 	bl	8008fd8 <move_window>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <check_fs+0x2a>
 8009cb6:	2304      	movs	r3, #4
 8009cb8:	e038      	b.n	8009d2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	333c      	adds	r3, #60	; 0x3c
 8009cbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7ff f816 	bl	8008cf4 <ld_word>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d001      	beq.n	8009cd8 <check_fs+0x48>
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e029      	b.n	8009d2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cde:	2be9      	cmp	r3, #233	; 0xe9
 8009ce0:	d009      	beq.n	8009cf6 <check_fs+0x66>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ce8:	2beb      	cmp	r3, #235	; 0xeb
 8009cea:	d11e      	bne.n	8009d2a <check_fs+0x9a>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cf2:	2b90      	cmp	r3, #144	; 0x90
 8009cf4:	d119      	bne.n	8009d2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	333c      	adds	r3, #60	; 0x3c
 8009cfa:	3336      	adds	r3, #54	; 0x36
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff f811 	bl	8008d24 <ld_dword>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d08:	4a0a      	ldr	r2, [pc, #40]	; (8009d34 <check_fs+0xa4>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d101      	bne.n	8009d12 <check_fs+0x82>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e00c      	b.n	8009d2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	333c      	adds	r3, #60	; 0x3c
 8009d16:	3352      	adds	r3, #82	; 0x52
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff f803 	bl	8008d24 <ld_dword>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4a05      	ldr	r2, [pc, #20]	; (8009d38 <check_fs+0xa8>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d101      	bne.n	8009d2a <check_fs+0x9a>
 8009d26:	2300      	movs	r3, #0
 8009d28:	e000      	b.n	8009d2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009d2a:	2302      	movs	r3, #2
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	00544146 	.word	0x00544146
 8009d38:	33544146 	.word	0x33544146

08009d3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b096      	sub	sp, #88	; 0x58
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	4613      	mov	r3, r2
 8009d48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff ff59 	bl	8009c08 <get_ldnumber>
 8009d56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	da01      	bge.n	8009d62 <find_volume+0x26>
 8009d5e:	230b      	movs	r3, #11
 8009d60:	e26a      	b.n	800a238 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009d62:	4aa3      	ldr	r2, [pc, #652]	; (8009ff0 <find_volume+0x2b4>)
 8009d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <find_volume+0x3a>
 8009d72:	230c      	movs	r3, #12
 8009d74:	e260      	b.n	800a238 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8009d76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d78:	f7ff f895 	bl	8008ea6 <lock_fs>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <find_volume+0x4a>
 8009d82:	230f      	movs	r3, #15
 8009d84:	e258      	b.n	800a238 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01a      	beq.n	8009dd2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe ff09 	bl	8008bb8 <disk_status>
 8009da6:	4603      	mov	r3, r0
 8009da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10c      	bne.n	8009dd2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009db8:	79fb      	ldrb	r3, [r7, #7]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d007      	beq.n	8009dce <find_volume+0x92>
 8009dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009dca:	230a      	movs	r3, #10
 8009dcc:	e234      	b.n	800a238 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e232      	b.n	800a238 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	785b      	ldrb	r3, [r3, #1]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe ff01 	bl	8008bec <disk_initialize>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009df0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e21b      	b.n	800a238 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d007      	beq.n	8009e16 <find_volume+0xda>
 8009e06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009e12:	230a      	movs	r3, #10
 8009e14:	e210      	b.n	800a238 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e18:	7858      	ldrb	r0, [r3, #1]
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1c:	330c      	adds	r3, #12
 8009e1e:	461a      	mov	r2, r3
 8009e20:	2102      	movs	r1, #2
 8009e22:	f7fe ff49 	bl	8008cb8 <disk_ioctl>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <find_volume+0xf4>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e203      	b.n	800a238 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	899b      	ldrh	r3, [r3, #12]
 8009e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e38:	d80d      	bhi.n	8009e56 <find_volume+0x11a>
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	899b      	ldrh	r3, [r3, #12]
 8009e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e42:	d308      	bcc.n	8009e56 <find_volume+0x11a>
 8009e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e46:	899b      	ldrh	r3, [r3, #12]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	899b      	ldrh	r3, [r3, #12]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	4013      	ands	r3, r2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <find_volume+0x11e>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e1ee      	b.n	800a238 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009e5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e62:	f7ff ff15 	bl	8009c90 <check_fs>
 8009e66:	4603      	mov	r3, r0
 8009e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d149      	bne.n	8009f08 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e74:	2300      	movs	r3, #0
 8009e76:	643b      	str	r3, [r7, #64]	; 0x40
 8009e78:	e01e      	b.n	8009eb8 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e82:	011b      	lsls	r3, r3, #4
 8009e84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009e88:	4413      	add	r3, r2
 8009e8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	3304      	adds	r3, #4
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d006      	beq.n	8009ea4 <find_volume+0x168>
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	3308      	adds	r3, #8
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe ff42 	bl	8008d24 <ld_dword>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	e000      	b.n	8009ea6 <find_volume+0x16a>
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	3358      	adds	r3, #88	; 0x58
 8009eac:	443b      	add	r3, r7
 8009eae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8009eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d9dd      	bls.n	8009e7a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <find_volume+0x192>
 8009ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	3358      	adds	r3, #88	; 0x58
 8009ed4:	443b      	add	r3, r7
 8009ed6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009eda:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d005      	beq.n	8009eee <find_volume+0x1b2>
 8009ee2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ee6:	f7ff fed3 	bl	8009c90 <check_fs>
 8009eea:	4603      	mov	r3, r0
 8009eec:	e000      	b.n	8009ef0 <find_volume+0x1b4>
 8009eee:	2303      	movs	r3, #3
 8009ef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d905      	bls.n	8009f08 <find_volume+0x1cc>
 8009efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009efe:	3301      	adds	r3, #1
 8009f00:	643b      	str	r3, [r7, #64]	; 0x40
 8009f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d9e2      	bls.n	8009ece <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f0c:	2b04      	cmp	r3, #4
 8009f0e:	d101      	bne.n	8009f14 <find_volume+0x1d8>
 8009f10:	2301      	movs	r3, #1
 8009f12:	e191      	b.n	800a238 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d901      	bls.n	8009f20 <find_volume+0x1e4>
 8009f1c:	230d      	movs	r3, #13
 8009f1e:	e18b      	b.n	800a238 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f22:	333c      	adds	r3, #60	; 0x3c
 8009f24:	330b      	adds	r3, #11
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fee4 	bl	8008cf4 <ld_word>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	461a      	mov	r2, r3
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	899b      	ldrh	r3, [r3, #12]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d001      	beq.n	8009f3c <find_volume+0x200>
 8009f38:	230d      	movs	r3, #13
 8009f3a:	e17d      	b.n	800a238 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3e:	333c      	adds	r3, #60	; 0x3c
 8009f40:	3316      	adds	r3, #22
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fed6 	bl	8008cf4 <ld_word>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d106      	bne.n	8009f60 <find_volume+0x224>
 8009f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f54:	333c      	adds	r3, #60	; 0x3c
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fee3 	bl	8008d24 <ld_dword>
 8009f5e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f64:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f68:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	789b      	ldrb	r3, [r3, #2]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d005      	beq.n	8009f84 <find_volume+0x248>
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	789b      	ldrb	r3, [r3, #2]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d001      	beq.n	8009f84 <find_volume+0x248>
 8009f80:	230d      	movs	r3, #13
 8009f82:	e159      	b.n	800a238 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f86:	789b      	ldrb	r3, [r3, #2]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f8c:	fb02 f303 	mul.w	r3, r2, r3
 8009f90:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa0:	895b      	ldrh	r3, [r3, #10]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d008      	beq.n	8009fb8 <find_volume+0x27c>
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	895b      	ldrh	r3, [r3, #10]
 8009faa:	461a      	mov	r2, r3
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	895b      	ldrh	r3, [r3, #10]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <find_volume+0x280>
 8009fb8:	230d      	movs	r3, #13
 8009fba:	e13d      	b.n	800a238 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbe:	333c      	adds	r3, #60	; 0x3c
 8009fc0:	3311      	adds	r3, #17
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe fe96 	bl	8008cf4 <ld_word>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	891b      	ldrh	r3, [r3, #8]
 8009fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fd6:	8992      	ldrh	r2, [r2, #12]
 8009fd8:	0952      	lsrs	r2, r2, #5
 8009fda:	b292      	uxth	r2, r2
 8009fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fe0:	fb01 f202 	mul.w	r2, r1, r2
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d003      	beq.n	8009ff4 <find_volume+0x2b8>
 8009fec:	230d      	movs	r3, #13
 8009fee:	e123      	b.n	800a238 <find_volume+0x4fc>
 8009ff0:	20002dac 	.word	0x20002dac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	333c      	adds	r3, #60	; 0x3c
 8009ff8:	3313      	adds	r3, #19
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe fe7a 	bl	8008cf4 <ld_word>
 800a000:	4603      	mov	r3, r0
 800a002:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <find_volume+0x2dc>
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	333c      	adds	r3, #60	; 0x3c
 800a00e:	3320      	adds	r3, #32
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe fe87 	bl	8008d24 <ld_dword>
 800a016:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	333c      	adds	r3, #60	; 0x3c
 800a01c:	330e      	adds	r3, #14
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe fe68 	bl	8008cf4 <ld_word>
 800a024:	4603      	mov	r3, r0
 800a026:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a028:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <find_volume+0x2f6>
 800a02e:	230d      	movs	r3, #13
 800a030:	e102      	b.n	800a238 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a032:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a036:	4413      	add	r3, r2
 800a038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a03a:	8911      	ldrh	r1, [r2, #8]
 800a03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a03e:	8992      	ldrh	r2, [r2, #12]
 800a040:	0952      	lsrs	r2, r2, #5
 800a042:	b292      	uxth	r2, r2
 800a044:	fbb1 f2f2 	udiv	r2, r1, r2
 800a048:	b292      	uxth	r2, r2
 800a04a:	4413      	add	r3, r2
 800a04c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a04e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a052:	429a      	cmp	r2, r3
 800a054:	d201      	bcs.n	800a05a <find_volume+0x31e>
 800a056:	230d      	movs	r3, #13
 800a058:	e0ee      	b.n	800a238 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a05a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a062:	8952      	ldrh	r2, [r2, #10]
 800a064:	fbb3 f3f2 	udiv	r3, r3, r2
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <find_volume+0x338>
 800a070:	230d      	movs	r3, #13
 800a072:	e0e1      	b.n	800a238 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800a074:	2303      	movs	r3, #3
 800a076:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a080:	4293      	cmp	r3, r2
 800a082:	d802      	bhi.n	800a08a <find_volume+0x34e>
 800a084:	2302      	movs	r3, #2
 800a086:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a090:	4293      	cmp	r3, r2
 800a092:	d802      	bhi.n	800a09a <find_volume+0x35e>
 800a094:	2301      	movs	r3, #1
 800a096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	1c9a      	adds	r2, r3, #2
 800a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0a6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a0a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a0aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0ac:	441a      	add	r2, r3
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b0:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800a0b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	441a      	add	r2, r3
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ba:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800a0bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d11e      	bne.n	800a102 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	333c      	adds	r3, #60	; 0x3c
 800a0c8:	332a      	adds	r3, #42	; 0x2a
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fe12 	bl	8008cf4 <ld_word>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <find_volume+0x39e>
 800a0d6:	230d      	movs	r3, #13
 800a0d8:	e0ae      	b.n	800a238 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0dc:	891b      	ldrh	r3, [r3, #8]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <find_volume+0x3aa>
 800a0e2:	230d      	movs	r3, #13
 800a0e4:	e0a8      	b.n	800a238 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e8:	333c      	adds	r3, #60	; 0x3c
 800a0ea:	332c      	adds	r3, #44	; 0x2c
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fe19 	bl	8008d24 <ld_dword>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a100:	e01f      	b.n	800a142 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	891b      	ldrh	r3, [r3, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <find_volume+0x3d2>
 800a10a:	230d      	movs	r3, #13
 800a10c:	e094      	b.n	800a238 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a114:	441a      	add	r2, r3
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a11a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d103      	bne.n	800a12a <find_volume+0x3ee>
 800a122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	e00a      	b.n	800a140 <find_volume+0x404>
 800a12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12c:	6a1a      	ldr	r2, [r3, #32]
 800a12e:	4613      	mov	r3, r2
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	4413      	add	r3, r2
 800a134:	085a      	lsrs	r2, r3, #1
 800a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a140:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a148:	899b      	ldrh	r3, [r3, #12]
 800a14a:	4619      	mov	r1, r3
 800a14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a14e:	440b      	add	r3, r1
 800a150:	3b01      	subs	r3, #1
 800a152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a154:	8989      	ldrh	r1, [r1, #12]
 800a156:	fbb3 f3f1 	udiv	r3, r3, r1
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d201      	bcs.n	800a162 <find_volume+0x426>
 800a15e:	230d      	movs	r3, #13
 800a160:	e06a      	b.n	800a238 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a164:	f04f 32ff 	mov.w	r2, #4294967295
 800a168:	61da      	str	r2, [r3, #28]
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	69da      	ldr	r2, [r3, #28]
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	2280      	movs	r2, #128	; 0x80
 800a176:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d149      	bne.n	800a214 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	333c      	adds	r3, #60	; 0x3c
 800a184:	3330      	adds	r3, #48	; 0x30
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe fdb4 	bl	8008cf4 <ld_word>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d140      	bne.n	800a214 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a194:	3301      	adds	r3, #1
 800a196:	4619      	mov	r1, r3
 800a198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a19a:	f7fe ff1d 	bl	8008fd8 <move_window>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d137      	bne.n	800a214 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ac:	333c      	adds	r3, #60	; 0x3c
 800a1ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fd9e 	bl	8008cf4 <ld_word>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d127      	bne.n	800a214 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	333c      	adds	r3, #60	; 0x3c
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe fdab 	bl	8008d24 <ld_dword>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	4a1b      	ldr	r2, [pc, #108]	; (800a240 <find_volume+0x504>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d11e      	bne.n	800a214 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d8:	333c      	adds	r3, #60	; 0x3c
 800a1da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fe fda0 	bl	8008d24 <ld_dword>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	4a17      	ldr	r2, [pc, #92]	; (800a244 <find_volume+0x508>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d113      	bne.n	800a214 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	333c      	adds	r3, #60	; 0x3c
 800a1f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fe fd95 	bl	8008d24 <ld_dword>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a202:	333c      	adds	r3, #60	; 0x3c
 800a204:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fe fd8b 	bl	8008d24 <ld_dword>
 800a20e:	4602      	mov	r2, r0
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a216:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a21a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <find_volume+0x50c>)
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	3301      	adds	r3, #1
 800a222:	b29a      	uxth	r2, r3
 800a224:	4b08      	ldr	r3, [pc, #32]	; (800a248 <find_volume+0x50c>)
 800a226:	801a      	strh	r2, [r3, #0]
 800a228:	4b07      	ldr	r3, [pc, #28]	; (800a248 <find_volume+0x50c>)
 800a22a:	881a      	ldrh	r2, [r3, #0]
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a230:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a232:	f7fe fe69 	bl	8008f08 <clear_lock>
#endif
	return FR_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3758      	adds	r7, #88	; 0x58
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	41615252 	.word	0x41615252
 800a244:	61417272 	.word	0x61417272
 800a248:	20002db0 	.word	0x20002db0

0800a24c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a25e:	f107 0310 	add.w	r3, r7, #16
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff fcd0 	bl	8009c08 <get_ldnumber>
 800a268:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	da01      	bge.n	800a274 <f_mount+0x28>
 800a270:	230b      	movs	r3, #11
 800a272:	e048      	b.n	800a306 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a274:	4a26      	ldr	r2, [pc, #152]	; (800a310 <f_mount+0xc4>)
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a27c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00f      	beq.n	800a2a4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a284:	69b8      	ldr	r0, [r7, #24]
 800a286:	f7fe fe3f 	bl	8008f08 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 ff98 	bl	800b1c4 <ff_del_syncobj>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <f_mount+0x52>
 800a29a:	2302      	movs	r3, #2
 800a29c:	e033      	b.n	800a306 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00f      	beq.n	800a2ca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3314      	adds	r3, #20
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	f000 ff62 	bl	800b184 <ff_cre_syncobj>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <f_mount+0x7e>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e01d      	b.n	800a306 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	4910      	ldr	r1, [pc, #64]	; (800a310 <f_mount+0xc4>)
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <f_mount+0x94>
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d001      	beq.n	800a2e4 <f_mount+0x98>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	e010      	b.n	800a306 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a2e4:	f107 010c 	add.w	r1, r7, #12
 800a2e8:	f107 0308 	add.w	r3, r7, #8
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff fd24 	bl	8009d3c <find_volume>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	7dfa      	ldrb	r2, [r7, #23]
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe fde7 	bl	8008ed2 <unlock_fs>
 800a304:	7dfb      	ldrb	r3, [r7, #23]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20002dac 	.word	0x20002dac

0800a314 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Path name of the logical drive number */
	TCHAR* label,		/* Pointer to a buffer to return the volume label */
	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b096      	sub	sp, #88	; 0x58
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
#if _LFN_UNICODE || _FS_EXFAT
	WCHAR w;
#endif

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a320:	f107 0114 	add.w	r1, r7, #20
 800a324:	f107 030c 	add.w	r3, r7, #12
 800a328:	2200      	movs	r2, #0
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff fd06 	bl	8009d3c <find_volume>
 800a330:	4603      	mov	r3, r0
 800a332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Get volume label */
	if (res == FR_OK && label) {
 800a336:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d150      	bne.n	800a3e0 <f_getlabel+0xcc>
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d04d      	beq.n	800a3e0 <f_getlabel+0xcc>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	61bb      	str	r3, [r7, #24]
 800a348:	2300      	movs	r3, #0
 800a34a:	623b      	str	r3, [r7, #32]
		res = dir_sdi(&dj, 0);
 800a34c:	f107 0318 	add.w	r3, r7, #24
 800a350:	2100      	movs	r1, #0
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff f985 	bl	8009662 <dir_sdi>
 800a358:	4603      	mov	r3, r0
 800a35a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) {
 800a35e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a362:	2b00      	cmp	r3, #0
 800a364:	d132      	bne.n	800a3cc <f_getlabel+0xb8>
		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
 800a366:	f107 0318 	add.w	r3, r7, #24
 800a36a:	2101      	movs	r1, #1
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff fba4 	bl	8009aba <dir_read>
 800a372:	4603      	mov	r3, r0
 800a374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 	if (res == FR_OK) {
 800a378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d125      	bne.n	800a3cc <f_getlabel+0xb8>
					}
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
 800a380:	2300      	movs	r3, #0
 800a382:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a386:	653b      	str	r3, [r7, #80]	; 0x50
						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
							w = w << 8 | dj.dir[si++];
						}
						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
#else
						label[di++] = dj.dir[si++];
 800a388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a38c:	1c59      	adds	r1, r3, #1
 800a38e:	6539      	str	r1, [r7, #80]	; 0x50
 800a390:	441a      	add	r2, r3
 800a392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a394:	1c59      	adds	r1, r3, #1
 800a396:	64f9      	str	r1, [r7, #76]	; 0x4c
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	440b      	add	r3, r1
 800a39c:	7812      	ldrb	r2, [r2, #0]
 800a39e:	701a      	strb	r2, [r3, #0]
#endif
					} while (di < 11);
 800a3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3a2:	2b0a      	cmp	r3, #10
 800a3a4:	d9f0      	bls.n	800a388 <f_getlabel+0x74>
					do {				/* Truncate trailing spaces */
						label[di] = 0;
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3aa:	4413      	add	r3, r2
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	701a      	strb	r2, [r3, #0]
						if (di == 0) break;
 800a3b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d009      	beq.n	800a3ca <f_getlabel+0xb6>
					} while (label[--di] == ' ');
 800a3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c0:	4413      	add	r3, r2
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d0ee      	beq.n	800a3a6 <f_getlabel+0x92>
 800a3c8:	e000      	b.n	800a3cc <f_getlabel+0xb8>
						if (di == 0) break;
 800a3ca:	bf00      	nop
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
 800a3cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3d0:	2b04      	cmp	r3, #4
 800a3d2:	d105      	bne.n	800a3e0 <f_getlabel+0xcc>
			label[0] = 0;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	701a      	strb	r2, [r3, #0]
			res = FR_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
 800a3e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d129      	bne.n	800a43c <f_getlabel+0x128>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d026      	beq.n	800a43c <f_getlabel+0x128>
		res = move_window(fs, fs->volbase);
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	f7fe fdee 	bl	8008fd8 <move_window>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) {
 800a402:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a406:	2b00      	cmp	r3, #0
 800a408:	d118      	bne.n	800a43c <f_getlabel+0x128>
			switch (fs->fs_type) {
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b03      	cmp	r3, #3
 800a410:	d004      	beq.n	800a41c <f_getlabel+0x108>
 800a412:	2b04      	cmp	r3, #4
 800a414:	d105      	bne.n	800a422 <f_getlabel+0x10e>
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
 800a416:	2364      	movs	r3, #100	; 0x64
 800a418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a41a:	e004      	b.n	800a426 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;
 800a41c:	2343      	movs	r3, #67	; 0x43
 800a41e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a420:	e001      	b.n	800a426 <f_getlabel+0x112>

			default:
				di = BS_VolID;
 800a422:	2327      	movs	r3, #39	; 0x27
 800a424:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			*vsn = ld_dword(fs->win + di);
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42e:	4413      	add	r3, r2
 800a430:	4618      	mov	r0, r3
 800a432:	f7fe fc77 	bl	8008d24 <ld_dword>
 800a436:	4602      	mov	r2, r0
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	601a      	str	r2, [r3, #0]
		}
	}

	LEAVE_FF(fs, res);
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a442:	4611      	mov	r1, r2
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe fd44 	bl	8008ed2 <unlock_fs>
 800a44a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3758      	adds	r7, #88	; 0x58
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b09c      	sub	sp, #112	; 0x70
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
	WCHAR w;
	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";


	/* Get logical drive */
	res = find_volume(&label, &fs, FA_WRITE);
 800a460:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a464:	1d3b      	adds	r3, r7, #4
 800a466:	2202      	movs	r2, #2
 800a468:	4618      	mov	r0, r3
 800a46a:	f7ff fc67 	bl	8009d3c <find_volume>
 800a46e:	4603      	mov	r3, r0
 800a470:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a474:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d009      	beq.n	800a490 <f_setlabel+0x38>
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800a482:	4611      	mov	r1, r2
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe fd24 	bl	8008ed2 <unlock_fs>
 800a48a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a48e:	e100      	b.n	800a692 <f_setlabel+0x23a>
	dj.obj.fs = fs;
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Get length of given volume label */
	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
 800a494:	2300      	movs	r3, #0
 800a496:	663b      	str	r3, [r7, #96]	; 0x60
 800a498:	e002      	b.n	800a4a0 <f_setlabel+0x48>
 800a49a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a49c:	3301      	adds	r3, #1
 800a49e:	663b      	str	r3, [r7, #96]	; 0x60
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4a4:	4413      	add	r3, r2
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b1f      	cmp	r3, #31
 800a4aa:	d8f6      	bhi.n	800a49a <f_setlabel+0x42>
		}
		slen = j;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
 800a4ac:	e002      	b.n	800a4b4 <f_setlabel+0x5c>
 800a4ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	663b      	str	r3, [r7, #96]	; 0x60
 800a4b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d006      	beq.n	800a4c8 <f_setlabel+0x70>
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	4413      	add	r3, r2
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	2b20      	cmp	r3, #32
 800a4c6:	d0f2      	beq.n	800a4ae <f_setlabel+0x56>
		if (slen) {		/* Is there a volume label to be set? */
 800a4c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d071      	beq.n	800a5b2 <f_setlabel+0x15a>
			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	733b      	strb	r3, [r7, #12]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	667b      	str	r3, [r7, #100]	; 0x64
 800a4d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4d8:	66bb      	str	r3, [r7, #104]	; 0x68
			do {
#if _LFN_UNICODE
				w = ff_convert(ff_wtoupper(label[i++]), 0);
#else
				w = (BYTE)label[i++];
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4de:	1c59      	adds	r1, r3, #1
 800a4e0:	66b9      	str	r1, [r7, #104]	; 0x68
 800a4e2:	4413      	add	r3, r2
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				if (IsDBCS1(w)) {
					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
				}
#if _USE_LFN != 0
				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
 800a4ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 fd81 	bl	800aff8 <ff_convert>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 fdb9 	bl	800b070 <ff_wtoupper>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2100      	movs	r1, #0
 800a502:	4618      	mov	r0, r3
 800a504:	f000 fd78 	bl	800aff8 <ff_convert>
 800a508:	4603      	mov	r3, r0
 800a50a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
#else
				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 800a50e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a512:	2b00      	cmp	r3, #0
 800a514:	d012      	beq.n	800a53c <f_setlabel+0xe4>
 800a516:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a51a:	4619      	mov	r1, r3
 800a51c:	485f      	ldr	r0, [pc, #380]	; (800a69c <f_setlabel+0x244>)
 800a51e:	f7fe fca7 	bl	8008e70 <chk_chr>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d109      	bne.n	800a53c <f_setlabel+0xe4>
 800a528:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a52c:	2bff      	cmp	r3, #255	; 0xff
 800a52e:	d901      	bls.n	800a534 <f_setlabel+0xdc>
 800a530:	220a      	movs	r2, #10
 800a532:	e000      	b.n	800a536 <f_setlabel+0xde>
 800a534:	220b      	movs	r2, #11
 800a536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a538:	429a      	cmp	r2, r3
 800a53a:	d806      	bhi.n	800a54a <f_setlabel+0xf2>
					LEAVE_FF(fs, FR_INVALID_NAME);
 800a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53e:	2106      	movs	r1, #6
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe fcc6 	bl	8008ed2 <unlock_fs>
 800a546:	2306      	movs	r3, #6
 800a548:	e0a3      	b.n	800a692 <f_setlabel+0x23a>
				}
				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
 800a54a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a54e:	2bff      	cmp	r3, #255	; 0xff
 800a550:	d90b      	bls.n	800a56a <f_setlabel+0x112>
 800a552:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a556:	0a1b      	lsrs	r3, r3, #8
 800a558:	b299      	uxth	r1, r3
 800a55a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a55c:	1c5a      	adds	r2, r3, #1
 800a55e:	667a      	str	r2, [r7, #100]	; 0x64
 800a560:	b2ca      	uxtb	r2, r1
 800a562:	3370      	adds	r3, #112	; 0x70
 800a564:	443b      	add	r3, r7
 800a566:	f803 2c64 	strb.w	r2, [r3, #-100]
				dirvn[j++] = (BYTE)w;
 800a56a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	667a      	str	r2, [r7, #100]	; 0x64
 800a570:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800a574:	b2d2      	uxtb	r2, r2
 800a576:	3370      	adds	r3, #112	; 0x70
 800a578:	443b      	add	r3, r7
 800a57a:	f803 2c64 	strb.w	r2, [r3, #-100]
			} while (i < slen);
 800a57e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a582:	429a      	cmp	r2, r3
 800a584:	d3a9      	bcc.n	800a4da <f_setlabel+0x82>
			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
 800a586:	e007      	b.n	800a598 <f_setlabel+0x140>
 800a588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	667a      	str	r2, [r7, #100]	; 0x64
 800a58e:	3370      	adds	r3, #112	; 0x70
 800a590:	443b      	add	r3, r7
 800a592:	2220      	movs	r2, #32
 800a594:	f803 2c64 	strb.w	r2, [r3, #-100]
 800a598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a59a:	2b0a      	cmp	r3, #10
 800a59c:	d9f4      	bls.n	800a588 <f_setlabel+0x130>
			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 800a59e:	7b3b      	ldrb	r3, [r7, #12]
 800a5a0:	2be5      	cmp	r3, #229	; 0xe5
 800a5a2:	d106      	bne.n	800a5b2 <f_setlabel+0x15a>
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	2106      	movs	r1, #6
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe fc92 	bl	8008ed2 <unlock_fs>
 800a5ae:	2306      	movs	r3, #6
 800a5b0:	e06f      	b.n	800a692 <f_setlabel+0x23a>
		}
	}

	/* Set volume label */
	dj.obj.sclust = 0;		/* Open root directory */
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	633b      	str	r3, [r7, #48]	; 0x30
	res = dir_sdi(&dj, 0);
 800a5b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff f850 	bl	8009662 <dir_sdi>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800a5c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d157      	bne.n	800a680 <f_setlabel+0x228>
		res = dir_read(&dj, 1);	/* Get volume label entry */
 800a5d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff fa6f 	bl	8009aba <dir_read>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (res == FR_OK) {
 800a5e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d118      	bne.n	800a61c <f_setlabel+0x1c4>
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
			} else {
				if (slen) {
 800a5ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d007      	beq.n	800a600 <f_setlabel+0x1a8>
					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
 800a5f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5f2:	f107 010c 	add.w	r1, r7, #12
 800a5f6:	220b      	movs	r2, #11
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe fbfd 	bl	8008df8 <mem_cpy>
 800a5fe:	e002      	b.n	800a606 <f_setlabel+0x1ae>
				} else {
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 800a600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a602:	22e5      	movs	r2, #229	; 0xe5
 800a604:	701a      	strb	r2, [r3, #0]
				}
			}
			fs->wflag = 1;
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	2201      	movs	r2, #1
 800a60a:	70da      	strb	r2, [r3, #3]
			res = sync_fs(fs);
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe fd10 	bl	8009034 <sync_fs>
 800a614:	4603      	mov	r3, r0
 800a616:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a61a:	e031      	b.n	800a680 <f_setlabel+0x228>
		} else {			/* No volume label entry is found or error */
			if (res == FR_NO_FILE) {
 800a61c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a620:	2b04      	cmp	r3, #4
 800a622:	d12d      	bne.n	800a680 <f_setlabel+0x228>
				res = FR_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (slen) {	/* Create a volume label entry */
 800a62a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d027      	beq.n	800a680 <f_setlabel+0x228>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 800a630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a634:	2101      	movs	r1, #1
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff f972 	bl	8009920 <dir_alloc>
 800a63c:	4603      	mov	r3, r0
 800a63e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800a642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a646:	2b00      	cmp	r3, #0
 800a648:	d11a      	bne.n	800a680 <f_setlabel+0x228>
						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
 800a64a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a64c:	2220      	movs	r2, #32
 800a64e:	2100      	movs	r1, #0
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe fbf2 	bl	8008e3a <mem_set>
						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
						} else {
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 800a656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a658:	330b      	adds	r3, #11
 800a65a:	2208      	movs	r2, #8
 800a65c:	701a      	strb	r2, [r3, #0]
							mem_cpy(dj.dir, dirvn, 11);
 800a65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a660:	f107 010c 	add.w	r1, r7, #12
 800a664:	220b      	movs	r2, #11
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fbc6 	bl	8008df8 <mem_cpy>
						}
						fs->wflag = 1;
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	2201      	movs	r2, #1
 800a670:	70da      	strb	r2, [r3, #3]
						res = sync_fs(fs);
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	4618      	mov	r0, r3
 800a676:	f7fe fcdd 	bl	8009034 <sync_fs>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800a686:	4611      	mov	r1, r2
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fe fc22 	bl	8008ed2 <unlock_fs>
 800a68e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a692:	4618      	mov	r0, r3
 800a694:	3770      	adds	r7, #112	; 0x70
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	0801ad7c 	.word	0x0801ad7c

0800a6a0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b09d      	sub	sp, #116	; 0x74
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	607a      	str	r2, [r7, #4]
 800a6aa:	603b      	str	r3, [r7, #0]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a6b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6b8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a6ba:	f107 030c 	add.w	r3, r7, #12
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff faa2 	bl	8009c08 <get_ldnumber>
 800a6c4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da02      	bge.n	800a6d2 <f_mkfs+0x32>
 800a6cc:	230b      	movs	r3, #11
 800a6ce:	f000 bc31 	b.w	800af34 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a6d2:	4aa5      	ldr	r2, [pc, #660]	; (800a968 <f_mkfs+0x2c8>)
 800a6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d005      	beq.n	800a6ea <f_mkfs+0x4a>
 800a6de:	4aa2      	ldr	r2, [pc, #648]	; (800a968 <f_mkfs+0x2c8>)
 800a6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a6f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fa76 	bl	8008bec <disk_initialize>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a706:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <f_mkfs+0x78>
 800a712:	2303      	movs	r3, #3
 800a714:	f000 bc0e 	b.w	800af34 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a718:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a71c:	f003 0304 	and.w	r3, r3, #4
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <f_mkfs+0x8a>
 800a724:	230a      	movs	r3, #10
 800a726:	f000 bc05 	b.w	800af34 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a72a:	f107 0214 	add.w	r2, r7, #20
 800a72e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a732:	2103      	movs	r1, #3
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fabf 	bl	8008cb8 <disk_ioctl>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10c      	bne.n	800a75a <f_mkfs+0xba>
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d009      	beq.n	800a75a <f_mkfs+0xba>
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a74c:	d805      	bhi.n	800a75a <f_mkfs+0xba>
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	1e5a      	subs	r2, r3, #1
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	4013      	ands	r3, r2
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <f_mkfs+0xbe>
 800a75a:	2301      	movs	r3, #1
 800a75c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800a75e:	f107 021a 	add.w	r2, r7, #26
 800a762:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a766:	2102      	movs	r1, #2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe faa5 	bl	8008cb8 <disk_ioctl>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <f_mkfs+0xd8>
 800a774:	2301      	movs	r3, #1
 800a776:	e3dd      	b.n	800af34 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800a778:	8b7b      	ldrh	r3, [r7, #26]
 800a77a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a77e:	d80a      	bhi.n	800a796 <f_mkfs+0xf6>
 800a780:	8b7b      	ldrh	r3, [r7, #26]
 800a782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a786:	d306      	bcc.n	800a796 <f_mkfs+0xf6>
 800a788:	8b7b      	ldrh	r3, [r7, #26]
 800a78a:	461a      	mov	r2, r3
 800a78c:	8b7b      	ldrh	r3, [r7, #26]
 800a78e:	3b01      	subs	r3, #1
 800a790:	4013      	ands	r3, r2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <f_mkfs+0xfa>
 800a796:	2301      	movs	r3, #1
 800a798:	e3cc      	b.n	800af34 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d004      	beq.n	800a7aa <f_mkfs+0x10a>
 800a7a0:	8b7b      	ldrh	r3, [r7, #26]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d309      	bcc.n	800a7be <f_mkfs+0x11e>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7b0:	d805      	bhi.n	800a7be <f_mkfs+0x11e>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	1e5a      	subs	r2, r3, #1
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <f_mkfs+0x122>
 800a7be:	2313      	movs	r3, #19
 800a7c0:	e3b8      	b.n	800af34 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 800a7c2:	8b7b      	ldrh	r3, [r7, #26]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7cc:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a7d2:	8b7b      	ldrh	r3, [r7, #26]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a7da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7de:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a7e0:	8b7b      	ldrh	r3, [r7, #26]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <f_mkfs+0x156>
 800a7f2:	230e      	movs	r3, #14
 800a7f4:	e39e      	b.n	800af34 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a7f6:	f107 0210 	add.w	r2, r7, #16
 800a7fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a7fe:	2101      	movs	r1, #1
 800a800:	4618      	mov	r0, r3
 800a802:	f7fe fa59 	bl	8008cb8 <disk_ioctl>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <f_mkfs+0x170>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e391      	b.n	800af34 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	f003 0308 	and.w	r3, r3, #8
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <f_mkfs+0x17e>
 800a81a:	2300      	movs	r3, #0
 800a81c:	e000      	b.n	800a820 <f_mkfs+0x180>
 800a81e:	233f      	movs	r3, #63	; 0x3f
 800a820:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a826:	429a      	cmp	r2, r3
 800a828:	d901      	bls.n	800a82e <f_mkfs+0x18e>
 800a82a:	230e      	movs	r3, #14
 800a82c:	e382      	b.n	800af34 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2b7f      	cmp	r3, #127	; 0x7f
 800a83a:	d801      	bhi.n	800a840 <f_mkfs+0x1a0>
 800a83c:	230e      	movs	r3, #14
 800a83e:	e379      	b.n	800af34 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b80      	cmp	r3, #128	; 0x80
 800a844:	d901      	bls.n	800a84a <f_mkfs+0x1aa>
 800a846:	2313      	movs	r3, #19
 800a848:	e374      	b.n	800af34 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a84a:	7afb      	ldrb	r3, [r7, #11]
 800a84c:	f003 0302 	and.w	r3, r3, #2
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00d      	beq.n	800a870 <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d004      	beq.n	800a868 <f_mkfs+0x1c8>
 800a85e:	7afb      	ldrb	r3, [r7, #11]
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d103      	bne.n	800a870 <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 800a868:	2303      	movs	r3, #3
 800a86a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a86e:	e009      	b.n	800a884 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <f_mkfs+0x1de>
 800a87a:	2313      	movs	r3, #19
 800a87c:	e35a      	b.n	800af34 <f_mkfs+0x894>
		fmt = FS_FAT16;
 800a87e:	2302      	movs	r3, #2
 800a880:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a888:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d13c      	bne.n	800a90a <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 800a890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a892:	2b00      	cmp	r3, #0
 800a894:	d11b      	bne.n	800a8ce <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	0c5b      	lsrs	r3, r3, #17
 800a89a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a89c:	2300      	movs	r3, #0
 800a89e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a8a4:	e005      	b.n	800a8b2 <f_mkfs+0x212>
 800a8a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	653b      	str	r3, [r7, #80]	; 0x50
 800a8b2:	4a2e      	ldr	r2, [pc, #184]	; (800a96c <f_mkfs+0x2cc>)
 800a8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d007      	beq.n	800a8ce <f_mkfs+0x22e>
 800a8be:	4a2b      	ldr	r2, [pc, #172]	; (800a96c <f_mkfs+0x2cc>)
 800a8c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d2eb      	bcs.n	800a8a6 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	3302      	adds	r3, #2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	8b7a      	ldrh	r2, [r7, #26]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	8b7a      	ldrh	r2, [r7, #26]
 800a8e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ea:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800a8ec:	2320      	movs	r3, #32
 800a8ee:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d903      	bls.n	800a906 <f_mkfs+0x266>
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	4a1b      	ldr	r2, [pc, #108]	; (800a970 <f_mkfs+0x2d0>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d954      	bls.n	800a9b0 <f_mkfs+0x310>
 800a906:	230e      	movs	r3, #14
 800a908:	e314      	b.n	800af34 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800a90a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d11b      	bne.n	800a948 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	0b1b      	lsrs	r3, r3, #12
 800a914:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a916:	2300      	movs	r3, #0
 800a918:	64bb      	str	r3, [r7, #72]	; 0x48
 800a91a:	2301      	movs	r3, #1
 800a91c:	653b      	str	r3, [r7, #80]	; 0x50
 800a91e:	e005      	b.n	800a92c <f_mkfs+0x28c>
 800a920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a922:	3301      	adds	r3, #1
 800a924:	64bb      	str	r3, [r7, #72]	; 0x48
 800a926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	653b      	str	r3, [r7, #80]	; 0x50
 800a92c:	4a11      	ldr	r2, [pc, #68]	; (800a974 <f_mkfs+0x2d4>)
 800a92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d007      	beq.n	800a948 <f_mkfs+0x2a8>
 800a938:	4a0e      	ldr	r2, [pc, #56]	; (800a974 <f_mkfs+0x2d4>)
 800a93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a93c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a940:	461a      	mov	r2, r3
 800a942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a944:	4293      	cmp	r3, r2
 800a946:	d2eb      	bcs.n	800a920 <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a94c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a958:	4293      	cmp	r3, r2
 800a95a:	d90d      	bls.n	800a978 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	3302      	adds	r3, #2
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a964:	e013      	b.n	800a98e <f_mkfs+0x2ee>
 800a966:	bf00      	nop
 800a968:	20002dac 	.word	0x20002dac
 800a96c:	0801ad8c 	.word	0x0801ad8c
 800a970:	0ffffff5 	.word	0x0ffffff5
 800a974:	0801ad9c 	.word	0x0801ad9c
				} else {
					fmt = FS_FAT12;
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a980:	4613      	mov	r3, r2
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	4413      	add	r3, r2
 800a986:	3301      	adds	r3, #1
 800a988:	085b      	lsrs	r3, r3, #1
 800a98a:	3303      	adds	r3, #3
 800a98c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a98e:	8b7b      	ldrh	r3, [r7, #26]
 800a990:	461a      	mov	r2, r3
 800a992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a994:	4413      	add	r3, r2
 800a996:	3b01      	subs	r3, #1
 800a998:	8b7a      	ldrh	r2, [r7, #26]
 800a99a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a99e:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800a9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a6:	015b      	lsls	r3, r3, #5
 800a9a8:	8b7a      	ldrh	r2, [r7, #26]
 800a9aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9ae:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a9b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9b4:	4413      	add	r3, r2
 800a9b6:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800a9b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9bc:	fb03 f202 	mul.w	r2, r3, r2
 800a9c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9c2:	4413      	add	r3, r2
 800a9c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9c6:	4413      	add	r3, r2
 800a9c8:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	1e5a      	subs	r2, r3, #1
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	425b      	negs	r3, r3
 800a9d6:	401a      	ands	r2, r3
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800a9de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d108      	bne.n	800a9f8 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 800a9e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9ea:	4413      	add	r3, r2
 800a9ec:	657b      	str	r3, [r7, #84]	; 0x54
 800a9ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9f2:	4413      	add	r3, r2
 800a9f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9f6:	e006      	b.n	800aa06 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800a9f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa02:	4413      	add	r3, r2
 800aa04:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800aa06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa08:	011a      	lsls	r2, r3, #4
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	441a      	add	r2, r3
 800aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa10:	1ad2      	subs	r2, r2, r3
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d901      	bls.n	800aa1c <f_mkfs+0x37c>
 800aa18:	230e      	movs	r3, #14
 800aa1a:	e28b      	b.n	800af34 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa20:	1ad2      	subs	r2, r2, r3
 800aa22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa26:	fb01 f303 	mul.w	r3, r1, r3
 800aa2a:	1ad2      	subs	r2, r2, r3
 800aa2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa32:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 800aa38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d10f      	bne.n	800aa60 <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d80a      	bhi.n	800aa60 <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d105      	bne.n	800aa5c <f_mkfs+0x3bc>
 800aa50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa52:	085b      	lsrs	r3, r3, #1
 800aa54:	607b      	str	r3, [r7, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d144      	bne.n	800aae6 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 800aa5c:	230e      	movs	r3, #14
 800aa5e:	e269      	b.n	800af34 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 800aa60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d133      	bne.n	800aad0 <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d91e      	bls.n	800aab0 <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d107      	bne.n	800aa88 <f_mkfs+0x3e8>
 800aa78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa7a:	005b      	lsls	r3, r3, #1
 800aa7c:	2b40      	cmp	r3, #64	; 0x40
 800aa7e:	d803      	bhi.n	800aa88 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800aa80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	e033      	b.n	800aaf0 <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	f003 0302 	and.w	r3, r3, #2
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800aa92:	2303      	movs	r3, #3
 800aa94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800aa98:	e02a      	b.n	800aaf0 <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d105      	bne.n	800aaac <f_mkfs+0x40c>
 800aaa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	607b      	str	r3, [r7, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b80      	cmp	r3, #128	; 0x80
 800aaaa:	d91e      	bls.n	800aaea <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 800aaac:	230e      	movs	r3, #14
 800aaae:	e241      	b.n	800af34 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d80a      	bhi.n	800aad0 <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d105      	bne.n	800aacc <f_mkfs+0x42c>
 800aac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	607b      	str	r3, [r7, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b80      	cmp	r3, #128	; 0x80
 800aaca:	d910      	bls.n	800aaee <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 800aacc:	230e      	movs	r3, #14
 800aace:	e231      	b.n	800af34 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800aad0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d10c      	bne.n	800aaf2 <f_mkfs+0x452>
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aade:	4293      	cmp	r3, r2
 800aae0:	d907      	bls.n	800aaf2 <f_mkfs+0x452>
 800aae2:	230e      	movs	r3, #14
 800aae4:	e226      	b.n	800af34 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800aae6:	bf00      	nop
 800aae8:	e6cc      	b.n	800a884 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aaea:	bf00      	nop
 800aaec:	e6ca      	b.n	800a884 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aaee:	bf00      	nop
			pau = au;
 800aaf0:	e6c8      	b.n	800a884 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 800aaf2:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800aaf4:	8b7b      	ldrh	r3, [r7, #26]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	2100      	movs	r1, #0
 800aafa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aafc:	f7fe f99d 	bl	8008e3a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800ab00:	220b      	movs	r2, #11
 800ab02:	49b3      	ldr	r1, [pc, #716]	; (800add0 <f_mkfs+0x730>)
 800ab04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab06:	f7fe f977 	bl	8008df8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0c:	330b      	adds	r3, #11
 800ab0e:	8b7a      	ldrh	r2, [r7, #26]
 800ab10:	4611      	mov	r1, r2
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe f929 	bl	8008d6a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ab18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1a:	330d      	adds	r3, #13
 800ab1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ab22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab24:	330e      	adds	r3, #14
 800ab26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab28:	b292      	uxth	r2, r2
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fe f91c 	bl	8008d6a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800ab32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab34:	3310      	adds	r3, #16
 800ab36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab38:	b2d2      	uxtb	r2, r2
 800ab3a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	f103 0211 	add.w	r2, r3, #17
 800ab42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d002      	beq.n	800ab50 <f_mkfs+0x4b0>
 800ab4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	e000      	b.n	800ab52 <f_mkfs+0x4b2>
 800ab50:	2300      	movs	r3, #0
 800ab52:	4619      	mov	r1, r3
 800ab54:	4610      	mov	r0, r2
 800ab56:	f7fe f908 	bl	8008d6a <st_word>
		if (sz_vol < 0x10000) {
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab60:	d208      	bcs.n	800ab74 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ab62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab64:	3313      	adds	r3, #19
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	b292      	uxth	r2, r2
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fe f8fc 	bl	8008d6a <st_word>
 800ab72:	e006      	b.n	800ab82 <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800ab74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab76:	3320      	adds	r3, #32
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe f90f 	bl	8008da0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ab82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab84:	3315      	adds	r3, #21
 800ab86:	22f8      	movs	r2, #248	; 0xf8
 800ab88:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ab8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8c:	3318      	adds	r3, #24
 800ab8e:	213f      	movs	r1, #63	; 0x3f
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fe f8ea 	bl	8008d6a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ab96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab98:	331a      	adds	r3, #26
 800ab9a:	21ff      	movs	r1, #255	; 0xff
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fe f8e4 	bl	8008d6a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba4:	331c      	adds	r3, #28
 800aba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fe f8f9 	bl	8008da0 <st_dword>
		if (fmt == FS_FAT32) {
 800abae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d131      	bne.n	800ac1a <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800abb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb8:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800abbc:	f7fb fc98 	bl	80064f0 <get_fattime>
 800abc0:	4603      	mov	r3, r0
 800abc2:	4619      	mov	r1, r3
 800abc4:	4620      	mov	r0, r4
 800abc6:	f7fe f8eb 	bl	8008da0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800abca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abcc:	3324      	adds	r3, #36	; 0x24
 800abce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fe f8e5 	bl	8008da0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd8:	332c      	adds	r3, #44	; 0x2c
 800abda:	2102      	movs	r1, #2
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe f8df 	bl	8008da0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	3330      	adds	r3, #48	; 0x30
 800abe6:	2101      	movs	r1, #1
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fe f8be 	bl	8008d6a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf0:	3332      	adds	r3, #50	; 0x32
 800abf2:	2106      	movs	r1, #6
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe f8b8 	bl	8008d6a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800abfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfc:	3340      	adds	r3, #64	; 0x40
 800abfe:	2280      	movs	r2, #128	; 0x80
 800ac00:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ac02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac04:	3342      	adds	r3, #66	; 0x42
 800ac06:	2229      	movs	r2, #41	; 0x29
 800ac08:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800ac0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0c:	3347      	adds	r3, #71	; 0x47
 800ac0e:	2213      	movs	r2, #19
 800ac10:	4970      	ldr	r1, [pc, #448]	; (800add4 <f_mkfs+0x734>)
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe f8f0 	bl	8008df8 <mem_cpy>
 800ac18:	e020      	b.n	800ac5c <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800ac1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1c:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800ac20:	f7fb fc66 	bl	80064f0 <get_fattime>
 800ac24:	4603      	mov	r3, r0
 800ac26:	4619      	mov	r1, r3
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f7fe f8b9 	bl	8008da0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800ac2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac30:	3316      	adds	r3, #22
 800ac32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac34:	b292      	uxth	r2, r2
 800ac36:	4611      	mov	r1, r2
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fe f896 	bl	8008d6a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ac3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac40:	3324      	adds	r3, #36	; 0x24
 800ac42:	2280      	movs	r2, #128	; 0x80
 800ac44:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ac46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac48:	3326      	adds	r3, #38	; 0x26
 800ac4a:	2229      	movs	r2, #41	; 0x29
 800ac4c:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800ac4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac50:	332b      	adds	r3, #43	; 0x2b
 800ac52:	2213      	movs	r2, #19
 800ac54:	4960      	ldr	r1, [pc, #384]	; (800add8 <f_mkfs+0x738>)
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe f8ce 	bl	8008df8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac62:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe f87f 	bl	8008d6a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800ac6c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ac70:	2301      	movs	r3, #1
 800ac72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac76:	f7fd ffff 	bl	8008c78 <disk_write>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <f_mkfs+0x5e4>
 800ac80:	2301      	movs	r3, #1
 800ac82:	e157      	b.n	800af34 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800ac84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d140      	bne.n	800ad0e <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8e:	1d9a      	adds	r2, r3, #6
 800ac90:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ac94:	2301      	movs	r3, #1
 800ac96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac98:	f7fd ffee 	bl	8008c78 <disk_write>
			mem_set(buf, 0, ss);
 800ac9c:	8b7b      	ldrh	r3, [r7, #26]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	2100      	movs	r1, #0
 800aca2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aca4:	f7fe f8c9 	bl	8008e3a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800aca8:	494c      	ldr	r1, [pc, #304]	; (800addc <f_mkfs+0x73c>)
 800acaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800acac:	f7fe f878 	bl	8008da0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800acb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800acb6:	494a      	ldr	r1, [pc, #296]	; (800ade0 <f_mkfs+0x740>)
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe f871 	bl	8008da0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800acbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	3b01      	subs	r3, #1
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f7fe f868 	bl	8008da0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800acd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800acd6:	2102      	movs	r1, #2
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fe f861 	bl	8008da0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800acde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ace4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fe f83e 	bl	8008d6a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	1dda      	adds	r2, r3, #7
 800acf2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800acf6:	2301      	movs	r3, #1
 800acf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800acfa:	f7fd ffbd 	bl	8008c78 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ad06:	2301      	movs	r3, #1
 800ad08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad0a:	f7fd ffb5 	bl	8008c78 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800ad0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad10:	2100      	movs	r1, #0
 800ad12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad14:	f7fe f891 	bl	8008e3a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800ad18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad1a:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad20:	e04b      	b.n	800adba <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 800ad22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d113      	bne.n	800ad52 <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800ad2a:	f06f 0107 	mvn.w	r1, #7
 800ad2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad30:	f7fe f836 	bl	8008da0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800ad34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad36:	3304      	adds	r3, #4
 800ad38:	f04f 31ff 	mov.w	r1, #4294967295
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe f82f 	bl	8008da0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800ad42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad44:	3308      	adds	r3, #8
 800ad46:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe f828 	bl	8008da0 <st_dword>
 800ad50:	e00b      	b.n	800ad6a <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800ad52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d101      	bne.n	800ad5e <f_mkfs+0x6be>
 800ad5a:	4b22      	ldr	r3, [pc, #136]	; (800ade4 <f_mkfs+0x744>)
 800ad5c:	e001      	b.n	800ad62 <f_mkfs+0x6c2>
 800ad5e:	f06f 0307 	mvn.w	r3, #7
 800ad62:	4619      	mov	r1, r3
 800ad64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad66:	f7fe f81b 	bl	8008da0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800ad6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad6c:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800ad6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	4293      	cmp	r3, r2
 800ad74:	bf28      	it	cs
 800ad76:	4613      	movcs	r3, r2
 800ad78:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ad7a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ad7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad84:	f7fd ff78 	bl	8008c78 <disk_write>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <f_mkfs+0x6f2>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e0d0      	b.n	800af34 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 800ad92:	8b7b      	ldrh	r3, [r7, #26]
 800ad94:	461a      	mov	r2, r3
 800ad96:	2100      	movs	r1, #0
 800ad98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad9a:	f7fe f84e 	bl	8008e3a <mem_set>
				sect += n; nsect -= n;
 800ad9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ada0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ada2:	4413      	add	r3, r2
 800ada4:	667b      	str	r3, [r7, #100]	; 0x64
 800ada6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ada8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800adae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1dc      	bne.n	800ad6e <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800adb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adb6:	3301      	adds	r3, #1
 800adb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d3af      	bcc.n	800ad22 <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800adc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d10e      	bne.n	800ade8 <f_mkfs+0x748>
 800adca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adcc:	e00d      	b.n	800adea <f_mkfs+0x74a>
 800adce:	bf00      	nop
 800add0:	08019208 	.word	0x08019208
 800add4:	08019214 	.word	0x08019214
 800add8:	08019228 	.word	0x08019228
 800addc:	41615252 	.word	0x41615252
 800ade0:	61417272 	.word	0x61417272
 800ade4:	00fffff8 	.word	0x00fffff8
 800ade8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adea:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800adec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	4293      	cmp	r3, r2
 800adf2:	bf28      	it	cs
 800adf4:	4613      	movcs	r3, r2
 800adf6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800adf8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800adfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae02:	f7fd ff39 	bl	8008c78 <disk_write>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <f_mkfs+0x770>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e091      	b.n	800af34 <f_mkfs+0x894>
			sect += n; nsect -= n;
 800ae10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae14:	4413      	add	r3, r2
 800ae16:	667b      	str	r3, [r7, #100]	; 0x64
 800ae18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800ae20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e2      	bne.n	800adec <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800ae26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d103      	bne.n	800ae36 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 800ae2e:	230c      	movs	r3, #12
 800ae30:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ae34:	e010      	b.n	800ae58 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae3c:	d303      	bcc.n	800ae46 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800ae3e:	2306      	movs	r3, #6
 800ae40:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ae44:	e008      	b.n	800ae58 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800ae46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d101      	bne.n	800ae52 <f_mkfs+0x7b2>
 800ae4e:	2304      	movs	r3, #4
 800ae50:	e000      	b.n	800ae54 <f_mkfs+0x7b4>
 800ae52:	2301      	movs	r3, #1
 800ae54:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ae58:	7afb      	ldrb	r3, [r7, #11]
 800ae5a:	f003 0308 	and.w	r3, r3, #8
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d15b      	bne.n	800af1a <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 800ae62:	8b7b      	ldrh	r3, [r7, #26]
 800ae64:	461a      	mov	r2, r3
 800ae66:	2100      	movs	r1, #0
 800ae68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae6a:	f7fd ffe6 	bl	8008e3a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ae6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae74:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fd ff76 	bl	8008d6a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ae84:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	2201      	movs	r2, #1
 800ae92:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	3302      	adds	r3, #2
 800ae98:	2201      	movs	r2, #1
 800ae9a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	3303      	adds	r3, #3
 800aea0:	2200      	movs	r2, #0
 800aea2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	3304      	adds	r3, #4
 800aea8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800aeac:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	441a      	add	r2, r3
 800aeb4:	4b21      	ldr	r3, [pc, #132]	; (800af3c <f_mkfs+0x89c>)
 800aeb6:	fba3 1302 	umull	r1, r3, r3, r2
 800aeba:	1ad2      	subs	r2, r2, r3
 800aebc:	0852      	lsrs	r2, r2, #1
 800aebe:	4413      	add	r3, r2
 800aec0:	0b5b      	lsrs	r3, r3, #13
 800aec2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	3305      	adds	r3, #5
 800aec8:	22fe      	movs	r2, #254	; 0xfe
 800aeca:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800aecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aece:	089b      	lsrs	r3, r3, #2
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	3306      	adds	r3, #6
 800aed6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800aeda:	b2d2      	uxtb	r2, r2
 800aedc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	3307      	adds	r3, #7
 800aee2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aee4:	b2d2      	uxtb	r2, r2
 800aee6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	3308      	adds	r3, #8
 800aeec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fd ff56 	bl	8008da0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	330c      	adds	r3, #12
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fd ff4f 	bl	8008da0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800af02:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800af06:	2301      	movs	r3, #1
 800af08:	2200      	movs	r2, #0
 800af0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af0c:	f7fd feb4 	bl	8008c78 <disk_write>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <f_mkfs+0x87a>
 800af16:	2301      	movs	r3, #1
 800af18:	e00c      	b.n	800af34 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800af1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af1e:	2200      	movs	r2, #0
 800af20:	2100      	movs	r1, #0
 800af22:	4618      	mov	r0, r3
 800af24:	f7fd fec8 	bl	8008cb8 <disk_ioctl>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <f_mkfs+0x892>
 800af2e:	2301      	movs	r3, #1
 800af30:	e000      	b.n	800af34 <f_mkfs+0x894>

	return FR_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3774      	adds	r7, #116	; 0x74
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd90      	pop	{r4, r7, pc}
 800af3c:	0515565b 	.word	0x0515565b

0800af40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af40:	b480      	push	{r7}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	4613      	mov	r3, r2
 800af4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af4e:	2301      	movs	r3, #1
 800af50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af56:	4b1f      	ldr	r3, [pc, #124]	; (800afd4 <FATFS_LinkDriverEx+0x94>)
 800af58:	7a5b      	ldrb	r3, [r3, #9]
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d131      	bne.n	800afc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af60:	4b1c      	ldr	r3, [pc, #112]	; (800afd4 <FATFS_LinkDriverEx+0x94>)
 800af62:	7a5b      	ldrb	r3, [r3, #9]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	461a      	mov	r2, r3
 800af68:	4b1a      	ldr	r3, [pc, #104]	; (800afd4 <FATFS_LinkDriverEx+0x94>)
 800af6a:	2100      	movs	r1, #0
 800af6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af6e:	4b19      	ldr	r3, [pc, #100]	; (800afd4 <FATFS_LinkDriverEx+0x94>)
 800af70:	7a5b      	ldrb	r3, [r3, #9]
 800af72:	b2db      	uxtb	r3, r3
 800af74:	4a17      	ldr	r2, [pc, #92]	; (800afd4 <FATFS_LinkDriverEx+0x94>)
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af7e:	4b15      	ldr	r3, [pc, #84]	; (800afd4 <FATFS_LinkDriverEx+0x94>)
 800af80:	7a5b      	ldrb	r3, [r3, #9]
 800af82:	b2db      	uxtb	r3, r3
 800af84:	461a      	mov	r2, r3
 800af86:	4b13      	ldr	r3, [pc, #76]	; (800afd4 <FATFS_LinkDriverEx+0x94>)
 800af88:	4413      	add	r3, r2
 800af8a:	79fa      	ldrb	r2, [r7, #7]
 800af8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af8e:	4b11      	ldr	r3, [pc, #68]	; (800afd4 <FATFS_LinkDriverEx+0x94>)
 800af90:	7a5b      	ldrb	r3, [r3, #9]
 800af92:	b2db      	uxtb	r3, r3
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	b2d1      	uxtb	r1, r2
 800af98:	4a0e      	ldr	r2, [pc, #56]	; (800afd4 <FATFS_LinkDriverEx+0x94>)
 800af9a:	7251      	strb	r1, [r2, #9]
 800af9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af9e:	7dbb      	ldrb	r3, [r7, #22]
 800afa0:	3330      	adds	r3, #48	; 0x30
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	3301      	adds	r3, #1
 800afac:	223a      	movs	r2, #58	; 0x3a
 800afae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	3302      	adds	r3, #2
 800afb4:	222f      	movs	r2, #47	; 0x2f
 800afb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	3303      	adds	r3, #3
 800afbc:	2200      	movs	r2, #0
 800afbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800afc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	371c      	adds	r7, #28
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20002dd4 	.word	0x20002dd4

0800afd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800afe2:	2200      	movs	r2, #0
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7ff ffaa 	bl	800af40 <FATFS_LinkDriverEx>
 800afec:	4603      	mov	r3, r0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b004:	88fb      	ldrh	r3, [r7, #6]
 800b006:	2b7f      	cmp	r3, #127	; 0x7f
 800b008:	d802      	bhi.n	800b010 <ff_convert+0x18>
		c = chr;
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	81fb      	strh	r3, [r7, #14]
 800b00e:	e025      	b.n	800b05c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00b      	beq.n	800b02e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	2bff      	cmp	r3, #255	; 0xff
 800b01a:	d805      	bhi.n	800b028 <ff_convert+0x30>
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	3b80      	subs	r3, #128	; 0x80
 800b020:	4a12      	ldr	r2, [pc, #72]	; (800b06c <ff_convert+0x74>)
 800b022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b026:	e000      	b.n	800b02a <ff_convert+0x32>
 800b028:	2300      	movs	r3, #0
 800b02a:	81fb      	strh	r3, [r7, #14]
 800b02c:	e016      	b.n	800b05c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b02e:	2300      	movs	r3, #0
 800b030:	81fb      	strh	r3, [r7, #14]
 800b032:	e009      	b.n	800b048 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b034:	89fb      	ldrh	r3, [r7, #14]
 800b036:	4a0d      	ldr	r2, [pc, #52]	; (800b06c <ff_convert+0x74>)
 800b038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b03c:	88fa      	ldrh	r2, [r7, #6]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d006      	beq.n	800b050 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b042:	89fb      	ldrh	r3, [r7, #14]
 800b044:	3301      	adds	r3, #1
 800b046:	81fb      	strh	r3, [r7, #14]
 800b048:	89fb      	ldrh	r3, [r7, #14]
 800b04a:	2b7f      	cmp	r3, #127	; 0x7f
 800b04c:	d9f2      	bls.n	800b034 <ff_convert+0x3c>
 800b04e:	e000      	b.n	800b052 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b050:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b052:	89fb      	ldrh	r3, [r7, #14]
 800b054:	3380      	adds	r3, #128	; 0x80
 800b056:	b29b      	uxth	r3, r3
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b05c:	89fb      	ldrh	r3, [r7, #14]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	0801adac 	.word	0x0801adac

0800b070 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b070:	b480      	push	{r7}
 800b072:	b087      	sub	sp, #28
 800b074:	af00      	add	r7, sp, #0
 800b076:	4603      	mov	r3, r0
 800b078:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b07a:	88fb      	ldrh	r3, [r7, #6]
 800b07c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b080:	d201      	bcs.n	800b086 <ff_wtoupper+0x16>
 800b082:	4b3e      	ldr	r3, [pc, #248]	; (800b17c <ff_wtoupper+0x10c>)
 800b084:	e000      	b.n	800b088 <ff_wtoupper+0x18>
 800b086:	4b3e      	ldr	r3, [pc, #248]	; (800b180 <ff_wtoupper+0x110>)
 800b088:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	1c9a      	adds	r2, r3, #2
 800b08e:	617a      	str	r2, [r7, #20]
 800b090:	881b      	ldrh	r3, [r3, #0]
 800b092:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b094:	8a7b      	ldrh	r3, [r7, #18]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d068      	beq.n	800b16c <ff_wtoupper+0xfc>
 800b09a:	88fa      	ldrh	r2, [r7, #6]
 800b09c:	8a7b      	ldrh	r3, [r7, #18]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d364      	bcc.n	800b16c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	1c9a      	adds	r2, r3, #2
 800b0a6:	617a      	str	r2, [r7, #20]
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	823b      	strh	r3, [r7, #16]
 800b0ac:	8a3b      	ldrh	r3, [r7, #16]
 800b0ae:	0a1b      	lsrs	r3, r3, #8
 800b0b0:	81fb      	strh	r3, [r7, #14]
 800b0b2:	8a3b      	ldrh	r3, [r7, #16]
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b0b8:	88fa      	ldrh	r2, [r7, #6]
 800b0ba:	8a79      	ldrh	r1, [r7, #18]
 800b0bc:	8a3b      	ldrh	r3, [r7, #16]
 800b0be:	440b      	add	r3, r1
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	da49      	bge.n	800b158 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b0c4:	89fb      	ldrh	r3, [r7, #14]
 800b0c6:	2b08      	cmp	r3, #8
 800b0c8:	d84f      	bhi.n	800b16a <ff_wtoupper+0xfa>
 800b0ca:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <ff_wtoupper+0x60>)
 800b0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d0:	0800b0f5 	.word	0x0800b0f5
 800b0d4:	0800b107 	.word	0x0800b107
 800b0d8:	0800b11d 	.word	0x0800b11d
 800b0dc:	0800b125 	.word	0x0800b125
 800b0e0:	0800b12d 	.word	0x0800b12d
 800b0e4:	0800b135 	.word	0x0800b135
 800b0e8:	0800b13d 	.word	0x0800b13d
 800b0ec:	0800b145 	.word	0x0800b145
 800b0f0:	0800b14d 	.word	0x0800b14d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b0f4:	88fa      	ldrh	r2, [r7, #6]
 800b0f6:	8a7b      	ldrh	r3, [r7, #18]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	4413      	add	r3, r2
 800b100:	881b      	ldrh	r3, [r3, #0]
 800b102:	80fb      	strh	r3, [r7, #6]
 800b104:	e027      	b.n	800b156 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b106:	88fa      	ldrh	r2, [r7, #6]
 800b108:	8a7b      	ldrh	r3, [r7, #18]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	b29b      	uxth	r3, r3
 800b114:	88fa      	ldrh	r2, [r7, #6]
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	80fb      	strh	r3, [r7, #6]
 800b11a:	e01c      	b.n	800b156 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b11c:	88fb      	ldrh	r3, [r7, #6]
 800b11e:	3b10      	subs	r3, #16
 800b120:	80fb      	strh	r3, [r7, #6]
 800b122:	e018      	b.n	800b156 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b124:	88fb      	ldrh	r3, [r7, #6]
 800b126:	3b20      	subs	r3, #32
 800b128:	80fb      	strh	r3, [r7, #6]
 800b12a:	e014      	b.n	800b156 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b12c:	88fb      	ldrh	r3, [r7, #6]
 800b12e:	3b30      	subs	r3, #48	; 0x30
 800b130:	80fb      	strh	r3, [r7, #6]
 800b132:	e010      	b.n	800b156 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b134:	88fb      	ldrh	r3, [r7, #6]
 800b136:	3b1a      	subs	r3, #26
 800b138:	80fb      	strh	r3, [r7, #6]
 800b13a:	e00c      	b.n	800b156 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b13c:	88fb      	ldrh	r3, [r7, #6]
 800b13e:	3308      	adds	r3, #8
 800b140:	80fb      	strh	r3, [r7, #6]
 800b142:	e008      	b.n	800b156 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b144:	88fb      	ldrh	r3, [r7, #6]
 800b146:	3b50      	subs	r3, #80	; 0x50
 800b148:	80fb      	strh	r3, [r7, #6]
 800b14a:	e004      	b.n	800b156 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b14c:	88fb      	ldrh	r3, [r7, #6]
 800b14e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b152:	80fb      	strh	r3, [r7, #6]
 800b154:	bf00      	nop
			}
			break;
 800b156:	e008      	b.n	800b16a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b158:	89fb      	ldrh	r3, [r7, #14]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d195      	bne.n	800b08a <ff_wtoupper+0x1a>
 800b15e:	8a3b      	ldrh	r3, [r7, #16]
 800b160:	005b      	lsls	r3, r3, #1
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	4413      	add	r3, r2
 800b166:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b168:	e78f      	b.n	800b08a <ff_wtoupper+0x1a>
			break;
 800b16a:	bf00      	nop
	}

	return chr;
 800b16c:	88fb      	ldrh	r3, [r7, #6]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	371c      	adds	r7, #28
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	0801aeac 	.word	0x0801aeac
 800b180:	0801b0a0 	.word	0x0801b0a0

0800b184 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	6039      	str	r1, [r7, #0]
 800b18e:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800b190:	2300      	movs	r3, #0
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	2300      	movs	r3, #0
 800b196:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b198:	f107 030c 	add.w	r3, r7, #12
 800b19c:	2101      	movs	r1, #1
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 f8cd 	bl	800b33e <osSemaphoreCreate>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	bf14      	ite	ne
 800b1b2:	2301      	movne	r3, #1
 800b1b4:	2300      	moveq	r3, #0
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	617b      	str	r3, [r7, #20]

    return ret;
 800b1ba:	697b      	ldr	r3, [r7, #20]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f96d 	bl	800b4ac <osSemaphoreDelete>
#endif
    return 1;
 800b1d2:	2301      	movs	r3, #1
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800b1e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f8d9 	bl	800b3a4 <osSemaphoreWait>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f916 	bl	800b440 <osSemaphoreRelease>
#endif
}
 800b214:	bf00      	nop
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b22a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b22e:	2b84      	cmp	r3, #132	; 0x84
 800b230:	d005      	beq.n	800b23e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b232:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	4413      	add	r3, r2
 800b23a:	3303      	adds	r3, #3
 800b23c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b23e:	68fb      	ldr	r3, [r7, #12]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b252:	f3ef 8305 	mrs	r3, IPSR
 800b256:	607b      	str	r3, [r7, #4]
  return(result);
 800b258:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	bf14      	ite	ne
 800b25e:	2301      	movne	r3, #1
 800b260:	2300      	moveq	r3, #0
 800b262:	b2db      	uxtb	r3, r3
}
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b274:	f001 fbcc 	bl	800ca10 <vTaskStartScheduler>
  
  return osOK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b27e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b280:	b089      	sub	sp, #36	; 0x24
 800b282:	af04      	add	r7, sp, #16
 800b284:	6078      	str	r0, [r7, #4]
 800b286:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d020      	beq.n	800b2d2 <osThreadCreate+0x54>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d01c      	beq.n	800b2d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685c      	ldr	r4, [r3, #4]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681d      	ldr	r5, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	691e      	ldr	r6, [r3, #16]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7ff ffb6 	bl	800b21c <makeFreeRtosPriority>
 800b2b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2ba:	9202      	str	r2, [sp, #8]
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	9100      	str	r1, [sp, #0]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	4632      	mov	r2, r6
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f001 f946 	bl	800c558 <xTaskCreateStatic>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	e01c      	b.n	800b30c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685c      	ldr	r4, [r3, #4]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2de:	b29e      	uxth	r6, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7ff ff98 	bl	800b21c <makeFreeRtosPriority>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	f107 030c 	add.w	r3, r7, #12
 800b2f2:	9301      	str	r3, [sp, #4]
 800b2f4:	9200      	str	r2, [sp, #0]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	4632      	mov	r2, r6
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f001 f988 	bl	800c612 <xTaskCreate>
 800b302:	4603      	mov	r3, r0
 800b304:	2b01      	cmp	r3, #1
 800b306:	d001      	beq.n	800b30c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b308:	2300      	movs	r3, #0
 800b30a:	e000      	b.n	800b30e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b30c:	68fb      	ldr	r3, [r7, #12]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b316 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <osDelay+0x16>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	e000      	b.n	800b32e <osDelay+0x18>
 800b32c:	2301      	movs	r3, #1
 800b32e:	4618      	mov	r0, r3
 800b330:	f001 fb3a 	bl	800c9a8 <vTaskDelay>
  
  return osOK;
 800b334:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b33e:	b580      	push	{r7, lr}
 800b340:	b086      	sub	sp, #24
 800b342:	af02      	add	r7, sp, #8
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00f      	beq.n	800b370 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d10a      	bne.n	800b36c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	2203      	movs	r2, #3
 800b35c:	9200      	str	r2, [sp, #0]
 800b35e:	2200      	movs	r2, #0
 800b360:	2100      	movs	r1, #0
 800b362:	2001      	movs	r0, #1
 800b364:	f000 f9d2 	bl	800b70c <xQueueGenericCreateStatic>
 800b368:	4603      	mov	r3, r0
 800b36a:	e016      	b.n	800b39a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	e014      	b.n	800b39a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d110      	bne.n	800b398 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b376:	2203      	movs	r2, #3
 800b378:	2100      	movs	r1, #0
 800b37a:	2001      	movs	r0, #1
 800b37c:	f000 fa3e 	bl	800b7fc <xQueueGenericCreate>
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d005      	beq.n	800b394 <osSemaphoreCreate+0x56>
 800b388:	2300      	movs	r3, #0
 800b38a:	2200      	movs	r2, #0
 800b38c:	2100      	movs	r1, #0
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f000 fada 	bl	800b948 <xQueueGenericSend>
      return sema;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	e000      	b.n	800b39a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b398:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b3b8:	2380      	movs	r3, #128	; 0x80
 800b3ba:	e03a      	b.n	800b432 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c6:	d103      	bne.n	800b3d0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3cc:	60fb      	str	r3, [r7, #12]
 800b3ce:	e009      	b.n	800b3e4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d006      	beq.n	800b3e4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <osSemaphoreWait+0x40>
      ticks = 1;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b3e4:	f7ff ff32 	bl	800b24c <inHandlerMode>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d017      	beq.n	800b41e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b3ee:	f107 0308 	add.w	r3, r7, #8
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 feb8 	bl	800c16c <xQueueReceiveFromISR>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d001      	beq.n	800b406 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b402:	23ff      	movs	r3, #255	; 0xff
 800b404:	e015      	b.n	800b432 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d011      	beq.n	800b430 <osSemaphoreWait+0x8c>
 800b40c:	4b0b      	ldr	r3, [pc, #44]	; (800b43c <osSemaphoreWait+0x98>)
 800b40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	e008      	b.n	800b430 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b41e:	68f9      	ldr	r1, [r7, #12]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fd97 	bl	800bf54 <xQueueSemaphoreTake>
 800b426:	4603      	mov	r3, r0
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d001      	beq.n	800b430 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b42c:	23ff      	movs	r3, #255	; 0xff
 800b42e:	e000      	b.n	800b432 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	e000ed04 	.word	0xe000ed04

0800b440 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b44c:	2300      	movs	r3, #0
 800b44e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b450:	f7ff fefc 	bl	800b24c <inHandlerMode>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d016      	beq.n	800b488 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b45a:	f107 0308 	add.w	r3, r7, #8
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fc0a 	bl	800bc7a <xQueueGiveFromISR>
 800b466:	4603      	mov	r3, r0
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d001      	beq.n	800b470 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b46c:	23ff      	movs	r3, #255	; 0xff
 800b46e:	e017      	b.n	800b4a0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d013      	beq.n	800b49e <osSemaphoreRelease+0x5e>
 800b476:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <osSemaphoreRelease+0x68>)
 800b478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	e00a      	b.n	800b49e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b488:	2300      	movs	r3, #0
 800b48a:	2200      	movs	r2, #0
 800b48c:	2100      	movs	r1, #0
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fa5a 	bl	800b948 <xQueueGenericSend>
 800b494:	4603      	mov	r3, r0
 800b496:	2b01      	cmp	r3, #1
 800b498:	d001      	beq.n	800b49e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b49a:	23ff      	movs	r3, #255	; 0xff
 800b49c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b49e:	68fb      	ldr	r3, [r7, #12]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	e000ed04 	.word	0xe000ed04

0800b4ac <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b4b4:	f7ff feca 	bl	800b24c <inHandlerMode>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b4be:	2382      	movs	r3, #130	; 0x82
 800b4c0:	e003      	b.n	800b4ca <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fed2 	bl	800c26c <vQueueDelete>

  return osOK; 
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f103 0208 	add.w	r2, r3, #8
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f103 0208 	add.w	r2, r3, #8
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f103 0208 	add.w	r2, r3, #8
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b506:	bf00      	nop
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	1c5a      	adds	r2, r3, #1
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	601a      	str	r2, [r3, #0]
}
 800b568:	bf00      	nop
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58a:	d103      	bne.n	800b594 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	e00c      	b.n	800b5ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	3308      	adds	r3, #8
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	e002      	b.n	800b5a2 <vListInsert+0x2e>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	60fb      	str	r3, [r7, #12]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d2f6      	bcs.n	800b59c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	1c5a      	adds	r2, r3, #1
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	601a      	str	r2, [r3, #0]
}
 800b5da:	bf00      	nop
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b085      	sub	sp, #20
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	6892      	ldr	r2, [r2, #8]
 800b5fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	6852      	ldr	r2, [r2, #4]
 800b606:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d103      	bne.n	800b61a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689a      	ldr	r2, [r3, #8]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	1e5a      	subs	r2, r3, #1
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
	...

0800b63c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10a      	bne.n	800b666 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b662:	bf00      	nop
 800b664:	e7fe      	b.n	800b664 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b666:	f002 f945 	bl	800d8f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b672:	68f9      	ldr	r1, [r7, #12]
 800b674:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b676:	fb01 f303 	mul.w	r3, r1, r3
 800b67a:	441a      	add	r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b696:	3b01      	subs	r3, #1
 800b698:	68f9      	ldr	r1, [r7, #12]
 800b69a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b69c:	fb01 f303 	mul.w	r3, r1, r3
 800b6a0:	441a      	add	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	22ff      	movs	r2, #255	; 0xff
 800b6aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	22ff      	movs	r2, #255	; 0xff
 800b6b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d114      	bne.n	800b6e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d01a      	beq.n	800b6fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	3310      	adds	r3, #16
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f001 fc03 	bl	800ced4 <xTaskRemoveFromEventList>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d012      	beq.n	800b6fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b6d4:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <xQueueGenericReset+0xcc>)
 800b6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	e009      	b.n	800b6fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3310      	adds	r3, #16
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff fef1 	bl	800b4d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3324      	adds	r3, #36	; 0x24
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7ff feec 	bl	800b4d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6fa:	f002 f92b 	bl	800d954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6fe:	2301      	movs	r3, #1
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	e000ed04 	.word	0xe000ed04

0800b70c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08e      	sub	sp, #56	; 0x38
 800b710:	af02      	add	r7, sp, #8
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10a      	bne.n	800b736 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b732:	bf00      	nop
 800b734:	e7fe      	b.n	800b734 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10a      	bne.n	800b752 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b74e:	bf00      	nop
 800b750:	e7fe      	b.n	800b750 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <xQueueGenericCreateStatic+0x52>
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <xQueueGenericCreateStatic+0x56>
 800b75e:	2301      	movs	r3, #1
 800b760:	e000      	b.n	800b764 <xQueueGenericCreateStatic+0x58>
 800b762:	2300      	movs	r3, #0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10a      	bne.n	800b77e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76c:	f383 8811 	msr	BASEPRI, r3
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	623b      	str	r3, [r7, #32]
}
 800b77a:	bf00      	nop
 800b77c:	e7fe      	b.n	800b77c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d102      	bne.n	800b78a <xQueueGenericCreateStatic+0x7e>
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d101      	bne.n	800b78e <xQueueGenericCreateStatic+0x82>
 800b78a:	2301      	movs	r3, #1
 800b78c:	e000      	b.n	800b790 <xQueueGenericCreateStatic+0x84>
 800b78e:	2300      	movs	r3, #0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10a      	bne.n	800b7aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	61fb      	str	r3, [r7, #28]
}
 800b7a6:	bf00      	nop
 800b7a8:	e7fe      	b.n	800b7a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b7aa:	2348      	movs	r3, #72	; 0x48
 800b7ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	2b48      	cmp	r3, #72	; 0x48
 800b7b2:	d00a      	beq.n	800b7ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	61bb      	str	r3, [r7, #24]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b7ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00d      	beq.n	800b7f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	68b9      	ldr	r1, [r7, #8]
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 f83f 	bl	800b870 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3730      	adds	r7, #48	; 0x30
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08a      	sub	sp, #40	; 0x28
 800b800:	af02      	add	r7, sp, #8
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	4613      	mov	r3, r2
 800b808:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10a      	bne.n	800b826 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	613b      	str	r3, [r7, #16]
}
 800b822:	bf00      	nop
 800b824:	e7fe      	b.n	800b824 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	fb02 f303 	mul.w	r3, r2, r3
 800b82e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	3348      	adds	r3, #72	; 0x48
 800b834:	4618      	mov	r0, r3
 800b836:	f002 f97f 	bl	800db38 <pvPortMalloc>
 800b83a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d011      	beq.n	800b866 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	3348      	adds	r3, #72	; 0x48
 800b84a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b854:	79fa      	ldrb	r2, [r7, #7]
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	4613      	mov	r3, r2
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f805 	bl	800b870 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b866:	69bb      	ldr	r3, [r7, #24]
	}
 800b868:	4618      	mov	r0, r3
 800b86a:	3720      	adds	r7, #32
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d103      	bne.n	800b88c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	69ba      	ldr	r2, [r7, #24]
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	e002      	b.n	800b892 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b89e:	2101      	movs	r1, #1
 800b8a0:	69b8      	ldr	r0, [r7, #24]
 800b8a2:	f7ff fecb 	bl	800b63c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b8a6:	bf00      	nop
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00e      	beq.n	800b8da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f837 	bl	800b948 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b086      	sub	sp, #24
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	617b      	str	r3, [r7, #20]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b8f4:	79fb      	ldrb	r3, [r7, #7]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6939      	ldr	r1, [r7, #16]
 800b8fa:	6978      	ldr	r0, [r7, #20]
 800b8fc:	f7ff ff7e 	bl	800b7fc <xQueueGenericCreate>
 800b900:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f7ff ffd3 	bl	800b8ae <prvInitialiseMutex>

		return xNewQueue;
 800b908:	68fb      	ldr	r3, [r7, #12]
	}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b912:	b580      	push	{r7, lr}
 800b914:	b088      	sub	sp, #32
 800b916:	af02      	add	r7, sp, #8
 800b918:	4603      	mov	r3, r0
 800b91a:	6039      	str	r1, [r7, #0]
 800b91c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b91e:	2301      	movs	r3, #1
 800b920:	617b      	str	r3, [r7, #20]
 800b922:	2300      	movs	r3, #0
 800b924:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b926:	79fb      	ldrb	r3, [r7, #7]
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2200      	movs	r2, #0
 800b92e:	6939      	ldr	r1, [r7, #16]
 800b930:	6978      	ldr	r0, [r7, #20]
 800b932:	f7ff feeb 	bl	800b70c <xQueueGenericCreateStatic>
 800b936:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7ff ffb8 	bl	800b8ae <prvInitialiseMutex>

		return xNewQueue;
 800b93e:	68fb      	ldr	r3, [r7, #12]
	}
 800b940:	4618      	mov	r0, r3
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08e      	sub	sp, #56	; 0x38
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b956:	2300      	movs	r3, #0
 800b958:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <xQueueGenericSend+0x32>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d103      	bne.n	800b988 <xQueueGenericSend+0x40>
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b984:	2b00      	cmp	r3, #0
 800b986:	d101      	bne.n	800b98c <xQueueGenericSend+0x44>
 800b988:	2301      	movs	r3, #1
 800b98a:	e000      	b.n	800b98e <xQueueGenericSend+0x46>
 800b98c:	2300      	movs	r3, #0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10a      	bne.n	800b9a8 <xQueueGenericSend+0x60>
	__asm volatile
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9a4:	bf00      	nop
 800b9a6:	e7fe      	b.n	800b9a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d103      	bne.n	800b9b6 <xQueueGenericSend+0x6e>
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d101      	bne.n	800b9ba <xQueueGenericSend+0x72>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e000      	b.n	800b9bc <xQueueGenericSend+0x74>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	623b      	str	r3, [r7, #32]
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9d6:	f001 fc3d 	bl	800d254 <xTaskGetSchedulerState>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d102      	bne.n	800b9e6 <xQueueGenericSend+0x9e>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <xQueueGenericSend+0xa2>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e000      	b.n	800b9ec <xQueueGenericSend+0xa4>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10a      	bne.n	800ba06 <xQueueGenericSend+0xbe>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	61fb      	str	r3, [r7, #28]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba06:	f001 ff75 	bl	800d8f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d302      	bcc.n	800ba1c <xQueueGenericSend+0xd4>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d129      	bne.n	800ba70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba1c:	683a      	ldr	r2, [r7, #0]
 800ba1e:	68b9      	ldr	r1, [r7, #8]
 800ba20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba22:	f000 fc5e 	bl	800c2e2 <prvCopyDataToQueue>
 800ba26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d010      	beq.n	800ba52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	3324      	adds	r3, #36	; 0x24
 800ba34:	4618      	mov	r0, r3
 800ba36:	f001 fa4d 	bl	800ced4 <xTaskRemoveFromEventList>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d013      	beq.n	800ba68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba40:	4b3f      	ldr	r3, [pc, #252]	; (800bb40 <xQueueGenericSend+0x1f8>)
 800ba42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	f3bf 8f6f 	isb	sy
 800ba50:	e00a      	b.n	800ba68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d007      	beq.n	800ba68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba58:	4b39      	ldr	r3, [pc, #228]	; (800bb40 <xQueueGenericSend+0x1f8>)
 800ba5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba68:	f001 ff74 	bl	800d954 <vPortExitCritical>
				return pdPASS;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e063      	b.n	800bb38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d103      	bne.n	800ba7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba76:	f001 ff6d 	bl	800d954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e05c      	b.n	800bb38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d106      	bne.n	800ba92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba84:	f107 0314 	add.w	r3, r7, #20
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f001 fa85 	bl	800cf98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba92:	f001 ff5f 	bl	800d954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba96:	f001 f825 	bl	800cae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba9a:	f001 ff2b 	bl	800d8f4 <vPortEnterCritical>
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800baa4:	b25b      	sxtb	r3, r3
 800baa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baaa:	d103      	bne.n	800bab4 <xQueueGenericSend+0x16c>
 800baac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baba:	b25b      	sxtb	r3, r3
 800babc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac0:	d103      	bne.n	800baca <xQueueGenericSend+0x182>
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baca:	f001 ff43 	bl	800d954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bace:	1d3a      	adds	r2, r7, #4
 800bad0:	f107 0314 	add.w	r3, r7, #20
 800bad4:	4611      	mov	r1, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 fa74 	bl	800cfc4 <xTaskCheckForTimeOut>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d124      	bne.n	800bb2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae4:	f000 fcf5 	bl	800c4d2 <prvIsQueueFull>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d018      	beq.n	800bb20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	3310      	adds	r3, #16
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	4611      	mov	r1, r2
 800baf6:	4618      	mov	r0, r3
 800baf8:	f001 f9c8 	bl	800ce8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bafc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bafe:	f000 fc80 	bl	800c402 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb02:	f000 fffd 	bl	800cb00 <xTaskResumeAll>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f47f af7c 	bne.w	800ba06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bb0e:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <xQueueGenericSend+0x1f8>)
 800bb10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb14:	601a      	str	r2, [r3, #0]
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	e772      	b.n	800ba06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb22:	f000 fc6e 	bl	800c402 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb26:	f000 ffeb 	bl	800cb00 <xTaskResumeAll>
 800bb2a:	e76c      	b.n	800ba06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb2e:	f000 fc68 	bl	800c402 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb32:	f000 ffe5 	bl	800cb00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3738      	adds	r7, #56	; 0x38
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	e000ed04 	.word	0xe000ed04

0800bb44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b090      	sub	sp, #64	; 0x40
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
 800bb50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10a      	bne.n	800bb72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d103      	bne.n	800bb80 <xQueueGenericSendFromISR+0x3c>
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <xQueueGenericSendFromISR+0x40>
 800bb80:	2301      	movs	r3, #1
 800bb82:	e000      	b.n	800bb86 <xQueueGenericSendFromISR+0x42>
 800bb84:	2300      	movs	r3, #0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10a      	bne.n	800bba0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb9c:	bf00      	nop
 800bb9e:	e7fe      	b.n	800bb9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d103      	bne.n	800bbae <xQueueGenericSendFromISR+0x6a>
 800bba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d101      	bne.n	800bbb2 <xQueueGenericSendFromISR+0x6e>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e000      	b.n	800bbb4 <xQueueGenericSendFromISR+0x70>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	623b      	str	r3, [r7, #32]
}
 800bbca:	bf00      	nop
 800bbcc:	e7fe      	b.n	800bbcc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbce:	f001 ff73 	bl	800dab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bbd2:	f3ef 8211 	mrs	r2, BASEPRI
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	61fa      	str	r2, [r7, #28]
 800bbe8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d302      	bcc.n	800bc00 <xQueueGenericSendFromISR+0xbc>
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d12f      	bne.n	800bc60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc16:	f000 fb64 	bl	800c2e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc22:	d112      	bne.n	800bc4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d016      	beq.n	800bc5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	3324      	adds	r3, #36	; 0x24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f001 f94f 	bl	800ced4 <xTaskRemoveFromEventList>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00b      	beq.n	800bc5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	601a      	str	r2, [r3, #0]
 800bc48:	e007      	b.n	800bc5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc4e:	3301      	adds	r3, #1
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	b25a      	sxtb	r2, r3
 800bc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bc5e:	e001      	b.n	800bc64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3740      	adds	r7, #64	; 0x40
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b08e      	sub	sp, #56	; 0x38
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10a      	bne.n	800bca4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	623b      	str	r3, [r7, #32]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00a      	beq.n	800bcc2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	61fb      	str	r3, [r7, #28]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d103      	bne.n	800bcd2 <xQueueGiveFromISR+0x58>
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <xQueueGiveFromISR+0x5c>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e000      	b.n	800bcd8 <xQueueGiveFromISR+0x5e>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10a      	bne.n	800bcf2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	61bb      	str	r3, [r7, #24]
}
 800bcee:	bf00      	nop
 800bcf0:	e7fe      	b.n	800bcf0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcf2:	f001 fee1 	bl	800dab8 <vPortValidateInterruptPriority>
	__asm volatile
 800bcf6:	f3ef 8211 	mrs	r2, BASEPRI
 800bcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	617a      	str	r2, [r7, #20]
 800bd0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bd0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d22b      	bcs.n	800bd7a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3c:	d112      	bne.n	800bd64 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d016      	beq.n	800bd74 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	3324      	adds	r3, #36	; 0x24
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f001 f8c2 	bl	800ced4 <xTaskRemoveFromEventList>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00e      	beq.n	800bd74 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00b      	beq.n	800bd74 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	601a      	str	r2, [r3, #0]
 800bd62:	e007      	b.n	800bd74 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd68:	3301      	adds	r3, #1
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	b25a      	sxtb	r2, r3
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd74:	2301      	movs	r3, #1
 800bd76:	637b      	str	r3, [r7, #52]	; 0x34
 800bd78:	e001      	b.n	800bd7e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f383 8811 	msr	BASEPRI, r3
}
 800bd88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3738      	adds	r7, #56	; 0x38
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b08c      	sub	sp, #48	; 0x30
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bda0:	2300      	movs	r3, #0
 800bda2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <xQueueReceive+0x30>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	623b      	str	r3, [r7, #32]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d103      	bne.n	800bdd2 <xQueueReceive+0x3e>
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <xQueueReceive+0x42>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e000      	b.n	800bdd8 <xQueueReceive+0x44>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10a      	bne.n	800bdf2 <xQueueReceive+0x5e>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	61fb      	str	r3, [r7, #28]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdf2:	f001 fa2f 	bl	800d254 <xTaskGetSchedulerState>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d102      	bne.n	800be02 <xQueueReceive+0x6e>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <xQueueReceive+0x72>
 800be02:	2301      	movs	r3, #1
 800be04:	e000      	b.n	800be08 <xQueueReceive+0x74>
 800be06:	2300      	movs	r3, #0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10a      	bne.n	800be22 <xQueueReceive+0x8e>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	61bb      	str	r3, [r7, #24]
}
 800be1e:	bf00      	nop
 800be20:	e7fe      	b.n	800be20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be22:	f001 fd67 	bl	800d8f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d01f      	beq.n	800be72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be32:	68b9      	ldr	r1, [r7, #8]
 800be34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be36:	f000 fabe 	bl	800c3b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	1e5a      	subs	r2, r3, #1
 800be3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00f      	beq.n	800be6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	3310      	adds	r3, #16
 800be4e:	4618      	mov	r0, r3
 800be50:	f001 f840 	bl	800ced4 <xTaskRemoveFromEventList>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d007      	beq.n	800be6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be5a:	4b3d      	ldr	r3, [pc, #244]	; (800bf50 <xQueueReceive+0x1bc>)
 800be5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be6a:	f001 fd73 	bl	800d954 <vPortExitCritical>
				return pdPASS;
 800be6e:	2301      	movs	r3, #1
 800be70:	e069      	b.n	800bf46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d103      	bne.n	800be80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be78:	f001 fd6c 	bl	800d954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be7c:	2300      	movs	r3, #0
 800be7e:	e062      	b.n	800bf46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	2b00      	cmp	r3, #0
 800be84:	d106      	bne.n	800be94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be86:	f107 0310 	add.w	r3, r7, #16
 800be8a:	4618      	mov	r0, r3
 800be8c:	f001 f884 	bl	800cf98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be90:	2301      	movs	r3, #1
 800be92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be94:	f001 fd5e 	bl	800d954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be98:	f000 fe24 	bl	800cae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be9c:	f001 fd2a 	bl	800d8f4 <vPortEnterCritical>
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bea6:	b25b      	sxtb	r3, r3
 800bea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beac:	d103      	bne.n	800beb6 <xQueueReceive+0x122>
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bebc:	b25b      	sxtb	r3, r3
 800bebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec2:	d103      	bne.n	800becc <xQueueReceive+0x138>
 800bec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800becc:	f001 fd42 	bl	800d954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bed0:	1d3a      	adds	r2, r7, #4
 800bed2:	f107 0310 	add.w	r3, r7, #16
 800bed6:	4611      	mov	r1, r2
 800bed8:	4618      	mov	r0, r3
 800beda:	f001 f873 	bl	800cfc4 <xTaskCheckForTimeOut>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d123      	bne.n	800bf2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bee6:	f000 fade 	bl	800c4a6 <prvIsQueueEmpty>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d017      	beq.n	800bf20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef2:	3324      	adds	r3, #36	; 0x24
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	4611      	mov	r1, r2
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 ffc7 	bl	800ce8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800befe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf00:	f000 fa7f 	bl	800c402 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf04:	f000 fdfc 	bl	800cb00 <xTaskResumeAll>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d189      	bne.n	800be22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bf0e:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <xQueueReceive+0x1bc>)
 800bf10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	e780      	b.n	800be22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf22:	f000 fa6e 	bl	800c402 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf26:	f000 fdeb 	bl	800cb00 <xTaskResumeAll>
 800bf2a:	e77a      	b.n	800be22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bf2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf2e:	f000 fa68 	bl	800c402 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf32:	f000 fde5 	bl	800cb00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf38:	f000 fab5 	bl	800c4a6 <prvIsQueueEmpty>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f43f af6f 	beq.w	800be22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3730      	adds	r7, #48	; 0x30
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	e000ed04 	.word	0xe000ed04

0800bf54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b08e      	sub	sp, #56	; 0x38
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bf66:	2300      	movs	r3, #0
 800bf68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10a      	bne.n	800bf86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	623b      	str	r3, [r7, #32]
}
 800bf82:	bf00      	nop
 800bf84:	e7fe      	b.n	800bf84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00a      	beq.n	800bfa4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	61fb      	str	r3, [r7, #28]
}
 800bfa0:	bf00      	nop
 800bfa2:	e7fe      	b.n	800bfa2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfa4:	f001 f956 	bl	800d254 <xTaskGetSchedulerState>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d102      	bne.n	800bfb4 <xQueueSemaphoreTake+0x60>
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <xQueueSemaphoreTake+0x64>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e000      	b.n	800bfba <xQueueSemaphoreTake+0x66>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10a      	bne.n	800bfd4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	61bb      	str	r3, [r7, #24]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfd4:	f001 fc8e 	bl	800d8f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfdc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d024      	beq.n	800c02e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	1e5a      	subs	r2, r3, #1
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bff4:	f001 fad6 	bl	800d5a4 <pvTaskIncrementMutexHeldCount>
 800bff8:	4602      	mov	r2, r0
 800bffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00f      	beq.n	800c026 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	3310      	adds	r3, #16
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 ff62 	bl	800ced4 <xTaskRemoveFromEventList>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d007      	beq.n	800c026 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c016:	4b54      	ldr	r3, [pc, #336]	; (800c168 <xQueueSemaphoreTake+0x214>)
 800c018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01c:	601a      	str	r2, [r3, #0]
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c026:	f001 fc95 	bl	800d954 <vPortExitCritical>
				return pdPASS;
 800c02a:	2301      	movs	r3, #1
 800c02c:	e097      	b.n	800c15e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d111      	bne.n	800c058 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	617b      	str	r3, [r7, #20]
}
 800c04c:	bf00      	nop
 800c04e:	e7fe      	b.n	800c04e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c050:	f001 fc80 	bl	800d954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c054:	2300      	movs	r3, #0
 800c056:	e082      	b.n	800c15e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d106      	bne.n	800c06c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c05e:	f107 030c 	add.w	r3, r7, #12
 800c062:	4618      	mov	r0, r3
 800c064:	f000 ff98 	bl	800cf98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c068:	2301      	movs	r3, #1
 800c06a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c06c:	f001 fc72 	bl	800d954 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c070:	f000 fd38 	bl	800cae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c074:	f001 fc3e 	bl	800d8f4 <vPortEnterCritical>
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c07e:	b25b      	sxtb	r3, r3
 800c080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c084:	d103      	bne.n	800c08e <xQueueSemaphoreTake+0x13a>
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c094:	b25b      	sxtb	r3, r3
 800c096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09a:	d103      	bne.n	800c0a4 <xQueueSemaphoreTake+0x150>
 800c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0a4:	f001 fc56 	bl	800d954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0a8:	463a      	mov	r2, r7
 800c0aa:	f107 030c 	add.w	r3, r7, #12
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 ff87 	bl	800cfc4 <xTaskCheckForTimeOut>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d132      	bne.n	800c122 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0be:	f000 f9f2 	bl	800c4a6 <prvIsQueueEmpty>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d026      	beq.n	800c116 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d109      	bne.n	800c0e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c0d0:	f001 fc10 	bl	800d8f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f001 f8d9 	bl	800d290 <xTaskPriorityInherit>
 800c0de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c0e0:	f001 fc38 	bl	800d954 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	3324      	adds	r3, #36	; 0x24
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f000 fecd 	bl	800ce8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0f4:	f000 f985 	bl	800c402 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0f8:	f000 fd02 	bl	800cb00 <xTaskResumeAll>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f47f af68 	bne.w	800bfd4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c104:	4b18      	ldr	r3, [pc, #96]	; (800c168 <xQueueSemaphoreTake+0x214>)
 800c106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	e75e      	b.n	800bfd4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c118:	f000 f973 	bl	800c402 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c11c:	f000 fcf0 	bl	800cb00 <xTaskResumeAll>
 800c120:	e758      	b.n	800bfd4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c124:	f000 f96d 	bl	800c402 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c128:	f000 fcea 	bl	800cb00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c12c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c12e:	f000 f9ba 	bl	800c4a6 <prvIsQueueEmpty>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	f43f af4d 	beq.w	800bfd4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00d      	beq.n	800c15c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c140:	f001 fbd8 	bl	800d8f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c146:	f000 f8b4 	bl	800c2b2 <prvGetDisinheritPriorityAfterTimeout>
 800c14a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c152:	4618      	mov	r0, r3
 800c154:	f001 f998 	bl	800d488 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c158:	f001 fbfc 	bl	800d954 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c15c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3738      	adds	r7, #56	; 0x38
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	e000ed04 	.word	0xe000ed04

0800c16c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08e      	sub	sp, #56	; 0x38
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10a      	bne.n	800c198 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	623b      	str	r3, [r7, #32]
}
 800c194:	bf00      	nop
 800c196:	e7fe      	b.n	800c196 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d103      	bne.n	800c1a6 <xQueueReceiveFromISR+0x3a>
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <xQueueReceiveFromISR+0x3e>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e000      	b.n	800c1ac <xQueueReceiveFromISR+0x40>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10a      	bne.n	800c1c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	61fb      	str	r3, [r7, #28]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1c6:	f001 fc77 	bl	800dab8 <vPortValidateInterruptPriority>
	__asm volatile
 800c1ca:	f3ef 8211 	mrs	r2, BASEPRI
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	61ba      	str	r2, [r7, #24]
 800c1e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c1e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d02f      	beq.n	800c252 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1fc:	68b9      	ldr	r1, [r7, #8]
 800c1fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c200:	f000 f8d9 	bl	800c3b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c206:	1e5a      	subs	r2, r3, #1
 800c208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c20c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c214:	d112      	bne.n	800c23c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d016      	beq.n	800c24c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	3310      	adds	r3, #16
 800c222:	4618      	mov	r0, r3
 800c224:	f000 fe56 	bl	800ced4 <xTaskRemoveFromEventList>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00e      	beq.n	800c24c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00b      	beq.n	800c24c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	e007      	b.n	800c24c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c23c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c240:	3301      	adds	r3, #1
 800c242:	b2db      	uxtb	r3, r3
 800c244:	b25a      	sxtb	r2, r3
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c24c:	2301      	movs	r3, #1
 800c24e:	637b      	str	r3, [r7, #52]	; 0x34
 800c250:	e001      	b.n	800c256 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c252:	2300      	movs	r3, #0
 800c254:	637b      	str	r3, [r7, #52]	; 0x34
 800c256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c258:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	f383 8811 	msr	BASEPRI, r3
}
 800c260:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c264:	4618      	mov	r0, r3
 800c266:	3738      	adds	r7, #56	; 0x38
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10a      	bne.n	800c294 <vQueueDelete+0x28>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	60bb      	str	r3, [r7, #8]
}
 800c290:	bf00      	nop
 800c292:	e7fe      	b.n	800c292 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 f935 	bl	800c504 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f001 fd13 	bl	800dcd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c2aa:	bf00      	nop
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c2b2:	b480      	push	{r7}
 800c2b4:	b085      	sub	sp, #20
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d006      	beq.n	800c2d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f1c3 0307 	rsb	r3, r3, #7
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	e001      	b.n	800c2d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
	}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b086      	sub	sp, #24
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10d      	bne.n	800c31c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d14d      	bne.n	800c3a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f001 f835 	bl	800d37c <xTaskPriorityDisinherit>
 800c312:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	609a      	str	r2, [r3, #8]
 800c31a:	e043      	b.n	800c3a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d119      	bne.n	800c356 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6858      	ldr	r0, [r3, #4]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32a:	461a      	mov	r2, r3
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	f00b fbea 	bl	8017b06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33a:	441a      	add	r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d32b      	bcc.n	800c3a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	605a      	str	r2, [r3, #4]
 800c354:	e026      	b.n	800c3a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	68d8      	ldr	r0, [r3, #12]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35e:	461a      	mov	r2, r3
 800c360:	68b9      	ldr	r1, [r7, #8]
 800c362:	f00b fbd0 	bl	8017b06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	68da      	ldr	r2, [r3, #12]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36e:	425b      	negs	r3, r3
 800c370:	441a      	add	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	68da      	ldr	r2, [r3, #12]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d207      	bcs.n	800c392 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	689a      	ldr	r2, [r3, #8]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38a:	425b      	negs	r3, r3
 800c38c:	441a      	add	r2, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b02      	cmp	r3, #2
 800c396:	d105      	bne.n	800c3a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	1c5a      	adds	r2, r3, #1
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c3ac:	697b      	ldr	r3, [r7, #20]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3718      	adds	r7, #24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b082      	sub	sp, #8
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d018      	beq.n	800c3fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68da      	ldr	r2, [r3, #12]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d0:	441a      	add	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68da      	ldr	r2, [r3, #12]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d303      	bcc.n	800c3ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68d9      	ldr	r1, [r3, #12]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	6838      	ldr	r0, [r7, #0]
 800c3f6:	f00b fb86 	bl	8017b06 <memcpy>
	}
}
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b084      	sub	sp, #16
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c40a:	f001 fa73 	bl	800d8f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c414:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c416:	e011      	b.n	800c43c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d012      	beq.n	800c446 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3324      	adds	r3, #36	; 0x24
 800c424:	4618      	mov	r0, r3
 800c426:	f000 fd55 	bl	800ced4 <xTaskRemoveFromEventList>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c430:	f000 fe2a 	bl	800d088 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c434:	7bfb      	ldrb	r3, [r7, #15]
 800c436:	3b01      	subs	r3, #1
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c43c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c440:	2b00      	cmp	r3, #0
 800c442:	dce9      	bgt.n	800c418 <prvUnlockQueue+0x16>
 800c444:	e000      	b.n	800c448 <prvUnlockQueue+0x46>
					break;
 800c446:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	22ff      	movs	r2, #255	; 0xff
 800c44c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c450:	f001 fa80 	bl	800d954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c454:	f001 fa4e 	bl	800d8f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c45e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c460:	e011      	b.n	800c486 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d012      	beq.n	800c490 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3310      	adds	r3, #16
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 fd30 	bl	800ced4 <xTaskRemoveFromEventList>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c47a:	f000 fe05 	bl	800d088 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	3b01      	subs	r3, #1
 800c482:	b2db      	uxtb	r3, r3
 800c484:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c486:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	dce9      	bgt.n	800c462 <prvUnlockQueue+0x60>
 800c48e:	e000      	b.n	800c492 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c490:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	22ff      	movs	r2, #255	; 0xff
 800c496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c49a:	f001 fa5b 	bl	800d954 <vPortExitCritical>
}
 800c49e:	bf00      	nop
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4ae:	f001 fa21 	bl	800d8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d102      	bne.n	800c4c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	60fb      	str	r3, [r7, #12]
 800c4be:	e001      	b.n	800c4c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4c4:	f001 fa46 	bl	800d954 <vPortExitCritical>

	return xReturn;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4da:	f001 fa0b 	bl	800d8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d102      	bne.n	800c4f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	60fb      	str	r3, [r7, #12]
 800c4ee:	e001      	b.n	800c4f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4f4:	f001 fa2e 	bl	800d954 <vPortExitCritical>

	return xReturn;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
	...

0800c504 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c50c:	2300      	movs	r3, #0
 800c50e:	60fb      	str	r3, [r7, #12]
 800c510:	e016      	b.n	800c540 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c512:	4a10      	ldr	r2, [pc, #64]	; (800c554 <vQueueUnregisterQueue+0x50>)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	00db      	lsls	r3, r3, #3
 800c518:	4413      	add	r3, r2
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d10b      	bne.n	800c53a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c522:	4a0c      	ldr	r2, [pc, #48]	; (800c554 <vQueueUnregisterQueue+0x50>)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2100      	movs	r1, #0
 800c528:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c52c:	4a09      	ldr	r2, [pc, #36]	; (800c554 <vQueueUnregisterQueue+0x50>)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	00db      	lsls	r3, r3, #3
 800c532:	4413      	add	r3, r2
 800c534:	2200      	movs	r2, #0
 800c536:	605a      	str	r2, [r3, #4]
				break;
 800c538:	e006      	b.n	800c548 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b07      	cmp	r3, #7
 800c544:	d9e5      	bls.n	800c512 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c546:	bf00      	nop
 800c548:	bf00      	nop
 800c54a:	3714      	adds	r7, #20
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr
 800c554:	20002de0 	.word	0x20002de0

0800c558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08e      	sub	sp, #56	; 0x38
 800c55c:	af04      	add	r7, sp, #16
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10a      	bne.n	800c582 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	623b      	str	r3, [r7, #32]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10a      	bne.n	800c59e <xTaskCreateStatic+0x46>
	__asm volatile
 800c588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	61fb      	str	r3, [r7, #28]
}
 800c59a:	bf00      	nop
 800c59c:	e7fe      	b.n	800c59c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c59e:	23b4      	movs	r3, #180	; 0xb4
 800c5a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2bb4      	cmp	r3, #180	; 0xb4
 800c5a6:	d00a      	beq.n	800c5be <xTaskCreateStatic+0x66>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	61bb      	str	r3, [r7, #24]
}
 800c5ba:	bf00      	nop
 800c5bc:	e7fe      	b.n	800c5bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c5be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d01e      	beq.n	800c604 <xTaskCreateStatic+0xac>
 800c5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d01b      	beq.n	800c604 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	2202      	movs	r2, #2
 800c5da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9303      	str	r3, [sp, #12]
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e4:	9302      	str	r3, [sp, #8]
 800c5e6:	f107 0314 	add.w	r3, r7, #20
 800c5ea:	9301      	str	r3, [sp, #4]
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	68b9      	ldr	r1, [r7, #8]
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 f850 	bl	800c69c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5fe:	f000 f8eb 	bl	800c7d8 <prvAddNewTaskToReadyList>
 800c602:	e001      	b.n	800c608 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c604:	2300      	movs	r3, #0
 800c606:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c608:	697b      	ldr	r3, [r7, #20]
	}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3728      	adds	r7, #40	; 0x28
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c612:	b580      	push	{r7, lr}
 800c614:	b08c      	sub	sp, #48	; 0x30
 800c616:	af04      	add	r7, sp, #16
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	60b9      	str	r1, [r7, #8]
 800c61c:	603b      	str	r3, [r7, #0]
 800c61e:	4613      	mov	r3, r2
 800c620:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c622:	88fb      	ldrh	r3, [r7, #6]
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	4618      	mov	r0, r3
 800c628:	f001 fa86 	bl	800db38 <pvPortMalloc>
 800c62c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00e      	beq.n	800c652 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c634:	20b4      	movs	r0, #180	; 0xb4
 800c636:	f001 fa7f 	bl	800db38 <pvPortMalloc>
 800c63a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d003      	beq.n	800c64a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	631a      	str	r2, [r3, #48]	; 0x30
 800c648:	e005      	b.n	800c656 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c64a:	6978      	ldr	r0, [r7, #20]
 800c64c:	f001 fb40 	bl	800dcd0 <vPortFree>
 800c650:	e001      	b.n	800c656 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c652:	2300      	movs	r3, #0
 800c654:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d017      	beq.n	800c68c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c664:	88fa      	ldrh	r2, [r7, #6]
 800c666:	2300      	movs	r3, #0
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	9302      	str	r3, [sp, #8]
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 f80e 	bl	800c69c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c680:	69f8      	ldr	r0, [r7, #28]
 800c682:	f000 f8a9 	bl	800c7d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c686:	2301      	movs	r3, #1
 800c688:	61bb      	str	r3, [r7, #24]
 800c68a:	e002      	b.n	800c692 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c68c:	f04f 33ff 	mov.w	r3, #4294967295
 800c690:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c692:	69bb      	ldr	r3, [r7, #24]
	}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
 800c6a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4413      	add	r3, r2
 800c6ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	f023 0307 	bic.w	r3, r3, #7
 800c6c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	f003 0307 	and.w	r3, r3, #7
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00a      	beq.n	800c6e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	617b      	str	r3, [r7, #20]
}
 800c6e0:	bf00      	nop
 800c6e2:	e7fe      	b.n	800c6e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d01f      	beq.n	800c72a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	61fb      	str	r3, [r7, #28]
 800c6ee:	e012      	b.n	800c716 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c6f0:	68ba      	ldr	r2, [r7, #8]
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	7819      	ldrb	r1, [r3, #0]
 800c6f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	3334      	adds	r3, #52	; 0x34
 800c700:	460a      	mov	r2, r1
 800c702:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	4413      	add	r3, r2
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d006      	beq.n	800c71e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	3301      	adds	r3, #1
 800c714:	61fb      	str	r3, [r7, #28]
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	2b0f      	cmp	r3, #15
 800c71a:	d9e9      	bls.n	800c6f0 <prvInitialiseNewTask+0x54>
 800c71c:	e000      	b.n	800c720 <prvInitialiseNewTask+0x84>
			{
				break;
 800c71e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c722:	2200      	movs	r2, #0
 800c724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c728:	e003      	b.n	800c732 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	2200      	movs	r2, #0
 800c72e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	2b06      	cmp	r3, #6
 800c736:	d901      	bls.n	800c73c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c738:	2306      	movs	r3, #6
 800c73a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c740:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c746:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74a:	2200      	movs	r2, #0
 800c74c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c750:	3304      	adds	r3, #4
 800c752:	4618      	mov	r0, r3
 800c754:	f7fe fedd 	bl	800b512 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75a:	3318      	adds	r3, #24
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7fe fed8 	bl	800b512 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c766:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	f1c3 0207 	rsb	r2, r3, #7
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c776:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	2200      	movs	r2, #0
 800c77c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	2200      	movs	r2, #0
 800c784:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	334c      	adds	r3, #76	; 0x4c
 800c78c:	2260      	movs	r2, #96	; 0x60
 800c78e:	2100      	movs	r1, #0
 800c790:	4618      	mov	r0, r3
 800c792:	f00b f9e0 	bl	8017b56 <memset>
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	4a0c      	ldr	r2, [pc, #48]	; (800c7cc <prvInitialiseNewTask+0x130>)
 800c79a:	651a      	str	r2, [r3, #80]	; 0x50
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	4a0c      	ldr	r2, [pc, #48]	; (800c7d0 <prvInitialiseNewTask+0x134>)
 800c7a0:	655a      	str	r2, [r3, #84]	; 0x54
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	4a0b      	ldr	r2, [pc, #44]	; (800c7d4 <prvInitialiseNewTask+0x138>)
 800c7a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7a8:	683a      	ldr	r2, [r7, #0]
 800c7aa:	68f9      	ldr	r1, [r7, #12]
 800c7ac:	69b8      	ldr	r0, [r7, #24]
 800c7ae:	f000 ff73 	bl	800d698 <pxPortInitialiseStack>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7c4:	bf00      	nop
 800c7c6:	3720      	adds	r7, #32
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	0801b694 	.word	0x0801b694
 800c7d0:	0801b6b4 	.word	0x0801b6b4
 800c7d4:	0801b674 	.word	0x0801b674

0800c7d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c7e0:	f001 f888 	bl	800d8f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c7e4:	4b2a      	ldr	r3, [pc, #168]	; (800c890 <prvAddNewTaskToReadyList+0xb8>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	4a29      	ldr	r2, [pc, #164]	; (800c890 <prvAddNewTaskToReadyList+0xb8>)
 800c7ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c7ee:	4b29      	ldr	r3, [pc, #164]	; (800c894 <prvAddNewTaskToReadyList+0xbc>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d109      	bne.n	800c80a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c7f6:	4a27      	ldr	r2, [pc, #156]	; (800c894 <prvAddNewTaskToReadyList+0xbc>)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c7fc:	4b24      	ldr	r3, [pc, #144]	; (800c890 <prvAddNewTaskToReadyList+0xb8>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d110      	bne.n	800c826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c804:	f000 fc64 	bl	800d0d0 <prvInitialiseTaskLists>
 800c808:	e00d      	b.n	800c826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c80a:	4b23      	ldr	r3, [pc, #140]	; (800c898 <prvAddNewTaskToReadyList+0xc0>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d109      	bne.n	800c826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c812:	4b20      	ldr	r3, [pc, #128]	; (800c894 <prvAddNewTaskToReadyList+0xbc>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d802      	bhi.n	800c826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c820:	4a1c      	ldr	r2, [pc, #112]	; (800c894 <prvAddNewTaskToReadyList+0xbc>)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c826:	4b1d      	ldr	r3, [pc, #116]	; (800c89c <prvAddNewTaskToReadyList+0xc4>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	3301      	adds	r3, #1
 800c82c:	4a1b      	ldr	r2, [pc, #108]	; (800c89c <prvAddNewTaskToReadyList+0xc4>)
 800c82e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c834:	2201      	movs	r2, #1
 800c836:	409a      	lsls	r2, r3
 800c838:	4b19      	ldr	r3, [pc, #100]	; (800c8a0 <prvAddNewTaskToReadyList+0xc8>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	4a18      	ldr	r2, [pc, #96]	; (800c8a0 <prvAddNewTaskToReadyList+0xc8>)
 800c840:	6013      	str	r3, [r2, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c846:	4613      	mov	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	4a15      	ldr	r2, [pc, #84]	; (800c8a4 <prvAddNewTaskToReadyList+0xcc>)
 800c850:	441a      	add	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	3304      	adds	r3, #4
 800c856:	4619      	mov	r1, r3
 800c858:	4610      	mov	r0, r2
 800c85a:	f7fe fe67 	bl	800b52c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c85e:	f001 f879 	bl	800d954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c862:	4b0d      	ldr	r3, [pc, #52]	; (800c898 <prvAddNewTaskToReadyList+0xc0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00e      	beq.n	800c888 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c86a:	4b0a      	ldr	r3, [pc, #40]	; (800c894 <prvAddNewTaskToReadyList+0xbc>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c874:	429a      	cmp	r2, r3
 800c876:	d207      	bcs.n	800c888 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c878:	4b0b      	ldr	r3, [pc, #44]	; (800c8a8 <prvAddNewTaskToReadyList+0xd0>)
 800c87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c87e:	601a      	str	r2, [r3, #0]
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	20002f20 	.word	0x20002f20
 800c894:	20002e20 	.word	0x20002e20
 800c898:	20002f2c 	.word	0x20002f2c
 800c89c:	20002f3c 	.word	0x20002f3c
 800c8a0:	20002f28 	.word	0x20002f28
 800c8a4:	20002e24 	.word	0x20002e24
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08a      	sub	sp, #40	; 0x28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10a      	bne.n	800c8d6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	617b      	str	r3, [r7, #20]
}
 800c8d2:	bf00      	nop
 800c8d4:	e7fe      	b.n	800c8d4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10a      	bne.n	800c8f2 <vTaskDelayUntil+0x46>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	613b      	str	r3, [r7, #16]
}
 800c8ee:	bf00      	nop
 800c8f0:	e7fe      	b.n	800c8f0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c8f2:	4b2a      	ldr	r3, [pc, #168]	; (800c99c <vTaskDelayUntil+0xf0>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00a      	beq.n	800c910 <vTaskDelayUntil+0x64>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	60fb      	str	r3, [r7, #12]
}
 800c90c:	bf00      	nop
 800c90e:	e7fe      	b.n	800c90e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c910:	f000 f8e8 	bl	800cae4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c914:	4b22      	ldr	r3, [pc, #136]	; (800c9a0 <vTaskDelayUntil+0xf4>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	4413      	add	r3, r2
 800c922:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6a3a      	ldr	r2, [r7, #32]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d20b      	bcs.n	800c946 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	69fa      	ldr	r2, [r7, #28]
 800c934:	429a      	cmp	r2, r3
 800c936:	d211      	bcs.n	800c95c <vTaskDelayUntil+0xb0>
 800c938:	69fa      	ldr	r2, [r7, #28]
 800c93a:	6a3b      	ldr	r3, [r7, #32]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d90d      	bls.n	800c95c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c940:	2301      	movs	r3, #1
 800c942:	627b      	str	r3, [r7, #36]	; 0x24
 800c944:	e00a      	b.n	800c95c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	69fa      	ldr	r2, [r7, #28]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d303      	bcc.n	800c958 <vTaskDelayUntil+0xac>
 800c950:	69fa      	ldr	r2, [r7, #28]
 800c952:	6a3b      	ldr	r3, [r7, #32]
 800c954:	429a      	cmp	r2, r3
 800c956:	d901      	bls.n	800c95c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c958:	2301      	movs	r3, #1
 800c95a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	69fa      	ldr	r2, [r7, #28]
 800c960:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c964:	2b00      	cmp	r3, #0
 800c966:	d006      	beq.n	800c976 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c968:	69fa      	ldr	r2, [r7, #28]
 800c96a:	6a3b      	ldr	r3, [r7, #32]
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	2100      	movs	r1, #0
 800c970:	4618      	mov	r0, r3
 800c972:	f000 fe2b 	bl	800d5cc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c976:	f000 f8c3 	bl	800cb00 <xTaskResumeAll>
 800c97a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d107      	bne.n	800c992 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c982:	4b08      	ldr	r3, [pc, #32]	; (800c9a4 <vTaskDelayUntil+0xf8>)
 800c984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c992:	bf00      	nop
 800c994:	3728      	adds	r7, #40	; 0x28
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	20002f48 	.word	0x20002f48
 800c9a0:	20002f24 	.word	0x20002f24
 800c9a4:	e000ed04 	.word	0xe000ed04

0800c9a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d017      	beq.n	800c9ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c9ba:	4b13      	ldr	r3, [pc, #76]	; (800ca08 <vTaskDelay+0x60>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00a      	beq.n	800c9d8 <vTaskDelay+0x30>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	60bb      	str	r3, [r7, #8]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c9d8:	f000 f884 	bl	800cae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c9dc:	2100      	movs	r1, #0
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fdf4 	bl	800d5cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c9e4:	f000 f88c 	bl	800cb00 <xTaskResumeAll>
 800c9e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d107      	bne.n	800ca00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c9f0:	4b06      	ldr	r3, [pc, #24]	; (800ca0c <vTaskDelay+0x64>)
 800c9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f6:	601a      	str	r2, [r3, #0]
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca00:	bf00      	nop
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20002f48 	.word	0x20002f48
 800ca0c:	e000ed04 	.word	0xe000ed04

0800ca10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08a      	sub	sp, #40	; 0x28
 800ca14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca16:	2300      	movs	r3, #0
 800ca18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca1e:	463a      	mov	r2, r7
 800ca20:	1d39      	adds	r1, r7, #4
 800ca22:	f107 0308 	add.w	r3, r7, #8
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7f3 fe5a 	bl	80006e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	9202      	str	r2, [sp, #8]
 800ca34:	9301      	str	r3, [sp, #4]
 800ca36:	2300      	movs	r3, #0
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	460a      	mov	r2, r1
 800ca3e:	4921      	ldr	r1, [pc, #132]	; (800cac4 <vTaskStartScheduler+0xb4>)
 800ca40:	4821      	ldr	r0, [pc, #132]	; (800cac8 <vTaskStartScheduler+0xb8>)
 800ca42:	f7ff fd89 	bl	800c558 <xTaskCreateStatic>
 800ca46:	4603      	mov	r3, r0
 800ca48:	4a20      	ldr	r2, [pc, #128]	; (800cacc <vTaskStartScheduler+0xbc>)
 800ca4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca4c:	4b1f      	ldr	r3, [pc, #124]	; (800cacc <vTaskStartScheduler+0xbc>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d002      	beq.n	800ca5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca54:	2301      	movs	r3, #1
 800ca56:	617b      	str	r3, [r7, #20]
 800ca58:	e001      	b.n	800ca5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d11b      	bne.n	800ca9c <vTaskStartScheduler+0x8c>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	613b      	str	r3, [r7, #16]
}
 800ca76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca78:	4b15      	ldr	r3, [pc, #84]	; (800cad0 <vTaskStartScheduler+0xc0>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	334c      	adds	r3, #76	; 0x4c
 800ca7e:	4a15      	ldr	r2, [pc, #84]	; (800cad4 <vTaskStartScheduler+0xc4>)
 800ca80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca82:	4b15      	ldr	r3, [pc, #84]	; (800cad8 <vTaskStartScheduler+0xc8>)
 800ca84:	f04f 32ff 	mov.w	r2, #4294967295
 800ca88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca8a:	4b14      	ldr	r3, [pc, #80]	; (800cadc <vTaskStartScheduler+0xcc>)
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca90:	4b13      	ldr	r3, [pc, #76]	; (800cae0 <vTaskStartScheduler+0xd0>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca96:	f000 fe8b 	bl	800d7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca9a:	e00e      	b.n	800caba <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa2:	d10a      	bne.n	800caba <vTaskStartScheduler+0xaa>
	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	60fb      	str	r3, [r7, #12]
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <vTaskStartScheduler+0xa8>
}
 800caba:	bf00      	nop
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	0801923c 	.word	0x0801923c
 800cac8:	0800d0a1 	.word	0x0800d0a1
 800cacc:	20002f44 	.word	0x20002f44
 800cad0:	20002e20 	.word	0x20002e20
 800cad4:	200001bc 	.word	0x200001bc
 800cad8:	20002f40 	.word	0x20002f40
 800cadc:	20002f2c 	.word	0x20002f2c
 800cae0:	20002f24 	.word	0x20002f24

0800cae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cae4:	b480      	push	{r7}
 800cae6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cae8:	4b04      	ldr	r3, [pc, #16]	; (800cafc <vTaskSuspendAll+0x18>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	3301      	adds	r3, #1
 800caee:	4a03      	ldr	r2, [pc, #12]	; (800cafc <vTaskSuspendAll+0x18>)
 800caf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800caf2:	bf00      	nop
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	20002f48 	.word	0x20002f48

0800cb00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb0e:	4b41      	ldr	r3, [pc, #260]	; (800cc14 <xTaskResumeAll+0x114>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d10a      	bne.n	800cb2c <xTaskResumeAll+0x2c>
	__asm volatile
 800cb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1a:	f383 8811 	msr	BASEPRI, r3
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f3bf 8f4f 	dsb	sy
 800cb26:	603b      	str	r3, [r7, #0]
}
 800cb28:	bf00      	nop
 800cb2a:	e7fe      	b.n	800cb2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb2c:	f000 fee2 	bl	800d8f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb30:	4b38      	ldr	r3, [pc, #224]	; (800cc14 <xTaskResumeAll+0x114>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3b01      	subs	r3, #1
 800cb36:	4a37      	ldr	r2, [pc, #220]	; (800cc14 <xTaskResumeAll+0x114>)
 800cb38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb3a:	4b36      	ldr	r3, [pc, #216]	; (800cc14 <xTaskResumeAll+0x114>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d161      	bne.n	800cc06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb42:	4b35      	ldr	r3, [pc, #212]	; (800cc18 <xTaskResumeAll+0x118>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d05d      	beq.n	800cc06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb4a:	e02e      	b.n	800cbaa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb4c:	4b33      	ldr	r3, [pc, #204]	; (800cc1c <xTaskResumeAll+0x11c>)
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	3318      	adds	r3, #24
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fe fd44 	bl	800b5e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3304      	adds	r3, #4
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fe fd3f 	bl	800b5e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	409a      	lsls	r2, r3
 800cb70:	4b2b      	ldr	r3, [pc, #172]	; (800cc20 <xTaskResumeAll+0x120>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	4a2a      	ldr	r2, [pc, #168]	; (800cc20 <xTaskResumeAll+0x120>)
 800cb78:	6013      	str	r3, [r2, #0]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4a27      	ldr	r2, [pc, #156]	; (800cc24 <xTaskResumeAll+0x124>)
 800cb88:	441a      	add	r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	4619      	mov	r1, r3
 800cb90:	4610      	mov	r0, r2
 800cb92:	f7fe fccb 	bl	800b52c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb9a:	4b23      	ldr	r3, [pc, #140]	; (800cc28 <xTaskResumeAll+0x128>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d302      	bcc.n	800cbaa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cba4:	4b21      	ldr	r3, [pc, #132]	; (800cc2c <xTaskResumeAll+0x12c>)
 800cba6:	2201      	movs	r2, #1
 800cba8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbaa:	4b1c      	ldr	r3, [pc, #112]	; (800cc1c <xTaskResumeAll+0x11c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1cc      	bne.n	800cb4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cbb8:	f000 fb2c 	bl	800d214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cbbc:	4b1c      	ldr	r3, [pc, #112]	; (800cc30 <xTaskResumeAll+0x130>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d010      	beq.n	800cbea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cbc8:	f000 f846 	bl	800cc58 <xTaskIncrementTick>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d002      	beq.n	800cbd8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cbd2:	4b16      	ldr	r3, [pc, #88]	; (800cc2c <xTaskResumeAll+0x12c>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1f1      	bne.n	800cbc8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cbe4:	4b12      	ldr	r3, [pc, #72]	; (800cc30 <xTaskResumeAll+0x130>)
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cbea:	4b10      	ldr	r3, [pc, #64]	; (800cc2c <xTaskResumeAll+0x12c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d009      	beq.n	800cc06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cbf6:	4b0f      	ldr	r3, [pc, #60]	; (800cc34 <xTaskResumeAll+0x134>)
 800cbf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc06:	f000 fea5 	bl	800d954 <vPortExitCritical>

	return xAlreadyYielded;
 800cc0a:	68bb      	ldr	r3, [r7, #8]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	20002f48 	.word	0x20002f48
 800cc18:	20002f20 	.word	0x20002f20
 800cc1c:	20002ee0 	.word	0x20002ee0
 800cc20:	20002f28 	.word	0x20002f28
 800cc24:	20002e24 	.word	0x20002e24
 800cc28:	20002e20 	.word	0x20002e20
 800cc2c:	20002f34 	.word	0x20002f34
 800cc30:	20002f30 	.word	0x20002f30
 800cc34:	e000ed04 	.word	0xe000ed04

0800cc38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc3e:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <xTaskGetTickCount+0x1c>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc44:	687b      	ldr	r3, [r7, #4]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	370c      	adds	r7, #12
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	20002f24 	.word	0x20002f24

0800cc58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc62:	4b4e      	ldr	r3, [pc, #312]	; (800cd9c <xTaskIncrementTick+0x144>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f040 808e 	bne.w	800cd88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc6c:	4b4c      	ldr	r3, [pc, #304]	; (800cda0 <xTaskIncrementTick+0x148>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3301      	adds	r3, #1
 800cc72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc74:	4a4a      	ldr	r2, [pc, #296]	; (800cda0 <xTaskIncrementTick+0x148>)
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d120      	bne.n	800ccc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc80:	4b48      	ldr	r3, [pc, #288]	; (800cda4 <xTaskIncrementTick+0x14c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00a      	beq.n	800cca0 <xTaskIncrementTick+0x48>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	603b      	str	r3, [r7, #0]
}
 800cc9c:	bf00      	nop
 800cc9e:	e7fe      	b.n	800cc9e <xTaskIncrementTick+0x46>
 800cca0:	4b40      	ldr	r3, [pc, #256]	; (800cda4 <xTaskIncrementTick+0x14c>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	60fb      	str	r3, [r7, #12]
 800cca6:	4b40      	ldr	r3, [pc, #256]	; (800cda8 <xTaskIncrementTick+0x150>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a3e      	ldr	r2, [pc, #248]	; (800cda4 <xTaskIncrementTick+0x14c>)
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	4a3e      	ldr	r2, [pc, #248]	; (800cda8 <xTaskIncrementTick+0x150>)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6013      	str	r3, [r2, #0]
 800ccb4:	4b3d      	ldr	r3, [pc, #244]	; (800cdac <xTaskIncrementTick+0x154>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	4a3c      	ldr	r2, [pc, #240]	; (800cdac <xTaskIncrementTick+0x154>)
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	f000 faa9 	bl	800d214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccc2:	4b3b      	ldr	r3, [pc, #236]	; (800cdb0 <xTaskIncrementTick+0x158>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d348      	bcc.n	800cd5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cccc:	4b35      	ldr	r3, [pc, #212]	; (800cda4 <xTaskIncrementTick+0x14c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d104      	bne.n	800cce0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccd6:	4b36      	ldr	r3, [pc, #216]	; (800cdb0 <xTaskIncrementTick+0x158>)
 800ccd8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccdc:	601a      	str	r2, [r3, #0]
					break;
 800ccde:	e03e      	b.n	800cd5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cce0:	4b30      	ldr	r3, [pc, #192]	; (800cda4 <xTaskIncrementTick+0x14c>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ccf0:	693a      	ldr	r2, [r7, #16]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d203      	bcs.n	800cd00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccf8:	4a2d      	ldr	r2, [pc, #180]	; (800cdb0 <xTaskIncrementTick+0x158>)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccfe:	e02e      	b.n	800cd5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	3304      	adds	r3, #4
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fe fc6e 	bl	800b5e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d004      	beq.n	800cd1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	3318      	adds	r3, #24
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe fc65 	bl	800b5e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd20:	2201      	movs	r2, #1
 800cd22:	409a      	lsls	r2, r3
 800cd24:	4b23      	ldr	r3, [pc, #140]	; (800cdb4 <xTaskIncrementTick+0x15c>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	4a22      	ldr	r2, [pc, #136]	; (800cdb4 <xTaskIncrementTick+0x15c>)
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd32:	4613      	mov	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4413      	add	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4a1f      	ldr	r2, [pc, #124]	; (800cdb8 <xTaskIncrementTick+0x160>)
 800cd3c:	441a      	add	r2, r3
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	3304      	adds	r3, #4
 800cd42:	4619      	mov	r1, r3
 800cd44:	4610      	mov	r0, r2
 800cd46:	f7fe fbf1 	bl	800b52c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4e:	4b1b      	ldr	r3, [pc, #108]	; (800cdbc <xTaskIncrementTick+0x164>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d3b9      	bcc.n	800cccc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd5c:	e7b6      	b.n	800cccc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd5e:	4b17      	ldr	r3, [pc, #92]	; (800cdbc <xTaskIncrementTick+0x164>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd64:	4914      	ldr	r1, [pc, #80]	; (800cdb8 <xTaskIncrementTick+0x160>)
 800cd66:	4613      	mov	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	440b      	add	r3, r1
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d901      	bls.n	800cd7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cd76:	2301      	movs	r3, #1
 800cd78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd7a:	4b11      	ldr	r3, [pc, #68]	; (800cdc0 <xTaskIncrementTick+0x168>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d007      	beq.n	800cd92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cd82:	2301      	movs	r3, #1
 800cd84:	617b      	str	r3, [r7, #20]
 800cd86:	e004      	b.n	800cd92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd88:	4b0e      	ldr	r3, [pc, #56]	; (800cdc4 <xTaskIncrementTick+0x16c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	4a0d      	ldr	r2, [pc, #52]	; (800cdc4 <xTaskIncrementTick+0x16c>)
 800cd90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd92:	697b      	ldr	r3, [r7, #20]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	20002f48 	.word	0x20002f48
 800cda0:	20002f24 	.word	0x20002f24
 800cda4:	20002ed8 	.word	0x20002ed8
 800cda8:	20002edc 	.word	0x20002edc
 800cdac:	20002f38 	.word	0x20002f38
 800cdb0:	20002f40 	.word	0x20002f40
 800cdb4:	20002f28 	.word	0x20002f28
 800cdb8:	20002e24 	.word	0x20002e24
 800cdbc:	20002e20 	.word	0x20002e20
 800cdc0:	20002f34 	.word	0x20002f34
 800cdc4:	20002f30 	.word	0x20002f30

0800cdc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b087      	sub	sp, #28
 800cdcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdce:	4b29      	ldr	r3, [pc, #164]	; (800ce74 <vTaskSwitchContext+0xac>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d003      	beq.n	800cdde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdd6:	4b28      	ldr	r3, [pc, #160]	; (800ce78 <vTaskSwitchContext+0xb0>)
 800cdd8:	2201      	movs	r2, #1
 800cdda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cddc:	e044      	b.n	800ce68 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800cdde:	4b26      	ldr	r3, [pc, #152]	; (800ce78 <vTaskSwitchContext+0xb0>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cde4:	4b25      	ldr	r3, [pc, #148]	; (800ce7c <vTaskSwitchContext+0xb4>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	fab3 f383 	clz	r3, r3
 800cdf0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cdf2:	7afb      	ldrb	r3, [r7, #11]
 800cdf4:	f1c3 031f 	rsb	r3, r3, #31
 800cdf8:	617b      	str	r3, [r7, #20]
 800cdfa:	4921      	ldr	r1, [pc, #132]	; (800ce80 <vTaskSwitchContext+0xb8>)
 800cdfc:	697a      	ldr	r2, [r7, #20]
 800cdfe:	4613      	mov	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	440b      	add	r3, r1
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	607b      	str	r3, [r7, #4]
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <vTaskSwitchContext+0x5a>
 800ce24:	697a      	ldr	r2, [r7, #20]
 800ce26:	4613      	mov	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4a14      	ldr	r2, [pc, #80]	; (800ce80 <vTaskSwitchContext+0xb8>)
 800ce30:	4413      	add	r3, r2
 800ce32:	613b      	str	r3, [r7, #16]
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	605a      	str	r2, [r3, #4]
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	3308      	adds	r3, #8
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d104      	bne.n	800ce54 <vTaskSwitchContext+0x8c>
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	605a      	str	r2, [r3, #4]
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	4a0a      	ldr	r2, [pc, #40]	; (800ce84 <vTaskSwitchContext+0xbc>)
 800ce5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce5e:	4b09      	ldr	r3, [pc, #36]	; (800ce84 <vTaskSwitchContext+0xbc>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	334c      	adds	r3, #76	; 0x4c
 800ce64:	4a08      	ldr	r2, [pc, #32]	; (800ce88 <vTaskSwitchContext+0xc0>)
 800ce66:	6013      	str	r3, [r2, #0]
}
 800ce68:	bf00      	nop
 800ce6a:	371c      	adds	r7, #28
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr
 800ce74:	20002f48 	.word	0x20002f48
 800ce78:	20002f34 	.word	0x20002f34
 800ce7c:	20002f28 	.word	0x20002f28
 800ce80:	20002e24 	.word	0x20002e24
 800ce84:	20002e20 	.word	0x20002e20
 800ce88:	200001bc 	.word	0x200001bc

0800ce8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10a      	bne.n	800ceb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	60fb      	str	r3, [r7, #12]
}
 800ceae:	bf00      	nop
 800ceb0:	e7fe      	b.n	800ceb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ceb2:	4b07      	ldr	r3, [pc, #28]	; (800ced0 <vTaskPlaceOnEventList+0x44>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	3318      	adds	r3, #24
 800ceb8:	4619      	mov	r1, r3
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7fe fb5a 	bl	800b574 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cec0:	2101      	movs	r1, #1
 800cec2:	6838      	ldr	r0, [r7, #0]
 800cec4:	f000 fb82 	bl	800d5cc <prvAddCurrentTaskToDelayedList>
}
 800cec8:	bf00      	nop
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	20002e20 	.word	0x20002e20

0800ced4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10a      	bne.n	800cf00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ceea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	60fb      	str	r3, [r7, #12]
}
 800cefc:	bf00      	nop
 800cefe:	e7fe      	b.n	800cefe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	3318      	adds	r3, #24
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fe fb6e 	bl	800b5e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf0a:	4b1d      	ldr	r3, [pc, #116]	; (800cf80 <xTaskRemoveFromEventList+0xac>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d11c      	bne.n	800cf4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	3304      	adds	r3, #4
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fe fb65 	bl	800b5e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	2201      	movs	r2, #1
 800cf22:	409a      	lsls	r2, r3
 800cf24:	4b17      	ldr	r3, [pc, #92]	; (800cf84 <xTaskRemoveFromEventList+0xb0>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	4a16      	ldr	r2, [pc, #88]	; (800cf84 <xTaskRemoveFromEventList+0xb0>)
 800cf2c:	6013      	str	r3, [r2, #0]
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf32:	4613      	mov	r3, r2
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	4413      	add	r3, r2
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4a13      	ldr	r2, [pc, #76]	; (800cf88 <xTaskRemoveFromEventList+0xb4>)
 800cf3c:	441a      	add	r2, r3
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	3304      	adds	r3, #4
 800cf42:	4619      	mov	r1, r3
 800cf44:	4610      	mov	r0, r2
 800cf46:	f7fe faf1 	bl	800b52c <vListInsertEnd>
 800cf4a:	e005      	b.n	800cf58 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	3318      	adds	r3, #24
 800cf50:	4619      	mov	r1, r3
 800cf52:	480e      	ldr	r0, [pc, #56]	; (800cf8c <xTaskRemoveFromEventList+0xb8>)
 800cf54:	f7fe faea 	bl	800b52c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5c:	4b0c      	ldr	r3, [pc, #48]	; (800cf90 <xTaskRemoveFromEventList+0xbc>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d905      	bls.n	800cf72 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf66:	2301      	movs	r3, #1
 800cf68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf6a:	4b0a      	ldr	r3, [pc, #40]	; (800cf94 <xTaskRemoveFromEventList+0xc0>)
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	601a      	str	r2, [r3, #0]
 800cf70:	e001      	b.n	800cf76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cf72:	2300      	movs	r3, #0
 800cf74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf76:	697b      	ldr	r3, [r7, #20]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	20002f48 	.word	0x20002f48
 800cf84:	20002f28 	.word	0x20002f28
 800cf88:	20002e24 	.word	0x20002e24
 800cf8c:	20002ee0 	.word	0x20002ee0
 800cf90:	20002e20 	.word	0x20002e20
 800cf94:	20002f34 	.word	0x20002f34

0800cf98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfa0:	4b06      	ldr	r3, [pc, #24]	; (800cfbc <vTaskInternalSetTimeOutState+0x24>)
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cfa8:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <vTaskInternalSetTimeOutState+0x28>)
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	605a      	str	r2, [r3, #4]
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	20002f38 	.word	0x20002f38
 800cfc0:	20002f24 	.word	0x20002f24

0800cfc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10a      	bne.n	800cfea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	613b      	str	r3, [r7, #16]
}
 800cfe6:	bf00      	nop
 800cfe8:	e7fe      	b.n	800cfe8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10a      	bne.n	800d006 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	60fb      	str	r3, [r7, #12]
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d006:	f000 fc75 	bl	800d8f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d00a:	4b1d      	ldr	r3, [pc, #116]	; (800d080 <xTaskCheckForTimeOut+0xbc>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	69ba      	ldr	r2, [r7, #24]
 800d016:	1ad3      	subs	r3, r2, r3
 800d018:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d022:	d102      	bne.n	800d02a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d024:	2300      	movs	r3, #0
 800d026:	61fb      	str	r3, [r7, #28]
 800d028:	e023      	b.n	800d072 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	4b15      	ldr	r3, [pc, #84]	; (800d084 <xTaskCheckForTimeOut+0xc0>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	429a      	cmp	r2, r3
 800d034:	d007      	beq.n	800d046 <xTaskCheckForTimeOut+0x82>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	69ba      	ldr	r2, [r7, #24]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d302      	bcc.n	800d046 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d040:	2301      	movs	r3, #1
 800d042:	61fb      	str	r3, [r7, #28]
 800d044:	e015      	b.n	800d072 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d20b      	bcs.n	800d068 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	1ad2      	subs	r2, r2, r3
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f7ff ff9b 	bl	800cf98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d062:	2300      	movs	r3, #0
 800d064:	61fb      	str	r3, [r7, #28]
 800d066:	e004      	b.n	800d072 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	2200      	movs	r2, #0
 800d06c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d06e:	2301      	movs	r3, #1
 800d070:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d072:	f000 fc6f 	bl	800d954 <vPortExitCritical>

	return xReturn;
 800d076:	69fb      	ldr	r3, [r7, #28]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3720      	adds	r7, #32
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	20002f24 	.word	0x20002f24
 800d084:	20002f38 	.word	0x20002f38

0800d088 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d088:	b480      	push	{r7}
 800d08a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d08c:	4b03      	ldr	r3, [pc, #12]	; (800d09c <vTaskMissedYield+0x14>)
 800d08e:	2201      	movs	r2, #1
 800d090:	601a      	str	r2, [r3, #0]
}
 800d092:	bf00      	nop
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	20002f34 	.word	0x20002f34

0800d0a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0a8:	f000 f852 	bl	800d150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0ac:	4b06      	ldr	r3, [pc, #24]	; (800d0c8 <prvIdleTask+0x28>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d9f9      	bls.n	800d0a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d0b4:	4b05      	ldr	r3, [pc, #20]	; (800d0cc <prvIdleTask+0x2c>)
 800d0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d0c4:	e7f0      	b.n	800d0a8 <prvIdleTask+0x8>
 800d0c6:	bf00      	nop
 800d0c8:	20002e24 	.word	0x20002e24
 800d0cc:	e000ed04 	.word	0xe000ed04

0800d0d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	607b      	str	r3, [r7, #4]
 800d0da:	e00c      	b.n	800d0f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	4613      	mov	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4a12      	ldr	r2, [pc, #72]	; (800d130 <prvInitialiseTaskLists+0x60>)
 800d0e8:	4413      	add	r3, r2
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fe f9f1 	bl	800b4d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	607b      	str	r3, [r7, #4]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b06      	cmp	r3, #6
 800d0fa:	d9ef      	bls.n	800d0dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0fc:	480d      	ldr	r0, [pc, #52]	; (800d134 <prvInitialiseTaskLists+0x64>)
 800d0fe:	f7fe f9e8 	bl	800b4d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d102:	480d      	ldr	r0, [pc, #52]	; (800d138 <prvInitialiseTaskLists+0x68>)
 800d104:	f7fe f9e5 	bl	800b4d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d108:	480c      	ldr	r0, [pc, #48]	; (800d13c <prvInitialiseTaskLists+0x6c>)
 800d10a:	f7fe f9e2 	bl	800b4d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d10e:	480c      	ldr	r0, [pc, #48]	; (800d140 <prvInitialiseTaskLists+0x70>)
 800d110:	f7fe f9df 	bl	800b4d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d114:	480b      	ldr	r0, [pc, #44]	; (800d144 <prvInitialiseTaskLists+0x74>)
 800d116:	f7fe f9dc 	bl	800b4d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d11a:	4b0b      	ldr	r3, [pc, #44]	; (800d148 <prvInitialiseTaskLists+0x78>)
 800d11c:	4a05      	ldr	r2, [pc, #20]	; (800d134 <prvInitialiseTaskLists+0x64>)
 800d11e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d120:	4b0a      	ldr	r3, [pc, #40]	; (800d14c <prvInitialiseTaskLists+0x7c>)
 800d122:	4a05      	ldr	r2, [pc, #20]	; (800d138 <prvInitialiseTaskLists+0x68>)
 800d124:	601a      	str	r2, [r3, #0]
}
 800d126:	bf00      	nop
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	20002e24 	.word	0x20002e24
 800d134:	20002eb0 	.word	0x20002eb0
 800d138:	20002ec4 	.word	0x20002ec4
 800d13c:	20002ee0 	.word	0x20002ee0
 800d140:	20002ef4 	.word	0x20002ef4
 800d144:	20002f0c 	.word	0x20002f0c
 800d148:	20002ed8 	.word	0x20002ed8
 800d14c:	20002edc 	.word	0x20002edc

0800d150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d156:	e019      	b.n	800d18c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d158:	f000 fbcc 	bl	800d8f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d15c:	4b10      	ldr	r3, [pc, #64]	; (800d1a0 <prvCheckTasksWaitingTermination+0x50>)
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	3304      	adds	r3, #4
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe fa3c 	bl	800b5e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d16e:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <prvCheckTasksWaitingTermination+0x54>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	3b01      	subs	r3, #1
 800d174:	4a0b      	ldr	r2, [pc, #44]	; (800d1a4 <prvCheckTasksWaitingTermination+0x54>)
 800d176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d178:	4b0b      	ldr	r3, [pc, #44]	; (800d1a8 <prvCheckTasksWaitingTermination+0x58>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	3b01      	subs	r3, #1
 800d17e:	4a0a      	ldr	r2, [pc, #40]	; (800d1a8 <prvCheckTasksWaitingTermination+0x58>)
 800d180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d182:	f000 fbe7 	bl	800d954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 f810 	bl	800d1ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d18c:	4b06      	ldr	r3, [pc, #24]	; (800d1a8 <prvCheckTasksWaitingTermination+0x58>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1e1      	bne.n	800d158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	20002ef4 	.word	0x20002ef4
 800d1a4:	20002f20 	.word	0x20002f20
 800d1a8:	20002f08 	.word	0x20002f08

0800d1ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	334c      	adds	r3, #76	; 0x4c
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f00a fe1b 	bl	8017df4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d108      	bne.n	800d1da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f000 fd7f 	bl	800dcd0 <vPortFree>
				vPortFree( pxTCB );
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 fd7c 	bl	800dcd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d1d8:	e018      	b.n	800d20c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d103      	bne.n	800d1ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 fd73 	bl	800dcd0 <vPortFree>
	}
 800d1ea:	e00f      	b.n	800d20c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d00a      	beq.n	800d20c <prvDeleteTCB+0x60>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	60fb      	str	r3, [r7, #12]
}
 800d208:	bf00      	nop
 800d20a:	e7fe      	b.n	800d20a <prvDeleteTCB+0x5e>
	}
 800d20c:	bf00      	nop
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d21a:	4b0c      	ldr	r3, [pc, #48]	; (800d24c <prvResetNextTaskUnblockTime+0x38>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d104      	bne.n	800d22e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d224:	4b0a      	ldr	r3, [pc, #40]	; (800d250 <prvResetNextTaskUnblockTime+0x3c>)
 800d226:	f04f 32ff 	mov.w	r2, #4294967295
 800d22a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d22c:	e008      	b.n	800d240 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d22e:	4b07      	ldr	r3, [pc, #28]	; (800d24c <prvResetNextTaskUnblockTime+0x38>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	4a04      	ldr	r2, [pc, #16]	; (800d250 <prvResetNextTaskUnblockTime+0x3c>)
 800d23e:	6013      	str	r3, [r2, #0]
}
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	20002ed8 	.word	0x20002ed8
 800d250:	20002f40 	.word	0x20002f40

0800d254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d25a:	4b0b      	ldr	r3, [pc, #44]	; (800d288 <xTaskGetSchedulerState+0x34>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d102      	bne.n	800d268 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d262:	2301      	movs	r3, #1
 800d264:	607b      	str	r3, [r7, #4]
 800d266:	e008      	b.n	800d27a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d268:	4b08      	ldr	r3, [pc, #32]	; (800d28c <xTaskGetSchedulerState+0x38>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d102      	bne.n	800d276 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d270:	2302      	movs	r3, #2
 800d272:	607b      	str	r3, [r7, #4]
 800d274:	e001      	b.n	800d27a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d276:	2300      	movs	r3, #0
 800d278:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d27a:	687b      	ldr	r3, [r7, #4]
	}
 800d27c:	4618      	mov	r0, r3
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr
 800d288:	20002f2c 	.word	0x20002f2c
 800d28c:	20002f48 	.word	0x20002f48

0800d290 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d29c:	2300      	movs	r3, #0
 800d29e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d05e      	beq.n	800d364 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2aa:	4b31      	ldr	r3, [pc, #196]	; (800d370 <xTaskPriorityInherit+0xe0>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d24e      	bcs.n	800d352 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	db06      	blt.n	800d2ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2bc:	4b2c      	ldr	r3, [pc, #176]	; (800d370 <xTaskPriorityInherit+0xe0>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c2:	f1c3 0207 	rsb	r2, r3, #7
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	6959      	ldr	r1, [r3, #20]
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	4413      	add	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	4a26      	ldr	r2, [pc, #152]	; (800d374 <xTaskPriorityInherit+0xe4>)
 800d2dc:	4413      	add	r3, r2
 800d2de:	4299      	cmp	r1, r3
 800d2e0:	d12f      	bne.n	800d342 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe f97d 	bl	800b5e6 <uxListRemove>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10a      	bne.n	800d308 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2fc:	43da      	mvns	r2, r3
 800d2fe:	4b1e      	ldr	r3, [pc, #120]	; (800d378 <xTaskPriorityInherit+0xe8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4013      	ands	r3, r2
 800d304:	4a1c      	ldr	r2, [pc, #112]	; (800d378 <xTaskPriorityInherit+0xe8>)
 800d306:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d308:	4b19      	ldr	r3, [pc, #100]	; (800d370 <xTaskPriorityInherit+0xe0>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d316:	2201      	movs	r2, #1
 800d318:	409a      	lsls	r2, r3
 800d31a:	4b17      	ldr	r3, [pc, #92]	; (800d378 <xTaskPriorityInherit+0xe8>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4313      	orrs	r3, r2
 800d320:	4a15      	ldr	r2, [pc, #84]	; (800d378 <xTaskPriorityInherit+0xe8>)
 800d322:	6013      	str	r3, [r2, #0]
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d328:	4613      	mov	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4a10      	ldr	r2, [pc, #64]	; (800d374 <xTaskPriorityInherit+0xe4>)
 800d332:	441a      	add	r2, r3
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	3304      	adds	r3, #4
 800d338:	4619      	mov	r1, r3
 800d33a:	4610      	mov	r0, r2
 800d33c:	f7fe f8f6 	bl	800b52c <vListInsertEnd>
 800d340:	e004      	b.n	800d34c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d342:	4b0b      	ldr	r3, [pc, #44]	; (800d370 <xTaskPriorityInherit+0xe0>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d34c:	2301      	movs	r3, #1
 800d34e:	60fb      	str	r3, [r7, #12]
 800d350:	e008      	b.n	800d364 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d356:	4b06      	ldr	r3, [pc, #24]	; (800d370 <xTaskPriorityInherit+0xe0>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d201      	bcs.n	800d364 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d360:	2301      	movs	r3, #1
 800d362:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d364:	68fb      	ldr	r3, [r7, #12]
	}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	20002e20 	.word	0x20002e20
 800d374:	20002e24 	.word	0x20002e24
 800d378:	20002f28 	.word	0x20002f28

0800d37c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d388:	2300      	movs	r3, #0
 800d38a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d06e      	beq.n	800d470 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d392:	4b3a      	ldr	r3, [pc, #232]	; (800d47c <xTaskPriorityDisinherit+0x100>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	693a      	ldr	r2, [r7, #16]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d00a      	beq.n	800d3b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	60fb      	str	r3, [r7, #12]
}
 800d3ae:	bf00      	nop
 800d3b0:	e7fe      	b.n	800d3b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10a      	bne.n	800d3d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3be:	f383 8811 	msr	BASEPRI, r3
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	f3bf 8f4f 	dsb	sy
 800d3ca:	60bb      	str	r3, [r7, #8]
}
 800d3cc:	bf00      	nop
 800d3ce:	e7fe      	b.n	800d3ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3d4:	1e5a      	subs	r2, r3, #1
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d044      	beq.n	800d470 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d140      	bne.n	800d470 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fe f8f7 	bl	800b5e6 <uxListRemove>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d115      	bne.n	800d42a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d402:	491f      	ldr	r1, [pc, #124]	; (800d480 <xTaskPriorityDisinherit+0x104>)
 800d404:	4613      	mov	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	4413      	add	r3, r2
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	440b      	add	r3, r1
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10a      	bne.n	800d42a <xTaskPriorityDisinherit+0xae>
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d418:	2201      	movs	r2, #1
 800d41a:	fa02 f303 	lsl.w	r3, r2, r3
 800d41e:	43da      	mvns	r2, r3
 800d420:	4b18      	ldr	r3, [pc, #96]	; (800d484 <xTaskPriorityDisinherit+0x108>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4013      	ands	r3, r2
 800d426:	4a17      	ldr	r2, [pc, #92]	; (800d484 <xTaskPriorityDisinherit+0x108>)
 800d428:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d436:	f1c3 0207 	rsb	r2, r3, #7
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d442:	2201      	movs	r2, #1
 800d444:	409a      	lsls	r2, r3
 800d446:	4b0f      	ldr	r3, [pc, #60]	; (800d484 <xTaskPriorityDisinherit+0x108>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4313      	orrs	r3, r2
 800d44c:	4a0d      	ldr	r2, [pc, #52]	; (800d484 <xTaskPriorityDisinherit+0x108>)
 800d44e:	6013      	str	r3, [r2, #0]
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d454:	4613      	mov	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4413      	add	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	4a08      	ldr	r2, [pc, #32]	; (800d480 <xTaskPriorityDisinherit+0x104>)
 800d45e:	441a      	add	r2, r3
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	3304      	adds	r3, #4
 800d464:	4619      	mov	r1, r3
 800d466:	4610      	mov	r0, r2
 800d468:	f7fe f860 	bl	800b52c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d46c:	2301      	movs	r3, #1
 800d46e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d470:	697b      	ldr	r3, [r7, #20]
	}
 800d472:	4618      	mov	r0, r3
 800d474:	3718      	adds	r7, #24
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20002e20 	.word	0x20002e20
 800d480:	20002e24 	.word	0x20002e24
 800d484:	20002f28 	.word	0x20002f28

0800d488 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d496:	2301      	movs	r3, #1
 800d498:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d077      	beq.n	800d590 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10a      	bne.n	800d4be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ac:	f383 8811 	msr	BASEPRI, r3
 800d4b0:	f3bf 8f6f 	isb	sy
 800d4b4:	f3bf 8f4f 	dsb	sy
 800d4b8:	60fb      	str	r3, [r7, #12]
}
 800d4ba:	bf00      	nop
 800d4bc:	e7fe      	b.n	800d4bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d902      	bls.n	800d4ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	61fb      	str	r3, [r7, #28]
 800d4cc:	e002      	b.n	800d4d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d8:	69fa      	ldr	r2, [r7, #28]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d058      	beq.n	800d590 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4e2:	697a      	ldr	r2, [r7, #20]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d153      	bne.n	800d590 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d4e8:	4b2b      	ldr	r3, [pc, #172]	; (800d598 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	69ba      	ldr	r2, [r7, #24]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d10a      	bne.n	800d508 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	60bb      	str	r3, [r7, #8]
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	69fa      	ldr	r2, [r7, #28]
 800d512:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	db04      	blt.n	800d526 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	f1c3 0207 	rsb	r2, r3, #7
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	6959      	ldr	r1, [r3, #20]
 800d52a:	693a      	ldr	r2, [r7, #16]
 800d52c:	4613      	mov	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	4413      	add	r3, r2
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4a19      	ldr	r2, [pc, #100]	; (800d59c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d536:	4413      	add	r3, r2
 800d538:	4299      	cmp	r1, r3
 800d53a:	d129      	bne.n	800d590 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	3304      	adds	r3, #4
 800d540:	4618      	mov	r0, r3
 800d542:	f7fe f850 	bl	800b5e6 <uxListRemove>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10a      	bne.n	800d562 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d550:	2201      	movs	r2, #1
 800d552:	fa02 f303 	lsl.w	r3, r2, r3
 800d556:	43da      	mvns	r2, r3
 800d558:	4b11      	ldr	r3, [pc, #68]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4013      	ands	r3, r2
 800d55e:	4a10      	ldr	r2, [pc, #64]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d560:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d566:	2201      	movs	r2, #1
 800d568:	409a      	lsls	r2, r3
 800d56a:	4b0d      	ldr	r3, [pc, #52]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4313      	orrs	r3, r2
 800d570:	4a0b      	ldr	r2, [pc, #44]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d572:	6013      	str	r3, [r2, #0]
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	4a06      	ldr	r2, [pc, #24]	; (800d59c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d582:	441a      	add	r2, r3
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	3304      	adds	r3, #4
 800d588:	4619      	mov	r1, r3
 800d58a:	4610      	mov	r0, r2
 800d58c:	f7fd ffce 	bl	800b52c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d590:	bf00      	nop
 800d592:	3720      	adds	r7, #32
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	20002e20 	.word	0x20002e20
 800d59c:	20002e24 	.word	0x20002e24
 800d5a0:	20002f28 	.word	0x20002f28

0800d5a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d5a4:	b480      	push	{r7}
 800d5a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d5a8:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d5b0:	4b05      	ldr	r3, [pc, #20]	; (800d5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d5b6:	3201      	adds	r2, #1
 800d5b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d5ba:	4b03      	ldr	r3, [pc, #12]	; (800d5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
	}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	20002e20 	.word	0x20002e20

0800d5cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5d6:	4b29      	ldr	r3, [pc, #164]	; (800d67c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5dc:	4b28      	ldr	r3, [pc, #160]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fd ffff 	bl	800b5e6 <uxListRemove>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10b      	bne.n	800d606 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d5ee:	4b24      	ldr	r3, [pc, #144]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5fa:	43da      	mvns	r2, r3
 800d5fc:	4b21      	ldr	r3, [pc, #132]	; (800d684 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4013      	ands	r3, r2
 800d602:	4a20      	ldr	r2, [pc, #128]	; (800d684 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d604:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60c:	d10a      	bne.n	800d624 <prvAddCurrentTaskToDelayedList+0x58>
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d007      	beq.n	800d624 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d614:	4b1a      	ldr	r3, [pc, #104]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3304      	adds	r3, #4
 800d61a:	4619      	mov	r1, r3
 800d61c:	481a      	ldr	r0, [pc, #104]	; (800d688 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d61e:	f7fd ff85 	bl	800b52c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d622:	e026      	b.n	800d672 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4413      	add	r3, r2
 800d62a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d62c:	4b14      	ldr	r3, [pc, #80]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d634:	68ba      	ldr	r2, [r7, #8]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d209      	bcs.n	800d650 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d63c:	4b13      	ldr	r3, [pc, #76]	; (800d68c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	4b0f      	ldr	r3, [pc, #60]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3304      	adds	r3, #4
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f7fd ff93 	bl	800b574 <vListInsert>
}
 800d64e:	e010      	b.n	800d672 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d650:	4b0f      	ldr	r3, [pc, #60]	; (800d690 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	4b0a      	ldr	r3, [pc, #40]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3304      	adds	r3, #4
 800d65a:	4619      	mov	r1, r3
 800d65c:	4610      	mov	r0, r2
 800d65e:	f7fd ff89 	bl	800b574 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d662:	4b0c      	ldr	r3, [pc, #48]	; (800d694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d202      	bcs.n	800d672 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d66c:	4a09      	ldr	r2, [pc, #36]	; (800d694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6013      	str	r3, [r2, #0]
}
 800d672:	bf00      	nop
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	20002f24 	.word	0x20002f24
 800d680:	20002e20 	.word	0x20002e20
 800d684:	20002f28 	.word	0x20002f28
 800d688:	20002f0c 	.word	0x20002f0c
 800d68c:	20002edc 	.word	0x20002edc
 800d690:	20002ed8 	.word	0x20002ed8
 800d694:	20002f40 	.word	0x20002f40

0800d698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3b04      	subs	r3, #4
 800d6a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d6b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	3b04      	subs	r3, #4
 800d6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	f023 0201 	bic.w	r2, r3, #1
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	3b04      	subs	r3, #4
 800d6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d6c8:	4a0c      	ldr	r2, [pc, #48]	; (800d6fc <pxPortInitialiseStack+0x64>)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	3b14      	subs	r3, #20
 800d6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3b04      	subs	r3, #4
 800d6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f06f 0202 	mvn.w	r2, #2
 800d6e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	3b20      	subs	r3, #32
 800d6ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3714      	adds	r7, #20
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	0800d701 	.word	0x0800d701

0800d700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d706:	2300      	movs	r3, #0
 800d708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d70a:	4b12      	ldr	r3, [pc, #72]	; (800d754 <prvTaskExitError+0x54>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d712:	d00a      	beq.n	800d72a <prvTaskExitError+0x2a>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	60fb      	str	r3, [r7, #12]
}
 800d726:	bf00      	nop
 800d728:	e7fe      	b.n	800d728 <prvTaskExitError+0x28>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	60bb      	str	r3, [r7, #8]
}
 800d73c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d73e:	bf00      	nop
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0fc      	beq.n	800d740 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d746:	bf00      	nop
 800d748:	bf00      	nop
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr
 800d754:	200000c8 	.word	0x200000c8
	...

0800d760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d760:	4b07      	ldr	r3, [pc, #28]	; (800d780 <pxCurrentTCBConst2>)
 800d762:	6819      	ldr	r1, [r3, #0]
 800d764:	6808      	ldr	r0, [r1, #0]
 800d766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76a:	f380 8809 	msr	PSP, r0
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f04f 0000 	mov.w	r0, #0
 800d776:	f380 8811 	msr	BASEPRI, r0
 800d77a:	4770      	bx	lr
 800d77c:	f3af 8000 	nop.w

0800d780 <pxCurrentTCBConst2>:
 800d780:	20002e20 	.word	0x20002e20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d784:	bf00      	nop
 800d786:	bf00      	nop

0800d788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d788:	4808      	ldr	r0, [pc, #32]	; (800d7ac <prvPortStartFirstTask+0x24>)
 800d78a:	6800      	ldr	r0, [r0, #0]
 800d78c:	6800      	ldr	r0, [r0, #0]
 800d78e:	f380 8808 	msr	MSP, r0
 800d792:	f04f 0000 	mov.w	r0, #0
 800d796:	f380 8814 	msr	CONTROL, r0
 800d79a:	b662      	cpsie	i
 800d79c:	b661      	cpsie	f
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	df00      	svc	0
 800d7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d7aa:	bf00      	nop
 800d7ac:	e000ed08 	.word	0xe000ed08

0800d7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d7b6:	4b46      	ldr	r3, [pc, #280]	; (800d8d0 <xPortStartScheduler+0x120>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a46      	ldr	r2, [pc, #280]	; (800d8d4 <xPortStartScheduler+0x124>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d10a      	bne.n	800d7d6 <xPortStartScheduler+0x26>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	613b      	str	r3, [r7, #16]
}
 800d7d2:	bf00      	nop
 800d7d4:	e7fe      	b.n	800d7d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d7d6:	4b3e      	ldr	r3, [pc, #248]	; (800d8d0 <xPortStartScheduler+0x120>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a3f      	ldr	r2, [pc, #252]	; (800d8d8 <xPortStartScheduler+0x128>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d10a      	bne.n	800d7f6 <xPortStartScheduler+0x46>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	60fb      	str	r3, [r7, #12]
}
 800d7f2:	bf00      	nop
 800d7f4:	e7fe      	b.n	800d7f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d7f6:	4b39      	ldr	r3, [pc, #228]	; (800d8dc <xPortStartScheduler+0x12c>)
 800d7f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	22ff      	movs	r2, #255	; 0xff
 800d806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d810:	78fb      	ldrb	r3, [r7, #3]
 800d812:	b2db      	uxtb	r3, r3
 800d814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	4b31      	ldr	r3, [pc, #196]	; (800d8e0 <xPortStartScheduler+0x130>)
 800d81c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d81e:	4b31      	ldr	r3, [pc, #196]	; (800d8e4 <xPortStartScheduler+0x134>)
 800d820:	2207      	movs	r2, #7
 800d822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d824:	e009      	b.n	800d83a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d826:	4b2f      	ldr	r3, [pc, #188]	; (800d8e4 <xPortStartScheduler+0x134>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	3b01      	subs	r3, #1
 800d82c:	4a2d      	ldr	r2, [pc, #180]	; (800d8e4 <xPortStartScheduler+0x134>)
 800d82e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	b2db      	uxtb	r3, r3
 800d834:	005b      	lsls	r3, r3, #1
 800d836:	b2db      	uxtb	r3, r3
 800d838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d83a:	78fb      	ldrb	r3, [r7, #3]
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d842:	2b80      	cmp	r3, #128	; 0x80
 800d844:	d0ef      	beq.n	800d826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d846:	4b27      	ldr	r3, [pc, #156]	; (800d8e4 <xPortStartScheduler+0x134>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f1c3 0307 	rsb	r3, r3, #7
 800d84e:	2b04      	cmp	r3, #4
 800d850:	d00a      	beq.n	800d868 <xPortStartScheduler+0xb8>
	__asm volatile
 800d852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	60bb      	str	r3, [r7, #8]
}
 800d864:	bf00      	nop
 800d866:	e7fe      	b.n	800d866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d868:	4b1e      	ldr	r3, [pc, #120]	; (800d8e4 <xPortStartScheduler+0x134>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	021b      	lsls	r3, r3, #8
 800d86e:	4a1d      	ldr	r2, [pc, #116]	; (800d8e4 <xPortStartScheduler+0x134>)
 800d870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d872:	4b1c      	ldr	r3, [pc, #112]	; (800d8e4 <xPortStartScheduler+0x134>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d87a:	4a1a      	ldr	r2, [pc, #104]	; (800d8e4 <xPortStartScheduler+0x134>)
 800d87c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	b2da      	uxtb	r2, r3
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d886:	4b18      	ldr	r3, [pc, #96]	; (800d8e8 <xPortStartScheduler+0x138>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a17      	ldr	r2, [pc, #92]	; (800d8e8 <xPortStartScheduler+0x138>)
 800d88c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d892:	4b15      	ldr	r3, [pc, #84]	; (800d8e8 <xPortStartScheduler+0x138>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a14      	ldr	r2, [pc, #80]	; (800d8e8 <xPortStartScheduler+0x138>)
 800d898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d89c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d89e:	f000 f8dd 	bl	800da5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d8a2:	4b12      	ldr	r3, [pc, #72]	; (800d8ec <xPortStartScheduler+0x13c>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d8a8:	f000 f8fc 	bl	800daa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d8ac:	4b10      	ldr	r3, [pc, #64]	; (800d8f0 <xPortStartScheduler+0x140>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a0f      	ldr	r2, [pc, #60]	; (800d8f0 <xPortStartScheduler+0x140>)
 800d8b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d8b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d8b8:	f7ff ff66 	bl	800d788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d8bc:	f7ff fa84 	bl	800cdc8 <vTaskSwitchContext>
	prvTaskExitError();
 800d8c0:	f7ff ff1e 	bl	800d700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3718      	adds	r7, #24
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	e000ed00 	.word	0xe000ed00
 800d8d4:	410fc271 	.word	0x410fc271
 800d8d8:	410fc270 	.word	0x410fc270
 800d8dc:	e000e400 	.word	0xe000e400
 800d8e0:	20002f4c 	.word	0x20002f4c
 800d8e4:	20002f50 	.word	0x20002f50
 800d8e8:	e000ed20 	.word	0xe000ed20
 800d8ec:	200000c8 	.word	0x200000c8
 800d8f0:	e000ef34 	.word	0xe000ef34

0800d8f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
	__asm volatile
 800d8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	607b      	str	r3, [r7, #4]
}
 800d90c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d90e:	4b0f      	ldr	r3, [pc, #60]	; (800d94c <vPortEnterCritical+0x58>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3301      	adds	r3, #1
 800d914:	4a0d      	ldr	r2, [pc, #52]	; (800d94c <vPortEnterCritical+0x58>)
 800d916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d918:	4b0c      	ldr	r3, [pc, #48]	; (800d94c <vPortEnterCritical+0x58>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d10f      	bne.n	800d940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d920:	4b0b      	ldr	r3, [pc, #44]	; (800d950 <vPortEnterCritical+0x5c>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00a      	beq.n	800d940 <vPortEnterCritical+0x4c>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	603b      	str	r3, [r7, #0]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <vPortEnterCritical+0x4a>
	}
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	200000c8 	.word	0x200000c8
 800d950:	e000ed04 	.word	0xe000ed04

0800d954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d95a:	4b12      	ldr	r3, [pc, #72]	; (800d9a4 <vPortExitCritical+0x50>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10a      	bne.n	800d978 <vPortExitCritical+0x24>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	607b      	str	r3, [r7, #4]
}
 800d974:	bf00      	nop
 800d976:	e7fe      	b.n	800d976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d978:	4b0a      	ldr	r3, [pc, #40]	; (800d9a4 <vPortExitCritical+0x50>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3b01      	subs	r3, #1
 800d97e:	4a09      	ldr	r2, [pc, #36]	; (800d9a4 <vPortExitCritical+0x50>)
 800d980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d982:	4b08      	ldr	r3, [pc, #32]	; (800d9a4 <vPortExitCritical+0x50>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d105      	bne.n	800d996 <vPortExitCritical+0x42>
 800d98a:	2300      	movs	r3, #0
 800d98c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	f383 8811 	msr	BASEPRI, r3
}
 800d994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d996:	bf00      	nop
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	200000c8 	.word	0x200000c8
	...

0800d9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d9b0:	f3ef 8009 	mrs	r0, PSP
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	4b15      	ldr	r3, [pc, #84]	; (800da10 <pxCurrentTCBConst>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	f01e 0f10 	tst.w	lr, #16
 800d9c0:	bf08      	it	eq
 800d9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ca:	6010      	str	r0, [r2, #0]
 800d9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d9d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9d4:	f380 8811 	msr	BASEPRI, r0
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	f7ff f9f2 	bl	800cdc8 <vTaskSwitchContext>
 800d9e4:	f04f 0000 	mov.w	r0, #0
 800d9e8:	f380 8811 	msr	BASEPRI, r0
 800d9ec:	bc09      	pop	{r0, r3}
 800d9ee:	6819      	ldr	r1, [r3, #0]
 800d9f0:	6808      	ldr	r0, [r1, #0]
 800d9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f6:	f01e 0f10 	tst.w	lr, #16
 800d9fa:	bf08      	it	eq
 800d9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da00:	f380 8809 	msr	PSP, r0
 800da04:	f3bf 8f6f 	isb	sy
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	f3af 8000 	nop.w

0800da10 <pxCurrentTCBConst>:
 800da10:	20002e20 	.word	0x20002e20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop

0800da18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
	__asm volatile
 800da1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	607b      	str	r3, [r7, #4]
}
 800da30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da32:	f7ff f911 	bl	800cc58 <xTaskIncrementTick>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d003      	beq.n	800da44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da3c:	4b06      	ldr	r3, [pc, #24]	; (800da58 <SysTick_Handler+0x40>)
 800da3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da42:	601a      	str	r2, [r3, #0]
 800da44:	2300      	movs	r3, #0
 800da46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	f383 8811 	msr	BASEPRI, r3
}
 800da4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	e000ed04 	.word	0xe000ed04

0800da5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da5c:	b480      	push	{r7}
 800da5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da60:	4b0b      	ldr	r3, [pc, #44]	; (800da90 <vPortSetupTimerInterrupt+0x34>)
 800da62:	2200      	movs	r2, #0
 800da64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da66:	4b0b      	ldr	r3, [pc, #44]	; (800da94 <vPortSetupTimerInterrupt+0x38>)
 800da68:	2200      	movs	r2, #0
 800da6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da6c:	4b0a      	ldr	r3, [pc, #40]	; (800da98 <vPortSetupTimerInterrupt+0x3c>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a0a      	ldr	r2, [pc, #40]	; (800da9c <vPortSetupTimerInterrupt+0x40>)
 800da72:	fba2 2303 	umull	r2, r3, r2, r3
 800da76:	099b      	lsrs	r3, r3, #6
 800da78:	4a09      	ldr	r2, [pc, #36]	; (800daa0 <vPortSetupTimerInterrupt+0x44>)
 800da7a:	3b01      	subs	r3, #1
 800da7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da7e:	4b04      	ldr	r3, [pc, #16]	; (800da90 <vPortSetupTimerInterrupt+0x34>)
 800da80:	2207      	movs	r2, #7
 800da82:	601a      	str	r2, [r3, #0]
}
 800da84:	bf00      	nop
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop
 800da90:	e000e010 	.word	0xe000e010
 800da94:	e000e018 	.word	0xe000e018
 800da98:	20000000 	.word	0x20000000
 800da9c:	10624dd3 	.word	0x10624dd3
 800daa0:	e000e014 	.word	0xe000e014

0800daa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800daa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dab4 <vPortEnableVFP+0x10>
 800daa8:	6801      	ldr	r1, [r0, #0]
 800daaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800daae:	6001      	str	r1, [r0, #0]
 800dab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dab2:	bf00      	nop
 800dab4:	e000ed88 	.word	0xe000ed88

0800dab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dab8:	b480      	push	{r7}
 800daba:	b085      	sub	sp, #20
 800dabc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dabe:	f3ef 8305 	mrs	r3, IPSR
 800dac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2b0f      	cmp	r3, #15
 800dac8:	d914      	bls.n	800daf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800daca:	4a17      	ldr	r2, [pc, #92]	; (800db28 <vPortValidateInterruptPriority+0x70>)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	4413      	add	r3, r2
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dad4:	4b15      	ldr	r3, [pc, #84]	; (800db2c <vPortValidateInterruptPriority+0x74>)
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	7afa      	ldrb	r2, [r7, #11]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d20a      	bcs.n	800daf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	607b      	str	r3, [r7, #4]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800daf4:	4b0e      	ldr	r3, [pc, #56]	; (800db30 <vPortValidateInterruptPriority+0x78>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dafc:	4b0d      	ldr	r3, [pc, #52]	; (800db34 <vPortValidateInterruptPriority+0x7c>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	429a      	cmp	r2, r3
 800db02:	d90a      	bls.n	800db1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	603b      	str	r3, [r7, #0]
}
 800db16:	bf00      	nop
 800db18:	e7fe      	b.n	800db18 <vPortValidateInterruptPriority+0x60>
	}
 800db1a:	bf00      	nop
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	e000e3f0 	.word	0xe000e3f0
 800db2c:	20002f4c 	.word	0x20002f4c
 800db30:	e000ed0c 	.word	0xe000ed0c
 800db34:	20002f50 	.word	0x20002f50

0800db38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b08a      	sub	sp, #40	; 0x28
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db40:	2300      	movs	r3, #0
 800db42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db44:	f7fe ffce 	bl	800cae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db48:	4b5b      	ldr	r3, [pc, #364]	; (800dcb8 <pvPortMalloc+0x180>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d101      	bne.n	800db54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db50:	f000 f920 	bl	800dd94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db54:	4b59      	ldr	r3, [pc, #356]	; (800dcbc <pvPortMalloc+0x184>)
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4013      	ands	r3, r2
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f040 8093 	bne.w	800dc88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d01d      	beq.n	800dba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db68:	2208      	movs	r2, #8
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4413      	add	r3, r2
 800db6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f003 0307 	and.w	r3, r3, #7
 800db76:	2b00      	cmp	r3, #0
 800db78:	d014      	beq.n	800dba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f023 0307 	bic.w	r3, r3, #7
 800db80:	3308      	adds	r3, #8
 800db82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f003 0307 	and.w	r3, r3, #7
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00a      	beq.n	800dba4 <pvPortMalloc+0x6c>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	617b      	str	r3, [r7, #20]
}
 800dba0:	bf00      	nop
 800dba2:	e7fe      	b.n	800dba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d06e      	beq.n	800dc88 <pvPortMalloc+0x150>
 800dbaa:	4b45      	ldr	r3, [pc, #276]	; (800dcc0 <pvPortMalloc+0x188>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d869      	bhi.n	800dc88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dbb4:	4b43      	ldr	r3, [pc, #268]	; (800dcc4 <pvPortMalloc+0x18c>)
 800dbb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dbb8:	4b42      	ldr	r3, [pc, #264]	; (800dcc4 <pvPortMalloc+0x18c>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbbe:	e004      	b.n	800dbca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d903      	bls.n	800dbdc <pvPortMalloc+0xa4>
 800dbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1f1      	bne.n	800dbc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dbdc:	4b36      	ldr	r3, [pc, #216]	; (800dcb8 <pvPortMalloc+0x180>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d050      	beq.n	800dc88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2208      	movs	r2, #8
 800dbec:	4413      	add	r3, r2
 800dbee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
 800dbf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	1ad2      	subs	r2, r2, r3
 800dc00:	2308      	movs	r3, #8
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d91f      	bls.n	800dc48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	f003 0307 	and.w	r3, r3, #7
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00a      	beq.n	800dc30 <pvPortMalloc+0xf8>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	613b      	str	r3, [r7, #16]
}
 800dc2c:	bf00      	nop
 800dc2e:	e7fe      	b.n	800dc2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	685a      	ldr	r2, [r3, #4]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	1ad2      	subs	r2, r2, r3
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc42:	69b8      	ldr	r0, [r7, #24]
 800dc44:	f000 f908 	bl	800de58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc48:	4b1d      	ldr	r3, [pc, #116]	; (800dcc0 <pvPortMalloc+0x188>)
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	4a1b      	ldr	r2, [pc, #108]	; (800dcc0 <pvPortMalloc+0x188>)
 800dc54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc56:	4b1a      	ldr	r3, [pc, #104]	; (800dcc0 <pvPortMalloc+0x188>)
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	4b1b      	ldr	r3, [pc, #108]	; (800dcc8 <pvPortMalloc+0x190>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d203      	bcs.n	800dc6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc62:	4b17      	ldr	r3, [pc, #92]	; (800dcc0 <pvPortMalloc+0x188>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a18      	ldr	r2, [pc, #96]	; (800dcc8 <pvPortMalloc+0x190>)
 800dc68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6c:	685a      	ldr	r2, [r3, #4]
 800dc6e:	4b13      	ldr	r3, [pc, #76]	; (800dcbc <pvPortMalloc+0x184>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	431a      	orrs	r2, r3
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc7e:	4b13      	ldr	r3, [pc, #76]	; (800dccc <pvPortMalloc+0x194>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	3301      	adds	r3, #1
 800dc84:	4a11      	ldr	r2, [pc, #68]	; (800dccc <pvPortMalloc+0x194>)
 800dc86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc88:	f7fe ff3a 	bl	800cb00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	f003 0307 	and.w	r3, r3, #7
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00a      	beq.n	800dcac <pvPortMalloc+0x174>
	__asm volatile
 800dc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9a:	f383 8811 	msr	BASEPRI, r3
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f3bf 8f4f 	dsb	sy
 800dca6:	60fb      	str	r3, [r7, #12]
}
 800dca8:	bf00      	nop
 800dcaa:	e7fe      	b.n	800dcaa <pvPortMalloc+0x172>
	return pvReturn;
 800dcac:	69fb      	ldr	r3, [r7, #28]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3728      	adds	r7, #40	; 0x28
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20006b5c 	.word	0x20006b5c
 800dcbc:	20006b70 	.word	0x20006b70
 800dcc0:	20006b60 	.word	0x20006b60
 800dcc4:	20006b54 	.word	0x20006b54
 800dcc8:	20006b64 	.word	0x20006b64
 800dccc:	20006b68 	.word	0x20006b68

0800dcd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d04d      	beq.n	800dd7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dce2:	2308      	movs	r3, #8
 800dce4:	425b      	negs	r3, r3
 800dce6:	697a      	ldr	r2, [r7, #20]
 800dce8:	4413      	add	r3, r2
 800dcea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	685a      	ldr	r2, [r3, #4]
 800dcf4:	4b24      	ldr	r3, [pc, #144]	; (800dd88 <vPortFree+0xb8>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4013      	ands	r3, r2
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10a      	bne.n	800dd14 <vPortFree+0x44>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	60fb      	str	r3, [r7, #12]
}
 800dd10:	bf00      	nop
 800dd12:	e7fe      	b.n	800dd12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d00a      	beq.n	800dd32 <vPortFree+0x62>
	__asm volatile
 800dd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd20:	f383 8811 	msr	BASEPRI, r3
 800dd24:	f3bf 8f6f 	isb	sy
 800dd28:	f3bf 8f4f 	dsb	sy
 800dd2c:	60bb      	str	r3, [r7, #8]
}
 800dd2e:	bf00      	nop
 800dd30:	e7fe      	b.n	800dd30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	4b14      	ldr	r3, [pc, #80]	; (800dd88 <vPortFree+0xb8>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d01e      	beq.n	800dd7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d11a      	bne.n	800dd7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	685a      	ldr	r2, [r3, #4]
 800dd4c:	4b0e      	ldr	r3, [pc, #56]	; (800dd88 <vPortFree+0xb8>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	43db      	mvns	r3, r3
 800dd52:	401a      	ands	r2, r3
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd58:	f7fe fec4 	bl	800cae4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	685a      	ldr	r2, [r3, #4]
 800dd60:	4b0a      	ldr	r3, [pc, #40]	; (800dd8c <vPortFree+0xbc>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4413      	add	r3, r2
 800dd66:	4a09      	ldr	r2, [pc, #36]	; (800dd8c <vPortFree+0xbc>)
 800dd68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd6a:	6938      	ldr	r0, [r7, #16]
 800dd6c:	f000 f874 	bl	800de58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd70:	4b07      	ldr	r3, [pc, #28]	; (800dd90 <vPortFree+0xc0>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3301      	adds	r3, #1
 800dd76:	4a06      	ldr	r2, [pc, #24]	; (800dd90 <vPortFree+0xc0>)
 800dd78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd7a:	f7fe fec1 	bl	800cb00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd7e:	bf00      	nop
 800dd80:	3718      	adds	r7, #24
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	20006b70 	.word	0x20006b70
 800dd8c:	20006b60 	.word	0x20006b60
 800dd90:	20006b6c 	.word	0x20006b6c

0800dd94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dd9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dda0:	4b27      	ldr	r3, [pc, #156]	; (800de40 <prvHeapInit+0xac>)
 800dda2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f003 0307 	and.w	r3, r3, #7
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00c      	beq.n	800ddc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	3307      	adds	r3, #7
 800ddb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f023 0307 	bic.w	r3, r3, #7
 800ddba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	4a1f      	ldr	r2, [pc, #124]	; (800de40 <prvHeapInit+0xac>)
 800ddc4:	4413      	add	r3, r2
 800ddc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ddcc:	4a1d      	ldr	r2, [pc, #116]	; (800de44 <prvHeapInit+0xb0>)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ddd2:	4b1c      	ldr	r3, [pc, #112]	; (800de44 <prvHeapInit+0xb0>)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	4413      	add	r3, r2
 800ddde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dde0:	2208      	movs	r2, #8
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	1a9b      	subs	r3, r3, r2
 800dde6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f023 0307 	bic.w	r3, r3, #7
 800ddee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	4a15      	ldr	r2, [pc, #84]	; (800de48 <prvHeapInit+0xb4>)
 800ddf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ddf6:	4b14      	ldr	r3, [pc, #80]	; (800de48 <prvHeapInit+0xb4>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ddfe:	4b12      	ldr	r3, [pc, #72]	; (800de48 <prvHeapInit+0xb4>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2200      	movs	r2, #0
 800de04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	1ad2      	subs	r2, r2, r3
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de14:	4b0c      	ldr	r3, [pc, #48]	; (800de48 <prvHeapInit+0xb4>)
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	4a0a      	ldr	r2, [pc, #40]	; (800de4c <prvHeapInit+0xb8>)
 800de22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	4a09      	ldr	r2, [pc, #36]	; (800de50 <prvHeapInit+0xbc>)
 800de2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de2c:	4b09      	ldr	r3, [pc, #36]	; (800de54 <prvHeapInit+0xc0>)
 800de2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de32:	601a      	str	r2, [r3, #0]
}
 800de34:	bf00      	nop
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr
 800de40:	20002f54 	.word	0x20002f54
 800de44:	20006b54 	.word	0x20006b54
 800de48:	20006b5c 	.word	0x20006b5c
 800de4c:	20006b64 	.word	0x20006b64
 800de50:	20006b60 	.word	0x20006b60
 800de54:	20006b70 	.word	0x20006b70

0800de58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de60:	4b28      	ldr	r3, [pc, #160]	; (800df04 <prvInsertBlockIntoFreeList+0xac>)
 800de62:	60fb      	str	r3, [r7, #12]
 800de64:	e002      	b.n	800de6c <prvInsertBlockIntoFreeList+0x14>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	60fb      	str	r3, [r7, #12]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	429a      	cmp	r2, r3
 800de74:	d8f7      	bhi.n	800de66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	4413      	add	r3, r2
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	429a      	cmp	r2, r3
 800de86:	d108      	bne.n	800de9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	685a      	ldr	r2, [r3, #4]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	441a      	add	r2, r3
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	441a      	add	r2, r3
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d118      	bne.n	800dee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	4b15      	ldr	r3, [pc, #84]	; (800df08 <prvInsertBlockIntoFreeList+0xb0>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d00d      	beq.n	800ded6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	685a      	ldr	r2, [r3, #4]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	441a      	add	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	e008      	b.n	800dee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ded6:	4b0c      	ldr	r3, [pc, #48]	; (800df08 <prvInsertBlockIntoFreeList+0xb0>)
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	601a      	str	r2, [r3, #0]
 800dede:	e003      	b.n	800dee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	429a      	cmp	r2, r3
 800deee:	d002      	beq.n	800def6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800def6:	bf00      	nop
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	20006b54 	.word	0x20006b54
 800df08:	20006b5c 	.word	0x20006b5c

0800df0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800df12:	4b26      	ldr	r3, [pc, #152]	; (800dfac <_DoInit+0xa0>)
 800df14:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800df16:	22a8      	movs	r2, #168	; 0xa8
 800df18:	2100      	movs	r1, #0
 800df1a:	6838      	ldr	r0, [r7, #0]
 800df1c:	f009 fe1b 	bl	8017b56 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	2203      	movs	r2, #3
 800df24:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	2203      	movs	r2, #3
 800df2a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	4a20      	ldr	r2, [pc, #128]	; (800dfb0 <_DoInit+0xa4>)
 800df30:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	4a1f      	ldr	r2, [pc, #124]	; (800dfb4 <_DoInit+0xa8>)
 800df36:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df3e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	2200      	movs	r2, #0
 800df44:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	2200      	movs	r2, #0
 800df4a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	2200      	movs	r2, #0
 800df50:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	4a16      	ldr	r2, [pc, #88]	; (800dfb0 <_DoInit+0xa4>)
 800df56:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	4a17      	ldr	r2, [pc, #92]	; (800dfb8 <_DoInit+0xac>)
 800df5c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	2210      	movs	r2, #16
 800df62:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	2200      	movs	r2, #0
 800df68:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	2200      	movs	r2, #0
 800df6e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	2200      	movs	r2, #0
 800df74:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800df76:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800df7a:	2300      	movs	r3, #0
 800df7c:	607b      	str	r3, [r7, #4]
 800df7e:	e00c      	b.n	800df9a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f1c3 030f 	rsb	r3, r3, #15
 800df86:	4a0d      	ldr	r2, [pc, #52]	; (800dfbc <_DoInit+0xb0>)
 800df88:	5cd1      	ldrb	r1, [r2, r3]
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4413      	add	r3, r2
 800df90:	460a      	mov	r2, r1
 800df92:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	3301      	adds	r3, #1
 800df98:	607b      	str	r3, [r7, #4]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2b0f      	cmp	r3, #15
 800df9e:	d9ef      	bls.n	800df80 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800dfa0:	f3bf 8f5f 	dmb	sy
}
 800dfa4:	bf00      	nop
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	20006b74 	.word	0x20006b74
 800dfb0:	08019244 	.word	0x08019244
 800dfb4:	20006c1c 	.word	0x20006c1c
 800dfb8:	2000741c 	.word	0x2000741c
 800dfbc:	0801b15c 	.word	0x0801b15c

0800dfc0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b08a      	sub	sp, #40	; 0x28
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800dfdc:	69ba      	ldr	r2, [r7, #24]
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d905      	bls.n	800dff0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800dfe4:	69ba      	ldr	r2, [r7, #24]
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	3b01      	subs	r3, #1
 800dfec:	627b      	str	r3, [r7, #36]	; 0x24
 800dfee:	e007      	b.n	800e000 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	689a      	ldr	r2, [r3, #8]
 800dff4:	69b9      	ldr	r1, [r7, #24]
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	1acb      	subs	r3, r1, r3
 800dffa:	4413      	add	r3, r2
 800dffc:	3b01      	subs	r3, #1
 800dffe:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	689a      	ldr	r2, [r3, #8]
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00a:	4293      	cmp	r3, r2
 800e00c:	bf28      	it	cs
 800e00e:	4613      	movcs	r3, r2
 800e010:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800e012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	4293      	cmp	r3, r2
 800e018:	bf28      	it	cs
 800e01a:	4613      	movcs	r3, r2
 800e01c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	685a      	ldr	r2, [r3, #4]
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	4413      	add	r3, r2
 800e026:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800e028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e02a:	68b9      	ldr	r1, [r7, #8]
 800e02c:	6978      	ldr	r0, [r7, #20]
 800e02e:	f009 fd6a 	bl	8017b06 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800e032:	6a3a      	ldr	r2, [r7, #32]
 800e034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e036:	4413      	add	r3, r2
 800e038:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800e03a:	68ba      	ldr	r2, [r7, #8]
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	4413      	add	r3, r2
 800e040:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800e04a:	69fa      	ldr	r2, [r7, #28]
 800e04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04e:	4413      	add	r3, r2
 800e050:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	69fa      	ldr	r2, [r7, #28]
 800e058:	429a      	cmp	r2, r3
 800e05a:	d101      	bne.n	800e060 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800e05c:	2300      	movs	r3, #0
 800e05e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800e060:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	69fa      	ldr	r2, [r7, #28]
 800e068:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1b2      	bne.n	800dfd6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800e070:	6a3b      	ldr	r3, [r7, #32]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3728      	adds	r7, #40	; 0x28
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b088      	sub	sp, #32
 800e07e:	af00      	add	r7, sp, #0
 800e080:	60f8      	str	r0, [r7, #12]
 800e082:	60b9      	str	r1, [r7, #8]
 800e084:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	689a      	ldr	r2, [r3, #8]
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800e096:	69ba      	ldr	r2, [r7, #24]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d911      	bls.n	800e0c2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	685a      	ldr	r2, [r3, #4]
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	68b9      	ldr	r1, [r7, #8]
 800e0ac:	6938      	ldr	r0, [r7, #16]
 800e0ae:	f009 fd2a 	bl	8017b06 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800e0b2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800e0b6:	69fa      	ldr	r2, [r7, #28]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	441a      	add	r2, r3
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800e0c0:	e01f      	b.n	800e102 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	685a      	ldr	r2, [r3, #4]
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	68b9      	ldr	r1, [r7, #8]
 800e0d4:	6938      	ldr	r0, [r7, #16]
 800e0d6:	f009 fd16 	bl	8017b06 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	697a      	ldr	r2, [r7, #20]
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	6938      	ldr	r0, [r7, #16]
 800e0f4:	f009 fd07 	bl	8017b06 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800e0f8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	697a      	ldr	r2, [r7, #20]
 800e100:	60da      	str	r2, [r3, #12]
}
 800e102:	bf00      	nop
 800e104:	3720      	adds	r7, #32
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800e10a:	b480      	push	{r7}
 800e10c:	b087      	sub	sp, #28
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	429a      	cmp	r2, r3
 800e124:	d808      	bhi.n	800e138 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	689a      	ldr	r2, [r3, #8]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	1ad2      	subs	r2, r2, r3
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	4413      	add	r3, r2
 800e132:	3b01      	subs	r3, #1
 800e134:	617b      	str	r3, [r7, #20]
 800e136:	e004      	b.n	800e142 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800e138:	693a      	ldr	r2, [r7, #16]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	3b01      	subs	r3, #1
 800e140:	617b      	str	r3, [r7, #20]
  }
  return r;
 800e142:	697b      	ldr	r3, [r7, #20]
}
 800e144:	4618      	mov	r0, r3
 800e146:	371c      	adds	r7, #28
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	4613      	mov	r3, r2
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	4413      	add	r3, r2
 800e16a:	00db      	lsls	r3, r3, #3
 800e16c:	4a1f      	ldr	r2, [pc, #124]	; (800e1ec <SEGGER_RTT_WriteNoLock+0x9c>)
 800e16e:	4413      	add	r3, r2
 800e170:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	695b      	ldr	r3, [r3, #20]
 800e176:	2b02      	cmp	r3, #2
 800e178:	d029      	beq.n	800e1ce <SEGGER_RTT_WriteNoLock+0x7e>
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	d82e      	bhi.n	800e1dc <SEGGER_RTT_WriteNoLock+0x8c>
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d002      	beq.n	800e188 <SEGGER_RTT_WriteNoLock+0x38>
 800e182:	2b01      	cmp	r3, #1
 800e184:	d013      	beq.n	800e1ae <SEGGER_RTT_WriteNoLock+0x5e>
 800e186:	e029      	b.n	800e1dc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800e188:	6978      	ldr	r0, [r7, #20]
 800e18a:	f7ff ffbe 	bl	800e10a <_GetAvailWriteSpace>
 800e18e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	429a      	cmp	r2, r3
 800e196:	d202      	bcs.n	800e19e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800e198:	2300      	movs	r3, #0
 800e19a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800e19c:	e021      	b.n	800e1e2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	69b9      	ldr	r1, [r7, #24]
 800e1a6:	6978      	ldr	r0, [r7, #20]
 800e1a8:	f7ff ff67 	bl	800e07a <_WriteNoCheck>
    break;
 800e1ac:	e019      	b.n	800e1e2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800e1ae:	6978      	ldr	r0, [r7, #20]
 800e1b0:	f7ff ffab 	bl	800e10a <_GetAvailWriteSpace>
 800e1b4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	bf28      	it	cs
 800e1be:	4613      	movcs	r3, r2
 800e1c0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800e1c2:	69fa      	ldr	r2, [r7, #28]
 800e1c4:	69b9      	ldr	r1, [r7, #24]
 800e1c6:	6978      	ldr	r0, [r7, #20]
 800e1c8:	f7ff ff57 	bl	800e07a <_WriteNoCheck>
    break;
 800e1cc:	e009      	b.n	800e1e2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	69b9      	ldr	r1, [r7, #24]
 800e1d2:	6978      	ldr	r0, [r7, #20]
 800e1d4:	f7ff fef4 	bl	800dfc0 <_WriteBlocking>
 800e1d8:	61f8      	str	r0, [r7, #28]
    break;
 800e1da:	e002      	b.n	800e1e2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	61fb      	str	r3, [r7, #28]
    break;
 800e1e0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800e1e2:	69fb      	ldr	r3, [r7, #28]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3720      	adds	r7, #32
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	20006b74 	.word	0x20006b74

0800e1f0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b088      	sub	sp, #32
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800e1fc:	4b0e      	ldr	r3, [pc, #56]	; (800e238 <SEGGER_RTT_Write+0x48>)
 800e1fe:	61fb      	str	r3, [r7, #28]
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	b2db      	uxtb	r3, r3
 800e206:	2b00      	cmp	r3, #0
 800e208:	d101      	bne.n	800e20e <SEGGER_RTT_Write+0x1e>
 800e20a:	f7ff fe7f 	bl	800df0c <_DoInit>
  SEGGER_RTT_LOCK();
 800e20e:	f3ef 8311 	mrs	r3, BASEPRI
 800e212:	f04f 0120 	mov.w	r1, #32
 800e216:	f381 8811 	msr	BASEPRI, r1
 800e21a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	68b9      	ldr	r1, [r7, #8]
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f7ff ff95 	bl	800e150 <SEGGER_RTT_WriteNoLock>
 800e226:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800e22e:	697b      	ldr	r3, [r7, #20]
}
 800e230:	4618      	mov	r0, r3
 800e232:	3720      	adds	r7, #32
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	20006b74 	.word	0x20006b74

0800e23c <on_spi_done>:

void app_drv_spi_cs(void *spi, bool level);
static SemaphoreHandle_t m_sem_spi = NULL;

static inline void on_spi_done(void)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
    BaseType_t ctx_sw;
    xSemaphoreGiveFromISR(m_sem_spi, &ctx_sw);
 800e242:	4b0b      	ldr	r3, [pc, #44]	; (800e270 <on_spi_done+0x34>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	1d3a      	adds	r2, r7, #4
 800e248:	4611      	mov	r1, r2
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fd fd15 	bl	800bc7a <xQueueGiveFromISR>
    portYIELD_FROM_ISR(ctx_sw);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d007      	beq.n	800e266 <on_spi_done+0x2a>
 800e256:	4b07      	ldr	r3, [pc, #28]	; (800e274 <on_spi_done+0x38>)
 800e258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e25c:	601a      	str	r2, [r3, #0]
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	f3bf 8f6f 	isb	sy
}
 800e266:	bf00      	nop
 800e268:	3708      	adds	r7, #8
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	2000742c 	.word	0x2000742c
 800e274:	e000ed04 	.word	0xe000ed04

0800e278 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
    on_spi_done();
 800e280:	f7ff ffdc 	bl	800e23c <on_spi_done>
}
 800e284:	bf00      	nop
 800e286:	3708      	adds	r7, #8
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
    on_spi_done();
 800e294:	f7ff ffd2 	bl	800e23c <on_spi_done>
}
 800e298:	bf00      	nop
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
    on_spi_done();
 800e2a8:	f7ff ffc8 	bl	800e23c <on_spi_done>
}
 800e2ac:	bf00      	nop
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <app_drv_spi_initialize>:


void app_drv_spi_initialize(void)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	af00      	add	r7, sp, #0
    if (!m_sem_spi)
 800e2b8:	4b06      	ldr	r3, [pc, #24]	; (800e2d4 <app_drv_spi_initialize+0x20>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d107      	bne.n	800e2d0 <app_drv_spi_initialize+0x1c>
    {
        m_sem_spi = xSemaphoreCreateBinary();
 800e2c0:	2203      	movs	r2, #3
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	2001      	movs	r0, #1
 800e2c6:	f7fd fa99 	bl	800b7fc <xQueueGenericCreate>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	4a01      	ldr	r2, [pc, #4]	; (800e2d4 <app_drv_spi_initialize+0x20>)
 800e2ce:	6013      	str	r3, [r2, #0]
    }        
    
}
 800e2d0:	bf00      	nop
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	2000742c 	.word	0x2000742c

0800e2d8 <app_drv_spi_transmit_frame>:

void app_drv_spi_transmit_frame(void *spi, uint8_t *tx_data, uint32_t length)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	607a      	str	r2, [r7, #4]
    if (length && tx_data)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d010      	beq.n	800e30c <app_drv_spi_transmit_frame+0x34>
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00d      	beq.n	800e30c <app_drv_spi_transmit_frame+0x34>
    {
        HAL_SPI_Transmit_DMA(spi, tx_data, length);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	68b9      	ldr	r1, [r7, #8]
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f7f5 fe3d 	bl	8003f78 <HAL_SPI_Transmit_DMA>
        xSemaphoreTake(m_sem_spi, portMAX_DELAY);
 800e2fe:	4b05      	ldr	r3, [pc, #20]	; (800e314 <app_drv_spi_transmit_frame+0x3c>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f04f 31ff 	mov.w	r1, #4294967295
 800e306:	4618      	mov	r0, r3
 800e308:	f7fd fe24 	bl	800bf54 <xQueueSemaphoreTake>
    }
}
 800e30c:	bf00      	nop
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	2000742c 	.word	0x2000742c

0800e318 <app_drv_spi_receive_frame>:

void app_drv_spi_receive_frame(void *spi, uint8_t *rx_data, uint32_t length)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	607a      	str	r2, [r7, #4]
    if (length && rx_data)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d010      	beq.n	800e34c <app_drv_spi_receive_frame+0x34>
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00d      	beq.n	800e34c <app_drv_spi_receive_frame+0x34>
    {
        HAL_SPI_Receive_DMA(spi, rx_data, length);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	b29b      	uxth	r3, r3
 800e334:	461a      	mov	r2, r3
 800e336:	68b9      	ldr	r1, [r7, #8]
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f7f5 feed 	bl	8004118 <HAL_SPI_Receive_DMA>
        xSemaphoreTake(m_sem_spi, portMAX_DELAY);
 800e33e:	4b05      	ldr	r3, [pc, #20]	; (800e354 <app_drv_spi_receive_frame+0x3c>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f04f 31ff 	mov.w	r1, #4294967295
 800e346:	4618      	mov	r0, r3
 800e348:	f7fd fe04 	bl	800bf54 <xQueueSemaphoreTake>
    }
}
 800e34c:	bf00      	nop
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	2000742c 	.word	0x2000742c

0800e358 <app_drv_spi_transmit_receive_frame>:

void app_drv_spi_transmit_receive_frame(void *spi, uint8_t *tx_data, uint8_t *rx_data, uint32_t length)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	603b      	str	r3, [r7, #0]
    if (length && tx_data && rx_data)
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d013      	beq.n	800e394 <app_drv_spi_transmit_receive_frame+0x3c>
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d010      	beq.n	800e394 <app_drv_spi_transmit_receive_frame+0x3c>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00d      	beq.n	800e394 <app_drv_spi_transmit_receive_frame+0x3c>
    {
        HAL_SPI_TransmitReceive_DMA(spi, tx_data, rx_data, length);
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	68b9      	ldr	r1, [r7, #8]
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f7f5 ffa5 	bl	80042d0 <HAL_SPI_TransmitReceive_DMA>
        xSemaphoreTake(m_sem_spi, portMAX_DELAY);
 800e386:	4b05      	ldr	r3, [pc, #20]	; (800e39c <app_drv_spi_transmit_receive_frame+0x44>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f04f 31ff 	mov.w	r1, #4294967295
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fd fde0 	bl	800bf54 <xQueueSemaphoreTake>
    }
}
 800e394:	bf00      	nop
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	2000742c 	.word	0x2000742c

0800e3a0 <app_drv_spi_transmit_byte>:

uint8_t app_drv_spi_transmit_byte(void *spi, uint8_t data)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b086      	sub	sp, #24
 800e3a4:	af02      	add	r7, sp, #8
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	70fb      	strb	r3, [r7, #3]
    uint8_t tmp[2] = {data, 0xFF};
 800e3ac:	78fb      	ldrb	r3, [r7, #3]
 800e3ae:	733b      	strb	r3, [r7, #12]
 800e3b0:	23ff      	movs	r3, #255	; 0xff
 800e3b2:	737b      	strb	r3, [r7, #13]
    HAL_SPI_TransmitReceive(spi, tmp, tmp+1, 1, 10);
 800e3b4:	f107 020c 	add.w	r2, r7, #12
 800e3b8:	3201      	adds	r2, #1
 800e3ba:	f107 010c 	add.w	r1, r7, #12
 800e3be:	230a      	movs	r3, #10
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7f5 fc29 	bl	8003c1c <HAL_SPI_TransmitReceive>
    return tmp[1];
 800e3ca:	7b7b      	ldrb	r3, [r7, #13]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <app_drv_spi_cs>:

void app_drv_spi_cs(void *spi, bool level)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, level ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800e3e0:	78fb      	ldrb	r3, [r7, #3]
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e3e8:	4803      	ldr	r0, [pc, #12]	; (800e3f8 <app_drv_spi_cs+0x24>)
 800e3ea:	f7f4 f847 	bl	800247c <HAL_GPIO_WritePin>
}
 800e3ee:	bf00      	nop
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	40020400 	.word	0x40020400

0800e3fc <lookup_flash>:
{
    NUM_CURRENT_LOOK_UP = sizeof(m_info_table) / sizeof(app_flash_info_t)
};

static app_flash_info_t *lookup_flash(app_flash_device_t id)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	71fb      	strb	r3, [r7, #7]
    if (id > APP_SPI_FLASH_MAX)
 800e406:	79fb      	ldrb	r3, [r7, #7]
 800e408:	2b11      	cmp	r3, #17
 800e40a:	d901      	bls.n	800e410 <lookup_flash+0x14>
    {
        return NULL;
 800e40c:	2300      	movs	r3, #0
 800e40e:	e006      	b.n	800e41e <lookup_flash+0x22>
    }

    return (app_flash_info_t *)&m_info_table[id];
 800e410:	79fa      	ldrb	r2, [r7, #7]
 800e412:	4613      	mov	r3, r2
 800e414:	005b      	lsls	r3, r3, #1
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4a04      	ldr	r2, [pc, #16]	; (800e42c <lookup_flash+0x30>)
 800e41c:	4413      	add	r3, r2
}
 800e41e:	4618      	mov	r0, r3
 800e420:	370c      	adds	r7, #12
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	0801b170 	.word	0x0801b170

0800e430 <app_spi_flash_initialize>:

bool app_spi_flash_initialize(app_flash_drv_t *flash_drv)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
    // bool flash_test_status = 0;

    //	HAL_SPI_Initialize();
    app_spi_flash_wakeup();
 800e438:	f001 faa0 	bl	800f97c <app_spi_flash_wakeup>
    if (flash_get_device_id(flash_drv))
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 fc35 	bl	800ecac <flash_get_device_id>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	f000 80c0 	beq.w	800e5ca <app_spi_flash_initialize+0x19a>
    {
        app_flash_info_t *info = lookup_flash(flash_drv->info.device);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	7f1b      	ldrb	r3, [r3, #28]
 800e44e:	4618      	mov	r0, r3
 800e450:	f7ff ffd4 	bl	800e3fc <lookup_flash>
 800e454:	60f8      	str	r0, [r7, #12]
        if (info)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d007      	beq.n	800e46c <app_spi_flash_initialize+0x3c>
        {
            memcpy(&flash_drv->info, info, sizeof(app_flash_info_t));
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	331c      	adds	r3, #28
 800e460:	220c      	movs	r2, #12
 800e462:	68f9      	ldr	r1, [r7, #12]
 800e464:	4618      	mov	r0, r3
 800e466:	f009 fb4e 	bl	8017b06 <memcpy>
 800e46a:	e003      	b.n	800e474 <app_spi_flash_initialize+0x44>
        }
        else
        {
            flash_drv->info.type = APP_SPI_DEVICE_ERROR;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
//        DEBUG_INFO("Flash self test[OK]\r\nFlash type: ");
        switch (flash_drv->info.device)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	7f1b      	ldrb	r3, [r3, #28]
 800e478:	3b01      	subs	r3, #1
 800e47a:	2b0f      	cmp	r3, #15
 800e47c:	f200 8094 	bhi.w	800e5a8 <app_spi_flash_initialize+0x178>
 800e480:	a201      	add	r2, pc, #4	; (adr r2, 800e488 <app_spi_flash_initialize+0x58>)
 800e482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e486:	bf00      	nop
 800e488:	0800e4c9 	.word	0x0800e4c9
 800e48c:	0800e4d7 	.word	0x0800e4d7
 800e490:	0800e4e5 	.word	0x0800e4e5
 800e494:	0800e4f3 	.word	0x0800e4f3
 800e498:	0800e501 	.word	0x0800e501
 800e49c:	0800e50f 	.word	0x0800e50f
 800e4a0:	0800e51d 	.word	0x0800e51d
 800e4a4:	0800e52b 	.word	0x0800e52b
 800e4a8:	0800e539 	.word	0x0800e539
 800e4ac:	0800e547 	.word	0x0800e547
 800e4b0:	0800e555 	.word	0x0800e555
 800e4b4:	0800e563 	.word	0x0800e563
 800e4b8:	0800e571 	.word	0x0800e571
 800e4bc:	0800e57f 	.word	0x0800e57f
 800e4c0:	0800e58d 	.word	0x0800e58d
 800e4c4:	0800e59b 	.word	0x0800e59b
        {
        case APP_SPI_FLASH_FL164K: // 8MB
            DEBUG_RAW("APP_SPI_FLASH_FL164K, size %u bytes", flash_drv->info.size);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6a1b      	ldr	r3, [r3, #32]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	4849      	ldr	r0, [pc, #292]	; (800e5f4 <app_spi_flash_initialize+0x1c4>)
 800e4d0:	f001 ffda 	bl	8010488 <app_debug_print_raw>
            break;
 800e4d4:	e06f      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_FL127S: // 16MB
            DEBUG_RAW("APP_SPI_FLASH_FL127S, size %u bytes", flash_drv->info.size);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6a1b      	ldr	r3, [r3, #32]
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4846      	ldr	r0, [pc, #280]	; (800e5f8 <app_spi_flash_initialize+0x1c8>)
 800e4de:	f001 ffd3 	bl	8010488 <app_debug_print_raw>
            break;
 800e4e2:	e068      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_FL256S: // 32MB
            DEBUG_RAW("APP_SPI_FLASH_FL256S, size %u bytes", flash_drv->info.size);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a1b      	ldr	r3, [r3, #32]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	4844      	ldr	r0, [pc, #272]	; (800e5fc <app_spi_flash_initialize+0x1cc>)
 800e4ec:	f001 ffcc 	bl	8010488 <app_debug_print_raw>
            break;
 800e4f0:	e061      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_GD256: // 32MB
            DEBUG_RAW("APP_SPI_FLASH_GD256, size %u bytes", flash_drv->info.size);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a1b      	ldr	r3, [r3, #32]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	4841      	ldr	r0, [pc, #260]	; (800e600 <app_spi_flash_initialize+0x1d0>)
 800e4fa:	f001 ffc5 	bl	8010488 <app_debug_print_raw>
            break;
 800e4fe:	e05a      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q256JV: // 32MB
            DEBUG_RAW("APP_SPI_FLASH_256JV, size %u bytes", flash_drv->info.size);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6a1b      	ldr	r3, [r3, #32]
 800e504:	4619      	mov	r1, r3
 800e506:	483f      	ldr	r0, [pc, #252]	; (800e604 <app_spi_flash_initialize+0x1d4>)
 800e508:	f001 ffbe 	bl	8010488 <app_debug_print_raw>
            break;
 800e50c:	e053      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q80D:
            DEBUG_RAW("APP_SPI_FLASH_W25Q80DL, size %u bytes", flash_drv->info.size);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6a1b      	ldr	r3, [r3, #32]
 800e512:	4619      	mov	r1, r3
 800e514:	483c      	ldr	r0, [pc, #240]	; (800e608 <app_spi_flash_initialize+0x1d8>)
 800e516:	f001 ffb7 	bl	8010488 <app_debug_print_raw>
            break;
 800e51a:	e04c      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q128:
            DEBUG_RAW("APP_SPI_FLASH_W25Q128, size %u bytes", flash_drv->info.size);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a1b      	ldr	r3, [r3, #32]
 800e520:	4619      	mov	r1, r3
 800e522:	483a      	ldr	r0, [pc, #232]	; (800e60c <app_spi_flash_initialize+0x1dc>)
 800e524:	f001 ffb0 	bl	8010488 <app_debug_print_raw>
            break;
 800e528:	e045      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q32:
            DEBUG_RAW("APP_SPI_FLASH_W25Q32FV, size %u bytes", flash_drv->info.size);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6a1b      	ldr	r3, [r3, #32]
 800e52e:	4619      	mov	r1, r3
 800e530:	4837      	ldr	r0, [pc, #220]	; (800e610 <app_spi_flash_initialize+0x1e0>)
 800e532:	f001 ffa9 	bl	8010488 <app_debug_print_raw>
            break;
 800e536:	e03e      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q64:
            DEBUG_RAW("APP_SPI_FLASH_W25Q64, size %u bytes", flash_drv->info.size);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6a1b      	ldr	r3, [r3, #32]
 800e53c:	4619      	mov	r1, r3
 800e53e:	4835      	ldr	r0, [pc, #212]	; (800e614 <app_spi_flash_initialize+0x1e4>)
 800e540:	f001 ffa2 	bl	8010488 <app_debug_print_raw>
            break;
 800e544:	e037      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_MB85RS16:
            DEBUG_RAW("APP_SPI_FRAM_MB85RS16, size %u bytes", flash_drv->info.size);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a1b      	ldr	r3, [r3, #32]
 800e54a:	4619      	mov	r1, r3
 800e54c:	4832      	ldr	r0, [pc, #200]	; (800e618 <app_spi_flash_initialize+0x1e8>)
 800e54e:	f001 ff9b 	bl	8010488 <app_debug_print_raw>
            break;
 800e552:	e030      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_AT25SF128:
            DEBUG_RAW("APP_SPI_FLASH_AT25SF128, size %u bytes", flash_drv->info.size);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a1b      	ldr	r3, [r3, #32]
 800e558:	4619      	mov	r1, r3
 800e55a:	4830      	ldr	r0, [pc, #192]	; (800e61c <app_spi_flash_initialize+0x1ec>)
 800e55c:	f001 ff94 	bl	8010488 <app_debug_print_raw>
            break;
 800e560:	e029      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_FM25V02A:
            DEBUG_RAW("APP_SPI_FRAM_FM25V02A, size %u bytes", flash_drv->info.size);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	4619      	mov	r1, r3
 800e568:	482d      	ldr	r0, [pc, #180]	; (800e620 <app_spi_flash_initialize+0x1f0>)
 800e56a:	f001 ff8d 	bl	8010488 <app_debug_print_raw>
            break;
 800e56e:	e022      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_MB85RS64V:
            DEBUG_RAW("APP_SPI_FRAM_MB85RS64V, size %u bytes", flash_drv->info.size);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a1b      	ldr	r3, [r3, #32]
 800e574:	4619      	mov	r1, r3
 800e576:	482b      	ldr	r0, [pc, #172]	; (800e624 <app_spi_flash_initialize+0x1f4>)
 800e578:	f001 ff86 	bl	8010488 <app_debug_print_raw>
            break;
 800e57c:	e01b      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_FM25V01:
            DEBUG_RAW("APP_SPI_FRAM_FM25V01, size %u bytes", flash_drv->info.size);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6a1b      	ldr	r3, [r3, #32]
 800e582:	4619      	mov	r1, r3
 800e584:	4828      	ldr	r0, [pc, #160]	; (800e628 <app_spi_flash_initialize+0x1f8>)
 800e586:	f001 ff7f 	bl	8010488 <app_debug_print_raw>
            break;
 800e58a:	e014      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FRAM_FM25V10:
            DEBUG_RAW("APP_SPI_FRAM_FM25V10, size %u bytes", flash_drv->info.size);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a1b      	ldr	r3, [r3, #32]
 800e590:	4619      	mov	r1, r3
 800e592:	4826      	ldr	r0, [pc, #152]	; (800e62c <app_spi_flash_initialize+0x1fc>)
 800e594:	f001 ff78 	bl	8010488 <app_debug_print_raw>
            break;
 800e598:	e00d      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        case APP_SPI_FLASH_W25Q16:
            DEBUG_RAW("APP_SPI_FLASH_W25Q16, size %u bytes", flash_drv->info.size);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a1b      	ldr	r3, [r3, #32]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4823      	ldr	r0, [pc, #140]	; (800e630 <app_spi_flash_initialize+0x200>)
 800e5a2:	f001 ff71 	bl	8010488 <app_debug_print_raw>
            break;
 800e5a6:	e006      	b.n	800e5b6 <app_spi_flash_initialize+0x186>
        default:
            DEBUG_RAW("UNKNOWNN: %u", flash_drv->info.device);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	7f1b      	ldrb	r3, [r3, #28]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4821      	ldr	r0, [pc, #132]	; (800e634 <app_spi_flash_initialize+0x204>)
 800e5b0:	f001 ff6a 	bl	8010488 <app_debug_print_raw>
            break;
 800e5b4:	bf00      	nop
        }
        DEBUG_RAW("\r\n");
 800e5b6:	4820      	ldr	r0, [pc, #128]	; (800e638 <app_spi_flash_initialize+0x208>)
 800e5b8:	f001 ff66 	bl	8010488 <app_debug_print_raw>
        flash_drv->error = true;
        flash_drv->info.size = 0;
        return false;
    }

    return flash_drv->error ? false : true;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5c2:	f083 0301 	eor.w	r3, r3, #1
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	e00f      	b.n	800e5ea <app_spi_flash_initialize+0x1ba>
        DEBUG_ERROR("SPI mem init failed\r\n");
 800e5ca:	f001 fde1 	bl	8010190 <app_debug_get_ms>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	4a1a      	ldr	r2, [pc, #104]	; (800e63c <app_spi_flash_initialize+0x20c>)
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	481a      	ldr	r0, [pc, #104]	; (800e640 <app_spi_flash_initialize+0x210>)
 800e5d6:	f001 ff57 	bl	8010488 <app_debug_print_raw>
        flash_drv->error = true;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        flash_drv->info.size = 0;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	621a      	str	r2, [r3, #32]
        return false;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	08019250 	.word	0x08019250
 800e5f8:	08019274 	.word	0x08019274
 800e5fc:	08019298 	.word	0x08019298
 800e600:	080192bc 	.word	0x080192bc
 800e604:	080192e0 	.word	0x080192e0
 800e608:	08019304 	.word	0x08019304
 800e60c:	0801932c 	.word	0x0801932c
 800e610:	08019354 	.word	0x08019354
 800e614:	0801937c 	.word	0x0801937c
 800e618:	080193a0 	.word	0x080193a0
 800e61c:	080193c8 	.word	0x080193c8
 800e620:	080193f0 	.word	0x080193f0
 800e624:	08019418 	.word	0x08019418
 800e628:	08019440 	.word	0x08019440
 800e62c:	08019464 	.word	0x08019464
 800e630:	08019488 	.word	0x08019488
 800e634:	080194ac 	.word	0x080194ac
 800e638:	080194bc 	.word	0x080194bc
 800e63c:	080194c0 	.word	0x080194c0
 800e640:	080194c4 	.word	0x080194c4

0800e644 <flash_write_control>:
{
    return (flash_drv->error ? false : true);
}

static void flash_write_control(app_flash_drv_t *flash_drv, uint8_t enable)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	460b      	mov	r3, r1
 800e64e:	70fb      	strb	r3, [r7, #3]
    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	695b      	ldr	r3, [r3, #20]
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	6812      	ldr	r2, [r2, #0]
 800e658:	2100      	movs	r1, #0
 800e65a:	4610      	mov	r0, r2
 800e65c:	4798      	blx	r3
    if (enable)
 800e65e:	78fb      	ldrb	r3, [r7, #3]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d007      	beq.n	800e674 <flash_write_control+0x30>
    {
        flash_drv->callback.spi_tx_byte(flash_drv->spi, WREN_CMD);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	6812      	ldr	r2, [r2, #0]
 800e66c:	2106      	movs	r1, #6
 800e66e:	4610      	mov	r0, r2
 800e670:	4798      	blx	r3
 800e672:	e006      	b.n	800e682 <flash_write_control+0x3e>
    }
    else
    {
        flash_drv->callback.spi_tx_byte(flash_drv->spi, WRDI_CMD);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	6812      	ldr	r2, [r2, #0]
 800e67c:	2104      	movs	r1, #4
 800e67e:	4610      	mov	r0, r2
 800e680:	4798      	blx	r3
    }
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	6812      	ldr	r2, [r2, #0]
 800e68a:	2101      	movs	r1, #1
 800e68c:	4610      	mov	r0, r2
 800e68e:	4798      	blx	r3
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <wait_write_in_process>:

static void wait_write_in_process(app_flash_drv_t *flash_drv, uint32_t timeout_ms)
{
 800e698:	b590      	push	{r4, r7, lr}
 800e69a:	b087      	sub	sp, #28
 800e69c:	af02      	add	r7, sp, #8
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];
    // uint8_t cmd;

    /* Read status register */
    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	6812      	ldr	r2, [r2, #0]
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	4798      	blx	r3
    uint8_t tmp[2] = {RDSR_CMD, SPI_DUMMY};
 800e6b0:	2305      	movs	r3, #5
 800e6b2:	813b      	strh	r3, [r7, #8]

    while (1)
    {
        flash_drv->callback.spi_tx_rx(flash_drv->spi, tmp, status, 2);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	68dc      	ldr	r4, [r3, #12]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6818      	ldr	r0, [r3, #0]
 800e6bc:	f107 020c 	add.w	r2, r7, #12
 800e6c0:	f107 0108 	add.w	r1, r7, #8
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	47a0      	blx	r4

        if ((status[0] & 1) == 0)
 800e6c8:	7b3b      	ldrb	r3, [r7, #12]
 800e6ca:	f003 0301 	and.w	r3, r3, #1
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00b      	beq.n	800e6ea <wait_write_in_process+0x52>
            break;
        if (timeout_ms)
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00a      	beq.n	800e6ee <wait_write_in_process+0x56>
        {
            timeout_ms--;
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	603b      	str	r3, [r7, #0]
            flash_drv->callback.delay_ms(flash_drv, 1);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	699b      	ldr	r3, [r3, #24]
 800e6e2:	2101      	movs	r1, #1
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	4798      	blx	r3
        flash_drv->callback.spi_tx_rx(flash_drv->spi, tmp, status, 2);
 800e6e8:	e7e4      	b.n	800e6b4 <wait_write_in_process+0x1c>
            break;
 800e6ea:	bf00      	nop
 800e6ec:	e000      	b.n	800e6f0 <wait_write_in_process+0x58>
        }
        else
        {
            break;
 800e6ee:	bf00      	nop
        }
    }

    if (timeout_ms == 0)
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10a      	bne.n	800e70c <wait_write_in_process+0x74>
    {
        DEBUG_ERROR("[%s-%d] error\r\n", __FUNCTION__, __LINE__);
 800e6f6:	f001 fd4b 	bl	8010190 <app_debug_get_ms>
 800e6fa:	4601      	mov	r1, r0
 800e6fc:	f240 1333 	movw	r3, #307	; 0x133
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	4b08      	ldr	r3, [pc, #32]	; (800e724 <wait_write_in_process+0x8c>)
 800e704:	4a08      	ldr	r2, [pc, #32]	; (800e728 <wait_write_in_process+0x90>)
 800e706:	4809      	ldr	r0, [pc, #36]	; (800e72c <wait_write_in_process+0x94>)
 800e708:	f001 febe 	bl	8010488 <app_debug_print_raw>
    }
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	695b      	ldr	r3, [r3, #20]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	6812      	ldr	r2, [r2, #0]
 800e714:	2101      	movs	r1, #1
 800e716:	4610      	mov	r0, r2
 800e718:	4798      	blx	r3
}
 800e71a:	bf00      	nop
 800e71c:	3714      	adds	r7, #20
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd90      	pop	{r4, r7, pc}
 800e722:	bf00      	nop
 800e724:	0801b248 	.word	0x0801b248
 800e728:	080194c0 	.word	0x080194c0
 800e72c:	080194f4 	.word	0x080194f4

0800e730 <app_spi_flash_direct_write_bytes>:

void app_spi_flash_direct_write_bytes(app_flash_drv_t *flash_drv, uint32_t addr, uint8_t *buffer, uint16_t length)
{
 800e730:	b590      	push	{r4, r7, lr}
 800e732:	b095      	sub	sp, #84	; 0x54
 800e734:	af02      	add	r7, sp, #8
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
 800e73c:	807b      	strh	r3, [r7, #2]
    if (flash_drv->error)
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e744:	2b00      	cmp	r3, #0
 800e746:	f040 80c0 	bne.w	800e8ca <app_spi_flash_direct_write_bytes+0x19a>
        return;
    }
    DEBUG_VERBOSE("Flash write page addr 0x%08X, size %u\r\n", addr, length);


    flash_write_control(flash_drv, 1);
 800e74a:	2101      	movs	r1, #1
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f7ff ff79 	bl	800e644 <flash_write_control>
    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	695b      	ldr	r3, [r3, #20]
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	6812      	ldr	r2, [r2, #0]
 800e75a:	2100      	movs	r1, #0
 800e75c:	4610      	mov	r0, r2
 800e75e:	4798      	blx	r3

    uint8_t tmp[32];
    uint32_t buffer_size = 0;
 800e760:	2300      	movs	r3, #0
 800e762:	647b      	str	r3, [r7, #68]	; 0x44

    // uint8_t cmd;
    if (flash_drv->info.device == APP_SPI_FLASH_FL256S || flash_drv->info.device == APP_SPI_FLASH_GD256 || flash_drv->info.device == APP_SPI_FLASH_W25Q256JV)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	7f1b      	ldrb	r3, [r3, #28]
 800e768:	2b03      	cmp	r3, #3
 800e76a:	d007      	beq.n	800e77c <app_spi_flash_direct_write_bytes+0x4c>
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	7f1b      	ldrb	r3, [r3, #28]
 800e770:	2b04      	cmp	r3, #4
 800e772:	d003      	beq.n	800e77c <app_spi_flash_direct_write_bytes+0x4c>
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	7f1b      	ldrb	r3, [r3, #28]
 800e778:	2b05      	cmp	r3, #5
 800e77a:	d112      	bne.n	800e7a2 <app_spi_flash_direct_write_bytes+0x72>
    {
        /* Send write cmd */
        tmp[buffer_size++] = PP_CMD4;
 800e77c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e77e:	1c5a      	adds	r2, r3, #1
 800e780:	647a      	str	r2, [r7, #68]	; 0x44
 800e782:	3348      	adds	r3, #72	; 0x48
 800e784:	443b      	add	r3, r7
 800e786:	2212      	movs	r2, #18
 800e788:	f803 2c30 	strb.w	r2, [r3, #-48]

        /* Send 4 byte addr */
        tmp[buffer_size++] = (addr >> 24) & 0xFF;
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	0e19      	lsrs	r1, r3, #24
 800e790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e792:	1c5a      	adds	r2, r3, #1
 800e794:	647a      	str	r2, [r7, #68]	; 0x44
 800e796:	b2ca      	uxtb	r2, r1
 800e798:	3348      	adds	r3, #72	; 0x48
 800e79a:	443b      	add	r3, r7
 800e79c:	f803 2c30 	strb.w	r2, [r3, #-48]
 800e7a0:	e007      	b.n	800e7b2 <app_spi_flash_direct_write_bytes+0x82>
    }
    else
    {
        /* Send write cmd */
        tmp[buffer_size++] = PP_CMD;
 800e7a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	647a      	str	r2, [r7, #68]	; 0x44
 800e7a8:	3348      	adds	r3, #72	; 0x48
 800e7aa:	443b      	add	r3, r7
 800e7ac:	2202      	movs	r2, #2
 800e7ae:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
#if 1
    if (flash_drv->info.type == APP_SPI_FLASH)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d11d      	bne.n	800e7f8 <app_spi_flash_direct_write_bytes+0xc8>
    {
        /* Send 3 bytes address */
        tmp[buffer_size++] = (addr >> 16) & 0xFF;
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	0c19      	lsrs	r1, r3, #16
 800e7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7c2:	1c5a      	adds	r2, r3, #1
 800e7c4:	647a      	str	r2, [r7, #68]	; 0x44
 800e7c6:	b2ca      	uxtb	r2, r1
 800e7c8:	3348      	adds	r3, #72	; 0x48
 800e7ca:	443b      	add	r3, r7
 800e7cc:	f803 2c30 	strb.w	r2, [r3, #-48]
        tmp[buffer_size++] = (addr >> 8) & 0xFF;
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	0a19      	lsrs	r1, r3, #8
 800e7d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7d6:	1c5a      	adds	r2, r3, #1
 800e7d8:	647a      	str	r2, [r7, #68]	; 0x44
 800e7da:	b2ca      	uxtb	r2, r1
 800e7dc:	3348      	adds	r3, #72	; 0x48
 800e7de:	443b      	add	r3, r7
 800e7e0:	f803 2c30 	strb.w	r2, [r3, #-48]
        tmp[buffer_size++] = addr & 0xFF;
 800e7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	647a      	str	r2, [r7, #68]	; 0x44
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	b2d2      	uxtb	r2, r2
 800e7ee:	3348      	adds	r3, #72	; 0x48
 800e7f0:	443b      	add	r3, r7
 800e7f2:	f803 2c30 	strb.w	r2, [r3, #-48]
 800e7f6:	e012      	b.n	800e81e <app_spi_flash_direct_write_bytes+0xee>
    }
    else // FRAM : only 2 byte address send
    {
        /* Send 2 bytes address */
        tmp[buffer_size++] = (addr & 0xFF00) >> 8;
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	0a19      	lsrs	r1, r3, #8
 800e7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	647a      	str	r2, [r7, #68]	; 0x44
 800e802:	b2ca      	uxtb	r2, r1
 800e804:	3348      	adds	r3, #72	; 0x48
 800e806:	443b      	add	r3, r7
 800e808:	f803 2c30 	strb.w	r2, [r3, #-48]
        tmp[buffer_size++] = addr & 0xFF;
 800e80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e80e:	1c5a      	adds	r2, r3, #1
 800e810:	647a      	str	r2, [r7, #68]	; 0x44
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	b2d2      	uxtb	r2, r2
 800e816:	3348      	adds	r3, #72	; 0x48
 800e818:	443b      	add	r3, r7
 800e81a:	f803 2c30 	strb.w	r2, [r3, #-48]
    }

    flash_drv->callback.spi_tx_buffer(flash_drv->spi, tmp, buffer_size);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	6810      	ldr	r0, [r2, #0]
 800e826:	f107 0118 	add.w	r1, r7, #24
 800e82a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e82c:	4798      	blx	r3
    /* Send data to flash */
    flash_drv->callback.spi_tx_buffer(flash_drv->spi, buffer, length);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	6810      	ldr	r0, [r2, #0]
 800e836:	887a      	ldrh	r2, [r7, #2]
 800e838:	6879      	ldr	r1, [r7, #4]
 800e83a:	4798      	blx	r3
#endif
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	6812      	ldr	r2, [r2, #0]
 800e844:	2101      	movs	r1, #1
 800e846:	4610      	mov	r0, r2
 800e848:	4798      	blx	r3

    wait_write_in_process(flash_drv, FLASH_WRITE_TIMEOUT_MS);
 800e84a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f7ff ff22 	bl	800e698 <wait_write_in_process>

#if VERIFY_FLASH
    uint32_t i = 0;
 800e854:	2300      	movs	r3, #0
 800e856:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t old_addr = addr;
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	63bb      	str	r3, [r7, #56]	; 0x38
    bool found_error = false;
 800e85c:	2300      	movs	r3, #0
 800e85e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for (i = 0; i < length; i++) // Debug only
 800e862:	2300      	movs	r3, #0
 800e864:	643b      	str	r3, [r7, #64]	; 0x40
 800e866:	e02b      	b.n	800e8c0 <app_spi_flash_direct_write_bytes+0x190>
    {
        uint8_t rb;
        app_spi_flash_read_bytes(flash_drv, old_addr + i, (uint8_t *)&rb, 1);
 800e868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e86c:	18d1      	adds	r1, r2, r3
 800e86e:	f107 0217 	add.w	r2, r7, #23
 800e872:	2301      	movs	r3, #1
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 f8ab 	bl	800e9d0 <app_spi_flash_read_bytes>
        if (memcmp(&rb, buffer + i, 1))
 800e87a:	f107 0317 	add.w	r3, r7, #23
 800e87e:	781a      	ldrb	r2, [r3, #0]
 800e880:	6879      	ldr	r1, [r7, #4]
 800e882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e884:	440b      	add	r3, r1
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d016      	beq.n	800e8ba <app_spi_flash_direct_write_bytes+0x18a>
        {
            found_error = true;
 800e88c:	2301      	movs	r3, #1
 800e88e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            DEBUG_ERROR("Flash write error at addr 0x%08X, readback 0x%02X, expect 0x%02X\r\n", old_addr + i, rb, *(buffer + i));
 800e892:	f001 fc7d 	bl	8010190 <app_debug_get_ms>
 800e896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e89a:	18d1      	adds	r1, r2, r3
 800e89c:	7dfb      	ldrb	r3, [r7, #23]
 800e89e:	461c      	mov	r4, r3
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8a4:	4413      	add	r3, r2
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	9400      	str	r4, [sp, #0]
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	4a09      	ldr	r2, [pc, #36]	; (800e8d4 <app_spi_flash_direct_write_bytes+0x1a4>)
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	4809      	ldr	r0, [pc, #36]	; (800e8d8 <app_spi_flash_direct_write_bytes+0x1a8>)
 800e8b4:	f001 fde8 	bl	8010488 <app_debug_print_raw>
 800e8b8:	e008      	b.n	800e8cc <app_spi_flash_direct_write_bytes+0x19c>
    for (i = 0; i < length; i++) // Debug only
 800e8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8bc:	3301      	adds	r3, #1
 800e8be:	643b      	str	r3, [r7, #64]	; 0x40
 800e8c0:	887b      	ldrh	r3, [r7, #2]
 800e8c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d3cf      	bcc.n	800e868 <app_spi_flash_direct_write_bytes+0x138>
 800e8c8:	e000      	b.n	800e8cc <app_spi_flash_direct_write_bytes+0x19c>
        return;
 800e8ca:	bf00      	nop
    {
        DEBUG_VERBOSE("Page write success\r\n");
    }
#endif
    // vPortFree(tmp);
}
 800e8cc:	374c      	adds	r7, #76	; 0x4c
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd90      	pop	{r4, r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	080194c0 	.word	0x080194c0
 800e8d8:	0801951c 	.word	0x0801951c

0800e8dc <app_spi_flash_write>:
 * @created	:	15/01/2014
 * @version	:
 * @reviewer:
 */
void app_spi_flash_write(app_flash_drv_t *flash_drv, uint32_t addr, uint8_t *buffer, uint32_t length)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b08a      	sub	sp, #40	; 0x28
 800e8e0:	af02      	add	r7, sp, #8
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
 800e8e8:	603b      	str	r3, [r7, #0]
    if (flash_drv->error)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d164      	bne.n	800e9be <app_spi_flash_write+0xe2>
    {
        return;
    }
    /* Split data into page size (256), only availble in Flash */
    uint32_t offset_addr = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	613b      	str	r3, [r7, #16]
    uint32_t length_need_to_write = 0;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	61fb      	str	r3, [r7, #28]
    uint32_t nb_bytes_written = 0;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	61bb      	str	r3, [r7, #24]

    DEBUG_VERBOSE("Flash write %u bytes, from addr 0x%08X\r\n", length, addr);
    if (addr + length > flash_drv->info.size)
 800e900:	68ba      	ldr	r2, [r7, #8]
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	441a      	add	r2, r3
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6a1b      	ldr	r3, [r3, #32]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d90f      	bls.n	800e92e <app_spi_flash_write+0x52>
    {
        DEBUG_ERROR("Flash write from 0x%08X to 0x%08X is over flash size %u bytes\r\n",
 800e90e:	f001 fc3f 	bl	8010190 <app_debug_get_ms>
 800e912:	4601      	mov	r1, r0
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	4413      	add	r3, r2
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	6a12      	ldr	r2, [r2, #32]
 800e91e:	9201      	str	r2, [sp, #4]
 800e920:	9300      	str	r3, [sp, #0]
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	4a28      	ldr	r2, [pc, #160]	; (800e9c8 <app_spi_flash_write+0xec>)
 800e926:	4829      	ldr	r0, [pc, #164]	; (800e9cc <app_spi_flash_write+0xf0>)
 800e928:	f001 fdae 	bl	8010488 <app_debug_print_raw>
                    addr,
                    addr + length, flash_drv->info.size);
        return;
 800e92c:	e048      	b.n	800e9c0 <app_spi_flash_write+0xe4>
    }
    uint32_t max_write_size = APP_SPI_FLASH_PAGE_SIZE;
 800e92e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e932:	617b      	str	r3, [r7, #20]
    if (flash_drv->info.type == APP_SPI_FRAM)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e93a:	2b02      	cmp	r3, #2
 800e93c:	d13b      	bne.n	800e9b6 <app_spi_flash_write+0xda>
    {
        max_write_size = length + 1;
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	3301      	adds	r3, #1
 800e942:	617b      	str	r3, [r7, #20]
    }
    while (length)
 800e944:	e037      	b.n	800e9b6 <app_spi_flash_write+0xda>
    {
        offset_addr = addr % max_write_size;
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	697a      	ldr	r2, [r7, #20]
 800e94a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e94e:	6979      	ldr	r1, [r7, #20]
 800e950:	fb01 f202 	mul.w	r2, r1, r2
 800e954:	1a9b      	subs	r3, r3, r2
 800e956:	613b      	str	r3, [r7, #16]

        if (offset_addr > 0)
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00d      	beq.n	800e97a <app_spi_flash_write+0x9e>
        {
            if (offset_addr + length > max_write_size)
 800e95e:	693a      	ldr	r2, [r7, #16]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	4413      	add	r3, r2
 800e964:	697a      	ldr	r2, [r7, #20]
 800e966:	429a      	cmp	r2, r3
 800e968:	d204      	bcs.n	800e974 <app_spi_flash_write+0x98>
            {
                length_need_to_write = max_write_size - offset_addr;
 800e96a:	697a      	ldr	r2, [r7, #20]
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	1ad3      	subs	r3, r2, r3
 800e970:	61fb      	str	r3, [r7, #28]
 800e972:	e00b      	b.n	800e98c <app_spi_flash_write+0xb0>
            }
            else
            {
                length_need_to_write = length;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	61fb      	str	r3, [r7, #28]
 800e978:	e008      	b.n	800e98c <app_spi_flash_write+0xb0>
            }
        }
        else
        {
            if (length > max_write_size)
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d902      	bls.n	800e988 <app_spi_flash_write+0xac>
            {
                length_need_to_write = max_write_size;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	61fb      	str	r3, [r7, #28]
 800e986:	e001      	b.n	800e98c <app_spi_flash_write+0xb0>
            }
            else
            {
                length_need_to_write = length;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	61fb      	str	r3, [r7, #28]
            }
        }

        length -= length_need_to_write;
 800e98c:	683a      	ldr	r2, [r7, #0]
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	603b      	str	r3, [r7, #0]

        app_spi_flash_direct_write_bytes(flash_drv,
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	441a      	add	r2, r3
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	68b9      	ldr	r1, [r7, #8]
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f7ff fec5 	bl	800e730 <app_spi_flash_direct_write_bytes>
                                         addr,
                                         &buffer[nb_bytes_written],
                                         length_need_to_write);

        nb_bytes_written += length_need_to_write;
 800e9a6:	69ba      	ldr	r2, [r7, #24]
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	61bb      	str	r3, [r7, #24]

        addr += length_need_to_write;
 800e9ae:	68ba      	ldr	r2, [r7, #8]
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	60bb      	str	r3, [r7, #8]
    while (length)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d1c4      	bne.n	800e946 <app_spi_flash_write+0x6a>
 800e9bc:	e000      	b.n	800e9c0 <app_spi_flash_write+0xe4>
        return;
 800e9be:	bf00      	nop
    }
}
 800e9c0:	3720      	adds	r7, #32
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	080194c0 	.word	0x080194c0
 800e9cc:	08019578 	.word	0x08019578

0800e9d0 <app_spi_flash_read_bytes>:

void app_spi_flash_read_bytes(app_flash_drv_t *flash_drv, uint32_t addr, uint8_t *buffer, uint16_t length)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b088      	sub	sp, #32
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	607a      	str	r2, [r7, #4]
 800e9dc:	807b      	strh	r3, [r7, #2]
    if (flash_drv->error)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f040 80a1 	bne.w	800eb2c <app_spi_flash_read_bytes+0x15c>
    {
        return;
    }

    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	695b      	ldr	r3, [r3, #20]
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	6812      	ldr	r2, [r2, #0]
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	4610      	mov	r0, r2
 800e9f6:	4798      	blx	r3
    uint8_t cmd_buffer[6];
    uint8_t index = 0;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	77fb      	strb	r3, [r7, #31]
    uint32_t next_sector_offset = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	61bb      	str	r3, [r7, #24]
    if (addr + length > flash_drv->info.size)
 800ea00:	887a      	ldrh	r2, [r7, #2]
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	441a      	add	r2, r3
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	6a1b      	ldr	r3, [r3, #32]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d90d      	bls.n	800ea2a <app_spi_flash_read_bytes+0x5a>
    {
        next_sector_offset = (addr + length) - flash_drv->info.size;
 800ea0e:	887a      	ldrh	r2, [r7, #2]
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	441a      	add	r2, r3
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6a1b      	ldr	r3, [r3, #32]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	61bb      	str	r3, [r7, #24]
        length = flash_drv->info.size - addr;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	6a1b      	ldr	r3, [r3, #32]
 800ea20:	b29a      	uxth	r2, r3
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	807b      	strh	r3, [r7, #2]
    }
    while (1)
    {
        if (flash_drv->info.device == APP_SPI_FLASH_FL256S || flash_drv->info.device == APP_SPI_FLASH_GD256 || flash_drv->info.device == APP_SPI_FLASH_W25Q256JV)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	7f1b      	ldrb	r3, [r3, #28]
 800ea2e:	2b03      	cmp	r3, #3
 800ea30:	d007      	beq.n	800ea42 <app_spi_flash_read_bytes+0x72>
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	7f1b      	ldrb	r3, [r3, #28]
 800ea36:	2b04      	cmp	r3, #4
 800ea38:	d003      	beq.n	800ea42 <app_spi_flash_read_bytes+0x72>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	7f1b      	ldrb	r3, [r3, #28]
 800ea3e:	2b05      	cmp	r3, #5
 800ea40:	d112      	bne.n	800ea68 <app_spi_flash_read_bytes+0x98>
        {
            /* Send read cmd */
            cmd_buffer[index++] = READ_DATA_CMD4;
 800ea42:	7ffb      	ldrb	r3, [r7, #31]
 800ea44:	1c5a      	adds	r2, r3, #1
 800ea46:	77fa      	strb	r2, [r7, #31]
 800ea48:	3320      	adds	r3, #32
 800ea4a:	443b      	add	r3, r7
 800ea4c:	2213      	movs	r2, #19
 800ea4e:	f803 2c10 	strb.w	r2, [r3, #-16]
            cmd_buffer[index++] = (addr >> 24) & 0xFF;
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	0e1a      	lsrs	r2, r3, #24
 800ea56:	7ffb      	ldrb	r3, [r7, #31]
 800ea58:	1c59      	adds	r1, r3, #1
 800ea5a:	77f9      	strb	r1, [r7, #31]
 800ea5c:	b2d2      	uxtb	r2, r2
 800ea5e:	3320      	adds	r3, #32
 800ea60:	443b      	add	r3, r7
 800ea62:	f803 2c10 	strb.w	r2, [r3, #-16]
 800ea66:	e007      	b.n	800ea78 <app_spi_flash_read_bytes+0xa8>
        }
        else
        {
            /* Send read cmd*/
            cmd_buffer[index++] = READ_DATA_CMD;
 800ea68:	7ffb      	ldrb	r3, [r7, #31]
 800ea6a:	1c5a      	adds	r2, r3, #1
 800ea6c:	77fa      	strb	r2, [r7, #31]
 800ea6e:	3320      	adds	r3, #32
 800ea70:	443b      	add	r3, r7
 800ea72:	2203      	movs	r2, #3
 800ea74:	f803 2c10 	strb.w	r2, [r3, #-16]
        }

        if (flash_drv->info.type == APP_SPI_FLASH)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d11d      	bne.n	800eabe <app_spi_flash_read_bytes+0xee>
        {
            /* Send 3 bytes address */
            cmd_buffer[index++] = (addr >> 16) & 0xFF;
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	0c1a      	lsrs	r2, r3, #16
 800ea86:	7ffb      	ldrb	r3, [r7, #31]
 800ea88:	1c59      	adds	r1, r3, #1
 800ea8a:	77f9      	strb	r1, [r7, #31]
 800ea8c:	b2d2      	uxtb	r2, r2
 800ea8e:	3320      	adds	r3, #32
 800ea90:	443b      	add	r3, r7
 800ea92:	f803 2c10 	strb.w	r2, [r3, #-16]
            ;
            cmd_buffer[index++] = (addr >> 8) & 0xFF;
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	0a1a      	lsrs	r2, r3, #8
 800ea9a:	7ffb      	ldrb	r3, [r7, #31]
 800ea9c:	1c59      	adds	r1, r3, #1
 800ea9e:	77f9      	strb	r1, [r7, #31]
 800eaa0:	b2d2      	uxtb	r2, r2
 800eaa2:	3320      	adds	r3, #32
 800eaa4:	443b      	add	r3, r7
 800eaa6:	f803 2c10 	strb.w	r2, [r3, #-16]
            cmd_buffer[index++] = addr & 0xFF;
 800eaaa:	7ffb      	ldrb	r3, [r7, #31]
 800eaac:	1c5a      	adds	r2, r3, #1
 800eaae:	77fa      	strb	r2, [r7, #31]
 800eab0:	68ba      	ldr	r2, [r7, #8]
 800eab2:	b2d2      	uxtb	r2, r2
 800eab4:	3320      	adds	r3, #32
 800eab6:	443b      	add	r3, r7
 800eab8:	f803 2c10 	strb.w	r2, [r3, #-16]
 800eabc:	e012      	b.n	800eae4 <app_spi_flash_read_bytes+0x114>
        }
        else
        {
            /* Send 2 bytes address */
            cmd_buffer[index++] = (addr & 0xFF00) >> 8;
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	0a1a      	lsrs	r2, r3, #8
 800eac2:	7ffb      	ldrb	r3, [r7, #31]
 800eac4:	1c59      	adds	r1, r3, #1
 800eac6:	77f9      	strb	r1, [r7, #31]
 800eac8:	b2d2      	uxtb	r2, r2
 800eaca:	3320      	adds	r3, #32
 800eacc:	443b      	add	r3, r7
 800eace:	f803 2c10 	strb.w	r2, [r3, #-16]
            cmd_buffer[index++] = addr & 0xFF;
 800ead2:	7ffb      	ldrb	r3, [r7, #31]
 800ead4:	1c5a      	adds	r2, r3, #1
 800ead6:	77fa      	strb	r2, [r7, #31]
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	b2d2      	uxtb	r2, r2
 800eadc:	3320      	adds	r3, #32
 800eade:	443b      	add	r3, r7
 800eae0:	f803 2c10 	strb.w	r2, [r3, #-16]
        }
        flash_drv->callback.spi_tx_buffer(flash_drv->spi, cmd_buffer, index);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	68fa      	ldr	r2, [r7, #12]
 800eaea:	6810      	ldr	r0, [r2, #0]
 800eaec:	7ffa      	ldrb	r2, [r7, #31]
 800eaee:	f107 0110 	add.w	r1, r7, #16
 800eaf2:	4798      	blx	r3

        // Read data
        flash_drv->callback.spi_rx_buffer(flash_drv->spi, buffer, length);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	6810      	ldr	r0, [r2, #0]
 800eafc:	887a      	ldrh	r2, [r7, #2]
 800eafe:	6879      	ldr	r1, [r7, #4]
 800eb00:	4798      	blx	r3

        if (next_sector_offset == 0)
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d008      	beq.n	800eb1a <app_spi_flash_read_bytes+0x14a>
        {
            break;
        }
        else
        {
            buffer += length;
 800eb08:	887b      	ldrh	r3, [r7, #2]
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	607b      	str	r3, [r7, #4]
            addr = next_sector_offset;
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	60bb      	str	r3, [r7, #8]
            next_sector_offset = 0;
 800eb14:	2300      	movs	r3, #0
 800eb16:	61bb      	str	r3, [r7, #24]
        if (flash_drv->info.device == APP_SPI_FLASH_FL256S || flash_drv->info.device == APP_SPI_FLASH_GD256 || flash_drv->info.device == APP_SPI_FLASH_W25Q256JV)
 800eb18:	e787      	b.n	800ea2a <app_spi_flash_read_bytes+0x5a>
            break;
 800eb1a:	bf00      	nop
            continue;
        }
    }
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	695b      	ldr	r3, [r3, #20]
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	6812      	ldr	r2, [r2, #0]
 800eb24:	2101      	movs	r1, #1
 800eb26:	4610      	mov	r0, r2
 800eb28:	4798      	blx	r3
 800eb2a:	e000      	b.n	800eb2e <app_spi_flash_read_bytes+0x15e>
        return;
 800eb2c:	bf00      	nop
}
 800eb2e:	3720      	adds	r7, #32
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <app_spi_flash_erase_sector_4k>:

void app_spi_flash_erase_sector_4k(app_flash_drv_t *flash_drv, uint32_t sector_count)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b08c      	sub	sp, #48	; 0x30
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
    if (flash_drv->info.type == APP_SPI_FRAM)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb44:	2b02      	cmp	r3, #2
 800eb46:	d108      	bne.n	800eb5a <app_spi_flash_erase_sector_4k+0x26>
    {
        DEBUG_WARN("FRAM doesnt need to erase sector 4KB\r\n");
 800eb48:	f001 fb22 	bl	8010190 <app_debug_get_ms>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	4a52      	ldr	r2, [pc, #328]	; (800ec98 <app_spi_flash_erase_sector_4k+0x164>)
 800eb50:	4619      	mov	r1, r3
 800eb52:	4852      	ldr	r0, [pc, #328]	; (800ec9c <app_spi_flash_erase_sector_4k+0x168>)
 800eb54:	f001 fc98 	bl	8010488 <app_debug_print_raw>
        return;
 800eb58:	e09b      	b.n	800ec92 <app_spi_flash_erase_sector_4k+0x15e>
    }
    if (flash_drv->error)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	f040 8095 	bne.w	800ec90 <app_spi_flash_erase_sector_4k+0x15c>
    {
        return;
    }

    DEBUG_INFO("Erase sector %u\r\n", sector_count);
 800eb66:	f001 fb13 	bl	8010190 <app_debug_get_ms>
 800eb6a:	4601      	mov	r1, r0
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	4a4a      	ldr	r2, [pc, #296]	; (800ec98 <app_spi_flash_erase_sector_4k+0x164>)
 800eb70:	484b      	ldr	r0, [pc, #300]	; (800eca0 <app_spi_flash_erase_sector_4k+0x16c>)
 800eb72:	f001 fc89 	bl	8010488 <app_debug_print_raw>
    uint32_t addr = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	62bb      	str	r3, [r7, #40]	; 0x28
    // uint32_t old_addr = 0;
    addr = sector_count * APP_SPI_FLASH_SECTOR_SIZE; // Sector 4KB
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	031b      	lsls	r3, r3, #12
 800eb7e:	62bb      	str	r3, [r7, #40]	; 0x28
//    old_addr = addr;

    flash_write_control(flash_drv, 1);
 800eb80:	2101      	movs	r1, #1
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7ff fd5e 	bl	800e644 <flash_write_control>
    flash_drv->callback.delay_ms(flash_drv, 5);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	2105      	movs	r1, #5
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	4798      	blx	r3
    uint8_t cmd_buffer[32];
    uint32_t cmd_count = 0;
 800eb92:	2300      	movs	r3, #0
 800eb94:	62fb      	str	r3, [r7, #44]	; 0x2c

    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	695b      	ldr	r3, [r3, #20]
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	6812      	ldr	r2, [r2, #0]
 800eb9e:	2100      	movs	r1, #0
 800eba0:	4610      	mov	r0, r2
 800eba2:	4798      	blx	r3
    if (flash_drv->info.device == APP_SPI_FLASH_FL256S || flash_drv->info.device == APP_SPI_FLASH_GD256 || flash_drv->info.device == APP_SPI_FLASH_W25Q256JV)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	7f1b      	ldrb	r3, [r3, #28]
 800eba8:	2b03      	cmp	r3, #3
 800ebaa:	d007      	beq.n	800ebbc <app_spi_flash_erase_sector_4k+0x88>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	7f1b      	ldrb	r3, [r3, #28]
 800ebb0:	2b04      	cmp	r3, #4
 800ebb2:	d003      	beq.n	800ebbc <app_spi_flash_erase_sector_4k+0x88>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	7f1b      	ldrb	r3, [r3, #28]
 800ebb8:	2b05      	cmp	r3, #5
 800ebba:	d112      	bne.n	800ebe2 <app_spi_flash_erase_sector_4k+0xae>
    {
        /* Gui lenh */
        cmd_buffer[cmd_count++] = SE_CMD4;
 800ebbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbe:	1c5a      	adds	r2, r3, #1
 800ebc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebc2:	3330      	adds	r3, #48	; 0x30
 800ebc4:	443b      	add	r3, r7
 800ebc6:	2221      	movs	r2, #33	; 0x21
 800ebc8:	f803 2c28 	strb.w	r2, [r3, #-40]

        /* Send 4 bytes address */
        cmd_buffer[cmd_count++] = (addr >> 24) & 0xFF;
 800ebcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebce:	0e19      	lsrs	r1, r3, #24
 800ebd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd2:	1c5a      	adds	r2, r3, #1
 800ebd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebd6:	b2ca      	uxtb	r2, r1
 800ebd8:	3330      	adds	r3, #48	; 0x30
 800ebda:	443b      	add	r3, r7
 800ebdc:	f803 2c28 	strb.w	r2, [r3, #-40]
 800ebe0:	e007      	b.n	800ebf2 <app_spi_flash_erase_sector_4k+0xbe>
    }
    else
    {
        /* Gui lenh */
        cmd_buffer[cmd_count++] = SE_CMD;
 800ebe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebe8:	3330      	adds	r3, #48	; 0x30
 800ebea:	443b      	add	r3, r7
 800ebec:	2220      	movs	r2, #32
 800ebee:	f803 2c28 	strb.w	r2, [r3, #-40]
    }

    /* Send 3 byte address */
    cmd_buffer[cmd_count++] = (addr >> 16) & 0xFF;
 800ebf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf4:	0c19      	lsrs	r1, r3, #16
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	1c5a      	adds	r2, r3, #1
 800ebfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebfc:	b2ca      	uxtb	r2, r1
 800ebfe:	3330      	adds	r3, #48	; 0x30
 800ec00:	443b      	add	r3, r7
 800ec02:	f803 2c28 	strb.w	r2, [r3, #-40]
    cmd_buffer[cmd_count++] = (addr >> 8) & 0xFF;
 800ec06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec08:	0a19      	lsrs	r1, r3, #8
 800ec0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0c:	1c5a      	adds	r2, r3, #1
 800ec0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec10:	b2ca      	uxtb	r2, r1
 800ec12:	3330      	adds	r3, #48	; 0x30
 800ec14:	443b      	add	r3, r7
 800ec16:	f803 2c28 	strb.w	r2, [r3, #-40]
    cmd_buffer[cmd_count++] = addr & 0xFF;
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	1c5a      	adds	r2, r3, #1
 800ec1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec22:	b2d2      	uxtb	r2, r2
 800ec24:	3330      	adds	r3, #48	; 0x30
 800ec26:	443b      	add	r3, r7
 800ec28:	f803 2c28 	strb.w	r2, [r3, #-40]
    flash_drv->callback.spi_tx_buffer(flash_drv->spi, cmd_buffer, cmd_count);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	6810      	ldr	r0, [r2, #0]
 800ec34:	f107 0108 	add.w	r1, r7, #8
 800ec38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec3a:	4798      	blx	r3
    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	695b      	ldr	r3, [r3, #20]
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	6812      	ldr	r2, [r2, #0]
 800ec44:	2101      	movs	r1, #1
 800ec46:	4610      	mov	r0, r2
 800ec48:	4798      	blx	r3
    flash_drv->callback.delay_ms(flash_drv, SECTOR_ERASE_TIME_MS);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	4798      	blx	r3
    wait_write_in_process(flash_drv, 50);
 800ec56:	2132      	movs	r1, #50	; 0x32
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f7ff fd1d 	bl	800e698 <wait_write_in_process>
    if (app_spi_flash_is_sector_empty(flash_drv, sector_count))
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 fe92 	bl	800f98a <app_spi_flash_is_sector_empty>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d008      	beq.n	800ec7e <app_spi_flash_erase_sector_4k+0x14a>
    {
        DEBUG_INFO("Success\r\n", sector_count);
 800ec6c:	f001 fa90 	bl	8010190 <app_debug_get_ms>
 800ec70:	4601      	mov	r1, r0
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	4a08      	ldr	r2, [pc, #32]	; (800ec98 <app_spi_flash_erase_sector_4k+0x164>)
 800ec76:	480b      	ldr	r0, [pc, #44]	; (800eca4 <app_spi_flash_erase_sector_4k+0x170>)
 800ec78:	f001 fc06 	bl	8010488 <app_debug_print_raw>
 800ec7c:	e009      	b.n	800ec92 <app_spi_flash_erase_sector_4k+0x15e>
    }
    else
    {
        DEBUG_ERROR("Failed\r\n", sector_count);
 800ec7e:	f001 fa87 	bl	8010190 <app_debug_get_ms>
 800ec82:	4601      	mov	r1, r0
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	4a04      	ldr	r2, [pc, #16]	; (800ec98 <app_spi_flash_erase_sector_4k+0x164>)
 800ec88:	4807      	ldr	r0, [pc, #28]	; (800eca8 <app_spi_flash_erase_sector_4k+0x174>)
 800ec8a:	f001 fbfd 	bl	8010488 <app_debug_print_raw>
 800ec8e:	e000      	b.n	800ec92 <app_spi_flash_erase_sector_4k+0x15e>
        return;
 800ec90:	bf00      	nop
    }
}
 800ec92:	3730      	adds	r7, #48	; 0x30
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	080194c0 	.word	0x080194c0
 800ec9c:	080195d0 	.word	0x080195d0
 800eca0:	08019610 	.word	0x08019610
 800eca4:	0801963c 	.word	0x0801963c
 800eca8:	08019660 	.word	0x08019660

0800ecac <flash_get_device_id>:
    wait_write_in_process(old_addr);
}
#endif

bool flash_get_device_id(app_flash_drv_t *flash_drv)
{
 800ecac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecb0:	b0b2      	sub	sp, #200	; 0xc8
 800ecb2:	af04      	add	r7, sp, #16
 800ecb4:	6578      	str	r0, [r7, #84]	; 0x54
    uint8_t reg_status = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    uint8_t tries;
    uint8_t cmd;
    app_spi_flash_device_id_t id;
    bool val = false;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    flash_drv->error = false;
 800ecc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    flash_drv->info.device = APP_SPI_FLASH_DEVICE_INVALID;
 800ecca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eccc:	2300      	movs	r3, #0
 800ecce:	7713      	strb	r3, [r2, #28]

    for (tries = 0; tries < FLASH_INIT_MAX_RETRIES; tries++)
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800ecd6:	f000 be37 	b.w	800f948 <flash_get_device_id+0xc9c>
    {
        flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800ecda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecdc:	695a      	ldr	r2, [r3, #20]
 800ecde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2100      	movs	r1, #0
 800ece4:	4618      	mov	r0, r3
 800ece6:	4790      	blx	r2
#if 0
        cmd = READ_ID_CMD;
#else
        cmd = RDID_CMD;
 800ece8:	239f      	movs	r3, #159	; 0x9f
 800ecea:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
#endif
        if (cmd == READ_ID_CMD)
 800ecee:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800ecf2:	2b90      	cmp	r3, #144	; 0x90
 800ecf4:	d12f      	bne.n	800ed56 <flash_get_device_id+0xaa>
        {
            uint8_t buffer_tx[6] = {READ_ID_CMD, 0x00, 0x00, 0x00, 0xFF, 0x00};
 800ecf6:	4a90      	ldr	r2, [pc, #576]	; (800ef38 <flash_get_device_id+0x28c>)
 800ecf8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ecfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed00:	6018      	str	r0, [r3, #0]
 800ed02:	3304      	adds	r3, #4
 800ed04:	8019      	strh	r1, [r3, #0]

			cmd = 0xFF;
			flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &id.name.manufacture_id[1], 1);
			flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &id.name.device_id[0], 1);
#else
            flash_drv->callback.spi_tx_rx(flash_drv->spi, buffer_tx, buffer_rx, 6);
 800ed06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed08:	68dc      	ldr	r4, [r3, #12]
 800ed0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed0c:	6818      	ldr	r0, [r3, #0]
 800ed0e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800ed12:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800ed16:	2306      	movs	r3, #6
 800ed18:	47a0      	blx	r4
            flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800ed1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed1c:	695a      	ldr	r2, [r3, #20]
 800ed1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2101      	movs	r1, #1
 800ed24:	4618      	mov	r0, r3
 800ed26:	4790      	blx	r2
            id.name.manufacture_id[1] = buffer_rx[4];
 800ed28:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800ed2c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
            id.name.device_id[0] = buffer_rx[4];
 800ed30:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800ed34:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

#endif
            DEBUG_INFO("device id: 0x0x%02, manufacture id: 0x%02X\r\n", id.name.device_id[0],
 800ed38:	f001 fa2a 	bl	8010190 <app_debug_get_ms>
 800ed3c:	4601      	mov	r1, r0
 800ed3e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ed42:	461a      	mov	r2, r3
 800ed44:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	4a7b      	ldr	r2, [pc, #492]	; (800ef3c <flash_get_device_id+0x290>)
 800ed4e:	487c      	ldr	r0, [pc, #496]	; (800ef40 <flash_get_device_id+0x294>)
 800ed50:	f001 fb9a 	bl	8010488 <app_debug_print_raw>
 800ed54:	e093      	b.n	800ee7e <flash_get_device_id+0x1d2>
                       id.name.manufacture_id[1]);
        }
        else
        {
 800ed56:	466b      	mov	r3, sp
 800ed58:	461d      	mov	r5, r3
            uint8_t buffer_size = 1 + sizeof(app_spi_flash_device_id_t);
 800ed5a:	2305      	movs	r3, #5
 800ed5c:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            uint8_t buffer_tx[buffer_size];
 800ed60:	f897 10ad 	ldrb.w	r1, [r7, #173]	; 0xad
 800ed64:	460b      	mov	r3, r1
 800ed66:	3b01      	subs	r3, #1
 800ed68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ed6c:	b2cb      	uxtb	r3, r1
 800ed6e:	2200      	movs	r2, #0
 800ed70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed72:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ed74:	f04f 0200 	mov.w	r2, #0
 800ed78:	f04f 0300 	mov.w	r3, #0
 800ed7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ed7e:	00c3      	lsls	r3, r0, #3
 800ed80:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ed82:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ed86:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ed88:	00c2      	lsls	r2, r0, #3
 800ed8a:	b2cb      	uxtb	r3, r1
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	643b      	str	r3, [r7, #64]	; 0x40
 800ed90:	647a      	str	r2, [r7, #68]	; 0x44
 800ed92:	f04f 0200 	mov.w	r2, #0
 800ed96:	f04f 0300 	mov.w	r3, #0
 800ed9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed9c:	00c3      	lsls	r3, r0, #3
 800ed9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eda0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800eda4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eda6:	00c2      	lsls	r2, r0, #3
 800eda8:	460b      	mov	r3, r1
 800edaa:	3307      	adds	r3, #7
 800edac:	08db      	lsrs	r3, r3, #3
 800edae:	00db      	lsls	r3, r3, #3
 800edb0:	ebad 0d03 	sub.w	sp, sp, r3
 800edb4:	ab04      	add	r3, sp, #16
 800edb6:	3300      	adds	r3, #0
 800edb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            uint8_t buffer_rx[buffer_size];
 800edbc:	f897 10ad 	ldrb.w	r1, [r7, #173]	; 0xad
 800edc0:	460b      	mov	r3, r1
 800edc2:	3b01      	subs	r3, #1
 800edc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800edc8:	b2cb      	uxtb	r3, r1
 800edca:	2200      	movs	r2, #0
 800edcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800edce:	63fa      	str	r2, [r7, #60]	; 0x3c
 800edd0:	f04f 0200 	mov.w	r2, #0
 800edd4:	f04f 0300 	mov.w	r3, #0
 800edd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800edda:	00c3      	lsls	r3, r0, #3
 800eddc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ede2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ede4:	00c2      	lsls	r2, r0, #3
 800ede6:	b2cb      	uxtb	r3, r1
 800ede8:	2200      	movs	r2, #0
 800edea:	633b      	str	r3, [r7, #48]	; 0x30
 800edec:	637a      	str	r2, [r7, #52]	; 0x34
 800edee:	f04f 0200 	mov.w	r2, #0
 800edf2:	f04f 0300 	mov.w	r3, #0
 800edf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edf8:	00c3      	lsls	r3, r0, #3
 800edfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edfc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ee00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee02:	00c2      	lsls	r2, r0, #3
 800ee04:	460b      	mov	r3, r1
 800ee06:	3307      	adds	r3, #7
 800ee08:	08db      	lsrs	r3, r3, #3
 800ee0a:	00db      	lsls	r3, r3, #3
 800ee0c:	ebad 0d03 	sub.w	sp, sp, r3
 800ee10:	ab04      	add	r3, sp, #16
 800ee12:	3300      	adds	r3, #0
 800ee14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            buffer_tx[0] = cmd;
 800ee18:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800ee1c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ee20:	7013      	strb	r3, [r2, #0]

            flash_drv->callback.spi_tx_rx(flash_drv->spi, buffer_tx, buffer_rx, buffer_size);
 800ee22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee24:	68dc      	ldr	r4, [r3, #12]
 800ee26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee28:	6818      	ldr	r0, [r3, #0]
 800ee2a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800ee2e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ee32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ee36:	47a0      	blx	r4
            memcpy(&id, &buffer_rx[1], sizeof(app_spi_flash_device_id_t));
 800ee38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	66fb      	str	r3, [r7, #108]	; 0x6c
            flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800ee42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee44:	695a      	ldr	r2, [r3, #20]
 800ee46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2101      	movs	r1, #1
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	4790      	blx	r2

            DEBUG_INFO("device id: 0x%02X%02X, manufacture id[0-1]: 0x%02X%02X\r\n", id.name.device_id[0],
 800ee50:	f001 f99e 	bl	8010190 <app_debug_get_ms>
 800ee54:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ee58:	461c      	mov	r4, r3
 800ee5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee5e:	4619      	mov	r1, r3
 800ee60:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800ee64:	461a      	mov	r2, r3
 800ee66:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800ee6a:	9302      	str	r3, [sp, #8]
 800ee6c:	9201      	str	r2, [sp, #4]
 800ee6e:	9100      	str	r1, [sp, #0]
 800ee70:	4623      	mov	r3, r4
 800ee72:	4a32      	ldr	r2, [pc, #200]	; (800ef3c <flash_get_device_id+0x290>)
 800ee74:	4601      	mov	r1, r0
 800ee76:	4833      	ldr	r0, [pc, #204]	; (800ef44 <flash_get_device_id+0x298>)
 800ee78:	f001 fb06 	bl	8010488 <app_debug_print_raw>
 800ee7c:	46ad      	mov	sp, r5
                       id.name.device_id[1],
                       id.name.manufacture_id[0],
                       id.name.manufacture_id[1]);
        }

        if (cmd == READ_ID_CMD)     // read fram
 800ee7e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800ee82:	2b90      	cmp	r3, #144	; 0x90
 800ee84:	f040 8355 	bne.w	800f532 <flash_get_device_id+0x886>
        {
            if (id.name.manufacture_id[1] == 0x01)
 800ee88:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d120      	bne.n	800eed2 <flash_get_device_id+0x226>
            {
                DEBUG_INFO("FRAM\r\n");
 800ee90:	f001 f97e 	bl	8010190 <app_debug_get_ms>
 800ee94:	4603      	mov	r3, r0
 800ee96:	4a29      	ldr	r2, [pc, #164]	; (800ef3c <flash_get_device_id+0x290>)
 800ee98:	4619      	mov	r1, r3
 800ee9a:	482b      	ldr	r0, [pc, #172]	; (800ef48 <flash_get_device_id+0x29c>)
 800ee9c:	f001 faf4 	bl	8010488 <app_debug_print_raw>
                if (id.name.device_id[0] == 0x16)
 800eea0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800eea4:	2b16      	cmp	r3, #22
 800eea6:	d107      	bne.n	800eeb8 <flash_get_device_id+0x20c>
                {
                    flash_drv->info.device = APP_SPI_FLASH_FL164K;
 800eea8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eeaa:	2301      	movs	r3, #1
 800eeac:	7713      	strb	r3, [r2, #28]
                    val = true;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800eeb4:	f000 bd3f 	b.w	800f936 <flash_get_device_id+0xc8a>
                }
                else if (id.name.device_id[0] == 0x17)
 800eeb8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800eebc:	2b17      	cmp	r3, #23
 800eebe:	f040 853a 	bne.w	800f936 <flash_get_device_id+0xc8a>
                {
                    flash_drv->info.device = APP_SPI_FLASH_FL127S;
 800eec2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eec4:	2302      	movs	r3, #2
 800eec6:	7713      	strb	r3, [r2, #28]
                    val = true;
 800eec8:	2301      	movs	r3, #1
 800eeca:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800eece:	f000 bd32 	b.w	800f936 <flash_get_device_id+0xc8a>
                }
            }
            else if (id.name.manufacture_id[1] == 0xEF)
 800eed2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800eed6:	2bef      	cmp	r3, #239	; 0xef
 800eed8:	f040 80c2 	bne.w	800f060 <flash_get_device_id+0x3b4>
            {
                DEBUG_INFO("Windbond\r\n");
 800eedc:	f001 f958 	bl	8010190 <app_debug_get_ms>
 800eee0:	4603      	mov	r3, r0
 800eee2:	4a16      	ldr	r2, [pc, #88]	; (800ef3c <flash_get_device_id+0x290>)
 800eee4:	4619      	mov	r1, r3
 800eee6:	4819      	ldr	r0, [pc, #100]	; (800ef4c <flash_get_device_id+0x2a0>)
 800eee8:	f001 face 	bl	8010488 <app_debug_print_raw>
                if (id.name.device_id[0] == 0x13)
 800eeec:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800eef0:	2b13      	cmp	r3, #19
 800eef2:	d10d      	bne.n	800ef10 <flash_get_device_id+0x264>
                {
                    DEBUG_INFO("W25Q80DL\r\n");
 800eef4:	f001 f94c 	bl	8010190 <app_debug_get_ms>
 800eef8:	4603      	mov	r3, r0
 800eefa:	4a10      	ldr	r2, [pc, #64]	; (800ef3c <flash_get_device_id+0x290>)
 800eefc:	4619      	mov	r1, r3
 800eefe:	4814      	ldr	r0, [pc, #80]	; (800ef50 <flash_get_device_id+0x2a4>)
 800ef00:	f001 fac2 	bl	8010488 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q80D;
 800ef04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef06:	2306      	movs	r3, #6
 800ef08:	7713      	strb	r3, [r2, #28]
                    val = true;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                }
                if (id.name.device_id[0] == 0x15)
 800ef10:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ef14:	2b15      	cmp	r3, #21
 800ef16:	d11f      	bne.n	800ef58 <flash_get_device_id+0x2ac>
                {
                    DEBUG_INFO("W25Q32FV\r\n");
 800ef18:	f001 f93a 	bl	8010190 <app_debug_get_ms>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	4a07      	ldr	r2, [pc, #28]	; (800ef3c <flash_get_device_id+0x290>)
 800ef20:	4619      	mov	r1, r3
 800ef22:	480c      	ldr	r0, [pc, #48]	; (800ef54 <flash_get_device_id+0x2a8>)
 800ef24:	f001 fab0 	bl	8010488 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q32;
 800ef28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef2a:	2308      	movs	r3, #8
 800ef2c:	7713      	strb	r3, [r2, #28]
                    val = true;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800ef34:	e022      	b.n	800ef7c <flash_get_device_id+0x2d0>
 800ef36:	bf00      	nop
 800ef38:	08019a4c 	.word	0x08019a4c
 800ef3c:	080194c0 	.word	0x080194c0
 800ef40:	08019680 	.word	0x08019680
 800ef44:	080196c4 	.word	0x080196c4
 800ef48:	08019714 	.word	0x08019714
 800ef4c:	08019734 	.word	0x08019734
 800ef50:	08019758 	.word	0x08019758
 800ef54:	0801977c 	.word	0x0801977c
                }
                else if (id.name.device_id[0] == 0x17)
 800ef58:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ef5c:	2b17      	cmp	r3, #23
 800ef5e:	d10d      	bne.n	800ef7c <flash_get_device_id+0x2d0>
                {
                    DEBUG_INFO("W25Q128\r\n");
 800ef60:	f001 f916 	bl	8010190 <app_debug_get_ms>
 800ef64:	4603      	mov	r3, r0
 800ef66:	4a81      	ldr	r2, [pc, #516]	; (800f16c <flash_get_device_id+0x4c0>)
 800ef68:	4619      	mov	r1, r3
 800ef6a:	4881      	ldr	r0, [pc, #516]	; (800f170 <flash_get_device_id+0x4c4>)
 800ef6c:	f001 fa8c 	bl	8010488 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q128;
 800ef70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef72:	2307      	movs	r3, #7
 800ef74:	7713      	strb	r3, [r2, #28]
                    val = true;
 800ef76:	2301      	movs	r3, #1
 800ef78:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                }
                if (id.name.device_id[0] == 0x18)
 800ef7c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ef80:	2b18      	cmp	r3, #24
 800ef82:	f040 84d8 	bne.w	800f936 <flash_get_device_id+0xc8a>
                {
                    DEBUG_INFO("256JV\r\n");
 800ef86:	f001 f903 	bl	8010190 <app_debug_get_ms>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	4a77      	ldr	r2, [pc, #476]	; (800f16c <flash_get_device_id+0x4c0>)
 800ef8e:	4619      	mov	r1, r3
 800ef90:	4878      	ldr	r0, [pc, #480]	; (800f174 <flash_get_device_id+0x4c8>)
 800ef92:	f001 fa79 	bl	8010488 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q256JV;
 800ef96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef98:	2305      	movs	r3, #5
 800ef9a:	7713      	strb	r3, [r2, #28]
                    // Enter mode : 4 bytes address
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800ef9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef9e:	695a      	ldr	r2, [r3, #20]
 800efa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2100      	movs	r1, #0
 800efa6:	4618      	mov	r0, r3
 800efa8:	4790      	blx	r2
                    cmd = EN4B_MODE_CMD;
 800efaa:	23b7      	movs	r3, #183	; 0xb7
 800efac:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 800efb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efb2:	691c      	ldr	r4, [r3, #16]
 800efb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800efbc:	4619      	mov	r1, r3
 800efbe:	4610      	mov	r0, r2
 800efc0:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800efc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efc4:	695a      	ldr	r2, [r3, #20]
 800efc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2101      	movs	r1, #1
 800efcc:	4618      	mov	r0, r3
 800efce:	4790      	blx	r2

                    flash_drv->callback.delay_ms(flash_drv, 10);
 800efd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efd2:	699b      	ldr	r3, [r3, #24]
 800efd4:	210a      	movs	r1, #10
 800efd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800efd8:	4798      	blx	r3
                    // Read status register 3, bit ADS  (S16) - bit 0
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800efda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efdc:	695a      	ldr	r2, [r3, #20]
 800efde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2100      	movs	r1, #0
 800efe4:	4618      	mov	r0, r3
 800efe6:	4790      	blx	r2
                    cmd = RDSR3_CMD;
 800efe8:	2315      	movs	r3, #21
 800efea:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 800efee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eff0:	691c      	ldr	r4, [r3, #16]
 800eff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800effa:	4619      	mov	r1, r3
 800effc:	4610      	mov	r0, r2
 800effe:	47a0      	blx	r4

                    cmd = SPI_DUMMY;
 800f000:	2300      	movs	r3, #0
 800f002:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &reg_status, 1);
 800f006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f008:	68dc      	ldr	r4, [r3, #12]
 800f00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f00c:	6818      	ldr	r0, [r3, #0]
 800f00e:	f107 0273 	add.w	r2, r7, #115	; 0x73
 800f012:	f107 0172 	add.w	r1, r7, #114	; 0x72
 800f016:	2301      	movs	r3, #1
 800f018:	47a0      	blx	r4

                    DEBUG_INFO("status register: %02X\r\n", reg_status);
 800f01a:	f001 f8b9 	bl	8010190 <app_debug_get_ms>
 800f01e:	4601      	mov	r1, r0
 800f020:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f024:	4a51      	ldr	r2, [pc, #324]	; (800f16c <flash_get_device_id+0x4c0>)
 800f026:	4854      	ldr	r0, [pc, #336]	; (800f178 <flash_get_device_id+0x4cc>)
 800f028:	f001 fa2e 	bl	8010488 <app_debug_print_raw>
                    if (reg_status & 0x01)
 800f02c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f030:	f003 0301 	and.w	r3, r3, #1
 800f034:	2b00      	cmp	r3, #0
 800f036:	d007      	beq.n	800f048 <flash_get_device_id+0x39c>
                    {
                        DEBUG_INFO("Address mode : 32 bit\r\n");
 800f038:	f001 f8aa 	bl	8010190 <app_debug_get_ms>
 800f03c:	4603      	mov	r3, r0
 800f03e:	4a4b      	ldr	r2, [pc, #300]	; (800f16c <flash_get_device_id+0x4c0>)
 800f040:	4619      	mov	r1, r3
 800f042:	484e      	ldr	r0, [pc, #312]	; (800f17c <flash_get_device_id+0x4d0>)
 800f044:	f001 fa20 	bl	8010488 <app_debug_print_raw>
                    }
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800f048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f04a:	695a      	ldr	r2, [r3, #20]
 800f04c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2101      	movs	r1, #1
 800f052:	4618      	mov	r0, r3
 800f054:	4790      	blx	r2
                    val = true;
 800f056:	2301      	movs	r3, #1
 800f058:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f05c:	f000 bc6b 	b.w	800f936 <flash_get_device_id+0xc8a>
                }
            }
            else if (id.name.manufacture_id[1] == 0xC8) /* APP_SPI_FLASH_GD256 - GigaDevice 256Mb */
 800f060:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f064:	2bc8      	cmp	r3, #200	; 0xc8
 800f066:	f040 808f 	bne.w	800f188 <flash_get_device_id+0x4dc>
            {
                DEBUG_INFO("Giga device\r\n");
 800f06a:	f001 f891 	bl	8010190 <app_debug_get_ms>
 800f06e:	4603      	mov	r3, r0
 800f070:	4a3e      	ldr	r2, [pc, #248]	; (800f16c <flash_get_device_id+0x4c0>)
 800f072:	4619      	mov	r1, r3
 800f074:	4842      	ldr	r0, [pc, #264]	; (800f180 <flash_get_device_id+0x4d4>)
 800f076:	f001 fa07 	bl	8010488 <app_debug_print_raw>
                if (id.name.device_id[0] == 0x18)
 800f07a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800f07e:	2b18      	cmp	r3, #24
 800f080:	f040 8459 	bne.w	800f936 <flash_get_device_id+0xc8a>
                {
                    flash_drv->info.device = APP_SPI_FLASH_GD256;
 800f084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f086:	2304      	movs	r3, #4
 800f088:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("GD256\r\n");
 800f08a:	f001 f881 	bl	8010190 <app_debug_get_ms>
 800f08e:	4603      	mov	r3, r0
 800f090:	4a36      	ldr	r2, [pc, #216]	; (800f16c <flash_get_device_id+0x4c0>)
 800f092:	4619      	mov	r1, r3
 800f094:	483b      	ldr	r0, [pc, #236]	; (800f184 <flash_get_device_id+0x4d8>)
 800f096:	f001 f9f7 	bl	8010488 <app_debug_print_raw>

                    // Enter mode : 4 bytes address
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800f09a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f09c:	695a      	ldr	r2, [r3, #20]
 800f09e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	4790      	blx	r2
                    cmd = EN4B_MODE_CMD;
 800f0a8:	23b7      	movs	r3, #183	; 0xb7
 800f0aa:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 800f0ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0b0:	691c      	ldr	r4, [r3, #16]
 800f0b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4610      	mov	r0, r2
 800f0be:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800f0c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0c2:	695a      	ldr	r2, [r3, #20]
 800f0c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2101      	movs	r1, #1
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	4790      	blx	r2

                    flash_drv->callback.delay_ms(flash_drv, 10);
 800f0ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0d0:	699b      	ldr	r3, [r3, #24]
 800f0d2:	210a      	movs	r1, #10
 800f0d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f0d6:	4798      	blx	r3
                    // Read register status 2, bit ADS - 5
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800f0d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0da:	695a      	ldr	r2, [r3, #20]
 800f0dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	4790      	blx	r2
                    cmd = RDSR2_CMD;
 800f0e6:	2335      	movs	r3, #53	; 0x35
 800f0e8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 800f0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0ee:	691c      	ldr	r4, [r3, #16]
 800f0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	4610      	mov	r0, r2
 800f0fc:	47a0      	blx	r4

                    cmd = SPI_DUMMY;
 800f0fe:	2300      	movs	r3, #0
 800f100:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &reg_status, 1);
 800f104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f106:	68dc      	ldr	r4, [r3, #12]
 800f108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f10a:	6818      	ldr	r0, [r3, #0]
 800f10c:	f107 0273 	add.w	r2, r7, #115	; 0x73
 800f110:	f107 0172 	add.w	r1, r7, #114	; 0x72
 800f114:	2301      	movs	r3, #1
 800f116:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800f118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f11a:	695a      	ldr	r2, [r3, #20]
 800f11c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	2101      	movs	r1, #1
 800f122:	4618      	mov	r0, r3
 800f124:	4790      	blx	r2

                    DEBUG_INFO("status register: %02X\r\n", reg_status);
 800f126:	f001 f833 	bl	8010190 <app_debug_get_ms>
 800f12a:	4601      	mov	r1, r0
 800f12c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f130:	4a0e      	ldr	r2, [pc, #56]	; (800f16c <flash_get_device_id+0x4c0>)
 800f132:	4811      	ldr	r0, [pc, #68]	; (800f178 <flash_get_device_id+0x4cc>)
 800f134:	f001 f9a8 	bl	8010488 <app_debug_print_raw>
                    if (reg_status & 0x20)
 800f138:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f13c:	f003 0320 	and.w	r3, r3, #32
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00b      	beq.n	800f15c <flash_get_device_id+0x4b0>
                    {
                        DEBUG_INFO("Address mode : 32 bit\r\n");
 800f144:	f001 f824 	bl	8010190 <app_debug_get_ms>
 800f148:	4603      	mov	r3, r0
 800f14a:	4a08      	ldr	r2, [pc, #32]	; (800f16c <flash_get_device_id+0x4c0>)
 800f14c:	4619      	mov	r1, r3
 800f14e:	480b      	ldr	r0, [pc, #44]	; (800f17c <flash_get_device_id+0x4d0>)
 800f150:	f001 f99a 	bl	8010488 <app_debug_print_raw>
                    else
                    {
                        flash_drv->callback.delay_ms(flash_drv, 500);
                        continue;
                    }
                    val = true;
 800f154:	2301      	movs	r3, #1
 800f156:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f15a:	e3ec      	b.n	800f936 <flash_get_device_id+0xc8a>
                        flash_drv->callback.delay_ms(flash_drv, 500);
 800f15c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f15e:	699b      	ldr	r3, [r3, #24]
 800f160:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800f164:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f166:	4798      	blx	r3
                        continue;
 800f168:	e3e9      	b.n	800f93e <flash_get_device_id+0xc92>
 800f16a:	bf00      	nop
 800f16c:	080194c0 	.word	0x080194c0
 800f170:	080197a0 	.word	0x080197a0
 800f174:	080197c4 	.word	0x080197c4
 800f178:	080197e4 	.word	0x080197e4
 800f17c:	08019814 	.word	0x08019814
 800f180:	08019844 	.word	0x08019844
 800f184:	0801986c 	.word	0x0801986c
                }
            }
            else if (id.name.manufacture_id[1] == 0x89) /* APP_SPI_FLASH_AT25SF128 */
 800f188:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f18c:	2b89      	cmp	r3, #137	; 0x89
 800f18e:	d17f      	bne.n	800f290 <flash_get_device_id+0x5e4>
            {
                DEBUG_INFO("Adesto Technologies\r\n");
 800f190:	f000 fffe 	bl	8010190 <app_debug_get_ms>
 800f194:	4603      	mov	r3, r0
 800f196:	4aa8      	ldr	r2, [pc, #672]	; (800f438 <flash_get_device_id+0x78c>)
 800f198:	4619      	mov	r1, r3
 800f19a:	48a8      	ldr	r0, [pc, #672]	; (800f43c <flash_get_device_id+0x790>)
 800f19c:	f001 f974 	bl	8010488 <app_debug_print_raw>
                if (id.name.device_id[0] == 0x1F)
 800f1a0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800f1a4:	2b1f      	cmp	r3, #31
 800f1a6:	f040 83c6 	bne.w	800f936 <flash_get_device_id+0xc8a>
                {
                    flash_drv->info.device = APP_SPI_FLASH_AT25SF128;
 800f1aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f1ac:	230b      	movs	r3, #11
 800f1ae:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("AT25SF128A\r\n");
 800f1b0:	f000 ffee 	bl	8010190 <app_debug_get_ms>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	4aa0      	ldr	r2, [pc, #640]	; (800f438 <flash_get_device_id+0x78c>)
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	48a1      	ldr	r0, [pc, #644]	; (800f440 <flash_get_device_id+0x794>)
 800f1bc:	f001 f964 	bl	8010488 <app_debug_print_raw>

                    // Enter mode : 4 bytes address
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800f1c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1c2:	695a      	ldr	r2, [r3, #20]
 800f1c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	4790      	blx	r2
                    cmd = EN4B_MODE_CMD;
 800f1ce:	23b7      	movs	r3, #183	; 0xb7
 800f1d0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 800f1d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1d6:	691c      	ldr	r4, [r3, #16]
 800f1d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	4610      	mov	r0, r2
 800f1e4:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800f1e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1e8:	695a      	ldr	r2, [r3, #20]
 800f1ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2101      	movs	r1, #1
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	4790      	blx	r2

                    flash_drv->callback.delay_ms(flash_drv, 10);
 800f1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	210a      	movs	r1, #10
 800f1fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f1fc:	4798      	blx	r3
                    // Read register status 2, bit ADS - 5
                    flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800f1fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f200:	695a      	ldr	r2, [r3, #20]
 800f202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2100      	movs	r1, #0
 800f208:	4618      	mov	r0, r3
 800f20a:	4790      	blx	r2
                    cmd = RDSR2_CMD;
 800f20c:	2335      	movs	r3, #53	; 0x35
 800f20e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_byte(flash_drv->spi, cmd);
 800f212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f214:	691c      	ldr	r4, [r3, #16]
 800f216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800f21e:	4619      	mov	r1, r3
 800f220:	4610      	mov	r0, r2
 800f222:	47a0      	blx	r4

                    cmd = SPI_DUMMY;
 800f224:	2300      	movs	r3, #0
 800f226:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                    flash_drv->callback.spi_tx_rx(flash_drv->spi, &cmd, &reg_status, 1);
 800f22a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f22c:	68dc      	ldr	r4, [r3, #12]
 800f22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f230:	6818      	ldr	r0, [r3, #0]
 800f232:	f107 0273 	add.w	r2, r7, #115	; 0x73
 800f236:	f107 0172 	add.w	r1, r7, #114	; 0x72
 800f23a:	2301      	movs	r3, #1
 800f23c:	47a0      	blx	r4
                    flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800f23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f240:	695a      	ldr	r2, [r3, #20]
 800f242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2101      	movs	r1, #1
 800f248:	4618      	mov	r0, r3
 800f24a:	4790      	blx	r2

                    DEBUG_INFO("status register: %02X\r\n", reg_status);
 800f24c:	f000 ffa0 	bl	8010190 <app_debug_get_ms>
 800f250:	4601      	mov	r1, r0
 800f252:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f256:	4a78      	ldr	r2, [pc, #480]	; (800f438 <flash_get_device_id+0x78c>)
 800f258:	487a      	ldr	r0, [pc, #488]	; (800f444 <flash_get_device_id+0x798>)
 800f25a:	f001 f915 	bl	8010488 <app_debug_print_raw>
                    if (reg_status & 0x20)
 800f25e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f262:	f003 0320 	and.w	r3, r3, #32
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00b      	beq.n	800f282 <flash_get_device_id+0x5d6>
                    {
                        DEBUG_INFO("Address mode : 32 bit\r\n");
 800f26a:	f000 ff91 	bl	8010190 <app_debug_get_ms>
 800f26e:	4603      	mov	r3, r0
 800f270:	4a71      	ldr	r2, [pc, #452]	; (800f438 <flash_get_device_id+0x78c>)
 800f272:	4619      	mov	r1, r3
 800f274:	4874      	ldr	r0, [pc, #464]	; (800f448 <flash_get_device_id+0x79c>)
 800f276:	f001 f907 	bl	8010488 <app_debug_print_raw>
                    else
                    {
                        flash_drv->callback.delay_ms(flash_drv, 500);
                        continue;
                    }
                    val = true;
 800f27a:	2301      	movs	r3, #1
 800f27c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f280:	e359      	b.n	800f936 <flash_get_device_id+0xc8a>
                        flash_drv->callback.delay_ms(flash_drv, 500);
 800f282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f284:	699b      	ldr	r3, [r3, #24]
 800f286:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800f28a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f28c:	4798      	blx	r3
                        continue;
 800f28e:	e356      	b.n	800f93e <flash_get_device_id+0xc92>
                }
            }
            else if (id.name.manufacture_id[0] == 0x7F && id.name.manufacture_id[1] == 0x7F) /* APP_SPI_FLASH_AT25SF128 */
 800f290:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f294:	2b7f      	cmp	r3, #127	; 0x7f
 800f296:	f040 8140 	bne.w	800f51a <flash_get_device_id+0x86e>
 800f29a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f29e:	2b7f      	cmp	r3, #127	; 0x7f
 800f2a0:	f040 813b 	bne.w	800f51a <flash_get_device_id+0x86e>
            {
 800f2a4:	466b      	mov	r3, sp
 800f2a6:	461d      	mov	r5, r3
                DEBUG_INFO("Cypress\r\n");
 800f2a8:	f000 ff72 	bl	8010190 <app_debug_get_ms>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	4a62      	ldr	r2, [pc, #392]	; (800f438 <flash_get_device_id+0x78c>)
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	4866      	ldr	r0, [pc, #408]	; (800f44c <flash_get_device_id+0x7a0>)
 800f2b4:	f001 f8e8 	bl	8010488 <app_debug_print_raw>
                // 6 byte MSB = 7F7F7F7F7F7F
                // Byte 7 done care
                // Byte 89 = 2100 =>> FM25V01
                // Byte 89 = 2008 =>> FM25V02A

                uint8_t size = 10;
 800f2b8:	230a      	movs	r3, #10
 800f2ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                uint8_t cypess_manufacture_data_tx[size];
 800f2be:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f2ca:	b2cb      	uxtb	r3, r1
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2d2:	f04f 0200 	mov.w	r2, #0
 800f2d6:	f04f 0300 	mov.w	r3, #0
 800f2da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2dc:	00c3      	lsls	r3, r0, #3
 800f2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e6:	00c2      	lsls	r2, r0, #3
 800f2e8:	b2cb      	uxtb	r3, r1
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	623b      	str	r3, [r7, #32]
 800f2ee:	627a      	str	r2, [r7, #36]	; 0x24
 800f2f0:	f04f 0200 	mov.w	r2, #0
 800f2f4:	f04f 0300 	mov.w	r3, #0
 800f2f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2fa:	00c3      	lsls	r3, r0, #3
 800f2fc:	6a38      	ldr	r0, [r7, #32]
 800f2fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f302:	6a38      	ldr	r0, [r7, #32]
 800f304:	00c2      	lsls	r2, r0, #3
 800f306:	460b      	mov	r3, r1
 800f308:	3307      	adds	r3, #7
 800f30a:	08db      	lsrs	r3, r3, #3
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	ebad 0d03 	sub.w	sp, sp, r3
 800f312:	ab04      	add	r3, sp, #16
 800f314:	3300      	adds	r3, #0
 800f316:	67fb      	str	r3, [r7, #124]	; 0x7c
                uint8_t cypess_manufacture_data_rx[size];
 800f318:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 800f31c:	460b      	mov	r3, r1
 800f31e:	3b01      	subs	r3, #1
 800f320:	67bb      	str	r3, [r7, #120]	; 0x78
 800f322:	b2cb      	uxtb	r3, r1
 800f324:	2200      	movs	r2, #0
 800f326:	61bb      	str	r3, [r7, #24]
 800f328:	61fa      	str	r2, [r7, #28]
 800f32a:	f04f 0200 	mov.w	r2, #0
 800f32e:	f04f 0300 	mov.w	r3, #0
 800f332:	69f8      	ldr	r0, [r7, #28]
 800f334:	00c3      	lsls	r3, r0, #3
 800f336:	69b8      	ldr	r0, [r7, #24]
 800f338:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f33c:	69b8      	ldr	r0, [r7, #24]
 800f33e:	00c2      	lsls	r2, r0, #3
 800f340:	b2cb      	uxtb	r3, r1
 800f342:	2200      	movs	r2, #0
 800f344:	4698      	mov	r8, r3
 800f346:	4691      	mov	r9, r2
 800f348:	f04f 0200 	mov.w	r2, #0
 800f34c:	f04f 0300 	mov.w	r3, #0
 800f350:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f354:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f358:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f35c:	460b      	mov	r3, r1
 800f35e:	3307      	adds	r3, #7
 800f360:	08db      	lsrs	r3, r3, #3
 800f362:	00db      	lsls	r3, r3, #3
 800f364:	ebad 0d03 	sub.w	sp, sp, r3
 800f368:	ab04      	add	r3, sp, #16
 800f36a:	3300      	adds	r3, #0
 800f36c:	677b      	str	r3, [r7, #116]	; 0x74
                cypess_manufacture_data_tx[0] = RDID_CMD;
 800f36e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f370:	239f      	movs	r3, #159	; 0x9f
 800f372:	7013      	strb	r3, [r2, #0]

                flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800f374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f376:	695a      	ldr	r2, [r3, #20]
 800f378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	2100      	movs	r1, #0
 800f37e:	4618      	mov	r0, r3
 800f380:	4790      	blx	r2
                flash_drv->callback.spi_tx_rx(flash_drv->spi, cypess_manufacture_data_tx, cypess_manufacture_data_rx, size);
 800f382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f384:	68dc      	ldr	r4, [r3, #12]
 800f386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f388:	6818      	ldr	r0, [r3, #0]
 800f38a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f38e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f390:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f392:	47a0      	blx	r4
                flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800f394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f396:	695a      	ldr	r2, [r3, #20]
 800f398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2101      	movs	r1, #1
 800f39e:	4618      	mov	r0, r3
 800f3a0:	4790      	blx	r2
                for (uint32_t i = 1; i < size; i++)
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f3a8:	e00d      	b.n	800f3c6 <flash_get_device_id+0x71a>
                {
                    DEBUG_RAW("%02X ", cypess_manufacture_data_rx[i]);
 800f3aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f3ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f3b0:	4413      	add	r3, r2
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	4826      	ldr	r0, [pc, #152]	; (800f450 <flash_get_device_id+0x7a4>)
 800f3b8:	f001 f866 	bl	8010488 <app_debug_print_raw>
                for (uint32_t i = 1; i < size; i++)
 800f3bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f3c6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800f3ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d3eb      	bcc.n	800f3aa <flash_get_device_id+0x6fe>
                }
                DEBUG_RAW("\r\n");
 800f3d2:	4820      	ldr	r0, [pc, #128]	; (800f454 <flash_get_device_id+0x7a8>)
 800f3d4:	f001 f858 	bl	8010488 <app_debug_print_raw>

                if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x22 && cypess_manufacture_data_rx[9] == 0x08)
 800f3d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3da:	785b      	ldrb	r3, [r3, #1]
 800f3dc:	2b7f      	cmp	r3, #127	; 0x7f
 800f3de:	d13d      	bne.n	800f45c <flash_get_device_id+0x7b0>
 800f3e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3e2:	789b      	ldrb	r3, [r3, #2]
 800f3e4:	2b7f      	cmp	r3, #127	; 0x7f
 800f3e6:	d139      	bne.n	800f45c <flash_get_device_id+0x7b0>
 800f3e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3ea:	78db      	ldrb	r3, [r3, #3]
 800f3ec:	2b7f      	cmp	r3, #127	; 0x7f
 800f3ee:	d135      	bne.n	800f45c <flash_get_device_id+0x7b0>
 800f3f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3f2:	791b      	ldrb	r3, [r3, #4]
 800f3f4:	2b7f      	cmp	r3, #127	; 0x7f
 800f3f6:	d131      	bne.n	800f45c <flash_get_device_id+0x7b0>
 800f3f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3fa:	795b      	ldrb	r3, [r3, #5]
 800f3fc:	2b7f      	cmp	r3, #127	; 0x7f
 800f3fe:	d12d      	bne.n	800f45c <flash_get_device_id+0x7b0>
 800f400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f402:	799b      	ldrb	r3, [r3, #6]
 800f404:	2b7f      	cmp	r3, #127	; 0x7f
 800f406:	d129      	bne.n	800f45c <flash_get_device_id+0x7b0>
 800f408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f40a:	7a1b      	ldrb	r3, [r3, #8]
 800f40c:	2b22      	cmp	r3, #34	; 0x22
 800f40e:	d125      	bne.n	800f45c <flash_get_device_id+0x7b0>
 800f410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f412:	7a5b      	ldrb	r3, [r3, #9]
 800f414:	2b08      	cmp	r3, #8
 800f416:	d121      	bne.n	800f45c <flash_get_device_id+0x7b0>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V02A;
 800f418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f41a:	230c      	movs	r3, #12
 800f41c:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V02A\r\n");
 800f41e:	f000 feb7 	bl	8010190 <app_debug_get_ms>
 800f422:	4603      	mov	r3, r0
 800f424:	4a04      	ldr	r2, [pc, #16]	; (800f438 <flash_get_device_id+0x78c>)
 800f426:	4619      	mov	r1, r3
 800f428:	480b      	ldr	r0, [pc, #44]	; (800f458 <flash_get_device_id+0x7ac>)
 800f42a:	f001 f82d 	bl	8010488 <app_debug_print_raw>
                    val = true;
 800f42e:	2301      	movs	r3, #1
 800f430:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f434:	e06f      	b.n	800f516 <flash_get_device_id+0x86a>
 800f436:	bf00      	nop
 800f438:	080194c0 	.word	0x080194c0
 800f43c:	0801988c 	.word	0x0801988c
 800f440:	080198bc 	.word	0x080198bc
 800f444:	080197e4 	.word	0x080197e4
 800f448:	08019814 	.word	0x08019814
 800f44c:	080198e0 	.word	0x080198e0
 800f450:	08019904 	.word	0x08019904
 800f454:	080194bc 	.word	0x080194bc
 800f458:	0801990c 	.word	0x0801990c
                }
                else if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x21 && cypess_manufacture_data_rx[9] == 0x00)
 800f45c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f45e:	785b      	ldrb	r3, [r3, #1]
 800f460:	2b7f      	cmp	r3, #127	; 0x7f
 800f462:	d12a      	bne.n	800f4ba <flash_get_device_id+0x80e>
 800f464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f466:	789b      	ldrb	r3, [r3, #2]
 800f468:	2b7f      	cmp	r3, #127	; 0x7f
 800f46a:	d126      	bne.n	800f4ba <flash_get_device_id+0x80e>
 800f46c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f46e:	78db      	ldrb	r3, [r3, #3]
 800f470:	2b7f      	cmp	r3, #127	; 0x7f
 800f472:	d122      	bne.n	800f4ba <flash_get_device_id+0x80e>
 800f474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f476:	791b      	ldrb	r3, [r3, #4]
 800f478:	2b7f      	cmp	r3, #127	; 0x7f
 800f47a:	d11e      	bne.n	800f4ba <flash_get_device_id+0x80e>
 800f47c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f47e:	795b      	ldrb	r3, [r3, #5]
 800f480:	2b7f      	cmp	r3, #127	; 0x7f
 800f482:	d11a      	bne.n	800f4ba <flash_get_device_id+0x80e>
 800f484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f486:	799b      	ldrb	r3, [r3, #6]
 800f488:	2b7f      	cmp	r3, #127	; 0x7f
 800f48a:	d116      	bne.n	800f4ba <flash_get_device_id+0x80e>
 800f48c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f48e:	7a1b      	ldrb	r3, [r3, #8]
 800f490:	2b21      	cmp	r3, #33	; 0x21
 800f492:	d112      	bne.n	800f4ba <flash_get_device_id+0x80e>
 800f494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f496:	7a5b      	ldrb	r3, [r3, #9]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d10e      	bne.n	800f4ba <flash_get_device_id+0x80e>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V01;
 800f49c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f49e:	230e      	movs	r3, #14
 800f4a0:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V01\r\n");
 800f4a2:	f000 fe75 	bl	8010190 <app_debug_get_ms>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	4ab7      	ldr	r2, [pc, #732]	; (800f788 <flash_get_device_id+0xadc>)
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	48b7      	ldr	r0, [pc, #732]	; (800f78c <flash_get_device_id+0xae0>)
 800f4ae:	f000 ffeb 	bl	8010488 <app_debug_print_raw>
                    val = true;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f4b8:	e02d      	b.n	800f516 <flash_get_device_id+0x86a>
                }
                else if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x24 && cypess_manufacture_data_rx[9] == 0x00)
 800f4ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4bc:	785b      	ldrb	r3, [r3, #1]
 800f4be:	2b7f      	cmp	r3, #127	; 0x7f
 800f4c0:	d129      	bne.n	800f516 <flash_get_device_id+0x86a>
 800f4c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4c4:	789b      	ldrb	r3, [r3, #2]
 800f4c6:	2b7f      	cmp	r3, #127	; 0x7f
 800f4c8:	d125      	bne.n	800f516 <flash_get_device_id+0x86a>
 800f4ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4cc:	78db      	ldrb	r3, [r3, #3]
 800f4ce:	2b7f      	cmp	r3, #127	; 0x7f
 800f4d0:	d121      	bne.n	800f516 <flash_get_device_id+0x86a>
 800f4d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4d4:	791b      	ldrb	r3, [r3, #4]
 800f4d6:	2b7f      	cmp	r3, #127	; 0x7f
 800f4d8:	d11d      	bne.n	800f516 <flash_get_device_id+0x86a>
 800f4da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4dc:	795b      	ldrb	r3, [r3, #5]
 800f4de:	2b7f      	cmp	r3, #127	; 0x7f
 800f4e0:	d119      	bne.n	800f516 <flash_get_device_id+0x86a>
 800f4e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4e4:	799b      	ldrb	r3, [r3, #6]
 800f4e6:	2b7f      	cmp	r3, #127	; 0x7f
 800f4e8:	d115      	bne.n	800f516 <flash_get_device_id+0x86a>
 800f4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4ec:	7a1b      	ldrb	r3, [r3, #8]
 800f4ee:	2b24      	cmp	r3, #36	; 0x24
 800f4f0:	d111      	bne.n	800f516 <flash_get_device_id+0x86a>
 800f4f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4f4:	7a5b      	ldrb	r3, [r3, #9]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d10d      	bne.n	800f516 <flash_get_device_id+0x86a>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V10;
 800f4fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4fc:	230f      	movs	r3, #15
 800f4fe:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V10\r\n");
 800f500:	f000 fe46 	bl	8010190 <app_debug_get_ms>
 800f504:	4603      	mov	r3, r0
 800f506:	4aa0      	ldr	r2, [pc, #640]	; (800f788 <flash_get_device_id+0xadc>)
 800f508:	4619      	mov	r1, r3
 800f50a:	48a1      	ldr	r0, [pc, #644]	; (800f790 <flash_get_device_id+0xae4>)
 800f50c:	f000 ffbc 	bl	8010488 <app_debug_print_raw>
                    val = true;
 800f510:	2301      	movs	r3, #1
 800f512:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f516:	46ad      	mov	sp, r5
            {
 800f518:	e20d      	b.n	800f936 <flash_get_device_id+0xc8a>
                }
            }
            else
            {
                DEBUG_ERROR("Unknown device\r\n");
 800f51a:	f000 fe39 	bl	8010190 <app_debug_get_ms>
 800f51e:	4603      	mov	r3, r0
 800f520:	4a99      	ldr	r2, [pc, #612]	; (800f788 <flash_get_device_id+0xadc>)
 800f522:	4619      	mov	r1, r3
 800f524:	489b      	ldr	r0, [pc, #620]	; (800f794 <flash_get_device_id+0xae8>)
 800f526:	f000 ffaf 	bl	8010488 <app_debug_print_raw>
                val = false;
 800f52a:	2300      	movs	r3, #0
 800f52c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f530:	e201      	b.n	800f936 <flash_get_device_id+0xc8a>
            }
        }
        else if (cmd == RDID_CMD)
 800f532:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800f536:	2b9f      	cmp	r3, #159	; 0x9f
 800f538:	f040 81fd 	bne.w	800f936 <flash_get_device_id+0xc8a>
        {
//            if (id.name.manufacture_id[1] == 0xEF)
            if (id.name.manufacture_id[0] == 0xEF)
 800f53c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f540:	2bef      	cmp	r3, #239	; 0xef
 800f542:	d137      	bne.n	800f5b4 <flash_get_device_id+0x908>
            {
                DEBUG_INFO("Winbond\r\n");
 800f544:	f000 fe24 	bl	8010190 <app_debug_get_ms>
 800f548:	4603      	mov	r3, r0
 800f54a:	4a8f      	ldr	r2, [pc, #572]	; (800f788 <flash_get_device_id+0xadc>)
 800f54c:	4619      	mov	r1, r3
 800f54e:	4892      	ldr	r0, [pc, #584]	; (800f798 <flash_get_device_id+0xaec>)
 800f550:	f000 ff9a 	bl	8010488 <app_debug_print_raw>
//                    DEBUG_INFO("W25Q65\r\n");
//                    flash_drv->info.device = APP_SPI_FLASH_W25Q64;
//                    val = true;
//                }
                
                if (id.name.manufacture_id[1] == 0x40 && id.name.device_id[0] == 0x15)
 800f554:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f558:	2b40      	cmp	r3, #64	; 0x40
 800f55a:	d112      	bne.n	800f582 <flash_get_device_id+0x8d6>
 800f55c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800f560:	2b15      	cmp	r3, #21
 800f562:	d10e      	bne.n	800f582 <flash_get_device_id+0x8d6>
                {
                    DEBUG_INFO("W25Q16\r\n");
 800f564:	f000 fe14 	bl	8010190 <app_debug_get_ms>
 800f568:	4603      	mov	r3, r0
 800f56a:	4a87      	ldr	r2, [pc, #540]	; (800f788 <flash_get_device_id+0xadc>)
 800f56c:	4619      	mov	r1, r3
 800f56e:	488b      	ldr	r0, [pc, #556]	; (800f79c <flash_get_device_id+0xaf0>)
 800f570:	f000 ff8a 	bl	8010488 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q16;
 800f574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f576:	2310      	movs	r3, #16
 800f578:	7713      	strb	r3, [r2, #28]
                    val = true;
 800f57a:	2301      	movs	r3, #1
 800f57c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f580:	e1d9      	b.n	800f936 <flash_get_device_id+0xc8a>
                }
                else if (id.name.manufacture_id[1] == 0x40 && id.name.device_id[0] == 0x17)
 800f582:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f586:	2b40      	cmp	r3, #64	; 0x40
 800f588:	f040 81d5 	bne.w	800f936 <flash_get_device_id+0xc8a>
 800f58c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800f590:	2b17      	cmp	r3, #23
 800f592:	f040 81d0 	bne.w	800f936 <flash_get_device_id+0xc8a>
                {
                    DEBUG_INFO("W25Q64\r\n");
 800f596:	f000 fdfb 	bl	8010190 <app_debug_get_ms>
 800f59a:	4603      	mov	r3, r0
 800f59c:	4a7a      	ldr	r2, [pc, #488]	; (800f788 <flash_get_device_id+0xadc>)
 800f59e:	4619      	mov	r1, r3
 800f5a0:	487f      	ldr	r0, [pc, #508]	; (800f7a0 <flash_get_device_id+0xaf4>)
 800f5a2:	f000 ff71 	bl	8010488 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FLASH_W25Q64;
 800f5a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5a8:	2309      	movs	r3, #9
 800f5aa:	7713      	strb	r3, [r2, #28]
                    val = true;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f5b2:	e1c0      	b.n	800f936 <flash_get_device_id+0xc8a>
                }
            }
            else if (id.name.manufacture_id[0] == 0x04 && id.name.manufacture_id[1] == 0x7F)
 800f5b4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f5b8:	2b04      	cmp	r3, #4
 800f5ba:	d133      	bne.n	800f624 <flash_get_device_id+0x978>
 800f5bc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f5c0:	2b7f      	cmp	r3, #127	; 0x7f
 800f5c2:	d12f      	bne.n	800f624 <flash_get_device_id+0x978>
            {
                if (id.name.device_id[0] == 0x01 && id.name.device_id[1] == 0x01)
 800f5c4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d112      	bne.n	800f5f2 <flash_get_device_id+0x946>
 800f5cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d10e      	bne.n	800f5f2 <flash_get_device_id+0x946>
                {
                    DEBUG_INFO("MB85RS16\r\n");
 800f5d4:	f000 fddc 	bl	8010190 <app_debug_get_ms>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	4a6b      	ldr	r2, [pc, #428]	; (800f788 <flash_get_device_id+0xadc>)
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4871      	ldr	r0, [pc, #452]	; (800f7a4 <flash_get_device_id+0xaf8>)
 800f5e0:	f000 ff52 	bl	8010488 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FRAM_MB85RS16;
 800f5e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5e6:	230a      	movs	r3, #10
 800f5e8:	7713      	strb	r3, [r2, #28]
                    val = true;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                if (id.name.device_id[0] == 0x01 && id.name.device_id[1] == 0x01)
 800f5f0:	e1a0      	b.n	800f934 <flash_get_device_id+0xc88>
                }
                else if (id.name.device_id[0] == 0x03 && id.name.device_id[1] == 0x02)
 800f5f2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800f5f6:	2b03      	cmp	r3, #3
 800f5f8:	f040 819c 	bne.w	800f934 <flash_get_device_id+0xc88>
 800f5fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f600:	2b02      	cmp	r3, #2
 800f602:	f040 8197 	bne.w	800f934 <flash_get_device_id+0xc88>
                {
                    DEBUG_INFO("MB85RS64V\r\n");
 800f606:	f000 fdc3 	bl	8010190 <app_debug_get_ms>
 800f60a:	4603      	mov	r3, r0
 800f60c:	4a5e      	ldr	r2, [pc, #376]	; (800f788 <flash_get_device_id+0xadc>)
 800f60e:	4619      	mov	r1, r3
 800f610:	4865      	ldr	r0, [pc, #404]	; (800f7a8 <flash_get_device_id+0xafc>)
 800f612:	f000 ff39 	bl	8010488 <app_debug_print_raw>
                    flash_drv->info.device = APP_SPI_FRAM_MB85RS64V;
 800f616:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f618:	230d      	movs	r3, #13
 800f61a:	7713      	strb	r3, [r2, #28]
                    val = true;
 800f61c:	2301      	movs	r3, #1
 800f61e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                if (id.name.device_id[0] == 0x01 && id.name.device_id[1] == 0x01)
 800f622:	e187      	b.n	800f934 <flash_get_device_id+0xc88>
                }
            }
            else if (id.name.manufacture_id[0] == 0x1F && id.name.manufacture_id[1] == 0x89) /* APP_SPI_FLASH_AT25SF128 */
 800f624:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f628:	2b1f      	cmp	r3, #31
 800f62a:	d11a      	bne.n	800f662 <flash_get_device_id+0x9b6>
 800f62c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f630:	2b89      	cmp	r3, #137	; 0x89
 800f632:	d116      	bne.n	800f662 <flash_get_device_id+0x9b6>
            {
                DEBUG_INFO("Adesto Technologies\r\n");
 800f634:	f000 fdac 	bl	8010190 <app_debug_get_ms>
 800f638:	4603      	mov	r3, r0
 800f63a:	4a53      	ldr	r2, [pc, #332]	; (800f788 <flash_get_device_id+0xadc>)
 800f63c:	4619      	mov	r1, r3
 800f63e:	485b      	ldr	r0, [pc, #364]	; (800f7ac <flash_get_device_id+0xb00>)
 800f640:	f000 ff22 	bl	8010488 <app_debug_print_raw>
                flash_drv->info.device = APP_SPI_FLASH_AT25SF128;
 800f644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f646:	230b      	movs	r3, #11
 800f648:	7713      	strb	r3, [r2, #28]
                DEBUG_INFO("AT25SF128A\r\n");
 800f64a:	f000 fda1 	bl	8010190 <app_debug_get_ms>
 800f64e:	4603      	mov	r3, r0
 800f650:	4a4d      	ldr	r2, [pc, #308]	; (800f788 <flash_get_device_id+0xadc>)
 800f652:	4619      	mov	r1, r3
 800f654:	4856      	ldr	r0, [pc, #344]	; (800f7b0 <flash_get_device_id+0xb04>)
 800f656:	f000 ff17 	bl	8010488 <app_debug_print_raw>
                val = true;
 800f65a:	2301      	movs	r3, #1
 800f65c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f660:	e169      	b.n	800f936 <flash_get_device_id+0xc8a>
            }
            else if (id.name.manufacture_id[0] == 0x7F && id.name.manufacture_id[1] == 0x7F) /* APP_SPI_FLASH_AT25SF128 */
 800f662:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f666:	2b7f      	cmp	r3, #127	; 0x7f
 800f668:	f040 8165 	bne.w	800f936 <flash_get_device_id+0xc8a>
 800f66c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800f670:	2b7f      	cmp	r3, #127	; 0x7f
 800f672:	f040 8160 	bne.w	800f936 <flash_get_device_id+0xc8a>
            {
 800f676:	466b      	mov	r3, sp
 800f678:	461d      	mov	r5, r3
                DEBUG_INFO("Cypress\r\n");
 800f67a:	f000 fd89 	bl	8010190 <app_debug_get_ms>
 800f67e:	4603      	mov	r3, r0
 800f680:	4a41      	ldr	r2, [pc, #260]	; (800f788 <flash_get_device_id+0xadc>)
 800f682:	4619      	mov	r1, r3
 800f684:	484b      	ldr	r0, [pc, #300]	; (800f7b4 <flash_get_device_id+0xb08>)
 800f686:	f000 feff 	bl	8010488 <app_debug_print_raw>
                // 6 byte MSB = 7F7F7F7F7F7F
                // Byte 7 done care
                // Byte 89 = 2100 =>> FM25V01
                // Byte 89 = 2008 =>> FM25V02A

                uint8_t size = 10;
 800f68a:	230a      	movs	r3, #10
 800f68c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                uint8_t cypess_manufacture_data_tx[size];
 800f690:	f897 109b 	ldrb.w	r1, [r7, #155]	; 0x9b
 800f694:	460b      	mov	r3, r1
 800f696:	3b01      	subs	r3, #1
 800f698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f69c:	b2cb      	uxtb	r3, r1
 800f69e:	2200      	movs	r2, #0
 800f6a0:	613b      	str	r3, [r7, #16]
 800f6a2:	617a      	str	r2, [r7, #20]
 800f6a4:	f04f 0200 	mov.w	r2, #0
 800f6a8:	f04f 0300 	mov.w	r3, #0
 800f6ac:	6978      	ldr	r0, [r7, #20]
 800f6ae:	00c3      	lsls	r3, r0, #3
 800f6b0:	6938      	ldr	r0, [r7, #16]
 800f6b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f6b6:	6938      	ldr	r0, [r7, #16]
 800f6b8:	00c2      	lsls	r2, r0, #3
 800f6ba:	b2cb      	uxtb	r3, r1
 800f6bc:	2200      	movs	r2, #0
 800f6be:	60bb      	str	r3, [r7, #8]
 800f6c0:	60fa      	str	r2, [r7, #12]
 800f6c2:	f04f 0200 	mov.w	r2, #0
 800f6c6:	f04f 0300 	mov.w	r3, #0
 800f6ca:	68f8      	ldr	r0, [r7, #12]
 800f6cc:	00c3      	lsls	r3, r0, #3
 800f6ce:	68b8      	ldr	r0, [r7, #8]
 800f6d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f6d4:	68b8      	ldr	r0, [r7, #8]
 800f6d6:	00c2      	lsls	r2, r0, #3
 800f6d8:	460b      	mov	r3, r1
 800f6da:	3307      	adds	r3, #7
 800f6dc:	08db      	lsrs	r3, r3, #3
 800f6de:	00db      	lsls	r3, r3, #3
 800f6e0:	ebad 0d03 	sub.w	sp, sp, r3
 800f6e4:	ab04      	add	r3, sp, #16
 800f6e6:	3300      	adds	r3, #0
 800f6e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                uint8_t cypess_manufacture_data_rx[size];
 800f6ec:	f897 109b 	ldrb.w	r1, [r7, #155]	; 0x9b
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f6f8:	b2cb      	uxtb	r3, r1
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	603b      	str	r3, [r7, #0]
 800f6fe:	607a      	str	r2, [r7, #4]
 800f700:	f04f 0200 	mov.w	r2, #0
 800f704:	f04f 0300 	mov.w	r3, #0
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	00c3      	lsls	r3, r0, #3
 800f70c:	6838      	ldr	r0, [r7, #0]
 800f70e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f712:	6838      	ldr	r0, [r7, #0]
 800f714:	00c2      	lsls	r2, r0, #3
 800f716:	b2cb      	uxtb	r3, r1
 800f718:	2200      	movs	r2, #0
 800f71a:	469a      	mov	sl, r3
 800f71c:	4693      	mov	fp, r2
 800f71e:	f04f 0200 	mov.w	r2, #0
 800f722:	f04f 0300 	mov.w	r3, #0
 800f726:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f72a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f72e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f732:	460b      	mov	r3, r1
 800f734:	3307      	adds	r3, #7
 800f736:	08db      	lsrs	r3, r3, #3
 800f738:	00db      	lsls	r3, r3, #3
 800f73a:	ebad 0d03 	sub.w	sp, sp, r3
 800f73e:	ab04      	add	r3, sp, #16
 800f740:	3300      	adds	r3, #0
 800f742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                cypess_manufacture_data_tx[0] = RDID_CMD;
 800f746:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f74a:	239f      	movs	r3, #159	; 0x9f
 800f74c:	7013      	strb	r3, [r2, #0]

                flash_drv->callback.spi_cs(flash_drv->spi, 0);
 800f74e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f750:	695a      	ldr	r2, [r3, #20]
 800f752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2100      	movs	r1, #0
 800f758:	4618      	mov	r0, r3
 800f75a:	4790      	blx	r2
                flash_drv->callback.spi_tx_rx(flash_drv->spi, cypess_manufacture_data_tx, cypess_manufacture_data_rx, size);
 800f75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f75e:	68dc      	ldr	r4, [r3, #12]
 800f760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f762:	6818      	ldr	r0, [r3, #0]
 800f764:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800f768:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f76c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f770:	47a0      	blx	r4
                flash_drv->callback.spi_cs(flash_drv->spi, 1);
 800f772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f774:	695a      	ldr	r2, [r3, #20]
 800f776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2101      	movs	r1, #1
 800f77c:	4618      	mov	r0, r3
 800f77e:	4790      	blx	r2
                for (uint32_t i = 1; i < size; i++)
 800f780:	2301      	movs	r3, #1
 800f782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f786:	e026      	b.n	800f7d6 <flash_get_device_id+0xb2a>
 800f788:	080194c0 	.word	0x080194c0
 800f78c:	08019930 	.word	0x08019930
 800f790:	08019954 	.word	0x08019954
 800f794:	08019978 	.word	0x08019978
 800f798:	080199a0 	.word	0x080199a0
 800f79c:	080199c4 	.word	0x080199c4
 800f7a0:	080199e4 	.word	0x080199e4
 800f7a4:	08019a04 	.word	0x08019a04
 800f7a8:	08019a28 	.word	0x08019a28
 800f7ac:	0801988c 	.word	0x0801988c
 800f7b0:	080198bc 	.word	0x080198bc
 800f7b4:	080198e0 	.word	0x080198e0
                {
                    DEBUG_RAW("%02X ", cypess_manufacture_data_rx[i]);
 800f7b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f7bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f7c0:	4413      	add	r3, r2
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4867      	ldr	r0, [pc, #412]	; (800f964 <flash_get_device_id+0xcb8>)
 800f7c8:	f000 fe5e 	bl	8010488 <app_debug_print_raw>
                for (uint32_t i = 1; i < size; i++)
 800f7cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f7d6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 800f7da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d3ea      	bcc.n	800f7b8 <flash_get_device_id+0xb0c>
                }
                DEBUG_RAW("\r\n");
 800f7e2:	4861      	ldr	r0, [pc, #388]	; (800f968 <flash_get_device_id+0xcbc>)
 800f7e4:	f000 fe50 	bl	8010488 <app_debug_print_raw>

                if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x22 && cypess_manufacture_data_rx[9] == 0x08)
 800f7e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7ec:	785b      	ldrb	r3, [r3, #1]
 800f7ee:	2b7f      	cmp	r3, #127	; 0x7f
 800f7f0:	d131      	bne.n	800f856 <flash_get_device_id+0xbaa>
 800f7f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7f6:	789b      	ldrb	r3, [r3, #2]
 800f7f8:	2b7f      	cmp	r3, #127	; 0x7f
 800f7fa:	d12c      	bne.n	800f856 <flash_get_device_id+0xbaa>
 800f7fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f800:	78db      	ldrb	r3, [r3, #3]
 800f802:	2b7f      	cmp	r3, #127	; 0x7f
 800f804:	d127      	bne.n	800f856 <flash_get_device_id+0xbaa>
 800f806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f80a:	791b      	ldrb	r3, [r3, #4]
 800f80c:	2b7f      	cmp	r3, #127	; 0x7f
 800f80e:	d122      	bne.n	800f856 <flash_get_device_id+0xbaa>
 800f810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f814:	795b      	ldrb	r3, [r3, #5]
 800f816:	2b7f      	cmp	r3, #127	; 0x7f
 800f818:	d11d      	bne.n	800f856 <flash_get_device_id+0xbaa>
 800f81a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f81e:	799b      	ldrb	r3, [r3, #6]
 800f820:	2b7f      	cmp	r3, #127	; 0x7f
 800f822:	d118      	bne.n	800f856 <flash_get_device_id+0xbaa>
 800f824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f828:	7a1b      	ldrb	r3, [r3, #8]
 800f82a:	2b22      	cmp	r3, #34	; 0x22
 800f82c:	d113      	bne.n	800f856 <flash_get_device_id+0xbaa>
 800f82e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f832:	7a5b      	ldrb	r3, [r3, #9]
 800f834:	2b08      	cmp	r3, #8
 800f836:	d10e      	bne.n	800f856 <flash_get_device_id+0xbaa>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V02A;
 800f838:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f83a:	230c      	movs	r3, #12
 800f83c:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V02A\r\n");
 800f83e:	f000 fca7 	bl	8010190 <app_debug_get_ms>
 800f842:	4603      	mov	r3, r0
 800f844:	4a49      	ldr	r2, [pc, #292]	; (800f96c <flash_get_device_id+0xcc0>)
 800f846:	4619      	mov	r1, r3
 800f848:	4849      	ldr	r0, [pc, #292]	; (800f970 <flash_get_device_id+0xcc4>)
 800f84a:	f000 fe1d 	bl	8010488 <app_debug_print_raw>
                    val = true;
 800f84e:	2301      	movs	r3, #1
 800f850:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f854:	e06c      	b.n	800f930 <flash_get_device_id+0xc84>
                }
                else if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x21 && cypess_manufacture_data_rx[9] == 0x00)
 800f856:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f85a:	785b      	ldrb	r3, [r3, #1]
 800f85c:	2b7f      	cmp	r3, #127	; 0x7f
 800f85e:	d131      	bne.n	800f8c4 <flash_get_device_id+0xc18>
 800f860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f864:	789b      	ldrb	r3, [r3, #2]
 800f866:	2b7f      	cmp	r3, #127	; 0x7f
 800f868:	d12c      	bne.n	800f8c4 <flash_get_device_id+0xc18>
 800f86a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f86e:	78db      	ldrb	r3, [r3, #3]
 800f870:	2b7f      	cmp	r3, #127	; 0x7f
 800f872:	d127      	bne.n	800f8c4 <flash_get_device_id+0xc18>
 800f874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f878:	791b      	ldrb	r3, [r3, #4]
 800f87a:	2b7f      	cmp	r3, #127	; 0x7f
 800f87c:	d122      	bne.n	800f8c4 <flash_get_device_id+0xc18>
 800f87e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f882:	795b      	ldrb	r3, [r3, #5]
 800f884:	2b7f      	cmp	r3, #127	; 0x7f
 800f886:	d11d      	bne.n	800f8c4 <flash_get_device_id+0xc18>
 800f888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f88c:	799b      	ldrb	r3, [r3, #6]
 800f88e:	2b7f      	cmp	r3, #127	; 0x7f
 800f890:	d118      	bne.n	800f8c4 <flash_get_device_id+0xc18>
 800f892:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f896:	7a1b      	ldrb	r3, [r3, #8]
 800f898:	2b21      	cmp	r3, #33	; 0x21
 800f89a:	d113      	bne.n	800f8c4 <flash_get_device_id+0xc18>
 800f89c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8a0:	7a5b      	ldrb	r3, [r3, #9]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d10e      	bne.n	800f8c4 <flash_get_device_id+0xc18>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V01;
 800f8a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8a8:	230e      	movs	r3, #14
 800f8aa:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V01\r\n");
 800f8ac:	f000 fc70 	bl	8010190 <app_debug_get_ms>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	4a2e      	ldr	r2, [pc, #184]	; (800f96c <flash_get_device_id+0xcc0>)
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	482f      	ldr	r0, [pc, #188]	; (800f974 <flash_get_device_id+0xcc8>)
 800f8b8:	f000 fde6 	bl	8010488 <app_debug_print_raw>
                    val = true;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f8c2:	e035      	b.n	800f930 <flash_get_device_id+0xc84>
                }
                else if (cypess_manufacture_data_rx[1] == 0x7F && cypess_manufacture_data_rx[2] == 0x7F && cypess_manufacture_data_rx[3] == 0x7F && cypess_manufacture_data_rx[4] == 0x7F && cypess_manufacture_data_rx[5] == 0x7F && cypess_manufacture_data_rx[6] == 0x7F && cypess_manufacture_data_rx[8] == 0x24 && cypess_manufacture_data_rx[9] == 0x00)
 800f8c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8c8:	785b      	ldrb	r3, [r3, #1]
 800f8ca:	2b7f      	cmp	r3, #127	; 0x7f
 800f8cc:	d130      	bne.n	800f930 <flash_get_device_id+0xc84>
 800f8ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8d2:	789b      	ldrb	r3, [r3, #2]
 800f8d4:	2b7f      	cmp	r3, #127	; 0x7f
 800f8d6:	d12b      	bne.n	800f930 <flash_get_device_id+0xc84>
 800f8d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8dc:	78db      	ldrb	r3, [r3, #3]
 800f8de:	2b7f      	cmp	r3, #127	; 0x7f
 800f8e0:	d126      	bne.n	800f930 <flash_get_device_id+0xc84>
 800f8e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8e6:	791b      	ldrb	r3, [r3, #4]
 800f8e8:	2b7f      	cmp	r3, #127	; 0x7f
 800f8ea:	d121      	bne.n	800f930 <flash_get_device_id+0xc84>
 800f8ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8f0:	795b      	ldrb	r3, [r3, #5]
 800f8f2:	2b7f      	cmp	r3, #127	; 0x7f
 800f8f4:	d11c      	bne.n	800f930 <flash_get_device_id+0xc84>
 800f8f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8fa:	799b      	ldrb	r3, [r3, #6]
 800f8fc:	2b7f      	cmp	r3, #127	; 0x7f
 800f8fe:	d117      	bne.n	800f930 <flash_get_device_id+0xc84>
 800f900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f904:	7a1b      	ldrb	r3, [r3, #8]
 800f906:	2b24      	cmp	r3, #36	; 0x24
 800f908:	d112      	bne.n	800f930 <flash_get_device_id+0xc84>
 800f90a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f90e:	7a5b      	ldrb	r3, [r3, #9]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d10d      	bne.n	800f930 <flash_get_device_id+0xc84>
                {
                    flash_drv->info.device = APP_SPI_FRAM_FM25V10;
 800f914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f916:	230f      	movs	r3, #15
 800f918:	7713      	strb	r3, [r2, #28]
                    DEBUG_INFO("FM25V10\r\n");
 800f91a:	f000 fc39 	bl	8010190 <app_debug_get_ms>
 800f91e:	4603      	mov	r3, r0
 800f920:	4a12      	ldr	r2, [pc, #72]	; (800f96c <flash_get_device_id+0xcc0>)
 800f922:	4619      	mov	r1, r3
 800f924:	4814      	ldr	r0, [pc, #80]	; (800f978 <flash_get_device_id+0xccc>)
 800f926:	f000 fdaf 	bl	8010488 <app_debug_print_raw>
                    val = true;
 800f92a:	2301      	movs	r3, #1
 800f92c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800f930:	46ad      	mov	sp, r5
 800f932:	e000      	b.n	800f936 <flash_get_device_id+0xc8a>
                if (id.name.device_id[0] == 0x01 && id.name.device_id[1] == 0x01)
 800f934:	bf00      	nop
                }
            }
        }

        if (val)
 800f936:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d10a      	bne.n	800f954 <flash_get_device_id+0xca8>
    for (tries = 0; tries < FLASH_INIT_MAX_RETRIES; tries++)
 800f93e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800f942:	3301      	adds	r3, #1
 800f944:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800f948:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800f94c:	2b02      	cmp	r3, #2
 800f94e:	f67f a9c4 	bls.w	800ecda <flash_get_device_id+0x2e>
 800f952:	e000      	b.n	800f956 <flash_get_device_id+0xcaa>
        {
            break;
 800f954:	bf00      	nop
        }
    }
    return val;
 800f956:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	37b8      	adds	r7, #184	; 0xb8
 800f95e:	46bd      	mov	sp, r7
 800f960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f964:	08019904 	.word	0x08019904
 800f968:	080194bc 	.word	0x080194bc
 800f96c:	080194c0 	.word	0x080194c0
 800f970:	0801990c 	.word	0x0801990c
 800f974:	08019930 	.word	0x08019930
 800f978:	08019954 	.word	0x08019954

0800f97c <app_spi_flash_wakeup>:
    return retval;
}


void app_spi_flash_wakeup(void)
{
 800f97c:	b480      	push	{r7}
 800f97e:	af00      	add	r7, sp, #0
        {
            __nop();
        }
    }
#endif
}
 800f980:	bf00      	nop
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr

0800f98a <app_spi_flash_is_sector_empty>:
    }
#endif
}

bool app_spi_flash_is_sector_empty(app_flash_drv_t *flash_drv, uint32_t sector_index)
{
 800f98a:	b580      	push	{r7, lr}
 800f98c:	b086      	sub	sp, #24
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
 800f992:	6039      	str	r1, [r7, #0]
    bool retval = true;
 800f994:	2301      	movs	r3, #1
 800f996:	75fb      	strb	r3, [r7, #23]
    if (flash_drv->info.type == APP_SPI_FLASH)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d11c      	bne.n	800f9dc <app_spi_flash_is_sector_empty+0x52>
    {
        uint32_t addr = sector_index * APP_SPI_FLASH_SECTOR_SIZE;
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	031b      	lsls	r3, r3, #12
 800f9a6:	60fb      	str	r3, [r7, #12]
        for (uint32_t i = 0; i < APP_SPI_FLASH_SECTOR_SIZE;) // Debug only
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	613b      	str	r3, [r7, #16]
 800f9ac:	e012      	b.n	800f9d4 <app_spi_flash_is_sector_empty+0x4a>
        {
            uint32_t tmp;
            app_spi_flash_read_bytes(flash_drv, addr + i, (uint8_t *)&tmp, 4);
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	18d1      	adds	r1, r2, r3
 800f9b4:	f107 0208 	add.w	r2, r7, #8
 800f9b8:	2304      	movs	r3, #4
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f7ff f808 	bl	800e9d0 <app_spi_flash_read_bytes>
            if (tmp != 0xFFFFFFFF)
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c6:	d002      	beq.n	800f9ce <app_spi_flash_is_sector_empty+0x44>
            {
                retval = false;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	75fb      	strb	r3, [r7, #23]
 800f9cc:	e006      	b.n	800f9dc <app_spi_flash_is_sector_empty+0x52>
                break;
            }
            i += 4;
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	3304      	adds	r3, #4
 800f9d2:	613b      	str	r3, [r7, #16]
        for (uint32_t i = 0; i < APP_SPI_FLASH_SECTOR_SIZE;) // Debug only
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9da:	d3e8      	bcc.n	800f9ae <app_spi_flash_is_sector_empty+0x24>
        }
    }
    return retval;
 800f9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3718      	adds	r7, #24
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
	...

0800f9e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	4912      	ldr	r1, [pc, #72]	; (800fa38 <MX_USB_DEVICE_Init+0x50>)
 800f9f0:	4812      	ldr	r0, [pc, #72]	; (800fa3c <MX_USB_DEVICE_Init+0x54>)
 800f9f2:	f7f8 ff8c 	bl	800890e <USBD_Init>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d001      	beq.n	800fa00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f9fc:	f7f1 f967 	bl	8000cce <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800fa00:	490f      	ldr	r1, [pc, #60]	; (800fa40 <MX_USB_DEVICE_Init+0x58>)
 800fa02:	480e      	ldr	r0, [pc, #56]	; (800fa3c <MX_USB_DEVICE_Init+0x54>)
 800fa04:	f7f8 ffb3 	bl	800896e <USBD_RegisterClass>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fa0e:	f7f1 f95e 	bl	8000cce <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800fa12:	490c      	ldr	r1, [pc, #48]	; (800fa44 <MX_USB_DEVICE_Init+0x5c>)
 800fa14:	4809      	ldr	r0, [pc, #36]	; (800fa3c <MX_USB_DEVICE_Init+0x54>)
 800fa16:	f7f7 f97d 	bl	8006d14 <USBD_MSC_RegisterStorage>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d001      	beq.n	800fa24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fa20:	f7f1 f955 	bl	8000cce <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fa24:	4805      	ldr	r0, [pc, #20]	; (800fa3c <MX_USB_DEVICE_Init+0x54>)
 800fa26:	f7f8 ffd8 	bl	80089da <USBD_Start>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d001      	beq.n	800fa34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fa30:	f7f1 f94d 	bl	8000cce <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fa34:	bf00      	nop
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	200000cc 	.word	0x200000cc
 800fa3c:	20007430 	.word	0x20007430
 800fa40:	20000020 	.word	0x20000020
 800fa44:	2000011c 	.word	0x2000011c

0800fa48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	6039      	str	r1, [r7, #0]
 800fa52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	2212      	movs	r2, #18
 800fa58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa5a:	4b03      	ldr	r3, [pc, #12]	; (800fa68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr
 800fa68:	200000e8 	.word	0x200000e8

0800fa6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	4603      	mov	r3, r0
 800fa74:	6039      	str	r1, [r7, #0]
 800fa76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	2204      	movs	r2, #4
 800fa7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa7e:	4b03      	ldr	r3, [pc, #12]	; (800fa8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	200000fc 	.word	0x200000fc

0800fa90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	4603      	mov	r3, r0
 800fa98:	6039      	str	r1, [r7, #0]
 800fa9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa9c:	79fb      	ldrb	r3, [r7, #7]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d105      	bne.n	800faae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800faa2:	683a      	ldr	r2, [r7, #0]
 800faa4:	4907      	ldr	r1, [pc, #28]	; (800fac4 <USBD_FS_ProductStrDescriptor+0x34>)
 800faa6:	4808      	ldr	r0, [pc, #32]	; (800fac8 <USBD_FS_ProductStrDescriptor+0x38>)
 800faa8:	f7f9 f80b 	bl	8008ac2 <USBD_GetString>
 800faac:	e004      	b.n	800fab8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800faae:	683a      	ldr	r2, [r7, #0]
 800fab0:	4904      	ldr	r1, [pc, #16]	; (800fac4 <USBD_FS_ProductStrDescriptor+0x34>)
 800fab2:	4805      	ldr	r0, [pc, #20]	; (800fac8 <USBD_FS_ProductStrDescriptor+0x38>)
 800fab4:	f7f9 f805 	bl	8008ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fab8:	4b02      	ldr	r3, [pc, #8]	; (800fac4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	2000770c 	.word	0x2000770c
 800fac8:	08019b40 	.word	0x08019b40

0800facc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4603      	mov	r3, r0
 800fad4:	6039      	str	r1, [r7, #0]
 800fad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fad8:	683a      	ldr	r2, [r7, #0]
 800fada:	4904      	ldr	r1, [pc, #16]	; (800faec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fadc:	4804      	ldr	r0, [pc, #16]	; (800faf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fade:	f7f8 fff0 	bl	8008ac2 <USBD_GetString>
  return USBD_StrDesc;
 800fae2:	4b02      	ldr	r3, [pc, #8]	; (800faec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	2000770c 	.word	0x2000770c
 800faf0:	08019b40 	.word	0x08019b40

0800faf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	4603      	mov	r3, r0
 800fafc:	6039      	str	r1, [r7, #0]
 800fafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	221a      	movs	r2, #26
 800fb04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb06:	f000 f843 	bl	800fb90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb0a:	4b02      	ldr	r3, [pc, #8]	; (800fb14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	20000100 	.word	0x20000100

0800fb18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	4603      	mov	r3, r0
 800fb20:	6039      	str	r1, [r7, #0]
 800fb22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb24:	79fb      	ldrb	r3, [r7, #7]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d105      	bne.n	800fb36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb2a:	683a      	ldr	r2, [r7, #0]
 800fb2c:	4907      	ldr	r1, [pc, #28]	; (800fb4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb2e:	4808      	ldr	r0, [pc, #32]	; (800fb50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb30:	f7f8 ffc7 	bl	8008ac2 <USBD_GetString>
 800fb34:	e004      	b.n	800fb40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb36:	683a      	ldr	r2, [r7, #0]
 800fb38:	4904      	ldr	r1, [pc, #16]	; (800fb4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb3a:	4805      	ldr	r0, [pc, #20]	; (800fb50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb3c:	f7f8 ffc1 	bl	8008ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb40:	4b02      	ldr	r3, [pc, #8]	; (800fb4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	2000770c 	.word	0x2000770c
 800fb50:	08019b48 	.word	0x08019b48

0800fb54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	6039      	str	r1, [r7, #0]
 800fb5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb60:	79fb      	ldrb	r3, [r7, #7]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d105      	bne.n	800fb72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb66:	683a      	ldr	r2, [r7, #0]
 800fb68:	4907      	ldr	r1, [pc, #28]	; (800fb88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb6a:	4808      	ldr	r0, [pc, #32]	; (800fb8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb6c:	f7f8 ffa9 	bl	8008ac2 <USBD_GetString>
 800fb70:	e004      	b.n	800fb7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	4904      	ldr	r1, [pc, #16]	; (800fb88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb76:	4805      	ldr	r0, [pc, #20]	; (800fb8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb78:	f7f8 ffa3 	bl	8008ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb7c:	4b02      	ldr	r3, [pc, #8]	; (800fb88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	2000770c 	.word	0x2000770c
 800fb8c:	08019b54 	.word	0x08019b54

0800fb90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fb96:	4b0f      	ldr	r3, [pc, #60]	; (800fbd4 <Get_SerialNum+0x44>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fb9c:	4b0e      	ldr	r3, [pc, #56]	; (800fbd8 <Get_SerialNum+0x48>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fba2:	4b0e      	ldr	r3, [pc, #56]	; (800fbdc <Get_SerialNum+0x4c>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fba8:	68fa      	ldr	r2, [r7, #12]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	4413      	add	r3, r2
 800fbae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d009      	beq.n	800fbca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fbb6:	2208      	movs	r2, #8
 800fbb8:	4909      	ldr	r1, [pc, #36]	; (800fbe0 <Get_SerialNum+0x50>)
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f000 f814 	bl	800fbe8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fbc0:	2204      	movs	r2, #4
 800fbc2:	4908      	ldr	r1, [pc, #32]	; (800fbe4 <Get_SerialNum+0x54>)
 800fbc4:	68b8      	ldr	r0, [r7, #8]
 800fbc6:	f000 f80f 	bl	800fbe8 <IntToUnicode>
  }
}
 800fbca:	bf00      	nop
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	1fff7a10 	.word	0x1fff7a10
 800fbd8:	1fff7a14 	.word	0x1fff7a14
 800fbdc:	1fff7a18 	.word	0x1fff7a18
 800fbe0:	20000102 	.word	0x20000102
 800fbe4:	20000112 	.word	0x20000112

0800fbe8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b087      	sub	sp, #28
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	4613      	mov	r3, r2
 800fbf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	75fb      	strb	r3, [r7, #23]
 800fbfe:	e027      	b.n	800fc50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	0f1b      	lsrs	r3, r3, #28
 800fc04:	2b09      	cmp	r3, #9
 800fc06:	d80b      	bhi.n	800fc20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	0f1b      	lsrs	r3, r3, #28
 800fc0c:	b2da      	uxtb	r2, r3
 800fc0e:	7dfb      	ldrb	r3, [r7, #23]
 800fc10:	005b      	lsls	r3, r3, #1
 800fc12:	4619      	mov	r1, r3
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	440b      	add	r3, r1
 800fc18:	3230      	adds	r2, #48	; 0x30
 800fc1a:	b2d2      	uxtb	r2, r2
 800fc1c:	701a      	strb	r2, [r3, #0]
 800fc1e:	e00a      	b.n	800fc36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	0f1b      	lsrs	r3, r3, #28
 800fc24:	b2da      	uxtb	r2, r3
 800fc26:	7dfb      	ldrb	r3, [r7, #23]
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	440b      	add	r3, r1
 800fc30:	3237      	adds	r2, #55	; 0x37
 800fc32:	b2d2      	uxtb	r2, r2
 800fc34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	011b      	lsls	r3, r3, #4
 800fc3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc3c:	7dfb      	ldrb	r3, [r7, #23]
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	3301      	adds	r3, #1
 800fc42:	68ba      	ldr	r2, [r7, #8]
 800fc44:	4413      	add	r3, r2
 800fc46:	2200      	movs	r2, #0
 800fc48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc4a:	7dfb      	ldrb	r3, [r7, #23]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	75fb      	strb	r3, [r7, #23]
 800fc50:	7dfa      	ldrb	r2, [r7, #23]
 800fc52:	79fb      	ldrb	r3, [r7, #7]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d3d3      	bcc.n	800fc00 <IntToUnicode+0x18>
  }
}
 800fc58:	bf00      	nop
 800fc5a:	bf00      	nop
 800fc5c:	371c      	adds	r7, #28
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc64:	4770      	bx	lr

0800fc66 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800fc66:	b480      	push	{r7}
 800fc68:	b083      	sub	sp, #12
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800fc70:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	370c      	adds	r7, #12
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr

0800fc7e <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800fc7e:	b480      	push	{r7}
 800fc80:	b085      	sub	sp, #20
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	4603      	mov	r3, r0
 800fc86:	60b9      	str	r1, [r7, #8]
 800fc88:	607a      	str	r2, [r7, #4]
 800fc8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fc92:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc9a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800fc9c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3714      	adds	r7, #20
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr

0800fcaa <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800fcaa:	b480      	push	{r7}
 800fcac:	b083      	sub	sp, #12
 800fcae:	af00      	add	r7, sp, #0
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800fcb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	370c      	adds	r7, #12
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr

0800fcc2 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800fcc2:	b480      	push	{r7}
 800fcc4:	b083      	sub	sp, #12
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	4603      	mov	r3, r0
 800fcca:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800fccc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	370c      	adds	r7, #12
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800fcda:	b480      	push	{r7}
 800fcdc:	b085      	sub	sp, #20
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	461a      	mov	r2, r3
 800fce6:	4603      	mov	r3, r0
 800fce8:	73fb      	strb	r3, [r7, #15]
 800fcea:	4613      	mov	r3, r2
 800fcec:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800fcee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3714      	adds	r7, #20
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfa:	4770      	bx	lr

0800fcfc <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b085      	sub	sp, #20
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60b9      	str	r1, [r7, #8]
 800fd04:	607a      	str	r2, [r7, #4]
 800fd06:	461a      	mov	r2, r3
 800fd08:	4603      	mov	r3, r0
 800fd0a:	73fb      	strb	r3, [r7, #15]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800fd10:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3714      	adds	r7, #20
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr

0800fd1e <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800fd1e:	b480      	push	{r7}
 800fd20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800fd22:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr
	...

0800fd30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b08a      	sub	sp, #40	; 0x28
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd38:	f107 0314 	add.w	r3, r7, #20
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	601a      	str	r2, [r3, #0]
 800fd40:	605a      	str	r2, [r3, #4]
 800fd42:	609a      	str	r2, [r3, #8]
 800fd44:	60da      	str	r2, [r3, #12]
 800fd46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fd50:	d13a      	bne.n	800fdc8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd52:	2300      	movs	r3, #0
 800fd54:	613b      	str	r3, [r7, #16]
 800fd56:	4b1e      	ldr	r3, [pc, #120]	; (800fdd0 <HAL_PCD_MspInit+0xa0>)
 800fd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd5a:	4a1d      	ldr	r2, [pc, #116]	; (800fdd0 <HAL_PCD_MspInit+0xa0>)
 800fd5c:	f043 0301 	orr.w	r3, r3, #1
 800fd60:	6313      	str	r3, [r2, #48]	; 0x30
 800fd62:	4b1b      	ldr	r3, [pc, #108]	; (800fdd0 <HAL_PCD_MspInit+0xa0>)
 800fd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd66:	f003 0301 	and.w	r3, r3, #1
 800fd6a:	613b      	str	r3, [r7, #16]
 800fd6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fd6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fd72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd74:	2302      	movs	r3, #2
 800fd76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd7c:	2303      	movs	r3, #3
 800fd7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fd80:	230a      	movs	r3, #10
 800fd82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd84:	f107 0314 	add.w	r3, r7, #20
 800fd88:	4619      	mov	r1, r3
 800fd8a:	4812      	ldr	r0, [pc, #72]	; (800fdd4 <HAL_PCD_MspInit+0xa4>)
 800fd8c:	f7f2 f894 	bl	8001eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fd90:	4b0f      	ldr	r3, [pc, #60]	; (800fdd0 <HAL_PCD_MspInit+0xa0>)
 800fd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd94:	4a0e      	ldr	r2, [pc, #56]	; (800fdd0 <HAL_PCD_MspInit+0xa0>)
 800fd96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd9a:	6353      	str	r3, [r2, #52]	; 0x34
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	60fb      	str	r3, [r7, #12]
 800fda0:	4b0b      	ldr	r3, [pc, #44]	; (800fdd0 <HAL_PCD_MspInit+0xa0>)
 800fda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fda4:	4a0a      	ldr	r2, [pc, #40]	; (800fdd0 <HAL_PCD_MspInit+0xa0>)
 800fda6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fdaa:	6453      	str	r3, [r2, #68]	; 0x44
 800fdac:	4b08      	ldr	r3, [pc, #32]	; (800fdd0 <HAL_PCD_MspInit+0xa0>)
 800fdae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fdb4:	60fb      	str	r3, [r7, #12]
 800fdb6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2105      	movs	r1, #5
 800fdbc:	2043      	movs	r0, #67	; 0x43
 800fdbe:	f7f1 fb4d 	bl	800145c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fdc2:	2043      	movs	r0, #67	; 0x43
 800fdc4:	f7f1 fb76 	bl	80014b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fdc8:	bf00      	nop
 800fdca:	3728      	adds	r7, #40	; 0x28
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	40023800 	.word	0x40023800
 800fdd4:	40020000 	.word	0x40020000

0800fdd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d13c      	bne.n	800fe62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fde8:	4a20      	ldr	r2, [pc, #128]	; (800fe6c <USBD_LL_Init+0x94>)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	4a1e      	ldr	r2, [pc, #120]	; (800fe6c <USBD_LL_Init+0x94>)
 800fdf4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fdf8:	4b1c      	ldr	r3, [pc, #112]	; (800fe6c <USBD_LL_Init+0x94>)
 800fdfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fdfe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fe00:	4b1a      	ldr	r3, [pc, #104]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe02:	2204      	movs	r2, #4
 800fe04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fe06:	4b19      	ldr	r3, [pc, #100]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe08:	2202      	movs	r2, #2
 800fe0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fe0c:	4b17      	ldr	r3, [pc, #92]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fe12:	4b16      	ldr	r3, [pc, #88]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe14:	2202      	movs	r2, #2
 800fe16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fe18:	4b14      	ldr	r3, [pc, #80]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fe1e:	4b13      	ldr	r3, [pc, #76]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe20:	2200      	movs	r2, #0
 800fe22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fe24:	4b11      	ldr	r3, [pc, #68]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fe2a:	4b10      	ldr	r3, [pc, #64]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fe30:	4b0e      	ldr	r3, [pc, #56]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe32:	2200      	movs	r2, #0
 800fe34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fe36:	480d      	ldr	r0, [pc, #52]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe38:	f7f2 fb52 	bl	80024e0 <HAL_PCD_Init>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d001      	beq.n	800fe46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fe42:	f7f0 ff44 	bl	8000cce <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fe46:	2180      	movs	r1, #128	; 0x80
 800fe48:	4808      	ldr	r0, [pc, #32]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe4a:	f7f2 ff39 	bl	8002cc0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fe4e:	2240      	movs	r2, #64	; 0x40
 800fe50:	2100      	movs	r1, #0
 800fe52:	4806      	ldr	r0, [pc, #24]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe54:	f7f2 feed 	bl	8002c32 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fe58:	2280      	movs	r2, #128	; 0x80
 800fe5a:	2101      	movs	r1, #1
 800fe5c:	4803      	ldr	r0, [pc, #12]	; (800fe6c <USBD_LL_Init+0x94>)
 800fe5e:	f7f2 fee8 	bl	8002c32 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fe62:	2300      	movs	r3, #0
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3708      	adds	r7, #8
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	2000790c 	.word	0x2000790c

0800fe70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7f2 fc5a 	bl	8002740 <HAL_PCD_Start>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe90:	7bfb      	ldrb	r3, [r7, #15]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f000 f916 	bl	80100c4 <USBD_Get_USB_Status>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b084      	sub	sp, #16
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
 800feae:	4608      	mov	r0, r1
 800feb0:	4611      	mov	r1, r2
 800feb2:	461a      	mov	r2, r3
 800feb4:	4603      	mov	r3, r0
 800feb6:	70fb      	strb	r3, [r7, #3]
 800feb8:	460b      	mov	r3, r1
 800feba:	70bb      	strb	r3, [r7, #2]
 800febc:	4613      	mov	r3, r2
 800febe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fec0:	2300      	movs	r3, #0
 800fec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fec4:	2300      	movs	r3, #0
 800fec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fece:	78bb      	ldrb	r3, [r7, #2]
 800fed0:	883a      	ldrh	r2, [r7, #0]
 800fed2:	78f9      	ldrb	r1, [r7, #3]
 800fed4:	f7f2 fc67 	bl	80027a6 <HAL_PCD_EP_Open>
 800fed8:	4603      	mov	r3, r0
 800feda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fedc:	7bfb      	ldrb	r3, [r7, #15]
 800fede:	4618      	mov	r0, r3
 800fee0:	f000 f8f0 	bl	80100c4 <USBD_Get_USB_Status>
 800fee4:	4603      	mov	r3, r0
 800fee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fee8:	7bbb      	ldrb	r3, [r7, #14]
}
 800feea:	4618      	mov	r0, r3
 800feec:	3710      	adds	r7, #16
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b084      	sub	sp, #16
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
 800fefa:	460b      	mov	r3, r1
 800fefc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fefe:	2300      	movs	r3, #0
 800ff00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff02:	2300      	movs	r3, #0
 800ff04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff0c:	78fa      	ldrb	r2, [r7, #3]
 800ff0e:	4611      	mov	r1, r2
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7f2 fcb0 	bl	8002876 <HAL_PCD_EP_Close>
 800ff16:	4603      	mov	r3, r0
 800ff18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff1a:	7bfb      	ldrb	r3, [r7, #15]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f000 f8d1 	bl	80100c4 <USBD_Get_USB_Status>
 800ff22:	4603      	mov	r3, r0
 800ff24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3710      	adds	r7, #16
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	460b      	mov	r3, r1
 800ff3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff40:	2300      	movs	r3, #0
 800ff42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff4a:	78fa      	ldrb	r2, [r7, #3]
 800ff4c:	4611      	mov	r1, r2
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7f2 fe42 	bl	8002bd8 <HAL_PCD_EP_Flush>
 800ff54:	4603      	mov	r3, r0
 800ff56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff58:	7bfb      	ldrb	r3, [r7, #15]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 f8b2 	bl	80100c4 <USBD_Get_USB_Status>
 800ff60:	4603      	mov	r3, r0
 800ff62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3710      	adds	r7, #16
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b084      	sub	sp, #16
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
 800ff76:	460b      	mov	r3, r1
 800ff78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff88:	78fa      	ldrb	r2, [r7, #3]
 800ff8a:	4611      	mov	r1, r2
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7f2 fd69 	bl	8002a64 <HAL_PCD_EP_SetStall>
 800ff92:	4603      	mov	r3, r0
 800ff94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff96:	7bfb      	ldrb	r3, [r7, #15]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f000 f893 	bl	80100c4 <USBD_Get_USB_Status>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffc6:	78fa      	ldrb	r2, [r7, #3]
 800ffc8:	4611      	mov	r1, r2
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7f2 fdae 	bl	8002b2c <HAL_PCD_EP_ClrStall>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f000 f874 	bl	80100c4 <USBD_Get_USB_Status>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffe0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b086      	sub	sp, #24
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	60f8      	str	r0, [r7, #12]
 800fff2:	607a      	str	r2, [r7, #4]
 800fff4:	603b      	str	r3, [r7, #0]
 800fff6:	460b      	mov	r3, r1
 800fff8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fffa:	2300      	movs	r3, #0
 800fffc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fffe:	2300      	movs	r3, #0
 8010000:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010008:	7af9      	ldrb	r1, [r7, #11]
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	f7f2 fcdf 	bl	80029d0 <HAL_PCD_EP_Transmit>
 8010012:	4603      	mov	r3, r0
 8010014:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010016:	7dfb      	ldrb	r3, [r7, #23]
 8010018:	4618      	mov	r0, r3
 801001a:	f000 f853 	bl	80100c4 <USBD_Get_USB_Status>
 801001e:	4603      	mov	r3, r0
 8010020:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010022:	7dbb      	ldrb	r3, [r7, #22]
}
 8010024:	4618      	mov	r0, r3
 8010026:	3718      	adds	r7, #24
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b086      	sub	sp, #24
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	607a      	str	r2, [r7, #4]
 8010036:	603b      	str	r3, [r7, #0]
 8010038:	460b      	mov	r3, r1
 801003a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801003c:	2300      	movs	r3, #0
 801003e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010040:	2300      	movs	r3, #0
 8010042:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801004a:	7af9      	ldrb	r1, [r7, #11]
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	f7f2 fc5b 	bl	800290a <HAL_PCD_EP_Receive>
 8010054:	4603      	mov	r3, r0
 8010056:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010058:	7dfb      	ldrb	r3, [r7, #23]
 801005a:	4618      	mov	r0, r3
 801005c:	f000 f832 	bl	80100c4 <USBD_Get_USB_Status>
 8010060:	4603      	mov	r3, r0
 8010062:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010064:	7dbb      	ldrb	r3, [r7, #22]
}
 8010066:	4618      	mov	r0, r3
 8010068:	3718      	adds	r7, #24
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b082      	sub	sp, #8
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
 8010076:	460b      	mov	r3, r1
 8010078:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010080:	78fa      	ldrb	r2, [r7, #3]
 8010082:	4611      	mov	r1, r2
 8010084:	4618      	mov	r0, r3
 8010086:	f7f2 fc8b 	bl	80029a0 <HAL_PCD_EP_GetRxCount>
 801008a:	4603      	mov	r3, r0
}
 801008c:	4618      	mov	r0, r3
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801009c:	4b03      	ldr	r3, [pc, #12]	; (80100ac <USBD_static_malloc+0x18>)
}
 801009e:	4618      	mov	r0, r3
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop
 80100ac:	20007e18 	.word	0x20007e18

080100b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]

}
 80100b8:	bf00      	nop
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	4603      	mov	r3, r0
 80100cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100ce:	2300      	movs	r3, #0
 80100d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80100d2:	79fb      	ldrb	r3, [r7, #7]
 80100d4:	2b03      	cmp	r3, #3
 80100d6:	d817      	bhi.n	8010108 <USBD_Get_USB_Status+0x44>
 80100d8:	a201      	add	r2, pc, #4	; (adr r2, 80100e0 <USBD_Get_USB_Status+0x1c>)
 80100da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100de:	bf00      	nop
 80100e0:	080100f1 	.word	0x080100f1
 80100e4:	080100f7 	.word	0x080100f7
 80100e8:	080100fd 	.word	0x080100fd
 80100ec:	08010103 	.word	0x08010103
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80100f0:	2300      	movs	r3, #0
 80100f2:	73fb      	strb	r3, [r7, #15]
    break;
 80100f4:	e00b      	b.n	801010e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80100f6:	2303      	movs	r3, #3
 80100f8:	73fb      	strb	r3, [r7, #15]
    break;
 80100fa:	e008      	b.n	801010e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80100fc:	2301      	movs	r3, #1
 80100fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010100:	e005      	b.n	801010e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010102:	2303      	movs	r3, #3
 8010104:	73fb      	strb	r3, [r7, #15]
    break;
 8010106:	e002      	b.n	801010e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010108:	2303      	movs	r3, #3
 801010a:	73fb      	strb	r3, [r7, #15]
    break;
 801010c:	bf00      	nop
  }
  return usb_status;
 801010e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010110:	4618      	mov	r0, r3
 8010112:	3714      	adds	r7, #20
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <__strnlen>:
static app_debug_lock_cb_t m_lock_cb;
static char *lower_digits = "0123456789abcdefghijklmnopqrstuvwxyz";
static char *upper_digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

static uint32_t __strnlen(char *ptr, uint32_t max_size)
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
    uint32_t len = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	60fb      	str	r3, [r7, #12]
    if (ptr || max_size == 0)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d102      	bne.n	8010136 <__strnlen+0x1a>
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d104      	bne.n	8010140 <__strnlen+0x24>
    {
        return 0;
 8010136:	2300      	movs	r3, #0
 8010138:	e00e      	b.n	8010158 <__strnlen+0x3c>
    }

    while (*ptr++ && max_size--)
    {
        len++;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3301      	adds	r3, #1
 801013e:	60fb      	str	r3, [r7, #12]
    while (*ptr++ && max_size--)
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	1c5a      	adds	r2, r3, #1
 8010144:	607a      	str	r2, [r7, #4]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d004      	beq.n	8010156 <__strnlen+0x3a>
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	1e5a      	subs	r2, r3, #1
 8010150:	603a      	str	r2, [r7, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1f1      	bne.n	801013a <__strnlen+0x1e>
    }
    return len;
 8010156:	68fb      	ldr	r3, [r7, #12]
}
 8010158:	4618      	mov	r0, r3
 801015a:	3714      	adds	r7, #20
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	4770      	bx	lr

08010164 <app_debug_init>:
}

#endif

void app_debug_init(app_debug_get_timestamp_ms_cb_t get_ms, app_debug_lock_cb_t lock_cb)
{
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
    m_get_ms = get_ms;
 801016e:	4a06      	ldr	r2, [pc, #24]	; (8010188 <app_debug_init+0x24>)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6013      	str	r3, [r2, #0]
    m_lock_cb = lock_cb;
 8010174:	4a05      	ldr	r2, [pc, #20]	; (801018c <app_debug_init+0x28>)
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	6013      	str	r3, [r2, #0]
#if DEBUG_ISR_ENABLE
    lwrb_init(&m_ringbuffer_debug_isr, &m_isr_buffer_size, DEBUG_ISR_RINGBUFFER_SIZE);
#endif
}
 801017a:	bf00      	nop
 801017c:	370c      	adds	r7, #12
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr
 8010186:	bf00      	nop
 8010188:	20008ea4 	.word	0x20008ea4
 801018c:	20008ea8 	.word	0x20008ea8

08010190 <app_debug_get_ms>:

uint32_t app_debug_get_ms(void)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	af00      	add	r7, sp, #0
    if (m_get_ms)
 8010194:	4b05      	ldr	r3, [pc, #20]	; (80101ac <app_debug_get_ms+0x1c>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d004      	beq.n	80101a6 <app_debug_get_ms+0x16>
    {
        return m_get_ms();
 801019c:	4b03      	ldr	r3, [pc, #12]	; (80101ac <app_debug_get_ms+0x1c>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4798      	blx	r3
 80101a2:	4603      	mov	r3, r0
 80101a4:	e000      	b.n	80101a8 <app_debug_get_ms+0x18>
    }
    return 0;
 80101a6:	2300      	movs	r3, #0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	20008ea4 	.word	0x20008ea4

080101b0 <put_byte>:
void app_debug_print_nothing(const char *fmt, ...)
{
}

static void put_byte(uint8_t data)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t index = 0; index < APP_DEBUG_NUMBER_OF_DEBUG_PORT; index++)
 80101ba:	2300      	movs	r3, #0
 80101bc:	73fb      	strb	r3, [r7, #15]
 80101be:	e010      	b.n	80101e2 <put_byte+0x32>
    {
        if (m_write_cb[index])
 80101c0:	7bfb      	ldrb	r3, [r7, #15]
 80101c2:	4a0c      	ldr	r2, [pc, #48]	; (80101f4 <put_byte+0x44>)
 80101c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d007      	beq.n	80101dc <put_byte+0x2c>
        {
            m_write_cb[index](&data, 1);
 80101cc:	7bfb      	ldrb	r3, [r7, #15]
 80101ce:	4a09      	ldr	r2, [pc, #36]	; (80101f4 <put_byte+0x44>)
 80101d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101d4:	1dfa      	adds	r2, r7, #7
 80101d6:	2101      	movs	r1, #1
 80101d8:	4610      	mov	r0, r2
 80101da:	4798      	blx	r3
    for (uint8_t index = 0; index < APP_DEBUG_NUMBER_OF_DEBUG_PORT; index++)
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
 80101de:	3301      	adds	r3, #1
 80101e0:	73fb      	strb	r3, [r7, #15]
 80101e2:	7bfb      	ldrb	r3, [r7, #15]
 80101e4:	2b03      	cmp	r3, #3
 80101e6:	d9eb      	bls.n	80101c0 <put_byte+0x10>
        }
    }
}
 80101e8:	bf00      	nop
 80101ea:	bf00      	nop
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	20008e90 	.word	0x20008e90

080101f8 <ee_skip_atoi>:
//         m_lock_cb(false, 0);
//     }
// }

static int ee_skip_atoi(const char **s)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
    int i = 0;
 8010200:	2300      	movs	r3, #0
 8010202:	60fb      	str	r3, [r7, #12]
    while (is_digit(**s))
 8010204:	e00e      	b.n	8010224 <ee_skip_atoi+0x2c>
        i = i * 10 + *((*s)++) - '0';
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	4613      	mov	r3, r2
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4413      	add	r3, r2
 801020e:	005b      	lsls	r3, r3, #1
 8010210:	4618      	mov	r0, r3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	1c59      	adds	r1, r3, #1
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	6011      	str	r1, [r2, #0]
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	4403      	add	r3, r0
 8010220:	3b30      	subs	r3, #48	; 0x30
 8010222:	60fb      	str	r3, [r7, #12]
    while (is_digit(**s))
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	2b2f      	cmp	r3, #47	; 0x2f
 801022c:	d904      	bls.n	8010238 <ee_skip_atoi+0x40>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	2b39      	cmp	r3, #57	; 0x39
 8010236:	d9e6      	bls.n	8010206 <ee_skip_atoi+0xe>
    return i;
 8010238:	68fb      	ldr	r3, [r7, #12]
}
 801023a:	4618      	mov	r0, r3
 801023c:	3714      	adds	r7, #20
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr
	...

08010248 <ee_number>:

static int ee_number(long num, int base, int size, int precision, int type)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b09a      	sub	sp, #104	; 0x68
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]
 8010254:	603b      	str	r3, [r7, #0]
    char c;
    char sign, tmp[66];
    char *dig = lower_digits;
 8010256:	4b8a      	ldr	r3, [pc, #552]	; (8010480 <ee_number+0x238>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	663b      	str	r3, [r7, #96]	; 0x60
    int i;
    int number_of_byte = 0;
 801025c:	2300      	movs	r3, #0
 801025e:	65bb      	str	r3, [r7, #88]	; 0x58

    if (type & UPPERCASE)
 8010260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010266:	2b00      	cmp	r3, #0
 8010268:	d002      	beq.n	8010270 <ee_number+0x28>
        dig = upper_digits;
 801026a:	4b86      	ldr	r3, [pc, #536]	; (8010484 <ee_number+0x23c>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	663b      	str	r3, [r7, #96]	; 0x60
    if (type & LEFT)
 8010270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010272:	f003 0310 	and.w	r3, r3, #16
 8010276:	2b00      	cmp	r3, #0
 8010278:	d003      	beq.n	8010282 <ee_number+0x3a>
        type &= ~ZEROPAD;
 801027a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801027c:	f023 0301 	bic.w	r3, r3, #1
 8010280:	673b      	str	r3, [r7, #112]	; 0x70
    if (base < 2 || base > 36)
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b01      	cmp	r3, #1
 8010286:	dd02      	ble.n	801028e <ee_number+0x46>
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	2b24      	cmp	r3, #36	; 0x24
 801028c:	dd01      	ble.n	8010292 <ee_number+0x4a>
        return 0;
 801028e:	2300      	movs	r3, #0
 8010290:	e0f2      	b.n	8010478 <ee_number+0x230>

    c = (type & ZEROPAD) ? '0' : ' ';
 8010292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010294:	f003 0301 	and.w	r3, r3, #1
 8010298:	2b00      	cmp	r3, #0
 801029a:	d001      	beq.n	80102a0 <ee_number+0x58>
 801029c:	2330      	movs	r3, #48	; 0x30
 801029e:	e000      	b.n	80102a2 <ee_number+0x5a>
 80102a0:	2320      	movs	r3, #32
 80102a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sign = 0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (type & SIGN)
 80102ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102ae:	f003 0302 	and.w	r3, r3, #2
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d023      	beq.n	80102fe <ee_number+0xb6>
    {
        if (num < 0)
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	da09      	bge.n	80102d0 <ee_number+0x88>
        {
            sign = '-';
 80102bc:	232d      	movs	r3, #45	; 0x2d
 80102be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            num = -num;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	425b      	negs	r3, r3
 80102c6:	60fb      	str	r3, [r7, #12]
            size--;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	3b01      	subs	r3, #1
 80102cc:	607b      	str	r3, [r7, #4]
 80102ce:	e016      	b.n	80102fe <ee_number+0xb6>
        }
        else if (type & PLUS)
 80102d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102d2:	f003 0304 	and.w	r3, r3, #4
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d006      	beq.n	80102e8 <ee_number+0xa0>
        {
            sign = '+';
 80102da:	232b      	movs	r3, #43	; 0x2b
 80102dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	3b01      	subs	r3, #1
 80102e4:	607b      	str	r3, [r7, #4]
 80102e6:	e00a      	b.n	80102fe <ee_number+0xb6>
        }
        else if (type & SPACE)
 80102e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102ea:	f003 0308 	and.w	r3, r3, #8
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d005      	beq.n	80102fe <ee_number+0xb6>
        {
            sign = ' ';
 80102f2:	2320      	movs	r3, #32
 80102f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	3b01      	subs	r3, #1
 80102fc:	607b      	str	r3, [r7, #4]
        }
    }

    if (type & HEX_PREP)
 80102fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010300:	f003 0320 	and.w	r3, r3, #32
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00c      	beq.n	8010322 <ee_number+0xda>
    {
        if (base == 16)
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	2b10      	cmp	r3, #16
 801030c:	d103      	bne.n	8010316 <ee_number+0xce>
            size -= 2;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	3b02      	subs	r3, #2
 8010312:	607b      	str	r3, [r7, #4]
 8010314:	e005      	b.n	8010322 <ee_number+0xda>
        else if (base == 8)
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2b08      	cmp	r3, #8
 801031a:	d102      	bne.n	8010322 <ee_number+0xda>
            size--;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	3b01      	subs	r3, #1
 8010320:	607b      	str	r3, [r7, #4]
    }

    i = 0;
 8010322:	2300      	movs	r3, #0
 8010324:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (num == 0)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d11e      	bne.n	801036a <ee_number+0x122>
        tmp[i++] = '0';
 801032c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801032e:	1c5a      	adds	r2, r3, #1
 8010330:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010332:	3368      	adds	r3, #104	; 0x68
 8010334:	443b      	add	r3, r7
 8010336:	2230      	movs	r2, #48	; 0x30
 8010338:	f803 2c54 	strb.w	r2, [r3, #-84]
 801033c:	e018      	b.n	8010370 <ee_number+0x128>
    else
    {
        while (num != 0)
        {
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	fbb3 f1f2 	udiv	r1, r3, r2
 8010346:	fb01 f202 	mul.w	r2, r1, r2
 801034a:	1a9b      	subs	r3, r3, r2
 801034c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801034e:	441a      	add	r2, r3
 8010350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010352:	1c59      	adds	r1, r3, #1
 8010354:	65f9      	str	r1, [r7, #92]	; 0x5c
 8010356:	7812      	ldrb	r2, [r2, #0]
 8010358:	3368      	adds	r3, #104	; 0x68
 801035a:	443b      	add	r3, r7
 801035c:	f803 2c54 	strb.w	r2, [r3, #-84]
            num = ((unsigned long)num) / (unsigned)base;
 8010360:	68fa      	ldr	r2, [r7, #12]
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	fbb2 f3f3 	udiv	r3, r2, r3
 8010368:	60fb      	str	r3, [r7, #12]
        while (num != 0)
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d1e6      	bne.n	801033e <ee_number+0xf6>
        }
    }

    if (i > precision)
 8010370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	429a      	cmp	r2, r3
 8010376:	dd01      	ble.n	801037c <ee_number+0x134>
        precision = i;
 8010378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801037a:	603b      	str	r3, [r7, #0]
    size -= precision;
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	607b      	str	r3, [r7, #4]
    if (!(type & (ZEROPAD /* TINY option   | LEFT */)))
 8010384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010386:	f003 0301 	and.w	r3, r3, #1
 801038a:	2b00      	cmp	r3, #0
 801038c:	d10b      	bne.n	80103a6 <ee_number+0x15e>
    {
        while (size-- > 0)
 801038e:	e005      	b.n	801039c <ee_number+0x154>
        {
            put_byte(' ');
 8010390:	2020      	movs	r0, #32
 8010392:	f7ff ff0d 	bl	80101b0 <put_byte>
            number_of_byte++;
 8010396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010398:	3301      	adds	r3, #1
 801039a:	65bb      	str	r3, [r7, #88]	; 0x58
        while (size-- > 0)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	1e5a      	subs	r2, r3, #1
 80103a0:	607a      	str	r2, [r7, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	dcf4      	bgt.n	8010390 <ee_number+0x148>
        }
    }
    if (sign)
 80103a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d007      	beq.n	80103be <ee_number+0x176>
    {
        put_byte(sign);
 80103ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7ff fefc 	bl	80101b0 <put_byte>
        number_of_byte++;
 80103b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103ba:	3301      	adds	r3, #1
 80103bc:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    if (type & HEX_PREP)
 80103be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103c0:	f003 0320 	and.w	r3, r3, #32
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d019      	beq.n	80103fc <ee_number+0x1b4>
    {
        if (base == 8)
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	2b08      	cmp	r3, #8
 80103cc:	d106      	bne.n	80103dc <ee_number+0x194>
        {
            put_byte('0');
 80103ce:	2030      	movs	r0, #48	; 0x30
 80103d0:	f7ff feee 	bl	80101b0 <put_byte>
            number_of_byte++;
 80103d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103d6:	3301      	adds	r3, #1
 80103d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80103da:	e00f      	b.n	80103fc <ee_number+0x1b4>
        }
        else if (base == 16)
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	2b10      	cmp	r3, #16
 80103e0:	d10c      	bne.n	80103fc <ee_number+0x1b4>
        {
            put_byte('0');
 80103e2:	2030      	movs	r0, #48	; 0x30
 80103e4:	f7ff fee4 	bl	80101b0 <put_byte>
            put_byte(lower_digits[33]);
 80103e8:	4b25      	ldr	r3, [pc, #148]	; (8010480 <ee_number+0x238>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	3321      	adds	r3, #33	; 0x21
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff fedd 	bl	80101b0 <put_byte>
            number_of_byte += 2;
 80103f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103f8:	3302      	adds	r3, #2
 80103fa:	65bb      	str	r3, [r7, #88]	; 0x58
        }
    }

    if (!(type & LEFT))
 80103fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103fe:	f003 0310 	and.w	r3, r3, #16
 8010402:	2b00      	cmp	r3, #0
 8010404:	d114      	bne.n	8010430 <ee_number+0x1e8>
    {
        while (size-- > 0)
 8010406:	e007      	b.n	8010418 <ee_number+0x1d0>
        {
            put_byte(c);
 8010408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801040c:	4618      	mov	r0, r3
 801040e:	f7ff fecf 	bl	80101b0 <put_byte>
            number_of_byte++;
 8010412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010414:	3301      	adds	r3, #1
 8010416:	65bb      	str	r3, [r7, #88]	; 0x58
        while (size-- > 0)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	1e5a      	subs	r2, r3, #1
 801041c:	607a      	str	r2, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	dcf2      	bgt.n	8010408 <ee_number+0x1c0>
        }
    }
    while (i < precision--)
 8010422:	e005      	b.n	8010430 <ee_number+0x1e8>
    {
        put_byte('0');
 8010424:	2030      	movs	r0, #48	; 0x30
 8010426:	f7ff fec3 	bl	80101b0 <put_byte>
        number_of_byte++;
 801042a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801042c:	3301      	adds	r3, #1
 801042e:	65bb      	str	r3, [r7, #88]	; 0x58
    while (i < precision--)
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	1e5a      	subs	r2, r3, #1
 8010434:	603a      	str	r2, [r7, #0]
 8010436:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010438:	429a      	cmp	r2, r3
 801043a:	dbf3      	blt.n	8010424 <ee_number+0x1dc>
    }
    while (i-- > 0)
 801043c:	e00a      	b.n	8010454 <ee_number+0x20c>
    {
        put_byte(tmp[i]);
 801043e:	f107 0214 	add.w	r2, r7, #20
 8010442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010444:	4413      	add	r3, r2
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	4618      	mov	r0, r3
 801044a:	f7ff feb1 	bl	80101b0 <put_byte>
        number_of_byte++;
 801044e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010450:	3301      	adds	r3, #1
 8010452:	65bb      	str	r3, [r7, #88]	; 0x58
    while (i-- > 0)
 8010454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010456:	1e5a      	subs	r2, r3, #1
 8010458:	65fa      	str	r2, [r7, #92]	; 0x5c
 801045a:	2b00      	cmp	r3, #0
 801045c:	dcef      	bgt.n	801043e <ee_number+0x1f6>
    }
    while (size-- > 0)
 801045e:	e005      	b.n	801046c <ee_number+0x224>
    {
        put_byte(' ');
 8010460:	2020      	movs	r0, #32
 8010462:	f7ff fea5 	bl	80101b0 <put_byte>
        number_of_byte++;
 8010466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010468:	3301      	adds	r3, #1
 801046a:	65bb      	str	r3, [r7, #88]	; 0x58
    while (size-- > 0)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	1e5a      	subs	r2, r3, #1
 8010470:	607a      	str	r2, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	dcf4      	bgt.n	8010460 <ee_number+0x218>
    }

    return number_of_byte;
 8010476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8010478:	4618      	mov	r0, r3
 801047a:	3768      	adds	r7, #104	; 0x68
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	2000013c 	.word	0x2000013c
 8010484:	20000140 	.word	0x20000140

08010488 <app_debug_print_raw>:

void app_debug_print_raw(const char *fmt, ...)
{
 8010488:	b40f      	push	{r0, r1, r2, r3}
 801048a:	b580      	push	{r7, lr}
 801048c:	b08e      	sub	sp, #56	; 0x38
 801048e:	af02      	add	r7, sp, #8
    if (m_lock_cb)
 8010490:	4baf      	ldr	r3, [pc, #700]	; (8010750 <app_debug_print_raw+0x2c8>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d005      	beq.n	80104a4 <app_debug_print_raw+0x1c>
    {
        m_lock_cb(true, 0xFFFFFFFF);
 8010498:	4bad      	ldr	r3, [pc, #692]	; (8010750 <app_debug_print_raw+0x2c8>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f04f 31ff 	mov.w	r1, #4294967295
 80104a0:	2001      	movs	r0, #1
 80104a2:	4798      	blx	r3
    int flags; // Flags to number()

    int field_width; // Width of output field
    int precision;   // Min. # of digits for integers; max number of chars for from string
    int qualifier;   // 'h', 'l', or 'L' for integer fields
    uint32_t nb_of_bytes = 0;
 80104a4:	2300      	movs	r3, #0
 80104a6:	60fb      	str	r3, [r7, #12]
    va_list args;
    va_start(args, fmt);
 80104a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80104ac:	607b      	str	r3, [r7, #4]

    for (; *fmt; fmt++)
 80104ae:	e217      	b.n	80108e0 <app_debug_print_raw+0x458>
    {
        if (*fmt != '%')
 80104b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	2b25      	cmp	r3, #37	; 0x25
 80104b6:	d008      	beq.n	80104ca <app_debug_print_raw+0x42>
        {
            nb_of_bytes++;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	3301      	adds	r3, #1
 80104bc:	60fb      	str	r3, [r7, #12]
            put_byte(*fmt);
 80104be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7ff fe74 	bl	80101b0 <put_byte>
            continue;
 80104c8:	e207      	b.n	80108da <app_debug_print_raw+0x452>
        }

        // Process flags
        flags = 0;
 80104ca:	2300      	movs	r3, #0
 80104cc:	61fb      	str	r3, [r7, #28]
    repeat:
        fmt++; // This also skips first '%'
 80104ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d0:	3301      	adds	r3, #1
 80104d2:	63bb      	str	r3, [r7, #56]	; 0x38
        switch (*fmt)
 80104d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	3b20      	subs	r3, #32
 80104da:	2b10      	cmp	r3, #16
 80104dc:	d83d      	bhi.n	801055a <app_debug_print_raw+0xd2>
 80104de:	a201      	add	r2, pc, #4	; (adr r2, 80104e4 <app_debug_print_raw+0x5c>)
 80104e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104e4:	0801053d 	.word	0x0801053d
 80104e8:	0801055b 	.word	0x0801055b
 80104ec:	0801055b 	.word	0x0801055b
 80104f0:	08010547 	.word	0x08010547
 80104f4:	0801055b 	.word	0x0801055b
 80104f8:	0801055b 	.word	0x0801055b
 80104fc:	0801055b 	.word	0x0801055b
 8010500:	0801055b 	.word	0x0801055b
 8010504:	0801055b 	.word	0x0801055b
 8010508:	0801055b 	.word	0x0801055b
 801050c:	0801055b 	.word	0x0801055b
 8010510:	08010533 	.word	0x08010533
 8010514:	0801055b 	.word	0x0801055b
 8010518:	08010529 	.word	0x08010529
 801051c:	0801055b 	.word	0x0801055b
 8010520:	0801055b 	.word	0x0801055b
 8010524:	08010551 	.word	0x08010551
        {
        case '-':
            flags |= LEFT;
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	f043 0310 	orr.w	r3, r3, #16
 801052e:	61fb      	str	r3, [r7, #28]
            goto repeat;
 8010530:	e7cd      	b.n	80104ce <app_debug_print_raw+0x46>
        case '+':
            flags |= PLUS;
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	f043 0304 	orr.w	r3, r3, #4
 8010538:	61fb      	str	r3, [r7, #28]
            goto repeat;
 801053a:	e7c8      	b.n	80104ce <app_debug_print_raw+0x46>
        case ' ':
            flags |= SPACE;
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	f043 0308 	orr.w	r3, r3, #8
 8010542:	61fb      	str	r3, [r7, #28]
            goto repeat;
 8010544:	e7c3      	b.n	80104ce <app_debug_print_raw+0x46>
        case '#':
            flags |= HEX_PREP;
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	f043 0320 	orr.w	r3, r3, #32
 801054c:	61fb      	str	r3, [r7, #28]
            goto repeat;
 801054e:	e7be      	b.n	80104ce <app_debug_print_raw+0x46>
        case '0':
            flags |= ZEROPAD;
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	f043 0301 	orr.w	r3, r3, #1
 8010556:	61fb      	str	r3, [r7, #28]
            goto repeat;
 8010558:	e7b9      	b.n	80104ce <app_debug_print_raw+0x46>
        }

        // Get field width
        field_width = -1;
 801055a:	f04f 33ff 	mov.w	r3, #4294967295
 801055e:	61bb      	str	r3, [r7, #24]
        if (is_digit(*fmt))
 8010560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	2b2f      	cmp	r3, #47	; 0x2f
 8010566:	d909      	bls.n	801057c <app_debug_print_raw+0xf4>
 8010568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	2b39      	cmp	r3, #57	; 0x39
 801056e:	d805      	bhi.n	801057c <app_debug_print_raw+0xf4>
            field_width = ee_skip_atoi(&fmt);
 8010570:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010574:	f7ff fe40 	bl	80101f8 <ee_skip_atoi>
 8010578:	61b8      	str	r0, [r7, #24]
 801057a:	e015      	b.n	80105a8 <app_debug_print_raw+0x120>
        else if (*fmt == '*')
 801057c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	2b2a      	cmp	r3, #42	; 0x2a
 8010582:	d111      	bne.n	80105a8 <app_debug_print_raw+0x120>
        {
            fmt++;
 8010584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010586:	3301      	adds	r3, #1
 8010588:	63bb      	str	r3, [r7, #56]	; 0x38
            field_width = va_arg(args, int);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	1d1a      	adds	r2, r3, #4
 801058e:	607a      	str	r2, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	61bb      	str	r3, [r7, #24]
            if (field_width < 0)
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	2b00      	cmp	r3, #0
 8010598:	da06      	bge.n	80105a8 <app_debug_print_raw+0x120>
            {
                field_width = -field_width;
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	425b      	negs	r3, r3
 801059e:	61bb      	str	r3, [r7, #24]
                flags |= LEFT;
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	f043 0310 	orr.w	r3, r3, #16
 80105a6:	61fb      	str	r3, [r7, #28]
            }
        }

        // Get the precision
        precision = -1;
 80105a8:	f04f 33ff 	mov.w	r3, #4294967295
 80105ac:	617b      	str	r3, [r7, #20]
        if (*fmt == '.')
 80105ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	2b2e      	cmp	r3, #46	; 0x2e
 80105b4:	d121      	bne.n	80105fa <app_debug_print_raw+0x172>
        {
            ++fmt;
 80105b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b8:	3301      	adds	r3, #1
 80105ba:	63bb      	str	r3, [r7, #56]	; 0x38
            if (is_digit(*fmt))
 80105bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2b2f      	cmp	r3, #47	; 0x2f
 80105c2:	d909      	bls.n	80105d8 <app_debug_print_raw+0x150>
 80105c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	2b39      	cmp	r3, #57	; 0x39
 80105ca:	d805      	bhi.n	80105d8 <app_debug_print_raw+0x150>
                precision = ee_skip_atoi(&fmt);
 80105cc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80105d0:	f7ff fe12 	bl	80101f8 <ee_skip_atoi>
 80105d4:	6178      	str	r0, [r7, #20]
 80105d6:	e00b      	b.n	80105f0 <app_debug_print_raw+0x168>
            else if (*fmt == '*')
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b2a      	cmp	r3, #42	; 0x2a
 80105de:	d107      	bne.n	80105f0 <app_debug_print_raw+0x168>
            {
                ++fmt;
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	3301      	adds	r3, #1
 80105e4:	63bb      	str	r3, [r7, #56]	; 0x38
                precision = va_arg(args, int);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	1d1a      	adds	r2, r3, #4
 80105ea:	607a      	str	r2, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	617b      	str	r3, [r7, #20]
            }
            if (precision < 0)
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	da01      	bge.n	80105fa <app_debug_print_raw+0x172>
                precision = 0;
 80105f6:	2300      	movs	r3, #0
 80105f8:	617b      	str	r3, [r7, #20]
        }

        // Get the conversion qualifier
        qualifier = -1;
 80105fa:	f04f 33ff 	mov.w	r3, #4294967295
 80105fe:	613b      	str	r3, [r7, #16]
        if (*fmt == 'l' || *fmt == 'L')
 8010600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	2b6c      	cmp	r3, #108	; 0x6c
 8010606:	d003      	beq.n	8010610 <app_debug_print_raw+0x188>
 8010608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	2b4c      	cmp	r3, #76	; 0x4c
 801060e:	d105      	bne.n	801061c <app_debug_print_raw+0x194>
        {
            qualifier = *fmt;
 8010610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	613b      	str	r3, [r7, #16]
            fmt++;
 8010616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010618:	3301      	adds	r3, #1
 801061a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        // Default base
        base = 10;
 801061c:	230a      	movs	r3, #10
 801061e:	62bb      	str	r3, [r7, #40]	; 0x28

        switch (*fmt)
 8010620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	3b41      	subs	r3, #65	; 0x41
 8010626:	2b37      	cmp	r3, #55	; 0x37
 8010628:	f200 8115 	bhi.w	8010856 <app_debug_print_raw+0x3ce>
 801062c:	a201      	add	r2, pc, #4	; (adr r2, 8010634 <app_debug_print_raw+0x1ac>)
 801062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010632:	bf00      	nop
 8010634:	08010831 	.word	0x08010831
 8010638:	08010857 	.word	0x08010857
 801063c:	08010857 	.word	0x08010857
 8010640:	08010857 	.word	0x08010857
 8010644:	08010857 	.word	0x08010857
 8010648:	08010857 	.word	0x08010857
 801064c:	08010857 	.word	0x08010857
 8010650:	08010857 	.word	0x08010857
 8010654:	08010857 	.word	0x08010857
 8010658:	08010857 	.word	0x08010857
 801065c:	08010857 	.word	0x08010857
 8010660:	08010857 	.word	0x08010857
 8010664:	08010857 	.word	0x08010857
 8010668:	08010857 	.word	0x08010857
 801066c:	08010857 	.word	0x08010857
 8010670:	08010857 	.word	0x08010857
 8010674:	08010857 	.word	0x08010857
 8010678:	08010857 	.word	0x08010857
 801067c:	08010857 	.word	0x08010857
 8010680:	08010857 	.word	0x08010857
 8010684:	08010857 	.word	0x08010857
 8010688:	08010857 	.word	0x08010857
 801068c:	08010857 	.word	0x08010857
 8010690:	0801083f 	.word	0x0801083f
 8010694:	08010857 	.word	0x08010857
 8010698:	08010857 	.word	0x08010857
 801069c:	08010857 	.word	0x08010857
 80106a0:	08010857 	.word	0x08010857
 80106a4:	08010857 	.word	0x08010857
 80106a8:	08010857 	.word	0x08010857
 80106ac:	08010857 	.word	0x08010857
 80106b0:	08010857 	.word	0x08010857
 80106b4:	08010857 	.word	0x08010857
 80106b8:	08010857 	.word	0x08010857
 80106bc:	08010715 	.word	0x08010715
 80106c0:	0801084d 	.word	0x0801084d
 80106c4:	08010857 	.word	0x08010857
 80106c8:	08010857 	.word	0x08010857
 80106cc:	08010857 	.word	0x08010857
 80106d0:	08010857 	.word	0x08010857
 80106d4:	0801084d 	.word	0x0801084d
 80106d8:	08010857 	.word	0x08010857
 80106dc:	08010857 	.word	0x08010857
 80106e0:	08010857 	.word	0x08010857
 80106e4:	08010857 	.word	0x08010857
 80106e8:	08010857 	.word	0x08010857
 80106ec:	08010839 	.word	0x08010839
 80106f0:	080107f9 	.word	0x080107f9
 80106f4:	08010857 	.word	0x08010857
 80106f8:	08010857 	.word	0x08010857
 80106fc:	0801076f 	.word	0x0801076f
 8010700:	08010857 	.word	0x08010857
 8010704:	0801088d 	.word	0x0801088d
 8010708:	08010857 	.word	0x08010857
 801070c:	08010857 	.word	0x08010857
 8010710:	08010847 	.word	0x08010847
        {
        case 'c':
            if (!(flags & LEFT))
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	f003 0310 	and.w	r3, r3, #16
 801071a:	2b00      	cmp	r3, #0
 801071c:	d10c      	bne.n	8010738 <app_debug_print_raw+0x2b0>
            {
                while (--field_width > 0)
 801071e:	e005      	b.n	801072c <app_debug_print_raw+0x2a4>
                {
                    put_byte(' ');
 8010720:	2020      	movs	r0, #32
 8010722:	f7ff fd45 	bl	80101b0 <put_byte>
                    nb_of_bytes++;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	3301      	adds	r3, #1
 801072a:	60fb      	str	r3, [r7, #12]
                while (--field_width > 0)
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	3b01      	subs	r3, #1
 8010730:	61bb      	str	r3, [r7, #24]
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	2b00      	cmp	r3, #0
 8010736:	dcf3      	bgt.n	8010720 <app_debug_print_raw+0x298>
                };
            }

            put_byte((unsigned char)va_arg(args, int));
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	1d1a      	adds	r2, r3, #4
 801073c:	607a      	str	r2, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	b2db      	uxtb	r3, r3
 8010742:	4618      	mov	r0, r3
 8010744:	f7ff fd34 	bl	80101b0 <put_byte>
            nb_of_bytes++;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	3301      	adds	r3, #1
 801074c:	60fb      	str	r3, [r7, #12]

            while (--field_width > 0)
 801074e:	e007      	b.n	8010760 <app_debug_print_raw+0x2d8>
 8010750:	20008ea8 	.word	0x20008ea8
            {
                put_byte(' ');
 8010754:	2020      	movs	r0, #32
 8010756:	f7ff fd2b 	bl	80101b0 <put_byte>
                nb_of_bytes++;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	3301      	adds	r3, #1
 801075e:	60fb      	str	r3, [r7, #12]
            while (--field_width > 0)
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	3b01      	subs	r3, #1
 8010764:	61bb      	str	r3, [r7, #24]
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	2b00      	cmp	r3, #0
 801076a:	dcf3      	bgt.n	8010754 <app_debug_print_raw+0x2cc>
            };
            continue;
 801076c:	e0b5      	b.n	80108da <app_debug_print_raw+0x452>

        case 's':
            s = va_arg(args, char *);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	1d1a      	adds	r2, r3, #4
 8010772:	607a      	str	r2, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	623b      	str	r3, [r7, #32]
            if (!s)
 8010778:	6a3b      	ldr	r3, [r7, #32]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d101      	bne.n	8010782 <app_debug_print_raw+0x2fa>
            {
                s = "<NULL>";
 801077e:	4b63      	ldr	r3, [pc, #396]	; (801090c <app_debug_print_raw+0x484>)
 8010780:	623b      	str	r3, [r7, #32]
            }

            len = __strnlen(s, precision);
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	4619      	mov	r1, r3
 8010786:	6a38      	ldr	r0, [r7, #32]
 8010788:	f7ff fcc8 	bl	801011c <__strnlen>
 801078c:	4603      	mov	r3, r0
 801078e:	60bb      	str	r3, [r7, #8]
            if (!(flags & LEFT))
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	f003 0310 	and.w	r3, r3, #16
 8010796:	2b00      	cmp	r3, #0
 8010798:	d10c      	bne.n	80107b4 <app_debug_print_raw+0x32c>
            {
                while (len < field_width--)
 801079a:	e005      	b.n	80107a8 <app_debug_print_raw+0x320>
                {
                    put_byte(' ');
 801079c:	2020      	movs	r0, #32
 801079e:	f7ff fd07 	bl	80101b0 <put_byte>
                    nb_of_bytes++;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	3301      	adds	r3, #1
 80107a6:	60fb      	str	r3, [r7, #12]
                while (len < field_width--)
 80107a8:	69bb      	ldr	r3, [r7, #24]
 80107aa:	1e5a      	subs	r2, r3, #1
 80107ac:	61ba      	str	r2, [r7, #24]
 80107ae:	68ba      	ldr	r2, [r7, #8]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	dbf3      	blt.n	801079c <app_debug_print_raw+0x314>
                };
            }
            for (i = 0; i < len; ++i)
 80107b4:	2300      	movs	r3, #0
 80107b6:	627b      	str	r3, [r7, #36]	; 0x24
 80107b8:	e00c      	b.n	80107d4 <app_debug_print_raw+0x34c>
            {
                put_byte(*s++);
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	1c5a      	adds	r2, r3, #1
 80107be:	623a      	str	r2, [r7, #32]
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ff fcf4 	bl	80101b0 <put_byte>
                nb_of_bytes++;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	3301      	adds	r3, #1
 80107cc:	60fb      	str	r3, [r7, #12]
            for (i = 0; i < len; ++i)
 80107ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d0:	3301      	adds	r3, #1
 80107d2:	627b      	str	r3, [r7, #36]	; 0x24
 80107d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	429a      	cmp	r2, r3
 80107da:	dbee      	blt.n	80107ba <app_debug_print_raw+0x332>
            };

            while (len < field_width--)
 80107dc:	e005      	b.n	80107ea <app_debug_print_raw+0x362>
            {
                put_byte(' ');
 80107de:	2020      	movs	r0, #32
 80107e0:	f7ff fce6 	bl	80101b0 <put_byte>
                nb_of_bytes++;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	3301      	adds	r3, #1
 80107e8:	60fb      	str	r3, [r7, #12]
            while (len < field_width--)
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	1e5a      	subs	r2, r3, #1
 80107ee:	61ba      	str	r2, [r7, #24]
 80107f0:	68ba      	ldr	r2, [r7, #8]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	dbf3      	blt.n	80107de <app_debug_print_raw+0x356>
            };
            continue;
 80107f6:	e070      	b.n	80108da <app_debug_print_raw+0x452>

        case 'p':
            if (field_width == -1)
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107fe:	d105      	bne.n	801080c <app_debug_print_raw+0x384>
            {
                field_width = 2 * sizeof(void *);
 8010800:	2308      	movs	r3, #8
 8010802:	61bb      	str	r3, [r7, #24]
                flags |= ZEROPAD;
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	f043 0301 	orr.w	r3, r3, #1
 801080a:	61fb      	str	r3, [r7, #28]
            }
            nb_of_bytes += ee_number((unsigned long)va_arg(args, void *), 16, field_width, precision, flags);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	1d1a      	adds	r2, r3, #4
 8010810:	607a      	str	r2, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4618      	mov	r0, r3
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	69ba      	ldr	r2, [r7, #24]
 801081e:	2110      	movs	r1, #16
 8010820:	f7ff fd12 	bl	8010248 <ee_number>
 8010824:	4603      	mov	r3, r0
 8010826:	461a      	mov	r2, r3
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	4413      	add	r3, r2
 801082c:	60fb      	str	r3, [r7, #12]
            continue;
 801082e:	e054      	b.n	80108da <app_debug_print_raw+0x452>

        case 'A':
            flags |= UPPERCASE;
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010836:	61fb      	str	r3, [r7, #28]
        //         str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
        //     continue;

        // Integer number formats - set up the flags and "break"
        case 'o':
            base = 8;
 8010838:	2308      	movs	r3, #8
 801083a:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 801083c:	e027      	b.n	801088e <app_debug_print_raw+0x406>

        case 'X':
            flags |= UPPERCASE;
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010844:	61fb      	str	r3, [r7, #28]

        case 'x':
            base = 16;
 8010846:	2310      	movs	r3, #16
 8010848:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 801084a:	e020      	b.n	801088e <app_debug_print_raw+0x406>

        case 'd':
        case 'i':
            flags |= SIGN;
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	f043 0302 	orr.w	r3, r3, #2
 8010852:	61fb      	str	r3, [r7, #28]

        case 'u':
            break;
 8010854:	e01a      	b.n	801088c <app_debug_print_raw+0x404>
            continue;

#endif

        default:
            if (*fmt != '%')
 8010856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	2b25      	cmp	r3, #37	; 0x25
 801085c:	d005      	beq.n	801086a <app_debug_print_raw+0x3e2>
            {
                put_byte('%');
 801085e:	2025      	movs	r0, #37	; 0x25
 8010860:	f7ff fca6 	bl	80101b0 <put_byte>
                nb_of_bytes++;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	3301      	adds	r3, #1
 8010868:	60fb      	str	r3, [r7, #12]
            }
            if (*fmt)
 801086a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d008      	beq.n	8010884 <app_debug_print_raw+0x3fc>
            {
                put_byte(*fmt);
 8010872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	4618      	mov	r0, r3
 8010878:	f7ff fc9a 	bl	80101b0 <put_byte>
                nb_of_bytes++;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	3301      	adds	r3, #1
 8010880:	60fb      	str	r3, [r7, #12]
            }
            else
            {
                --fmt;
            }
            continue;
 8010882:	e02a      	b.n	80108da <app_debug_print_raw+0x452>
                --fmt;
 8010884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010886:	3b01      	subs	r3, #1
 8010888:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
 801088a:	e026      	b.n	80108da <app_debug_print_raw+0x452>
            break;
 801088c:	bf00      	nop
        }

        if (qualifier == 'l')
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	2b6c      	cmp	r3, #108	; 0x6c
 8010892:	d105      	bne.n	80108a0 <app_debug_print_raw+0x418>
            num = va_arg(args, unsigned long);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	1d1a      	adds	r2, r3, #4
 8010898:	607a      	str	r2, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801089e:	e00f      	b.n	80108c0 <app_debug_print_raw+0x438>
        else if (flags & SIGN)
 80108a0:	69fb      	ldr	r3, [r7, #28]
 80108a2:	f003 0302 	and.w	r3, r3, #2
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d005      	beq.n	80108b6 <app_debug_print_raw+0x42e>
            num = va_arg(args, int);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	1d1a      	adds	r2, r3, #4
 80108ae:	607a      	str	r2, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108b4:	e004      	b.n	80108c0 <app_debug_print_raw+0x438>
        else
            num = va_arg(args, unsigned int);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	1d1a      	adds	r2, r3, #4
 80108ba:	607a      	str	r2, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	62fb      	str	r3, [r7, #44]	; 0x2c

        nb_of_bytes += ee_number(num, base, field_width, precision, flags);
 80108c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	9300      	str	r3, [sp, #0]
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	69ba      	ldr	r2, [r7, #24]
 80108ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108cc:	f7ff fcbc 	bl	8010248 <ee_number>
 80108d0:	4603      	mov	r3, r0
 80108d2:	461a      	mov	r2, r3
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	4413      	add	r3, r2
 80108d8:	60fb      	str	r3, [r7, #12]
    for (; *fmt; fmt++)
 80108da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108dc:	3301      	adds	r3, #1
 80108de:	63bb      	str	r3, [r7, #56]	; 0x38
 80108e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f47f ade3 	bne.w	80104b0 <app_debug_print_raw+0x28>
    }
    va_end(args);


    if (m_lock_cb)
 80108ea:	4b09      	ldr	r3, [pc, #36]	; (8010910 <app_debug_print_raw+0x488>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d004      	beq.n	80108fc <app_debug_print_raw+0x474>
    {
        m_lock_cb(false, 0);
 80108f2:	4b07      	ldr	r3, [pc, #28]	; (8010910 <app_debug_print_raw+0x488>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2100      	movs	r1, #0
 80108f8:	2000      	movs	r0, #0
 80108fa:	4798      	blx	r3
    }
    // return nb_of_bytes;
}
 80108fc:	bf00      	nop
 80108fe:	3730      	adds	r7, #48	; 0x30
 8010900:	46bd      	mov	sp, r7
 8010902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010906:	b004      	add	sp, #16
 8010908:	4770      	bx	lr
 801090a:	bf00      	nop
 801090c:	08019bb4 	.word	0x08019bb4
 8010910:	20008ea8 	.word	0x20008ea8

08010914 <app_debug_register_callback_print>:
        m_lock_cb(false, 0);
    }
}

void app_debug_register_callback_print(app_debug_output_cb_t callback)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
    if (m_lock_cb)
 801091c:	4b1e      	ldr	r3, [pc, #120]	; (8010998 <app_debug_register_callback_print+0x84>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d005      	beq.n	8010930 <app_debug_register_callback_print+0x1c>
    {
        m_lock_cb(true, 0xFFFFFFFF);
 8010924:	4b1c      	ldr	r3, [pc, #112]	; (8010998 <app_debug_register_callback_print+0x84>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f04f 31ff 	mov.w	r1, #4294967295
 801092c:	2001      	movs	r0, #1
 801092e:	4798      	blx	r3
    }
    uint8_t callback_exist = 0; // Check for existion function pointer in function pointer arry
 8010930:	2300      	movs	r3, #0
 8010932:	73fb      	strb	r3, [r7, #15]
    if (callback)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d021      	beq.n	801097e <app_debug_register_callback_print+0x6a>
    {
        for (uint8_t func_count = 0; func_count < APP_DEBUG_NUMBER_OF_DEBUG_PORT; func_count++)
 801093a:	2300      	movs	r3, #0
 801093c:	73bb      	strb	r3, [r7, #14]
 801093e:	e00b      	b.n	8010958 <app_debug_register_callback_print+0x44>
        {
            if (callback == m_write_cb[func_count])
 8010940:	7bbb      	ldrb	r3, [r7, #14]
 8010942:	4a16      	ldr	r2, [pc, #88]	; (801099c <app_debug_register_callback_print+0x88>)
 8010944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	429a      	cmp	r2, r3
 801094c:	d101      	bne.n	8010952 <app_debug_register_callback_print+0x3e>
            {
                // Callback already existed in array
                callback_exist = 1;
 801094e:	2301      	movs	r3, #1
 8010950:	73fb      	strb	r3, [r7, #15]
        for (uint8_t func_count = 0; func_count < APP_DEBUG_NUMBER_OF_DEBUG_PORT; func_count++)
 8010952:	7bbb      	ldrb	r3, [r7, #14]
 8010954:	3301      	adds	r3, #1
 8010956:	73bb      	strb	r3, [r7, #14]
 8010958:	7bbb      	ldrb	r3, [r7, #14]
 801095a:	2b03      	cmp	r3, #3
 801095c:	d9f0      	bls.n	8010940 <app_debug_register_callback_print+0x2c>
            }
        }

        if (!callback_exist)
 801095e:	7bfb      	ldrb	r3, [r7, #15]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d10c      	bne.n	801097e <app_debug_register_callback_print+0x6a>
        {
            m_write_cb[number_of_callback] = callback;
 8010964:	4b0e      	ldr	r3, [pc, #56]	; (80109a0 <app_debug_register_callback_print+0x8c>)
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	4619      	mov	r1, r3
 801096a:	4a0c      	ldr	r2, [pc, #48]	; (801099c <app_debug_register_callback_print+0x88>)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            number_of_callback++;
 8010972:	4b0b      	ldr	r3, [pc, #44]	; (80109a0 <app_debug_register_callback_print+0x8c>)
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	3301      	adds	r3, #1
 8010978:	b2da      	uxtb	r2, r3
 801097a:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <app_debug_register_callback_print+0x8c>)
 801097c:	701a      	strb	r2, [r3, #0]
        }
    }
    if (m_lock_cb)
 801097e:	4b06      	ldr	r3, [pc, #24]	; (8010998 <app_debug_register_callback_print+0x84>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d004      	beq.n	8010990 <app_debug_register_callback_print+0x7c>
    {
        m_lock_cb(false, 0);
 8010986:	4b04      	ldr	r3, [pc, #16]	; (8010998 <app_debug_register_callback_print+0x84>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2100      	movs	r1, #0
 801098c:	2000      	movs	r0, #0
 801098e:	4798      	blx	r3
    }
}
 8010990:	bf00      	nop
 8010992:	3710      	adds	r7, #16
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	20008ea8 	.word	0x20008ea8
 801099c:	20008e90 	.word	0x20008e90
 80109a0:	20008ea0 	.word	0x20008ea0

080109a4 <app_debug_unregister_callback_print>:

void app_debug_unregister_callback_print(app_debug_output_cb_t callback)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
    if (m_lock_cb)
 80109ac:	4b16      	ldr	r3, [pc, #88]	; (8010a08 <app_debug_unregister_callback_print+0x64>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d005      	beq.n	80109c0 <app_debug_unregister_callback_print+0x1c>
    {
        m_lock_cb(true, 0xFFFFFFFF);
 80109b4:	4b14      	ldr	r3, [pc, #80]	; (8010a08 <app_debug_unregister_callback_print+0x64>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f04f 31ff 	mov.w	r1, #4294967295
 80109bc:	2001      	movs	r0, #1
 80109be:	4798      	blx	r3
    }
    for (uint8_t func_count = 0; func_count < APP_DEBUG_NUMBER_OF_DEBUG_PORT; func_count++)
 80109c0:	2300      	movs	r3, #0
 80109c2:	73fb      	strb	r3, [r7, #15]
 80109c4:	e00f      	b.n	80109e6 <app_debug_unregister_callback_print+0x42>
    {
        if (callback == m_write_cb[func_count])
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
 80109c8:	4a10      	ldr	r2, [pc, #64]	; (8010a0c <app_debug_unregister_callback_print+0x68>)
 80109ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d105      	bne.n	80109e0 <app_debug_unregister_callback_print+0x3c>
        {
            number_of_callback--;
 80109d4:	4b0e      	ldr	r3, [pc, #56]	; (8010a10 <app_debug_unregister_callback_print+0x6c>)
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	3b01      	subs	r3, #1
 80109da:	b2da      	uxtb	r2, r3
 80109dc:	4b0c      	ldr	r3, [pc, #48]	; (8010a10 <app_debug_unregister_callback_print+0x6c>)
 80109de:	701a      	strb	r2, [r3, #0]
    for (uint8_t func_count = 0; func_count < APP_DEBUG_NUMBER_OF_DEBUG_PORT; func_count++)
 80109e0:	7bfb      	ldrb	r3, [r7, #15]
 80109e2:	3301      	adds	r3, #1
 80109e4:	73fb      	strb	r3, [r7, #15]
 80109e6:	7bfb      	ldrb	r3, [r7, #15]
 80109e8:	2b03      	cmp	r3, #3
 80109ea:	d9ec      	bls.n	80109c6 <app_debug_unregister_callback_print+0x22>
        }
    }
    if (m_lock_cb)
 80109ec:	4b06      	ldr	r3, [pc, #24]	; (8010a08 <app_debug_unregister_callback_print+0x64>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d004      	beq.n	80109fe <app_debug_unregister_callback_print+0x5a>
    {
        m_lock_cb(false, 0);
 80109f4:	4b04      	ldr	r3, [pc, #16]	; (8010a08 <app_debug_unregister_callback_print+0x64>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2100      	movs	r1, #0
 80109fa:	2000      	movs	r0, #0
 80109fc:	4798      	blx	r3
    }
}
 80109fe:	bf00      	nop
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	20008ea8 	.word	0x20008ea8
 8010a0c:	20008e90 	.word	0x20008e90
 8010a10:	20008ea0 	.word	0x20008ea0

08010a14 <tud_msc_inquiry_cb>:


// Invoked when received SCSI_CMD_INQUIRY
// Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
{
 8010a14:	b590      	push	{r4, r7, lr}
 8010a16:	b08d      	sub	sp, #52	; 0x34
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60b9      	str	r1, [r7, #8]
 8010a1c:	607a      	str	r2, [r7, #4]
 8010a1e:	603b      	str	r3, [r7, #0]
 8010a20:	4603      	mov	r3, r0
 8010a22:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  const char vid[] = "BSAFE";
 8010a24:	4a1b      	ldr	r2, [pc, #108]	; (8010a94 <tud_msc_inquiry_cb+0x80>)
 8010a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a2e:	6018      	str	r0, [r3, #0]
 8010a30:	3304      	adds	r3, #4
 8010a32:	8019      	strh	r1, [r3, #0]
  const char pid[] = "Mass Storage";
 8010a34:	4b18      	ldr	r3, [pc, #96]	; (8010a98 <tud_msc_inquiry_cb+0x84>)
 8010a36:	f107 0418 	add.w	r4, r7, #24
 8010a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a3c:	c407      	stmia	r4!, {r0, r1, r2}
 8010a3e:	7023      	strb	r3, [r4, #0]
  const char rev[] = "1.0";
 8010a40:	4b16      	ldr	r3, [pc, #88]	; (8010a9c <tud_msc_inquiry_cb+0x88>)
 8010a42:	617b      	str	r3, [r7, #20]

  memcpy(vendor_id  , vid, strlen(vid));
 8010a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7ef fbcb 	bl	80001e4 <strlen>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a54:	4619      	mov	r1, r3
 8010a56:	68b8      	ldr	r0, [r7, #8]
 8010a58:	f007 f855 	bl	8017b06 <memcpy>
  memcpy(product_id , pid, strlen(pid));
 8010a5c:	f107 0318 	add.w	r3, r7, #24
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7ef fbbf 	bl	80001e4 <strlen>
 8010a66:	4602      	mov	r2, r0
 8010a68:	f107 0318 	add.w	r3, r7, #24
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f007 f849 	bl	8017b06 <memcpy>
  memcpy(product_rev, rev, strlen(rev));
 8010a74:	f107 0314 	add.w	r3, r7, #20
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7ef fbb3 	bl	80001e4 <strlen>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	f107 0314 	add.w	r3, r7, #20
 8010a84:	4619      	mov	r1, r3
 8010a86:	6838      	ldr	r0, [r7, #0]
 8010a88:	f007 f83d 	bl	8017b06 <memcpy>
}
 8010a8c:	bf00      	nop
 8010a8e:	3734      	adds	r7, #52	; 0x34
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd90      	pop	{r4, r7, pc}
 8010a94:	08019bf8 	.word	0x08019bf8
 8010a98:	08019c00 	.word	0x08019c00
 8010a9c:	00302e31 	.word	0x00302e31

08010aa0 <tud_msc_test_unit_ready_cb>:


// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	71fb      	strb	r3, [r7, #7]
  (void) lun;

  return true; // RAM disk is always ready
 8010aaa:	2301      	movs	r3, #1
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	370c      	adds	r7, #12
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <tud_msc_capacity_cb>:
// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
uint32_t m_disk_block_size = 4096;

void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	4603      	mov	r3, r0
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	73fb      	strb	r3, [r7, #15]
  (void) lun;
  if (lun > 0)
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d008      	beq.n	8010ade <tud_msc_capacity_cb+0x26>
  {
	  DEBUG_ERROR("invalid lun number %u", lun);
 8010acc:	f7ff fb60 	bl	8010190 <app_debug_get_ms>
 8010ad0:	4601      	mov	r1, r0
 8010ad2:	7bfb      	ldrb	r3, [r7, #15]
 8010ad4:	4a14      	ldr	r2, [pc, #80]	; (8010b28 <tud_msc_capacity_cb+0x70>)
 8010ad6:	4815      	ldr	r0, [pc, #84]	; (8010b2c <tud_msc_capacity_cb+0x74>)
 8010ad8:	f7ff fcd6 	bl	8010488 <app_debug_print_raw>
 8010adc:	e020      	b.n	8010b20 <tud_msc_capacity_cb+0x68>

//  *block_count = DISK_BLOCK_NUM; //m_spi_flash.info.size/DISK_BLOCK_SIZE;
//  *block_size  = DISK_BLOCK_SIZE;
//  DEBUG_VERBOSE("Block count %u, size %u\r\n", *block_count, *block_size);
	uint32_t tmp;
	disk_ioctl(0, GET_SECTOR_COUNT, &tmp);
 8010ade:	f107 0314 	add.w	r3, r7, #20
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	2101      	movs	r1, #1
 8010ae6:	2000      	movs	r0, #0
 8010ae8:	f7f8 f8e6 	bl	8008cb8 <disk_ioctl>
	*block_count = tmp;
 8010aec:	697a      	ldr	r2, [r7, #20]
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	601a      	str	r2, [r3, #0]
	disk_ioctl(0, GET_SECTOR_SIZE, &tmp);
 8010af2:	f107 0314 	add.w	r3, r7, #20
 8010af6:	461a      	mov	r2, r3
 8010af8:	2102      	movs	r1, #2
 8010afa:	2000      	movs	r0, #0
 8010afc:	f7f8 f8dc 	bl	8008cb8 <disk_ioctl>
	*block_size = tmp;
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	b29a      	uxth	r2, r3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	801a      	strh	r2, [r3, #0]
//	m_disk_block_size = *block_size;
	if (!m_disk_cache.wr_buffer)
 8010b08:	4b09      	ldr	r3, [pc, #36]	; (8010b30 <tud_msc_capacity_cb+0x78>)
 8010b0a:	689b      	ldr	r3, [r3, #8]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d107      	bne.n	8010b20 <tud_msc_capacity_cb+0x68>
	{
		m_disk_cache.wr_buffer = pvPortMalloc(m_disk_block_size);
 8010b10:	4b08      	ldr	r3, [pc, #32]	; (8010b34 <tud_msc_capacity_cb+0x7c>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7fd f80f 	bl	800db38 <pvPortMalloc>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	4a04      	ldr	r2, [pc, #16]	; (8010b30 <tud_msc_capacity_cb+0x78>)
 8010b1e:	6093      	str	r3, [r2, #8]
	}
	DEBUG_VERBOSE("Disk has %u block, size of block %u\r\n", *block_count, m_disk_block_size);
}
 8010b20:	3718      	adds	r7, #24
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	08019c10 	.word	0x08019c10
 8010b2c:	08019c14 	.word	0x08019c14
 8010b30:	20000144 	.word	0x20000144
 8010b34:	20000150 	.word	0x20000150

08010b38 <tud_msc_start_stop_cb>:
// Invoked when received Start Stop Unit command
// - Start = 0 : stopped power mode, if load_eject = 1 : unload disk storage
// - Start = 1 : active mode, if load_eject = 1 : load disk storage

bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject)
{
 8010b38:	b490      	push	{r4, r7}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	4604      	mov	r4, r0
 8010b40:	4608      	mov	r0, r1
 8010b42:	4611      	mov	r1, r2
 8010b44:	461a      	mov	r2, r3
 8010b46:	4623      	mov	r3, r4
 8010b48:	71fb      	strb	r3, [r7, #7]
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	71bb      	strb	r3, [r7, #6]
 8010b4e:	460b      	mov	r3, r1
 8010b50:	717b      	strb	r3, [r7, #5]
 8010b52:	4613      	mov	r3, r2
 8010b54:	713b      	strb	r3, [r7, #4]
    {
      // unload disk storage
    }
  }

  return true;
 8010b56:	2301      	movs	r3, #1
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3708      	adds	r7, #8
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bc90      	pop	{r4, r7}
 8010b60:	4770      	bx	lr
	...

08010b64 <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b086      	sub	sp, #24
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60b9      	str	r1, [r7, #8]
 8010b6c:	607a      	str	r2, [r7, #4]
 8010b6e:	603b      	str	r3, [r7, #0]
 8010b70:	4603      	mov	r3, r0
 8010b72:	73fb      	strb	r3, [r7, #15]
	 if (lun != 0)
 8010b74:	7bfb      	ldrb	r3, [r7, #15]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d009      	beq.n	8010b8e <tud_msc_read10_cb+0x2a>
	 {
		DEBUG_ERROR("Invalid lun number %u", lun);
 8010b7a:	f7ff fb09 	bl	8010190 <app_debug_get_ms>
 8010b7e:	4601      	mov	r1, r0
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
 8010b82:	4a25      	ldr	r2, [pc, #148]	; (8010c18 <tud_msc_read10_cb+0xb4>)
 8010b84:	4825      	ldr	r0, [pc, #148]	; (8010c1c <tud_msc_read10_cb+0xb8>)
 8010b86:	f7ff fc7f 	bl	8010488 <app_debug_print_raw>
		return 0;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	e040      	b.n	8010c10 <tud_msc_read10_cb+0xac>
	}

	const uint32_t block_count = (bufsize + m_disk_block_size -1) / m_disk_block_size;
 8010b8e:	4b24      	ldr	r3, [pc, #144]	; (8010c20 <tud_msc_read10_cb+0xbc>)
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	6a3b      	ldr	r3, [r7, #32]
 8010b94:	4413      	add	r3, r2
 8010b96:	1e5a      	subs	r2, r3, #1
 8010b98:	4b21      	ldr	r3, [pc, #132]	; (8010c20 <tud_msc_read10_cb+0xbc>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ba0:	617b      	str	r3, [r7, #20]
	if (bufsize < m_disk_block_size)
 8010ba2:	4b1f      	ldr	r3, [pc, #124]	; (8010c20 <tud_msc_read10_cb+0xbc>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	6a3a      	ldr	r2, [r7, #32]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d226      	bcs.n	8010bfa <tud_msc_read10_cb+0x96>
	{
		if (m_disk_cache.wr_sector == -1
 8010bac:	4b1d      	ldr	r3, [pc, #116]	; (8010c24 <tud_msc_read10_cb+0xc0>)
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb4:	d009      	beq.n	8010bca <tud_msc_read10_cb+0x66>
			|| m_disk_cache.rd_sector == -1
 8010bb6:	4b1b      	ldr	r3, [pc, #108]	; (8010c24 <tud_msc_read10_cb+0xc0>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bbe:	d004      	beq.n	8010bca <tud_msc_read10_cb+0x66>
			|| lba != m_disk_cache.rd_sector)		// If invalid sector =>> read data from flash immediately
 8010bc0:	4b18      	ldr	r3, [pc, #96]	; (8010c24 <tud_msc_read10_cb+0xc0>)
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d00c      	beq.n	8010be4 <tud_msc_read10_cb+0x80>
		{
			DEBUG_VERBOSE("Read from flash\r\n");
			m_disk_cache.rd_sector = lba;
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	4a15      	ldr	r2, [pc, #84]	; (8010c24 <tud_msc_read10_cb+0xc0>)
 8010bce:	6013      	str	r3, [r2, #0]
			m_disk_cache.wr_sector = lba;
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	4a14      	ldr	r2, [pc, #80]	; (8010c24 <tud_msc_read10_cb+0xc0>)
 8010bd4:	6053      	str	r3, [r2, #4]
			disk_read(0, m_disk_cache.wr_buffer, lba, block_count);
 8010bd6:	4b13      	ldr	r3, [pc, #76]	; (8010c24 <tud_msc_read10_cb+0xc0>)
 8010bd8:	6899      	ldr	r1, [r3, #8]
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	68ba      	ldr	r2, [r7, #8]
 8010bde:	2000      	movs	r0, #0
 8010be0:	f7f8 f82a 	bl	8008c38 <disk_read>
		else
		{
			DEBUG_VERBOSE("Read from cache\r\n");
		}
//		disk_read(0, m_cache, lba, block_count);
		memcpy(buffer, m_disk_cache.wr_buffer+offset, bufsize);
 8010be4:	4b0f      	ldr	r3, [pc, #60]	; (8010c24 <tud_msc_read10_cb+0xc0>)
 8010be6:	689a      	ldr	r2, [r3, #8]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4413      	add	r3, r2
 8010bec:	6a3a      	ldr	r2, [r7, #32]
 8010bee:	4619      	mov	r1, r3
 8010bf0:	6838      	ldr	r0, [r7, #0]
 8010bf2:	f006 ff88 	bl	8017b06 <memcpy>
//		disk_read(0, buffer, lba, block_count);
		configASSERT(0);
	}
	DEBUG_VERBOSE("Disk read %u bytes, LBA=%u, offset %u, block = %u, size = %u\r\n", bufsize, lba, offset, block_count, m_disk_block_size);

	return bufsize;
 8010bf6:	6a3b      	ldr	r3, [r7, #32]
 8010bf8:	e00a      	b.n	8010c10 <tud_msc_read10_cb+0xac>
	__asm volatile
 8010bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfe:	f383 8811 	msr	BASEPRI, r3
 8010c02:	f3bf 8f6f 	isb	sy
 8010c06:	f3bf 8f4f 	dsb	sy
 8010c0a:	613b      	str	r3, [r7, #16]
}
 8010c0c:	bf00      	nop
		configASSERT(0);
 8010c0e:	e7fe      	b.n	8010c0e <tud_msc_read10_cb+0xaa>
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3718      	adds	r7, #24
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	08019c10 	.word	0x08019c10
 8010c1c:	08019c44 	.word	0x08019c44
 8010c20:	20000150 	.word	0x20000150
 8010c24:	20000144 	.word	0x20000144

08010c28 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b086      	sub	sp, #24
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60b9      	str	r1, [r7, #8]
 8010c30:	607a      	str	r2, [r7, #4]
 8010c32:	603b      	str	r3, [r7, #0]
 8010c34:	4603      	mov	r3, r0
 8010c36:	73fb      	strb	r3, [r7, #15]
	(void) lun;

	const uint32_t block_count = (bufsize + m_disk_block_size -1) / m_disk_block_size;
 8010c38:	4b2a      	ldr	r3, [pc, #168]	; (8010ce4 <tud_msc_write10_cb+0xbc>)
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	6a3b      	ldr	r3, [r7, #32]
 8010c3e:	4413      	add	r3, r2
 8010c40:	1e5a      	subs	r2, r3, #1
 8010c42:	4b28      	ldr	r3, [pc, #160]	; (8010ce4 <tud_msc_write10_cb+0xbc>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c4a:	617b      	str	r3, [r7, #20]

	if (bufsize <= m_disk_block_size)		// always jump into here
 8010c4c:	4b25      	ldr	r3, [pc, #148]	; (8010ce4 <tud_msc_write10_cb+0xbc>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	6a3a      	ldr	r2, [r7, #32]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d836      	bhi.n	8010cc4 <tud_msc_write10_cb+0x9c>
	{
		// Read back all data from sector in flash to cache buffer
		if (m_disk_cache.wr_sector == -1
 8010c56:	4b24      	ldr	r3, [pc, #144]	; (8010ce8 <tud_msc_write10_cb+0xc0>)
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c5e:	d004      	beq.n	8010c6a <tud_msc_write10_cb+0x42>
			|| lba != m_disk_cache.wr_sector)		// If invalid sector =>> read data from flash immediately
 8010c60:	4b21      	ldr	r3, [pc, #132]	; (8010ce8 <tud_msc_write10_cb+0xc0>)
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d009      	beq.n	8010c7e <tud_msc_write10_cb+0x56>
		{
			m_disk_cache.wr_sector = lba;
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	4a1e      	ldr	r2, [pc, #120]	; (8010ce8 <tud_msc_write10_cb+0xc0>)
 8010c6e:	6053      	str	r3, [r2, #4]
			disk_read(0, m_disk_cache.wr_buffer, lba, block_count);
 8010c70:	4b1d      	ldr	r3, [pc, #116]	; (8010ce8 <tud_msc_write10_cb+0xc0>)
 8010c72:	6899      	ldr	r1, [r3, #8]
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	68ba      	ldr	r2, [r7, #8]
 8010c78:	2000      	movs	r0, #0
 8010c7a:	f7f7 ffdd 	bl	8008c38 <disk_read>
		}

		m_disk_cache.rd_sector = lba;
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	4a19      	ldr	r2, [pc, #100]	; (8010ce8 <tud_msc_write10_cb+0xc0>)
 8010c82:	6013      	str	r3, [r2, #0]
		// Copy content
		memcpy(&m_disk_cache.wr_buffer[offset], buffer, bufsize);
 8010c84:	4b18      	ldr	r3, [pc, #96]	; (8010ce8 <tud_msc_write10_cb+0xc0>)
 8010c86:	689a      	ldr	r2, [r3, #8]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	4413      	add	r3, r2
 8010c8c:	6a3a      	ldr	r2, [r7, #32]
 8010c8e:	6839      	ldr	r1, [r7, #0]
 8010c90:	4618      	mov	r0, r3
 8010c92:	f006 ff38 	bl	8017b06 <memcpy>

		if (offset + 512 == m_disk_block_size)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8010c9c:	4b11      	ldr	r3, [pc, #68]	; (8010ce4 <tud_msc_write10_cb+0xbc>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d11a      	bne.n	8010cda <tud_msc_write10_cb+0xb2>
		{
			// Sync now
			DEBUG_WARN("Sync to flash now\r\n");
 8010ca4:	f7ff fa74 	bl	8010190 <app_debug_get_ms>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	4a10      	ldr	r2, [pc, #64]	; (8010cec <tud_msc_write10_cb+0xc4>)
 8010cac:	4619      	mov	r1, r3
 8010cae:	4810      	ldr	r0, [pc, #64]	; (8010cf0 <tud_msc_write10_cb+0xc8>)
 8010cb0:	f7ff fbea 	bl	8010488 <app_debug_print_raw>
			disk_write(0, m_disk_cache.wr_buffer, lba, block_count);
 8010cb4:	4b0c      	ldr	r3, [pc, #48]	; (8010ce8 <tud_msc_write10_cb+0xc0>)
 8010cb6:	6899      	ldr	r1, [r3, #8]
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	68ba      	ldr	r2, [r7, #8]
 8010cbc:	2000      	movs	r0, #0
 8010cbe:	f7f7 ffdb 	bl	8008c78 <disk_write>
 8010cc2:	e00a      	b.n	8010cda <tud_msc_write10_cb+0xb2>
	__asm volatile
 8010cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc8:	f383 8811 	msr	BASEPRI, r3
 8010ccc:	f3bf 8f6f 	isb	sy
 8010cd0:	f3bf 8f4f 	dsb	sy
 8010cd4:	613b      	str	r3, [r7, #16]
}
 8010cd6:	bf00      	nop
		}
	}
	else		// never happen
	{
		configASSERT(0);
 8010cd8:	e7fe      	b.n	8010cd8 <tud_msc_write10_cb+0xb0>
	}
	DEBUG_VERBOSE("Disk write %u bytes, LBA=%u, offset %u, block = %u, size = %u\r\n", bufsize, lba, offset, block_count, m_disk_block_size);
	return bufsize;
 8010cda:	6a3b      	ldr	r3, [r7, #32]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3718      	adds	r7, #24
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	20000150 	.word	0x20000150
 8010ce8:	20000144 	.word	0x20000144
 8010cec:	08019c10 	.word	0x08019c10
 8010cf0:	08019c74 	.word	0x08019c74

08010cf4 <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b088      	sub	sp, #32
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60b9      	str	r1, [r7, #8]
 8010cfc:	607a      	str	r2, [r7, #4]
 8010cfe:	461a      	mov	r2, r3
 8010d00:	4603      	mov	r3, r0
 8010d02:	73fb      	strb	r3, [r7, #15]
 8010d04:	4613      	mov	r3, r2
 8010d06:	81bb      	strh	r3, [r7, #12]
  // read10 & write10 has their own callback and MUST not be handled here

  void const* response = NULL;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	61bb      	str	r3, [r7, #24]
  int32_t resplen = 0;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	61fb      	str	r3, [r7, #28]

  // most scsi handled is input
  bool in_xfer = true;
 8010d10:	2301      	movs	r3, #1
 8010d12:	75fb      	strb	r3, [r7, #23]

  switch (scsi_cmd[0])
  {
    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8010d14:	7bf8      	ldrb	r0, [r7, #15]
 8010d16:	2300      	movs	r3, #0
 8010d18:	2220      	movs	r2, #32
 8010d1a:	2105      	movs	r1, #5
 8010d1c:	f001 f8b8 	bl	8011e90 <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8010d20:	f04f 33ff 	mov.w	r3, #4294967295
 8010d24:	61fb      	str	r3, [r7, #28]
    break;
 8010d26:	bf00      	nop
  }

  // return resplen must not larger than bufsize
  if ( resplen > bufsize ) resplen = bufsize;
 8010d28:	89bb      	ldrh	r3, [r7, #12]
 8010d2a:	69fa      	ldr	r2, [r7, #28]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	dd01      	ble.n	8010d34 <tud_msc_scsi_cb+0x40>
 8010d30:	89bb      	ldrh	r3, [r7, #12]
 8010d32:	61fb      	str	r3, [r7, #28]

  if ( response && (resplen > 0) )
 8010d34:	69bb      	ldr	r3, [r7, #24]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00b      	beq.n	8010d52 <tud_msc_scsi_cb+0x5e>
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	dd08      	ble.n	8010d52 <tud_msc_scsi_cb+0x5e>
  {
    if(in_xfer)
 8010d40:	7dfb      	ldrb	r3, [r7, #23]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d005      	beq.n	8010d52 <tud_msc_scsi_cb+0x5e>
    {
      memcpy(buffer, response, resplen);
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	461a      	mov	r2, r3
 8010d4a:	69b9      	ldr	r1, [r7, #24]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f006 feda 	bl	8017b06 <memcpy>
    {
      // SCSI output
    }
  }

  return resplen;
 8010d52:	69fb      	ldr	r3, [r7, #28]
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3720      	adds	r7, #32
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8010d60:	4b02      	ldr	r3, [pc, #8]	; (8010d6c <tud_descriptor_device_cb+0x10>)
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr
 8010d6c:	0801b284 	.word	0x0801b284

08010d70 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b083      	sub	sp, #12
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	4603      	mov	r3, r0
 8010d78:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 8010d7a:	4b03      	ldr	r3, [pc, #12]	; (8010d88 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	370c      	adds	r7, #12
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr
 8010d88:	0801b298 	.word	0x0801b298

08010d8c <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	4603      	mov	r3, r0
 8010d94:	460a      	mov	r2, r1
 8010d96:	71fb      	strb	r3, [r7, #7]
 8010d98:	4613      	mov	r3, r2
 8010d9a:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8010d9c:	79fb      	ldrb	r3, [r7, #7]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d108      	bne.n	8010db4 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8010da2:	4b21      	ldr	r3, [pc, #132]	; (8010e28 <tud_descriptor_string_cb+0x9c>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	881b      	ldrh	r3, [r3, #0]
 8010da8:	b29a      	uxth	r2, r3
 8010daa:	4b20      	ldr	r3, [pc, #128]	; (8010e2c <tud_descriptor_string_cb+0xa0>)
 8010dac:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8010dae:	2301      	movs	r3, #1
 8010db0:	73fb      	strb	r3, [r7, #15]
 8010db2:	e027      	b.n	8010e04 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8010db4:	79fb      	ldrb	r3, [r7, #7]
 8010db6:	2b05      	cmp	r3, #5
 8010db8:	d901      	bls.n	8010dbe <tud_descriptor_string_cb+0x32>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	e02f      	b.n	8010e1e <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8010dbe:	79fb      	ldrb	r3, [r7, #7]
 8010dc0:	4a19      	ldr	r2, [pc, #100]	; (8010e28 <tud_descriptor_string_cb+0x9c>)
 8010dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dc6:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8010dc8:	68b8      	ldr	r0, [r7, #8]
 8010dca:	f7ef fa0b 	bl	80001e4 <strlen>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8010dd2:	7bfb      	ldrb	r3, [r7, #15]
 8010dd4:	2b1f      	cmp	r3, #31
 8010dd6:	d901      	bls.n	8010ddc <tud_descriptor_string_cb+0x50>
 8010dd8:	231f      	movs	r3, #31
 8010dda:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8010ddc:	2300      	movs	r3, #0
 8010dde:	73bb      	strb	r3, [r7, #14]
 8010de0:	e00c      	b.n	8010dfc <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8010de2:	7bbb      	ldrb	r3, [r7, #14]
 8010de4:	68ba      	ldr	r2, [r7, #8]
 8010de6:	4413      	add	r3, r2
 8010de8:	781a      	ldrb	r2, [r3, #0]
 8010dea:	7bbb      	ldrb	r3, [r7, #14]
 8010dec:	3301      	adds	r3, #1
 8010dee:	b291      	uxth	r1, r2
 8010df0:	4a0e      	ldr	r2, [pc, #56]	; (8010e2c <tud_descriptor_string_cb+0xa0>)
 8010df2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8010df6:	7bbb      	ldrb	r3, [r7, #14]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	73bb      	strb	r3, [r7, #14]
 8010dfc:	7bba      	ldrb	r2, [r7, #14]
 8010dfe:	7bfb      	ldrb	r3, [r7, #15]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d3ee      	bcc.n	8010de2 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8010e04:	7bfb      	ldrb	r3, [r7, #15]
 8010e06:	3301      	adds	r3, #1
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	005b      	lsls	r3, r3, #1
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	b21b      	sxth	r3, r3
 8010e10:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010e14:	b21b      	sxth	r3, r3
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	4b04      	ldr	r3, [pc, #16]	; (8010e2c <tud_descriptor_string_cb+0xa0>)
 8010e1a:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8010e1c:	4b03      	ldr	r3, [pc, #12]	; (8010e2c <tud_descriptor_string_cb+0xa0>)
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
 8010e26:	bf00      	nop
 8010e28:	20000154 	.word	0x20000154
 8010e2c:	20008eac 	.word	0x20008eac

08010e30 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b084      	sub	sp, #16
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d005      	beq.n	8010e4e <lwrb_init+0x1e>
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d002      	beq.n	8010e4e <lwrb_init+0x1e>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d101      	bne.n	8010e52 <lwrb_init+0x22>
        return 0;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	e00b      	b.n	8010e6a <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 8010e52:	2214      	movs	r2, #20
 8010e54:	2100      	movs	r1, #0
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f006 fe7d 	bl	8017b56 <memset>

    buff->size = size;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 8010e68:	2301      	movs	r3, #1
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3710      	adds	r7, #16
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(lwrb_t* buff, const void* data, size_t btw) {
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b088      	sub	sp, #32
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	60f8      	str	r0, [r7, #12]
 8010e7a:	60b9      	str	r1, [r7, #8]
 8010e7c:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    volatile size_t buff_w_ptr;
    const uint8_t* d = data;
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d00d      	beq.n	8010ea4 <lwrb_write+0x32>
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d009      	beq.n	8010ea4 <lwrb_write+0x32>
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d005      	beq.n	8010ea4 <lwrb_write+0x32>
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d002      	beq.n	8010ea4 <lwrb_write+0x32>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d101      	bne.n	8010ea8 <lwrb_write+0x36>
        return 0;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e057      	b.n	8010f58 <lwrb_write+0xe6>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 8010ea8:	68f8      	ldr	r0, [r7, #12]
 8010eaa:	f000 f8d0 	bl	801104e <lwrb_get_free>
 8010eae:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	bf28      	it	cs
 8010eb8:	4613      	movcs	r3, r2
 8010eba:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d101      	bne.n	8010ec6 <lwrb_write+0x54>
        return 0;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	e048      	b.n	8010f58 <lwrb_write+0xe6>
    }

    /* Step 1: Write data to linear part of buffer */
    buff_w_ptr = buff->w;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	685a      	ldr	r2, [r3, #4]
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d904      	bls.n	8010ee4 <lwrb_write+0x72>
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	685a      	ldr	r2, [r3, #4]
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	e000      	b.n	8010ee6 <lwrb_write+0x74>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	4413      	add	r3, r2
 8010ef0:	697a      	ldr	r2, [r7, #20]
 8010ef2:	69f9      	ldr	r1, [r7, #28]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f006 fe06 	bl	8017b06 <memcpy>
    buff_w_ptr += tocopy;
 8010efa:	693a      	ldr	r2, [r7, #16]
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	4413      	add	r3, r2
 8010f00:	613b      	str	r3, [r7, #16]
    btw -= tocopy;
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	1ad3      	subs	r3, r2, r3
 8010f08:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d00a      	beq.n	8010f26 <lwrb_write+0xb4>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	6818      	ldr	r0, [r3, #0]
 8010f14:	69fa      	ldr	r2, [r7, #28]
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	4413      	add	r3, r2
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	f006 fdf2 	bl	8017b06 <memcpy>
        buff_w_ptr = btw;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	685a      	ldr	r2, [r3, #4]
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d801      	bhi.n	8010f34 <lwrb_write+0xc2>
        buff_w_ptr = 0;
 8010f30:	2300      	movs	r3, #0
 8010f32:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    buff->w = buff_w_ptr;
 8010f34:	693a      	ldr	r2, [r7, #16]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	60da      	str	r2, [r3, #12]
    
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	691b      	ldr	r3, [r3, #16]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d007      	beq.n	8010f52 <lwrb_write+0xe0>
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	691b      	ldr	r3, [r3, #16]
 8010f46:	6979      	ldr	r1, [r7, #20]
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	440a      	add	r2, r1
 8010f4c:	2101      	movs	r1, #1
 8010f4e:	68f8      	ldr	r0, [r7, #12]
 8010f50:	4798      	blx	r3
    return tocopy + btw;
 8010f52:	697a      	ldr	r2, [r7, #20]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	4413      	add	r3, r2
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3720      	adds	r7, #32
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b088      	sub	sp, #32
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    volatile size_t buff_r_ptr;
    uint8_t* d = data;
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d00d      	beq.n	8010f92 <lwrb_read+0x32>
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d009      	beq.n	8010f92 <lwrb_read+0x32>
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d005      	beq.n	8010f92 <lwrb_read+0x32>
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d002      	beq.n	8010f92 <lwrb_read+0x32>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d101      	bne.n	8010f96 <lwrb_read+0x36>
        return 0;
 8010f92:	2300      	movs	r3, #0
 8010f94:	e057      	b.n	8011046 <lwrb_read+0xe6>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 8010f96:	68f8      	ldr	r0, [r7, #12]
 8010f98:	f000 f890 	bl	80110bc <lwrb_get_full>
 8010f9c:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	bf28      	it	cs
 8010fa6:	4613      	movcs	r3, r2
 8010fa8:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d101      	bne.n	8010fb4 <lwrb_read+0x54>
        return 0;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	e048      	b.n	8011046 <lwrb_read+0xe6>
    }

    /* Step 1: Read data from linear part of buffer */
    buff_r_ptr = buff->r;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	689b      	ldr	r3, [r3, #8]
 8010fb8:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	685a      	ldr	r2, [r3, #4]
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	1ad3      	subs	r3, r2, r3
 8010fc2:	687a      	ldr	r2, [r7, #4]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d904      	bls.n	8010fd2 <lwrb_read+0x72>
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	685a      	ldr	r2, [r3, #4]
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	e000      	b.n	8010fd4 <lwrb_read+0x74>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	4413      	add	r3, r2
 8010fde:	697a      	ldr	r2, [r7, #20]
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	69f8      	ldr	r0, [r7, #28]
 8010fe4:	f006 fd8f 	bl	8017b06 <memcpy>
    buff_r_ptr += tocopy;
 8010fe8:	693a      	ldr	r2, [r7, #16]
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	4413      	add	r3, r2
 8010fee:	613b      	str	r3, [r7, #16]
    btr -= tocopy;
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	1ad3      	subs	r3, r2, r3
 8010ff6:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d00a      	beq.n	8011014 <lwrb_read+0xb4>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8010ffe:	69fa      	ldr	r2, [r7, #28]
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	18d0      	adds	r0, r2, r3
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	4619      	mov	r1, r3
 801100c:	f006 fd7b 	bl	8017b06 <memcpy>
        buff_r_ptr = btr;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	685a      	ldr	r2, [r3, #4]
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	429a      	cmp	r2, r3
 801101c:	d801      	bhi.n	8011022 <lwrb_read+0xc2>
        buff_r_ptr = 0;
 801101e:	2300      	movs	r3, #0
 8011020:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    buff->r = buff_r_ptr;
 8011022:	693a      	ldr	r2, [r7, #16]
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	609a      	str	r2, [r3, #8]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	691b      	ldr	r3, [r3, #16]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d007      	beq.n	8011040 <lwrb_read+0xe0>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	6979      	ldr	r1, [r7, #20]
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	440a      	add	r2, r1
 801103a:	2100      	movs	r1, #0
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	4798      	blx	r3
    return tocopy + btr;
 8011040:	697a      	ldr	r2, [r7, #20]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4413      	add	r3, r2
}
 8011046:	4618      	mov	r0, r3
 8011048:	3720      	adds	r7, #32
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}

0801104e <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(lwrb_t* buff) {
 801104e:	b480      	push	{r7}
 8011050:	b087      	sub	sp, #28
 8011052:	af00      	add	r7, sp, #0
 8011054:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(buff)) {
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d007      	beq.n	801106c <lwrb_get_free+0x1e>
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d003      	beq.n	801106c <lwrb_get_free+0x1e>
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d101      	bne.n	8011070 <lwrb_get_free+0x22>
        return 0;
 801106c:	2300      	movs	r3, #0
 801106e:	e01f      	b.n	80110b0 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	689b      	ldr	r3, [r3, #8]
 801107a:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 801107c:	693a      	ldr	r2, [r7, #16]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	429a      	cmp	r2, r3
 8011082:	d103      	bne.n	801108c <lwrb_get_free+0x3e>
        size = buff->size;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	617b      	str	r3, [r7, #20]
 801108a:	e00f      	b.n	80110ac <lwrb_get_free+0x5e>
    } else if (r > w) {
 801108c:	68fa      	ldr	r2, [r7, #12]
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	429a      	cmp	r2, r3
 8011092:	d904      	bls.n	801109e <lwrb_get_free+0x50>
        size = r - w;
 8011094:	68fa      	ldr	r2, [r7, #12]
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	617b      	str	r3, [r7, #20]
 801109c:	e006      	b.n	80110ac <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	685a      	ldr	r2, [r3, #4]
 80110a2:	68f9      	ldr	r1, [r7, #12]
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	1acb      	subs	r3, r1, r3
 80110a8:	4413      	add	r3, r2
 80110aa:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	3b01      	subs	r3, #1
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	371c      	adds	r7, #28
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(lwrb_t* buff) {
 80110bc:	b480      	push	{r7}
 80110be:	b087      	sub	sp, #28
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(buff)) {
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d007      	beq.n	80110da <lwrb_get_full+0x1e>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d003      	beq.n	80110da <lwrb_get_full+0x1e>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d101      	bne.n	80110de <lwrb_get_full+0x22>
        return 0;
 80110da:	2300      	movs	r3, #0
 80110dc:	e01d      	b.n	801111a <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	68db      	ldr	r3, [r3, #12]
 80110e2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	689b      	ldr	r3, [r3, #8]
 80110e8:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 80110ea:	693a      	ldr	r2, [r7, #16]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d102      	bne.n	80110f8 <lwrb_get_full+0x3c>
        size = 0;
 80110f2:	2300      	movs	r3, #0
 80110f4:	617b      	str	r3, [r7, #20]
 80110f6:	e00f      	b.n	8011118 <lwrb_get_full+0x5c>
    } else if (w > r) {
 80110f8:	693a      	ldr	r2, [r7, #16]
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d904      	bls.n	801110a <lwrb_get_full+0x4e>
        size = w - r;
 8011100:	693a      	ldr	r2, [r7, #16]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	617b      	str	r3, [r7, #20]
 8011108:	e006      	b.n	8011118 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	685a      	ldr	r2, [r3, #4]
 801110e:	6939      	ldr	r1, [r7, #16]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	1acb      	subs	r3, r1, r3
 8011114:	4413      	add	r3, r2
 8011116:	617b      	str	r3, [r7, #20]
    }
    return size;
 8011118:	697b      	ldr	r3, [r7, #20]
}
 801111a:	4618      	mov	r0, r3
 801111c:	371c      	adds	r7, #28
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr

08011126 <tu_desc_next>:

//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
 8011126:	b480      	push	{r7}
 8011128:	b085      	sub	sp, #20
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	461a      	mov	r2, r3
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	4413      	add	r3, r2
}
 801113c:	4618      	mov	r0, r3
 801113e:	3714      	adds	r7, #20
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
 8011148:	b480      	push	{r7}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	3301      	adds	r3, #1
 8011154:	781b      	ldrb	r3, [r3, #0]
}
 8011156:	4618      	mov	r0, r3
 8011158:	370c      	adds	r7, #12
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr

08011162 <tu_desc_len>:

static inline uint8_t tu_desc_len(void const* desc)
{
 8011162:	b480      	push	{r7}
 8011164:	b083      	sub	sp, #12
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	781b      	ldrb	r3, [r3, #0]
}
 801116e:	4618      	mov	r0, r3
 8011170:	370c      	adds	r7, #12
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr

0801117a <osal_mutex_create>:
//--------------------------------------------------------------------+
typedef StaticSemaphore_t osal_mutex_def_t;
typedef SemaphoreHandle_t osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b082      	sub	sp, #8
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
  return xSemaphoreCreateMutexStatic(mdef);
 8011182:	6879      	ldr	r1, [r7, #4]
 8011184:	2001      	movs	r0, #1
 8011186:	f7fa fbc4 	bl	800b912 <xQueueCreateMutexStatic>
 801118a:	4603      	mov	r3, r0
}
 801118c:	4618      	mov	r0, r3
 801118e:	3708      	adds	r7, #8
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = TUD_OPT_RHPORT;
 801119c:	2300      	movs	r3, #0
 801119e:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	3310      	adds	r3, #16
 80111a4:	4618      	mov	r0, r3
 80111a6:	f002 fb99 	bl	80138dc <tu_fifo_remaining>
 80111aa:	4603      	mov	r3, r0
 80111ac:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 80111ae:	89bb      	ldrh	r3, [r7, #12]
 80111b0:	2b3f      	cmp	r3, #63	; 0x3f
 80111b2:	d801      	bhi.n	80111b8 <_prep_out_transaction+0x24>
 80111b4:	2300      	movs	r3, #0
 80111b6:	e02b      	b.n	8011210 <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	78da      	ldrb	r2, [r3, #3]
 80111bc:	7bfb      	ldrb	r3, [r7, #15]
 80111be:	4611      	mov	r1, r2
 80111c0:	4618      	mov	r0, r3
 80111c2:	f003 ff75 	bl	80150b0 <usbd_edpt_claim>
 80111c6:	4603      	mov	r3, r0
 80111c8:	f083 0301 	eor.w	r3, r3, #1
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d001      	beq.n	80111d6 <_prep_out_transaction+0x42>
 80111d2:	2300      	movs	r3, #0
 80111d4:	e01c      	b.n	8011210 <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3310      	adds	r3, #16
 80111da:	4618      	mov	r0, r3
 80111dc:	f002 fb7e 	bl	80138dc <tu_fifo_remaining>
 80111e0:	4603      	mov	r3, r0
 80111e2:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 80111e4:	89bb      	ldrh	r3, [r7, #12]
 80111e6:	2b3f      	cmp	r3, #63	; 0x3f
 80111e8:	d90a      	bls.n	8011200 <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	78d9      	ldrb	r1, [r3, #3]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 80111f4:	7bf8      	ldrb	r0, [r7, #15]
 80111f6:	2340      	movs	r3, #64	; 0x40
 80111f8:	f004 f834 	bl	8015264 <usbd_edpt_xfer>
 80111fc:	4603      	mov	r3, r0
 80111fe:	e007      	b.n	8011210 <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	78da      	ldrb	r2, [r3, #3]
 8011204:	7bfb      	ldrb	r3, [r7, #15]
 8011206:	4611      	mov	r1, r2
 8011208:	4618      	mov	r0, r3
 801120a:	f003 ffcd 	bl	80151a8 <usbd_edpt_release>

    return false;
 801120e:	2300      	movs	r3, #0
  }
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	4603      	mov	r3, r0
 8011220:	71fb      	strb	r3, [r7, #7]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 8011222:	f002 fd89 	bl	8013d38 <tud_mounted>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d009      	beq.n	8011240 <tud_cdc_n_connected+0x28>
 801122c:	f002 fd96 	bl	8013d5c <tud_suspended>
 8011230:	4603      	mov	r3, r0
 8011232:	f083 0301 	eor.w	r3, r3, #1
 8011236:	b2db      	uxtb	r3, r3
 8011238:	2b00      	cmp	r3, #0
 801123a:	d001      	beq.n	8011240 <tud_cdc_n_connected+0x28>
 801123c:	2301      	movs	r3, #1
 801123e:	e000      	b.n	8011242 <tud_cdc_n_connected+0x2a>
 8011240:	2300      	movs	r3, #0
 8011242:	f003 0301 	and.w	r3, r3, #1
 8011246:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8011248:	2b00      	cmp	r3, #0
 801124a:	d01a      	beq.n	8011282 <tud_cdc_n_connected+0x6a>
 801124c:	79fb      	ldrb	r3, [r7, #7]
 801124e:	4a11      	ldr	r2, [pc, #68]	; (8011294 <tud_cdc_n_connected+0x7c>)
 8011250:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8011254:	fb01 f303 	mul.w	r3, r1, r3
 8011258:	4413      	add	r3, r2
 801125a:	3304      	adds	r3, #4
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	60fb      	str	r3, [r7, #12]
 8011260:	2300      	movs	r3, #0
 8011262:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8011264:	7afb      	ldrb	r3, [r7, #11]
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	fa22 f303 	lsr.w	r3, r2, r3
 801126c:	f003 0301 	and.w	r3, r3, #1
 8011270:	2b00      	cmp	r3, #0
 8011272:	bf14      	ite	ne
 8011274:	2301      	movne	r3, #1
 8011276:	2300      	moveq	r3, #0
 8011278:	b2db      	uxtb	r3, r3
 801127a:	2b00      	cmp	r3, #0
 801127c:	d001      	beq.n	8011282 <tud_cdc_n_connected+0x6a>
 801127e:	2301      	movs	r3, #1
 8011280:	e000      	b.n	8011284 <tud_cdc_n_connected+0x6c>
 8011282:	2300      	movs	r3, #0
 8011284:	f003 0301 	and.w	r3, r3, #1
 8011288:	b2db      	uxtb	r3, r3
}
 801128a:	4618      	mov	r0, r3
 801128c:	3710      	adds	r7, #16
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	20008eec 	.word	0x20008eec

08011298 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	4603      	mov	r3, r0
 80112a0:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80112a2:	79fb      	ldrb	r3, [r7, #7]
 80112a4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80112a8:	fb02 f303 	mul.w	r3, r2, r3
 80112ac:	3310      	adds	r3, #16
 80112ae:	4a05      	ldr	r2, [pc, #20]	; (80112c4 <tud_cdc_n_available+0x2c>)
 80112b0:	4413      	add	r3, r2
 80112b2:	4618      	mov	r0, r3
 80112b4:	f002 fae1 	bl	801387a <tu_fifo_count>
 80112b8:	4603      	mov	r3, r0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3708      	adds	r7, #8
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	20008eec 	.word	0x20008eec

080112c8 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b086      	sub	sp, #24
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	4603      	mov	r3, r0
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
 80112d4:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80112d6:	7bfb      	ldrb	r3, [r7, #15]
 80112d8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80112dc:	fb02 f303 	mul.w	r3, r2, r3
 80112e0:	4a0a      	ldr	r2, [pc, #40]	; (801130c <tud_cdc_n_read+0x44>)
 80112e2:	4413      	add	r3, r2
 80112e4:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	3310      	adds	r3, #16
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	b292      	uxth	r2, r2
 80112ee:	68b9      	ldr	r1, [r7, #8]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f002 fb06 	bl	8013902 <tu_fifo_read_n>
 80112f6:	4603      	mov	r3, r0
 80112f8:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 80112fa:	6978      	ldr	r0, [r7, #20]
 80112fc:	f7ff ff4a 	bl	8011194 <_prep_out_transaction>
  return num_read;
 8011300:	693b      	ldr	r3, [r7, #16]
}
 8011302:	4618      	mov	r0, r3
 8011304:	3718      	adds	r7, #24
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	20008eec 	.word	0x20008eec

08011310 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
 8011316:	4603      	mov	r3, r0
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	607a      	str	r2, [r7, #4]
 801131c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 801131e:	7bfb      	ldrb	r3, [r7, #15]
 8011320:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011324:	fb02 f303 	mul.w	r3, r2, r3
 8011328:	4a0e      	ldr	r2, [pc, #56]	; (8011364 <tud_cdc_n_write+0x54>)
 801132a:	4413      	add	r3, r2
 801132c:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	332c      	adds	r3, #44	; 0x2c
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	b292      	uxth	r2, r2
 8011336:	68b9      	ldr	r1, [r7, #8]
 8011338:	4618      	mov	r0, r3
 801133a:	f002 fb06 	bl	801394a <tu_fifo_write_n>
 801133e:	4603      	mov	r3, r0
 8011340:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	332c      	adds	r3, #44	; 0x2c
 8011346:	4618      	mov	r0, r3
 8011348:	f002 fa97 	bl	801387a <tu_fifo_count>
 801134c:	4603      	mov	r3, r0
 801134e:	2b3f      	cmp	r3, #63	; 0x3f
 8011350:	d903      	bls.n	801135a <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 8011352:	7bfb      	ldrb	r3, [r7, #15]
 8011354:	4618      	mov	r0, r3
 8011356:	f000 f807 	bl	8011368 <tud_cdc_n_write_flush>
  }

  return ret;
 801135a:	8a7b      	ldrh	r3, [r7, #18]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3718      	adds	r7, #24
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	20008eec 	.word	0x20008eec

08011368 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b086      	sub	sp, #24
 801136c:	af00      	add	r7, sp, #0
 801136e:	4603      	mov	r3, r0
 8011370:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8011372:	79fb      	ldrb	r3, [r7, #7]
 8011374:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011378:	fb02 f303 	mul.w	r3, r2, r3
 801137c:	4a39      	ldr	r2, [pc, #228]	; (8011464 <tud_cdc_n_write_flush+0xfc>)
 801137e:	4413      	add	r3, r2
 8011380:	617b      	str	r3, [r7, #20]
 8011382:	f002 fcd9 	bl	8013d38 <tud_mounted>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d009      	beq.n	80113a0 <tud_cdc_n_write_flush+0x38>
 801138c:	f002 fce6 	bl	8013d5c <tud_suspended>
 8011390:	4603      	mov	r3, r0
 8011392:	f083 0301 	eor.w	r3, r3, #1
 8011396:	b2db      	uxtb	r3, r3
 8011398:	2b00      	cmp	r3, #0
 801139a:	d001      	beq.n	80113a0 <tud_cdc_n_write_flush+0x38>
 801139c:	2301      	movs	r3, #1
 801139e:	e000      	b.n	80113a2 <tud_cdc_n_write_flush+0x3a>
 80113a0:	2300      	movs	r3, #0
 80113a2:	f003 0301 	and.w	r3, r3, #1
 80113a6:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 80113a8:	f083 0301 	eor.w	r3, r3, #1
 80113ac:	b2db      	uxtb	r3, r3
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d001      	beq.n	80113b6 <tud_cdc_n_write_flush+0x4e>
 80113b2:	2300      	movs	r3, #0
 80113b4:	e052      	b.n	801145c <tud_cdc_n_write_flush+0xf4>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	332c      	adds	r3, #44	; 0x2c
 80113ba:	4618      	mov	r0, r3
 80113bc:	f002 fa5d 	bl	801387a <tu_fifo_count>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d101      	bne.n	80113ca <tud_cdc_n_write_flush+0x62>
 80113c6:	2300      	movs	r3, #0
 80113c8:	e048      	b.n	801145c <tud_cdc_n_write_flush+0xf4>

  uint8_t const rhport = TUD_OPT_RHPORT;
 80113ca:	2300      	movs	r3, #0
 80113cc:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	789a      	ldrb	r2, [r3, #2]
 80113d2:	7cfb      	ldrb	r3, [r7, #19]
 80113d4:	4611      	mov	r1, r2
 80113d6:	4618      	mov	r0, r3
 80113d8:	f003 fe6a 	bl	80150b0 <usbd_edpt_claim>
 80113dc:	4603      	mov	r3, r0
 80113de:	f083 0301 	eor.w	r3, r3, #1
 80113e2:	b2db      	uxtb	r3, r3
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d001      	beq.n	80113ec <tud_cdc_n_write_flush+0x84>
 80113e8:	2300      	movs	r3, #0
 80113ea:	e037      	b.n	801145c <tud_cdc_n_write_flush+0xf4>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80113f8:	2240      	movs	r2, #64	; 0x40
 80113fa:	4619      	mov	r1, r3
 80113fc:	f002 fa81 	bl	8013902 <tu_fifo_read_n>
 8011400:	4603      	mov	r3, r0
 8011402:	823b      	strh	r3, [r7, #16]

  if ( count )
 8011404:	8a3b      	ldrh	r3, [r7, #16]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d020      	beq.n	801144c <tud_cdc_n_write_flush+0xe4>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	7899      	ldrb	r1, [r3, #2]
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8011414:	8a3b      	ldrh	r3, [r7, #16]
 8011416:	7cf8      	ldrb	r0, [r7, #19]
 8011418:	f003 ff24 	bl	8015264 <usbd_edpt_xfer>
 801141c:	4603      	mov	r3, r0
 801141e:	f083 0301 	eor.w	r3, r3, #1
 8011422:	b2db      	uxtb	r3, r3
 8011424:	2b00      	cmp	r3, #0
 8011426:	d00f      	beq.n	8011448 <tud_cdc_n_write_flush+0xe0>
 8011428:	22ca      	movs	r2, #202	; 0xca
 801142a:	490f      	ldr	r1, [pc, #60]	; (8011468 <tud_cdc_n_write_flush+0x100>)
 801142c:	480f      	ldr	r0, [pc, #60]	; (801146c <tud_cdc_n_write_flush+0x104>)
 801142e:	f006 fc2f 	bl	8017c90 <iprintf>
 8011432:	4b0f      	ldr	r3, [pc, #60]	; (8011470 <tud_cdc_n_write_flush+0x108>)
 8011434:	60fb      	str	r3, [r7, #12]
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f003 0301 	and.w	r3, r3, #1
 801143e:	2b00      	cmp	r3, #0
 8011440:	d000      	beq.n	8011444 <tud_cdc_n_write_flush+0xdc>
 8011442:	be00      	bkpt	0x0000
 8011444:	2300      	movs	r3, #0
 8011446:	e009      	b.n	801145c <tud_cdc_n_write_flush+0xf4>
    return count;
 8011448:	8a3b      	ldrh	r3, [r7, #16]
 801144a:	e007      	b.n	801145c <tud_cdc_n_write_flush+0xf4>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	789a      	ldrb	r2, [r3, #2]
 8011450:	7cfb      	ldrb	r3, [r7, #19]
 8011452:	4611      	mov	r1, r2
 8011454:	4618      	mov	r0, r3
 8011456:	f003 fea7 	bl	80151a8 <usbd_edpt_release>
    return 0;
 801145a:	2300      	movs	r3, #0
  }
}
 801145c:	4618      	mov	r0, r3
 801145e:	3718      	adds	r7, #24
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	20008eec 	.word	0x20008eec
 8011468:	0801b300 	.word	0x0801b300
 801146c:	08019cdc 	.word	0x08019cdc
 8011470:	e000edf0 	.word	0xe000edf0

08011474 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	4603      	mov	r3, r0
 801147c:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 801147e:	79fb      	ldrb	r3, [r7, #7]
 8011480:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011484:	fb02 f303 	mul.w	r3, r2, r3
 8011488:	3328      	adds	r3, #40	; 0x28
 801148a:	4a05      	ldr	r2, [pc, #20]	; (80114a0 <tud_cdc_n_write_available+0x2c>)
 801148c:	4413      	add	r3, r2
 801148e:	3304      	adds	r3, #4
 8011490:	4618      	mov	r0, r3
 8011492:	f002 fa23 	bl	80138dc <tu_fifo_remaining>
 8011496:	4603      	mov	r3, r0
}
 8011498:	4618      	mov	r0, r3
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	20008eec 	.word	0x20008eec

080114a4 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 80114a4:	b590      	push	{r4, r7, lr}
 80114a6:	b08b      	sub	sp, #44	; 0x2c
 80114a8:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80114aa:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80114ae:	2100      	movs	r1, #0
 80114b0:	4839      	ldr	r0, [pc, #228]	; (8011598 <cdcd_init+0xf4>)
 80114b2:	f006 fb50 	bl	8017b56 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80114b6:	2300      	movs	r3, #0
 80114b8:	77fb      	strb	r3, [r7, #31]
 80114ba:	e064      	b.n	8011586 <cdcd_init+0xe2>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80114bc:	7ffb      	ldrb	r3, [r7, #31]
 80114be:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80114c2:	fb02 f303 	mul.w	r3, r2, r3
 80114c6:	4a34      	ldr	r2, [pc, #208]	; (8011598 <cdcd_init+0xf4>)
 80114c8:	4413      	add	r3, r2
 80114ca:	61bb      	str	r3, [r7, #24]

    p_cdc->wanted_char = (char) -1;
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	22ff      	movs	r2, #255	; 0xff
 80114d0:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 80114d2:	69ba      	ldr	r2, [r7, #24]
 80114d4:	2300      	movs	r3, #0
 80114d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114de:	f443 4342 	orr.w	r3, r3, #49664	; 0xc200
 80114e2:	80d3      	strh	r3, [r2, #6]
 80114e4:	2300      	movs	r3, #0
 80114e6:	f043 0301 	orr.w	r3, r3, #1
 80114ea:	8113      	strh	r3, [r2, #8]
    p_cdc->line_coding.stop_bits = 0;
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	2200      	movs	r2, #0
 80114f0:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	2200      	movs	r2, #0
 80114f6:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	2208      	movs	r2, #8
 80114fc:	731a      	strb	r2, [r3, #12]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	f103 0010 	add.w	r0, r3, #16
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	f103 0148 	add.w	r1, r3, #72	; 0x48
 801150a:	2300      	movs	r3, #0
 801150c:	9300      	str	r3, [sp, #0]
 801150e:	2301      	movs	r3, #1
 8011510:	2240      	movs	r2, #64	; 0x40
 8011512:	f001 fd9f 	bl	8013054 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8011522:	2301      	movs	r3, #1
 8011524:	9300      	str	r3, [sp, #0]
 8011526:	2301      	movs	r3, #1
 8011528:	2240      	movs	r2, #64	; 0x40
 801152a:	f001 fd93 	bl	8013054 <tu_fifo_config>

#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	f103 0410 	add.w	r4, r3, #16
 8011534:	69bb      	ldr	r3, [r7, #24]
 8011536:	33c8      	adds	r3, #200	; 0xc8
 8011538:	4618      	mov	r0, r3
 801153a:	f7ff fe1e 	bl	801117a <osal_mutex_create>
 801153e:	4603      	mov	r3, r0
 8011540:	60bc      	str	r4, [r7, #8]
 8011542:	2200      	movs	r2, #0
 8011544:	607a      	str	r2, [r7, #4]
 8011546:	603b      	str	r3, [r7, #0]

#if CFG_FIFO_MUTEX
TU_ATTR_ALWAYS_INLINE static inline
void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t write_mutex_hdl, tu_fifo_mutex_t read_mutex_hdl)
{
  f->mutex_wr = write_mutex_hdl;
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	615a      	str	r2, [r3, #20]
  f->mutex_rd = read_mutex_hdl;
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	683a      	ldr	r2, [r7, #0]
 8011552:	619a      	str	r2, [r3, #24]
}
 8011554:	bf00      	nop
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8011562:	4618      	mov	r0, r3
 8011564:	f7ff fe09 	bl	801117a <osal_mutex_create>
 8011568:	4603      	mov	r3, r0
 801156a:	617c      	str	r4, [r7, #20]
 801156c:	613b      	str	r3, [r7, #16]
 801156e:	2300      	movs	r3, #0
 8011570:	60fb      	str	r3, [r7, #12]
  f->mutex_wr = write_mutex_hdl;
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	693a      	ldr	r2, [r7, #16]
 8011576:	615a      	str	r2, [r3, #20]
  f->mutex_rd = read_mutex_hdl;
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	619a      	str	r2, [r3, #24]
}
 801157e:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8011580:	7ffb      	ldrb	r3, [r7, #31]
 8011582:	3301      	adds	r3, #1
 8011584:	77fb      	strb	r3, [r7, #31]
 8011586:	7ffb      	ldrb	r3, [r7, #31]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d097      	beq.n	80114bc <cdcd_init+0x18>
#endif
  }
}
 801158c:	bf00      	nop
 801158e:	bf00      	nop
 8011590:	3724      	adds	r7, #36	; 0x24
 8011592:	46bd      	mov	sp, r7
 8011594:	bd90      	pop	{r4, r7, pc}
 8011596:	bf00      	nop
 8011598:	20008eec 	.word	0x20008eec

0801159c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b084      	sub	sp, #16
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	4603      	mov	r3, r0
 80115a4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80115a6:	2300      	movs	r3, #0
 80115a8:	73fb      	strb	r3, [r7, #15]
 80115aa:	e01f      	b.n	80115ec <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80115ac:	7bfb      	ldrb	r3, [r7, #15]
 80115ae:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80115b2:	fb02 f303 	mul.w	r3, r2, r3
 80115b6:	4a11      	ldr	r2, [pc, #68]	; (80115fc <cdcd_reset+0x60>)
 80115b8:	4413      	add	r3, r2
 80115ba:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 80115bc:	2205      	movs	r2, #5
 80115be:	2100      	movs	r1, #0
 80115c0:	68b8      	ldr	r0, [r7, #8]
 80115c2:	f006 fac8 	bl	8017b56 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	3310      	adds	r3, #16
 80115ca:	4618      	mov	r0, r3
 80115cc:	f002 f9e1 	bl	8013992 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	332c      	adds	r3, #44	; 0x2c
 80115d4:	4618      	mov	r0, r3
 80115d6:	f002 f9dc 	bl	8013992 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	332c      	adds	r3, #44	; 0x2c
 80115de:	2101      	movs	r1, #1
 80115e0:	4618      	mov	r0, r3
 80115e2:	f002 fa08 	bl	80139f6 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80115e6:	7bfb      	ldrb	r3, [r7, #15]
 80115e8:	3301      	adds	r3, #1
 80115ea:	73fb      	strb	r3, [r7, #15]
 80115ec:	7bfb      	ldrb	r3, [r7, #15]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d0dc      	beq.n	80115ac <cdcd_reset+0x10>
  }
}
 80115f2:	bf00      	nop
 80115f4:	bf00      	nop
 80115f6:	3710      	adds	r7, #16
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}
 80115fc:	20008eec 	.word	0x20008eec

08011600 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b08c      	sub	sp, #48	; 0x30
 8011604:	af02      	add	r7, sp, #8
 8011606:	4603      	mov	r3, r0
 8011608:	6039      	str	r1, [r7, #0]
 801160a:	71fb      	strb	r3, [r7, #7]
 801160c:	4613      	mov	r3, r2
 801160e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	795b      	ldrb	r3, [r3, #5]
 8011614:	2b02      	cmp	r3, #2
 8011616:	d103      	bne.n	8011620 <cdcd_open+0x20>
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	799b      	ldrb	r3, [r3, #6]
 801161c:	2b02      	cmp	r3, #2
 801161e:	d001      	beq.n	8011624 <cdcd_open+0x24>
 8011620:	2300      	movs	r3, #0
 8011622:	e0cd      	b.n	80117c0 <cdcd_open+0x1c0>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8011624:	2300      	movs	r3, #0
 8011626:	627b      	str	r3, [r7, #36]	; 0x24
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8011628:	2300      	movs	r3, #0
 801162a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801162e:	e01a      	b.n	8011666 <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8011630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011634:	4a64      	ldr	r2, [pc, #400]	; (80117c8 <cdcd_open+0x1c8>)
 8011636:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801163a:	fb01 f303 	mul.w	r3, r1, r3
 801163e:	4413      	add	r3, r2
 8011640:	3302      	adds	r3, #2
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d109      	bne.n	801165c <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8011648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801164c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011650:	fb02 f303 	mul.w	r3, r2, r3
 8011654:	4a5c      	ldr	r2, [pc, #368]	; (80117c8 <cdcd_open+0x1c8>)
 8011656:	4413      	add	r3, r2
 8011658:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801165a:	e008      	b.n	801166e <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 801165c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011660:	3301      	adds	r3, #1
 8011662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011666:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801166a:	2b00      	cmp	r3, #0
 801166c:	d0e0      	beq.n	8011630 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 801166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011670:	2b00      	cmp	r3, #0
 8011672:	d110      	bne.n	8011696 <cdcd_open+0x96>
 8011674:	f44f 7290 	mov.w	r2, #288	; 0x120
 8011678:	4954      	ldr	r1, [pc, #336]	; (80117cc <cdcd_open+0x1cc>)
 801167a:	4855      	ldr	r0, [pc, #340]	; (80117d0 <cdcd_open+0x1d0>)
 801167c:	f006 fb08 	bl	8017c90 <iprintf>
 8011680:	4b54      	ldr	r3, [pc, #336]	; (80117d4 <cdcd_open+0x1d4>)
 8011682:	60fb      	str	r3, [r7, #12]
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	f003 0301 	and.w	r3, r3, #1
 801168c:	2b00      	cmp	r3, #0
 801168e:	d000      	beq.n	8011692 <cdcd_open+0x92>
 8011690:	be00      	bkpt	0x0000
 8011692:	2300      	movs	r3, #0
 8011694:	e094      	b.n	80117c0 <cdcd_open+0x1c0>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	789a      	ldrb	r2, [r3, #2]
 801169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169c:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 801169e:	2309      	movs	r3, #9
 80116a0:	843b      	strh	r3, [r7, #32]
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 80116a2:	6838      	ldr	r0, [r7, #0]
 80116a4:	f7ff fd3f 	bl	8011126 <tu_desc_next>
 80116a8:	61f8      	str	r0, [r7, #28]

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 80116aa:	e00b      	b.n	80116c4 <cdcd_open+0xc4>
  {
    drv_len += tu_desc_len(p_desc);
 80116ac:	69f8      	ldr	r0, [r7, #28]
 80116ae:	f7ff fd58 	bl	8011162 <tu_desc_len>
 80116b2:	4603      	mov	r3, r0
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	8c3b      	ldrh	r3, [r7, #32]
 80116b8:	4413      	add	r3, r2
 80116ba:	843b      	strh	r3, [r7, #32]
    p_desc   = tu_desc_next(p_desc);
 80116bc:	69f8      	ldr	r0, [r7, #28]
 80116be:	f7ff fd32 	bl	8011126 <tu_desc_next>
 80116c2:	61f8      	str	r0, [r7, #28]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 80116c4:	69f8      	ldr	r0, [r7, #28]
 80116c6:	f7ff fd3f 	bl	8011148 <tu_desc_type>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b24      	cmp	r3, #36	; 0x24
 80116ce:	d103      	bne.n	80116d8 <cdcd_open+0xd8>
 80116d0:	8c3a      	ldrh	r2, [r7, #32]
 80116d2:	88bb      	ldrh	r3, [r7, #4]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d9e9      	bls.n	80116ac <cdcd_open+0xac>
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80116d8:	69f8      	ldr	r0, [r7, #28]
 80116da:	f7ff fd35 	bl	8011148 <tu_desc_type>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b05      	cmp	r3, #5
 80116e2:	d12d      	bne.n	8011740 <cdcd_open+0x140>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	61bb      	str	r3, [r7, #24]

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 80116e8:	79fb      	ldrb	r3, [r7, #7]
 80116ea:	69b9      	ldr	r1, [r7, #24]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f003 fc91 	bl	8015014 <usbd_edpt_open>
 80116f2:	4603      	mov	r3, r0
 80116f4:	f083 0301 	eor.w	r3, r3, #1
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d010      	beq.n	8011720 <cdcd_open+0x120>
 80116fe:	f44f 729a 	mov.w	r2, #308	; 0x134
 8011702:	4932      	ldr	r1, [pc, #200]	; (80117cc <cdcd_open+0x1cc>)
 8011704:	4832      	ldr	r0, [pc, #200]	; (80117d0 <cdcd_open+0x1d0>)
 8011706:	f006 fac3 	bl	8017c90 <iprintf>
 801170a:	4b32      	ldr	r3, [pc, #200]	; (80117d4 <cdcd_open+0x1d4>)
 801170c:	617b      	str	r3, [r7, #20]
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f003 0301 	and.w	r3, r3, #1
 8011716:	2b00      	cmp	r3, #0
 8011718:	d000      	beq.n	801171c <cdcd_open+0x11c>
 801171a:	be00      	bkpt	0x0000
 801171c:	2300      	movs	r3, #0
 801171e:	e04f      	b.n	80117c0 <cdcd_open+0x1c0>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	789a      	ldrb	r2, [r3, #2]
 8011724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011726:	705a      	strb	r2, [r3, #1]

    drv_len += tu_desc_len(p_desc);
 8011728:	69f8      	ldr	r0, [r7, #28]
 801172a:	f7ff fd1a 	bl	8011162 <tu_desc_len>
 801172e:	4603      	mov	r3, r0
 8011730:	b29a      	uxth	r2, r3
 8011732:	8c3b      	ldrh	r3, [r7, #32]
 8011734:	4413      	add	r3, r2
 8011736:	843b      	strh	r3, [r7, #32]
    p_desc   = tu_desc_next(p_desc);
 8011738:	69f8      	ldr	r0, [r7, #28]
 801173a:	f7ff fcf4 	bl	8011126 <tu_desc_next>
 801173e:	61f8      	str	r0, [r7, #28]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8011740:	69f8      	ldr	r0, [r7, #28]
 8011742:	f7ff fd01 	bl	8011148 <tu_desc_type>
 8011746:	4603      	mov	r3, r0
 8011748:	2b04      	cmp	r3, #4
 801174a:	d135      	bne.n	80117b8 <cdcd_open+0x1b8>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8011750:	2b0a      	cmp	r3, #10
 8011752:	d131      	bne.n	80117b8 <cdcd_open+0x1b8>
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8011754:	69f8      	ldr	r0, [r7, #28]
 8011756:	f7ff fd04 	bl	8011162 <tu_desc_len>
 801175a:	4603      	mov	r3, r0
 801175c:	b29a      	uxth	r2, r3
 801175e:	8c3b      	ldrh	r3, [r7, #32]
 8011760:	4413      	add	r3, r2
 8011762:	843b      	strh	r3, [r7, #32]
    p_desc   = tu_desc_next(p_desc);
 8011764:	69f8      	ldr	r0, [r7, #28]
 8011766:	f7ff fcde 	bl	8011126 <tu_desc_next>
 801176a:	61f8      	str	r0, [r7, #28]

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 801176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176e:	3303      	adds	r3, #3
 8011770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011772:	3202      	adds	r2, #2
 8011774:	79f8      	ldrb	r0, [r7, #7]
 8011776:	9201      	str	r2, [sp, #4]
 8011778:	9300      	str	r3, [sp, #0]
 801177a:	2302      	movs	r3, #2
 801177c:	2202      	movs	r2, #2
 801177e:	69f9      	ldr	r1, [r7, #28]
 8011780:	f003 fbd6 	bl	8014f30 <usbd_open_edpt_pair>
 8011784:	4603      	mov	r3, r0
 8011786:	f083 0301 	eor.w	r3, r3, #1
 801178a:	b2db      	uxtb	r3, r3
 801178c:	2b00      	cmp	r3, #0
 801178e:	d010      	beq.n	80117b2 <cdcd_open+0x1b2>
 8011790:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8011794:	490d      	ldr	r1, [pc, #52]	; (80117cc <cdcd_open+0x1cc>)
 8011796:	480e      	ldr	r0, [pc, #56]	; (80117d0 <cdcd_open+0x1d0>)
 8011798:	f006 fa7a 	bl	8017c90 <iprintf>
 801179c:	4b0d      	ldr	r3, [pc, #52]	; (80117d4 <cdcd_open+0x1d4>)
 801179e:	613b      	str	r3, [r7, #16]
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f003 0301 	and.w	r3, r3, #1
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d000      	beq.n	80117ae <cdcd_open+0x1ae>
 80117ac:	be00      	bkpt	0x0000
 80117ae:	2300      	movs	r3, #0
 80117b0:	e006      	b.n	80117c0 <cdcd_open+0x1c0>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 80117b2:	8c3b      	ldrh	r3, [r7, #32]
 80117b4:	330e      	adds	r3, #14
 80117b6:	843b      	strh	r3, [r7, #32]
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 80117b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117ba:	f7ff fceb 	bl	8011194 <_prep_out_transaction>

  return drv_len;
 80117be:	8c3b      	ldrh	r3, [r7, #32]
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3728      	adds	r7, #40	; 0x28
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	20008eec 	.word	0x20008eec
 80117cc:	0801b318 	.word	0x0801b318
 80117d0:	08019cdc 	.word	0x08019cdc
 80117d4:	e000edf0 	.word	0xe000edf0

080117d8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b08a      	sub	sp, #40	; 0x28
 80117dc:	af00      	add	r7, sp, #0
 80117de:	4603      	mov	r3, r0
 80117e0:	603a      	str	r2, [r7, #0]
 80117e2:	71fb      	strb	r3, [r7, #7]
 80117e4:	460b      	mov	r3, r1
 80117e6:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80117f0:	b2db      	uxtb	r3, r3
 80117f2:	2b20      	cmp	r3, #32
 80117f4:	d001      	beq.n	80117fa <cdcd_control_xfer_cb+0x22>
 80117f6:	2300      	movs	r3, #0
 80117f8:	e0dc      	b.n	80119b4 <cdcd_control_xfer_cb+0x1dc>

  uint8_t itf = 0;
 80117fa:	2300      	movs	r3, #0
 80117fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8011800:	4b6e      	ldr	r3, [pc, #440]	; (80119bc <cdcd_control_xfer_cb+0x1e4>)
 8011802:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8011804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011808:	2b00      	cmp	r3, #0
 801180a:	d001      	beq.n	8011810 <cdcd_control_xfer_cb+0x38>
 801180c:	2300      	movs	r3, #0
 801180e:	e0d1      	b.n	80119b4 <cdcd_control_xfer_cb+0x1dc>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	b29a      	uxth	r2, r3
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	889b      	ldrh	r3, [r3, #4]
 801181a:	b29b      	uxth	r3, r3
 801181c:	429a      	cmp	r2, r3
 801181e:	d009      	beq.n	8011834 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8011820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011824:	3301      	adds	r3, #1
 8011826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801182a:	6a3b      	ldr	r3, [r7, #32]
 801182c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8011830:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8011832:	e7e7      	b.n	8011804 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8011834:	bf00      	nop
  }

  switch ( request->bRequest )
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	785b      	ldrb	r3, [r3, #1]
 801183a:	3b20      	subs	r3, #32
 801183c:	2b03      	cmp	r3, #3
 801183e:	f200 80af 	bhi.w	80119a0 <cdcd_control_xfer_cb+0x1c8>
 8011842:	a201      	add	r2, pc, #4	; (adr r2, 8011848 <cdcd_control_xfer_cb+0x70>)
 8011844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011848:	08011859 	.word	0x08011859
 801184c:	08011897 	.word	0x08011897
 8011850:	080118b5 	.word	0x080118b5
 8011854:	08011969 	.word	0x08011969
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8011858:	79bb      	ldrb	r3, [r7, #6]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d10a      	bne.n	8011874 <cdcd_control_xfer_cb+0x9c>
      {
        TU_LOG2("  Set Line Coding\r\n");
 801185e:	4858      	ldr	r0, [pc, #352]	; (80119c0 <cdcd_control_xfer_cb+0x1e8>)
 8011860:	f006 fab2 	bl	8017dc8 <puts>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8011864:	6a3b      	ldr	r3, [r7, #32]
 8011866:	1d9a      	adds	r2, r3, #6
 8011868:	79f8      	ldrb	r0, [r7, #7]
 801186a:	2307      	movs	r3, #7
 801186c:	6839      	ldr	r1, [r7, #0]
 801186e:	f003 fef1 	bl	8015654 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8011872:	e097      	b.n	80119a4 <cdcd_control_xfer_cb+0x1cc>
      else if ( stage == CONTROL_STAGE_ACK)
 8011874:	79bb      	ldrb	r3, [r7, #6]
 8011876:	2b02      	cmp	r3, #2
 8011878:	f040 8094 	bne.w	80119a4 <cdcd_control_xfer_cb+0x1cc>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 801187c:	4b51      	ldr	r3, [pc, #324]	; (80119c4 <cdcd_control_xfer_cb+0x1ec>)
 801187e:	2b00      	cmp	r3, #0
 8011880:	f000 8090 	beq.w	80119a4 <cdcd_control_xfer_cb+0x1cc>
 8011884:	6a3b      	ldr	r3, [r7, #32]
 8011886:	1d9a      	adds	r2, r3, #6
 8011888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801188c:	4611      	mov	r1, r2
 801188e:	4618      	mov	r0, r3
 8011890:	f3af 8000 	nop.w
    break;
 8011894:	e086      	b.n	80119a4 <cdcd_control_xfer_cb+0x1cc>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8011896:	79bb      	ldrb	r3, [r7, #6]
 8011898:	2b00      	cmp	r3, #0
 801189a:	f040 8085 	bne.w	80119a8 <cdcd_control_xfer_cb+0x1d0>
      {
        TU_LOG2("  Get Line Coding\r\n");
 801189e:	484a      	ldr	r0, [pc, #296]	; (80119c8 <cdcd_control_xfer_cb+0x1f0>)
 80118a0:	f006 fa92 	bl	8017dc8 <puts>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80118a4:	6a3b      	ldr	r3, [r7, #32]
 80118a6:	1d9a      	adds	r2, r3, #6
 80118a8:	79f8      	ldrb	r0, [r7, #7]
 80118aa:	2307      	movs	r3, #7
 80118ac:	6839      	ldr	r1, [r7, #0]
 80118ae:	f003 fed1 	bl	8015654 <tud_control_xfer>
      }
    break;
 80118b2:	e079      	b.n	80119a8 <cdcd_control_xfer_cb+0x1d0>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 80118b4:	79bb      	ldrb	r3, [r7, #6]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d105      	bne.n	80118c6 <cdcd_control_xfer_cb+0xee>
      {
        tud_control_status(rhport, request);
 80118ba:	79fb      	ldrb	r3, [r7, #7]
 80118bc:	6839      	ldr	r1, [r7, #0]
 80118be:	4618      	mov	r0, r3
 80118c0:	f003 fe6a 	bl	8015598 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 80118c4:	e072      	b.n	80119ac <cdcd_control_xfer_cb+0x1d4>
      else if (stage == CONTROL_STAGE_ACK)
 80118c6:	79bb      	ldrb	r3, [r7, #6]
 80118c8:	2b02      	cmp	r3, #2
 80118ca:	d16f      	bne.n	80119ac <cdcd_control_xfer_cb+0x1d4>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	885b      	ldrh	r3, [r3, #2]
 80118d0:	b29b      	uxth	r3, r3
 80118d2:	613b      	str	r3, [r7, #16]
 80118d4:	2300      	movs	r3, #0
 80118d6:	73fb      	strb	r3, [r7, #15]
 80118d8:	7bfb      	ldrb	r3, [r7, #15]
 80118da:	693a      	ldr	r2, [r7, #16]
 80118dc:	fa22 f303 	lsr.w	r3, r2, r3
 80118e0:	f003 0301 	and.w	r3, r3, #1
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	bf14      	ite	ne
 80118e8:	2301      	movne	r3, #1
 80118ea:	2300      	moveq	r3, #0
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	885b      	ldrh	r3, [r3, #2]
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	61bb      	str	r3, [r7, #24]
 80118f8:	2301      	movs	r3, #1
 80118fa:	75fb      	strb	r3, [r7, #23]
 80118fc:	7dfb      	ldrb	r3, [r7, #23]
 80118fe:	69ba      	ldr	r2, [r7, #24]
 8011900:	fa22 f303 	lsr.w	r3, r2, r3
 8011904:	f003 0301 	and.w	r3, r3, #1
 8011908:	2b00      	cmp	r3, #0
 801190a:	bf14      	ite	ne
 801190c:	2301      	movne	r3, #1
 801190e:	2300      	moveq	r3, #0
 8011910:	b2db      	uxtb	r3, r3
 8011912:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	885b      	ldrh	r3, [r3, #2]
 8011918:	b29b      	uxth	r3, r3
 801191a:	b2da      	uxtb	r2, r3
 801191c:	6a3b      	ldr	r3, [r7, #32]
 801191e:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8011920:	6a3b      	ldr	r3, [r7, #32]
 8011922:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8011926:	7ffb      	ldrb	r3, [r7, #31]
 8011928:	2b00      	cmp	r3, #0
 801192a:	bf14      	ite	ne
 801192c:	2301      	movne	r3, #1
 801192e:	2300      	moveq	r3, #0
 8011930:	b2db      	uxtb	r3, r3
 8011932:	f083 0301 	eor.w	r3, r3, #1
 8011936:	b2db      	uxtb	r3, r3
 8011938:	f003 0301 	and.w	r3, r3, #1
 801193c:	b2db      	uxtb	r3, r3
 801193e:	4619      	mov	r1, r3
 8011940:	4610      	mov	r0, r2
 8011942:	f002 f858 	bl	80139f6 <tu_fifo_set_overwritable>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);
 8011946:	7ffb      	ldrb	r3, [r7, #31]
 8011948:	7fba      	ldrb	r2, [r7, #30]
 801194a:	4619      	mov	r1, r3
 801194c:	481f      	ldr	r0, [pc, #124]	; (80119cc <cdcd_control_xfer_cb+0x1f4>)
 801194e:	f006 f99f 	bl	8017c90 <iprintf>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8011952:	4b1f      	ldr	r3, [pc, #124]	; (80119d0 <cdcd_control_xfer_cb+0x1f8>)
 8011954:	2b00      	cmp	r3, #0
 8011956:	d029      	beq.n	80119ac <cdcd_control_xfer_cb+0x1d4>
 8011958:	7fba      	ldrb	r2, [r7, #30]
 801195a:	7ff9      	ldrb	r1, [r7, #31]
 801195c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011960:	4618      	mov	r0, r3
 8011962:	f3af 8000 	nop.w
    break;
 8011966:	e021      	b.n	80119ac <cdcd_control_xfer_cb+0x1d4>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8011968:	79bb      	ldrb	r3, [r7, #6]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d105      	bne.n	801197a <cdcd_control_xfer_cb+0x1a2>
      {
        tud_control_status(rhport, request);
 801196e:	79fb      	ldrb	r3, [r7, #7]
 8011970:	6839      	ldr	r1, [r7, #0]
 8011972:	4618      	mov	r0, r3
 8011974:	f003 fe10 	bl	8015598 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8011978:	e01a      	b.n	80119b0 <cdcd_control_xfer_cb+0x1d8>
      else if (stage == CONTROL_STAGE_ACK)
 801197a:	79bb      	ldrb	r3, [r7, #6]
 801197c:	2b02      	cmp	r3, #2
 801197e:	d117      	bne.n	80119b0 <cdcd_control_xfer_cb+0x1d8>
        TU_LOG2("  Send Break\r\n");
 8011980:	4814      	ldr	r0, [pc, #80]	; (80119d4 <cdcd_control_xfer_cb+0x1fc>)
 8011982:	f006 fa21 	bl	8017dc8 <puts>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8011986:	4b14      	ldr	r3, [pc, #80]	; (80119d8 <cdcd_control_xfer_cb+0x200>)
 8011988:	2b00      	cmp	r3, #0
 801198a:	d011      	beq.n	80119b0 <cdcd_control_xfer_cb+0x1d8>
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	885b      	ldrh	r3, [r3, #2]
 8011990:	b29a      	uxth	r2, r3
 8011992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011996:	4611      	mov	r1, r2
 8011998:	4618      	mov	r0, r3
 801199a:	f3af 8000 	nop.w
    break;
 801199e:	e007      	b.n	80119b0 <cdcd_control_xfer_cb+0x1d8>

    default: return false; // stall unsupported request
 80119a0:	2300      	movs	r3, #0
 80119a2:	e007      	b.n	80119b4 <cdcd_control_xfer_cb+0x1dc>
    break;
 80119a4:	bf00      	nop
 80119a6:	e004      	b.n	80119b2 <cdcd_control_xfer_cb+0x1da>
    break;
 80119a8:	bf00      	nop
 80119aa:	e002      	b.n	80119b2 <cdcd_control_xfer_cb+0x1da>
    break;
 80119ac:	bf00      	nop
 80119ae:	e000      	b.n	80119b2 <cdcd_control_xfer_cb+0x1da>
    break;
 80119b0:	bf00      	nop
  }

  return true;
 80119b2:	2301      	movs	r3, #1
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3728      	adds	r7, #40	; 0x28
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	20008eec 	.word	0x20008eec
 80119c0:	08019cf4 	.word	0x08019cf4
 80119c4:	00000000 	.word	0x00000000
 80119c8:	08019d08 	.word	0x08019d08
 80119cc:	08019d1c 	.word	0x08019d1c
 80119d0:	00000000 	.word	0x00000000
 80119d4:	08019d4c 	.word	0x08019d4c
 80119d8:	00000000 	.word	0x00000000

080119dc <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b086      	sub	sp, #24
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	603b      	str	r3, [r7, #0]
 80119e4:	4603      	mov	r3, r0
 80119e6:	71fb      	strb	r3, [r7, #7]
 80119e8:	460b      	mov	r3, r1
 80119ea:	71bb      	strb	r3, [r7, #6]
 80119ec:	4613      	mov	r3, r2
 80119ee:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 80119f0:	2300      	movs	r3, #0
 80119f2:	75fb      	strb	r3, [r7, #23]
 80119f4:	e014      	b.n	8011a20 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 80119f6:	7dfb      	ldrb	r3, [r7, #23]
 80119f8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80119fc:	fb02 f303 	mul.w	r3, r2, r3
 8011a00:	4a58      	ldr	r2, [pc, #352]	; (8011b64 <cdcd_xfer_cb+0x188>)
 8011a02:	4413      	add	r3, r2
 8011a04:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	78db      	ldrb	r3, [r3, #3]
 8011a0a:	79ba      	ldrb	r2, [r7, #6]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d00a      	beq.n	8011a26 <cdcd_xfer_cb+0x4a>
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	789b      	ldrb	r3, [r3, #2]
 8011a14:	79ba      	ldrb	r2, [r7, #6]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d005      	beq.n	8011a26 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8011a1a:	7dfb      	ldrb	r3, [r7, #23]
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	75fb      	strb	r3, [r7, #23]
 8011a20:	7dfb      	ldrb	r3, [r7, #23]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d0e7      	beq.n	80119f6 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8011a26:	7dfb      	ldrb	r3, [r7, #23]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d010      	beq.n	8011a4e <cdcd_xfer_cb+0x72>
 8011a2c:	f240 12b1 	movw	r2, #433	; 0x1b1
 8011a30:	494d      	ldr	r1, [pc, #308]	; (8011b68 <cdcd_xfer_cb+0x18c>)
 8011a32:	484e      	ldr	r0, [pc, #312]	; (8011b6c <cdcd_xfer_cb+0x190>)
 8011a34:	f006 f92c 	bl	8017c90 <iprintf>
 8011a38:	4b4d      	ldr	r3, [pc, #308]	; (8011b70 <cdcd_xfer_cb+0x194>)
 8011a3a:	60bb      	str	r3, [r7, #8]
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f003 0301 	and.w	r3, r3, #1
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d000      	beq.n	8011a4a <cdcd_xfer_cb+0x6e>
 8011a48:	be00      	bkpt	0x0000
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	e086      	b.n	8011b5c <cdcd_xfer_cb+0x180>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	78db      	ldrb	r3, [r3, #3]
 8011a52:	79ba      	ldrb	r2, [r7, #6]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d14c      	bne.n	8011af2 <cdcd_xfer_cb+0x116>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, xferred_bytes);
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	f103 0010 	add.w	r0, r3, #16
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8011a64:	683a      	ldr	r2, [r7, #0]
 8011a66:	b292      	uxth	r2, r2
 8011a68:	4619      	mov	r1, r3
 8011a6a:	f001 ff6e 	bl	801394a <tu_fifo_write_n>
    
    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8011a6e:	4b41      	ldr	r3, [pc, #260]	; (8011b74 <cdcd_xfer_cb+0x198>)
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d029      	beq.n	8011ac8 <cdcd_xfer_cb+0xec>
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	795b      	ldrb	r3, [r3, #5]
 8011a78:	2bff      	cmp	r3, #255	; 0xff
 8011a7a:	d025      	beq.n	8011ac8 <cdcd_xfer_cb+0xec>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	60fb      	str	r3, [r7, #12]
 8011a80:	e01e      	b.n	8011ac0 <cdcd_xfer_cb+0xe4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	795a      	ldrb	r2, [r3, #5]
 8011a86:	6939      	ldr	r1, [r7, #16]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	440b      	add	r3, r1
 8011a8c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d111      	bne.n	8011aba <cdcd_xfer_cb+0xde>
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	3310      	adds	r3, #16
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f001 ff0b 	bl	80138b6 <tu_fifo_empty>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	f083 0301 	eor.w	r3, r3, #1
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d006      	beq.n	8011aba <cdcd_xfer_cb+0xde>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	795a      	ldrb	r2, [r3, #5]
 8011ab0:	7dfb      	ldrb	r3, [r7, #23]
 8011ab2:	4611      	mov	r1, r2
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	3301      	adds	r3, #1
 8011abe:	60fb      	str	r3, [r7, #12]
 8011ac0:	68fa      	ldr	r2, [r7, #12]
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d3dc      	bcc.n	8011a82 <cdcd_xfer_cb+0xa6>
        }
      }
    }
    
    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8011ac8:	4b2b      	ldr	r3, [pc, #172]	; (8011b78 <cdcd_xfer_cb+0x19c>)
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00e      	beq.n	8011aec <cdcd_xfer_cb+0x110>
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	3310      	adds	r3, #16
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f001 feef 	bl	80138b6 <tu_fifo_empty>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	f083 0301 	eor.w	r3, r3, #1
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d003      	beq.n	8011aec <cdcd_xfer_cb+0x110>
 8011ae4:	7dfb      	ldrb	r3, [r7, #23]
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f3af 8000 	nop.w
    
    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8011aec:	6938      	ldr	r0, [r7, #16]
 8011aee:	f7ff fb51 	bl	8011194 <_prep_out_transaction>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	789b      	ldrb	r3, [r3, #2]
 8011af6:	79ba      	ldrb	r2, [r7, #6]
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d12e      	bne.n	8011b5a <cdcd_xfer_cb+0x17e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8011afc:	4b1f      	ldr	r3, [pc, #124]	; (8011b7c <cdcd_xfer_cb+0x1a0>)
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d003      	beq.n	8011b0a <cdcd_xfer_cb+0x12e>
 8011b02:	7dfb      	ldrb	r3, [r7, #23]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7ff fc2b 	bl	8011368 <tud_cdc_n_write_flush>
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d120      	bne.n	8011b5a <cdcd_xfer_cb+0x17e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	332c      	adds	r3, #44	; 0x2c
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f001 feac 	bl	801387a <tu_fifo_count>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d118      	bne.n	8011b5a <cdcd_xfer_cb+0x17e>
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d015      	beq.n	8011b5a <cdcd_xfer_cb+0x17e>
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d110      	bne.n	8011b5a <cdcd_xfer_cb+0x17e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	789a      	ldrb	r2, [r3, #2]
 8011b3c:	79fb      	ldrb	r3, [r7, #7]
 8011b3e:	4611      	mov	r1, r2
 8011b40:	4618      	mov	r0, r3
 8011b42:	f003 fab5 	bl	80150b0 <usbd_edpt_claim>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d006      	beq.n	8011b5a <cdcd_xfer_cb+0x17e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	7899      	ldrb	r1, [r3, #2]
 8011b50:	79f8      	ldrb	r0, [r7, #7]
 8011b52:	2300      	movs	r3, #0
 8011b54:	2200      	movs	r2, #0
 8011b56:	f003 fb85 	bl	8015264 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8011b5a:	2301      	movs	r3, #1
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3718      	adds	r7, #24
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	20008eec 	.word	0x20008eec
 8011b68:	0801b324 	.word	0x0801b324
 8011b6c:	08019cdc 	.word	0x08019cdc
 8011b70:	e000edf0 	.word	0xe000edf0
	...

08011b80 <tu_desc_next>:
{
 8011b80:	b480      	push	{r7}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	461a      	mov	r2, r3
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	4413      	add	r3, r2
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3714      	adds	r7, #20
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba0:	4770      	bx	lr
	...

08011ba4 <tu_lookup_find>:
  uint16_t count;
  tu_lookup_entry_t const* items;
} tu_lookup_table_t;

static inline const char* tu_lookup_find(tu_lookup_table_t const* p_table, uint32_t key)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b084      	sub	sp, #16
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
  static char not_found[11];

  for(uint16_t i=0; i<p_table->count; i++)
 8011bae:	2300      	movs	r3, #0
 8011bb0:	81fb      	strh	r3, [r7, #14]
 8011bb2:	e012      	b.n	8011bda <tu_lookup_find+0x36>
  {
    if (p_table->items[i].key == key) return p_table->items[i].data;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	685a      	ldr	r2, [r3, #4]
 8011bb8:	89fb      	ldrh	r3, [r7, #14]
 8011bba:	00db      	lsls	r3, r3, #3
 8011bbc:	4413      	add	r3, r2
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	683a      	ldr	r2, [r7, #0]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d106      	bne.n	8011bd4 <tu_lookup_find+0x30>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	685a      	ldr	r2, [r3, #4]
 8011bca:	89fb      	ldrh	r3, [r7, #14]
 8011bcc:	00db      	lsls	r3, r3, #3
 8011bce:	4413      	add	r3, r2
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	e00d      	b.n	8011bf0 <tu_lookup_find+0x4c>
  for(uint16_t i=0; i<p_table->count; i++)
 8011bd4:	89fb      	ldrh	r3, [r7, #14]
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	81fb      	strh	r3, [r7, #14]
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	881b      	ldrh	r3, [r3, #0]
 8011bde:	89fa      	ldrh	r2, [r7, #14]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d3e7      	bcc.n	8011bb4 <tu_lookup_find+0x10>
  }

  // not found return the key value in hex
  sprintf(not_found, "0x%08lX", (unsigned long) key);
 8011be4:	683a      	ldr	r2, [r7, #0]
 8011be6:	4904      	ldr	r1, [pc, #16]	; (8011bf8 <tu_lookup_find+0x54>)
 8011be8:	4804      	ldr	r0, [pc, #16]	; (8011bfc <tu_lookup_find+0x58>)
 8011bea:	f006 f96f 	bl	8017ecc <siprintf>

  return not_found;
 8011bee:	4b03      	ldr	r3, [pc, #12]	; (8011bfc <tu_lookup_find+0x58>)
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3710      	adds	r7, #16
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	08019d5c 	.word	0x08019d5c
 8011bfc:	20009304 	.word	0x20009304

08011c00 <send_csw>:
{
  return tu_bit_test(dir, 7);
}

static inline bool send_csw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	4603      	mov	r3, r0
 8011c08:	6039      	str	r1, [r7, #0]
 8011c0a:	71fb      	strb	r3, [r7, #7]
  // Data residue is always = host expect - actual transferred
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	689a      	ldr	r2, [r3, #8]
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c14:	1ad2      	subs	r2, r2, r3
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	629a      	str	r2, [r3, #40]	; 0x28

  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	2203      	movs	r2, #3
 8011c1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	f103 0220 	add.w	r2, r3, #32
 8011c2e:	79f8      	ldrb	r0, [r7, #7]
 8011c30:	230d      	movs	r3, #13
 8011c32:	f003 fb17 	bl	8015264 <usbd_edpt_xfer>
 8011c36:	4603      	mov	r3, r0
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3708      	adds	r7, #8
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <prepare_cbw>:

static inline bool prepare_cbw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	4603      	mov	r3, r0
 8011c48:	6039      	str	r1, [r7, #0]
 8011c4a:	71fb      	strb	r3, [r7, #7]
  p_msc->stage = MSC_STAGE_CMD;
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8011c5a:	683a      	ldr	r2, [r7, #0]
 8011c5c:	79f8      	ldrb	r0, [r7, #7]
 8011c5e:	231f      	movs	r3, #31
 8011c60:	f003 fb00 	bl	8015264 <usbd_edpt_xfer>
 8011c64:	4603      	mov	r3, r0
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3708      	adds	r7, #8
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}

08011c6e <fail_scsi_op>:

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
{
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b088      	sub	sp, #32
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	4603      	mov	r3, r0
 8011c76:	6039      	str	r1, [r7, #0]
 8011c78:	71fb      	strb	r3, [r7, #7]
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	71bb      	strb	r3, [r7, #6]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	61fb      	str	r3, [r7, #28]
  msc_csw_t       * p_csw = &p_msc->csw;
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	3320      	adds	r3, #32
 8011c86:	61bb      	str	r3, [r7, #24]

  p_csw->status       = status;
 8011c88:	69bb      	ldr	r3, [r7, #24]
 8011c8a:	79ba      	ldrb	r2, [r7, #6]
 8011c8c:	731a      	strb	r2, [r3, #12]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	689a      	ldr	r2, [r3, #8]
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c96:	1ad2      	subs	r2, r2, r3
 8011c98:	69bb      	ldr	r3, [r7, #24]
 8011c9a:	609a      	str	r2, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	2202      	movs	r2, #2
 8011ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d106      	bne.n	8011cbc <fail_scsi_op+0x4e>
 8011cae:	69fb      	ldr	r3, [r7, #28]
 8011cb0:	7b58      	ldrb	r0, [r3, #13]
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	2220      	movs	r2, #32
 8011cb6:	2105      	movs	r1, #5
 8011cb8:	f000 f8ea 	bl	8011e90 <tud_msc_set_sense>

  // If there is data stage and not yet complete, stall it
  if ( p_cbw->total_bytes && p_csw->data_residue )
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d028      	beq.n	8011d16 <fail_scsi_op+0xa8>
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	689b      	ldr	r3, [r3, #8]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d024      	beq.n	8011d16 <fail_scsi_op+0xa8>
  {
    if ( is_data_in(p_cbw->dir) )
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	7b1b      	ldrb	r3, [r3, #12]
 8011cd0:	75fb      	strb	r3, [r7, #23]
  return tu_bit_test(dir, 7);
 8011cd2:	7dfb      	ldrb	r3, [r7, #23]
 8011cd4:	613b      	str	r3, [r7, #16]
 8011cd6:	2307      	movs	r3, #7
 8011cd8:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8011cda:	7bfb      	ldrb	r3, [r7, #15]
 8011cdc:	693a      	ldr	r2, [r7, #16]
 8011cde:	fa22 f303 	lsr.w	r3, r2, r3
 8011ce2:	f003 0301 	and.w	r3, r3, #1
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	bf14      	ite	ne
 8011cea:	2301      	movne	r3, #1
 8011cec:	2300      	moveq	r3, #0
 8011cee:	b2db      	uxtb	r3, r3
    if ( is_data_in(p_cbw->dir) )
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d008      	beq.n	8011d06 <fail_scsi_op+0x98>
    {
      usbd_edpt_stall(rhport, p_msc->ep_in);
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8011cfa:	79fb      	ldrb	r3, [r7, #7]
 8011cfc:	4611      	mov	r1, r2
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f003 fb5e 	bl	80153c0 <usbd_edpt_stall>
    else
    {
      usbd_edpt_stall(rhport, p_msc->ep_out);
    }
  }
}
 8011d04:	e007      	b.n	8011d16 <fail_scsi_op+0xa8>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8011d0c:	79fb      	ldrb	r3, [r7, #7]
 8011d0e:	4611      	mov	r1, r2
 8011d10:	4618      	mov	r0, r3
 8011d12:	f003 fb55 	bl	80153c0 <usbd_edpt_stall>
}
 8011d16:	bf00      	nop
 8011d18:	3720      	adds	r7, #32
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <rdwr10_get_lba>:

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 8011d1e:	b480      	push	{r7}
 8011d20:	b085      	sub	sp, #20
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	6078      	str	r0, [r7, #4]
  // use offsetof to avoid pointer to the odd/unaligned address
  uint32_t const lba = tu_unaligned_read32(command + offsetof(scsi_write10_t, lba));
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	3302      	adds	r3, #2
 8011d2a:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	60fb      	str	r3, [r7, #12]

  // lba is in Big Endian
  return tu_ntohl(lba);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	ba1b      	rev	r3, r3
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3714      	adds	r7, #20
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr

08011d42 <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(msc_cbw_t const* cbw)
{
 8011d42:	b480      	push	{r7}
 8011d44:	b085      	sub	sp, #20
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
  uint16_t const block_count = tu_unaligned_read16(cbw->command + offsetof(scsi_write10_t, block_count));
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	330f      	adds	r3, #15
 8011d4e:	3307      	adds	r3, #7
 8011d50:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	881b      	ldrh	r3, [r3, #0]
 8011d56:	81fb      	strh	r3, [r7, #14]
  return tu_ntohs(block_count);
 8011d58:	89fb      	ldrh	r3, [r7, #14]
 8011d5a:	ba5b      	rev16	r3, r3
 8011d5c:	b29b      	uxth	r3, r3
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3714      	adds	r7, #20
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <rdwr10_get_blocksize>:

static inline uint16_t rdwr10_get_blocksize(msc_cbw_t const* cbw)
{
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b084      	sub	sp, #16
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
  // first extract block count in the command
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f7ff ffe5 	bl	8011d42 <rdwr10_get_blockcount>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	81fb      	strh	r3, [r7, #14]

  // invalid block count
  if (block_count == 0) return 0;
 8011d7c:	89fb      	ldrh	r3, [r7, #14]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d101      	bne.n	8011d86 <rdwr10_get_blocksize+0x1c>
 8011d82:	2300      	movs	r3, #0
 8011d84:	e005      	b.n	8011d92 <rdwr10_get_blocksize+0x28>

  return (uint16_t) (cbw->total_bytes / block_count);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	689a      	ldr	r2, [r3, #8]
 8011d8a:	89fb      	ldrh	r3, [r7, #14]
 8011d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d90:	b29b      	uxth	r3, r3
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3710      	adds	r7, #16
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
	...

08011d9c <rdwr10_validate_cmd>:

uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b088      	sub	sp, #32
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  uint8_t status = MSC_CSW_STATUS_PASSED;
 8011da4:	2300      	movs	r3, #0
 8011da6:	77fb      	strb	r3, [r7, #31]
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7ff ffca 	bl	8011d42 <rdwr10_get_blockcount>
 8011dae:	4603      	mov	r3, r0
 8011db0:	83bb      	strh	r3, [r7, #28]

  if ( cbw->total_bytes == 0 )
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	689b      	ldr	r3, [r3, #8]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d108      	bne.n	8011dcc <rdwr10_validate_cmd+0x30>
  {
    if ( block_count )
 8011dba:	8bbb      	ldrh	r3, [r7, #28]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d057      	beq.n	8011e70 <rdwr10_validate_cmd+0xd4>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
 8011dc0:	482e      	ldr	r0, [pc, #184]	; (8011e7c <rdwr10_validate_cmd+0xe0>)
 8011dc2:	f006 f801 	bl	8017dc8 <puts>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8011dc6:	2302      	movs	r3, #2
 8011dc8:	77fb      	strb	r3, [r7, #31]
 8011dca:	e051      	b.n	8011e70 <rdwr10_validate_cmd+0xd4>
    {
      // no data transfer, only exist in complaint test suite
    }
  }else
  {
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	7bdb      	ldrb	r3, [r3, #15]
 8011dd0:	2b28      	cmp	r3, #40	; 0x28
 8011dd2:	d11c      	bne.n	8011e0e <rdwr10_validate_cmd+0x72>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	7b1b      	ldrb	r3, [r3, #12]
 8011dd8:	76fb      	strb	r3, [r7, #27]
  return tu_bit_test(dir, 7);
 8011dda:	7efb      	ldrb	r3, [r7, #27]
 8011ddc:	617b      	str	r3, [r7, #20]
 8011dde:	2307      	movs	r3, #7
 8011de0:	74fb      	strb	r3, [r7, #19]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8011de2:	7cfb      	ldrb	r3, [r7, #19]
 8011de4:	697a      	ldr	r2, [r7, #20]
 8011de6:	fa22 f303 	lsr.w	r3, r2, r3
 8011dea:	f003 0301 	and.w	r3, r3, #1
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	bf14      	ite	ne
 8011df2:	2301      	movne	r3, #1
 8011df4:	2300      	moveq	r3, #0
 8011df6:	b2db      	uxtb	r3, r3
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 8011df8:	f083 0301 	eor.w	r3, r3, #1
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d005      	beq.n	8011e0e <rdwr10_validate_cmd+0x72>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 10 (Ho <> Di)\r\n");
 8011e02:	481f      	ldr	r0, [pc, #124]	; (8011e80 <rdwr10_validate_cmd+0xe4>)
 8011e04:	f005 ffe0 	bl	8017dc8 <puts>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8011e08:	2302      	movs	r3, #2
 8011e0a:	77fb      	strb	r3, [r7, #31]
 8011e0c:	e030      	b.n	8011e70 <rdwr10_validate_cmd+0xd4>
    }
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	7bdb      	ldrb	r3, [r3, #15]
 8011e12:	2b2a      	cmp	r3, #42	; 0x2a
 8011e14:	d119      	bne.n	8011e4a <rdwr10_validate_cmd+0xae>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	7b1b      	ldrb	r3, [r3, #12]
 8011e1a:	74bb      	strb	r3, [r7, #18]
  return tu_bit_test(dir, 7);
 8011e1c:	7cbb      	ldrb	r3, [r7, #18]
 8011e1e:	60fb      	str	r3, [r7, #12]
 8011e20:	2307      	movs	r3, #7
 8011e22:	72fb      	strb	r3, [r7, #11]
 8011e24:	7afb      	ldrb	r3, [r7, #11]
 8011e26:	68fa      	ldr	r2, [r7, #12]
 8011e28:	fa22 f303 	lsr.w	r3, r2, r3
 8011e2c:	f003 0301 	and.w	r3, r3, #1
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	bf14      	ite	ne
 8011e34:	2301      	movne	r3, #1
 8011e36:	2300      	moveq	r3, #0
 8011e38:	b2db      	uxtb	r3, r3
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d005      	beq.n	8011e4a <rdwr10_validate_cmd+0xae>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 8 (Hi <> Do)\r\n");
 8011e3e:	4811      	ldr	r0, [pc, #68]	; (8011e84 <rdwr10_validate_cmd+0xe8>)
 8011e40:	f005 ffc2 	bl	8017dc8 <puts>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8011e44:	2302      	movs	r3, #2
 8011e46:	77fb      	strb	r3, [r7, #31]
 8011e48:	e012      	b.n	8011e70 <rdwr10_validate_cmd+0xd4>
    }
    else if ( 0 == block_count )
 8011e4a:	8bbb      	ldrh	r3, [r7, #28]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d105      	bne.n	8011e5c <rdwr10_validate_cmd+0xc0>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
 8011e50:	480d      	ldr	r0, [pc, #52]	; (8011e88 <rdwr10_validate_cmd+0xec>)
 8011e52:	f005 ffb9 	bl	8017dc8 <puts>
      status =  MSC_CSW_STATUS_FAILED;
 8011e56:	2301      	movs	r3, #1
 8011e58:	77fb      	strb	r3, [r7, #31]
 8011e5a:	e009      	b.n	8011e70 <rdwr10_validate_cmd+0xd4>
    }
    else if ( cbw->total_bytes / block_count == 0 )
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	689a      	ldr	r2, [r3, #8]
 8011e60:	8bbb      	ldrh	r3, [r7, #28]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d204      	bcs.n	8011e70 <rdwr10_validate_cmd+0xd4>
    {
      TU_LOG(MSC_DEBUG, " Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
 8011e66:	4809      	ldr	r0, [pc, #36]	; (8011e8c <rdwr10_validate_cmd+0xf0>)
 8011e68:	f005 ffae 	bl	8017dc8 <puts>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8011e6c:	2302      	movs	r3, #2
 8011e6e:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8011e70:	7ffb      	ldrb	r3, [r7, #31]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3720      	adds	r7, #32
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	08019d64 	.word	0x08019d64
 8011e80:	08019d94 	.word	0x08019d94
 8011e84:	08019db0 	.word	0x08019db0
 8011e88:	08019dcc 	.word	0x08019dcc
 8011e8c:	08019e0c 	.word	0x08019e0c

08011e90 <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 8011e90:	b490      	push	{r4, r7}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4604      	mov	r4, r0
 8011e98:	4608      	mov	r0, r1
 8011e9a:	4611      	mov	r1, r2
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	4623      	mov	r3, r4
 8011ea0:	71fb      	strb	r3, [r7, #7]
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	71bb      	strb	r3, [r7, #6]
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	717b      	strb	r3, [r7, #5]
 8011eaa:	4613      	mov	r3, r2
 8011eac:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 8011eae:	4a09      	ldr	r2, [pc, #36]	; (8011ed4 <tud_msc_set_sense+0x44>)
 8011eb0:	79bb      	ldrb	r3, [r7, #6]
 8011eb2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 8011eb6:	4a07      	ldr	r2, [pc, #28]	; (8011ed4 <tud_msc_set_sense+0x44>)
 8011eb8:	797b      	ldrb	r3, [r7, #5]
 8011eba:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8011ebe:	4a05      	ldr	r2, [pc, #20]	; (8011ed4 <tud_msc_set_sense+0x44>)
 8011ec0:	793b      	ldrb	r3, [r7, #4]
 8011ec2:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

  return true;
 8011ec6:	2301      	movs	r3, #1
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3708      	adds	r7, #8
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bc90      	pop	{r4, r7}
 8011ed0:	4770      	bx	lr
 8011ed2:	bf00      	nop
 8011ed4:	200090c4 	.word	0x200090c4

08011ed8 <set_sense_medium_not_present>:

static inline void set_sense_medium_not_present(uint8_t lun)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	4603      	mov	r3, r0
 8011ee0:	71fb      	strb	r3, [r7, #7]
  // default sense is NOT READY, MEDIUM NOT PRESENT
  tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3A, 0x00);
 8011ee2:	79f8      	ldrb	r0, [r7, #7]
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	223a      	movs	r2, #58	; 0x3a
 8011ee8:	2102      	movs	r1, #2
 8011eea:	f7ff ffd1 	bl	8011e90 <tud_msc_set_sense>
}
 8011eee:	bf00      	nop
 8011ef0:	3708      	adds	r7, #8
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
	...

08011ef8 <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8011efc:	2240      	movs	r2, #64	; 0x40
 8011efe:	2100      	movs	r1, #0
 8011f00:	4802      	ldr	r0, [pc, #8]	; (8011f0c <mscd_init+0x14>)
 8011f02:	f005 fe28 	bl	8017b56 <memset>
}
 8011f06:	bf00      	nop
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	200090c4 	.word	0x200090c4

08011f10 <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	4603      	mov	r3, r0
 8011f18:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8011f1a:	2240      	movs	r2, #64	; 0x40
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	4803      	ldr	r0, [pc, #12]	; (8011f2c <mscd_reset+0x1c>)
 8011f20:	f005 fe19 	bl	8017b56 <memset>
}
 8011f24:	bf00      	nop
 8011f26:	3708      	adds	r7, #8
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	200090c4 	.word	0x200090c4

08011f30 <mscd_open>:

uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b08a      	sub	sp, #40	; 0x28
 8011f34:	af02      	add	r7, sp, #8
 8011f36:	4603      	mov	r3, r0
 8011f38:	6039      	str	r1, [r7, #0]
 8011f3a:	71fb      	strb	r3, [r7, #7]
 8011f3c:	4613      	mov	r3, r2
 8011f3e:	80bb      	strh	r3, [r7, #4]
  // only support SCSI's BOT protocol
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	795b      	ldrb	r3, [r3, #5]
 8011f44:	2b08      	cmp	r3, #8
 8011f46:	d107      	bne.n	8011f58 <mscd_open+0x28>
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	799b      	ldrb	r3, [r3, #6]
 8011f4c:	2b06      	cmp	r3, #6
 8011f4e:	d103      	bne.n	8011f58 <mscd_open+0x28>
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	79db      	ldrb	r3, [r3, #7]
 8011f54:	2b50      	cmp	r3, #80	; 0x50
 8011f56:	d001      	beq.n	8011f5c <mscd_open+0x2c>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	e060      	b.n	801201e <mscd_open+0xee>
            MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);

  // msc driver length is fixed
  uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 8011f5c:	2317      	movs	r3, #23
 8011f5e:	83fb      	strh	r3, [r7, #30]

  // Max length must be at least 1 interface + 2 endpoints
  TU_ASSERT(max_len >= drv_len, 0);
 8011f60:	88ba      	ldrh	r2, [r7, #4]
 8011f62:	8bfb      	ldrh	r3, [r7, #30]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d210      	bcs.n	8011f8a <mscd_open+0x5a>
 8011f68:	f240 1211 	movw	r2, #273	; 0x111
 8011f6c:	492e      	ldr	r1, [pc, #184]	; (8012028 <mscd_open+0xf8>)
 8011f6e:	482f      	ldr	r0, [pc, #188]	; (801202c <mscd_open+0xfc>)
 8011f70:	f005 fe8e 	bl	8017c90 <iprintf>
 8011f74:	4b2e      	ldr	r3, [pc, #184]	; (8012030 <mscd_open+0x100>)
 8011f76:	60fb      	str	r3, [r7, #12]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f003 0301 	and.w	r3, r3, #1
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d000      	beq.n	8011f86 <mscd_open+0x56>
 8011f84:	be00      	bkpt	0x0000
 8011f86:	2300      	movs	r3, #0
 8011f88:	e049      	b.n	801201e <mscd_open+0xee>

  mscd_interface_t * p_msc = &_mscd_itf;
 8011f8a:	4b2a      	ldr	r3, [pc, #168]	; (8012034 <mscd_open+0x104>)
 8011f8c:	61bb      	str	r3, [r7, #24]
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	789a      	ldrb	r2, [r3, #2]
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 8011f98:	6838      	ldr	r0, [r7, #0]
 8011f9a:	f7ff fdf1 	bl	8011b80 <tu_desc_next>
 8011f9e:	4601      	mov	r1, r0
 8011fa0:	69bb      	ldr	r3, [r7, #24]
 8011fa2:	332f      	adds	r3, #47	; 0x2f
 8011fa4:	69ba      	ldr	r2, [r7, #24]
 8011fa6:	322e      	adds	r2, #46	; 0x2e
 8011fa8:	79f8      	ldrb	r0, [r7, #7]
 8011faa:	9201      	str	r2, [sp, #4]
 8011fac:	9300      	str	r3, [sp, #0]
 8011fae:	2302      	movs	r3, #2
 8011fb0:	2202      	movs	r2, #2
 8011fb2:	f002 ffbd 	bl	8014f30 <usbd_open_edpt_pair>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	f083 0301 	eor.w	r3, r3, #1
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d010      	beq.n	8011fe4 <mscd_open+0xb4>
 8011fc2:	f240 1217 	movw	r2, #279	; 0x117
 8011fc6:	4918      	ldr	r1, [pc, #96]	; (8012028 <mscd_open+0xf8>)
 8011fc8:	4818      	ldr	r0, [pc, #96]	; (801202c <mscd_open+0xfc>)
 8011fca:	f005 fe61 	bl	8017c90 <iprintf>
 8011fce:	4b18      	ldr	r3, [pc, #96]	; (8012030 <mscd_open+0x100>)
 8011fd0:	613b      	str	r3, [r7, #16]
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f003 0301 	and.w	r3, r3, #1
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d000      	beq.n	8011fe0 <mscd_open+0xb0>
 8011fde:	be00      	bkpt	0x0000
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	e01c      	b.n	801201e <mscd_open+0xee>

  // Prepare for Command Block Wrapper
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 8011fe4:	79fb      	ldrb	r3, [r7, #7]
 8011fe6:	69b9      	ldr	r1, [r7, #24]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7ff fe29 	bl	8011c40 <prepare_cbw>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	f083 0301 	eor.w	r3, r3, #1
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d010      	beq.n	801201c <mscd_open+0xec>
 8011ffa:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8011ffe:	490a      	ldr	r1, [pc, #40]	; (8012028 <mscd_open+0xf8>)
 8012000:	480a      	ldr	r0, [pc, #40]	; (801202c <mscd_open+0xfc>)
 8012002:	f005 fe45 	bl	8017c90 <iprintf>
 8012006:	4b0a      	ldr	r3, [pc, #40]	; (8012030 <mscd_open+0x100>)
 8012008:	617b      	str	r3, [r7, #20]
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	f003 0301 	and.w	r3, r3, #1
 8012012:	2b00      	cmp	r3, #0
 8012014:	d000      	beq.n	8012018 <mscd_open+0xe8>
 8012016:	be00      	bkpt	0x0000
 8012018:	8bfb      	ldrh	r3, [r7, #30]
 801201a:	e000      	b.n	801201e <mscd_open+0xee>

  return drv_len;
 801201c:	8bfb      	ldrh	r3, [r7, #30]
}
 801201e:	4618      	mov	r0, r3
 8012020:	3720      	adds	r7, #32
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	0801b394 	.word	0x0801b394
 801202c:	08019f10 	.word	0x08019f10
 8012030:	e000edf0 	.word	0xe000edf0
 8012034:	200090c4 	.word	0x200090c4

08012038 <proc_bot_reset>:

static void proc_bot_reset(mscd_interface_t* p_msc)
{
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  p_msc->stage       = MSC_STAGE_CMD;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2200      	movs	r2, #0
 8012044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  p_msc->total_len   = 0;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2200      	movs	r2, #0
 801204c:	635a      	str	r2, [r3, #52]	; 0x34
  p_msc->xferred_len = 0;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2200      	movs	r2, #0
 8012052:	639a      	str	r2, [r3, #56]	; 0x38

  p_msc->sense_key           = 0;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2200      	movs	r2, #0
 8012058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  p_msc->add_sense_code      = 0;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2200      	movs	r2, #0
 8012060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  p_msc->add_sense_qualifier = 0;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 801206c:	bf00      	nop
 801206e:	370c      	adds	r7, #12
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr

08012078 <mscd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b088      	sub	sp, #32
 801207c:	af00      	add	r7, sp, #0
 801207e:	4603      	mov	r3, r0
 8012080:	603a      	str	r2, [r7, #0]
 8012082:	71fb      	strb	r3, [r7, #7]
 8012084:	460b      	mov	r3, r1
 8012086:	71bb      	strb	r3, [r7, #6]
  // nothing to do with DATA & ACK stage
  if (stage != CONTROL_STAGE_SETUP) return true;
 8012088:	79bb      	ldrb	r3, [r7, #6]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d001      	beq.n	8012092 <mscd_control_xfer_cb+0x1a>
 801208e:	2301      	movs	r3, #1
 8012090:	e0f9      	b.n	8012286 <mscd_control_xfer_cb+0x20e>

  mscd_interface_t* p_msc = &_mscd_itf;
 8012092:	4b7f      	ldr	r3, [pc, #508]	; (8012290 <mscd_control_xfer_cb+0x218>)
 8012094:	61fb      	str	r3, [r7, #28]

  // Clear Endpoint Feature (stall) for recovery
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	f040 809d 	bne.w	80121e0 <mscd_control_xfer_cb+0x168>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	f003 031f 	and.w	r3, r3, #31
 80120ae:	b2db      	uxtb	r3, r3
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 80120b0:	2b02      	cmp	r3, #2
 80120b2:	f040 8095 	bne.w	80121e0 <mscd_control_xfer_cb+0x168>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	785b      	ldrb	r3, [r3, #1]
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	f040 8090 	bne.w	80121e0 <mscd_control_xfer_cb+0x168>
       TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	885b      	ldrh	r3, [r3, #2]
 80120c4:	b29b      	uxth	r3, r3
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	f040 808a 	bne.w	80121e0 <mscd_control_xfer_cb+0x168>
  {
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	889b      	ldrh	r3, [r3, #4]
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80120d4:	89fb      	ldrh	r3, [r7, #14]
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	76fb      	strb	r3, [r7, #27]

    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80120e0:	2b04      	cmp	r3, #4
 80120e2:	d106      	bne.n	80120f2 <mscd_control_xfer_cb+0x7a>
    {
      // reset recovery is required to recover from this stage
      // Clear Stall request cannot resolve this -> continue to stall endpoint
      usbd_edpt_stall(rhport, ep_addr);
 80120e4:	7efa      	ldrb	r2, [r7, #27]
 80120e6:	79fb      	ldrb	r3, [r7, #7]
 80120e8:	4611      	mov	r1, r2
 80120ea:	4618      	mov	r0, r3
 80120ec:	f003 f968 	bl	80153c0 <usbd_edpt_stall>
 80120f0:	e074      	b.n	80121dc <mscd_control_xfer_cb+0x164>
    }
    else
    {
      if ( ep_addr == p_msc->ep_in )
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80120f8:	7efa      	ldrb	r2, [r7, #27]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d120      	bne.n	8012140 <mscd_control_xfer_cb+0xc8>
      {
        if ( p_msc->stage == MSC_STAGE_STATUS )
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012104:	2b02      	cmp	r3, #2
 8012106:	d169      	bne.n	80121dc <mscd_control_xfer_cb+0x164>
        {
          // resume sending SCSI status if we are in this stage previously before stalled
          TU_ASSERT( send_csw(rhport, p_msc) );
 8012108:	79fb      	ldrb	r3, [r7, #7]
 801210a:	69f9      	ldr	r1, [r7, #28]
 801210c:	4618      	mov	r0, r3
 801210e:	f7ff fd77 	bl	8011c00 <send_csw>
 8012112:	4603      	mov	r3, r0
 8012114:	f083 0301 	eor.w	r3, r3, #1
 8012118:	b2db      	uxtb	r3, r3
 801211a:	2b00      	cmp	r3, #0
 801211c:	d05e      	beq.n	80121dc <mscd_control_xfer_cb+0x164>
 801211e:	f240 1249 	movw	r2, #329	; 0x149
 8012122:	495c      	ldr	r1, [pc, #368]	; (8012294 <mscd_control_xfer_cb+0x21c>)
 8012124:	485c      	ldr	r0, [pc, #368]	; (8012298 <mscd_control_xfer_cb+0x220>)
 8012126:	f005 fdb3 	bl	8017c90 <iprintf>
 801212a:	4b5c      	ldr	r3, [pc, #368]	; (801229c <mscd_control_xfer_cb+0x224>)
 801212c:	613b      	str	r3, [r7, #16]
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	f003 0301 	and.w	r3, r3, #1
 8012136:	2b00      	cmp	r3, #0
 8012138:	d000      	beq.n	801213c <mscd_control_xfer_cb+0xc4>
 801213a:	be00      	bkpt	0x0000
 801213c:	2300      	movs	r3, #0
 801213e:	e0a2      	b.n	8012286 <mscd_control_xfer_cb+0x20e>
        }
      }
      else if ( ep_addr == p_msc->ep_out )
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012146:	7efa      	ldrb	r2, [r7, #27]
 8012148:	429a      	cmp	r2, r3
 801214a:	d147      	bne.n	80121dc <mscd_control_xfer_cb+0x164>
      {
        if ( p_msc->stage == MSC_STAGE_CMD )
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012152:	2b00      	cmp	r3, #0
 8012154:	d142      	bne.n	80121dc <mscd_control_xfer_cb+0x164>
        {
          // part of reset recovery (probably due to invalid CBW) -> prepare for new command
          // Note: skip if already queued previously
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 8012156:	69fb      	ldr	r3, [r7, #28]
 8012158:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801215c:	79fb      	ldrb	r3, [r7, #7]
 801215e:	737b      	strb	r3, [r7, #13]
 8012160:	4613      	mov	r3, r2
 8012162:	733b      	strb	r3, [r7, #12]

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8012164:	7b3a      	ldrb	r2, [r7, #12]
 8012166:	7b7b      	ldrb	r3, [r7, #13]
 8012168:	4611      	mov	r1, r2
 801216a:	4618      	mov	r0, r3
 801216c:	f003 f902 	bl	8015374 <usbd_edpt_busy>
 8012170:	4603      	mov	r3, r0
 8012172:	f083 0301 	eor.w	r3, r3, #1
 8012176:	b2db      	uxtb	r3, r3
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00d      	beq.n	8012198 <mscd_control_xfer_cb+0x120>
 801217c:	7b3a      	ldrb	r2, [r7, #12]
 801217e:	7b7b      	ldrb	r3, [r7, #13]
 8012180:	4611      	mov	r1, r2
 8012182:	4618      	mov	r0, r3
 8012184:	f003 f9b8 	bl	80154f8 <usbd_edpt_stalled>
 8012188:	4603      	mov	r3, r0
 801218a:	f083 0301 	eor.w	r3, r3, #1
 801218e:	b2db      	uxtb	r3, r3
 8012190:	2b00      	cmp	r3, #0
 8012192:	d001      	beq.n	8012198 <mscd_control_xfer_cb+0x120>
 8012194:	2301      	movs	r3, #1
 8012196:	e000      	b.n	801219a <mscd_control_xfer_cb+0x122>
 8012198:	2300      	movs	r3, #0
 801219a:	f003 0301 	and.w	r3, r3, #1
 801219e:	b2db      	uxtb	r3, r3
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d01b      	beq.n	80121dc <mscd_control_xfer_cb+0x164>
          {
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 80121a4:	79fb      	ldrb	r3, [r7, #7]
 80121a6:	69f9      	ldr	r1, [r7, #28]
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7ff fd49 	bl	8011c40 <prepare_cbw>
 80121ae:	4603      	mov	r3, r0
 80121b0:	f083 0301 	eor.w	r3, r3, #1
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d010      	beq.n	80121dc <mscd_control_xfer_cb+0x164>
 80121ba:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80121be:	4935      	ldr	r1, [pc, #212]	; (8012294 <mscd_control_xfer_cb+0x21c>)
 80121c0:	4835      	ldr	r0, [pc, #212]	; (8012298 <mscd_control_xfer_cb+0x220>)
 80121c2:	f005 fd65 	bl	8017c90 <iprintf>
 80121c6:	4b35      	ldr	r3, [pc, #212]	; (801229c <mscd_control_xfer_cb+0x224>)
 80121c8:	617b      	str	r3, [r7, #20]
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	f003 0301 	and.w	r3, r3, #1
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d000      	beq.n	80121d8 <mscd_control_xfer_cb+0x160>
 80121d6:	be00      	bkpt	0x0000
 80121d8:	2300      	movs	r3, #0
 80121da:	e054      	b.n	8012286 <mscd_control_xfer_cb+0x20e>
          }
        }
      }
    }

    return true;
 80121dc:	2301      	movs	r3, #1
 80121de:	e052      	b.n	8012286 <mscd_control_xfer_cb+0x20e>
  }

  // From this point only handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121e8:	b2db      	uxtb	r3, r3
 80121ea:	2b20      	cmp	r3, #32
 80121ec:	d001      	beq.n	80121f2 <mscd_control_xfer_cb+0x17a>
 80121ee:	2300      	movs	r3, #0
 80121f0:	e049      	b.n	8012286 <mscd_control_xfer_cb+0x20e>

  switch ( request->bRequest )
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	785b      	ldrb	r3, [r3, #1]
 80121f6:	2bfe      	cmp	r3, #254	; 0xfe
 80121f8:	d019      	beq.n	801222e <mscd_control_xfer_cb+0x1b6>
 80121fa:	2bff      	cmp	r3, #255	; 0xff
 80121fc:	d140      	bne.n	8012280 <mscd_control_xfer_cb+0x208>
  {
    case MSC_REQ_RESET:
      TU_LOG(MSC_DEBUG, "  MSC BOT Reset\r\n");
 80121fe:	4828      	ldr	r0, [pc, #160]	; (80122a0 <mscd_control_xfer_cb+0x228>)
 8012200:	f005 fde2 	bl	8017dc8 <puts>
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	885b      	ldrh	r3, [r3, #2]
 8012208:	b29b      	uxth	r3, r3
 801220a:	2b00      	cmp	r3, #0
 801220c:	d104      	bne.n	8012218 <mscd_control_xfer_cb+0x1a0>
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	88db      	ldrh	r3, [r3, #6]
 8012212:	b29b      	uxth	r3, r3
 8012214:	2b00      	cmp	r3, #0
 8012216:	d001      	beq.n	801221c <mscd_control_xfer_cb+0x1a4>
 8012218:	2300      	movs	r3, #0
 801221a:	e034      	b.n	8012286 <mscd_control_xfer_cb+0x20e>

      // driver state reset
      proc_bot_reset(p_msc);
 801221c:	69f8      	ldr	r0, [r7, #28]
 801221e:	f7ff ff0b 	bl	8012038 <proc_bot_reset>

      tud_control_status(rhport, request);
 8012222:	79fb      	ldrb	r3, [r7, #7]
 8012224:	6839      	ldr	r1, [r7, #0]
 8012226:	4618      	mov	r0, r3
 8012228:	f003 f9b6 	bl	8015598 <tud_control_status>
    break;
 801222c:	e02a      	b.n	8012284 <mscd_control_xfer_cb+0x20c>

    case MSC_REQ_GET_MAX_LUN:
    {
      TU_LOG(MSC_DEBUG, "  MSC Get Max Lun\r\n");
 801222e:	481d      	ldr	r0, [pc, #116]	; (80122a4 <mscd_control_xfer_cb+0x22c>)
 8012230:	f005 fdca 	bl	8017dc8 <puts>
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	885b      	ldrh	r3, [r3, #2]
 8012238:	b29b      	uxth	r3, r3
 801223a:	2b00      	cmp	r3, #0
 801223c:	d104      	bne.n	8012248 <mscd_control_xfer_cb+0x1d0>
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	88db      	ldrh	r3, [r3, #6]
 8012242:	b29b      	uxth	r3, r3
 8012244:	2b01      	cmp	r3, #1
 8012246:	d001      	beq.n	801224c <mscd_control_xfer_cb+0x1d4>
 8012248:	2300      	movs	r3, #0
 801224a:	e01c      	b.n	8012286 <mscd_control_xfer_cb+0x20e>

      uint8_t maxlun = 1;
 801224c:	2301      	movs	r3, #1
 801224e:	72fb      	strb	r3, [r7, #11]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 8012250:	4b15      	ldr	r3, [pc, #84]	; (80122a8 <mscd_control_xfer_cb+0x230>)
 8012252:	2b00      	cmp	r3, #0
 8012254:	d003      	beq.n	801225e <mscd_control_xfer_cb+0x1e6>
 8012256:	f3af 8000 	nop.w
 801225a:	4603      	mov	r3, r0
 801225c:	72fb      	strb	r3, [r7, #11]
      TU_VERIFY(maxlun);
 801225e:	7afb      	ldrb	r3, [r7, #11]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d101      	bne.n	8012268 <mscd_control_xfer_cb+0x1f0>
 8012264:	2300      	movs	r3, #0
 8012266:	e00e      	b.n	8012286 <mscd_control_xfer_cb+0x20e>

      // MAX LUN is minus 1 by specs
      maxlun--;
 8012268:	7afb      	ldrb	r3, [r7, #11]
 801226a:	3b01      	subs	r3, #1
 801226c:	b2db      	uxtb	r3, r3
 801226e:	72fb      	strb	r3, [r7, #11]

      tud_control_xfer(rhport, request, &maxlun, 1);
 8012270:	f107 020b 	add.w	r2, r7, #11
 8012274:	79f8      	ldrb	r0, [r7, #7]
 8012276:	2301      	movs	r3, #1
 8012278:	6839      	ldr	r1, [r7, #0]
 801227a:	f003 f9eb 	bl	8015654 <tud_control_xfer>
    }
    break;
 801227e:	e001      	b.n	8012284 <mscd_control_xfer_cb+0x20c>

    default: return false; // stall unsupported request
 8012280:	2300      	movs	r3, #0
 8012282:	e000      	b.n	8012286 <mscd_control_xfer_cb+0x20e>
  }

  return true;
 8012284:	2301      	movs	r3, #1
}
 8012286:	4618      	mov	r0, r3
 8012288:	3720      	adds	r7, #32
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	200090c4 	.word	0x200090c4
 8012294:	0801b3a0 	.word	0x0801b3a0
 8012298:	08019f10 	.word	0x08019f10
 801229c:	e000edf0 	.word	0xe000edf0
 80122a0:	08019f28 	.word	0x08019f28
 80122a4:	08019f3c 	.word	0x08019f3c
 80122a8:	00000000 	.word	0x00000000

080122ac <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 80122ac:	b590      	push	{r4, r7, lr}
 80122ae:	b099      	sub	sp, #100	; 0x64
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	603b      	str	r3, [r7, #0]
 80122b4:	4603      	mov	r3, r0
 80122b6:	71fb      	strb	r3, [r7, #7]
 80122b8:	460b      	mov	r3, r1
 80122ba:	71bb      	strb	r3, [r7, #6]
 80122bc:	4613      	mov	r3, r2
 80122be:	717b      	strb	r3, [r7, #5]
  (void) event;

  mscd_interface_t* p_msc = &_mscd_itf;
 80122c0:	4ba4      	ldr	r3, [pc, #656]	; (8012554 <mscd_xfer_cb+0x2a8>)
 80122c2:	65bb      	str	r3, [r7, #88]	; 0x58
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80122c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122c6:	657b      	str	r3, [r7, #84]	; 0x54
  msc_csw_t       * p_csw = &p_msc->csw;
 80122c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122ca:	3320      	adds	r3, #32
 80122cc:	653b      	str	r3, [r7, #80]	; 0x50

  switch (p_msc->stage)
 80122ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122d4:	2b03      	cmp	r3, #3
 80122d6:	f200 8256 	bhi.w	8012786 <mscd_xfer_cb+0x4da>
 80122da:	a201      	add	r2, pc, #4	; (adr r2, 80122e0 <mscd_xfer_cb+0x34>)
 80122dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122e0:	080122f1 	.word	0x080122f1
 80122e4:	080125e1 	.word	0x080125e1
 80122e8:	08012787 	.word	0x08012787
 80122ec:	080126cd 	.word	0x080126cd
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 80122f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80122f6:	79ba      	ldrb	r2, [r7, #6]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d001      	beq.n	8012300 <mscd_xfer_cb+0x54>
 80122fc:	2301      	movs	r3, #1
 80122fe:	e2b0      	b.n	8012862 <mscd_xfer_cb+0x5b6>

      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	2b1f      	cmp	r3, #31
 8012304:	d104      	bne.n	8012310 <mscd_xfer_cb+0x64>
 8012306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	4a93      	ldr	r2, [pc, #588]	; (8012558 <mscd_xfer_cb+0x2ac>)
 801230c:	4293      	cmp	r3, r2
 801230e:	d018      	beq.n	8012342 <mscd_xfer_cb+0x96>
      {
        TU_LOG(MSC_DEBUG, "  SCSI CBW is not valid\r\n");
 8012310:	4892      	ldr	r0, [pc, #584]	; (801255c <mscd_xfer_cb+0x2b0>)
 8012312:	f005 fd59 	bl	8017dc8 <puts>

        // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8012316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012318:	2204      	movs	r2, #4
 801231a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        // invalid CBW stall both endpoints
        usbd_edpt_stall(rhport, p_msc->ep_in);
 801231e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012320:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8012324:	79fb      	ldrb	r3, [r7, #7]
 8012326:	4611      	mov	r1, r2
 8012328:	4618      	mov	r0, r3
 801232a:	f003 f849 	bl	80153c0 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 801232e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012330:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8012334:	79fb      	ldrb	r3, [r7, #7]
 8012336:	4611      	mov	r1, r2
 8012338:	4618      	mov	r0, r3
 801233a:	f003 f841 	bl	80153c0 <usbd_edpt_stall>

        return false;
 801233e:	2300      	movs	r3, #0
 8012340:	e28f      	b.n	8012862 <mscd_xfer_cb+0x5b6>
      }

      TU_LOG(MSC_DEBUG, "  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
 8012342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012344:	7b5b      	ldrb	r3, [r3, #13]
 8012346:	461c      	mov	r4, r3
 8012348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801234a:	7bdb      	ldrb	r3, [r3, #15]
 801234c:	4619      	mov	r1, r3
 801234e:	4884      	ldr	r0, [pc, #528]	; (8012560 <mscd_xfer_cb+0x2b4>)
 8012350:	f7ff fc28 	bl	8011ba4 <tu_lookup_find>
 8012354:	4603      	mov	r3, r0
 8012356:	461a      	mov	r2, r3
 8012358:	4621      	mov	r1, r4
 801235a:	4882      	ldr	r0, [pc, #520]	; (8012564 <mscd_xfer_cb+0x2b8>)
 801235c:	f005 fc98 	bl	8017c90 <iprintf>
      //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 8012360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012362:	2200      	movs	r2, #0
 8012364:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8012368:	701a      	strb	r2, [r3, #0]
 801236a:	2200      	movs	r2, #0
 801236c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012370:	705a      	strb	r2, [r3, #1]
 8012372:	2200      	movs	r2, #0
 8012374:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8012378:	709a      	strb	r2, [r3, #2]
 801237a:	2200      	movs	r2, #0
 801237c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012380:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 8012382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012384:	685a      	ldr	r2, [r3, #4]
 8012386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012388:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 801238a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801238c:	2200      	movs	r2, #0
 801238e:	721a      	strb	r2, [r3, #8]
 8012390:	2200      	movs	r2, #0
 8012392:	725a      	strb	r2, [r3, #9]
 8012394:	2200      	movs	r2, #0
 8012396:	729a      	strb	r2, [r3, #10]
 8012398:	2200      	movs	r2, #0
 801239a:	72da      	strb	r2, [r3, #11]
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 801239c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801239e:	2200      	movs	r2, #0
 80123a0:	731a      	strb	r2, [r3, #12]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 80123a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123a4:	2201      	movs	r2, #1
 80123a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 80123aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123ac:	689a      	ldr	r2, [r3, #8]
 80123ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123b0:	635a      	str	r2, [r3, #52]	; 0x34
      p_msc->xferred_len = 0;
 80123b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123b4:	2200      	movs	r2, #0
 80123b6:	639a      	str	r2, [r3, #56]	; 0x38

      // Read10 or Write10
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 80123b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123ba:	7bdb      	ldrb	r3, [r3, #15]
 80123bc:	2b28      	cmp	r3, #40	; 0x28
 80123be:	d003      	beq.n	80123c8 <mscd_xfer_cb+0x11c>
 80123c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123c2:	7bdb      	ldrb	r3, [r3, #15]
 80123c4:	2b2a      	cmp	r3, #42	; 0x2a
 80123c6:	d12a      	bne.n	801241e <mscd_xfer_cb+0x172>
      {
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 80123c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80123ca:	f7ff fce7 	bl	8011d9c <rdwr10_validate_cmd>
 80123ce:	4603      	mov	r3, r0
 80123d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if ( status != MSC_CSW_STATUS_PASSED)
 80123d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d007      	beq.n	80123ec <mscd_xfer_cb+0x140>
        {
          fail_scsi_op(rhport, p_msc, status);
 80123dc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80123e0:	79fb      	ldrb	r3, [r7, #7]
 80123e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7ff fc42 	bl	8011c6e <fail_scsi_op>
      {
 80123ea:	e0f8      	b.n	80125de <mscd_xfer_cb+0x332>
        }else if ( p_cbw->total_bytes )
 80123ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d00f      	beq.n	8012414 <mscd_xfer_cb+0x168>
        {
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 80123f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123f6:	7bdb      	ldrb	r3, [r3, #15]
 80123f8:	2b28      	cmp	r3, #40	; 0x28
 80123fa:	d105      	bne.n	8012408 <mscd_xfer_cb+0x15c>
          {
            proc_read10_cmd(rhport, p_msc);
 80123fc:	79fb      	ldrb	r3, [r7, #7]
 80123fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012400:	4618      	mov	r0, r3
 8012402:	f000 fc4d 	bl	8012ca0 <proc_read10_cmd>
      {
 8012406:	e0ea      	b.n	80125de <mscd_xfer_cb+0x332>
          }else
          {
            proc_write10_cmd(rhport, p_msc);
 8012408:	79fb      	ldrb	r3, [r7, #7]
 801240a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801240c:	4618      	mov	r0, r3
 801240e:	f000 fccf 	bl	8012db0 <proc_write10_cmd>
      {
 8012412:	e0e4      	b.n	80125de <mscd_xfer_cb+0x332>
          }
        }else
        {
          // no data transfer, only exist in complaint test suite
          p_msc->stage = MSC_STAGE_STATUS;
 8012414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012416:	2202      	movs	r2, #2
 8012418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      {
 801241c:	e0df      	b.n	80125de <mscd_xfer_cb+0x332>
      else
      {
        // For other SCSI commands
        // 1. OUT : queue transfer (invoke app callback after done)
        // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 801241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012420:	689b      	ldr	r3, [r3, #8]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d04b      	beq.n	80124be <mscd_xfer_cb+0x212>
 8012426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012428:	7b1b      	ldrb	r3, [r3, #12]
 801242a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  return tu_bit_test(dir, 7);
 801242e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012434:	2307      	movs	r3, #7
 8012436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 801243a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801243e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012440:	fa22 f303 	lsr.w	r3, r2, r3
 8012444:	f003 0301 	and.w	r3, r3, #1
 8012448:	2b00      	cmp	r3, #0
 801244a:	bf14      	ite	ne
 801244c:	2301      	movne	r3, #1
 801244e:	2300      	moveq	r3, #0
 8012450:	b2db      	uxtb	r3, r3
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8012452:	f083 0301 	eor.w	r3, r3, #1
 8012456:	b2db      	uxtb	r3, r3
 8012458:	2b00      	cmp	r3, #0
 801245a:	d030      	beq.n	80124be <mscd_xfer_cb+0x212>
        {
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 801245c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801245e:	689b      	ldr	r3, [r3, #8]
 8012460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012464:	d909      	bls.n	801247a <mscd_xfer_cb+0x1ce>
          {
            TU_LOG(MSC_DEBUG, "  SCSI reject non READ10/WRITE10 with large data\r\n");
 8012466:	4840      	ldr	r0, [pc, #256]	; (8012568 <mscd_xfer_cb+0x2bc>)
 8012468:	f005 fcae 	bl	8017dc8 <puts>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 801246c:	79fb      	ldrb	r3, [r7, #7]
 801246e:	2201      	movs	r2, #1
 8012470:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012472:	4618      	mov	r0, r3
 8012474:	f7ff fbfb 	bl	8011c6e <fail_scsi_op>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8012478:	e0b0      	b.n	80125dc <mscd_xfer_cb+0x330>
          }else
          {
            // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
            // but it is OK to just receive data then responded with failed status
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, p_msc->total_len) );
 801247a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801247c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8012480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012484:	b29b      	uxth	r3, r3
 8012486:	79f8      	ldrb	r0, [r7, #7]
 8012488:	4a38      	ldr	r2, [pc, #224]	; (801256c <mscd_xfer_cb+0x2c0>)
 801248a:	f002 feeb 	bl	8015264 <usbd_edpt_xfer>
 801248e:	4603      	mov	r3, r0
 8012490:	f083 0301 	eor.w	r3, r3, #1
 8012494:	b2db      	uxtb	r3, r3
 8012496:	2b00      	cmp	r3, #0
 8012498:	f000 80a0 	beq.w	80125dc <mscd_xfer_cb+0x330>
 801249c:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 80124a0:	4933      	ldr	r1, [pc, #204]	; (8012570 <mscd_xfer_cb+0x2c4>)
 80124a2:	4834      	ldr	r0, [pc, #208]	; (8012574 <mscd_xfer_cb+0x2c8>)
 80124a4:	f005 fbf4 	bl	8017c90 <iprintf>
 80124a8:	4b33      	ldr	r3, [pc, #204]	; (8012578 <mscd_xfer_cb+0x2cc>)
 80124aa:	643b      	str	r3, [r7, #64]	; 0x40
 80124ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f003 0301 	and.w	r3, r3, #1
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d000      	beq.n	80124ba <mscd_xfer_cb+0x20e>
 80124b8:	be00      	bkpt	0x0000
 80124ba:	2300      	movs	r3, #0
 80124bc:	e1d1      	b.n	8012862 <mscd_xfer_cb+0x5b6>
          }
        }else
        {
          // First process if it is a built-in commands
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 80124be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124c0:	7b58      	ldrb	r0, [r3, #13]
 80124c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124c4:	f103 010f 	add.w	r1, r3, #15
 80124c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124cc:	4a27      	ldr	r2, [pc, #156]	; (801256c <mscd_xfer_cb+0x2c0>)
 80124ce:	f000 f9d3 	bl	8012878 <proc_builtin_scsi>
 80124d2:	65f8      	str	r0, [r7, #92]	; 0x5c

          // Invoke user callback if not built-in
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 80124d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	da10      	bge.n	80124fc <mscd_xfer_cb+0x250>
 80124da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d10b      	bne.n	80124fc <mscd_xfer_cb+0x250>
          {
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, p_msc->total_len);
 80124e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124e6:	7b58      	ldrb	r0, [r3, #13]
 80124e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124ea:	f103 010f 	add.w	r1, r3, #15
 80124ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	4a1d      	ldr	r2, [pc, #116]	; (801256c <mscd_xfer_cb+0x2c0>)
 80124f6:	f7fe fbfd 	bl	8010cf4 <tud_msc_scsi_cb>
 80124fa:	65f8      	str	r0, [r7, #92]	; 0x5c
          }

          if ( resplen < 0 )
 80124fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124fe:	2b00      	cmp	r3, #0
 8012500:	da09      	bge.n	8012516 <mscd_xfer_cb+0x26a>
          {
            // unsupported command
            TU_LOG(MSC_DEBUG, "  SCSI unsupported or failed command\r\n");
 8012502:	481e      	ldr	r0, [pc, #120]	; (801257c <mscd_xfer_cb+0x2d0>)
 8012504:	f005 fc60 	bl	8017dc8 <puts>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8012508:	79fb      	ldrb	r3, [r7, #7]
 801250a:	2201      	movs	r2, #1
 801250c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801250e:	4618      	mov	r0, r3
 8012510:	f7ff fbad 	bl	8011c6e <fail_scsi_op>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, p_msc->total_len) );
            }
          }
        }
      }
    break;
 8012514:	e139      	b.n	801278a <mscd_xfer_cb+0x4de>
          else if (resplen == 0)
 8012516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012518:	2b00      	cmp	r3, #0
 801251a:	d10f      	bne.n	801253c <mscd_xfer_cb+0x290>
            if (p_cbw->total_bytes)
 801251c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801251e:	689b      	ldr	r3, [r3, #8]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d006      	beq.n	8012532 <mscd_xfer_cb+0x286>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8012524:	79fb      	ldrb	r3, [r7, #7]
 8012526:	2201      	movs	r2, #1
 8012528:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801252a:	4618      	mov	r0, r3
 801252c:	f7ff fb9f 	bl	8011c6e <fail_scsi_op>
    break;
 8012530:	e12b      	b.n	801278a <mscd_xfer_cb+0x4de>
              p_msc->stage = MSC_STAGE_STATUS;
 8012532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012534:	2202      	movs	r2, #2
 8012536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 801253a:	e126      	b.n	801278a <mscd_xfer_cb+0x4de>
            if ( p_cbw->total_bytes == 0 )
 801253c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801253e:	689b      	ldr	r3, [r3, #8]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d11d      	bne.n	8012580 <mscd_xfer_cb+0x2d4>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8012544:	79fb      	ldrb	r3, [r7, #7]
 8012546:	2201      	movs	r2, #1
 8012548:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801254a:	4618      	mov	r0, r3
 801254c:	f7ff fb8f 	bl	8011c6e <fail_scsi_op>
    break;
 8012550:	e11b      	b.n	801278a <mscd_xfer_cb+0x4de>
 8012552:	bf00      	nop
 8012554:	200090c4 	.word	0x200090c4
 8012558:	43425355 	.word	0x43425355
 801255c:	08019f50 	.word	0x08019f50
 8012560:	0801b38c 	.word	0x0801b38c
 8012564:	08019f6c 	.word	0x08019f6c
 8012568:	08019f8c 	.word	0x08019f8c
 801256c:	20009104 	.word	0x20009104
 8012570:	0801b3b8 	.word	0x0801b3b8
 8012574:	08019f10 	.word	0x08019f10
 8012578:	e000edf0 	.word	0xe000edf0
 801257c:	08019fc0 	.word	0x08019fc0
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 8012580:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012584:	689b      	ldr	r3, [r3, #8]
 8012586:	627a      	str	r2, [r7, #36]	; 0x24
 8012588:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 801258a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801258c:	6a3b      	ldr	r3, [r7, #32]
 801258e:	429a      	cmp	r2, r3
 8012590:	bf28      	it	cs
 8012592:	461a      	movcs	r2, r3
 8012594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012596:	635a      	str	r2, [r3, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, p_msc->total_len) );
 8012598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801259a:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 801259e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80125a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	79f8      	ldrb	r0, [r7, #7]
 80125a6:	4a95      	ldr	r2, [pc, #596]	; (80127fc <mscd_xfer_cb+0x550>)
 80125a8:	f002 fe5c 	bl	8015264 <usbd_edpt_xfer>
 80125ac:	4603      	mov	r3, r0
 80125ae:	f083 0301 	eor.w	r3, r3, #1
 80125b2:	b2db      	uxtb	r3, r3
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	f000 80e8 	beq.w	801278a <mscd_xfer_cb+0x4de>
 80125ba:	f240 12fd 	movw	r2, #509	; 0x1fd
 80125be:	4990      	ldr	r1, [pc, #576]	; (8012800 <mscd_xfer_cb+0x554>)
 80125c0:	4890      	ldr	r0, [pc, #576]	; (8012804 <mscd_xfer_cb+0x558>)
 80125c2:	f005 fb65 	bl	8017c90 <iprintf>
 80125c6:	4b90      	ldr	r3, [pc, #576]	; (8012808 <mscd_xfer_cb+0x55c>)
 80125c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80125ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f003 0301 	and.w	r3, r3, #1
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d000      	beq.n	80125d8 <mscd_xfer_cb+0x32c>
 80125d6:	be00      	bkpt	0x0000
 80125d8:	2300      	movs	r3, #0
 80125da:	e142      	b.n	8012862 <mscd_xfer_cb+0x5b6>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 80125dc:	bf00      	nop
    break;
 80125de:	e0d4      	b.n	801278a <mscd_xfer_cb+0x4de>

    case MSC_STAGE_DATA:
      TU_LOG(MSC_DEBUG, "  SCSI Data [Lun%u]\r\n", p_cbw->lun);
 80125e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125e2:	7b5b      	ldrb	r3, [r3, #13]
 80125e4:	4619      	mov	r1, r3
 80125e6:	4889      	ldr	r0, [pc, #548]	; (801280c <mscd_xfer_cb+0x560>)
 80125e8:	f005 fb52 	bl	8017c90 <iprintf>
      //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 80125ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125ee:	7bdb      	ldrb	r3, [r3, #15]
 80125f0:	2b28      	cmp	r3, #40	; 0x28
 80125f2:	d116      	bne.n	8012622 <mscd_xfer_cb+0x376>
      {
        p_msc->xferred_len += xferred_bytes;
 80125f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80125f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	441a      	add	r2, r3
 80125fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80125fe:	639a      	str	r2, [r3, #56]	; 0x38

        if ( p_msc->xferred_len >= p_msc->total_len )
 8012600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012608:	429a      	cmp	r2, r3
 801260a:	d304      	bcc.n	8012616 <mscd_xfer_cb+0x36a>
        {
          // Data Stage is complete
          p_msc->stage = MSC_STAGE_STATUS;
 801260c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801260e:	2202      	movs	r2, #2
 8012610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        {
          // This scenario with command that take more than one transfer is already rejected at Command stage
          TU_BREAKPOINT();
        }
      }
    break;
 8012614:	e0bb      	b.n	801278e <mscd_xfer_cb+0x4e2>
          proc_read10_cmd(rhport, p_msc);
 8012616:	79fb      	ldrb	r3, [r7, #7]
 8012618:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801261a:	4618      	mov	r0, r3
 801261c:	f000 fb40 	bl	8012ca0 <proc_read10_cmd>
    break;
 8012620:	e0b5      	b.n	801278e <mscd_xfer_cb+0x4e2>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8012622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012624:	7bdb      	ldrb	r3, [r3, #15]
 8012626:	2b2a      	cmp	r3, #42	; 0x2a
 8012628:	d106      	bne.n	8012638 <mscd_xfer_cb+0x38c>
        proc_write10_new_data(rhport, p_msc, xferred_bytes);
 801262a:	79fb      	ldrb	r3, [r7, #7]
 801262c:	683a      	ldr	r2, [r7, #0]
 801262e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012630:	4618      	mov	r0, r3
 8012632:	f000 fc21 	bl	8012e78 <proc_write10_new_data>
    break;
 8012636:	e0aa      	b.n	801278e <mscd_xfer_cb+0x4e2>
        p_msc->xferred_len += xferred_bytes;
 8012638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801263a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	441a      	add	r2, r3
 8012640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012642:	639a      	str	r2, [r3, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 8012644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012646:	7b1b      	ldrb	r3, [r3, #12]
 8012648:	77fb      	strb	r3, [r7, #31]
  return tu_bit_test(dir, 7);
 801264a:	7ffb      	ldrb	r3, [r7, #31]
 801264c:	61bb      	str	r3, [r7, #24]
 801264e:	2307      	movs	r3, #7
 8012650:	75fb      	strb	r3, [r7, #23]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8012652:	7dfb      	ldrb	r3, [r7, #23]
 8012654:	69ba      	ldr	r2, [r7, #24]
 8012656:	fa22 f303 	lsr.w	r3, r2, r3
 801265a:	f003 0301 	and.w	r3, r3, #1
 801265e:	2b00      	cmp	r3, #0
 8012660:	bf14      	ite	ne
 8012662:	2301      	movne	r3, #1
 8012664:	2300      	moveq	r3, #0
 8012666:	b2db      	uxtb	r3, r3
        if ( !is_data_in(p_cbw->dir) )
 8012668:	f083 0301 	eor.w	r3, r3, #1
 801266c:	b2db      	uxtb	r3, r3
 801266e:	2b00      	cmp	r3, #0
 8012670:	d017      	beq.n	80126a2 <mscd_xfer_cb+0x3f6>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, p_msc->total_len);
 8012672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012674:	7b58      	ldrb	r0, [r3, #13]
 8012676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012678:	f103 010f 	add.w	r1, r3, #15
 801267c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012680:	b29b      	uxth	r3, r3
 8012682:	4a5e      	ldr	r2, [pc, #376]	; (80127fc <mscd_xfer_cb+0x550>)
 8012684:	f7fe fb36 	bl	8010cf4 <tud_msc_scsi_cb>
 8012688:	64b8      	str	r0, [r7, #72]	; 0x48
          if ( cb_result < 0 )
 801268a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801268c:	2b00      	cmp	r3, #0
 801268e:	da08      	bge.n	80126a2 <mscd_xfer_cb+0x3f6>
            TU_LOG(MSC_DEBUG, "  SCSI unsupported command\r\n");
 8012690:	485f      	ldr	r0, [pc, #380]	; (8012810 <mscd_xfer_cb+0x564>)
 8012692:	f005 fb99 	bl	8017dc8 <puts>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8012696:	79fb      	ldrb	r3, [r7, #7]
 8012698:	2201      	movs	r2, #1
 801269a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801269c:	4618      	mov	r0, r3
 801269e:	f7ff fae6 	bl	8011c6e <fail_scsi_op>
        if ( p_msc->xferred_len >= p_msc->total_len )
 80126a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80126a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80126a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d304      	bcc.n	80126b8 <mscd_xfer_cb+0x40c>
          p_msc->stage = MSC_STAGE_STATUS;
 80126ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80126b0:	2202      	movs	r2, #2
 80126b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 80126b6:	e06a      	b.n	801278e <mscd_xfer_cb+0x4e2>
          TU_BREAKPOINT();
 80126b8:	4b53      	ldr	r3, [pc, #332]	; (8012808 <mscd_xfer_cb+0x55c>)
 80126ba:	647b      	str	r3, [r7, #68]	; 0x44
 80126bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	f003 0301 	and.w	r3, r3, #1
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d062      	beq.n	801278e <mscd_xfer_cb+0x4e2>
 80126c8:	be00      	bkpt	0x0000
    break;
 80126ca:	e060      	b.n	801278e <mscd_xfer_cb+0x4e2>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 80126cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80126ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80126d2:	79ba      	ldrb	r2, [r7, #6]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d151      	bne.n	801277c <mscd_xfer_cb+0x4d0>
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	2b0d      	cmp	r3, #13
 80126dc:	d14e      	bne.n	801277c <mscd_xfer_cb+0x4d0>
      {
        TU_LOG(MSC_DEBUG, "  SCSI Status [Lun%u] = %u\r\n", p_cbw->lun, p_csw->status);
 80126de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126e0:	7b5b      	ldrb	r3, [r3, #13]
 80126e2:	4619      	mov	r1, r3
 80126e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126e6:	7b1b      	ldrb	r3, [r3, #12]
 80126e8:	461a      	mov	r2, r3
 80126ea:	484a      	ldr	r0, [pc, #296]	; (8012814 <mscd_xfer_cb+0x568>)
 80126ec:	f005 fad0 	bl	8017c90 <iprintf>
        // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);

        // Invoke complete callback if defined
        // Note: There is racing issue with samd51 + qspi flash testing with arduino
        // if complete_cb() is invoked after queuing the status.
        switch(p_cbw->command[0])
 80126f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126f2:	7bdb      	ldrb	r3, [r3, #15]
 80126f4:	2b28      	cmp	r3, #40	; 0x28
 80126f6:	d002      	beq.n	80126fe <mscd_xfer_cb+0x452>
 80126f8:	2b2a      	cmp	r3, #42	; 0x2a
 80126fa:	d009      	beq.n	8012710 <mscd_xfer_cb+0x464>
 80126fc:	e011      	b.n	8012722 <mscd_xfer_cb+0x476>
        {
          case SCSI_CMD_READ_10:
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 80126fe:	4b46      	ldr	r3, [pc, #280]	; (8012818 <mscd_xfer_cb+0x56c>)
 8012700:	2b00      	cmp	r3, #0
 8012702:	d01a      	beq.n	801273a <mscd_xfer_cb+0x48e>
 8012704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012706:	7b5b      	ldrb	r3, [r3, #13]
 8012708:	4618      	mov	r0, r3
 801270a:	f3af 8000 	nop.w
          break;
 801270e:	e014      	b.n	801273a <mscd_xfer_cb+0x48e>

          case SCSI_CMD_WRITE_10:
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 8012710:	4b42      	ldr	r3, [pc, #264]	; (801281c <mscd_xfer_cb+0x570>)
 8012712:	2b00      	cmp	r3, #0
 8012714:	d013      	beq.n	801273e <mscd_xfer_cb+0x492>
 8012716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012718:	7b5b      	ldrb	r3, [r3, #13]
 801271a:	4618      	mov	r0, r3
 801271c:	f3af 8000 	nop.w
          break;
 8012720:	e00d      	b.n	801273e <mscd_xfer_cb+0x492>

          default:
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 8012722:	4b3f      	ldr	r3, [pc, #252]	; (8012820 <mscd_xfer_cb+0x574>)
 8012724:	2b00      	cmp	r3, #0
 8012726:	d00c      	beq.n	8012742 <mscd_xfer_cb+0x496>
 8012728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801272a:	7b5a      	ldrb	r2, [r3, #13]
 801272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801272e:	330f      	adds	r3, #15
 8012730:	4619      	mov	r1, r3
 8012732:	4610      	mov	r0, r2
 8012734:	f3af 8000 	nop.w
          break;
 8012738:	e003      	b.n	8012742 <mscd_xfer_cb+0x496>
          break;
 801273a:	bf00      	nop
 801273c:	e002      	b.n	8012744 <mscd_xfer_cb+0x498>
          break;
 801273e:	bf00      	nop
 8012740:	e000      	b.n	8012744 <mscd_xfer_cb+0x498>
          break;
 8012742:	bf00      	nop
        }

        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8012744:	79fb      	ldrb	r3, [r7, #7]
 8012746:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012748:	4618      	mov	r0, r3
 801274a:	f7ff fa79 	bl	8011c40 <prepare_cbw>
 801274e:	4603      	mov	r3, r0
 8012750:	f083 0301 	eor.w	r3, r3, #1
 8012754:	b2db      	uxtb	r3, r3
 8012756:	2b00      	cmp	r3, #0
 8012758:	d014      	beq.n	8012784 <mscd_xfer_cb+0x4d8>
 801275a:	f240 2257 	movw	r2, #599	; 0x257
 801275e:	4928      	ldr	r1, [pc, #160]	; (8012800 <mscd_xfer_cb+0x554>)
 8012760:	4828      	ldr	r0, [pc, #160]	; (8012804 <mscd_xfer_cb+0x558>)
 8012762:	f005 fa95 	bl	8017c90 <iprintf>
 8012766:	4b28      	ldr	r3, [pc, #160]	; (8012808 <mscd_xfer_cb+0x55c>)
 8012768:	64fb      	str	r3, [r7, #76]	; 0x4c
 801276a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	f003 0301 	and.w	r3, r3, #1
 8012772:	2b00      	cmp	r3, #0
 8012774:	d000      	beq.n	8012778 <mscd_xfer_cb+0x4cc>
 8012776:	be00      	bkpt	0x0000
 8012778:	2300      	movs	r3, #0
 801277a:	e072      	b.n	8012862 <mscd_xfer_cb+0x5b6>
      }else
      {
        // Any xfer ended here is consider unknown error, ignore it
        TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
 801277c:	4829      	ldr	r0, [pc, #164]	; (8012824 <mscd_xfer_cb+0x578>)
 801277e:	f005 fb23 	bl	8017dc8 <puts>
      }
    break;
 8012782:	e005      	b.n	8012790 <mscd_xfer_cb+0x4e4>
 8012784:	e004      	b.n	8012790 <mscd_xfer_cb+0x4e4>

    default : break;
 8012786:	bf00      	nop
 8012788:	e002      	b.n	8012790 <mscd_xfer_cb+0x4e4>
    break;
 801278a:	bf00      	nop
 801278c:	e000      	b.n	8012790 <mscd_xfer_cb+0x4e4>
    break;
 801278e:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 8012790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012796:	2b02      	cmp	r3, #2
 8012798:	d162      	bne.n	8012860 <mscd_xfer_cb+0x5b4>
  {
    // skip status if epin is currently stalled, will do it when received Clear Stall request
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 801279a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801279c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80127a0:	79fb      	ldrb	r3, [r7, #7]
 80127a2:	4611      	mov	r1, r2
 80127a4:	4618      	mov	r0, r3
 80127a6:	f002 fea7 	bl	80154f8 <usbd_edpt_stalled>
 80127aa:	4603      	mov	r3, r0
 80127ac:	f083 0301 	eor.w	r3, r3, #1
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d054      	beq.n	8012860 <mscd_xfer_cb+0x5b4>
    {
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 80127b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127b8:	689a      	ldr	r2, [r3, #8]
 80127ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127be:	429a      	cmp	r2, r3
 80127c0:	d932      	bls.n	8012828 <mscd_xfer_cb+0x57c>
 80127c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127c4:	7b1b      	ldrb	r3, [r3, #12]
 80127c6:	75bb      	strb	r3, [r7, #22]
  return tu_bit_test(dir, 7);
 80127c8:	7dbb      	ldrb	r3, [r7, #22]
 80127ca:	613b      	str	r3, [r7, #16]
 80127cc:	2307      	movs	r3, #7
 80127ce:	73fb      	strb	r3, [r7, #15]
 80127d0:	7bfb      	ldrb	r3, [r7, #15]
 80127d2:	693a      	ldr	r2, [r7, #16]
 80127d4:	fa22 f303 	lsr.w	r3, r2, r3
 80127d8:	f003 0301 	and.w	r3, r3, #1
 80127dc:	2b00      	cmp	r3, #0
 80127de:	bf14      	ite	ne
 80127e0:	2301      	movne	r3, #1
 80127e2:	2300      	moveq	r3, #0
 80127e4:	b2db      	uxtb	r3, r3
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d01e      	beq.n	8012828 <mscd_xfer_cb+0x57c>
      {
        // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
        // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
        usbd_edpt_stall(rhport, p_msc->ep_in);
 80127ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127ec:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80127f0:	79fb      	ldrb	r3, [r7, #7]
 80127f2:	4611      	mov	r1, r2
 80127f4:	4618      	mov	r0, r3
 80127f6:	f002 fde3 	bl	80153c0 <usbd_edpt_stall>
 80127fa:	e031      	b.n	8012860 <mscd_xfer_cb+0x5b4>
 80127fc:	20009104 	.word	0x20009104
 8012800:	0801b3b8 	.word	0x0801b3b8
 8012804:	08019f10 	.word	0x08019f10
 8012808:	e000edf0 	.word	0xe000edf0
 801280c:	08019fe8 	.word	0x08019fe8
 8012810:	0801a000 	.word	0x0801a000
 8012814:	0801a01c 	.word	0x0801a01c
	...
 8012824:	0801a03c 	.word	0x0801a03c
      }else
      {
        TU_ASSERT( send_csw(rhport, p_msc) );
 8012828:	79fb      	ldrb	r3, [r7, #7]
 801282a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801282c:	4618      	mov	r0, r3
 801282e:	f7ff f9e7 	bl	8011c00 <send_csw>
 8012832:	4603      	mov	r3, r0
 8012834:	f083 0301 	eor.w	r3, r3, #1
 8012838:	b2db      	uxtb	r3, r3
 801283a:	2b00      	cmp	r3, #0
 801283c:	d010      	beq.n	8012860 <mscd_xfer_cb+0x5b4>
 801283e:	f240 226e 	movw	r2, #622	; 0x26e
 8012842:	490a      	ldr	r1, [pc, #40]	; (801286c <mscd_xfer_cb+0x5c0>)
 8012844:	480a      	ldr	r0, [pc, #40]	; (8012870 <mscd_xfer_cb+0x5c4>)
 8012846:	f005 fa23 	bl	8017c90 <iprintf>
 801284a:	4b0a      	ldr	r3, [pc, #40]	; (8012874 <mscd_xfer_cb+0x5c8>)
 801284c:	637b      	str	r3, [r7, #52]	; 0x34
 801284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	f003 0301 	and.w	r3, r3, #1
 8012856:	2b00      	cmp	r3, #0
 8012858:	d000      	beq.n	801285c <mscd_xfer_cb+0x5b0>
 801285a:	be00      	bkpt	0x0000
 801285c:	2300      	movs	r3, #0
 801285e:	e000      	b.n	8012862 <mscd_xfer_cb+0x5b6>
      send_csw(rhport, p_msc);
    }
    #endif
  }

  return true;
 8012860:	2301      	movs	r3, #1
}
 8012862:	4618      	mov	r0, r3
 8012864:	3764      	adds	r7, #100	; 0x64
 8012866:	46bd      	mov	sp, r7
 8012868:	bd90      	pop	{r4, r7, pc}
 801286a:	bf00      	nop
 801286c:	0801b3b8 	.word	0x0801b3b8
 8012870:	08019f10 	.word	0x08019f10
 8012874:	e000edf0 	.word	0xe000edf0

08012878 <proc_builtin_scsi>:
 *------------------------------------------------------------------*/

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
static int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 8012878:	b590      	push	{r4, r7, lr}
 801287a:	b0a3      	sub	sp, #140	; 0x8c
 801287c:	af00      	add	r7, sp, #0
 801287e:	60b9      	str	r1, [r7, #8]
 8012880:	607a      	str	r2, [r7, #4]
 8012882:	603b      	str	r3, [r7, #0]
 8012884:	4603      	mov	r3, r0
 8012886:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  mscd_interface_t* p_msc = &_mscd_itf;
 8012888:	4bb3      	ldr	r3, [pc, #716]	; (8012b58 <proc_builtin_scsi+0x2e0>)
 801288a:	67fb      	str	r3, [r7, #124]	; 0x7c

  switch ( scsi_cmd[0] )
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	2b25      	cmp	r3, #37	; 0x25
 8012892:	f200 81f2 	bhi.w	8012c7a <proc_builtin_scsi+0x402>
 8012896:	a201      	add	r2, pc, #4	; (adr r2, 801289c <proc_builtin_scsi+0x24>)
 8012898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801289c:	08012935 	.word	0x08012935
 80128a0:	08012c7b 	.word	0x08012c7b
 80128a4:	08012c7b 	.word	0x08012c7b
 80128a8:	08012be3 	.word	0x08012be3
 80128ac:	08012c7b 	.word	0x08012c7b
 80128b0:	08012c7b 	.word	0x08012c7b
 80128b4:	08012c7b 	.word	0x08012c7b
 80128b8:	08012c7b 	.word	0x08012c7b
 80128bc:	08012c7b 	.word	0x08012c7b
 80128c0:	08012c7b 	.word	0x08012c7b
 80128c4:	08012c7b 	.word	0x08012c7b
 80128c8:	08012c7b 	.word	0x08012c7b
 80128cc:	08012c7b 	.word	0x08012c7b
 80128d0:	08012c7b 	.word	0x08012c7b
 80128d4:	08012c7b 	.word	0x08012c7b
 80128d8:	08012c7b 	.word	0x08012c7b
 80128dc:	08012c7b 	.word	0x08012c7b
 80128e0:	08012c7b 	.word	0x08012c7b
 80128e4:	08012acb 	.word	0x08012acb
 80128e8:	08012c7b 	.word	0x08012c7b
 80128ec:	08012c7b 	.word	0x08012c7b
 80128f0:	08012c7b 	.word	0x08012c7b
 80128f4:	08012c7b 	.word	0x08012c7b
 80128f8:	08012c7b 	.word	0x08012c7b
 80128fc:	08012c7b 	.word	0x08012c7b
 8012900:	08012c7b 	.word	0x08012c7b
 8012904:	08012b61 	.word	0x08012b61
 8012908:	0801296f 	.word	0x0801296f
 801290c:	08012c7b 	.word	0x08012c7b
 8012910:	08012c7b 	.word	0x08012c7b
 8012914:	08012c7b 	.word	0x08012c7b
 8012918:	08012c7b 	.word	0x08012c7b
 801291c:	08012c7b 	.word	0x08012c7b
 8012920:	08012c7b 	.word	0x08012c7b
 8012924:	08012c7b 	.word	0x08012c7b
 8012928:	08012a4d 	.word	0x08012a4d
 801292c:	08012c7b 	.word	0x08012c7b
 8012930:	080129e7 	.word	0x080129e7
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 8012934:	2300      	movs	r3, #0
 8012936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      if ( !tud_msc_test_unit_ready_cb(lun) )
 801293a:	7bfb      	ldrb	r3, [r7, #15]
 801293c:	4618      	mov	r0, r3
 801293e:	f7fe f8af 	bl	8010aa0 <tud_msc_test_unit_ready_cb>
 8012942:	4603      	mov	r3, r0
 8012944:	f083 0301 	eor.w	r3, r3, #1
 8012948:	b2db      	uxtb	r3, r3
 801294a:	2b00      	cmp	r3, #0
 801294c:	f000 819a 	beq.w	8012c84 <proc_builtin_scsi+0x40c>
      {
        // Failed status response
        resplen = - 1;
 8012950:	f04f 33ff 	mov.w	r3, #4294967295
 8012954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8012958:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801295a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801295e:	2b00      	cmp	r3, #0
 8012960:	f040 8190 	bne.w	8012c84 <proc_builtin_scsi+0x40c>
 8012964:	7bfb      	ldrb	r3, [r7, #15]
 8012966:	4618      	mov	r0, r3
 8012968:	f7ff fab6 	bl	8011ed8 <set_sense_medium_not_present>
      }
    break;
 801296c:	e18a      	b.n	8012c84 <proc_builtin_scsi+0x40c>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 801296e:	2300      	movs	r3, #0
 8012970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      if (tud_msc_start_stop_cb)
 8012974:	4b79      	ldr	r3, [pc, #484]	; (8012b5c <proc_builtin_scsi+0x2e4>)
 8012976:	2b00      	cmp	r3, #0
 8012978:	f000 8186 	beq.w	8012c88 <proc_builtin_scsi+0x410>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	677b      	str	r3, [r7, #116]	; 0x74
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8012980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012982:	791b      	ldrb	r3, [r3, #4]
 8012984:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8012988:	b2db      	uxtb	r3, r3
 801298a:	4619      	mov	r1, r3
 801298c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801298e:	791b      	ldrb	r3, [r3, #4]
 8012990:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8012994:	b2db      	uxtb	r3, r3
 8012996:	2b00      	cmp	r3, #0
 8012998:	bf14      	ite	ne
 801299a:	2301      	movne	r3, #1
 801299c:	2300      	moveq	r3, #0
 801299e:	b2da      	uxtb	r2, r3
 80129a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129a2:	791b      	ldrb	r3, [r3, #4]
 80129a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80129a8:	b2db      	uxtb	r3, r3
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	bf14      	ite	ne
 80129ae:	2301      	movne	r3, #1
 80129b0:	2300      	moveq	r3, #0
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	7bf8      	ldrb	r0, [r7, #15]
 80129b6:	f7fe f8bf 	bl	8010b38 <tud_msc_start_stop_cb>
 80129ba:	4603      	mov	r3, r0
 80129bc:	f083 0301 	eor.w	r3, r3, #1
 80129c0:	b2db      	uxtb	r3, r3
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	f000 8160 	beq.w	8012c88 <proc_builtin_scsi+0x410>
        {
          // Failed status response
          resplen = - 1;
 80129c8:	f04f 33ff 	mov.w	r3, #4294967295
 80129cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

          // set default sense if not set by callback
          if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 80129d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	f040 8156 	bne.w	8012c88 <proc_builtin_scsi+0x410>
 80129dc:	7bfb      	ldrb	r3, [r7, #15]
 80129de:	4618      	mov	r0, r3
 80129e0:	f7ff fa7a 	bl	8011ed8 <set_sense_medium_not_present>
        }
      }
    break;
 80129e4:	e150      	b.n	8012c88 <proc_builtin_scsi+0x410>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 80129e6:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 80129ea:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80129ee:	7bfb      	ldrb	r3, [r7, #15]
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7fe f861 	bl	8010ab8 <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 80129f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80129fa:	67bb      	str	r3, [r7, #120]	; 0x78

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 80129fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d002      	beq.n	8012a08 <proc_builtin_scsi+0x190>
 8012a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d10d      	bne.n	8012a24 <proc_builtin_scsi+0x1ac>
      {
        resplen = -1;
 8012a08:	f04f 33ff 	mov.w	r3, #4294967295
 8012a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8012a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d117      	bne.n	8012a4a <proc_builtin_scsi+0x1d2>
 8012a1a:	7bfb      	ldrb	r3, [r7, #15]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7ff fa5b 	bl	8011ed8 <set_sense_medium_not_present>
 8012a22:	e012      	b.n	8012a4a <proc_builtin_scsi+0x1d2>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba   = tu_htonl(block_count-1);
 8012a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a26:	3b01      	subs	r3, #1
 8012a28:	ba1b      	rev	r3, r3
 8012a2a:	667b      	str	r3, [r7, #100]	; 0x64
        read_capa10.block_size = tu_htonl(block_size);
 8012a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a2e:	ba1b      	rev	r3, r3
 8012a30:	66bb      	str	r3, [r7, #104]	; 0x68

        resplen = sizeof(read_capa10);
 8012a32:	2308      	movs	r3, #8
 8012a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_capa10, resplen);
 8012a38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012a3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012a40:	4619      	mov	r1, r3
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f005 f85f 	bl	8017b06 <memcpy>
      }
    }
    break;
 8012a48:	e11f      	b.n	8012c8a <proc_builtin_scsi+0x412>
 8012a4a:	e11e      	b.n	8012c8a <proc_builtin_scsi+0x412>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 8012a4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012a50:	2200      	movs	r2, #0
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	605a      	str	r2, [r3, #4]
 8012a56:	609a      	str	r2, [r3, #8]
 8012a58:	2308      	movs	r3, #8
 8012a5a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8012a5e:	2302      	movs	r3, #2
 8012a60:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8012a64:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8012a68:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8012a6c:	7bfb      	ldrb	r3, [r7, #15]
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7fe f822 	bl	8010ab8 <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8012a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d003      	beq.n	8012a82 <proc_builtin_scsi+0x20a>
 8012a7a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d10d      	bne.n	8012a9e <proc_builtin_scsi+0x226>
      {
        resplen = -1;
 8012a82:	f04f 33ff 	mov.w	r3, #4294967295
 8012a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8012a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d119      	bne.n	8012ac8 <proc_builtin_scsi+0x250>
 8012a94:	7bfb      	ldrb	r3, [r7, #15]
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7ff fa1e 	bl	8011ed8 <set_sense_medium_not_present>
 8012a9c:	e014      	b.n	8012ac8 <proc_builtin_scsi+0x250>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 8012a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012aa0:	ba1b      	rev	r3, r3
 8012aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8012aa4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8012aa8:	ba5b      	rev16	r3, r3
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        resplen = sizeof(read_fmt_capa);
 8012ab0:	230c      	movs	r3, #12
 8012ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_fmt_capa, resplen);
 8012ab6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012aba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012abe:	4619      	mov	r1, r3
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f005 f820 	bl	8017b06 <memcpy>
      }
    }
    break;
 8012ac6:	e0e0      	b.n	8012c8a <proc_builtin_scsi+0x412>
 8012ac8:	e0df      	b.n	8012c8a <proc_builtin_scsi+0x412>

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 8012aca:	f107 0314 	add.w	r3, r7, #20
 8012ace:	2224      	movs	r2, #36	; 0x24
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f005 f83f 	bl	8017b56 <memset>
 8012ad8:	7d7b      	ldrb	r3, [r7, #21]
 8012ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ade:	757b      	strb	r3, [r7, #21]
 8012ae0:	2302      	movs	r3, #2
 8012ae2:	75bb      	strb	r3, [r7, #22]
 8012ae4:	7dfb      	ldrb	r3, [r7, #23]
 8012ae6:	2202      	movs	r2, #2
 8012ae8:	f362 0303 	bfi	r3, r2, #0, #4
 8012aec:	75fb      	strb	r3, [r7, #23]
          .version              = 2,
          .response_data_format = 2,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 8012aee:	f107 0314 	add.w	r3, r7, #20
 8012af2:	3308      	adds	r3, #8
 8012af4:	2208      	movs	r2, #8
 8012af6:	2120      	movs	r1, #32
 8012af8:	4618      	mov	r0, r3
 8012afa:	f005 f82c 	bl	8017b56 <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 8012afe:	f107 0314 	add.w	r3, r7, #20
 8012b02:	3310      	adds	r3, #16
 8012b04:	2210      	movs	r2, #16
 8012b06:	2120      	movs	r1, #32
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f005 f824 	bl	8017b56 <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 8012b0e:	f107 0314 	add.w	r3, r7, #20
 8012b12:	3320      	adds	r3, #32
 8012b14:	2204      	movs	r2, #4
 8012b16:	2120      	movs	r1, #32
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f005 f81c 	bl	8017b56 <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 8012b1e:	f107 0314 	add.w	r3, r7, #20
 8012b22:	f103 0420 	add.w	r4, r3, #32
 8012b26:	f107 0314 	add.w	r3, r7, #20
 8012b2a:	f103 0210 	add.w	r2, r3, #16
 8012b2e:	f107 0314 	add.w	r3, r7, #20
 8012b32:	f103 0108 	add.w	r1, r3, #8
 8012b36:	7bf8      	ldrb	r0, [r7, #15]
 8012b38:	4623      	mov	r3, r4
 8012b3a:	f7fd ff6b 	bl	8010a14 <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 8012b3e:	2324      	movs	r3, #36	; 0x24
 8012b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &inquiry_rsp, resplen);
 8012b44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012b48:	f107 0314 	add.w	r3, r7, #20
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	6878      	ldr	r0, [r7, #4]
 8012b50:	f004 ffd9 	bl	8017b06 <memcpy>
    }
    break;
 8012b54:	e099      	b.n	8012c8a <proc_builtin_scsi+0x412>
 8012b56:	bf00      	nop
 8012b58:	200090c4 	.word	0x200090c4
 8012b5c:	08010b39 	.word	0x08010b39

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 8012b60:	2303      	movs	r3, #3
 8012b62:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8012b66:	2300      	movs	r3, #0
 8012b68:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8012b6c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8012b70:	f36f 0306 	bfc	r3, #0, #7
 8012b74:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8012b78:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8012b7c:	f36f 13c7 	bfc	r3, #7, #1
 8012b80:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8012b84:	2300      	movs	r3, #0
 8012b86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          .write_protected      = false,
          .reserved             = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      if ( tud_msc_is_writable_cb )
 8012b90:	4b41      	ldr	r3, [pc, #260]	; (8012c98 <proc_builtin_scsi+0x420>)
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d006      	beq.n	8012ba4 <proc_builtin_scsi+0x32c>
      {
        writable = tud_msc_is_writable_cb(lun);
 8012b96:	7bfb      	ldrb	r3, [r7, #15]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f3af 8000 	nop.w
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      }

      mode_resp.write_protected = !writable;
 8012ba4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	bf14      	ite	ne
 8012bac:	2301      	movne	r3, #1
 8012bae:	2300      	moveq	r3, #0
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	f083 0301 	eor.w	r3, r3, #1
 8012bb6:	b2db      	uxtb	r3, r3
 8012bb8:	f003 0301 	and.w	r3, r3, #1
 8012bbc:	b2da      	uxtb	r2, r3
 8012bbe:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8012bc2:	f362 13c7 	bfi	r3, r2, #7, #1
 8012bc6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

      resplen = sizeof(mode_resp);
 8012bca:	2304      	movs	r3, #4
 8012bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &mode_resp, resplen);
 8012bd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012bd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012bd8:	4619      	mov	r1, r3
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f004 ff93 	bl	8017b06 <memcpy>
    }
    break;
 8012be0:	e053      	b.n	8012c8a <proc_builtin_scsi+0x412>

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 8012be2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012be6:	2200      	movs	r2, #0
 8012be8:	601a      	str	r2, [r3, #0]
 8012bea:	605a      	str	r2, [r3, #4]
 8012bec:	609a      	str	r2, [r3, #8]
 8012bee:	60da      	str	r2, [r3, #12]
 8012bf0:	821a      	strh	r2, [r3, #16]
 8012bf2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012bf6:	2270      	movs	r2, #112	; 0x70
 8012bf8:	f362 0306 	bfi	r3, r2, #0, #7
 8012bfc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8012c00:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c08:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      {
          .response_code = 0x70, // current, fixed format
          .valid         = 1
      };

      sense_rsp.add_sense_len       = sizeof(scsi_sense_fixed_resp_t) - 8;
 8012c0c:	230a      	movs	r3, #10
 8012c0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      sense_rsp.sense_key           = p_msc->sense_key;
 8012c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c18:	f003 030f 	and.w	r3, r3, #15
 8012c1c:	b2da      	uxtb	r2, r3
 8012c1e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8012c22:	f362 0303 	bfi	r3, r2, #0, #4
 8012c26:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 8012c2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c30:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 8012c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012c3a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

      resplen = sizeof(sense_rsp);
 8012c3e:	2312      	movs	r3, #18
 8012c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &sense_rsp, resplen);
 8012c44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012c48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f004 ff59 	bl	8017b06 <memcpy>

      // request sense callback could overwrite the sense data
      if (tud_msc_request_sense_cb)
 8012c54:	4b11      	ldr	r3, [pc, #68]	; (8012c9c <proc_builtin_scsi+0x424>)
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d008      	beq.n	8012c6c <proc_builtin_scsi+0x3f4>
      {
        resplen = tud_msc_request_sense_cb(lun, buffer, bufsize);
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	7bfb      	ldrb	r3, [r7, #15]
 8012c60:	6879      	ldr	r1, [r7, #4]
 8012c62:	4618      	mov	r0, r3
 8012c64:	f3af 8000 	nop.w
 8012c68:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      }

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 8012c6c:	7bf8      	ldrb	r0, [r7, #15]
 8012c6e:	2300      	movs	r3, #0
 8012c70:	2200      	movs	r2, #0
 8012c72:	2100      	movs	r1, #0
 8012c74:	f7ff f90c 	bl	8011e90 <tud_msc_set_sense>
    }
    break;
 8012c78:	e007      	b.n	8012c8a <proc_builtin_scsi+0x412>

    default: resplen = -1; break;
 8012c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012c82:	e002      	b.n	8012c8a <proc_builtin_scsi+0x412>
    break;
 8012c84:	bf00      	nop
 8012c86:	e000      	b.n	8012c8a <proc_builtin_scsi+0x412>
    break;
 8012c88:	bf00      	nop
  }

  return resplen;
 8012c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	378c      	adds	r7, #140	; 0x8c
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd90      	pop	{r4, r7, pc}
 8012c96:	bf00      	nop
	...

08012ca0 <proc_read10_cmd>:

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b08c      	sub	sp, #48	; 0x30
 8012ca4:	af02      	add	r7, sp, #8
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	6039      	str	r1, [r7, #0]
 8012caa:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	627b      	str	r3, [r7, #36]	; 0x24

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 8012cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cb2:	f7ff f85a 	bl	8011d6a <rdwr10_get_blocksize>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	847b      	strh	r3, [r7, #34]	; 0x22

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbc:	330f      	adds	r3, #15
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7ff f82d 	bl	8011d1e <rdwr10_get_lba>
 8012cc4:	4601      	mov	r1, r0
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012cd0:	440b      	add	r3, r1
 8012cd2:	61fb      	str	r3, [r7, #28]

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 8012cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd6:	689a      	ldr	r2, [r3, #8]
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cdc:	1ad3      	subs	r3, r2, r3
 8012cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ce2:	60fa      	str	r2, [r7, #12]
 8012ce4:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	4293      	cmp	r3, r2
 8012cec:	bf28      	it	cs
 8012cee:	4613      	movcs	r3, r2
 8012cf0:	61bb      	str	r3, [r7, #24]

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012cfc:	fb01 f202 	mul.w	r2, r1, r2
 8012d00:	1a9b      	subs	r3, r3, r2
 8012d02:	617b      	str	r3, [r7, #20]
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 8012d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d06:	7b58      	ldrb	r0, [r3, #13]
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	9300      	str	r3, [sp, #0]
 8012d0c:	4b23      	ldr	r3, [pc, #140]	; (8012d9c <proc_read10_cmd+0xfc>)
 8012d0e:	697a      	ldr	r2, [r7, #20]
 8012d10:	69f9      	ldr	r1, [r7, #28]
 8012d12:	f7fd ff27 	bl	8010b64 <tud_msc_read10_cb>
 8012d16:	61b8      	str	r0, [r7, #24]

  if ( nbytes < 0 )
 8012d18:	69bb      	ldr	r3, [r7, #24]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	da0e      	bge.n	8012d3c <proc_read10_cmd+0x9c>
  {
    // negative means error -> endpoint is stalled & status in CSW set to failed
    TU_LOG(MSC_DEBUG, "  tud_msc_read10_cb() return -1\r\n");
 8012d1e:	4820      	ldr	r0, [pc, #128]	; (8012da0 <proc_read10_cmd+0x100>)
 8012d20:	f005 f852 	bl	8017dc8 <puts>

    // set sense
    set_sense_medium_not_present(p_cbw->lun);
 8012d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d26:	7b5b      	ldrb	r3, [r3, #13]
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7ff f8d5 	bl	8011ed8 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8012d2e:	79fb      	ldrb	r3, [r7, #7]
 8012d30:	2201      	movs	r2, #1
 8012d32:	6839      	ldr	r1, [r7, #0]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7fe ff9a 	bl	8011c6e <fail_scsi_op>
 8012d3a:	e02c      	b.n	8012d96 <proc_read10_cmd+0xf6>
  }
  else if ( nbytes == 0 )
 8012d3c:	69bb      	ldr	r3, [r7, #24]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d10a      	bne.n	8012d58 <proc_read10_cmd+0xb8>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8012d48:	79f8      	ldrb	r0, [r7, #7]
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	2300      	movs	r3, #0
 8012d50:	2200      	movs	r2, #0
 8012d52:	f002 f8c6 	bl	8014ee2 <dcd_event_xfer_complete>
 8012d56:	e01e      	b.n	8012d96 <proc_read10_cmd+0xf6>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, nbytes), );
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	79f8      	ldrb	r0, [r7, #7]
 8012d64:	4a0d      	ldr	r2, [pc, #52]	; (8012d9c <proc_read10_cmd+0xfc>)
 8012d66:	f002 fa7d 	bl	8015264 <usbd_edpt_xfer>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	f083 0301 	eor.w	r3, r3, #1
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d00f      	beq.n	8012d96 <proc_read10_cmd+0xf6>
 8012d76:	f240 325d 	movw	r2, #861	; 0x35d
 8012d7a:	490a      	ldr	r1, [pc, #40]	; (8012da4 <proc_read10_cmd+0x104>)
 8012d7c:	480a      	ldr	r0, [pc, #40]	; (8012da8 <proc_read10_cmd+0x108>)
 8012d7e:	f004 ff87 	bl	8017c90 <iprintf>
 8012d82:	4b0a      	ldr	r3, [pc, #40]	; (8012dac <proc_read10_cmd+0x10c>)
 8012d84:	613b      	str	r3, [r7, #16]
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f003 0301 	and.w	r3, r3, #1
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d000      	beq.n	8012d94 <proc_read10_cmd+0xf4>
 8012d92:	be00      	bkpt	0x0000
 8012d94:	bf00      	nop
  }
}
 8012d96:	3728      	adds	r7, #40	; 0x28
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	20009104 	.word	0x20009104
 8012da0:	0801a074 	.word	0x0801a074
 8012da4:	0801b3c8 	.word	0x0801b3c8
 8012da8:	08019f10 	.word	0x08019f10
 8012dac:	e000edf0 	.word	0xe000edf0

08012db0 <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b088      	sub	sp, #32
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	4603      	mov	r3, r0
 8012db8:	6039      	str	r1, [r7, #0]
 8012dba:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	77fb      	strb	r3, [r7, #31]

  if ( tud_msc_is_writable_cb )
 8012dc4:	4b27      	ldr	r3, [pc, #156]	; (8012e64 <proc_write10_cmd+0xb4>)
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d006      	beq.n	8012dd8 <proc_write10_cmd+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	7b5b      	ldrb	r3, [r3, #13]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f3af 8000 	nop.w
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	77fb      	strb	r3, [r7, #31]
  }

  if ( !writable )
 8012dd8:	7ffb      	ldrb	r3, [r7, #31]
 8012dda:	f083 0301 	eor.w	r3, r3, #1
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d00d      	beq.n	8012e00 <proc_write10_cmd+0x50>
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
 8012de4:	69bb      	ldr	r3, [r7, #24]
 8012de6:	7b58      	ldrb	r0, [r3, #13]
 8012de8:	2300      	movs	r3, #0
 8012dea:	2227      	movs	r2, #39	; 0x27
 8012dec:	2107      	movs	r1, #7
 8012dee:	f7ff f84f 	bl	8011e90 <tud_msc_set_sense>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8012df2:	79fb      	ldrb	r3, [r7, #7]
 8012df4:	2201      	movs	r2, #1
 8012df6:	6839      	ldr	r1, [r7, #0]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7fe ff38 	bl	8011c6e <fail_scsi_op>
    return;
 8012dfe:	e02d      	b.n	8012e5c <proc_write10_cmd+0xac>
  }

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 8012e00:	69bb      	ldr	r3, [r7, #24]
 8012e02:	689a      	ldr	r2, [r3, #8]
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e08:	1ad3      	subs	r3, r2, r3
 8012e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e0e:	60fa      	str	r2, [r7, #12]
 8012e10:	60bb      	str	r3, [r7, #8]
 8012e12:	68fa      	ldr	r2, [r7, #12]
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	4293      	cmp	r3, r2
 8012e18:	bf28      	it	cs
 8012e1a:	4613      	movcs	r3, r2
 8012e1c:	617b      	str	r3, [r7, #20]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	79f8      	ldrb	r0, [r7, #7]
 8012e2a:	4a0f      	ldr	r2, [pc, #60]	; (8012e68 <proc_write10_cmd+0xb8>)
 8012e2c:	f002 fa1a 	bl	8015264 <usbd_edpt_xfer>
 8012e30:	4603      	mov	r3, r0
 8012e32:	f083 0301 	eor.w	r3, r3, #1
 8012e36:	b2db      	uxtb	r3, r3
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d00f      	beq.n	8012e5c <proc_write10_cmd+0xac>
 8012e3c:	f44f 725e 	mov.w	r2, #888	; 0x378
 8012e40:	490a      	ldr	r1, [pc, #40]	; (8012e6c <proc_write10_cmd+0xbc>)
 8012e42:	480b      	ldr	r0, [pc, #44]	; (8012e70 <proc_write10_cmd+0xc0>)
 8012e44:	f004 ff24 	bl	8017c90 <iprintf>
 8012e48:	4b0a      	ldr	r3, [pc, #40]	; (8012e74 <proc_write10_cmd+0xc4>)
 8012e4a:	613b      	str	r3, [r7, #16]
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	f003 0301 	and.w	r3, r3, #1
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d000      	beq.n	8012e5a <proc_write10_cmd+0xaa>
 8012e58:	be00      	bkpt	0x0000
 8012e5a:	bf00      	nop
}
 8012e5c:	3720      	adds	r7, #32
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	00000000 	.word	0x00000000
 8012e68:	20009104 	.word	0x20009104
 8012e6c:	0801b3d8 	.word	0x0801b3d8
 8012e70:	08019f10 	.word	0x08019f10
 8012e74:	e000edf0 	.word	0xe000edf0

08012e78 <proc_write10_new_data>:

// process new data arrived from WRITE10
static void proc_write10_new_data(uint8_t rhport, mscd_interface_t* p_msc, uint32_t xferred_bytes)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b08c      	sub	sp, #48	; 0x30
 8012e7c:	af02      	add	r7, sp, #8
 8012e7e:	4603      	mov	r3, r0
 8012e80:	60b9      	str	r1, [r7, #8]
 8012e82:	607a      	str	r2, [r7, #4]
 8012e84:	73fb      	strb	r3, [r7, #15]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	627b      	str	r3, [r7, #36]	; 0x24

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 8012e8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e8c:	f7fe ff6d 	bl	8011d6a <rdwr10_get_blocksize>
 8012e90:	4603      	mov	r3, r0
 8012e92:	847b      	strh	r3, [r7, #34]	; 0x22

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8012e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e96:	330f      	adds	r3, #15
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7fe ff40 	bl	8011d1e <rdwr10_get_lba>
 8012e9e:	4601      	mov	r1, r0
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ea4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8012eaa:	440b      	add	r3, r1
 8012eac:	61fb      	str	r3, [r7, #28]

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012eb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012eb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012eb8:	fb01 f202 	mul.w	r2, r1, r2
 8012ebc:	1a9b      	subs	r3, r3, r2
 8012ebe:	61bb      	str	r3, [r7, #24]
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 8012ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec2:	7b58      	ldrb	r0, [r3, #13]
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	4b2d      	ldr	r3, [pc, #180]	; (8012f80 <proc_write10_new_data+0x108>)
 8012eca:	69ba      	ldr	r2, [r7, #24]
 8012ecc:	69f9      	ldr	r1, [r7, #28]
 8012ece:	f7fd feab 	bl	8010c28 <tud_msc_write10_cb>
 8012ed2:	6178      	str	r0, [r7, #20]

  if ( nbytes < 0 )
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	da14      	bge.n	8012f04 <proc_write10_new_data+0x8c>
  {
    // negative means error -> failed this scsi op
    TU_LOG(MSC_DEBUG, "  tud_msc_write10_cb() return -1\r\n");
 8012eda:	482a      	ldr	r0, [pc, #168]	; (8012f84 <proc_write10_new_data+0x10c>)
 8012edc:	f004 ff74 	bl	8017dc8 <puts>

    // update actual byte before failed
    p_msc->xferred_len += xferred_bytes;
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	441a      	add	r2, r3
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	639a      	str	r2, [r3, #56]	; 0x38

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);
 8012eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eee:	7b5b      	ldrb	r3, [r3, #13]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7fe fff1 	bl	8011ed8 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8012ef6:	7bfb      	ldrb	r3, [r7, #15]
 8012ef8:	2201      	movs	r2, #1
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7fe feb6 	bl	8011c6e <fail_scsi_op>
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
      }
    }
  }
}
 8012f02:	e039      	b.n	8012f78 <proc_write10_new_data+0x100>
    if ( (uint32_t) nbytes < xferred_bytes )
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d91f      	bls.n	8012f4c <proc_write10_new_data+0xd4>
      if ( nbytes > 0 )
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	dd0f      	ble.n	8012f32 <proc_write10_new_data+0xba>
        p_msc->xferred_len += nbytes;
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	441a      	add	r2, r3
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	639a      	str	r2, [r3, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, xferred_bytes-nbytes);
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	4a17      	ldr	r2, [pc, #92]	; (8012f80 <proc_write10_new_data+0x108>)
 8012f22:	1899      	adds	r1, r3, r2
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	1ad3      	subs	r3, r2, r3
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	4814      	ldr	r0, [pc, #80]	; (8012f80 <proc_write10_new_data+0x108>)
 8012f2e:	f004 fdf8 	bl	8017b22 <memmove>
      dcd_event_xfer_complete(rhport, p_msc->ep_out, xferred_bytes-nbytes, XFER_RESULT_SUCCESS, false);
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	687a      	ldr	r2, [r7, #4]
 8012f3c:	1ad2      	subs	r2, r2, r3
 8012f3e:	7bf8      	ldrb	r0, [r7, #15]
 8012f40:	2300      	movs	r3, #0
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	2300      	movs	r3, #0
 8012f46:	f001 ffcc 	bl	8014ee2 <dcd_event_xfer_complete>
}
 8012f4a:	e015      	b.n	8012f78 <proc_write10_new_data+0x100>
      p_msc->xferred_len += xferred_bytes;
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	441a      	add	r2, r3
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	639a      	str	r2, [r3, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d304      	bcc.n	8012f6e <proc_write10_new_data+0xf6>
        p_msc->stage = MSC_STAGE_STATUS;
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	2202      	movs	r2, #2
 8012f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8012f6c:	e004      	b.n	8012f78 <proc_write10_new_data+0x100>
        proc_write10_cmd(rhport, p_msc);
 8012f6e:	7bfb      	ldrb	r3, [r7, #15]
 8012f70:	68b9      	ldr	r1, [r7, #8]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ff ff1c 	bl	8012db0 <proc_write10_cmd>
}
 8012f78:	bf00      	nop
 8012f7a:	3728      	adds	r7, #40	; 0x28
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}
 8012f80:	20009104 	.word	0x20009104
 8012f84:	0801a098 	.word	0x0801a098

08012f88 <osal_semaphore_wait>:
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	6039      	str	r1, [r7, #0]
  uint32_t const ticks = (msec == OSAL_TIMEOUT_WAIT_FOREVER) ? portMAX_DELAY : pdMS_TO_TICKS(msec);
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f98:	d009      	beq.n	8012fae <osal_semaphore_wait+0x26>
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012fa0:	fb02 f303 	mul.w	r3, r2, r3
 8012fa4:	4a0a      	ldr	r2, [pc, #40]	; (8012fd0 <osal_semaphore_wait+0x48>)
 8012fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8012faa:	099b      	lsrs	r3, r3, #6
 8012fac:	e001      	b.n	8012fb2 <osal_semaphore_wait+0x2a>
 8012fae:	f04f 33ff 	mov.w	r3, #4294967295
 8012fb2:	60fb      	str	r3, [r7, #12]
  return xSemaphoreTake(sem_hdl, ticks);
 8012fb4:	68f9      	ldr	r1, [r7, #12]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f7f8 ffcc 	bl	800bf54 <xQueueSemaphoreTake>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	bf14      	ite	ne
 8012fc2:	2301      	movne	r3, #1
 8012fc4:	2300      	moveq	r3, #0
 8012fc6:	b2db      	uxtb	r3, r3
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	3710      	adds	r7, #16
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	10624dd3 	.word	0x10624dd3

08012fd4 <osal_mutex_lock>:

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	6039      	str	r1, [r7, #0]
  return osal_semaphore_wait(mutex_hdl, msec);
 8012fde:	6839      	ldr	r1, [r7, #0]
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f7ff ffd1 	bl	8012f88 <osal_semaphore_wait>
 8012fe6:	4603      	mov	r3, r0
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3708      	adds	r7, #8
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <osal_mutex_unlock>:

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
  return xSemaphoreGive(mutex_hdl);
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	2100      	movs	r1, #0
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f7f8 fca2 	bl	800b948 <xQueueGenericSend>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	bf14      	ite	ne
 801300a:	2301      	movne	r3, #1
 801300c:	2300      	moveq	r3, #0
 801300e:	b2db      	uxtb	r3, r3
}
 8013010:	4618      	mov	r0, r3
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <_ff_lock>:

// implement mutex lock and unlock
#if CFG_FIFO_MUTEX

static inline void _ff_lock(tu_fifo_mutex_t mutex)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d004      	beq.n	8013030 <_ff_lock+0x18>
 8013026:	f04f 31ff 	mov.w	r1, #4294967295
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f7ff ffd2 	bl	8012fd4 <osal_mutex_lock>
}
 8013030:	bf00      	nop
 8013032:	3708      	adds	r7, #8
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}

08013038 <_ff_unlock>:

static inline void _ff_unlock(tu_fifo_mutex_t mutex)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  if (mutex) osal_mutex_unlock(mutex);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d002      	beq.n	801304c <_ff_unlock+0x14>
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f7ff ffd2 	bl	8012ff0 <osal_mutex_unlock>
}
 801304c:	bf00      	nop
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	60f8      	str	r0, [r7, #12]
 801305c:	60b9      	str	r1, [r7, #8]
 801305e:	4611      	mov	r1, r2
 8013060:	461a      	mov	r2, r3
 8013062:	460b      	mov	r3, r1
 8013064:	80fb      	strh	r3, [r7, #6]
 8013066:	4613      	mov	r3, r2
 8013068:	80bb      	strh	r3, [r7, #4]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 801306a:	88fb      	ldrh	r3, [r7, #6]
 801306c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013070:	d901      	bls.n	8013076 <tu_fifo_config+0x22>
 8013072:	2300      	movs	r3, #0
 8013074:	e034      	b.n	80130e0 <tu_fifo_config+0x8c>

  _ff_lock(f->mutex_wr);
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	695b      	ldr	r3, [r3, #20]
 801307a:	4618      	mov	r0, r3
 801307c:	f7ff ffcc 	bl	8013018 <_ff_lock>
  _ff_lock(f->mutex_rd);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	699b      	ldr	r3, [r3, #24]
 8013084:	4618      	mov	r0, r3
 8013086:	f7ff ffc7 	bl	8013018 <_ff_lock>

  f->buffer = (uint8_t*) buffer;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	68ba      	ldr	r2, [r7, #8]
 801308e:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	88fa      	ldrh	r2, [r7, #6]
 8013094:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	88ba      	ldrh	r2, [r7, #4]
 801309a:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	7e3a      	ldrb	r2, [r7, #24]
 80130a0:	721a      	strb	r2, [r3, #8]

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = 2*depth - 1;
 80130a2:	88fb      	ldrh	r3, [r7, #6]
 80130a4:	005b      	lsls	r3, r3, #1
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	3b01      	subs	r3, #1
 80130aa:	b29a      	uxth	r2, r3
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	899b      	ldrh	r3, [r3, #12]
 80130b4:	43db      	mvns	r3, r3
 80130b6:	b29a      	uxth	r2, r3
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	815a      	strh	r2, [r3, #10]

  f->rd_idx = f->wr_idx = 0;
 80130bc:	2100      	movs	r1, #0
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	460a      	mov	r2, r1
 80130c2:	81da      	strh	r2, [r3, #14]
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	460a      	mov	r2, r1
 80130c8:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_wr);
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	695b      	ldr	r3, [r3, #20]
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7ff ffb2 	bl	8013038 <_ff_unlock>
  _ff_unlock(f->mutex_rd);
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	699b      	ldr	r3, [r3, #24]
 80130d8:	4618      	mov	r0, r3
 80130da:	f7ff ffad 	bl	8013038 <_ff_unlock>

  return true;
 80130de:	2301      	movs	r3, #1
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3710      	adds	r7, #16
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}

080130e8 <_ff_mod>:

// Static functions are intended to work on local variables
static inline uint16_t _ff_mod(uint16_t idx, uint16_t depth)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	4603      	mov	r3, r0
 80130f0:	460a      	mov	r2, r1
 80130f2:	80fb      	strh	r3, [r7, #6]
 80130f4:	4613      	mov	r3, r2
 80130f6:	80bb      	strh	r3, [r7, #4]
  while ( idx >= depth) idx -= depth;
 80130f8:	e003      	b.n	8013102 <_ff_mod+0x1a>
 80130fa:	88fa      	ldrh	r2, [r7, #6]
 80130fc:	88bb      	ldrh	r3, [r7, #4]
 80130fe:	1ad3      	subs	r3, r2, r3
 8013100:	80fb      	strh	r3, [r7, #6]
 8013102:	88fa      	ldrh	r2, [r7, #6]
 8013104:	88bb      	ldrh	r3, [r7, #4]
 8013106:	429a      	cmp	r2, r3
 8013108:	d2f7      	bcs.n	80130fa <_ff_mod+0x12>
  return idx;
 801310a:	88fb      	ldrh	r3, [r7, #6]
}
 801310c:	4618      	mov	r0, r3
 801310e:	370c      	adds	r7, #12
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr

08013118 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsis.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b08a      	sub	sp, #40	; 0x28
 801311c:	af00      	add	r7, sp, #0
 801311e:	60f8      	str	r0, [r7, #12]
 8013120:	60b9      	str	r1, [r7, #8]
 8013122:	4613      	mov	r3, r2
 8013124:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 801312a:	88fb      	ldrh	r3, [r7, #6]
 801312c:	089b      	lsrs	r3, r3, #2
 801312e:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8013130:	e00b      	b.n	801314a <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *rx_fifo);
 8013132:	6a3b      	ldr	r3, [r7, #32]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	68fa      	ldr	r2, [r7, #12]
 8013138:	61ba      	str	r2, [r7, #24]
 801313a:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 801313c:	69bb      	ldr	r3, [r7, #24]
 801313e:	697a      	ldr	r2, [r7, #20]
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	bf00      	nop
    ff_buf += 4;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	3304      	adds	r3, #4
 8013148:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 801314a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801314c:	1e5a      	subs	r2, r3, #1
 801314e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8013150:	2b00      	cmp	r3, #0
 8013152:	d1ee      	bne.n	8013132 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8013154:	88fb      	ldrh	r3, [r7, #6]
 8013156:	b2db      	uxtb	r3, r3
 8013158:	f003 0303 	and.w	r3, r3, #3
 801315c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 801315e:	7ffb      	ldrb	r3, [r7, #31]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d009      	beq.n	8013178 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *rx_fifo;
 8013164:	6a3b      	ldr	r3, [r7, #32]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 801316a:	7ffa      	ldrb	r2, [r7, #31]
 801316c:	f107 0310 	add.w	r3, r7, #16
 8013170:	4619      	mov	r1, r3
 8013172:	68f8      	ldr	r0, [r7, #12]
 8013174:	f004 fcc7 	bl	8017b06 <memcpy>
  }
}
 8013178:	bf00      	nop
 801317a:	3728      	adds	r7, #40	; 0x28
 801317c:	46bd      	mov	sp, r7
 801317e:	bd80      	pop	{r7, pc}

08013180 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b08a      	sub	sp, #40	; 0x28
 8013184:	af00      	add	r7, sp, #0
 8013186:	60f8      	str	r0, [r7, #12]
 8013188:	60b9      	str	r1, [r7, #8]
 801318a:	4613      	mov	r3, r2
 801318c:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	623b      	str	r3, [r7, #32]

  // Pushing full available 32 bit words to const app address
  uint16_t full_words = len >> 2;
 8013192:	88fb      	ldrh	r3, [r7, #6]
 8013194:	089b      	lsrs	r3, r3, #2
 8013196:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8013198:	e008      	b.n	80131ac <_ff_pull_const_addr+0x2c>
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(ff_buf);
 80131a2:	6a3b      	ldr	r3, [r7, #32]
 80131a4:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	3304      	adds	r3, #4
 80131aa:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80131ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80131ae:	1e5a      	subs	r2, r3, #1
 80131b0:	84fa      	strh	r2, [r7, #38]	; 0x26
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d1f1      	bne.n	801319a <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const app address
  uint8_t const bytes_rem = len & 0x03;
 80131b6:	88fb      	ldrh	r3, [r7, #6]
 80131b8:	b2db      	uxtb	r3, r3
 80131ba:	f003 0303 	and.w	r3, r3, #3
 80131be:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80131c0:	7ffb      	ldrb	r3, [r7, #31]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d00b      	beq.n	80131de <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80131c6:	2300      	movs	r3, #0
 80131c8:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80131ca:	7ffa      	ldrb	r2, [r7, #31]
 80131cc:	f107 0314 	add.w	r3, r7, #20
 80131d0:	68b9      	ldr	r1, [r7, #8]
 80131d2:	4618      	mov	r0, r3
 80131d4:	f004 fc97 	bl	8017b06 <memcpy>

    *tx_fifo = tmp32;
 80131d8:	697a      	ldr	r2, [r7, #20]
 80131da:	6a3b      	ldr	r3, [r7, #32]
 80131dc:	601a      	str	r2, [r3, #0]
  }
}
 80131de:	bf00      	nop
 80131e0:	3728      	adds	r7, #40	; 0x28
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}

080131e6 <_ff_push_n>:
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
}

// send n items to FIFO WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b08e      	sub	sp, #56	; 0x38
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	60f8      	str	r0, [r7, #12]
 80131ee:	60b9      	str	r1, [r7, #8]
 80131f0:	4611      	mov	r1, r2
 80131f2:	461a      	mov	r2, r3
 80131f4:	460b      	mov	r3, r1
 80131f6:	80fb      	strh	r3, [r7, #6]
 80131f8:	4613      	mov	r3, r2
 80131fa:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	889a      	ldrh	r2, [r3, #4]
 8013200:	88bb      	ldrh	r3, [r7, #4]
 8013202:	1ad3      	subs	r3, r2, r3
 8013204:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin;
 8013206:	88fa      	ldrh	r2, [r7, #6]
 8013208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801320a:	1ad3      	subs	r3, r2, r3
 801320c:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	88db      	ldrh	r3, [r3, #6]
 8013212:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013214:	fb12 f303 	smulbb	r3, r2, r3
 8013218:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	88db      	ldrh	r3, [r3, #6]
 801321e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013220:	fb12 f303 	smulbb	r3, r2, r3
 8013224:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	88ba      	ldrh	r2, [r7, #4]
 801322c:	68f9      	ldr	r1, [r7, #12]
 801322e:	88c9      	ldrh	r1, [r1, #6]
 8013230:	fb01 f202 	mul.w	r2, r1, r2
 8013234:	4413      	add	r3, r2
 8013236:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8013238:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801323c:	2b00      	cmp	r3, #0
 801323e:	d002      	beq.n	8013246 <_ff_push_n+0x60>
 8013240:	2b01      	cmp	r3, #1
 8013242:	d01f      	beq.n	8013284 <_ff_push_n+0x9e>
        // Write data wrapped part
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
      }
      break;
  }
}
 8013244:	e097      	b.n	8013376 <_ff_push_n+0x190>
      if(n <= nLin)
 8013246:	88fa      	ldrh	r2, [r7, #6]
 8013248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801324a:	429a      	cmp	r2, r3
 801324c:	d80a      	bhi.n	8013264 <_ff_push_n+0x7e>
        memcpy(ff_buf, app_buf, n*f->item_size);
 801324e:	88fb      	ldrh	r3, [r7, #6]
 8013250:	68fa      	ldr	r2, [r7, #12]
 8013252:	88d2      	ldrh	r2, [r2, #6]
 8013254:	fb02 f303 	mul.w	r3, r2, r3
 8013258:	461a      	mov	r2, r3
 801325a:	68b9      	ldr	r1, [r7, #8]
 801325c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801325e:	f004 fc52 	bl	8017b06 <memcpy>
      break;
 8013262:	e088      	b.n	8013376 <_ff_push_n+0x190>
        memcpy(ff_buf, app_buf, nLin_bytes);
 8013264:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013266:	461a      	mov	r2, r3
 8013268:	68b9      	ldr	r1, [r7, #8]
 801326a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801326c:	f004 fc4b 	bl	8017b06 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	6818      	ldr	r0, [r3, #0]
 8013274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013276:	68ba      	ldr	r2, [r7, #8]
 8013278:	4413      	add	r3, r2
 801327a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801327c:	4619      	mov	r1, r3
 801327e:	f004 fc42 	bl	8017b06 <memcpy>
      break;
 8013282:	e078      	b.n	8013376 <_ff_push_n+0x190>
      if(n <= nLin)
 8013284:	88fa      	ldrh	r2, [r7, #6]
 8013286:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013288:	429a      	cmp	r2, r3
 801328a:	d80b      	bhi.n	80132a4 <_ff_push_n+0xbe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	88db      	ldrh	r3, [r3, #6]
 8013290:	88fa      	ldrh	r2, [r7, #6]
 8013292:	fb12 f303 	smulbb	r3, r2, r3
 8013296:	b29b      	uxth	r3, r3
 8013298:	461a      	mov	r2, r3
 801329a:	68b9      	ldr	r1, [r7, #8]
 801329c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801329e:	f7ff ff3b 	bl	8013118 <_ff_push_const_addr>
      break;
 80132a2:	e067      	b.n	8013374 <_ff_push_n+0x18e>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80132a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132a6:	f023 0303 	bic.w	r3, r3, #3
 80132aa:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80132ac:	8c3b      	ldrh	r3, [r7, #32]
 80132ae:	461a      	mov	r2, r3
 80132b0:	68b9      	ldr	r1, [r7, #8]
 80132b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132b4:	f7ff ff30 	bl	8013118 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80132b8:	8c3b      	ldrh	r3, [r7, #32]
 80132ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132bc:	4413      	add	r3, r2
 80132be:	633b      	str	r3, [r7, #48]	; 0x30
        volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 80132c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132c6:	b2db      	uxtb	r3, r3
 80132c8:	f003 0303 	and.w	r3, r3, #3
 80132cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80132d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d041      	beq.n	801335c <_ff_push_n+0x176>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 80132d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132dc:	b29b      	uxth	r3, r3
 80132de:	f1c3 0304 	rsb	r3, r3, #4
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80132e6:	837b      	strh	r3, [r7, #26]
 80132e8:	4613      	mov	r3, r2
 80132ea:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80132ec:	8b7a      	ldrh	r2, [r7, #26]
 80132ee:	8b3b      	ldrh	r3, [r7, #24]
 80132f0:	4293      	cmp	r3, r2
 80132f2:	bf28      	it	cs
 80132f4:	4613      	movcs	r3, r2
 80132f6:	b29b      	uxth	r3, r3
 80132f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 80132fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013300:	b29b      	uxth	r3, r3
 8013302:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013304:	1ad3      	subs	r3, r2, r3
 8013306:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 801330e:	f107 0314 	add.w	r3, r7, #20
 8013312:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8013314:	e007      	b.n	8013326 <_ff_push_n+0x140>
 8013316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013318:	1c53      	adds	r3, r2, #1
 801331a:	62bb      	str	r3, [r7, #40]	; 0x28
 801331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801331e:	1c59      	adds	r1, r3, #1
 8013320:	6339      	str	r1, [r7, #48]	; 0x30
 8013322:	7812      	ldrb	r2, [r2, #0]
 8013324:	701a      	strb	r2, [r3, #0]
 8013326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801332a:	1e5a      	subs	r2, r3, #1
 801332c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8013330:	2b00      	cmp	r3, #0
 8013332:	d1f0      	bne.n	8013316 <_ff_push_n+0x130>
          ff_buf = f->buffer;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 801333a:	e007      	b.n	801334c <_ff_push_n+0x166>
 801333c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801333e:	1c53      	adds	r3, r2, #1
 8013340:	62bb      	str	r3, [r7, #40]	; 0x28
 8013342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013344:	1c59      	adds	r1, r3, #1
 8013346:	6339      	str	r1, [r7, #48]	; 0x30
 8013348:	7812      	ldrb	r2, [r2, #0]
 801334a:	701a      	strb	r2, [r3, #0]
 801334c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013350:	1e5a      	subs	r2, r3, #1
 8013352:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8013356:	2b00      	cmp	r3, #0
 8013358:	d1f0      	bne.n	801333c <_ff_push_n+0x156>
 801335a:	e002      	b.n	8013362 <_ff_push_n+0x17c>
          ff_buf = f->buffer; // wrap around to beginning
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 8013362:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013364:	2b00      	cmp	r3, #0
 8013366:	d005      	beq.n	8013374 <_ff_push_n+0x18e>
 8013368:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801336a:	461a      	mov	r2, r3
 801336c:	68b9      	ldr	r1, [r7, #8]
 801336e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013370:	f7ff fed2 	bl	8013118 <_ff_push_const_addr>
      break;
 8013374:	bf00      	nop
}
 8013376:	bf00      	nop
 8013378:	3738      	adds	r7, #56	; 0x38
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}

0801337e <_ff_pull_n>:
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
}

// get n items from FIFO WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 801337e:	b580      	push	{r7, lr}
 8013380:	b08e      	sub	sp, #56	; 0x38
 8013382:	af00      	add	r7, sp, #0
 8013384:	60f8      	str	r0, [r7, #12]
 8013386:	60b9      	str	r1, [r7, #8]
 8013388:	4611      	mov	r1, r2
 801338a:	461a      	mov	r2, r3
 801338c:	460b      	mov	r3, r1
 801338e:	80fb      	strh	r3, [r7, #6]
 8013390:	4613      	mov	r3, r2
 8013392:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	889a      	ldrh	r2, [r3, #4]
 8013398:	88bb      	ldrh	r3, [r7, #4]
 801339a:	1ad3      	subs	r3, r2, r3
 801339c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin; // only used if wrapped
 801339e:	88fa      	ldrh	r2, [r7, #6]
 80133a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133a2:	1ad3      	subs	r3, r2, r3
 80133a4:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	88db      	ldrh	r3, [r3, #6]
 80133aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80133ac:	fb12 f303 	smulbb	r3, r2, r3
 80133b0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	88db      	ldrh	r3, [r3, #6]
 80133b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80133b8:	fb12 f303 	smulbb	r3, r2, r3
 80133bc:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	88ba      	ldrh	r2, [r7, #4]
 80133c4:	68f9      	ldr	r1, [r7, #12]
 80133c6:	88c9      	ldrh	r1, [r1, #6]
 80133c8:	fb01 f202 	mul.w	r2, r1, r2
 80133cc:	4413      	add	r3, r2
 80133ce:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 80133d0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d002      	beq.n	80133de <_ff_pull_n+0x60>
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d01f      	beq.n	801341c <_ff_pull_n+0x9e>
        // Read data wrapped part
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
      }
    break;

    default: break;
 80133dc:	e099      	b.n	8013512 <_ff_pull_n+0x194>
      if ( n <= nLin )
 80133de:	88fa      	ldrh	r2, [r7, #6]
 80133e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d80a      	bhi.n	80133fc <_ff_pull_n+0x7e>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80133e6:	88fb      	ldrh	r3, [r7, #6]
 80133e8:	68fa      	ldr	r2, [r7, #12]
 80133ea:	88d2      	ldrh	r2, [r2, #6]
 80133ec:	fb02 f303 	mul.w	r3, r2, r3
 80133f0:	461a      	mov	r2, r3
 80133f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80133f4:	68b8      	ldr	r0, [r7, #8]
 80133f6:	f004 fb86 	bl	8017b06 <memcpy>
    break;
 80133fa:	e08a      	b.n	8013512 <_ff_pull_n+0x194>
        memcpy(app_buf, ff_buf, nLin_bytes);
 80133fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133fe:	461a      	mov	r2, r3
 8013400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013402:	68b8      	ldr	r0, [r7, #8]
 8013404:	f004 fb7f 	bl	8017b06 <memcpy>
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
 8013408:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801340a:	68ba      	ldr	r2, [r7, #8]
 801340c:	18d0      	adds	r0, r2, r3
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013414:	4619      	mov	r1, r3
 8013416:	f004 fb76 	bl	8017b06 <memcpy>
    break;
 801341a:	e07a      	b.n	8013512 <_ff_pull_n+0x194>
      if ( n <= nLin )
 801341c:	88fa      	ldrh	r2, [r7, #6]
 801341e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013420:	429a      	cmp	r2, r3
 8013422:	d80b      	bhi.n	801343c <_ff_pull_n+0xbe>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	88db      	ldrh	r3, [r3, #6]
 8013428:	88fa      	ldrh	r2, [r7, #6]
 801342a:	fb12 f303 	smulbb	r3, r2, r3
 801342e:	b29b      	uxth	r3, r3
 8013430:	461a      	mov	r2, r3
 8013432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013434:	68b8      	ldr	r0, [r7, #8]
 8013436:	f7ff fea3 	bl	8013180 <_ff_pull_const_addr>
    break;
 801343a:	e069      	b.n	8013510 <_ff_pull_n+0x192>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 801343c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801343e:	f023 0303 	bic.w	r3, r3, #3
 8013442:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
 8013444:	8c3b      	ldrh	r3, [r7, #32]
 8013446:	461a      	mov	r2, r3
 8013448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801344a:	68b8      	ldr	r0, [r7, #8]
 801344c:	f7ff fe98 	bl	8013180 <_ff_pull_const_addr>
        ff_buf += nLin_4n_bytes;
 8013450:	8c3b      	ldrh	r3, [r7, #32]
 8013452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013454:	4413      	add	r3, r2
 8013456:	633b      	str	r3, [r7, #48]	; 0x30
        volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 801345c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801345e:	b2db      	uxtb	r3, r3
 8013460:	f003 0303 	and.w	r3, r3, #3
 8013464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8013468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801346c:	2b00      	cmp	r3, #0
 801346e:	d043      	beq.n	80134f8 <_ff_pull_n+0x17a>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 8013470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013474:	b29b      	uxth	r3, r3
 8013476:	f1c3 0304 	rsb	r3, r3, #4
 801347a:	b29a      	uxth	r2, r3
 801347c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801347e:	837b      	strh	r3, [r7, #26]
 8013480:	4613      	mov	r3, r2
 8013482:	833b      	strh	r3, [r7, #24]
 8013484:	8b7a      	ldrh	r2, [r7, #26]
 8013486:	8b3b      	ldrh	r3, [r7, #24]
 8013488:	4293      	cmp	r3, r2
 801348a:	bf28      	it	cs
 801348c:	4613      	movcs	r3, r2
 801348e:	b29b      	uxth	r3, r3
 8013490:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 8013494:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013498:	b29b      	uxth	r3, r3
 801349a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801349c:	1ad3      	subs	r3, r2, r3
 801349e:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 80134a0:	2300      	movs	r3, #0
 80134a2:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80134a4:	f107 0314 	add.w	r3, r7, #20
 80134a8:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80134aa:	e007      	b.n	80134bc <_ff_pull_n+0x13e>
 80134ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134ae:	1c53      	adds	r3, r2, #1
 80134b0:	633b      	str	r3, [r7, #48]	; 0x30
 80134b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b4:	1c59      	adds	r1, r3, #1
 80134b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80134b8:	7812      	ldrb	r2, [r2, #0]
 80134ba:	701a      	strb	r2, [r3, #0]
 80134bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134c0:	1e5a      	subs	r2, r3, #1
 80134c2:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d1f0      	bne.n	80134ac <_ff_pull_n+0x12e>
          ff_buf = f->buffer;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80134d0:	e007      	b.n	80134e2 <_ff_pull_n+0x164>
 80134d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134d4:	1c53      	adds	r3, r2, #1
 80134d6:	633b      	str	r3, [r7, #48]	; 0x30
 80134d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134da:	1c59      	adds	r1, r3, #1
 80134dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80134de:	7812      	ldrb	r2, [r2, #0]
 80134e0:	701a      	strb	r2, [r3, #0]
 80134e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80134e6:	1e5a      	subs	r2, r3, #1
 80134e8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d1f0      	bne.n	80134d2 <_ff_pull_n+0x154>
          *tx_fifo = tmp32;
 80134f0:	697a      	ldr	r2, [r7, #20]
 80134f2:	69fb      	ldr	r3, [r7, #28]
 80134f4:	601a      	str	r2, [r3, #0]
 80134f6:	e002      	b.n	80134fe <_ff_pull_n+0x180>
          ff_buf = f->buffer; // wrap around to beginning
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
 80134fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013500:	2b00      	cmp	r3, #0
 8013502:	d005      	beq.n	8013510 <_ff_pull_n+0x192>
 8013504:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013506:	461a      	mov	r2, r3
 8013508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801350a:	68b8      	ldr	r0, [r7, #8]
 801350c:	f7ff fe38 	bl	8013180 <_ff_pull_const_addr>
    break;
 8013510:	bf00      	nop
  }
}
 8013512:	bf00      	nop
 8013514:	3738      	adds	r7, #56	; 0x38
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}

0801351a <advance_pointer>:

// Advance an absolute pointer
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 801351a:	b480      	push	{r7}
 801351c:	b083      	sub	sp, #12
 801351e:	af00      	add	r7, sp, #0
 8013520:	6078      	str	r0, [r7, #4]
 8013522:	460b      	mov	r3, r1
 8013524:	807b      	strh	r3, [r7, #2]
 8013526:	4613      	mov	r3, r2
 8013528:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 801352a:	887a      	ldrh	r2, [r7, #2]
 801352c:	883b      	ldrh	r3, [r7, #0]
 801352e:	4413      	add	r3, r2
 8013530:	b29b      	uxth	r3, r3
 8013532:	887a      	ldrh	r2, [r7, #2]
 8013534:	429a      	cmp	r2, r3
 8013536:	d807      	bhi.n	8013548 <advance_pointer+0x2e>
 8013538:	887a      	ldrh	r2, [r7, #2]
 801353a:	883b      	ldrh	r3, [r7, #0]
 801353c:	4413      	add	r3, r2
 801353e:	b29a      	uxth	r2, r3
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	899b      	ldrh	r3, [r3, #12]
 8013544:	429a      	cmp	r2, r3
 8013546:	d908      	bls.n	801355a <advance_pointer+0x40>
  {
    p = (p + offset) + f->non_used_index_space;
 8013548:	887a      	ldrh	r2, [r7, #2]
 801354a:	883b      	ldrh	r3, [r7, #0]
 801354c:	4413      	add	r3, r2
 801354e:	b29a      	uxth	r2, r3
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	895b      	ldrh	r3, [r3, #10]
 8013554:	4413      	add	r3, r2
 8013556:	807b      	strh	r3, [r7, #2]
 8013558:	e003      	b.n	8013562 <advance_pointer+0x48>
  }
  else
  {
    p += offset;
 801355a:	887a      	ldrh	r2, [r7, #2]
 801355c:	883b      	ldrh	r3, [r7, #0]
 801355e:	4413      	add	r3, r2
 8013560:	807b      	strh	r3, [r7, #2]
  }
  return p;
 8013562:	887b      	ldrh	r3, [r7, #2]
}
 8013564:	4618      	mov	r0, r3
 8013566:	370c      	adds	r7, #12
 8013568:	46bd      	mov	sp, r7
 801356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356e:	4770      	bx	lr

08013570 <backward_pointer>:

// Backward an absolute pointer
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	460b      	mov	r3, r1
 801357a:	807b      	strh	r3, [r7, #2]
 801357c:	4613      	mov	r3, r2
 801357e:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8013580:	883a      	ldrh	r2, [r7, #0]
 8013582:	887b      	ldrh	r3, [r7, #2]
 8013584:	429a      	cmp	r2, r3
 8013586:	d807      	bhi.n	8013598 <backward_pointer+0x28>
 8013588:	887a      	ldrh	r2, [r7, #2]
 801358a:	883b      	ldrh	r3, [r7, #0]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	b29a      	uxth	r2, r3
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	899b      	ldrh	r3, [r3, #12]
 8013594:	429a      	cmp	r2, r3
 8013596:	d908      	bls.n	80135aa <backward_pointer+0x3a>
  {
    p = (p - offset) - f->non_used_index_space;
 8013598:	887a      	ldrh	r2, [r7, #2]
 801359a:	883b      	ldrh	r3, [r7, #0]
 801359c:	1ad3      	subs	r3, r2, r3
 801359e:	b29a      	uxth	r2, r3
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	895b      	ldrh	r3, [r3, #10]
 80135a4:	1ad3      	subs	r3, r2, r3
 80135a6:	807b      	strh	r3, [r7, #2]
 80135a8:	e003      	b.n	80135b2 <backward_pointer+0x42>
  }
  else
  {
    p -= offset;
 80135aa:	887a      	ldrh	r2, [r7, #2]
 80135ac:	883b      	ldrh	r3, [r7, #0]
 80135ae:	1ad3      	subs	r3, r2, r3
 80135b0:	807b      	strh	r3, [r7, #2]
  }
  return p;
 80135b2:	887b      	ldrh	r3, [r7, #2]
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	370c      	adds	r7, #12
 80135b8:	46bd      	mov	sp, r7
 80135ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135be:	4770      	bx	lr

080135c0 <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	460b      	mov	r3, r1
 80135ca:	807b      	strh	r3, [r7, #2]
  return _ff_mod(p, f->depth);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	889a      	ldrh	r2, [r3, #4]
 80135d0:	887b      	ldrh	r3, [r7, #2]
 80135d2:	4611      	mov	r1, r2
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7ff fd87 	bl	80130e8 <_ff_mod>
 80135da:	4603      	mov	r3, r0
}
 80135dc:	4618      	mov	r0, r3
 80135de:	3708      	adds	r7, #8
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}

080135e4 <_tu_fifo_count>:

// Works on local copies of w and r - return only the difference and as such can be used to determine an overflow
static inline uint16_t _tu_fifo_count(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b085      	sub	sp, #20
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	460b      	mov	r3, r1
 80135ee:	807b      	strh	r3, [r7, #2]
 80135f0:	4613      	mov	r3, r2
 80135f2:	803b      	strh	r3, [r7, #0]
  uint16_t cnt = wAbs-rAbs;
 80135f4:	887a      	ldrh	r2, [r7, #2]
 80135f6:	883b      	ldrh	r3, [r7, #0]
 80135f8:	1ad3      	subs	r3, r2, r3
 80135fa:	81fb      	strh	r3, [r7, #14]

  // In case we have non-power of two depth we need a further modification
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80135fc:	883a      	ldrh	r2, [r7, #0]
 80135fe:	887b      	ldrh	r3, [r7, #2]
 8013600:	429a      	cmp	r2, r3
 8013602:	d904      	bls.n	801360e <_tu_fifo_count+0x2a>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	895b      	ldrh	r3, [r3, #10]
 8013608:	89fa      	ldrh	r2, [r7, #14]
 801360a:	1ad3      	subs	r3, r2, r3
 801360c:	81fb      	strh	r3, [r7, #14]

  return cnt;
 801360e:	89fb      	ldrh	r3, [r7, #14]
}
 8013610:	4618      	mov	r0, r3
 8013612:	3714      	adds	r7, #20
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr

0801361c <_tu_fifo_empty>:

// Works on local copies of w and r
static inline bool _tu_fifo_empty(uint16_t wAbs, uint16_t rAbs)
{
 801361c:	b480      	push	{r7}
 801361e:	b083      	sub	sp, #12
 8013620:	af00      	add	r7, sp, #0
 8013622:	4603      	mov	r3, r0
 8013624:	460a      	mov	r2, r1
 8013626:	80fb      	strh	r3, [r7, #6]
 8013628:	4613      	mov	r3, r2
 801362a:	80bb      	strh	r3, [r7, #4]
  return wAbs == rAbs;
 801362c:	88fa      	ldrh	r2, [r7, #6]
 801362e:	88bb      	ldrh	r3, [r7, #4]
 8013630:	429a      	cmp	r2, r3
 8013632:	bf0c      	ite	eq
 8013634:	2301      	moveq	r3, #1
 8013636:	2300      	movne	r3, #0
 8013638:	b2db      	uxtb	r3, r3
}
 801363a:	4618      	mov	r0, r3
 801363c:	370c      	adds	r7, #12
 801363e:	46bd      	mov	sp, r7
 8013640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013644:	4770      	bx	lr

08013646 <_tu_fifo_correct_read_pointer>:
}

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
 8013646:	b580      	push	{r7, lr}
 8013648:	b082      	sub	sp, #8
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
 801364e:	460b      	mov	r3, r1
 8013650:	807b      	strh	r3, [r7, #2]
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	889a      	ldrh	r2, [r3, #4]
 8013656:	887b      	ldrh	r3, [r7, #2]
 8013658:	4619      	mov	r1, r3
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f7ff ff88 	bl	8013570 <backward_pointer>
 8013660:	4603      	mov	r3, r0
 8013662:	461a      	mov	r2, r3
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	821a      	strh	r2, [r3, #16]
}
 8013668:	bf00      	nop
 801366a:	3708      	adds	r7, #8
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}

08013670 <_tu_fifo_peek_n>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b088      	sub	sp, #32
 8013674:	af02      	add	r7, sp, #8
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	4611      	mov	r1, r2
 801367c:	461a      	mov	r2, r3
 801367e:	460b      	mov	r3, r1
 8013680:	80fb      	strh	r3, [r7, #6]
 8013682:	4613      	mov	r3, r2
 8013684:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8013686:	8c3a      	ldrh	r2, [r7, #32]
 8013688:	88bb      	ldrh	r3, [r7, #4]
 801368a:	4619      	mov	r1, r3
 801368c:	68f8      	ldr	r0, [r7, #12]
 801368e:	f7ff ffa9 	bl	80135e4 <_tu_fifo_count>
 8013692:	4603      	mov	r3, r0
 8013694:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	889b      	ldrh	r3, [r3, #4]
 801369a:	8afa      	ldrh	r2, [r7, #22]
 801369c:	429a      	cmp	r2, r3
 801369e:	d90a      	bls.n	80136b6 <_tu_fifo_peek_n+0x46>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 80136a0:	88bb      	ldrh	r3, [r7, #4]
 80136a2:	4619      	mov	r1, r3
 80136a4:	68f8      	ldr	r0, [r7, #12]
 80136a6:	f7ff ffce 	bl	8013646 <_tu_fifo_correct_read_pointer>
    rAbs = f->rd_idx;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	8a1b      	ldrh	r3, [r3, #16]
 80136ae:	843b      	strh	r3, [r7, #32]
    cnt = f->depth;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	889b      	ldrh	r3, [r3, #4]
 80136b4:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
 80136b6:	8afb      	ldrh	r3, [r7, #22]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d101      	bne.n	80136c0 <_tu_fifo_peek_n+0x50>
 80136bc:	2300      	movs	r3, #0
 80136be:	e017      	b.n	80136f0 <_tu_fifo_peek_n+0x80>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
 80136c0:	8afa      	ldrh	r2, [r7, #22]
 80136c2:	88fb      	ldrh	r3, [r7, #6]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d201      	bcs.n	80136cc <_tu_fifo_peek_n+0x5c>
 80136c8:	8afb      	ldrh	r3, [r7, #22]
 80136ca:	80fb      	strh	r3, [r7, #6]

  uint16_t rRel = get_relative_pointer(f, rAbs);
 80136cc:	8c3b      	ldrh	r3, [r7, #32]
 80136ce:	4619      	mov	r1, r3
 80136d0:	68f8      	ldr	r0, [r7, #12]
 80136d2:	f7ff ff75 	bl	80135c0 <get_relative_pointer>
 80136d6:	4603      	mov	r3, r0
 80136d8:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
 80136da:	8ab9      	ldrh	r1, [r7, #20]
 80136dc:	88fa      	ldrh	r2, [r7, #6]
 80136de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80136e2:	9300      	str	r3, [sp, #0]
 80136e4:	460b      	mov	r3, r1
 80136e6:	68b9      	ldr	r1, [r7, #8]
 80136e8:	68f8      	ldr	r0, [r7, #12]
 80136ea:	f7ff fe48 	bl	801337e <_ff_pull_n>

  return n;
 80136ee:	88fb      	ldrh	r3, [r7, #6]
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3718      	adds	r7, #24
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}

080136f8 <_tu_fifo_remaining>:

// Works on local copies of w and r
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 80136f8:	b590      	push	{r4, r7, lr}
 80136fa:	b083      	sub	sp, #12
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	460b      	mov	r3, r1
 8013702:	807b      	strh	r3, [r7, #2]
 8013704:	4613      	mov	r3, r2
 8013706:	803b      	strh	r3, [r7, #0]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	889c      	ldrh	r4, [r3, #4]
 801370c:	883a      	ldrh	r2, [r7, #0]
 801370e:	887b      	ldrh	r3, [r7, #2]
 8013710:	4619      	mov	r1, r3
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f7ff ff66 	bl	80135e4 <_tu_fifo_count>
 8013718:	4603      	mov	r3, r0
 801371a:	1ae3      	subs	r3, r4, r3
 801371c:	b29b      	uxth	r3, r3
}
 801371e:	4618      	mov	r0, r3
 8013720:	370c      	adds	r7, #12
 8013722:	46bd      	mov	sp, r7
 8013724:	bd90      	pop	{r4, r7, pc}

08013726 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8013726:	b580      	push	{r7, lr}
 8013728:	b08a      	sub	sp, #40	; 0x28
 801372a:	af02      	add	r7, sp, #8
 801372c:	60f8      	str	r0, [r7, #12]
 801372e:	60b9      	str	r1, [r7, #8]
 8013730:	4611      	mov	r1, r2
 8013732:	461a      	mov	r2, r3
 8013734:	460b      	mov	r3, r1
 8013736:	80fb      	strh	r3, [r7, #6]
 8013738:	4613      	mov	r3, r2
 801373a:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 801373c:	88fb      	ldrh	r3, [r7, #6]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d101      	bne.n	8013746 <_tu_fifo_write_n+0x20>
 8013742:	2300      	movs	r3, #0
 8013744:	e05d      	b.n	8013802 <_tu_fifo_write_n+0xdc>

  _ff_lock(f->mutex_wr);
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	695b      	ldr	r3, [r3, #20]
 801374a:	4618      	mov	r0, r3
 801374c:	f7ff fc64 	bl	8013018 <_ff_lock>

  uint16_t w = f->wr_idx, r = f->rd_idx;
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	89db      	ldrh	r3, [r3, #14]
 8013754:	83fb      	strh	r3, [r7, #30]
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	8a1b      	ldrh	r3, [r3, #16]
 801375a:	82fb      	strh	r3, [r7, #22]
  uint8_t const* buf8 = (uint8_t const*) data;
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	61bb      	str	r3, [r7, #24]

  if (!f->overwritable)
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	7a1b      	ldrb	r3, [r3, #8]
 8013764:	f083 0301 	eor.w	r3, r3, #1
 8013768:	b2db      	uxtb	r3, r3
 801376a:	2b00      	cmp	r3, #0
 801376c:	d013      	beq.n	8013796 <_tu_fifo_write_n+0x70>
  {
    // Not overwritable limit up to full
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
 801376e:	8afa      	ldrh	r2, [r7, #22]
 8013770:	8bfb      	ldrh	r3, [r7, #30]
 8013772:	4619      	mov	r1, r3
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f7ff ffbf 	bl	80136f8 <_tu_fifo_remaining>
 801377a:	4603      	mov	r3, r0
 801377c:	461a      	mov	r2, r3
 801377e:	88fb      	ldrh	r3, [r7, #6]
 8013780:	827b      	strh	r3, [r7, #18]
 8013782:	4613      	mov	r3, r2
 8013784:	823b      	strh	r3, [r7, #16]
 8013786:	8a7a      	ldrh	r2, [r7, #18]
 8013788:	8a3b      	ldrh	r3, [r7, #16]
 801378a:	4293      	cmp	r3, r2
 801378c:	bf28      	it	cs
 801378e:	4613      	movcs	r3, r2
 8013790:	b29b      	uxth	r3, r3
 8013792:	80fb      	strh	r3, [r7, #6]
 8013794:	e015      	b.n	80137c2 <_tu_fifo_write_n+0x9c>
  }
  else if (n >= f->depth)
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	889b      	ldrh	r3, [r3, #4]
 801379a:	88fa      	ldrh	r2, [r7, #6]
 801379c:	429a      	cmp	r2, r3
 801379e:	d310      	bcc.n	80137c2 <_tu_fifo_write_n+0x9c>
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 80137a0:	88fb      	ldrh	r3, [r7, #6]
 80137a2:	68fa      	ldr	r2, [r7, #12]
 80137a4:	8892      	ldrh	r2, [r2, #4]
 80137a6:	1a9b      	subs	r3, r3, r2
 80137a8:	68fa      	ldr	r2, [r7, #12]
 80137aa:	88d2      	ldrh	r2, [r2, #6]
 80137ac:	fb02 f303 	mul.w	r3, r2, r3
 80137b0:	461a      	mov	r2, r3
 80137b2:	69bb      	ldr	r3, [r7, #24]
 80137b4:	4413      	add	r3, r2
 80137b6:	61bb      	str	r3, [r7, #24]
    n = f->depth;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	889b      	ldrh	r3, [r3, #4]
 80137bc:	80fb      	strh	r3, [r7, #6]

    // We start writing at the read pointer's position since we fill the complete
    // buffer and we do not want to modify the read pointer within a write function!
    // This would end up in a race condition with read functions!
    w = r;
 80137be:	8afb      	ldrh	r3, [r7, #22]
 80137c0:	83fb      	strh	r3, [r7, #30]
  }

  uint16_t wRel = get_relative_pointer(f, w);
 80137c2:	8bfb      	ldrh	r3, [r7, #30]
 80137c4:	4619      	mov	r1, r3
 80137c6:	68f8      	ldr	r0, [r7, #12]
 80137c8:	f7ff fefa 	bl	80135c0 <get_relative_pointer>
 80137cc:	4603      	mov	r3, r0
 80137ce:	82bb      	strh	r3, [r7, #20]

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);
 80137d0:	8ab9      	ldrh	r1, [r7, #20]
 80137d2:	88fa      	ldrh	r2, [r7, #6]
 80137d4:	797b      	ldrb	r3, [r7, #5]
 80137d6:	9300      	str	r3, [sp, #0]
 80137d8:	460b      	mov	r3, r1
 80137da:	69b9      	ldr	r1, [r7, #24]
 80137dc:	68f8      	ldr	r0, [r7, #12]
 80137de:	f7ff fd02 	bl	80131e6 <_ff_push_n>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 80137e2:	88fa      	ldrh	r2, [r7, #6]
 80137e4:	8bfb      	ldrh	r3, [r7, #30]
 80137e6:	4619      	mov	r1, r3
 80137e8:	68f8      	ldr	r0, [r7, #12]
 80137ea:	f7ff fe96 	bl	801351a <advance_pointer>
 80137ee:	4603      	mov	r3, r0
 80137f0:	461a      	mov	r2, r3
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	695b      	ldr	r3, [r3, #20]
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7ff fc1c 	bl	8013038 <_ff_unlock>

  return n;
 8013800:	88fb      	ldrh	r3, [r7, #6]
}
 8013802:	4618      	mov	r0, r3
 8013804:	3720      	adds	r7, #32
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}

0801380a <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 801380a:	b580      	push	{r7, lr}
 801380c:	b086      	sub	sp, #24
 801380e:	af02      	add	r7, sp, #8
 8013810:	60f8      	str	r0, [r7, #12]
 8013812:	60b9      	str	r1, [r7, #8]
 8013814:	4611      	mov	r1, r2
 8013816:	461a      	mov	r2, r3
 8013818:	460b      	mov	r3, r1
 801381a:	80fb      	strh	r3, [r7, #6]
 801381c:	4613      	mov	r3, r2
 801381e:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	699b      	ldr	r3, [r3, #24]
 8013824:	4618      	mov	r0, r3
 8013826:	f7ff fbf7 	bl	8013018 <_ff_lock>

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	89db      	ldrh	r3, [r3, #14]
 801382e:	b298      	uxth	r0, r3
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	8a1b      	ldrh	r3, [r3, #16]
 8013834:	b29b      	uxth	r3, r3
 8013836:	88f9      	ldrh	r1, [r7, #6]
 8013838:	797a      	ldrb	r2, [r7, #5]
 801383a:	9201      	str	r2, [sp, #4]
 801383c:	9300      	str	r3, [sp, #0]
 801383e:	4603      	mov	r3, r0
 8013840:	460a      	mov	r2, r1
 8013842:	68b9      	ldr	r1, [r7, #8]
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	f7ff ff13 	bl	8013670 <_tu_fifo_peek_n>
 801384a:	4603      	mov	r3, r0
 801384c:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	8a1b      	ldrh	r3, [r3, #16]
 8013852:	b29b      	uxth	r3, r3
 8013854:	88fa      	ldrh	r2, [r7, #6]
 8013856:	4619      	mov	r1, r3
 8013858:	68f8      	ldr	r0, [r7, #12]
 801385a:	f7ff fe5e 	bl	801351a <advance_pointer>
 801385e:	4603      	mov	r3, r0
 8013860:	461a      	mov	r2, r3
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	699b      	ldr	r3, [r3, #24]
 801386a:	4618      	mov	r0, r3
 801386c:	f7ff fbe4 	bl	8013038 <_ff_unlock>
  return n;
 8013870:	88fb      	ldrh	r3, [r7, #6]
}
 8013872:	4618      	mov	r0, r3
 8013874:	3710      	adds	r7, #16
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}

0801387a <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 801387a:	b580      	push	{r7, lr}
 801387c:	b084      	sub	sp, #16
 801387e:	af00      	add	r7, sp, #0
 8013880:	6078      	str	r0, [r7, #4]
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	89db      	ldrh	r3, [r3, #14]
 8013886:	b299      	uxth	r1, r3
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	8a1b      	ldrh	r3, [r3, #16]
 801388c:	b29b      	uxth	r3, r3
 801388e:	461a      	mov	r2, r3
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f7ff fea7 	bl	80135e4 <_tu_fifo_count>
 8013896:	4603      	mov	r3, r0
 8013898:	461a      	mov	r2, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	889b      	ldrh	r3, [r3, #4]
 801389e:	81fa      	strh	r2, [r7, #14]
 80138a0:	81bb      	strh	r3, [r7, #12]
 80138a2:	89fa      	ldrh	r2, [r7, #14]
 80138a4:	89bb      	ldrh	r3, [r7, #12]
 80138a6:	4293      	cmp	r3, r2
 80138a8:	bf28      	it	cs
 80138aa:	4613      	movcs	r3, r2
 80138ac:	b29b      	uxth	r3, r3
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3710      	adds	r7, #16
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}

080138b6 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80138b6:	b580      	push	{r7, lr}
 80138b8:	b082      	sub	sp, #8
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	6078      	str	r0, [r7, #4]
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	89db      	ldrh	r3, [r3, #14]
 80138c2:	b29a      	uxth	r2, r3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	8a1b      	ldrh	r3, [r3, #16]
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	4619      	mov	r1, r3
 80138cc:	4610      	mov	r0, r2
 80138ce:	f7ff fea5 	bl	801361c <_tu_fifo_empty>
 80138d2:	4603      	mov	r3, r0
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3708      	adds	r7, #8
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}

080138dc <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b082      	sub	sp, #8
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	89db      	ldrh	r3, [r3, #14]
 80138e8:	b299      	uxth	r1, r3
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	8a1b      	ldrh	r3, [r3, #16]
 80138ee:	b29b      	uxth	r3, r3
 80138f0:	461a      	mov	r2, r3
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f7ff ff00 	bl	80136f8 <_tu_fifo_remaining>
 80138f8:	4603      	mov	r3, r0
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3708      	adds	r7, #8
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}

08013902 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8013902:	b580      	push	{r7, lr}
 8013904:	b084      	sub	sp, #16
 8013906:	af00      	add	r7, sp, #0
 8013908:	60f8      	str	r0, [r7, #12]
 801390a:	60b9      	str	r1, [r7, #8]
 801390c:	4613      	mov	r3, r2
 801390e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8013910:	88fa      	ldrh	r2, [r7, #6]
 8013912:	2300      	movs	r3, #0
 8013914:	68b9      	ldr	r1, [r7, #8]
 8013916:	68f8      	ldr	r0, [r7, #12]
 8013918:	f7ff ff77 	bl	801380a <_tu_fifo_read_n>
 801391c:	4603      	mov	r3, r0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3710      	adds	r7, #16
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}

08013926 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8013926:	b580      	push	{r7, lr}
 8013928:	b084      	sub	sp, #16
 801392a:	af00      	add	r7, sp, #0
 801392c:	60f8      	str	r0, [r7, #12]
 801392e:	60b9      	str	r1, [r7, #8]
 8013930:	4613      	mov	r3, r2
 8013932:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8013934:	88fa      	ldrh	r2, [r7, #6]
 8013936:	2301      	movs	r3, #1
 8013938:	68b9      	ldr	r1, [r7, #8]
 801393a:	68f8      	ldr	r0, [r7, #12]
 801393c:	f7ff ff65 	bl	801380a <_tu_fifo_read_n>
 8013940:	4603      	mov	r3, r0
}
 8013942:	4618      	mov	r0, r3
 8013944:	3710      	adds	r7, #16
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}

0801394a <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 801394a:	b580      	push	{r7, lr}
 801394c:	b084      	sub	sp, #16
 801394e:	af00      	add	r7, sp, #0
 8013950:	60f8      	str	r0, [r7, #12]
 8013952:	60b9      	str	r1, [r7, #8]
 8013954:	4613      	mov	r3, r2
 8013956:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8013958:	88fa      	ldrh	r2, [r7, #6]
 801395a:	2300      	movs	r3, #0
 801395c:	68b9      	ldr	r1, [r7, #8]
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f7ff fee1 	bl	8013726 <_tu_fifo_write_n>
 8013964:	4603      	mov	r3, r0
}
 8013966:	4618      	mov	r0, r3
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}

0801396e <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 801396e:	b580      	push	{r7, lr}
 8013970:	b084      	sub	sp, #16
 8013972:	af00      	add	r7, sp, #0
 8013974:	60f8      	str	r0, [r7, #12]
 8013976:	60b9      	str	r1, [r7, #8]
 8013978:	4613      	mov	r3, r2
 801397a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 801397c:	88fa      	ldrh	r2, [r7, #6]
 801397e:	2301      	movs	r3, #1
 8013980:	68b9      	ldr	r1, [r7, #8]
 8013982:	68f8      	ldr	r0, [r7, #12]
 8013984:	f7ff fecf 	bl	8013726 <_tu_fifo_write_n>
 8013988:	4603      	mov	r3, r0
}
 801398a:	4618      	mov	r0, r3
 801398c:	3710      	adds	r7, #16
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}

08013992 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8013992:	b580      	push	{r7, lr}
 8013994:	b082      	sub	sp, #8
 8013996:	af00      	add	r7, sp, #0
 8013998:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	695b      	ldr	r3, [r3, #20]
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff fb3a 	bl	8013018 <_ff_lock>
  _ff_lock(f->mutex_rd);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	699b      	ldr	r3, [r3, #24]
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7ff fb35 	bl	8013018 <_ff_lock>

  f->rd_idx = f->wr_idx = 0;
 80139ae:	2100      	movs	r1, #0
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	460a      	mov	r2, r1
 80139b4:	81da      	strh	r2, [r3, #14]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	460a      	mov	r2, r1
 80139ba:	821a      	strh	r2, [r3, #16]
  f->max_pointer_idx = 2*f->depth-1;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	889b      	ldrh	r3, [r3, #4]
 80139c0:	005b      	lsls	r3, r3, #1
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	3b01      	subs	r3, #1
 80139c6:	b29a      	uxth	r2, r3
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	899b      	ldrh	r3, [r3, #12]
 80139d0:	43db      	mvns	r3, r3
 80139d2:	b29a      	uxth	r2, r3
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_wr);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	695b      	ldr	r3, [r3, #20]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7ff fb2b 	bl	8013038 <_ff_unlock>
  _ff_unlock(f->mutex_rd);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	699b      	ldr	r3, [r3, #24]
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7ff fb26 	bl	8013038 <_ff_unlock>
  return true;
 80139ec:	2301      	movs	r3, #1
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}

080139f6 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 80139f6:	b580      	push	{r7, lr}
 80139f8:	b082      	sub	sp, #8
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
 80139fe:	460b      	mov	r3, r1
 8013a00:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	695b      	ldr	r3, [r3, #20]
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7ff fb06 	bl	8013018 <_ff_lock>
  _ff_lock(f->mutex_rd);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	699b      	ldr	r3, [r3, #24]
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7ff fb01 	bl	8013018 <_ff_lock>

  f->overwritable = overwritable;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	78fa      	ldrb	r2, [r7, #3]
 8013a1a:	721a      	strb	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	695b      	ldr	r3, [r3, #20]
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7ff fb09 	bl	8013038 <_ff_unlock>
  _ff_unlock(f->mutex_rd);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	699b      	ldr	r3, [r3, #24]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7ff fb04 	bl	8013038 <_ff_unlock>

  return true;
 8013a30:	2301      	movs	r3, #1
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3708      	adds	r7, #8
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}

08013a3a <tu_edpt_dir>:
{
 8013a3a:	b480      	push	{r7}
 8013a3c:	b083      	sub	sp, #12
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	4603      	mov	r3, r0
 8013a42:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8013a44:	79fb      	ldrb	r3, [r7, #7]
 8013a46:	09db      	lsrs	r3, r3, #7
 8013a48:	b2db      	uxtb	r3, r3
}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	370c      	adds	r7, #12
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr

08013a56 <tu_edpt_number>:
{
 8013a56:	b480      	push	{r7}
 8013a58:	b083      	sub	sp, #12
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	71fb      	strb	r3, [r7, #7]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8013a60:	79fb      	ldrb	r3, [r7, #7]
 8013a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a66:	b2db      	uxtb	r3, r3
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	370c      	adds	r7, #12
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr

08013a74 <tu_desc_next>:
{
 8013a74:	b480      	push	{r7}
 8013a76:	b085      	sub	sp, #20
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	461a      	mov	r2, r3
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	4413      	add	r3, r2
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3714      	adds	r7, #20
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a94:	4770      	bx	lr

08013a96 <tu_desc_type>:
{
 8013a96:	b480      	push	{r7}
 8013a98:	b083      	sub	sp, #12
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	3301      	adds	r3, #1
 8013aa2:	781b      	ldrb	r3, [r3, #0]
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	370c      	adds	r7, #12
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr

08013ab0 <tu_desc_len>:
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b083      	sub	sp, #12
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	781b      	ldrb	r3, [r3, #0]
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	370c      	adds	r7, #12
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <tu_print_var>:
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
  for(uint32_t i=0; i<bufsize; i++) tu_printf("%02X ", buf[i]);
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	60fb      	str	r3, [r7, #12]
 8013ad6:	e00a      	b.n	8013aee <tu_print_var+0x26>
 8013ad8:	687a      	ldr	r2, [r7, #4]
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	4413      	add	r3, r2
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	4807      	ldr	r0, [pc, #28]	; (8013b00 <tu_print_var+0x38>)
 8013ae4:	f004 f8d4 	bl	8017c90 <iprintf>
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	3301      	adds	r3, #1
 8013aec:	60fb      	str	r3, [r7, #12]
 8013aee:	68fa      	ldr	r2, [r7, #12]
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d3f0      	bcc.n	8013ad8 <tu_print_var+0x10>
}
 8013af6:	bf00      	nop
 8013af8:	bf00      	nop
 8013afa:	3710      	adds	r7, #16
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	0801a0bc 	.word	0x0801a0bc

08013b04 <osal_semaphore_wait>:
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b084      	sub	sp, #16
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6039      	str	r1, [r7, #0]
  uint32_t const ticks = (msec == OSAL_TIMEOUT_WAIT_FOREVER) ? portMAX_DELAY : pdMS_TO_TICKS(msec);
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b14:	d009      	beq.n	8013b2a <osal_semaphore_wait+0x26>
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013b1c:	fb02 f303 	mul.w	r3, r2, r3
 8013b20:	4a0a      	ldr	r2, [pc, #40]	; (8013b4c <osal_semaphore_wait+0x48>)
 8013b22:	fba2 2303 	umull	r2, r3, r2, r3
 8013b26:	099b      	lsrs	r3, r3, #6
 8013b28:	e001      	b.n	8013b2e <osal_semaphore_wait+0x2a>
 8013b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b2e:	60fb      	str	r3, [r7, #12]
  return xSemaphoreTake(sem_hdl, ticks);
 8013b30:	68f9      	ldr	r1, [r7, #12]
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f7f8 fa0e 	bl	800bf54 <xQueueSemaphoreTake>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	bf14      	ite	ne
 8013b3e:	2301      	movne	r3, #1
 8013b40:	2300      	moveq	r3, #0
 8013b42:	b2db      	uxtb	r3, r3
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3710      	adds	r7, #16
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	10624dd3 	.word	0x10624dd3

08013b50 <osal_mutex_create>:
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
  return xSemaphoreCreateMutexStatic(mdef);
 8013b58:	6879      	ldr	r1, [r7, #4]
 8013b5a:	2001      	movs	r0, #1
 8013b5c:	f7f7 fed9 	bl	800b912 <xQueueCreateMutexStatic>
 8013b60:	4603      	mov	r3, r0
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3708      	adds	r7, #8
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}

08013b6a <osal_mutex_lock>:
{
 8013b6a:	b580      	push	{r7, lr}
 8013b6c:	b082      	sub	sp, #8
 8013b6e:	af00      	add	r7, sp, #0
 8013b70:	6078      	str	r0, [r7, #4]
 8013b72:	6039      	str	r1, [r7, #0]
  return osal_semaphore_wait(mutex_hdl, msec);
 8013b74:	6839      	ldr	r1, [r7, #0]
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f7ff ffc4 	bl	8013b04 <osal_semaphore_wait>
 8013b7c:	4603      	mov	r3, r0
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3708      	adds	r7, #8
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}

08013b86 <osal_mutex_unlock>:
{
 8013b86:	b580      	push	{r7, lr}
 8013b88:	b082      	sub	sp, #8
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
  return xSemaphoreGive(mutex_hdl);
 8013b8e:	2300      	movs	r3, #0
 8013b90:	2200      	movs	r2, #0
 8013b92:	2100      	movs	r1, #0
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f7f7 fed7 	bl	800b948 <xQueueGenericSend>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	bf14      	ite	ne
 8013ba0:	2301      	movne	r3, #1
 8013ba2:	2300      	moveq	r3, #0
 8013ba4:	b2db      	uxtb	r3, r3
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3708      	adds	r7, #8
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}

08013bae <osal_queue_create>:
}osal_queue_def_t;

typedef QueueHandle_t osal_queue_t;

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
 8013bae:	b590      	push	{r4, r7, lr}
 8013bb0:	b085      	sub	sp, #20
 8013bb2:	af02      	add	r7, sp, #8
 8013bb4:	6078      	str	r0, [r7, #4]
  return xQueueCreateStatic(qdef->depth, qdef->item_sz, (uint8_t*) qdef->buf, &qdef->sq);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	881b      	ldrh	r3, [r3, #0]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	885b      	ldrh	r3, [r3, #2]
 8013bc0:	461c      	mov	r4, r3
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	685a      	ldr	r2, [r3, #4]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	3308      	adds	r3, #8
 8013bca:	2100      	movs	r1, #0
 8013bcc:	9100      	str	r1, [sp, #0]
 8013bce:	4621      	mov	r1, r4
 8013bd0:	f7f7 fd9c 	bl	800b70c <xQueueGenericCreateStatic>
 8013bd4:	4603      	mov	r3, r0
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	370c      	adds	r7, #12
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd90      	pop	{r4, r7, pc}

08013bde <osal_queue_receive>:

static inline bool osal_queue_receive(osal_queue_t qhdl, void* data)
{
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b082      	sub	sp, #8
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
 8013be6:	6039      	str	r1, [r7, #0]
  return xQueueReceive(qhdl, data, portMAX_DELAY);
 8013be8:	f04f 32ff 	mov.w	r2, #4294967295
 8013bec:	6839      	ldr	r1, [r7, #0]
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7f8 f8d0 	bl	800bd94 <xQueueReceive>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	bf14      	ite	ne
 8013bfa:	2301      	movne	r3, #1
 8013bfc:	2300      	moveq	r3, #0
 8013bfe:	b2db      	uxtb	r3, r3
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <osal_queue_send>:

static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b086      	sub	sp, #24
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	4613      	mov	r3, r2
 8013c14:	71fb      	strb	r3, [r7, #7]
  if ( !in_isr )
 8013c16:	79fb      	ldrb	r3, [r7, #7]
 8013c18:	f083 0301 	eor.w	r3, r3, #1
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d00d      	beq.n	8013c3e <osal_queue_send+0x36>
  {
    return xQueueSendToBack(qhdl, data, OSAL_TIMEOUT_WAIT_FOREVER) != 0;
 8013c22:	2300      	movs	r3, #0
 8013c24:	f04f 32ff 	mov.w	r2, #4294967295
 8013c28:	68b9      	ldr	r1, [r7, #8]
 8013c2a:	68f8      	ldr	r0, [r7, #12]
 8013c2c:	f7f7 fe8c 	bl	800b948 <xQueueGenericSend>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	bf14      	ite	ne
 8013c36:	2301      	movne	r3, #1
 8013c38:	2300      	moveq	r3, #0
 8013c3a:	b2db      	uxtb	r3, r3
 8013c3c:	e018      	b.n	8013c70 <osal_queue_send+0x68>
  }
  else
  {
    BaseType_t xHigherPriorityTaskWoken;
    BaseType_t res = xQueueSendToBackFromISR(qhdl, data, &xHigherPriorityTaskWoken);
 8013c3e:	f107 0210 	add.w	r2, r7, #16
 8013c42:	2300      	movs	r3, #0
 8013c44:	68b9      	ldr	r1, [r7, #8]
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f7f7 ff7c 	bl	800bb44 <xQueueGenericSendFromISR>
 8013c4c:	6178      	str	r0, [r7, #20]

#if CFG_TUSB_MCU == OPT_MCU_ESP32S2 || CFG_TUSB_MCU == OPT_MCU_ESP32S3
    // not needed after https://github.com/espressif/esp-idf/commit/c5fd79547ac9b7bae06fa660e9f814d18d3390b7
    if ( xHigherPriorityTaskWoken ) portYIELD_FROM_ISR();
#else
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d007      	beq.n	8013c64 <osal_queue_send+0x5c>
 8013c54:	4b08      	ldr	r3, [pc, #32]	; (8013c78 <osal_queue_send+0x70>)
 8013c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c5a:	601a      	str	r2, [r3, #0]
 8013c5c:	f3bf 8f4f 	dsb	sy
 8013c60:	f3bf 8f6f 	isb	sy
#endif

    return res != 0;
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	bf14      	ite	ne
 8013c6a:	2301      	movne	r3, #1
 8013c6c:	2300      	moveq	r3, #0
 8013c6e:	b2db      	uxtb	r3, r3
  }
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3718      	adds	r7, #24
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	e000ed04 	.word	0xe000ed04

08013c7c <get_driver>:
static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b083      	sub	sp, #12
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	4603      	mov	r3, r0
 8013c84:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8013c86:	4b14      	ldr	r3, [pc, #80]	; (8013cd8 <get_driver+0x5c>)
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d012      	beq.n	8013cb2 <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8013c8c:	4b13      	ldr	r3, [pc, #76]	; (8013cdc <get_driver+0x60>)
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	79fa      	ldrb	r2, [r7, #7]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d208      	bcs.n	8013ca8 <get_driver+0x2c>
 8013c96:	4b12      	ldr	r3, [pc, #72]	; (8013ce0 <get_driver+0x64>)
 8013c98:	6819      	ldr	r1, [r3, #0]
 8013c9a:	79fa      	ldrb	r2, [r7, #7]
 8013c9c:	4613      	mov	r3, r2
 8013c9e:	00db      	lsls	r3, r3, #3
 8013ca0:	1a9b      	subs	r3, r3, r2
 8013ca2:	009b      	lsls	r3, r3, #2
 8013ca4:	440b      	add	r3, r1
 8013ca6:	e010      	b.n	8013cca <get_driver+0x4e>
    drvid -= _app_driver_count;
 8013ca8:	4b0c      	ldr	r3, [pc, #48]	; (8013cdc <get_driver+0x60>)
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	79fa      	ldrb	r2, [r7, #7]
 8013cae:	1ad3      	subs	r3, r2, r3
 8013cb0:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8013cb2:	79fb      	ldrb	r3, [r7, #7]
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d807      	bhi.n	8013cc8 <get_driver+0x4c>
 8013cb8:	79fa      	ldrb	r2, [r7, #7]
 8013cba:	4613      	mov	r3, r2
 8013cbc:	00db      	lsls	r3, r3, #3
 8013cbe:	1a9b      	subs	r3, r3, r2
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	4a08      	ldr	r2, [pc, #32]	; (8013ce4 <get_driver+0x68>)
 8013cc4:	4413      	add	r3, r2
 8013cc6:	e000      	b.n	8013cca <get_driver+0x4e>

  return NULL;
 8013cc8:	2300      	movs	r3, #0
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	370c      	adds	r7, #12
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd4:	4770      	bx	lr
 8013cd6:	bf00      	nop
 8013cd8:	00000000 	.word	0x00000000
 8013cdc:	20009340 	.word	0x20009340
 8013ce0:	2000933c 	.word	0x2000933c
 8013ce4:	0801b3ec 	.word	0x0801b3ec

08013ce8 <usbd_driver_print_control_complete_name>:

static char const* const _tusb_speed_str[] = { "Full", "Low", "High" };

// for usbd_control to print the name of control complete driver
void usbd_driver_print_control_complete_name(usbd_control_xfer_cb_t callback)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	73fb      	strb	r3, [r7, #15]
 8013cf4:	e013      	b.n	8013d1e <usbd_driver_print_control_complete_name+0x36>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8013cf6:	7bfb      	ldrb	r3, [r7, #15]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7ff ffbf 	bl	8013c7c <get_driver>
 8013cfe:	60b8      	str	r0, [r7, #8]
    if ( driver->control_xfer_cb == callback )
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	691b      	ldr	r3, [r3, #16]
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d106      	bne.n	8013d18 <usbd_driver_print_control_complete_name+0x30>
    {
      TU_LOG2("  %s control complete\r\n", driver->name);
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	4619      	mov	r1, r3
 8013d10:	4807      	ldr	r0, [pc, #28]	; (8013d30 <usbd_driver_print_control_complete_name+0x48>)
 8013d12:	f003 ffbd 	bl	8017c90 <iprintf>
      return;
 8013d16:	e008      	b.n	8013d2a <usbd_driver_print_control_complete_name+0x42>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8013d18:	7bfb      	ldrb	r3, [r7, #15]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	73fb      	strb	r3, [r7, #15]
 8013d1e:	4b05      	ldr	r3, [pc, #20]	; (8013d34 <usbd_driver_print_control_complete_name+0x4c>)
 8013d20:	781b      	ldrb	r3, [r3, #0]
 8013d22:	1c5a      	adds	r2, r3, #1
 8013d24:	7bfb      	ldrb	r3, [r7, #15]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	dae5      	bge.n	8013cf6 <usbd_driver_print_control_complete_name+0xe>
    }
  }
}
 8013d2a:	3710      	adds	r7, #16
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	0801a1f4 	.word	0x0801a1f4
 8013d34:	20009340 	.word	0x20009340

08013d38 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8013d38:	b480      	push	{r7}
 8013d3a:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8013d3c:	4b06      	ldr	r3, [pc, #24]	; (8013d58 <tud_mounted+0x20>)
 8013d3e:	785b      	ldrb	r3, [r3, #1]
 8013d40:	b2db      	uxtb	r3, r3
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	bf14      	ite	ne
 8013d46:	2301      	movne	r3, #1
 8013d48:	2300      	moveq	r3, #0
 8013d4a:	b2db      	uxtb	r3, r3
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	20009310 	.word	0x20009310

08013d5c <tud_suspended>:

bool tud_suspended(void)
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8013d60:	4b07      	ldr	r3, [pc, #28]	; (8013d80 <tud_suspended+0x24>)
 8013d62:	781b      	ldrb	r3, [r3, #0]
 8013d64:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8013d68:	b2db      	uxtb	r3, r3
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	bf14      	ite	ne
 8013d6e:	2301      	movne	r3, #1
 8013d70:	2300      	moveq	r3, #0
 8013d72:	b2db      	uxtb	r3, r3
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop
 8013d80:	20009310 	.word	0x20009310

08013d84 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8013d84:	b480      	push	{r7}
 8013d86:	af00      	add	r7, sp, #0
  return _usbd_initialized;
 8013d88:	4b03      	ldr	r3, [pc, #12]	; (8013d98 <tud_inited+0x14>)
 8013d8a:	781b      	ldrb	r3, [r3, #0]
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	20009341 	.word	0x20009341

08013d9c <tud_init>:

bool tud_init (uint8_t rhport)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b086      	sub	sp, #24
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	4603      	mov	r3, r0
 8013da4:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if (_usbd_initialized) return _usbd_initialized;
 8013da6:	4b3c      	ldr	r3, [pc, #240]	; (8013e98 <tud_init+0xfc>)
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d002      	beq.n	8013db4 <tud_init+0x18>
 8013dae:	4b3a      	ldr	r3, [pc, #232]	; (8013e98 <tud_init+0xfc>)
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	e06c      	b.n	8013e8e <tud_init+0xf2>

  TU_LOG2("USBD init\r\n");
 8013db4:	4839      	ldr	r0, [pc, #228]	; (8013e9c <tud_init+0x100>)
 8013db6:	f004 f807 	bl	8017dc8 <puts>

  tu_varclr(&_usbd_dev);
 8013dba:	222b      	movs	r2, #43	; 0x2b
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	4838      	ldr	r0, [pc, #224]	; (8013ea0 <tud_init+0x104>)
 8013dc0:	f003 fec9 	bl	8017b56 <memset>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
 8013dc4:	4837      	ldr	r0, [pc, #220]	; (8013ea4 <tud_init+0x108>)
 8013dc6:	f7ff fec3 	bl	8013b50 <osal_mutex_create>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	4a36      	ldr	r2, [pc, #216]	; (8013ea8 <tud_init+0x10c>)
 8013dce:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_mutex);
 8013dd0:	4b35      	ldr	r3, [pc, #212]	; (8013ea8 <tud_init+0x10c>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d110      	bne.n	8013dfa <tud_init+0x5e>
 8013dd8:	f240 12a1 	movw	r2, #417	; 0x1a1
 8013ddc:	4933      	ldr	r1, [pc, #204]	; (8013eac <tud_init+0x110>)
 8013dde:	4834      	ldr	r0, [pc, #208]	; (8013eb0 <tud_init+0x114>)
 8013de0:	f003 ff56 	bl	8017c90 <iprintf>
 8013de4:	4b33      	ldr	r3, [pc, #204]	; (8013eb4 <tud_init+0x118>)
 8013de6:	60bb      	str	r3, [r7, #8]
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	f003 0301 	and.w	r3, r3, #1
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d000      	beq.n	8013df6 <tud_init+0x5a>
 8013df4:	be00      	bkpt	0x0000
 8013df6:	2300      	movs	r3, #0
 8013df8:	e049      	b.n	8013e8e <tud_init+0xf2>
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8013dfa:	482f      	ldr	r0, [pc, #188]	; (8013eb8 <tud_init+0x11c>)
 8013dfc:	f7ff fed7 	bl	8013bae <osal_queue_create>
 8013e00:	4603      	mov	r3, r0
 8013e02:	4a2e      	ldr	r2, [pc, #184]	; (8013ebc <tud_init+0x120>)
 8013e04:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8013e06:	4b2d      	ldr	r3, [pc, #180]	; (8013ebc <tud_init+0x120>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d110      	bne.n	8013e30 <tud_init+0x94>
 8013e0e:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8013e12:	4926      	ldr	r1, [pc, #152]	; (8013eac <tud_init+0x110>)
 8013e14:	4826      	ldr	r0, [pc, #152]	; (8013eb0 <tud_init+0x114>)
 8013e16:	f003 ff3b 	bl	8017c90 <iprintf>
 8013e1a:	4b26      	ldr	r3, [pc, #152]	; (8013eb4 <tud_init+0x118>)
 8013e1c:	60fb      	str	r3, [r7, #12]
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	f003 0301 	and.w	r3, r3, #1
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d000      	beq.n	8013e2c <tud_init+0x90>
 8013e2a:	be00      	bkpt	0x0000
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	e02e      	b.n	8013e8e <tud_init+0xf2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8013e30:	4b23      	ldr	r3, [pc, #140]	; (8013ec0 <tud_init+0x124>)
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d005      	beq.n	8013e42 <tud_init+0xa6>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8013e36:	4823      	ldr	r0, [pc, #140]	; (8013ec4 <tud_init+0x128>)
 8013e38:	f3af 8000 	nop.w
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	4a22      	ldr	r2, [pc, #136]	; (8013ec8 <tud_init+0x12c>)
 8013e40:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8013e42:	2300      	movs	r3, #0
 8013e44:	75fb      	strb	r3, [r7, #23]
 8013e46:	e010      	b.n	8013e6a <tud_init+0xce>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8013e48:	7dfb      	ldrb	r3, [r7, #23]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7ff ff16 	bl	8013c7c <get_driver>
 8013e50:	6138      	str	r0, [r7, #16]
    TU_LOG2("%s init\r\n", driver->name);
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	4619      	mov	r1, r3
 8013e58:	481c      	ldr	r0, [pc, #112]	; (8013ecc <tud_init+0x130>)
 8013e5a:	f003 ff19 	bl	8017c90 <iprintf>
    driver->init();
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8013e64:	7dfb      	ldrb	r3, [r7, #23]
 8013e66:	3301      	adds	r3, #1
 8013e68:	75fb      	strb	r3, [r7, #23]
 8013e6a:	4b16      	ldr	r3, [pc, #88]	; (8013ec4 <tud_init+0x128>)
 8013e6c:	781b      	ldrb	r3, [r3, #0]
 8013e6e:	1c5a      	adds	r2, r3, #1
 8013e70:	7dfb      	ldrb	r3, [r7, #23]
 8013e72:	429a      	cmp	r2, r3
 8013e74:	dae8      	bge.n	8013e48 <tud_init+0xac>
  }

  // Init device controller driver
  dcd_init(rhport);
 8013e76:	79fb      	ldrb	r3, [r7, #7]
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f002 fb35 	bl	80164e8 <dcd_init>
  dcd_int_enable(rhport);
 8013e7e:	79fb      	ldrb	r3, [r7, #7]
 8013e80:	4618      	mov	r0, r3
 8013e82:	f002 fb9b 	bl	80165bc <dcd_int_enable>

  _usbd_initialized = true;
 8013e86:	4b04      	ldr	r3, [pc, #16]	; (8013e98 <tud_init+0xfc>)
 8013e88:	2201      	movs	r2, #1
 8013e8a:	701a      	strb	r2, [r3, #0]

  return true;
 8013e8c:	2301      	movs	r3, #1
}
 8013e8e:	4618      	mov	r0, r3
 8013e90:	3718      	adds	r7, #24
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}
 8013e96:	bf00      	nop
 8013e98:	20009341 	.word	0x20009341
 8013e9c:	0801a20c 	.word	0x0801a20c
 8013ea0:	20009310 	.word	0x20009310
 8013ea4:	20009408 	.word	0x20009408
 8013ea8:	20009450 	.word	0x20009450
 8013eac:	0801b488 	.word	0x0801b488
 8013eb0:	0801a218 	.word	0x0801a218
 8013eb4:	e000edf0 	.word	0xe000edf0
 8013eb8:	2000016c 	.word	0x2000016c
 8013ebc:	20009404 	.word	0x20009404
 8013ec0:	00000000 	.word	0x00000000
 8013ec4:	20009340 	.word	0x20009340
 8013ec8:	2000933c 	.word	0x2000933c
 8013ecc:	0801a230 	.word	0x0801a230

08013ed0 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8013eda:	2300      	movs	r3, #0
 8013edc:	73fb      	strb	r3, [r7, #15]
 8013ede:	e00b      	b.n	8013ef8 <configuration_reset+0x28>
  {
    get_driver(i)->reset(rhport);
 8013ee0:	7bfb      	ldrb	r3, [r7, #15]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7ff feca 	bl	8013c7c <get_driver>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	689b      	ldr	r3, [r3, #8]
 8013eec:	79fa      	ldrb	r2, [r7, #7]
 8013eee:	4610      	mov	r0, r2
 8013ef0:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8013ef2:	7bfb      	ldrb	r3, [r7, #15]
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	73fb      	strb	r3, [r7, #15]
 8013ef8:	4b0c      	ldr	r3, [pc, #48]	; (8013f2c <configuration_reset+0x5c>)
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	1c5a      	adds	r2, r3, #1
 8013efe:	7bfb      	ldrb	r3, [r7, #15]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	daed      	bge.n	8013ee0 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8013f04:	222b      	movs	r2, #43	; 0x2b
 8013f06:	2100      	movs	r1, #0
 8013f08:	4809      	ldr	r0, [pc, #36]	; (8013f30 <configuration_reset+0x60>)
 8013f0a:	f003 fe24 	bl	8017b56 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8013f0e:	2210      	movs	r2, #16
 8013f10:	21ff      	movs	r1, #255	; 0xff
 8013f12:	4808      	ldr	r0, [pc, #32]	; (8013f34 <configuration_reset+0x64>)
 8013f14:	f003 fe1f 	bl	8017b56 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8013f18:	220c      	movs	r2, #12
 8013f1a:	21ff      	movs	r1, #255	; 0xff
 8013f1c:	4806      	ldr	r0, [pc, #24]	; (8013f38 <configuration_reset+0x68>)
 8013f1e:	f003 fe1a 	bl	8017b56 <memset>
}
 8013f22:	bf00      	nop
 8013f24:	3710      	adds	r7, #16
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	20009340 	.word	0x20009340
 8013f30:	20009310 	.word	0x20009310
 8013f34:	20009313 	.word	0x20009313
 8013f38:	20009323 	.word	0x20009323

08013f3c <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	4603      	mov	r3, r0
 8013f44:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8013f46:	79fb      	ldrb	r3, [r7, #7]
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7ff ffc1 	bl	8013ed0 <configuration_reset>
  usbd_control_reset();
 8013f4e:	f001 fc03 	bl	8015758 <usbd_control_reset>
}
 8013f52:	bf00      	nop
 8013f54:	3708      	adds	r7, #8
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
	...

08013f5c <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
 8013f5c:	b590      	push	{r4, r7, lr}
 8013f5e:	b089      	sub	sp, #36	; 0x24
 8013f60:	af00      	add	r7, sp, #0
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
 8013f62:	f003 fac9 	bl	80174f8 <tusb_inited>
 8013f66:	4603      	mov	r3, r0
 8013f68:	f083 0301 	eor.w	r3, r3, #1
 8013f6c:	b2db      	uxtb	r3, r3
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	f040 81a0 	bne.w	80142b4 <tud_task+0x358>
  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;

    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 8013f74:	4bb0      	ldr	r3, [pc, #704]	; (8014238 <tud_task+0x2dc>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	463a      	mov	r2, r7
 8013f7a:	4611      	mov	r1, r2
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7ff fe2e 	bl	8013bde <osal_queue_receive>
 8013f82:	4603      	mov	r3, r0
 8013f84:	f083 0301 	eor.w	r3, r3, #1
 8013f88:	b2db      	uxtb	r3, r3
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	f040 8194 	bne.w	80142b8 <tud_task+0x35c>

#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
 8013f90:	787b      	ldrb	r3, [r7, #1]
 8013f92:	2b06      	cmp	r3, #6
 8013f94:	d102      	bne.n	8013f9c <tud_task+0x40>
 8013f96:	48a9      	ldr	r0, [pc, #676]	; (801423c <tud_task+0x2e0>)
 8013f98:	f003 ff16 	bl	8017dc8 <puts>
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
 8013f9c:	787b      	ldrb	r3, [r7, #1]
 8013f9e:	2b08      	cmp	r3, #8
 8013fa0:	d805      	bhi.n	8013fae <tud_task+0x52>
 8013fa2:	787b      	ldrb	r3, [r7, #1]
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	4ba6      	ldr	r3, [pc, #664]	; (8014240 <tud_task+0x2e4>)
 8013fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fac:	e000      	b.n	8013fb0 <tud_task+0x54>
 8013fae:	4ba5      	ldr	r3, [pc, #660]	; (8014244 <tud_task+0x2e8>)
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	48a5      	ldr	r0, [pc, #660]	; (8014248 <tud_task+0x2ec>)
 8013fb4:	f003 fe6c 	bl	8017c90 <iprintf>
#endif

    switch ( event.event_id )
 8013fb8:	787b      	ldrb	r3, [r7, #1]
 8013fba:	3b01      	subs	r3, #1
 8013fbc:	2b07      	cmp	r3, #7
 8013fbe:	f200 8163 	bhi.w	8014288 <tud_task+0x32c>
 8013fc2:	a201      	add	r2, pc, #4	; (adr r2, 8013fc8 <tud_task+0x6c>)
 8013fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fc8:	08013fe9 	.word	0x08013fe9
 8013fcc:	0801400b 	.word	0x0801400b
 8013fd0:	080141e7 	.word	0x080141e7
 8013fd4:	08014173 	.word	0x08014173
 8013fd8:	080141bf 	.word	0x080141bf
 8013fdc:	08014027 	.word	0x08014027
 8013fe0:	080140ab 	.word	0x080140ab
 8013fe4:	08014223 	.word	0x08014223
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG2(": %s Speed\r\n", _tusb_speed_str[event.bus_reset.speed]);
 8013fe8:	793b      	ldrb	r3, [r7, #4]
 8013fea:	461a      	mov	r2, r3
 8013fec:	4b97      	ldr	r3, [pc, #604]	; (801424c <tud_task+0x2f0>)
 8013fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	4896      	ldr	r0, [pc, #600]	; (8014250 <tud_task+0x2f4>)
 8013ff6:	f003 fe4b 	bl	8017c90 <iprintf>
        usbd_reset(event.rhport);
 8013ffa:	783b      	ldrb	r3, [r7, #0]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7ff ff9d 	bl	8013f3c <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8014002:	793a      	ldrb	r2, [r7, #4]
 8014004:	4b93      	ldr	r3, [pc, #588]	; (8014254 <tud_task+0x2f8>)
 8014006:	709a      	strb	r2, [r3, #2]
      break;
 8014008:	e153      	b.n	80142b2 <tud_task+0x356>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG2("\r\n");
 801400a:	488c      	ldr	r0, [pc, #560]	; (801423c <tud_task+0x2e0>)
 801400c:	f003 fedc 	bl	8017dc8 <puts>
        usbd_reset(event.rhport);
 8014010:	783b      	ldrb	r3, [r7, #0]
 8014012:	4618      	mov	r0, r3
 8014014:	f7ff ff92 	bl	8013f3c <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 8014018:	4b8f      	ldr	r3, [pc, #572]	; (8014258 <tud_task+0x2fc>)
 801401a:	2b00      	cmp	r3, #0
 801401c:	f000 813e 	beq.w	801429c <tud_task+0x340>
 8014020:	f3af 8000 	nop.w
      break;
 8014024:	e13a      	b.n	801429c <tud_task+0x340>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_LOG2_VAR(&event.setup_received);
 8014026:	463b      	mov	r3, r7
 8014028:	3304      	adds	r3, #4
 801402a:	2108      	movs	r1, #8
 801402c:	4618      	mov	r0, r3
 801402e:	f7ff fd4b 	bl	8013ac8 <tu_print_var>
        TU_LOG2("\r\n");
 8014032:	4882      	ldr	r0, [pc, #520]	; (801423c <tud_task+0x2e0>)
 8014034:	f003 fec8 	bl	8017dc8 <puts>

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8014038:	4a86      	ldr	r2, [pc, #536]	; (8014254 <tud_task+0x2f8>)
 801403a:	7813      	ldrb	r3, [r2, #0]
 801403c:	f043 0301 	orr.w	r3, r3, #1
 8014040:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8014042:	4a84      	ldr	r2, [pc, #528]	; (8014254 <tud_task+0x2f8>)
 8014044:	7fd3      	ldrb	r3, [r2, #31]
 8014046:	f36f 0300 	bfc	r3, #0, #1
 801404a:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 801404c:	4a81      	ldr	r2, [pc, #516]	; (8014254 <tud_task+0x2f8>)
 801404e:	7fd3      	ldrb	r3, [r2, #31]
 8014050:	f36f 0382 	bfc	r3, #2, #1
 8014054:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 8014056:	4a7f      	ldr	r2, [pc, #508]	; (8014254 <tud_task+0x2f8>)
 8014058:	f892 3020 	ldrb.w	r3, [r2, #32]
 801405c:	f36f 0300 	bfc	r3, #0, #1
 8014060:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8014064:	4a7b      	ldr	r2, [pc, #492]	; (8014254 <tud_task+0x2f8>)
 8014066:	f892 3020 	ldrb.w	r3, [r2, #32]
 801406a:	f36f 0382 	bfc	r3, #2, #1
 801406e:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8014072:	783a      	ldrb	r2, [r7, #0]
 8014074:	463b      	mov	r3, r7
 8014076:	3304      	adds	r3, #4
 8014078:	4619      	mov	r1, r3
 801407a:	4610      	mov	r0, r2
 801407c:	f000 f944 	bl	8014308 <process_control_request>
 8014080:	4603      	mov	r3, r0
 8014082:	f083 0301 	eor.w	r3, r3, #1
 8014086:	b2db      	uxtb	r3, r3
 8014088:	2b00      	cmp	r3, #0
 801408a:	f000 8109 	beq.w	80142a0 <tud_task+0x344>
        {
          TU_LOG2("  Stall EP0\r\n");
 801408e:	4873      	ldr	r0, [pc, #460]	; (801425c <tud_task+0x300>)
 8014090:	f003 fe9a 	bl	8017dc8 <puts>
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8014094:	783b      	ldrb	r3, [r7, #0]
 8014096:	2100      	movs	r1, #0
 8014098:	4618      	mov	r0, r3
 801409a:	f002 fdb7 	bl	8016c0c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 801409e:	783b      	ldrb	r3, [r7, #0]
 80140a0:	2180      	movs	r1, #128	; 0x80
 80140a2:	4618      	mov	r0, r3
 80140a4:	f002 fdb2 	bl	8016c0c <dcd_edpt_stall>
        }
      break;
 80140a8:	e0fa      	b.n	80142a0 <tud_task+0x344>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80140aa:	793b      	ldrb	r3, [r7, #4]
 80140ac:	77bb      	strb	r3, [r7, #30]
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 80140ae:	7fbb      	ldrb	r3, [r7, #30]
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7ff fcd0 	bl	8013a56 <tu_edpt_number>
 80140b6:	4603      	mov	r3, r0
 80140b8:	777b      	strb	r3, [r7, #29]
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80140ba:	7fbb      	ldrb	r3, [r7, #30]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7ff fcbc 	bl	8013a3a <tu_edpt_dir>
 80140c2:	4603      	mov	r3, r0
 80140c4:	773b      	strb	r3, [r7, #28]

        TU_LOG2("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
 80140c6:	7fbb      	ldrb	r3, [r7, #30]
 80140c8:	68ba      	ldr	r2, [r7, #8]
 80140ca:	4619      	mov	r1, r3
 80140cc:	4864      	ldr	r0, [pc, #400]	; (8014260 <tud_task+0x304>)
 80140ce:	f003 fddf 	bl	8017c90 <iprintf>

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80140d2:	7f7a      	ldrb	r2, [r7, #29]
 80140d4:	7f3b      	ldrb	r3, [r7, #28]
 80140d6:	495f      	ldr	r1, [pc, #380]	; (8014254 <tud_task+0x2f8>)
 80140d8:	0052      	lsls	r2, r2, #1
 80140da:	440a      	add	r2, r1
 80140dc:	4413      	add	r3, r2
 80140de:	f103 0218 	add.w	r2, r3, #24
 80140e2:	79d3      	ldrb	r3, [r2, #7]
 80140e4:	f36f 0300 	bfc	r3, #0, #1
 80140e8:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80140ea:	7f7a      	ldrb	r2, [r7, #29]
 80140ec:	7f3b      	ldrb	r3, [r7, #28]
 80140ee:	4959      	ldr	r1, [pc, #356]	; (8014254 <tud_task+0x2f8>)
 80140f0:	0052      	lsls	r2, r2, #1
 80140f2:	440a      	add	r2, r1
 80140f4:	4413      	add	r3, r2
 80140f6:	f103 0218 	add.w	r2, r3, #24
 80140fa:	79d3      	ldrb	r3, [r2, #7]
 80140fc:	f36f 0382 	bfc	r3, #2, #1
 8014100:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 8014102:	7f7b      	ldrb	r3, [r7, #29]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d106      	bne.n	8014116 <tud_task+0x1ba>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8014108:	7838      	ldrb	r0, [r7, #0]
 801410a:	797a      	ldrb	r2, [r7, #5]
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	7fb9      	ldrb	r1, [r7, #30]
 8014110:	f001 fb58 	bl	80157c4 <usbd_control_xfer_cb>

          TU_LOG2("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8014114:	e0cd      	b.n	80142b2 <tud_task+0x356>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8014116:	7f7a      	ldrb	r2, [r7, #29]
 8014118:	7f3b      	ldrb	r3, [r7, #28]
 801411a:	494e      	ldr	r1, [pc, #312]	; (8014254 <tud_task+0x2f8>)
 801411c:	0052      	lsls	r2, r2, #1
 801411e:	440a      	add	r2, r1
 8014120:	4413      	add	r3, r2
 8014122:	3313      	adds	r3, #19
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	4618      	mov	r0, r3
 8014128:	f7ff fda8 	bl	8013c7c <get_driver>
 801412c:	61b8      	str	r0, [r7, #24]
          TU_ASSERT(driver, );
 801412e:	69bb      	ldr	r3, [r7, #24]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d110      	bne.n	8014156 <tud_task+0x1fa>
 8014134:	f240 2237 	movw	r2, #567	; 0x237
 8014138:	494a      	ldr	r1, [pc, #296]	; (8014264 <tud_task+0x308>)
 801413a:	484b      	ldr	r0, [pc, #300]	; (8014268 <tud_task+0x30c>)
 801413c:	f003 fda8 	bl	8017c90 <iprintf>
 8014140:	4b4a      	ldr	r3, [pc, #296]	; (801426c <tud_task+0x310>)
 8014142:	617b      	str	r3, [r7, #20]
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	f003 0301 	and.w	r3, r3, #1
 801414c:	2b00      	cmp	r3, #0
 801414e:	f000 80b5 	beq.w	80142bc <tud_task+0x360>
 8014152:	be00      	bkpt	0x0000
 8014154:	e0b2      	b.n	80142bc <tud_task+0x360>
          TU_LOG2("  %s xfer callback\r\n", driver->name);
 8014156:	69bb      	ldr	r3, [r7, #24]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	4619      	mov	r1, r3
 801415c:	4844      	ldr	r0, [pc, #272]	; (8014270 <tud_task+0x314>)
 801415e:	f003 fd97 	bl	8017c90 <iprintf>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8014162:	69bb      	ldr	r3, [r7, #24]
 8014164:	695c      	ldr	r4, [r3, #20]
 8014166:	7838      	ldrb	r0, [r7, #0]
 8014168:	797a      	ldrb	r2, [r7, #5]
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	7fb9      	ldrb	r1, [r7, #30]
 801416e:	47a0      	blx	r4
      break;
 8014170:	e09f      	b.n	80142b2 <tud_task+0x356>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8014172:	4b38      	ldr	r3, [pc, #224]	; (8014254 <tud_task+0x2f8>)
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801417a:	b2db      	uxtb	r3, r3
 801417c:	2b00      	cmp	r3, #0
 801417e:	d01a      	beq.n	80141b6 <tud_task+0x25a>
        {
          TU_LOG2(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
 8014180:	4b34      	ldr	r3, [pc, #208]	; (8014254 <tud_task+0x2f8>)
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8014188:	b2db      	uxtb	r3, r3
 801418a:	4619      	mov	r1, r3
 801418c:	4839      	ldr	r0, [pc, #228]	; (8014274 <tud_task+0x318>)
 801418e:	f003 fd7f 	bl	8017c90 <iprintf>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8014192:	4b39      	ldr	r3, [pc, #228]	; (8014278 <tud_task+0x31c>)
 8014194:	2b00      	cmp	r3, #0
 8014196:	f000 8085 	beq.w	80142a4 <tud_task+0x348>
 801419a:	4b2e      	ldr	r3, [pc, #184]	; (8014254 <tud_task+0x2f8>)
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80141a2:	b2db      	uxtb	r3, r3
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	bf14      	ite	ne
 80141a8:	2301      	movne	r3, #1
 80141aa:	2300      	moveq	r3, #0
 80141ac:	b2db      	uxtb	r3, r3
 80141ae:	4618      	mov	r0, r3
 80141b0:	f3af 8000 	nop.w
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
 80141b4:	e076      	b.n	80142a4 <tud_task+0x348>
          TU_LOG2(" Skipped\r\n");
 80141b6:	4831      	ldr	r0, [pc, #196]	; (801427c <tud_task+0x320>)
 80141b8:	f003 fe06 	bl	8017dc8 <puts>
      break;
 80141bc:	e072      	b.n	80142a4 <tud_task+0x348>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 80141be:	4b25      	ldr	r3, [pc, #148]	; (8014254 <tud_task+0x2f8>)
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80141c6:	b2db      	uxtb	r3, r3
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d008      	beq.n	80141de <tud_task+0x282>
        {
          TU_LOG2("\r\n");
 80141cc:	481b      	ldr	r0, [pc, #108]	; (801423c <tud_task+0x2e0>)
 80141ce:	f003 fdfb 	bl	8017dc8 <puts>
          if (tud_resume_cb) tud_resume_cb();
 80141d2:	4b2b      	ldr	r3, [pc, #172]	; (8014280 <tud_task+0x324>)
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d067      	beq.n	80142a8 <tud_task+0x34c>
 80141d8:	f3af 8000 	nop.w
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
 80141dc:	e064      	b.n	80142a8 <tud_task+0x34c>
          TU_LOG2(" Skipped\r\n");
 80141de:	4827      	ldr	r0, [pc, #156]	; (801427c <tud_task+0x320>)
 80141e0:	f003 fdf2 	bl	8017dc8 <puts>
      break;
 80141e4:	e060      	b.n	80142a8 <tud_task+0x34c>

      case DCD_EVENT_SOF:
        TU_LOG2("\r\n");
 80141e6:	4815      	ldr	r0, [pc, #84]	; (801423c <tud_task+0x2e0>)
 80141e8:	f003 fdee 	bl	8017dc8 <puts>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80141ec:	2300      	movs	r3, #0
 80141ee:	77fb      	strb	r3, [r7, #31]
 80141f0:	e010      	b.n	8014214 <tud_task+0x2b8>
        {
          usbd_class_driver_t const * driver = get_driver(i);
 80141f2:	7ffb      	ldrb	r3, [r7, #31]
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7ff fd41 	bl	8013c7c <get_driver>
 80141fa:	6138      	str	r0, [r7, #16]
          if ( driver->sof ) driver->sof(event.rhport);
 80141fc:	693b      	ldr	r3, [r7, #16]
 80141fe:	699b      	ldr	r3, [r3, #24]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d004      	beq.n	801420e <tud_task+0x2b2>
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	699b      	ldr	r3, [r3, #24]
 8014208:	783a      	ldrb	r2, [r7, #0]
 801420a:	4610      	mov	r0, r2
 801420c:	4798      	blx	r3
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 801420e:	7ffb      	ldrb	r3, [r7, #31]
 8014210:	3301      	adds	r3, #1
 8014212:	77fb      	strb	r3, [r7, #31]
 8014214:	4b1b      	ldr	r3, [pc, #108]	; (8014284 <tud_task+0x328>)
 8014216:	781b      	ldrb	r3, [r3, #0]
 8014218:	1c5a      	adds	r2, r3, #1
 801421a:	7ffb      	ldrb	r3, [r7, #31]
 801421c:	429a      	cmp	r2, r3
 801421e:	dae8      	bge.n	80141f2 <tud_task+0x296>
        }
      break;
 8014220:	e047      	b.n	80142b2 <tud_task+0x356>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
 8014222:	4806      	ldr	r0, [pc, #24]	; (801423c <tud_task+0x2e0>)
 8014224:	f003 fdd0 	bl	8017dc8 <puts>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d03e      	beq.n	80142ac <tud_task+0x350>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	68ba      	ldr	r2, [r7, #8]
 8014232:	4610      	mov	r0, r2
 8014234:	4798      	blx	r3
      break;
 8014236:	e039      	b.n	80142ac <tud_task+0x350>
 8014238:	20009404 	.word	0x20009404
 801423c:	0801a23c 	.word	0x0801a23c
 8014240:	0801b424 	.word	0x0801b424
 8014244:	0801a240 	.word	0x0801a240
 8014248:	0801a24c 	.word	0x0801a24c
 801424c:	0801b47c 	.word	0x0801b47c
 8014250:	0801a258 	.word	0x0801a258
 8014254:	20009310 	.word	0x20009310
 8014258:	00000000 	.word	0x00000000
 801425c:	0801a268 	.word	0x0801a268
 8014260:	0801a278 	.word	0x0801a278
 8014264:	0801b494 	.word	0x0801b494
 8014268:	0801a218 	.word	0x0801a218
 801426c:	e000edf0 	.word	0xe000edf0
 8014270:	0801a294 	.word	0x0801a294
 8014274:	0801a2ac 	.word	0x0801a2ac
 8014278:	00000000 	.word	0x00000000
 801427c:	0801a2c4 	.word	0x0801a2c4
 8014280:	00000000 	.word	0x00000000
 8014284:	20009340 	.word	0x20009340

      default:
        TU_BREAKPOINT();
 8014288:	4b0e      	ldr	r3, [pc, #56]	; (80142c4 <tud_task+0x368>)
 801428a:	60fb      	str	r3, [r7, #12]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	f003 0301 	and.w	r3, r3, #1
 8014294:	2b00      	cmp	r3, #0
 8014296:	d00b      	beq.n	80142b0 <tud_task+0x354>
 8014298:	be00      	bkpt	0x0000
      break;
 801429a:	e009      	b.n	80142b0 <tud_task+0x354>
      break;
 801429c:	bf00      	nop
 801429e:	e669      	b.n	8013f74 <tud_task+0x18>
      break;
 80142a0:	bf00      	nop
 80142a2:	e667      	b.n	8013f74 <tud_task+0x18>
      break;
 80142a4:	bf00      	nop
 80142a6:	e665      	b.n	8013f74 <tud_task+0x18>
      break;
 80142a8:	bf00      	nop
 80142aa:	e663      	b.n	8013f74 <tud_task+0x18>
      break;
 80142ac:	bf00      	nop
 80142ae:	e661      	b.n	8013f74 <tud_task+0x18>
      break;
 80142b0:	bf00      	nop
  {
 80142b2:	e65f      	b.n	8013f74 <tud_task+0x18>
  if ( !tusb_inited() ) return;
 80142b4:	bf00      	nop
 80142b6:	e002      	b.n	80142be <tud_task+0x362>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 80142b8:	bf00      	nop
 80142ba:	e000      	b.n	80142be <tud_task+0x362>
          TU_ASSERT(driver, );
 80142bc:	bf00      	nop
    }
  }
}
 80142be:	3724      	adds	r7, #36	; 0x24
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd90      	pop	{r4, r7, pc}
 80142c4:	e000edf0 	.word	0xe000edf0

080142c8 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	4603      	mov	r3, r0
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
 80142d4:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	691b      	ldr	r3, [r3, #16]
 80142da:	4618      	mov	r0, r3
 80142dc:	f001 fa48 	bl	8015770 <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", driver->name);
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	4619      	mov	r1, r3
 80142e6:	4807      	ldr	r0, [pc, #28]	; (8014304 <invoke_class_control+0x3c>)
 80142e8:	f003 fcd2 	bl	8017c90 <iprintf>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	691b      	ldr	r3, [r3, #16]
 80142f0:	7bf8      	ldrb	r0, [r7, #15]
 80142f2:	687a      	ldr	r2, [r7, #4]
 80142f4:	2100      	movs	r1, #0
 80142f6:	4798      	blx	r3
 80142f8:	4603      	mov	r3, r0
}
 80142fa:	4618      	mov	r0, r3
 80142fc:	3710      	adds	r7, #16
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}
 8014302:	bf00      	nop
 8014304:	0801a2d0 	.word	0x0801a2d0

08014308 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b094      	sub	sp, #80	; 0x50
 801430c:	af00      	add	r7, sp, #0
 801430e:	4603      	mov	r3, r0
 8014310:	6039      	str	r1, [r7, #0]
 8014312:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8014314:	2000      	movs	r0, #0
 8014316:	f001 fa2b 	bl	8015770 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014322:	b2db      	uxtb	r3, r3
 8014324:	2b60      	cmp	r3, #96	; 0x60
 8014326:	d110      	bne.n	801434a <process_control_request+0x42>
 8014328:	f240 227f 	movw	r2, #639	; 0x27f
 801432c:	49a3      	ldr	r1, [pc, #652]	; (80145bc <process_control_request+0x2b4>)
 801432e:	48a4      	ldr	r0, [pc, #656]	; (80145c0 <process_control_request+0x2b8>)
 8014330:	f003 fcae 	bl	8017c90 <iprintf>
 8014334:	4ba3      	ldr	r3, [pc, #652]	; (80145c4 <process_control_request+0x2bc>)
 8014336:	61bb      	str	r3, [r7, #24]
 8014338:	69bb      	ldr	r3, [r7, #24]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	f003 0301 	and.w	r3, r3, #1
 8014340:	2b00      	cmp	r3, #0
 8014342:	d000      	beq.n	8014346 <process_control_request+0x3e>
 8014344:	be00      	bkpt	0x0000
 8014346:	2300      	movs	r3, #0
 8014348:	e28e      	b.n	8014868 <process_control_request+0x560>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014352:	b2db      	uxtb	r3, r3
 8014354:	2b40      	cmp	r3, #64	; 0x40
 8014356:	d10f      	bne.n	8014378 <process_control_request+0x70>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8014358:	4b9b      	ldr	r3, [pc, #620]	; (80145c8 <process_control_request+0x2c0>)
 801435a:	2b00      	cmp	r3, #0
 801435c:	d101      	bne.n	8014362 <process_control_request+0x5a>
 801435e:	2300      	movs	r3, #0
 8014360:	e282      	b.n	8014868 <process_control_request+0x560>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8014362:	4899      	ldr	r0, [pc, #612]	; (80145c8 <process_control_request+0x2c0>)
 8014364:	f001 fa04 	bl	8015770 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8014368:	79fb      	ldrb	r3, [r7, #7]
 801436a:	683a      	ldr	r2, [r7, #0]
 801436c:	2100      	movs	r1, #0
 801436e:	4618      	mov	r0, r3
 8014370:	f3af 8000 	nop.w
 8014374:	4603      	mov	r3, r0
 8014376:	e277      	b.n	8014868 <process_control_request+0x560>
  }

#if CFG_TUSB_DEBUG >= 2
  if (TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type && p_request->bRequest <= TUSB_REQ_SYNCH_FRAME)
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014380:	b2db      	uxtb	r3, r3
 8014382:	2b00      	cmp	r3, #0
 8014384:	d114      	bne.n	80143b0 <process_control_request+0xa8>
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	785b      	ldrb	r3, [r3, #1]
 801438a:	2b0c      	cmp	r3, #12
 801438c:	d810      	bhi.n	80143b0 <process_control_request+0xa8>
  {
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	785b      	ldrb	r3, [r3, #1]
 8014392:	461a      	mov	r2, r3
 8014394:	4b8d      	ldr	r3, [pc, #564]	; (80145cc <process_control_request+0x2c4>)
 8014396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801439a:	4619      	mov	r1, r3
 801439c:	488c      	ldr	r0, [pc, #560]	; (80145d0 <process_control_request+0x2c8>)
 801439e:	f003 fc77 	bl	8017c90 <iprintf>
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	785b      	ldrb	r3, [r3, #1]
 80143a6:	2b06      	cmp	r3, #6
 80143a8:	d002      	beq.n	80143b0 <process_control_request+0xa8>
 80143aa:	488a      	ldr	r0, [pc, #552]	; (80145d4 <process_control_request+0x2cc>)
 80143ac:	f003 fd0c 	bl	8017dc8 <puts>
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80143b8:	b2db      	uxtb	r3, r3
 80143ba:	2b02      	cmp	r3, #2
 80143bc:	f000 819a 	beq.w	80146f4 <process_control_request+0x3ec>
 80143c0:	2b02      	cmp	r3, #2
 80143c2:	f300 8245 	bgt.w	8014850 <process_control_request+0x548>
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d003      	beq.n	80143d2 <process_control_request+0xca>
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	f000 8141 	beq.w	8014652 <process_control_request+0x34a>
 80143d0:	e23e      	b.n	8014850 <process_control_request+0x548>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80143da:	b2db      	uxtb	r3, r3
 80143dc:	2b20      	cmp	r3, #32
 80143de:	d123      	bne.n	8014428 <process_control_request+0x120>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	889b      	ldrh	r3, [r3, #4]
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80143e8:	8afb      	ldrh	r3, [r7, #22]
 80143ea:	b2db      	uxtb	r3, r3
 80143ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80143f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143f4:	2b0f      	cmp	r3, #15
 80143f6:	d901      	bls.n	80143fc <process_control_request+0xf4>
 80143f8:	2300      	movs	r3, #0
 80143fa:	e235      	b.n	8014868 <process_control_request+0x560>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80143fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014400:	4a75      	ldr	r2, [pc, #468]	; (80145d8 <process_control_request+0x2d0>)
 8014402:	4413      	add	r3, r2
 8014404:	78db      	ldrb	r3, [r3, #3]
 8014406:	4618      	mov	r0, r3
 8014408:	f7ff fc38 	bl	8013c7c <get_driver>
 801440c:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 801440e:	6a3b      	ldr	r3, [r7, #32]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d101      	bne.n	8014418 <process_control_request+0x110>
 8014414:	2300      	movs	r3, #0
 8014416:	e227      	b.n	8014868 <process_control_request+0x560>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8014418:	79fb      	ldrb	r3, [r7, #7]
 801441a:	683a      	ldr	r2, [r7, #0]
 801441c:	6a39      	ldr	r1, [r7, #32]
 801441e:	4618      	mov	r0, r3
 8014420:	f7ff ff52 	bl	80142c8 <invoke_class_control>
 8014424:	4603      	mov	r3, r0
 8014426:	e21f      	b.n	8014868 <process_control_request+0x560>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014430:	b2db      	uxtb	r3, r3
 8014432:	2b00      	cmp	r3, #0
 8014434:	d00a      	beq.n	801444c <process_control_request+0x144>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8014436:	4b63      	ldr	r3, [pc, #396]	; (80145c4 <process_control_request+0x2bc>)
 8014438:	62bb      	str	r3, [r7, #40]	; 0x28
 801443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	f003 0301 	and.w	r3, r3, #1
 8014442:	2b00      	cmp	r3, #0
 8014444:	d000      	beq.n	8014448 <process_control_request+0x140>
 8014446:	be00      	bkpt	0x0000
        return false;
 8014448:	2300      	movs	r3, #0
 801444a:	e20d      	b.n	8014868 <process_control_request+0x560>
      }

      switch ( p_request->bRequest )
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	785b      	ldrb	r3, [r3, #1]
 8014450:	2b09      	cmp	r3, #9
 8014452:	f200 80f1 	bhi.w	8014638 <process_control_request+0x330>
 8014456:	a201      	add	r2, pc, #4	; (adr r2, 801445c <process_control_request+0x154>)
 8014458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801445c:	08014601 	.word	0x08014601
 8014460:	080145ad 	.word	0x080145ad
 8014464:	08014639 	.word	0x08014639
 8014468:	08014583 	.word	0x08014583
 801446c:	08014639 	.word	0x08014639
 8014470:	08014485 	.word	0x08014485
 8014474:	08014569 	.word	0x08014569
 8014478:	08014639 	.word	0x08014639
 801447c:	080144a9 	.word	0x080144a9
 8014480:	080144c1 	.word	0x080144c1
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8014484:	6838      	ldr	r0, [r7, #0]
 8014486:	f001 f983 	bl	8015790 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	885b      	ldrh	r3, [r3, #2]
 801448e:	b29b      	uxth	r3, r3
 8014490:	b2da      	uxtb	r2, r3
 8014492:	79fb      	ldrb	r3, [r7, #7]
 8014494:	4611      	mov	r1, r2
 8014496:	4618      	mov	r0, r3
 8014498:	f002 f89f 	bl	80165da <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 801449c:	4a4e      	ldr	r2, [pc, #312]	; (80145d8 <process_control_request+0x2d0>)
 801449e:	7813      	ldrb	r3, [r2, #0]
 80144a0:	f043 0302 	orr.w	r3, r3, #2
 80144a4:	7013      	strb	r3, [r2, #0]
        break;
 80144a6:	e0d3      	b.n	8014650 <process_control_request+0x348>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80144a8:	4b4b      	ldr	r3, [pc, #300]	; (80145d8 <process_control_request+0x2d0>)
 80144aa:	785b      	ldrb	r3, [r3, #1]
 80144ac:	b2db      	uxtb	r3, r3
 80144ae:	747b      	strb	r3, [r7, #17]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80144b0:	f107 0211 	add.w	r2, r7, #17
 80144b4:	79f8      	ldrb	r0, [r7, #7]
 80144b6:	2301      	movs	r3, #1
 80144b8:	6839      	ldr	r1, [r7, #0]
 80144ba:	f001 f8cb 	bl	8015654 <tud_control_xfer>
        }
        break;
 80144be:	e0c7      	b.n	8014650 <process_control_request+0x348>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	885b      	ldrh	r3, [r3, #2]
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 80144ca:	4b43      	ldr	r3, [pc, #268]	; (80145d8 <process_control_request+0x2d0>)
 80144cc:	785b      	ldrb	r3, [r3, #1]
 80144ce:	b2db      	uxtb	r3, r3
 80144d0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d03d      	beq.n	8014554 <process_control_request+0x24c>
          {
            if ( _usbd_dev.cfg_num )
 80144d8:	4b3f      	ldr	r3, [pc, #252]	; (80145d8 <process_control_request+0x2d0>)
 80144da:	785b      	ldrb	r3, [r3, #1]
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d016      	beq.n	8014510 <process_control_request+0x208>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);
 80144e2:	4b3d      	ldr	r3, [pc, #244]	; (80145d8 <process_control_request+0x2d0>)
 80144e4:	785b      	ldrb	r3, [r3, #1]
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	4619      	mov	r1, r3
 80144ea:	483c      	ldr	r0, [pc, #240]	; (80145dc <process_control_request+0x2d4>)
 80144ec:	f003 fbd0 	bl	8017c90 <iprintf>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80144f0:	79fb      	ldrb	r3, [r7, #7]
 80144f2:	4618      	mov	r0, r3
 80144f4:	f002 f9fa 	bl	80168ec <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80144f8:	4b37      	ldr	r3, [pc, #220]	; (80145d8 <process_control_request+0x2d0>)
 80144fa:	789b      	ldrb	r3, [r3, #2]
 80144fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 8014500:	79fb      	ldrb	r3, [r7, #7]
 8014502:	4618      	mov	r0, r3
 8014504:	f7ff fce4 	bl	8013ed0 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8014508:	4a33      	ldr	r2, [pc, #204]	; (80145d8 <process_control_request+0x2d0>)
 801450a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801450e:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8014510:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014514:	2b00      	cmp	r3, #0
 8014516:	d01d      	beq.n	8014554 <process_control_request+0x24c>
 8014518:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801451c:	79fb      	ldrb	r3, [r7, #7]
 801451e:	4611      	mov	r1, r2
 8014520:	4618      	mov	r0, r3
 8014522:	f000 f9af 	bl	8014884 <process_set_config>
 8014526:	4603      	mov	r3, r0
 8014528:	f083 0301 	eor.w	r3, r3, #1
 801452c:	b2db      	uxtb	r3, r3
 801452e:	2b00      	cmp	r3, #0
 8014530:	d010      	beq.n	8014554 <process_control_request+0x24c>
 8014532:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014536:	4921      	ldr	r1, [pc, #132]	; (80145bc <process_control_request+0x2b4>)
 8014538:	4821      	ldr	r0, [pc, #132]	; (80145c0 <process_control_request+0x2b8>)
 801453a:	f003 fba9 	bl	8017c90 <iprintf>
 801453e:	4b21      	ldr	r3, [pc, #132]	; (80145c4 <process_control_request+0x2bc>)
 8014540:	633b      	str	r3, [r7, #48]	; 0x30
 8014542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	f003 0301 	and.w	r3, r3, #1
 801454a:	2b00      	cmp	r3, #0
 801454c:	d000      	beq.n	8014550 <process_control_request+0x248>
 801454e:	be00      	bkpt	0x0000
 8014550:	2300      	movs	r3, #0
 8014552:	e189      	b.n	8014868 <process_control_request+0x560>
          }

          _usbd_dev.cfg_num = cfg_num;
 8014554:	4a20      	ldr	r2, [pc, #128]	; (80145d8 <process_control_request+0x2d0>)
 8014556:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801455a:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 801455c:	79fb      	ldrb	r3, [r7, #7]
 801455e:	6839      	ldr	r1, [r7, #0]
 8014560:	4618      	mov	r0, r3
 8014562:	f001 f819 	bl	8015598 <tud_control_status>
        }
        break;
 8014566:	e073      	b.n	8014650 <process_control_request+0x348>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8014568:	79fb      	ldrb	r3, [r7, #7]
 801456a:	6839      	ldr	r1, [r7, #0]
 801456c:	4618      	mov	r0, r3
 801456e:	f000 faaf 	bl	8014ad0 <process_get_descriptor>
 8014572:	4603      	mov	r3, r0
 8014574:	f083 0301 	eor.w	r3, r3, #1
 8014578:	b2db      	uxtb	r3, r3
 801457a:	2b00      	cmp	r3, #0
 801457c:	d067      	beq.n	801464e <process_control_request+0x346>
 801457e:	2300      	movs	r3, #0
 8014580:	e172      	b.n	8014868 <process_control_request+0x560>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	885b      	ldrh	r3, [r3, #2]
 8014586:	b29b      	uxth	r3, r3
 8014588:	2b01      	cmp	r3, #1
 801458a:	d001      	beq.n	8014590 <process_control_request+0x288>
 801458c:	2300      	movs	r3, #0
 801458e:	e16b      	b.n	8014868 <process_control_request+0x560>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");
 8014590:	4813      	ldr	r0, [pc, #76]	; (80145e0 <process_control_request+0x2d8>)
 8014592:	f003 fc19 	bl	8017dc8 <puts>

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8014596:	4a10      	ldr	r2, [pc, #64]	; (80145d8 <process_control_request+0x2d0>)
 8014598:	7813      	ldrb	r3, [r2, #0]
 801459a:	f043 0308 	orr.w	r3, r3, #8
 801459e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80145a0:	79fb      	ldrb	r3, [r7, #7]
 80145a2:	6839      	ldr	r1, [r7, #0]
 80145a4:	4618      	mov	r0, r3
 80145a6:	f000 fff7 	bl	8015598 <tud_control_status>
        break;
 80145aa:	e051      	b.n	8014650 <process_control_request+0x348>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	885b      	ldrh	r3, [r3, #2]
 80145b0:	b29b      	uxth	r3, r3
 80145b2:	2b01      	cmp	r3, #1
 80145b4:	d016      	beq.n	80145e4 <process_control_request+0x2dc>
 80145b6:	2300      	movs	r3, #0
 80145b8:	e156      	b.n	8014868 <process_control_request+0x560>
 80145ba:	bf00      	nop
 80145bc:	0801b4a0 	.word	0x0801b4a0
 80145c0:	0801a218 	.word	0x0801a218
 80145c4:	e000edf0 	.word	0xe000edf0
 80145c8:	00000000 	.word	0x00000000
 80145cc:	0801b448 	.word	0x0801b448
 80145d0:	0801a2e8 	.word	0x0801a2e8
 80145d4:	0801a23c 	.word	0x0801a23c
 80145d8:	20009310 	.word	0x20009310
 80145dc:	0801a2f0 	.word	0x0801a2f0
 80145e0:	0801a328 	.word	0x0801a328

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");
 80145e4:	48a2      	ldr	r0, [pc, #648]	; (8014870 <process_control_request+0x568>)
 80145e6:	f003 fbef 	bl	8017dc8 <puts>

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 80145ea:	4aa2      	ldr	r2, [pc, #648]	; (8014874 <process_control_request+0x56c>)
 80145ec:	7813      	ldrb	r3, [r2, #0]
 80145ee:	f36f 03c3 	bfc	r3, #3, #1
 80145f2:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80145f4:	79fb      	ldrb	r3, [r7, #7]
 80145f6:	6839      	ldr	r1, [r7, #0]
 80145f8:	4618      	mov	r0, r3
 80145fa:	f000 ffcd 	bl	8015598 <tud_control_status>
        break;
 80145fe:	e027      	b.n	8014650 <process_control_request+0x348>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
 8014600:	4b9c      	ldr	r3, [pc, #624]	; (8014874 <process_control_request+0x56c>)
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	095b      	lsrs	r3, r3, #5
 8014606:	b2db      	uxtb	r3, r3
 8014608:	b21b      	sxth	r3, r3
 801460a:	f003 0301 	and.w	r3, r3, #1
 801460e:	b21a      	sxth	r2, r3
 8014610:	4b98      	ldr	r3, [pc, #608]	; (8014874 <process_control_request+0x56c>)
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	089b      	lsrs	r3, r3, #2
 8014616:	b2db      	uxtb	r3, r3
 8014618:	b21b      	sxth	r3, r3
 801461a:	f003 0302 	and.w	r3, r3, #2
 801461e:	b21b      	sxth	r3, r3
 8014620:	4313      	orrs	r3, r2
 8014622:	b21b      	sxth	r3, r3
 8014624:	b29b      	uxth	r3, r3
 8014626:	81fb      	strh	r3, [r7, #14]
          tud_control_xfer(rhport, p_request, &status, 2);
 8014628:	f107 020e 	add.w	r2, r7, #14
 801462c:	79f8      	ldrb	r0, [r7, #7]
 801462e:	2302      	movs	r3, #2
 8014630:	6839      	ldr	r1, [r7, #0]
 8014632:	f001 f80f 	bl	8015654 <tud_control_xfer>
        }
        break;
 8014636:	e00b      	b.n	8014650 <process_control_request+0x348>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8014638:	4b8f      	ldr	r3, [pc, #572]	; (8014878 <process_control_request+0x570>)
 801463a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	f003 0301 	and.w	r3, r3, #1
 8014644:	2b00      	cmp	r3, #0
 8014646:	d000      	beq.n	801464a <process_control_request+0x342>
 8014648:	be00      	bkpt	0x0000
 801464a:	2300      	movs	r3, #0
 801464c:	e10c      	b.n	8014868 <process_control_request+0x560>
        break;
 801464e:	bf00      	nop
      }
    break;
 8014650:	e109      	b.n	8014866 <process_control_request+0x55e>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	889b      	ldrh	r3, [r3, #4]
 8014656:	b29b      	uxth	r3, r3
 8014658:	82bb      	strh	r3, [r7, #20]
 801465a:	8abb      	ldrh	r3, [r7, #20]
 801465c:	b2db      	uxtb	r3, r3
 801465e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8014662:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014666:	2b0f      	cmp	r3, #15
 8014668:	d901      	bls.n	801466e <process_control_request+0x366>
 801466a:	2300      	movs	r3, #0
 801466c:	e0fc      	b.n	8014868 <process_control_request+0x560>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801466e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014672:	4a80      	ldr	r2, [pc, #512]	; (8014874 <process_control_request+0x56c>)
 8014674:	4413      	add	r3, r2
 8014676:	78db      	ldrb	r3, [r3, #3]
 8014678:	4618      	mov	r0, r3
 801467a:	f7ff faff 	bl	8013c7c <get_driver>
 801467e:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 8014680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014682:	2b00      	cmp	r3, #0
 8014684:	d101      	bne.n	801468a <process_control_request+0x382>
 8014686:	2300      	movs	r3, #0
 8014688:	e0ee      	b.n	8014868 <process_control_request+0x560>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 801468a:	79fb      	ldrb	r3, [r7, #7]
 801468c:	683a      	ldr	r2, [r7, #0]
 801468e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff fe19 	bl	80142c8 <invoke_class_control>
 8014696:	4603      	mov	r3, r0
 8014698:	f083 0301 	eor.w	r3, r3, #1
 801469c:	b2db      	uxtb	r3, r3
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d026      	beq.n	80146f0 <process_control_request+0x3e8>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	781b      	ldrb	r3, [r3, #0]
 80146a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80146aa:	b2db      	uxtb	r3, r3
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d001      	beq.n	80146b4 <process_control_request+0x3ac>
 80146b0:	2300      	movs	r3, #0
 80146b2:	e0d9      	b.n	8014868 <process_control_request+0x560>

        switch(p_request->bRequest)
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	785b      	ldrb	r3, [r3, #1]
 80146b8:	3b0a      	subs	r3, #10
 80146ba:	2b01      	cmp	r3, #1
 80146bc:	d816      	bhi.n	80146ec <process_control_request+0x3e4>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80146be:	2000      	movs	r0, #0
 80146c0:	f001 f856 	bl	8015770 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	785b      	ldrb	r3, [r3, #1]
 80146c8:	2b0a      	cmp	r3, #10
 80146ca:	d109      	bne.n	80146e0 <process_control_request+0x3d8>
            {
              uint8_t alternate = 0;
 80146cc:	2300      	movs	r3, #0
 80146ce:	737b      	strb	r3, [r7, #13]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80146d0:	f107 020d 	add.w	r2, r7, #13
 80146d4:	79f8      	ldrb	r0, [r7, #7]
 80146d6:	2301      	movs	r3, #1
 80146d8:	6839      	ldr	r1, [r7, #0]
 80146da:	f000 ffbb 	bl	8015654 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 80146de:	e008      	b.n	80146f2 <process_control_request+0x3ea>
              tud_control_status(rhport, p_request);
 80146e0:	79fb      	ldrb	r3, [r7, #7]
 80146e2:	6839      	ldr	r1, [r7, #0]
 80146e4:	4618      	mov	r0, r3
 80146e6:	f000 ff57 	bl	8015598 <tud_control_status>
          break;
 80146ea:	e002      	b.n	80146f2 <process_control_request+0x3ea>

          default: return false;
 80146ec:	2300      	movs	r3, #0
 80146ee:	e0bb      	b.n	8014868 <process_control_request+0x560>
        }
      }
 80146f0:	bf00      	nop
    }
    break;
 80146f2:	e0b8      	b.n	8014866 <process_control_request+0x55e>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	889b      	ldrh	r3, [r3, #4]
 80146f8:	b29b      	uxth	r3, r3
 80146fa:	827b      	strh	r3, [r7, #18]
 80146fc:	8a7b      	ldrh	r3, [r7, #18]
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8014704:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014708:	4618      	mov	r0, r3
 801470a:	f7ff f9a4 	bl	8013a56 <tu_edpt_number>
 801470e:	4603      	mov	r3, r0
 8014710:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8014714:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014718:	4618      	mov	r0, r3
 801471a:	f7ff f98e 	bl	8013a3a <tu_edpt_dir>
 801471e:	4603      	mov	r3, r0
 8014720:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8014724:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8014728:	2b05      	cmp	r3, #5
 801472a:	d910      	bls.n	801474e <process_control_request+0x446>
 801472c:	f240 3233 	movw	r2, #819	; 0x333
 8014730:	4952      	ldr	r1, [pc, #328]	; (801487c <process_control_request+0x574>)
 8014732:	4853      	ldr	r0, [pc, #332]	; (8014880 <process_control_request+0x578>)
 8014734:	f003 faac 	bl	8017c90 <iprintf>
 8014738:	4b4f      	ldr	r3, [pc, #316]	; (8014878 <process_control_request+0x570>)
 801473a:	643b      	str	r3, [r7, #64]	; 0x40
 801473c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	f003 0301 	and.w	r3, r3, #1
 8014744:	2b00      	cmp	r3, #0
 8014746:	d000      	beq.n	801474a <process_control_request+0x442>
 8014748:	be00      	bkpt	0x0000
 801474a:	2300      	movs	r3, #0
 801474c:	e08c      	b.n	8014868 <process_control_request+0x560>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 801474e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8014752:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8014756:	4947      	ldr	r1, [pc, #284]	; (8014874 <process_control_request+0x56c>)
 8014758:	0052      	lsls	r2, r2, #1
 801475a:	440a      	add	r2, r1
 801475c:	4413      	add	r3, r2
 801475e:	3313      	adds	r3, #19
 8014760:	781b      	ldrb	r3, [r3, #0]
 8014762:	4618      	mov	r0, r3
 8014764:	f7ff fa8a 	bl	8013c7c <get_driver>
 8014768:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014772:	b2db      	uxtb	r3, r3
 8014774:	2b00      	cmp	r3, #0
 8014776:	d00c      	beq.n	8014792 <process_control_request+0x48a>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8014778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801477a:	2b00      	cmp	r3, #0
 801477c:	d101      	bne.n	8014782 <process_control_request+0x47a>
 801477e:	2300      	movs	r3, #0
 8014780:	e072      	b.n	8014868 <process_control_request+0x560>
        return invoke_class_control(rhport, driver, p_request);
 8014782:	79fb      	ldrb	r3, [r7, #7]
 8014784:	683a      	ldr	r2, [r7, #0]
 8014786:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014788:	4618      	mov	r0, r3
 801478a:	f7ff fd9d 	bl	80142c8 <invoke_class_control>
 801478e:	4603      	mov	r3, r0
 8014790:	e06a      	b.n	8014868 <process_control_request+0x560>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	785b      	ldrb	r3, [r3, #1]
 8014796:	2b03      	cmp	r3, #3
 8014798:	d018      	beq.n	80147cc <process_control_request+0x4c4>
 801479a:	2b03      	cmp	r3, #3
 801479c:	dc4b      	bgt.n	8014836 <process_control_request+0x52e>
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d002      	beq.n	80147a8 <process_control_request+0x4a0>
 80147a2:	2b01      	cmp	r3, #1
 80147a4:	d012      	beq.n	80147cc <process_control_request+0x4c4>
 80147a6:	e046      	b.n	8014836 <process_control_request+0x52e>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80147a8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80147ac:	79fb      	ldrb	r3, [r7, #7]
 80147ae:	4611      	mov	r1, r2
 80147b0:	4618      	mov	r0, r3
 80147b2:	f000 fea1 	bl	80154f8 <usbd_edpt_stalled>
 80147b6:	4603      	mov	r3, r0
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	817b      	strh	r3, [r7, #10]
            tud_control_xfer(rhport, p_request, &status, 2);
 80147bc:	f107 020a 	add.w	r2, r7, #10
 80147c0:	79f8      	ldrb	r0, [r7, #7]
 80147c2:	2302      	movs	r3, #2
 80147c4:	6839      	ldr	r1, [r7, #0]
 80147c6:	f000 ff45 	bl	8015654 <tud_control_xfer>
          }
          break;
 80147ca:	e040      	b.n	801484e <process_control_request+0x546>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	885b      	ldrh	r3, [r3, #2]
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d112      	bne.n	80147fc <process_control_request+0x4f4>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	785b      	ldrb	r3, [r3, #1]
 80147da:	2b01      	cmp	r3, #1
 80147dc:	d107      	bne.n	80147ee <process_control_request+0x4e6>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 80147de:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80147e2:	79fb      	ldrb	r3, [r7, #7]
 80147e4:	4611      	mov	r1, r2
 80147e6:	4618      	mov	r0, r3
 80147e8:	f000 fe3a 	bl	8015460 <usbd_edpt_clear_stall>
 80147ec:	e006      	b.n	80147fc <process_control_request+0x4f4>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 80147ee:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80147f2:	79fb      	ldrb	r3, [r7, #7]
 80147f4:	4611      	mov	r1, r2
 80147f6:	4618      	mov	r0, r3
 80147f8:	f000 fde2 	bl	80153c0 <usbd_edpt_stall>
              }
            }

            if (driver)
 80147fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d024      	beq.n	801484c <process_control_request+0x544>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8014802:	79fb      	ldrb	r3, [r7, #7]
 8014804:	683a      	ldr	r2, [r7, #0]
 8014806:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014808:	4618      	mov	r0, r3
 801480a:	f7ff fd5d 	bl	80142c8 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 801480e:	2000      	movs	r0, #0
 8014810:	f000 ffae 	bl	8015770 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8014814:	4b17      	ldr	r3, [pc, #92]	; (8014874 <process_control_request+0x56c>)
 8014816:	f893 3020 	ldrb.w	r3, [r3, #32]
 801481a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801481e:	b2db      	uxtb	r3, r3
 8014820:	f083 0301 	eor.w	r3, r3, #1
 8014824:	b2db      	uxtb	r3, r3
 8014826:	2b00      	cmp	r3, #0
 8014828:	d010      	beq.n	801484c <process_control_request+0x544>
 801482a:	79fb      	ldrb	r3, [r7, #7]
 801482c:	6839      	ldr	r1, [r7, #0]
 801482e:	4618      	mov	r0, r3
 8014830:	f000 feb2 	bl	8015598 <tud_control_status>
            }
          }
          break;
 8014834:	e00a      	b.n	801484c <process_control_request+0x544>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8014836:	4b10      	ldr	r3, [pc, #64]	; (8014878 <process_control_request+0x570>)
 8014838:	647b      	str	r3, [r7, #68]	; 0x44
 801483a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	f003 0301 	and.w	r3, r3, #1
 8014842:	2b00      	cmp	r3, #0
 8014844:	d000      	beq.n	8014848 <process_control_request+0x540>
 8014846:	be00      	bkpt	0x0000
 8014848:	2300      	movs	r3, #0
 801484a:	e00d      	b.n	8014868 <process_control_request+0x560>
          break;
 801484c:	bf00      	nop
        }
      }
    }
    break;
 801484e:	e00a      	b.n	8014866 <process_control_request+0x55e>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8014850:	4b09      	ldr	r3, [pc, #36]	; (8014878 <process_control_request+0x570>)
 8014852:	61fb      	str	r3, [r7, #28]
 8014854:	69fb      	ldr	r3, [r7, #28]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	f003 0301 	and.w	r3, r3, #1
 801485c:	2b00      	cmp	r3, #0
 801485e:	d000      	beq.n	8014862 <process_control_request+0x55a>
 8014860:	be00      	bkpt	0x0000
 8014862:	2300      	movs	r3, #0
 8014864:	e000      	b.n	8014868 <process_control_request+0x560>
  }

  return true;
 8014866:	2301      	movs	r3, #1
}
 8014868:	4618      	mov	r0, r3
 801486a:	3750      	adds	r7, #80	; 0x50
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	0801a344 	.word	0x0801a344
 8014874:	20009310 	.word	0x20009310
 8014878:	e000edf0 	.word	0xe000edf0
 801487c:	0801b4a0 	.word	0x0801b4a0
 8014880:	0801a218 	.word	0x0801a218

08014884 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b090      	sub	sp, #64	; 0x40
 8014888:	af00      	add	r7, sp, #0
 801488a:	4603      	mov	r3, r0
 801488c:	460a      	mov	r2, r1
 801488e:	71fb      	strb	r3, [r7, #7]
 8014890:	4613      	mov	r3, r2
 8014892:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8014894:	79bb      	ldrb	r3, [r7, #6]
 8014896:	3b01      	subs	r3, #1
 8014898:	b2db      	uxtb	r3, r3
 801489a:	4618      	mov	r0, r3
 801489c:	f7fc fa68 	bl	8010d70 <tud_descriptor_configuration_cb>
 80148a0:	6378      	str	r0, [r7, #52]	; 0x34
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80148a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d003      	beq.n	80148b0 <process_set_config+0x2c>
 80148a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148aa:	785b      	ldrb	r3, [r3, #1]
 80148ac:	2b02      	cmp	r3, #2
 80148ae:	d010      	beq.n	80148d2 <process_set_config+0x4e>
 80148b0:	f240 327b 	movw	r2, #891	; 0x37b
 80148b4:	497d      	ldr	r1, [pc, #500]	; (8014aac <process_set_config+0x228>)
 80148b6:	487e      	ldr	r0, [pc, #504]	; (8014ab0 <process_set_config+0x22c>)
 80148b8:	f003 f9ea 	bl	8017c90 <iprintf>
 80148bc:	4b7d      	ldr	r3, [pc, #500]	; (8014ab4 <process_set_config+0x230>)
 80148be:	60fb      	str	r3, [r7, #12]
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	f003 0301 	and.w	r3, r3, #1
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d000      	beq.n	80148ce <process_set_config+0x4a>
 80148cc:	be00      	bkpt	0x0000
 80148ce:	2300      	movs	r3, #0
 80148d0:	e0e8      	b.n	8014aa4 <process_set_config+0x220>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 80148d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148d4:	79db      	ldrb	r3, [r3, #7]
 80148d6:	115b      	asrs	r3, r3, #5
 80148d8:	f003 0301 	and.w	r3, r3, #1
 80148dc:	b2d9      	uxtb	r1, r3
 80148de:	4a76      	ldr	r2, [pc, #472]	; (8014ab8 <process_set_config+0x234>)
 80148e0:	7813      	ldrb	r3, [r2, #0]
 80148e2:	f361 1304 	bfi	r3, r1, #4, #1
 80148e6:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1 : 0;
 80148e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148ea:	79db      	ldrb	r3, [r3, #7]
 80148ec:	119b      	asrs	r3, r3, #6
 80148ee:	f003 0301 	and.w	r3, r3, #1
 80148f2:	b2d9      	uxtb	r1, r3
 80148f4:	4a70      	ldr	r2, [pc, #448]	; (8014ab8 <process_set_config+0x234>)
 80148f6:	7813      	ldrb	r3, [r2, #0]
 80148f8:	f361 1345 	bfi	r3, r1, #5, #1
 80148fc:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80148fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014900:	3309      	adds	r3, #9
 8014902:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8014904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014906:	885b      	ldrh	r3, [r3, #2]
 8014908:	b29b      	uxth	r3, r3
 801490a:	461a      	mov	r2, r3
 801490c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801490e:	4413      	add	r3, r2
 8014910:	633b      	str	r3, [r7, #48]	; 0x30

  while( p_desc < desc_end )
 8014912:	e0bc      	b.n	8014a8e <process_set_config+0x20a>
  {
    uint8_t assoc_itf_count = 1;
 8014914:	2301      	movs	r3, #1
 8014916:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 801491a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801491c:	f7ff f8bb 	bl	8013a96 <tu_desc_type>
 8014920:	4603      	mov	r3, r0
 8014922:	2b0b      	cmp	r3, #11
 8014924:	d109      	bne.n	801493a <process_set_config+0xb6>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8014926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014928:	62fb      	str	r3, [r7, #44]	; 0x2c
      assoc_itf_count = desc_iad->bInterfaceCount;
 801492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492c:	78db      	ldrb	r3, [r3, #3]
 801492e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

      p_desc = tu_desc_next(p_desc); // next to Interface
 8014932:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014934:	f7ff f89e 	bl	8013a74 <tu_desc_next>
 8014938:	63f8      	str	r0, [r7, #60]	; 0x3c
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 801493a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801493c:	f7ff f8ab 	bl	8013a96 <tu_desc_type>
 8014940:	4603      	mov	r3, r0
 8014942:	2b04      	cmp	r3, #4
 8014944:	d010      	beq.n	8014968 <process_set_config+0xe4>
 8014946:	f240 3296 	movw	r2, #918	; 0x396
 801494a:	4958      	ldr	r1, [pc, #352]	; (8014aac <process_set_config+0x228>)
 801494c:	4858      	ldr	r0, [pc, #352]	; (8014ab0 <process_set_config+0x22c>)
 801494e:	f003 f99f 	bl	8017c90 <iprintf>
 8014952:	4b58      	ldr	r3, [pc, #352]	; (8014ab4 <process_set_config+0x230>)
 8014954:	613b      	str	r3, [r7, #16]
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	f003 0301 	and.w	r3, r3, #1
 801495e:	2b00      	cmp	r3, #0
 8014960:	d000      	beq.n	8014964 <process_set_config+0xe0>
 8014962:	be00      	bkpt	0x0000
 8014964:	2300      	movs	r3, #0
 8014966:	e09d      	b.n	8014aa4 <process_set_config+0x220>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8014968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801496a:	62bb      	str	r3, [r7, #40]	; 0x28

    // Find driver for this interface
    uint16_t const remaining_len = desc_end-p_desc;
 801496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014970:	1ad3      	subs	r3, r2, r3
 8014972:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8014974:	2300      	movs	r3, #0
 8014976:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 801497a:	e069      	b.n	8014a50 <process_set_config+0x1cc>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 801497c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8014980:	4618      	mov	r0, r3
 8014982:	f7ff f97b 	bl	8013c7c <get_driver>
 8014986:	6238      	str	r0, [r7, #32]
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8014988:	6a3b      	ldr	r3, [r7, #32]
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801498e:	79f8      	ldrb	r0, [r7, #7]
 8014990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014992:	4798      	blx	r3
 8014994:	4603      	mov	r3, r0
 8014996:	83fb      	strh	r3, [r7, #30]

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8014998:	8bfb      	ldrh	r3, [r7, #30]
 801499a:	2b08      	cmp	r3, #8
 801499c:	d953      	bls.n	8014a46 <process_set_config+0x1c2>
 801499e:	8bfa      	ldrh	r2, [r7, #30]
 80149a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d84f      	bhi.n	8014a46 <process_set_config+0x1c2>
      {
        // Open successfully
        TU_LOG2("  %s opened\r\n", driver->name);
 80149a6:	6a3b      	ldr	r3, [r7, #32]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	4619      	mov	r1, r3
 80149ac:	4843      	ldr	r0, [pc, #268]	; (8014abc <process_set_config+0x238>)
 80149ae:	f003 f96f 	bl	8017c90 <iprintf>

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80149b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d107      	bne.n	80149ca <process_set_config+0x146>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80149ba:	6a3b      	ldr	r3, [r7, #32]
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	4a40      	ldr	r2, [pc, #256]	; (8014ac0 <process_set_config+0x23c>)
 80149c0:	4293      	cmp	r3, r2
 80149c2:	d102      	bne.n	80149ca <process_set_config+0x146>
 80149c4:	2302      	movs	r3, #2
 80149c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80149ca:	2300      	movs	r3, #0
 80149cc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80149d0:	e027      	b.n	8014a22 <process_set_config+0x19e>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80149d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d4:	789a      	ldrb	r2, [r3, #2]
 80149d6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80149da:	4413      	add	r3, r2
 80149dc:	777b      	strb	r3, [r7, #29]

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80149de:	7f7b      	ldrb	r3, [r7, #29]
 80149e0:	4a35      	ldr	r2, [pc, #212]	; (8014ab8 <process_set_config+0x234>)
 80149e2:	4413      	add	r3, r2
 80149e4:	78db      	ldrb	r3, [r3, #3]
 80149e6:	2bff      	cmp	r3, #255	; 0xff
 80149e8:	d010      	beq.n	8014a0c <process_set_config+0x188>
 80149ea:	f240 32bd 	movw	r2, #957	; 0x3bd
 80149ee:	492f      	ldr	r1, [pc, #188]	; (8014aac <process_set_config+0x228>)
 80149f0:	482f      	ldr	r0, [pc, #188]	; (8014ab0 <process_set_config+0x22c>)
 80149f2:	f003 f94d 	bl	8017c90 <iprintf>
 80149f6:	4b2f      	ldr	r3, [pc, #188]	; (8014ab4 <process_set_config+0x230>)
 80149f8:	61bb      	str	r3, [r7, #24]
 80149fa:	69bb      	ldr	r3, [r7, #24]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	f003 0301 	and.w	r3, r3, #1
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d000      	beq.n	8014a08 <process_set_config+0x184>
 8014a06:	be00      	bkpt	0x0000
 8014a08:	2300      	movs	r3, #0
 8014a0a:	e04b      	b.n	8014aa4 <process_set_config+0x220>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8014a0c:	7f7b      	ldrb	r3, [r7, #29]
 8014a0e:	4a2a      	ldr	r2, [pc, #168]	; (8014ab8 <process_set_config+0x234>)
 8014a10:	4413      	add	r3, r2
 8014a12:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8014a16:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8014a18:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8014a22:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8014a26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d3d1      	bcc.n	80149d2 <process_set_config+0x14e>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8014a2e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8014a32:	8bfa      	ldrh	r2, [r7, #30]
 8014a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014a36:	4823      	ldr	r0, [pc, #140]	; (8014ac4 <process_set_config+0x240>)
 8014a38:	f002 fe10 	bl	801765c <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8014a3c:	8bfb      	ldrh	r3, [r7, #30]
 8014a3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a40:	4413      	add	r3, r2
 8014a42:	63fb      	str	r3, [r7, #60]	; 0x3c

        break; // exit driver find loop
 8014a44:	e00b      	b.n	8014a5e <process_set_config+0x1da>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8014a46:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8014a50:	4b1d      	ldr	r3, [pc, #116]	; (8014ac8 <process_set_config+0x244>)
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	1c5a      	adds	r2, r3, #1
 8014a56:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	da8e      	bge.n	801497c <process_set_config+0xf8>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8014a5e:	4b1a      	ldr	r3, [pc, #104]	; (8014ac8 <process_set_config+0x244>)
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	1c5a      	adds	r2, r3, #1
 8014a64:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	da10      	bge.n	8014a8e <process_set_config+0x20a>
 8014a6c:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8014a70:	490e      	ldr	r1, [pc, #56]	; (8014aac <process_set_config+0x228>)
 8014a72:	480f      	ldr	r0, [pc, #60]	; (8014ab0 <process_set_config+0x22c>)
 8014a74:	f003 f90c 	bl	8017c90 <iprintf>
 8014a78:	4b0e      	ldr	r3, [pc, #56]	; (8014ab4 <process_set_config+0x230>)
 8014a7a:	617b      	str	r3, [r7, #20]
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	f003 0301 	and.w	r3, r3, #1
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d000      	beq.n	8014a8a <process_set_config+0x206>
 8014a88:	be00      	bkpt	0x0000
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	e00a      	b.n	8014aa4 <process_set_config+0x220>
  while( p_desc < desc_end )
 8014a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a92:	429a      	cmp	r2, r3
 8014a94:	f4ff af3e 	bcc.w	8014914 <process_set_config+0x90>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 8014a98:	4b0c      	ldr	r3, [pc, #48]	; (8014acc <process_set_config+0x248>)
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d001      	beq.n	8014aa2 <process_set_config+0x21e>
 8014a9e:	f3af 8000 	nop.w

  return true;
 8014aa2:	2301      	movs	r3, #1
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3740      	adds	r7, #64	; 0x40
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	0801b4b8 	.word	0x0801b4b8
 8014ab0:	0801a218 	.word	0x0801a218
 8014ab4:	e000edf0 	.word	0xe000edf0
 8014ab8:	20009310 	.word	0x20009310
 8014abc:	0801a360 	.word	0x0801a360
 8014ac0:	08011601 	.word	0x08011601
 8014ac4:	20009323 	.word	0x20009323
 8014ac8:	20009340 	.word	0x20009340
 8014acc:	00000000 	.word	0x00000000

08014ad0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b092      	sub	sp, #72	; 0x48
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	6039      	str	r1, [r7, #0]
 8014ada:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	885b      	ldrh	r3, [r3, #2]
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8014ae4:	8bbb      	ldrh	r3, [r7, #28]
 8014ae6:	0a1b      	lsrs	r3, r3, #8
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	b2db      	uxtb	r3, r3
 8014aec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	885b      	ldrh	r3, [r3, #2]
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8014af8:	8bfb      	ldrh	r3, [r7, #30]
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

  switch(desc_type)
 8014b00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014b04:	3b01      	subs	r3, #1
 8014b06:	2b0e      	cmp	r3, #14
 8014b08:	f200 80de 	bhi.w	8014cc8 <process_get_descriptor+0x1f8>
 8014b0c:	a201      	add	r2, pc, #4	; (adr r2, 8014b14 <process_get_descriptor+0x44>)
 8014b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b12:	bf00      	nop
 8014b14:	08014b51 	.word	0x08014b51
 8014b18:	08014bc9 	.word	0x08014bc9
 8014b1c:	08014c4f 	.word	0x08014c4f
 8014b20:	08014cc9 	.word	0x08014cc9
 8014b24:	08014cc9 	.word	0x08014cc9
 8014b28:	08014c91 	.word	0x08014c91
 8014b2c:	08014bc9 	.word	0x08014bc9
 8014b30:	08014cc9 	.word	0x08014cc9
 8014b34:	08014cc9 	.word	0x08014cc9
 8014b38:	08014cc9 	.word	0x08014cc9
 8014b3c:	08014cc9 	.word	0x08014cc9
 8014b40:	08014cc9 	.word	0x08014cc9
 8014b44:	08014cc9 	.word	0x08014cc9
 8014b48:	08014cc9 	.word	0x08014cc9
 8014b4c:	08014b6d 	.word	0x08014b6d
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG2(" Device\r\n");
 8014b50:	4860      	ldr	r0, [pc, #384]	; (8014cd4 <process_get_descriptor+0x204>)
 8014b52:	f003 f939 	bl	8017dc8 <puts>

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8014b56:	f7fc f901 	bl	8010d5c <tud_descriptor_device_cb>
 8014b5a:	6238      	str	r0, [r7, #32]
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8014b5c:	79f8      	ldrb	r0, [r7, #7]
 8014b5e:	2312      	movs	r3, #18
 8014b60:	6a3a      	ldr	r2, [r7, #32]
 8014b62:	6839      	ldr	r1, [r7, #0]
 8014b64:	f000 fd76 	bl	8015654 <tud_control_xfer>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	e0ae      	b.n	8014cca <process_get_descriptor+0x1fa>
    }
    // break; // unreachable

    case TUSB_DESC_BOS:
    {
      TU_LOG2(" BOS\r\n");
 8014b6c:	485a      	ldr	r0, [pc, #360]	; (8014cd8 <process_get_descriptor+0x208>)
 8014b6e:	f003 f92b 	bl	8017dc8 <puts>

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8014b72:	4b5a      	ldr	r3, [pc, #360]	; (8014cdc <process_get_descriptor+0x20c>)
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d101      	bne.n	8014b7c <process_get_descriptor+0xac>
 8014b78:	2300      	movs	r3, #0
 8014b7a:	e0a6      	b.n	8014cca <process_get_descriptor+0x1fa>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8014b7c:	f3af 8000 	nop.w
 8014b80:	4603      	mov	r3, r0
 8014b82:	63fb      	str	r3, [r7, #60]	; 0x3c
      TU_ASSERT(desc_bos);
 8014b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d110      	bne.n	8014bac <process_get_descriptor+0xdc>
 8014b8a:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8014b8e:	4954      	ldr	r1, [pc, #336]	; (8014ce0 <process_get_descriptor+0x210>)
 8014b90:	4854      	ldr	r0, [pc, #336]	; (8014ce4 <process_get_descriptor+0x214>)
 8014b92:	f003 f87d 	bl	8017c90 <iprintf>
 8014b96:	4b54      	ldr	r3, [pc, #336]	; (8014ce8 <process_get_descriptor+0x218>)
 8014b98:	637b      	str	r3, [r7, #52]	; 0x34
 8014b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	f003 0301 	and.w	r3, r3, #1
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d000      	beq.n	8014ba8 <process_get_descriptor+0xd8>
 8014ba6:	be00      	bkpt	0x0000
 8014ba8:	2300      	movs	r3, #0
 8014baa:	e08e      	b.n	8014cca <process_get_descriptor+0x1fa>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8014bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bae:	3302      	adds	r3, #2
 8014bb0:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	877b      	strh	r3, [r7, #58]	; 0x3a

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8014bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014bba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014bbc:	79f8      	ldrb	r0, [r7, #7]
 8014bbe:	6839      	ldr	r1, [r7, #0]
 8014bc0:	f000 fd48 	bl	8015654 <tud_control_xfer>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	e080      	b.n	8014cca <process_get_descriptor+0x1fa>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8014bc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d10d      	bne.n	8014bec <process_get_descriptor+0x11c>
      {
        TU_LOG2(" Configuration[%u]\r\n", desc_index);
 8014bd0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	4845      	ldr	r0, [pc, #276]	; (8014cec <process_get_descriptor+0x21c>)
 8014bd8:	f003 f85a 	bl	8017c90 <iprintf>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8014bdc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7fc f8c5 	bl	8010d70 <tud_descriptor_configuration_cb>
 8014be6:	4603      	mov	r3, r0
 8014be8:	647b      	str	r3, [r7, #68]	; 0x44
 8014bea:	e00e      	b.n	8014c0a <process_get_descriptor+0x13a>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG2(" Other Speed Configuration\r\n");
 8014bec:	4840      	ldr	r0, [pc, #256]	; (8014cf0 <process_get_descriptor+0x220>)
 8014bee:	f003 f8eb 	bl	8017dc8 <puts>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8014bf2:	4b40      	ldr	r3, [pc, #256]	; (8014cf4 <process_get_descriptor+0x224>)
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d101      	bne.n	8014bfc <process_get_descriptor+0x12c>
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	e066      	b.n	8014cca <process_get_descriptor+0x1fa>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8014bfc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8014c00:	4618      	mov	r0, r3
 8014c02:	f3af 8000 	nop.w
 8014c06:	4603      	mov	r3, r0
 8014c08:	647b      	str	r3, [r7, #68]	; 0x44
      }

      TU_ASSERT(desc_config);
 8014c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d110      	bne.n	8014c32 <process_get_descriptor+0x162>
 8014c10:	f240 4217 	movw	r2, #1047	; 0x417
 8014c14:	4932      	ldr	r1, [pc, #200]	; (8014ce0 <process_get_descriptor+0x210>)
 8014c16:	4833      	ldr	r0, [pc, #204]	; (8014ce4 <process_get_descriptor+0x214>)
 8014c18:	f003 f83a 	bl	8017c90 <iprintf>
 8014c1c:	4b32      	ldr	r3, [pc, #200]	; (8014ce8 <process_get_descriptor+0x218>)
 8014c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8014c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	f003 0301 	and.w	r3, r3, #1
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d000      	beq.n	8014c2e <process_get_descriptor+0x15e>
 8014c2c:	be00      	bkpt	0x0000
 8014c2e:	2300      	movs	r3, #0
 8014c30:	e04b      	b.n	8014cca <process_get_descriptor+0x1fa>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8014c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c34:	3302      	adds	r3, #2
 8014c36:	617b      	str	r3, [r7, #20]
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	881b      	ldrh	r3, [r3, #0]
 8014c3c:	857b      	strh	r3, [r7, #42]	; 0x2a

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8014c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014c42:	79f8      	ldrb	r0, [r7, #7]
 8014c44:	6839      	ldr	r1, [r7, #0]
 8014c46:	f000 fd05 	bl	8015654 <tud_control_xfer>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	e03d      	b.n	8014cca <process_get_descriptor+0x1fa>
    }
    // break; // unreachable

    case TUSB_DESC_STRING:
    {
      TU_LOG2(" String[%u]\r\n", desc_index);
 8014c4e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8014c52:	4619      	mov	r1, r3
 8014c54:	4828      	ldr	r0, [pc, #160]	; (8014cf8 <process_get_descriptor+0x228>)
 8014c56:	f003 f81b 	bl	8017c90 <iprintf>

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	889b      	ldrh	r3, [r3, #4]
 8014c5e:	b29a      	uxth	r2, r3
 8014c60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8014c64:	4611      	mov	r1, r2
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7fc f890 	bl	8010d8c <tud_descriptor_string_cb>
 8014c6c:	62f8      	str	r0, [r7, #44]	; 0x2c
      TU_VERIFY(desc_str);
 8014c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d101      	bne.n	8014c78 <process_get_descriptor+0x1a8>
 8014c74:	2300      	movs	r3, #0
 8014c76:	e028      	b.n	8014cca <process_get_descriptor+0x1fa>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8014c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c7a:	f7fe ff19 	bl	8013ab0 <tu_desc_len>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	79f8      	ldrb	r0, [r7, #7]
 8014c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c86:	6839      	ldr	r1, [r7, #0]
 8014c88:	f000 fce4 	bl	8015654 <tud_control_xfer>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	e01c      	b.n	8014cca <process_get_descriptor+0x1fa>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG2(" Device Qualifier\r\n");
 8014c90:	481a      	ldr	r0, [pc, #104]	; (8014cfc <process_get_descriptor+0x22c>)
 8014c92:	f003 f899 	bl	8017dc8 <puts>

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8014c96:	4b1a      	ldr	r3, [pc, #104]	; (8014d00 <process_get_descriptor+0x230>)
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d101      	bne.n	8014ca0 <process_get_descriptor+0x1d0>
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	e014      	b.n	8014cca <process_get_descriptor+0x1fa>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8014ca0:	f3af 8000 	nop.w
 8014ca4:	6338      	str	r0, [r7, #48]	; 0x30
      TU_VERIFY(desc_qualifier);
 8014ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d101      	bne.n	8014cb0 <process_get_descriptor+0x1e0>
 8014cac:	2300      	movs	r3, #0
 8014cae:	e00c      	b.n	8014cca <process_get_descriptor+0x1fa>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8014cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cb2:	f7fe fefd 	bl	8013ab0 <tu_desc_len>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	79f8      	ldrb	r0, [r7, #7]
 8014cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cbe:	6839      	ldr	r1, [r7, #0]
 8014cc0:	f000 fcc8 	bl	8015654 <tud_control_xfer>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	e000      	b.n	8014cca <process_get_descriptor+0x1fa>
    }
    // break; // unreachable

    default: return false;
 8014cc8:	2300      	movs	r3, #0
  }
}
 8014cca:	4618      	mov	r0, r3
 8014ccc:	3748      	adds	r7, #72	; 0x48
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop
 8014cd4:	0801a370 	.word	0x0801a370
 8014cd8:	0801a37c 	.word	0x0801a37c
 8014cdc:	00000000 	.word	0x00000000
 8014ce0:	0801b4cc 	.word	0x0801b4cc
 8014ce4:	0801a218 	.word	0x0801a218
 8014ce8:	e000edf0 	.word	0xe000edf0
 8014cec:	0801a384 	.word	0x0801a384
 8014cf0:	0801a39c 	.word	0x0801a39c
 8014cf4:	00000000 	.word	0x00000000
 8014cf8:	0801a3b8 	.word	0x0801a3b8
 8014cfc:	0801a3c8 	.word	0x0801a3c8
 8014d00:	00000000 	.word	0x00000000

08014d04 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	460b      	mov	r3, r1
 8014d0e:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	785b      	ldrb	r3, [r3, #1]
 8014d14:	3b02      	subs	r3, #2
 8014d16:	2b03      	cmp	r3, #3
 8014d18:	d86c      	bhi.n	8014df4 <dcd_event_handler+0xf0>
 8014d1a:	a201      	add	r2, pc, #4	; (adr r2, 8014d20 <dcd_event_handler+0x1c>)
 8014d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d20:	08014d31 	.word	0x08014d31
 8014d24:	08014db5 	.word	0x08014db5
 8014d28:	08014d65 	.word	0x08014d65
 8014d2c:	08014d8d 	.word	0x08014d8d
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8014d30:	4a39      	ldr	r2, [pc, #228]	; (8014e18 <dcd_event_handler+0x114>)
 8014d32:	7813      	ldrb	r3, [r2, #0]
 8014d34:	f36f 0300 	bfc	r3, #0, #1
 8014d38:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8014d3a:	4a37      	ldr	r2, [pc, #220]	; (8014e18 <dcd_event_handler+0x114>)
 8014d3c:	7813      	ldrb	r3, [r2, #0]
 8014d3e:	f36f 0341 	bfc	r3, #1, #1
 8014d42:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8014d44:	4b34      	ldr	r3, [pc, #208]	; (8014e18 <dcd_event_handler+0x114>)
 8014d46:	2200      	movs	r2, #0
 8014d48:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 8014d4a:	4a33      	ldr	r2, [pc, #204]	; (8014e18 <dcd_event_handler+0x114>)
 8014d4c:	7813      	ldrb	r3, [r2, #0]
 8014d4e:	f36f 0382 	bfc	r3, #2, #1
 8014d52:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8014d54:	4b31      	ldr	r3, [pc, #196]	; (8014e1c <dcd_event_handler+0x118>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	78fa      	ldrb	r2, [r7, #3]
 8014d5a:	6879      	ldr	r1, [r7, #4]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fe ff53 	bl	8013c08 <osal_queue_send>
    break;
 8014d62:	e054      	b.n	8014e0e <dcd_event_handler+0x10a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8014d64:	4b2c      	ldr	r3, [pc, #176]	; (8014e18 <dcd_event_handler+0x114>)
 8014d66:	781b      	ldrb	r3, [r3, #0]
 8014d68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014d6c:	b2db      	uxtb	r3, r3
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d048      	beq.n	8014e04 <dcd_event_handler+0x100>
      {
        _usbd_dev.suspended = 1;
 8014d72:	4a29      	ldr	r2, [pc, #164]	; (8014e18 <dcd_event_handler+0x114>)
 8014d74:	7813      	ldrb	r3, [r2, #0]
 8014d76:	f043 0304 	orr.w	r3, r3, #4
 8014d7a:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8014d7c:	4b27      	ldr	r3, [pc, #156]	; (8014e1c <dcd_event_handler+0x118>)
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	78fa      	ldrb	r2, [r7, #3]
 8014d82:	6879      	ldr	r1, [r7, #4]
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7fe ff3f 	bl	8013c08 <osal_queue_send>
      }
    break;
 8014d8a:	e03b      	b.n	8014e04 <dcd_event_handler+0x100>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 8014d8c:	4b22      	ldr	r3, [pc, #136]	; (8014e18 <dcd_event_handler+0x114>)
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d036      	beq.n	8014e08 <dcd_event_handler+0x104>
      {
        _usbd_dev.suspended = 0;
 8014d9a:	4a1f      	ldr	r2, [pc, #124]	; (8014e18 <dcd_event_handler+0x114>)
 8014d9c:	7813      	ldrb	r3, [r2, #0]
 8014d9e:	f36f 0382 	bfc	r3, #2, #1
 8014da2:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8014da4:	4b1d      	ldr	r3, [pc, #116]	; (8014e1c <dcd_event_handler+0x118>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	78fa      	ldrb	r2, [r7, #3]
 8014daa:	6879      	ldr	r1, [r7, #4]
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7fe ff2b 	bl	8013c08 <osal_queue_send>
      }
    break;
 8014db2:	e029      	b.n	8014e08 <dcd_event_handler+0x104>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 8014db4:	4b18      	ldr	r3, [pc, #96]	; (8014e18 <dcd_event_handler+0x114>)
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d024      	beq.n	8014e0c <dcd_event_handler+0x108>
      {
        _usbd_dev.suspended = 0;
 8014dc2:	4a15      	ldr	r2, [pc, #84]	; (8014e18 <dcd_event_handler+0x114>)
 8014dc4:	7813      	ldrb	r3, [r2, #0]
 8014dc6:	f36f 0382 	bfc	r3, #2, #1
 8014dca:	7013      	strb	r3, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8014dcc:	f107 030c 	add.w	r3, r7, #12
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	601a      	str	r2, [r3, #0]
 8014dd4:	605a      	str	r2, [r3, #4]
 8014dd6:	609a      	str	r2, [r3, #8]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	781b      	ldrb	r3, [r3, #0]
 8014ddc:	733b      	strb	r3, [r7, #12]
 8014dde:	2305      	movs	r3, #5
 8014de0:	737b      	strb	r3, [r7, #13]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8014de2:	4b0e      	ldr	r3, [pc, #56]	; (8014e1c <dcd_event_handler+0x118>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	78fa      	ldrb	r2, [r7, #3]
 8014de8:	f107 010c 	add.w	r1, r7, #12
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7fe ff0b 	bl	8013c08 <osal_queue_send>
      }
    break;
 8014df2:	e00b      	b.n	8014e0c <dcd_event_handler+0x108>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8014df4:	4b09      	ldr	r3, [pc, #36]	; (8014e1c <dcd_event_handler+0x118>)
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	78fa      	ldrb	r2, [r7, #3]
 8014dfa:	6879      	ldr	r1, [r7, #4]
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7fe ff03 	bl	8013c08 <osal_queue_send>
    break;
 8014e02:	e004      	b.n	8014e0e <dcd_event_handler+0x10a>
    break;
 8014e04:	bf00      	nop
 8014e06:	e002      	b.n	8014e0e <dcd_event_handler+0x10a>
    break;
 8014e08:	bf00      	nop
 8014e0a:	e000      	b.n	8014e0e <dcd_event_handler+0x10a>
    break;
 8014e0c:	bf00      	nop
  }
}
 8014e0e:	bf00      	nop
 8014e10:	3718      	adds	r7, #24
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
 8014e16:	bf00      	nop
 8014e18:	20009310 	.word	0x20009310
 8014e1c:	20009404 	.word	0x20009404

08014e20 <dcd_event_bus_signal>:

void dcd_event_bus_signal (uint8_t rhport, dcd_eventid_t eid, bool in_isr)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b086      	sub	sp, #24
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	4603      	mov	r3, r0
 8014e28:	71fb      	strb	r3, [r7, #7]
 8014e2a:	460b      	mov	r3, r1
 8014e2c:	71bb      	strb	r3, [r7, #6]
 8014e2e:	4613      	mov	r3, r2
 8014e30:	717b      	strb	r3, [r7, #5]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8014e32:	f107 030c 	add.w	r3, r7, #12
 8014e36:	2200      	movs	r2, #0
 8014e38:	601a      	str	r2, [r3, #0]
 8014e3a:	605a      	str	r2, [r3, #4]
 8014e3c:	609a      	str	r2, [r3, #8]
 8014e3e:	79fb      	ldrb	r3, [r7, #7]
 8014e40:	733b      	strb	r3, [r7, #12]
 8014e42:	79bb      	ldrb	r3, [r7, #6]
 8014e44:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8014e46:	797a      	ldrb	r2, [r7, #5]
 8014e48:	f107 030c 	add.w	r3, r7, #12
 8014e4c:	4611      	mov	r1, r2
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7ff ff58 	bl	8014d04 <dcd_event_handler>
}
 8014e54:	bf00      	nop
 8014e56:	3718      	adds	r7, #24
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}

08014e5c <dcd_event_bus_reset>:

void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b086      	sub	sp, #24
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	4603      	mov	r3, r0
 8014e64:	71fb      	strb	r3, [r7, #7]
 8014e66:	460b      	mov	r3, r1
 8014e68:	71bb      	strb	r3, [r7, #6]
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	717b      	strb	r3, [r7, #5]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8014e6e:	f107 030c 	add.w	r3, r7, #12
 8014e72:	2200      	movs	r2, #0
 8014e74:	601a      	str	r2, [r3, #0]
 8014e76:	605a      	str	r2, [r3, #4]
 8014e78:	609a      	str	r2, [r3, #8]
 8014e7a:	79fb      	ldrb	r3, [r7, #7]
 8014e7c:	733b      	strb	r3, [r7, #12]
 8014e7e:	2301      	movs	r3, #1
 8014e80:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8014e82:	79bb      	ldrb	r3, [r7, #6]
 8014e84:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8014e86:	797a      	ldrb	r2, [r7, #5]
 8014e88:	f107 030c 	add.w	r3, r7, #12
 8014e8c:	4611      	mov	r1, r2
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7ff ff38 	bl	8014d04 <dcd_event_handler>
}
 8014e94:	bf00      	nop
 8014e96:	3718      	adds	r7, #24
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <dcd_event_setup_received>:

void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b086      	sub	sp, #24
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	6039      	str	r1, [r7, #0]
 8014ea6:	71fb      	strb	r3, [r7, #7]
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	71bb      	strb	r3, [r7, #6]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8014eac:	f107 030c 	add.w	r3, r7, #12
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	601a      	str	r2, [r3, #0]
 8014eb4:	605a      	str	r2, [r3, #4]
 8014eb6:	609a      	str	r2, [r3, #8]
 8014eb8:	79fb      	ldrb	r3, [r7, #7]
 8014eba:	733b      	strb	r3, [r7, #12]
 8014ebc:	2306      	movs	r3, #6
 8014ebe:	737b      	strb	r3, [r7, #13]
  memcpy(&event.setup_received, setup, 8);
 8014ec0:	683a      	ldr	r2, [r7, #0]
 8014ec2:	f107 0310 	add.w	r3, r7, #16
 8014ec6:	6810      	ldr	r0, [r2, #0]
 8014ec8:	6851      	ldr	r1, [r2, #4]
 8014eca:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 8014ecc:	79ba      	ldrb	r2, [r7, #6]
 8014ece:	f107 030c 	add.w	r3, r7, #12
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7ff ff15 	bl	8014d04 <dcd_event_handler>
}
 8014eda:	bf00      	nop
 8014edc:	3718      	adds	r7, #24
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}

08014ee2 <dcd_event_xfer_complete>:

void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
 8014ee2:	b580      	push	{r7, lr}
 8014ee4:	b086      	sub	sp, #24
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	603a      	str	r2, [r7, #0]
 8014eea:	461a      	mov	r2, r3
 8014eec:	4603      	mov	r3, r0
 8014eee:	71fb      	strb	r3, [r7, #7]
 8014ef0:	460b      	mov	r3, r1
 8014ef2:	71bb      	strb	r3, [r7, #6]
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	717b      	strb	r3, [r7, #5]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8014ef8:	f107 030c 	add.w	r3, r7, #12
 8014efc:	2200      	movs	r2, #0
 8014efe:	601a      	str	r2, [r3, #0]
 8014f00:	605a      	str	r2, [r3, #4]
 8014f02:	609a      	str	r2, [r3, #8]
 8014f04:	79fb      	ldrb	r3, [r7, #7]
 8014f06:	733b      	strb	r3, [r7, #12]
 8014f08:	2307      	movs	r3, #7
 8014f0a:	737b      	strb	r3, [r7, #13]

  event.xfer_complete.ep_addr = ep_addr;
 8014f0c:	79bb      	ldrb	r3, [r7, #6]
 8014f0e:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 8014f14:	797b      	ldrb	r3, [r7, #5]
 8014f16:	747b      	strb	r3, [r7, #17]

  dcd_event_handler(&event, in_isr);
 8014f18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8014f1c:	f107 030c 	add.w	r3, r7, #12
 8014f20:	4611      	mov	r1, r2
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7ff feee 	bl	8014d04 <dcd_event_handler>
}
 8014f28:	bf00      	nop
 8014f2a:	3718      	adds	r7, #24
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}

08014f30 <usbd_open_edpt_pair>:
// USBD API For Class Driver
//--------------------------------------------------------------------+

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b086      	sub	sp, #24
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6039      	str	r1, [r7, #0]
 8014f38:	4611      	mov	r1, r2
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	71fb      	strb	r3, [r7, #7]
 8014f40:	460b      	mov	r3, r1
 8014f42:	71bb      	strb	r3, [r7, #6]
 8014f44:	4613      	mov	r3, r2
 8014f46:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8014f48:	2300      	movs	r3, #0
 8014f4a:	617b      	str	r3, [r7, #20]
 8014f4c:	e053      	b.n	8014ff6 <usbd_open_edpt_pair+0xc6>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	613b      	str	r3, [r7, #16]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	785b      	ldrb	r3, [r3, #1]
 8014f56:	2b05      	cmp	r3, #5
 8014f58:	d108      	bne.n	8014f6c <usbd_open_edpt_pair+0x3c>
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	78db      	ldrb	r3, [r3, #3]
 8014f5e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	461a      	mov	r2, r3
 8014f66:	797b      	ldrb	r3, [r7, #5]
 8014f68:	4293      	cmp	r3, r2
 8014f6a:	d010      	beq.n	8014f8e <usbd_open_edpt_pair+0x5e>
 8014f6c:	f240 429f 	movw	r2, #1183	; 0x49f
 8014f70:	4925      	ldr	r1, [pc, #148]	; (8015008 <usbd_open_edpt_pair+0xd8>)
 8014f72:	4826      	ldr	r0, [pc, #152]	; (801500c <usbd_open_edpt_pair+0xdc>)
 8014f74:	f002 fe8c 	bl	8017c90 <iprintf>
 8014f78:	4b25      	ldr	r3, [pc, #148]	; (8015010 <usbd_open_edpt_pair+0xe0>)
 8014f7a:	60bb      	str	r3, [r7, #8]
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	f003 0301 	and.w	r3, r3, #1
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d000      	beq.n	8014f8a <usbd_open_edpt_pair+0x5a>
 8014f88:	be00      	bkpt	0x0000
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	e038      	b.n	8015000 <usbd_open_edpt_pair+0xd0>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8014f8e:	79fb      	ldrb	r3, [r7, #7]
 8014f90:	6939      	ldr	r1, [r7, #16]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f000 f83e 	bl	8015014 <usbd_edpt_open>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	f083 0301 	eor.w	r3, r3, #1
 8014f9e:	b2db      	uxtb	r3, r3
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d010      	beq.n	8014fc6 <usbd_open_edpt_pair+0x96>
 8014fa4:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8014fa8:	4917      	ldr	r1, [pc, #92]	; (8015008 <usbd_open_edpt_pair+0xd8>)
 8014faa:	4818      	ldr	r0, [pc, #96]	; (801500c <usbd_open_edpt_pair+0xdc>)
 8014fac:	f002 fe70 	bl	8017c90 <iprintf>
 8014fb0:	4b17      	ldr	r3, [pc, #92]	; (8015010 <usbd_open_edpt_pair+0xe0>)
 8014fb2:	60fb      	str	r3, [r7, #12]
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	f003 0301 	and.w	r3, r3, #1
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d000      	beq.n	8014fc2 <usbd_open_edpt_pair+0x92>
 8014fc0:	be00      	bkpt	0x0000
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	e01c      	b.n	8015000 <usbd_open_edpt_pair+0xd0>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	789b      	ldrb	r3, [r3, #2]
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7fe fd35 	bl	8013a3a <tu_edpt_dir>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d104      	bne.n	8014fe0 <usbd_open_edpt_pair+0xb0>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	789a      	ldrb	r2, [r3, #2]
 8014fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fdc:	701a      	strb	r2, [r3, #0]
 8014fde:	e003      	b.n	8014fe8 <usbd_open_edpt_pair+0xb8>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8014fe0:	693b      	ldr	r3, [r7, #16]
 8014fe2:	789a      	ldrb	r2, [r3, #2]
 8014fe4:	6a3b      	ldr	r3, [r7, #32]
 8014fe6:	701a      	strb	r2, [r3, #0]
    }

    p_desc = tu_desc_next(p_desc);
 8014fe8:	6838      	ldr	r0, [r7, #0]
 8014fea:	f7fe fd43 	bl	8013a74 <tu_desc_next>
 8014fee:	6038      	str	r0, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	617b      	str	r3, [r7, #20]
 8014ff6:	79bb      	ldrb	r3, [r7, #6]
 8014ff8:	697a      	ldr	r2, [r7, #20]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	dba7      	blt.n	8014f4e <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8014ffe:	2301      	movs	r3, #1
}
 8015000:	4618      	mov	r0, r3
 8015002:	3718      	adds	r7, #24
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}
 8015008:	0801b4e4 	.word	0x0801b4e4
 801500c:	0801a218 	.word	0x0801a218
 8015010:	e000edf0 	.word	0xe000edf0

08015014 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0
 801501a:	4603      	mov	r3, r0
 801501c:	6039      	str	r1, [r7, #0]
 801501e:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	789b      	ldrb	r3, [r3, #2]
 8015024:	4618      	mov	r0, r3
 8015026:	f7fe fd16 	bl	8013a56 <tu_edpt_number>
 801502a:	4603      	mov	r3, r0
 801502c:	2b05      	cmp	r3, #5
 801502e:	d910      	bls.n	8015052 <usbd_edpt_open+0x3e>
 8015030:	f240 42c5 	movw	r2, #1221	; 0x4c5
 8015034:	491a      	ldr	r1, [pc, #104]	; (80150a0 <usbd_edpt_open+0x8c>)
 8015036:	481b      	ldr	r0, [pc, #108]	; (80150a4 <usbd_edpt_open+0x90>)
 8015038:	f002 fe2a 	bl	8017c90 <iprintf>
 801503c:	4b1a      	ldr	r3, [pc, #104]	; (80150a8 <usbd_edpt_open+0x94>)
 801503e:	60bb      	str	r3, [r7, #8]
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	f003 0301 	and.w	r3, r3, #1
 8015048:	2b00      	cmp	r3, #0
 801504a:	d000      	beq.n	801504e <usbd_edpt_open+0x3a>
 801504c:	be00      	bkpt	0x0000
 801504e:	2300      	movs	r3, #0
 8015050:	e022      	b.n	8015098 <usbd_edpt_open+0x84>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8015052:	4b16      	ldr	r3, [pc, #88]	; (80150ac <usbd_edpt_open+0x98>)
 8015054:	789b      	ldrb	r3, [r3, #2]
 8015056:	4619      	mov	r1, r3
 8015058:	6838      	ldr	r0, [r7, #0]
 801505a:	f002 fa67 	bl	801752c <tu_edpt_validate>
 801505e:	4603      	mov	r3, r0
 8015060:	f083 0301 	eor.w	r3, r3, #1
 8015064:	b2db      	uxtb	r3, r3
 8015066:	2b00      	cmp	r3, #0
 8015068:	d010      	beq.n	801508c <usbd_edpt_open+0x78>
 801506a:	f240 42c6 	movw	r2, #1222	; 0x4c6
 801506e:	490c      	ldr	r1, [pc, #48]	; (80150a0 <usbd_edpt_open+0x8c>)
 8015070:	480c      	ldr	r0, [pc, #48]	; (80150a4 <usbd_edpt_open+0x90>)
 8015072:	f002 fe0d 	bl	8017c90 <iprintf>
 8015076:	4b0c      	ldr	r3, [pc, #48]	; (80150a8 <usbd_edpt_open+0x94>)
 8015078:	60fb      	str	r3, [r7, #12]
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	f003 0301 	and.w	r3, r3, #1
 8015082:	2b00      	cmp	r3, #0
 8015084:	d000      	beq.n	8015088 <usbd_edpt_open+0x74>
 8015086:	be00      	bkpt	0x0000
 8015088:	2300      	movs	r3, #0
 801508a:	e005      	b.n	8015098 <usbd_edpt_open+0x84>

  return dcd_edpt_open(rhport, desc_ep);
 801508c:	79fb      	ldrb	r3, [r7, #7]
 801508e:	6839      	ldr	r1, [r7, #0]
 8015090:	4618      	mov	r0, r3
 8015092:	f001 faf3 	bl	801667c <dcd_edpt_open>
 8015096:	4603      	mov	r3, r0
}
 8015098:	4618      	mov	r0, r3
 801509a:	3710      	adds	r7, #16
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	0801b4f8 	.word	0x0801b4f8
 80150a4:	0801a218 	.word	0x0801a218
 80150a8:	e000edf0 	.word	0xe000edf0
 80150ac:	20009310 	.word	0x20009310

080150b0 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	4603      	mov	r3, r0
 80150b8:	460a      	mov	r2, r1
 80150ba:	71fb      	strb	r3, [r7, #7]
 80150bc:	4613      	mov	r3, r2
 80150be:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80150c0:	79bb      	ldrb	r3, [r7, #6]
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7fe fcc7 	bl	8013a56 <tu_edpt_number>
 80150c8:	4603      	mov	r3, r0
 80150ca:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80150cc:	79bb      	ldrb	r3, [r7, #6]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7fe fcb3 	bl	8013a3a <tu_edpt_dir>
 80150d4:	4603      	mov	r3, r0
 80150d6:	73bb      	strb	r3, [r7, #14]

#if CFG_TUSB_OS != OPT_OS_NONE
  // pre-check to help reducing mutex lock
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
 80150d8:	7bfa      	ldrb	r2, [r7, #15]
 80150da:	7bbb      	ldrb	r3, [r7, #14]
 80150dc:	4930      	ldr	r1, [pc, #192]	; (80151a0 <usbd_edpt_claim+0xf0>)
 80150de:	0052      	lsls	r2, r2, #1
 80150e0:	440a      	add	r2, r1
 80150e2:	4413      	add	r3, r2
 80150e4:	3318      	adds	r3, #24
 80150e6:	79db      	ldrb	r3, [r3, #7]
 80150e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80150ec:	b2db      	uxtb	r3, r3
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d10c      	bne.n	801510c <usbd_edpt_claim+0x5c>
 80150f2:	7bfa      	ldrb	r2, [r7, #15]
 80150f4:	7bbb      	ldrb	r3, [r7, #14]
 80150f6:	492a      	ldr	r1, [pc, #168]	; (80151a0 <usbd_edpt_claim+0xf0>)
 80150f8:	0052      	lsls	r2, r2, #1
 80150fa:	440a      	add	r2, r1
 80150fc:	4413      	add	r3, r2
 80150fe:	3318      	adds	r3, #24
 8015100:	79db      	ldrb	r3, [r3, #7]
 8015102:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015106:	b2db      	uxtb	r3, r3
 8015108:	2b00      	cmp	r3, #0
 801510a:	d001      	beq.n	8015110 <usbd_edpt_claim+0x60>
 801510c:	2300      	movs	r3, #0
 801510e:	e043      	b.n	8015198 <usbd_edpt_claim+0xe8>
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 8015110:	4b24      	ldr	r3, [pc, #144]	; (80151a4 <usbd_edpt_claim+0xf4>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	f04f 31ff 	mov.w	r1, #4294967295
 8015118:	4618      	mov	r0, r3
 801511a:	f7fe fd26 	bl	8013b6a <osal_mutex_lock>
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
 801511e:	7bfa      	ldrb	r2, [r7, #15]
 8015120:	7bbb      	ldrb	r3, [r7, #14]
 8015122:	491f      	ldr	r1, [pc, #124]	; (80151a0 <usbd_edpt_claim+0xf0>)
 8015124:	0052      	lsls	r2, r2, #1
 8015126:	440a      	add	r2, r1
 8015128:	4413      	add	r3, r2
 801512a:	3318      	adds	r3, #24
 801512c:	79db      	ldrb	r3, [r3, #7]
 801512e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015132:	b2db      	uxtb	r3, r3
 8015134:	f083 0301 	eor.w	r3, r3, #1
 8015138:	b2db      	uxtb	r3, r3
 801513a:	2b00      	cmp	r3, #0
 801513c:	d011      	beq.n	8015162 <usbd_edpt_claim+0xb2>
 801513e:	7bfa      	ldrb	r2, [r7, #15]
 8015140:	7bbb      	ldrb	r3, [r7, #14]
 8015142:	4917      	ldr	r1, [pc, #92]	; (80151a0 <usbd_edpt_claim+0xf0>)
 8015144:	0052      	lsls	r2, r2, #1
 8015146:	440a      	add	r2, r1
 8015148:	4413      	add	r3, r2
 801514a:	3318      	adds	r3, #24
 801514c:	79db      	ldrb	r3, [r3, #7]
 801514e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015152:	b2db      	uxtb	r3, r3
 8015154:	f083 0301 	eor.w	r3, r3, #1
 8015158:	b2db      	uxtb	r3, r3
 801515a:	2b00      	cmp	r3, #0
 801515c:	d001      	beq.n	8015162 <usbd_edpt_claim+0xb2>
 801515e:	2301      	movs	r3, #1
 8015160:	e000      	b.n	8015164 <usbd_edpt_claim+0xb4>
 8015162:	2300      	movs	r3, #0
 8015164:	737b      	strb	r3, [r7, #13]
 8015166:	7b7b      	ldrb	r3, [r7, #13]
 8015168:	f003 0301 	and.w	r3, r3, #1
 801516c:	737b      	strb	r3, [r7, #13]
  if (ret)
 801516e:	7b7b      	ldrb	r3, [r7, #13]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d00b      	beq.n	801518c <usbd_edpt_claim+0xdc>
  {
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
 8015174:	7bfa      	ldrb	r2, [r7, #15]
 8015176:	7bbb      	ldrb	r3, [r7, #14]
 8015178:	4909      	ldr	r1, [pc, #36]	; (80151a0 <usbd_edpt_claim+0xf0>)
 801517a:	0052      	lsls	r2, r2, #1
 801517c:	440a      	add	r2, r1
 801517e:	4413      	add	r3, r2
 8015180:	f103 0218 	add.w	r2, r3, #24
 8015184:	79d3      	ldrb	r3, [r2, #7]
 8015186:	f043 0304 	orr.w	r3, r3, #4
 801518a:	71d3      	strb	r3, [r2, #7]
  }

#if CFG_TUSB_OS != OPT_OS_NONE
  osal_mutex_unlock(_usbd_mutex);
 801518c:	4b05      	ldr	r3, [pc, #20]	; (80151a4 <usbd_edpt_claim+0xf4>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	4618      	mov	r0, r3
 8015192:	f7fe fcf8 	bl	8013b86 <osal_mutex_unlock>
#endif

  return ret;
 8015196:	7b7b      	ldrb	r3, [r7, #13]
}
 8015198:	4618      	mov	r0, r3
 801519a:	3710      	adds	r7, #16
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	20009310 	.word	0x20009310
 80151a4:	20009450 	.word	0x20009450

080151a8 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b084      	sub	sp, #16
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	4603      	mov	r3, r0
 80151b0:	460a      	mov	r2, r1
 80151b2:	71fb      	strb	r3, [r7, #7]
 80151b4:	4613      	mov	r3, r2
 80151b6:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80151b8:	79bb      	ldrb	r3, [r7, #6]
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7fe fc4b 	bl	8013a56 <tu_edpt_number>
 80151c0:	4603      	mov	r3, r0
 80151c2:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80151c4:	79bb      	ldrb	r3, [r7, #6]
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fe fc37 	bl	8013a3a <tu_edpt_dir>
 80151cc:	4603      	mov	r3, r0
 80151ce:	73bb      	strb	r3, [r7, #14]

#if CFG_TUSB_OS != OPT_OS_NONE
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
 80151d0:	4b22      	ldr	r3, [pc, #136]	; (801525c <usbd_edpt_release+0xb4>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	f04f 31ff 	mov.w	r1, #4294967295
 80151d8:	4618      	mov	r0, r3
 80151da:	f7fe fcc6 	bl	8013b6a <osal_mutex_lock>
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
 80151de:	7bfa      	ldrb	r2, [r7, #15]
 80151e0:	7bbb      	ldrb	r3, [r7, #14]
 80151e2:	491f      	ldr	r1, [pc, #124]	; (8015260 <usbd_edpt_release+0xb8>)
 80151e4:	0052      	lsls	r2, r2, #1
 80151e6:	440a      	add	r2, r1
 80151e8:	4413      	add	r3, r2
 80151ea:	3318      	adds	r3, #24
 80151ec:	79db      	ldrb	r3, [r3, #7]
 80151ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80151f2:	b2db      	uxtb	r3, r3
 80151f4:	f083 0301 	eor.w	r3, r3, #1
 80151f8:	b2db      	uxtb	r3, r3
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d00e      	beq.n	801521c <usbd_edpt_release+0x74>
 80151fe:	7bfa      	ldrb	r2, [r7, #15]
 8015200:	7bbb      	ldrb	r3, [r7, #14]
 8015202:	4917      	ldr	r1, [pc, #92]	; (8015260 <usbd_edpt_release+0xb8>)
 8015204:	0052      	lsls	r2, r2, #1
 8015206:	440a      	add	r2, r1
 8015208:	4413      	add	r3, r2
 801520a:	3318      	adds	r3, #24
 801520c:	79db      	ldrb	r3, [r3, #7]
 801520e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015212:	b2db      	uxtb	r3, r3
 8015214:	2b00      	cmp	r3, #0
 8015216:	d001      	beq.n	801521c <usbd_edpt_release+0x74>
 8015218:	2301      	movs	r3, #1
 801521a:	e000      	b.n	801521e <usbd_edpt_release+0x76>
 801521c:	2300      	movs	r3, #0
 801521e:	737b      	strb	r3, [r7, #13]
 8015220:	7b7b      	ldrb	r3, [r7, #13]
 8015222:	f003 0301 	and.w	r3, r3, #1
 8015226:	737b      	strb	r3, [r7, #13]
  if (ret)
 8015228:	7b7b      	ldrb	r3, [r7, #13]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d00b      	beq.n	8015246 <usbd_edpt_release+0x9e>
  {
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 801522e:	7bfa      	ldrb	r2, [r7, #15]
 8015230:	7bbb      	ldrb	r3, [r7, #14]
 8015232:	490b      	ldr	r1, [pc, #44]	; (8015260 <usbd_edpt_release+0xb8>)
 8015234:	0052      	lsls	r2, r2, #1
 8015236:	440a      	add	r2, r1
 8015238:	4413      	add	r3, r2
 801523a:	f103 0218 	add.w	r2, r3, #24
 801523e:	79d3      	ldrb	r3, [r2, #7]
 8015240:	f36f 0382 	bfc	r3, #2, #1
 8015244:	71d3      	strb	r3, [r2, #7]
  }

#if CFG_TUSB_OS != OPT_OS_NONE
  osal_mutex_unlock(_usbd_mutex);
 8015246:	4b05      	ldr	r3, [pc, #20]	; (801525c <usbd_edpt_release+0xb4>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	4618      	mov	r0, r3
 801524c:	f7fe fc9b 	bl	8013b86 <osal_mutex_unlock>
#endif

  return ret;
 8015250:	7b7b      	ldrb	r3, [r7, #13]
}
 8015252:	4618      	mov	r0, r3
 8015254:	3710      	adds	r7, #16
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	20009450 	.word	0x20009450
 8015260:	20009310 	.word	0x20009310

08015264 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b086      	sub	sp, #24
 8015268:	af00      	add	r7, sp, #0
 801526a:	603a      	str	r2, [r7, #0]
 801526c:	461a      	mov	r2, r3
 801526e:	4603      	mov	r3, r0
 8015270:	71fb      	strb	r3, [r7, #7]
 8015272:	460b      	mov	r3, r1
 8015274:	71bb      	strb	r3, [r7, #6]
 8015276:	4613      	mov	r3, r2
 8015278:	80bb      	strh	r3, [r7, #4]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 801527a:	79bb      	ldrb	r3, [r7, #6]
 801527c:	4618      	mov	r0, r3
 801527e:	f7fe fbea 	bl	8013a56 <tu_edpt_number>
 8015282:	4603      	mov	r3, r0
 8015284:	75fb      	strb	r3, [r7, #23]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8015286:	79bb      	ldrb	r3, [r7, #6]
 8015288:	4618      	mov	r0, r3
 801528a:	f7fe fbd6 	bl	8013a3a <tu_edpt_dir>
 801528e:	4603      	mov	r3, r0
 8015290:	75bb      	strb	r3, [r7, #22]

  // TODO skip ready() check for now since enumeration also use this API
  // TU_VERIFY(tud_ready());

  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
 8015292:	79bb      	ldrb	r3, [r7, #6]
 8015294:	88ba      	ldrh	r2, [r7, #4]
 8015296:	4619      	mov	r1, r3
 8015298:	4830      	ldr	r0, [pc, #192]	; (801535c <usbd_edpt_xfer+0xf8>)
 801529a:	f002 fcf9 	bl	8017c90 <iprintf>

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 801529e:	7dfa      	ldrb	r2, [r7, #23]
 80152a0:	7dbb      	ldrb	r3, [r7, #22]
 80152a2:	492f      	ldr	r1, [pc, #188]	; (8015360 <usbd_edpt_xfer+0xfc>)
 80152a4:	0052      	lsls	r2, r2, #1
 80152a6:	440a      	add	r2, r1
 80152a8:	4413      	add	r3, r2
 80152aa:	3318      	adds	r3, #24
 80152ac:	79db      	ldrb	r3, [r3, #7]
 80152ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d010      	beq.n	80152da <usbd_edpt_xfer+0x76>
 80152b8:	f240 520d 	movw	r2, #1293	; 0x50d
 80152bc:	4929      	ldr	r1, [pc, #164]	; (8015364 <usbd_edpt_xfer+0x100>)
 80152be:	482a      	ldr	r0, [pc, #168]	; (8015368 <usbd_edpt_xfer+0x104>)
 80152c0:	f002 fce6 	bl	8017c90 <iprintf>
 80152c4:	4b29      	ldr	r3, [pc, #164]	; (801536c <usbd_edpt_xfer+0x108>)
 80152c6:	60fb      	str	r3, [r7, #12]
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	f003 0301 	and.w	r3, r3, #1
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d000      	beq.n	80152d6 <usbd_edpt_xfer+0x72>
 80152d4:	be00      	bkpt	0x0000
 80152d6:	2300      	movs	r3, #0
 80152d8:	e03b      	b.n	8015352 <usbd_edpt_xfer+0xee>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 80152da:	7dfa      	ldrb	r2, [r7, #23]
 80152dc:	7dbb      	ldrb	r3, [r7, #22]
 80152de:	4920      	ldr	r1, [pc, #128]	; (8015360 <usbd_edpt_xfer+0xfc>)
 80152e0:	0052      	lsls	r2, r2, #1
 80152e2:	440a      	add	r2, r1
 80152e4:	4413      	add	r3, r2
 80152e6:	f103 0218 	add.w	r2, r3, #24
 80152ea:	79d3      	ldrb	r3, [r2, #7]
 80152ec:	f043 0301 	orr.w	r3, r3, #1
 80152f0:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 80152f2:	88bb      	ldrh	r3, [r7, #4]
 80152f4:	79b9      	ldrb	r1, [r7, #6]
 80152f6:	79f8      	ldrb	r0, [r7, #7]
 80152f8:	683a      	ldr	r2, [r7, #0]
 80152fa:	f001 fb37 	bl	801696c <dcd_edpt_xfer>
 80152fe:	4603      	mov	r3, r0
 8015300:	2b00      	cmp	r3, #0
 8015302:	d001      	beq.n	8015308 <usbd_edpt_xfer+0xa4>
  {
    return true;
 8015304:	2301      	movs	r3, #1
 8015306:	e024      	b.n	8015352 <usbd_edpt_xfer+0xee>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8015308:	7dfa      	ldrb	r2, [r7, #23]
 801530a:	7dbb      	ldrb	r3, [r7, #22]
 801530c:	4914      	ldr	r1, [pc, #80]	; (8015360 <usbd_edpt_xfer+0xfc>)
 801530e:	0052      	lsls	r2, r2, #1
 8015310:	440a      	add	r2, r1
 8015312:	4413      	add	r3, r2
 8015314:	f103 0218 	add.w	r2, r3, #24
 8015318:	79d3      	ldrb	r3, [r2, #7]
 801531a:	f36f 0300 	bfc	r3, #0, #1
 801531e:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8015320:	7dfa      	ldrb	r2, [r7, #23]
 8015322:	7dbb      	ldrb	r3, [r7, #22]
 8015324:	490e      	ldr	r1, [pc, #56]	; (8015360 <usbd_edpt_xfer+0xfc>)
 8015326:	0052      	lsls	r2, r2, #1
 8015328:	440a      	add	r2, r1
 801532a:	4413      	add	r3, r2
 801532c:	f103 0218 	add.w	r2, r3, #24
 8015330:	79d3      	ldrb	r3, [r2, #7]
 8015332:	f36f 0382 	bfc	r3, #2, #1
 8015336:	71d3      	strb	r3, [r2, #7]
    TU_LOG2("FAILED\r\n");
 8015338:	480d      	ldr	r0, [pc, #52]	; (8015370 <usbd_edpt_xfer+0x10c>)
 801533a:	f002 fd45 	bl	8017dc8 <puts>
    TU_BREAKPOINT();
 801533e:	4b0b      	ldr	r3, [pc, #44]	; (801536c <usbd_edpt_xfer+0x108>)
 8015340:	613b      	str	r3, [r7, #16]
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	f003 0301 	and.w	r3, r3, #1
 801534a:	2b00      	cmp	r3, #0
 801534c:	d000      	beq.n	8015350 <usbd_edpt_xfer+0xec>
 801534e:	be00      	bkpt	0x0000
    return false;
 8015350:	2300      	movs	r3, #0
  }
}
 8015352:	4618      	mov	r0, r3
 8015354:	3718      	adds	r7, #24
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
 801535a:	bf00      	nop
 801535c:	0801a3dc 	.word	0x0801a3dc
 8015360:	20009310 	.word	0x20009310
 8015364:	0801b508 	.word	0x0801b508
 8015368:	0801a218 	.word	0x0801a218
 801536c:	e000edf0 	.word	0xe000edf0
 8015370:	0801a400 	.word	0x0801a400

08015374 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b084      	sub	sp, #16
 8015378:	af00      	add	r7, sp, #0
 801537a:	4603      	mov	r3, r0
 801537c:	460a      	mov	r2, r1
 801537e:	71fb      	strb	r3, [r7, #7]
 8015380:	4613      	mov	r3, r2
 8015382:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8015384:	79bb      	ldrb	r3, [r7, #6]
 8015386:	4618      	mov	r0, r3
 8015388:	f7fe fb65 	bl	8013a56 <tu_edpt_number>
 801538c:	4603      	mov	r3, r0
 801538e:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8015390:	79bb      	ldrb	r3, [r7, #6]
 8015392:	4618      	mov	r0, r3
 8015394:	f7fe fb51 	bl	8013a3a <tu_edpt_dir>
 8015398:	4603      	mov	r3, r0
 801539a:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 801539c:	7bfa      	ldrb	r2, [r7, #15]
 801539e:	7bbb      	ldrb	r3, [r7, #14]
 80153a0:	4906      	ldr	r1, [pc, #24]	; (80153bc <usbd_edpt_busy+0x48>)
 80153a2:	0052      	lsls	r2, r2, #1
 80153a4:	440a      	add	r2, r1
 80153a6:	4413      	add	r3, r2
 80153a8:	3318      	adds	r3, #24
 80153aa:	79db      	ldrb	r3, [r3, #7]
 80153ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80153b0:	b2db      	uxtb	r3, r3
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	3710      	adds	r7, #16
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	bf00      	nop
 80153bc:	20009310 	.word	0x20009310

080153c0 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b084      	sub	sp, #16
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	4603      	mov	r3, r0
 80153c8:	460a      	mov	r2, r1
 80153ca:	71fb      	strb	r3, [r7, #7]
 80153cc:	4613      	mov	r3, r2
 80153ce:	71bb      	strb	r3, [r7, #6]

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80153d0:	79bb      	ldrb	r3, [r7, #6]
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7fe fb3f 	bl	8013a56 <tu_edpt_number>
 80153d8:	4603      	mov	r3, r0
 80153da:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80153dc:	79bb      	ldrb	r3, [r7, #6]
 80153de:	4618      	mov	r0, r3
 80153e0:	f7fe fb2b 	bl	8013a3a <tu_edpt_dir>
 80153e4:	4603      	mov	r3, r0
 80153e6:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 80153e8:	7bfa      	ldrb	r2, [r7, #15]
 80153ea:	7bbb      	ldrb	r3, [r7, #14]
 80153ec:	491a      	ldr	r1, [pc, #104]	; (8015458 <usbd_edpt_stall+0x98>)
 80153ee:	0052      	lsls	r2, r2, #1
 80153f0:	440a      	add	r2, r1
 80153f2:	4413      	add	r3, r2
 80153f4:	3318      	adds	r3, #24
 80153f6:	79db      	ldrb	r3, [r3, #7]
 80153f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80153fc:	b2db      	uxtb	r3, r3
 80153fe:	f083 0301 	eor.w	r3, r3, #1
 8015402:	b2db      	uxtb	r3, r3
 8015404:	2b00      	cmp	r3, #0
 8015406:	d022      	beq.n	801544e <usbd_edpt_stall+0x8e>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
 8015408:	79bb      	ldrb	r3, [r7, #6]
 801540a:	4619      	mov	r1, r3
 801540c:	4813      	ldr	r0, [pc, #76]	; (801545c <usbd_edpt_stall+0x9c>)
 801540e:	f002 fc3f 	bl	8017c90 <iprintf>
    dcd_edpt_stall(rhport, ep_addr);
 8015412:	79ba      	ldrb	r2, [r7, #6]
 8015414:	79fb      	ldrb	r3, [r7, #7]
 8015416:	4611      	mov	r1, r2
 8015418:	4618      	mov	r0, r3
 801541a:	f001 fbf7 	bl	8016c0c <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 801541e:	7bfa      	ldrb	r2, [r7, #15]
 8015420:	7bbb      	ldrb	r3, [r7, #14]
 8015422:	490d      	ldr	r1, [pc, #52]	; (8015458 <usbd_edpt_stall+0x98>)
 8015424:	0052      	lsls	r2, r2, #1
 8015426:	440a      	add	r2, r1
 8015428:	4413      	add	r3, r2
 801542a:	f103 0218 	add.w	r2, r3, #24
 801542e:	79d3      	ldrb	r3, [r2, #7]
 8015430:	f043 0302 	orr.w	r3, r3, #2
 8015434:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8015436:	7bfa      	ldrb	r2, [r7, #15]
 8015438:	7bbb      	ldrb	r3, [r7, #14]
 801543a:	4907      	ldr	r1, [pc, #28]	; (8015458 <usbd_edpt_stall+0x98>)
 801543c:	0052      	lsls	r2, r2, #1
 801543e:	440a      	add	r2, r1
 8015440:	4413      	add	r3, r2
 8015442:	f103 0218 	add.w	r2, r3, #24
 8015446:	79d3      	ldrb	r3, [r2, #7]
 8015448:	f043 0301 	orr.w	r3, r3, #1
 801544c:	71d3      	strb	r3, [r2, #7]
  }
}
 801544e:	bf00      	nop
 8015450:	3710      	adds	r7, #16
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}
 8015456:	bf00      	nop
 8015458:	20009310 	.word	0x20009310
 801545c:	0801a43c 	.word	0x0801a43c

08015460 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b084      	sub	sp, #16
 8015464:	af00      	add	r7, sp, #0
 8015466:	4603      	mov	r3, r0
 8015468:	460a      	mov	r2, r1
 801546a:	71fb      	strb	r3, [r7, #7]
 801546c:	4613      	mov	r3, r2
 801546e:	71bb      	strb	r3, [r7, #6]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8015470:	79bb      	ldrb	r3, [r7, #6]
 8015472:	4618      	mov	r0, r3
 8015474:	f7fe faef 	bl	8013a56 <tu_edpt_number>
 8015478:	4603      	mov	r3, r0
 801547a:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 801547c:	79bb      	ldrb	r3, [r7, #6]
 801547e:	4618      	mov	r0, r3
 8015480:	f7fe fadb 	bl	8013a3a <tu_edpt_dir>
 8015484:	4603      	mov	r3, r0
 8015486:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8015488:	7bfa      	ldrb	r2, [r7, #15]
 801548a:	7bbb      	ldrb	r3, [r7, #14]
 801548c:	4918      	ldr	r1, [pc, #96]	; (80154f0 <usbd_edpt_clear_stall+0x90>)
 801548e:	0052      	lsls	r2, r2, #1
 8015490:	440a      	add	r2, r1
 8015492:	4413      	add	r3, r2
 8015494:	3318      	adds	r3, #24
 8015496:	79db      	ldrb	r3, [r3, #7]
 8015498:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801549c:	b2db      	uxtb	r3, r3
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d022      	beq.n	80154e8 <usbd_edpt_clear_stall+0x88>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
 80154a2:	79bb      	ldrb	r3, [r7, #6]
 80154a4:	4619      	mov	r1, r3
 80154a6:	4813      	ldr	r0, [pc, #76]	; (80154f4 <usbd_edpt_clear_stall+0x94>)
 80154a8:	f002 fbf2 	bl	8017c90 <iprintf>
    dcd_edpt_clear_stall(rhport, ep_addr);
 80154ac:	79ba      	ldrb	r2, [r7, #6]
 80154ae:	79fb      	ldrb	r3, [r7, #7]
 80154b0:	4611      	mov	r1, r2
 80154b2:	4618      	mov	r0, r3
 80154b4:	f001 fbbc 	bl	8016c30 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 80154b8:	7bfa      	ldrb	r2, [r7, #15]
 80154ba:	7bbb      	ldrb	r3, [r7, #14]
 80154bc:	490c      	ldr	r1, [pc, #48]	; (80154f0 <usbd_edpt_clear_stall+0x90>)
 80154be:	0052      	lsls	r2, r2, #1
 80154c0:	440a      	add	r2, r1
 80154c2:	4413      	add	r3, r2
 80154c4:	f103 0218 	add.w	r2, r3, #24
 80154c8:	79d3      	ldrb	r3, [r2, #7]
 80154ca:	f36f 0341 	bfc	r3, #1, #1
 80154ce:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 80154d0:	7bfa      	ldrb	r2, [r7, #15]
 80154d2:	7bbb      	ldrb	r3, [r7, #14]
 80154d4:	4906      	ldr	r1, [pc, #24]	; (80154f0 <usbd_edpt_clear_stall+0x90>)
 80154d6:	0052      	lsls	r2, r2, #1
 80154d8:	440a      	add	r2, r1
 80154da:	4413      	add	r3, r2
 80154dc:	f103 0218 	add.w	r2, r3, #24
 80154e0:	79d3      	ldrb	r3, [r2, #7]
 80154e2:	f36f 0300 	bfc	r3, #0, #1
 80154e6:	71d3      	strb	r3, [r2, #7]
  }
}
 80154e8:	bf00      	nop
 80154ea:	3710      	adds	r7, #16
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}
 80154f0:	20009310 	.word	0x20009310
 80154f4:	0801a450 	.word	0x0801a450

080154f8 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	4603      	mov	r3, r0
 8015500:	460a      	mov	r2, r1
 8015502:	71fb      	strb	r3, [r7, #7]
 8015504:	4613      	mov	r3, r2
 8015506:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8015508:	79bb      	ldrb	r3, [r7, #6]
 801550a:	4618      	mov	r0, r3
 801550c:	f7fe faa3 	bl	8013a56 <tu_edpt_number>
 8015510:	4603      	mov	r3, r0
 8015512:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8015514:	79bb      	ldrb	r3, [r7, #6]
 8015516:	4618      	mov	r0, r3
 8015518:	f7fe fa8f 	bl	8013a3a <tu_edpt_dir>
 801551c:	4603      	mov	r3, r0
 801551e:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8015520:	7bfa      	ldrb	r2, [r7, #15]
 8015522:	7bbb      	ldrb	r3, [r7, #14]
 8015524:	4906      	ldr	r1, [pc, #24]	; (8015540 <usbd_edpt_stalled+0x48>)
 8015526:	0052      	lsls	r2, r2, #1
 8015528:	440a      	add	r2, r1
 801552a:	4413      	add	r3, r2
 801552c:	3318      	adds	r3, #24
 801552e:	79db      	ldrb	r3, [r3, #7]
 8015530:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015534:	b2db      	uxtb	r3, r3
}
 8015536:	4618      	mov	r0, r3
 8015538:	3710      	adds	r7, #16
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}
 801553e:	bf00      	nop
 8015540:	20009310 	.word	0x20009310

08015544 <tu_edpt_dir>:
{
 8015544:	b480      	push	{r7}
 8015546:	b083      	sub	sp, #12
 8015548:	af00      	add	r7, sp, #0
 801554a:	4603      	mov	r3, r0
 801554c:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801554e:	79fb      	ldrb	r3, [r7, #7]
 8015550:	09db      	lsrs	r3, r3, #7
 8015552:	b2db      	uxtb	r3, r3
}
 8015554:	4618      	mov	r0, r3
 8015556:	370c      	adds	r7, #12
 8015558:	46bd      	mov	sp, r7
 801555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555e:	4770      	bx	lr

08015560 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b084      	sub	sp, #16
 8015564:	af00      	add	r7, sp, #0
 8015566:	4603      	mov	r3, r0
 8015568:	6039      	str	r1, [r7, #0]
 801556a:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015574:	b2db      	uxtb	r3, r3
 8015576:	2b00      	cmp	r3, #0
 8015578:	d001      	beq.n	801557e <_status_stage_xact+0x1e>
 801557a:	2300      	movs	r3, #0
 801557c:	e000      	b.n	8015580 <_status_stage_xact+0x20>
 801557e:	2380      	movs	r3, #128	; 0x80
 8015580:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8015582:	7bf9      	ldrb	r1, [r7, #15]
 8015584:	79f8      	ldrb	r0, [r7, #7]
 8015586:	2300      	movs	r3, #0
 8015588:	2200      	movs	r2, #0
 801558a:	f7ff fe6b 	bl	8015264 <usbd_edpt_xfer>
 801558e:	4603      	mov	r3, r0
}
 8015590:	4618      	mov	r0, r3
 8015592:	3710      	adds	r7, #16
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}

08015598 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	4603      	mov	r3, r0
 80155a0:	6039      	str	r1, [r7, #0]
 80155a2:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 80155a4:	4b0b      	ldr	r3, [pc, #44]	; (80155d4 <tud_control_status+0x3c>)
 80155a6:	683a      	ldr	r2, [r7, #0]
 80155a8:	6810      	ldr	r0, [r2, #0]
 80155aa:	6851      	ldr	r1, [r2, #4]
 80155ac:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80155ae:	4b09      	ldr	r3, [pc, #36]	; (80155d4 <tud_control_status+0x3c>)
 80155b0:	2200      	movs	r2, #0
 80155b2:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80155b4:	4b07      	ldr	r3, [pc, #28]	; (80155d4 <tud_control_status+0x3c>)
 80155b6:	2200      	movs	r2, #0
 80155b8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 80155ba:	4b06      	ldr	r3, [pc, #24]	; (80155d4 <tud_control_status+0x3c>)
 80155bc:	2200      	movs	r2, #0
 80155be:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 80155c0:	79fb      	ldrb	r3, [r7, #7]
 80155c2:	6839      	ldr	r1, [r7, #0]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7ff ffcb 	bl	8015560 <_status_stage_xact>
 80155ca:	4603      	mov	r3, r0
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3708      	adds	r7, #8
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	20009454 	.word	0x20009454

080155d8 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b084      	sub	sp, #16
 80155dc:	af00      	add	r7, sp, #0
 80155de:	4603      	mov	r3, r0
 80155e0:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80155e2:	4b1a      	ldr	r3, [pc, #104]	; (801564c <_data_stage_xact+0x74>)
 80155e4:	899a      	ldrh	r2, [r3, #12]
 80155e6:	4b19      	ldr	r3, [pc, #100]	; (801564c <_data_stage_xact+0x74>)
 80155e8:	89db      	ldrh	r3, [r3, #14]
 80155ea:	1ad3      	subs	r3, r2, r3
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	817b      	strh	r3, [r7, #10]
 80155f0:	2340      	movs	r3, #64	; 0x40
 80155f2:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80155f4:	897a      	ldrh	r2, [r7, #10]
 80155f6:	893b      	ldrh	r3, [r7, #8]
 80155f8:	4293      	cmp	r3, r2
 80155fa:	bf28      	it	cs
 80155fc:	4613      	movcs	r3, r2
 80155fe:	b29b      	uxth	r3, r3
 8015600:	81bb      	strh	r3, [r7, #12]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8015602:	2300      	movs	r3, #0
 8015604:	73fb      	strb	r3, [r7, #15]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8015606:	4b11      	ldr	r3, [pc, #68]	; (801564c <_data_stage_xact+0x74>)
 8015608:	781b      	ldrb	r3, [r3, #0]
 801560a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801560e:	b2db      	uxtb	r3, r3
 8015610:	2b00      	cmp	r3, #0
 8015612:	d00b      	beq.n	801562c <_data_stage_xact+0x54>
  {
    ep_addr = EDPT_CTRL_IN;
 8015614:	2380      	movs	r3, #128	; 0x80
 8015616:	73fb      	strb	r3, [r7, #15]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 8015618:	89bb      	ldrh	r3, [r7, #12]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d006      	beq.n	801562c <_data_stage_xact+0x54>
 801561e:	4b0b      	ldr	r3, [pc, #44]	; (801564c <_data_stage_xact+0x74>)
 8015620:	689b      	ldr	r3, [r3, #8]
 8015622:	89ba      	ldrh	r2, [r7, #12]
 8015624:	4619      	mov	r1, r3
 8015626:	480a      	ldr	r0, [pc, #40]	; (8015650 <_data_stage_xact+0x78>)
 8015628:	f002 fa6d 	bl	8017b06 <memcpy>
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 801562c:	89bb      	ldrh	r3, [r7, #12]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d001      	beq.n	8015636 <_data_stage_xact+0x5e>
 8015632:	4a07      	ldr	r2, [pc, #28]	; (8015650 <_data_stage_xact+0x78>)
 8015634:	e000      	b.n	8015638 <_data_stage_xact+0x60>
 8015636:	2200      	movs	r2, #0
 8015638:	89bb      	ldrh	r3, [r7, #12]
 801563a:	7bf9      	ldrb	r1, [r7, #15]
 801563c:	79f8      	ldrb	r0, [r7, #7]
 801563e:	f7ff fe11 	bl	8015264 <usbd_edpt_xfer>
 8015642:	4603      	mov	r3, r0
}
 8015644:	4618      	mov	r0, r3
 8015646:	3710      	adds	r7, #16
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}
 801564c:	20009454 	.word	0x20009454
 8015650:	20009468 	.word	0x20009468

08015654 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b088      	sub	sp, #32
 8015658:	af00      	add	r7, sp, #0
 801565a:	60b9      	str	r1, [r7, #8]
 801565c:	607a      	str	r2, [r7, #4]
 801565e:	461a      	mov	r2, r3
 8015660:	4603      	mov	r3, r0
 8015662:	73fb      	strb	r3, [r7, #15]
 8015664:	4613      	mov	r3, r2
 8015666:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8015668:	4b37      	ldr	r3, [pc, #220]	; (8015748 <tud_control_xfer+0xf4>)
 801566a:	68ba      	ldr	r2, [r7, #8]
 801566c:	6810      	ldr	r0, [r2, #0]
 801566e:	6851      	ldr	r1, [r2, #4]
 8015670:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8015672:	4a35      	ldr	r2, [pc, #212]	; (8015748 <tud_control_xfer+0xf4>)
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8015678:	4b33      	ldr	r3, [pc, #204]	; (8015748 <tud_control_xfer+0xf4>)
 801567a:	2200      	movs	r2, #0
 801567c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	88db      	ldrh	r3, [r3, #6]
 8015682:	b29a      	uxth	r2, r3
 8015684:	89bb      	ldrh	r3, [r7, #12]
 8015686:	827b      	strh	r3, [r7, #18]
 8015688:	4613      	mov	r3, r2
 801568a:	823b      	strh	r3, [r7, #16]
 801568c:	8a7a      	ldrh	r2, [r7, #18]
 801568e:	8a3b      	ldrh	r3, [r7, #16]
 8015690:	4293      	cmp	r3, r2
 8015692:	bf28      	it	cs
 8015694:	4613      	movcs	r3, r2
 8015696:	b29a      	uxth	r2, r3
 8015698:	4b2b      	ldr	r3, [pc, #172]	; (8015748 <tud_control_xfer+0xf4>)
 801569a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	88db      	ldrh	r3, [r3, #6]
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d030      	beq.n	8015708 <tud_control_xfer+0xb4>
  {
    if(_ctrl_xfer.data_len > 0U)
 80156a6:	4b28      	ldr	r3, [pc, #160]	; (8015748 <tud_control_xfer+0xf4>)
 80156a8:	899b      	ldrh	r3, [r3, #12]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d012      	beq.n	80156d4 <tud_control_xfer+0x80>
    {
      TU_ASSERT(buffer);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d10f      	bne.n	80156d4 <tud_control_xfer+0x80>
 80156b4:	2273      	movs	r2, #115	; 0x73
 80156b6:	4925      	ldr	r1, [pc, #148]	; (801574c <tud_control_xfer+0xf8>)
 80156b8:	4825      	ldr	r0, [pc, #148]	; (8015750 <tud_control_xfer+0xfc>)
 80156ba:	f002 fae9 	bl	8017c90 <iprintf>
 80156be:	4b25      	ldr	r3, [pc, #148]	; (8015754 <tud_control_xfer+0x100>)
 80156c0:	61bb      	str	r3, [r7, #24]
 80156c2:	69bb      	ldr	r3, [r7, #24]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	f003 0301 	and.w	r3, r3, #1
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d000      	beq.n	80156d0 <tud_control_xfer+0x7c>
 80156ce:	be00      	bkpt	0x0000
 80156d0:	2300      	movs	r3, #0
 80156d2:	e035      	b.n	8015740 <tud_control_xfer+0xec>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 80156d4:	7bfb      	ldrb	r3, [r7, #15]
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7ff ff7e 	bl	80155d8 <_data_stage_xact>
 80156dc:	4603      	mov	r3, r0
 80156de:	f083 0301 	eor.w	r3, r3, #1
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d02a      	beq.n	801573e <tud_control_xfer+0xea>
 80156e8:	2279      	movs	r2, #121	; 0x79
 80156ea:	4918      	ldr	r1, [pc, #96]	; (801574c <tud_control_xfer+0xf8>)
 80156ec:	4818      	ldr	r0, [pc, #96]	; (8015750 <tud_control_xfer+0xfc>)
 80156ee:	f002 facf 	bl	8017c90 <iprintf>
 80156f2:	4b18      	ldr	r3, [pc, #96]	; (8015754 <tud_control_xfer+0x100>)
 80156f4:	617b      	str	r3, [r7, #20]
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f003 0301 	and.w	r3, r3, #1
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d000      	beq.n	8015704 <tud_control_xfer+0xb0>
 8015702:	be00      	bkpt	0x0000
 8015704:	2300      	movs	r3, #0
 8015706:	e01b      	b.n	8015740 <tud_control_xfer+0xec>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8015708:	7bfb      	ldrb	r3, [r7, #15]
 801570a:	68b9      	ldr	r1, [r7, #8]
 801570c:	4618      	mov	r0, r3
 801570e:	f7ff ff27 	bl	8015560 <_status_stage_xact>
 8015712:	4603      	mov	r3, r0
 8015714:	f083 0301 	eor.w	r3, r3, #1
 8015718:	b2db      	uxtb	r3, r3
 801571a:	2b00      	cmp	r3, #0
 801571c:	d00f      	beq.n	801573e <tud_control_xfer+0xea>
 801571e:	227e      	movs	r2, #126	; 0x7e
 8015720:	490a      	ldr	r1, [pc, #40]	; (801574c <tud_control_xfer+0xf8>)
 8015722:	480b      	ldr	r0, [pc, #44]	; (8015750 <tud_control_xfer+0xfc>)
 8015724:	f002 fab4 	bl	8017c90 <iprintf>
 8015728:	4b0a      	ldr	r3, [pc, #40]	; (8015754 <tud_control_xfer+0x100>)
 801572a:	61fb      	str	r3, [r7, #28]
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	f003 0301 	and.w	r3, r3, #1
 8015734:	2b00      	cmp	r3, #0
 8015736:	d000      	beq.n	801573a <tud_control_xfer+0xe6>
 8015738:	be00      	bkpt	0x0000
 801573a:	2300      	movs	r3, #0
 801573c:	e000      	b.n	8015740 <tud_control_xfer+0xec>
  }

  return true;
 801573e:	2301      	movs	r3, #1
}
 8015740:	4618      	mov	r0, r3
 8015742:	3720      	adds	r7, #32
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	20009454 	.word	0x20009454
 801574c:	0801b518 	.word	0x0801b518
 8015750:	0801a48c 	.word	0x0801a48c
 8015754:	e000edf0 	.word	0xe000edf0

08015758 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 801575c:	2214      	movs	r2, #20
 801575e:	2100      	movs	r1, #0
 8015760:	4802      	ldr	r0, [pc, #8]	; (801576c <usbd_control_reset+0x14>)
 8015762:	f002 f9f8 	bl	8017b56 <memset>
}
 8015766:	bf00      	nop
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	20009454 	.word	0x20009454

08015770 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8015770:	b480      	push	{r7}
 8015772:	b083      	sub	sp, #12
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8015778:	4a04      	ldr	r2, [pc, #16]	; (801578c <usbd_control_set_complete_callback+0x1c>)
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	6113      	str	r3, [r2, #16]
}
 801577e:	bf00      	nop
 8015780:	370c      	adds	r7, #12
 8015782:	46bd      	mov	sp, r7
 8015784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015788:	4770      	bx	lr
 801578a:	bf00      	nop
 801578c:	20009454 	.word	0x20009454

08015790 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8015790:	b480      	push	{r7}
 8015792:	b083      	sub	sp, #12
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8015798:	4b09      	ldr	r3, [pc, #36]	; (80157c0 <usbd_control_set_request+0x30>)
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	6810      	ldr	r0, [r2, #0]
 801579e:	6851      	ldr	r1, [r2, #4]
 80157a0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80157a2:	4b07      	ldr	r3, [pc, #28]	; (80157c0 <usbd_control_set_request+0x30>)
 80157a4:	2200      	movs	r2, #0
 80157a6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80157a8:	4b05      	ldr	r3, [pc, #20]	; (80157c0 <usbd_control_set_request+0x30>)
 80157aa:	2200      	movs	r2, #0
 80157ac:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 80157ae:	4b04      	ldr	r3, [pc, #16]	; (80157c0 <usbd_control_set_request+0x30>)
 80157b0:	2200      	movs	r2, #0
 80157b2:	819a      	strh	r2, [r3, #12]
}
 80157b4:	bf00      	nop
 80157b6:	370c      	adds	r7, #12
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr
 80157c0:	20009454 	.word	0x20009454

080157c4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b086      	sub	sp, #24
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	603b      	str	r3, [r7, #0]
 80157cc:	4603      	mov	r3, r0
 80157ce:	71fb      	strb	r3, [r7, #7]
 80157d0:	460b      	mov	r3, r1
 80157d2:	71bb      	strb	r3, [r7, #6]
 80157d4:	4613      	mov	r3, r2
 80157d6:	717b      	strb	r3, [r7, #5]
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80157d8:	79bb      	ldrb	r3, [r7, #6]
 80157da:	4618      	mov	r0, r3
 80157dc:	f7ff feb2 	bl	8015544 <tu_edpt_dir>
 80157e0:	4603      	mov	r3, r0
 80157e2:	461a      	mov	r2, r3
 80157e4:	4b5c      	ldr	r3, [pc, #368]	; (8015958 <usbd_control_xfer_cb+0x194>)
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80157ec:	b2db      	uxtb	r3, r3
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d026      	beq.n	8015840 <usbd_control_xfer_cb+0x7c>
  {
    TU_ASSERT(0 == xferred_bytes);
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d00f      	beq.n	8015818 <usbd_control_xfer_cb+0x54>
 80157f8:	22ab      	movs	r2, #171	; 0xab
 80157fa:	4958      	ldr	r1, [pc, #352]	; (801595c <usbd_control_xfer_cb+0x198>)
 80157fc:	4858      	ldr	r0, [pc, #352]	; (8015960 <usbd_control_xfer_cb+0x19c>)
 80157fe:	f002 fa47 	bl	8017c90 <iprintf>
 8015802:	4b58      	ldr	r3, [pc, #352]	; (8015964 <usbd_control_xfer_cb+0x1a0>)
 8015804:	60bb      	str	r3, [r7, #8]
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	f003 0301 	and.w	r3, r3, #1
 801580e:	2b00      	cmp	r3, #0
 8015810:	d000      	beq.n	8015814 <usbd_control_xfer_cb+0x50>
 8015812:	be00      	bkpt	0x0000
 8015814:	2300      	movs	r3, #0
 8015816:	e09b      	b.n	8015950 <usbd_control_xfer_cb+0x18c>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8015818:	4b53      	ldr	r3, [pc, #332]	; (8015968 <usbd_control_xfer_cb+0x1a4>)
 801581a:	2b00      	cmp	r3, #0
 801581c:	d004      	beq.n	8015828 <usbd_control_xfer_cb+0x64>
 801581e:	79fb      	ldrb	r3, [r7, #7]
 8015820:	494d      	ldr	r1, [pc, #308]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015822:	4618      	mov	r0, r3
 8015824:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8015828:	4b4b      	ldr	r3, [pc, #300]	; (8015958 <usbd_control_xfer_cb+0x194>)
 801582a:	691b      	ldr	r3, [r3, #16]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d005      	beq.n	801583c <usbd_control_xfer_cb+0x78>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8015830:	4b49      	ldr	r3, [pc, #292]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015832:	691b      	ldr	r3, [r3, #16]
 8015834:	79f8      	ldrb	r0, [r7, #7]
 8015836:	4a48      	ldr	r2, [pc, #288]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015838:	2102      	movs	r1, #2
 801583a:	4798      	blx	r3
    }

    return true;
 801583c:	2301      	movs	r3, #1
 801583e:	e087      	b.n	8015950 <usbd_control_xfer_cb+0x18c>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8015840:	4b45      	ldr	r3, [pc, #276]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015842:	781b      	ldrb	r3, [r3, #0]
 8015844:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015848:	b2db      	uxtb	r3, r3
 801584a:	2b00      	cmp	r3, #0
 801584c:	d111      	bne.n	8015872 <usbd_control_xfer_cb+0xae>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 801584e:	4b42      	ldr	r3, [pc, #264]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015850:	689b      	ldr	r3, [r3, #8]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d101      	bne.n	801585a <usbd_control_xfer_cb+0x96>
 8015856:	2300      	movs	r3, #0
 8015858:	e07a      	b.n	8015950 <usbd_control_xfer_cb+0x18c>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 801585a:	4b3f      	ldr	r3, [pc, #252]	; (8015958 <usbd_control_xfer_cb+0x194>)
 801585c:	689b      	ldr	r3, [r3, #8]
 801585e:	683a      	ldr	r2, [r7, #0]
 8015860:	4942      	ldr	r1, [pc, #264]	; (801596c <usbd_control_xfer_cb+0x1a8>)
 8015862:	4618      	mov	r0, r3
 8015864:	f002 f94f 	bl	8017b06 <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
 8015868:	2202      	movs	r2, #2
 801586a:	6839      	ldr	r1, [r7, #0]
 801586c:	483f      	ldr	r0, [pc, #252]	; (801596c <usbd_control_xfer_cb+0x1a8>)
 801586e:	f001 ff69 	bl	8017744 <tu_print_mem>
  }

  _ctrl_xfer.total_xferred += xferred_bytes;
 8015872:	4b39      	ldr	r3, [pc, #228]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015874:	89da      	ldrh	r2, [r3, #14]
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	b29b      	uxth	r3, r3
 801587a:	4413      	add	r3, r2
 801587c:	b29a      	uxth	r2, r3
 801587e:	4b36      	ldr	r3, [pc, #216]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015880:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8015882:	4b35      	ldr	r3, [pc, #212]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015884:	689a      	ldr	r2, [r3, #8]
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	4413      	add	r3, r2
 801588a:	4a33      	ldr	r2, [pc, #204]	; (8015958 <usbd_control_xfer_cb+0x194>)
 801588c:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 801588e:	4b32      	ldr	r3, [pc, #200]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015890:	88da      	ldrh	r2, [r3, #6]
 8015892:	4b31      	ldr	r3, [pc, #196]	; (8015958 <usbd_control_xfer_cb+0x194>)
 8015894:	89db      	ldrh	r3, [r3, #14]
 8015896:	429a      	cmp	r2, r3
 8015898:	d002      	beq.n	80158a0 <usbd_control_xfer_cb+0xdc>
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	2b3f      	cmp	r3, #63	; 0x3f
 801589e:	d83b      	bhi.n	8015918 <usbd_control_xfer_cb+0x154>
  {
    // DATA stage is complete
    bool is_ok = true;
 80158a0:	2301      	movs	r3, #1
 80158a2:	75fb      	strb	r3, [r7, #23]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 80158a4:	4b2c      	ldr	r3, [pc, #176]	; (8015958 <usbd_control_xfer_cb+0x194>)
 80158a6:	691b      	ldr	r3, [r3, #16]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d00c      	beq.n	80158c6 <usbd_control_xfer_cb+0x102>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
 80158ac:	4b2a      	ldr	r3, [pc, #168]	; (8015958 <usbd_control_xfer_cb+0x194>)
 80158ae:	691b      	ldr	r3, [r3, #16]
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fe fa19 	bl	8013ce8 <usbd_driver_print_control_complete_name>
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80158b6:	4b28      	ldr	r3, [pc, #160]	; (8015958 <usbd_control_xfer_cb+0x194>)
 80158b8:	691b      	ldr	r3, [r3, #16]
 80158ba:	79f8      	ldrb	r0, [r7, #7]
 80158bc:	4a26      	ldr	r2, [pc, #152]	; (8015958 <usbd_control_xfer_cb+0x194>)
 80158be:	2101      	movs	r1, #1
 80158c0:	4798      	blx	r3
 80158c2:	4603      	mov	r3, r0
 80158c4:	75fb      	strb	r3, [r7, #23]
    }

    if ( is_ok )
 80158c6:	7dfb      	ldrb	r3, [r7, #23]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d01a      	beq.n	8015902 <usbd_control_xfer_cb+0x13e>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 80158cc:	79fb      	ldrb	r3, [r7, #7]
 80158ce:	4922      	ldr	r1, [pc, #136]	; (8015958 <usbd_control_xfer_cb+0x194>)
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7ff fe45 	bl	8015560 <_status_stage_xact>
 80158d6:	4603      	mov	r3, r0
 80158d8:	f083 0301 	eor.w	r3, r3, #1
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d034      	beq.n	801594c <usbd_control_xfer_cb+0x188>
 80158e2:	22d8      	movs	r2, #216	; 0xd8
 80158e4:	491d      	ldr	r1, [pc, #116]	; (801595c <usbd_control_xfer_cb+0x198>)
 80158e6:	481e      	ldr	r0, [pc, #120]	; (8015960 <usbd_control_xfer_cb+0x19c>)
 80158e8:	f002 f9d2 	bl	8017c90 <iprintf>
 80158ec:	4b1d      	ldr	r3, [pc, #116]	; (8015964 <usbd_control_xfer_cb+0x1a0>)
 80158ee:	60fb      	str	r3, [r7, #12]
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	f003 0301 	and.w	r3, r3, #1
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d000      	beq.n	80158fe <usbd_control_xfer_cb+0x13a>
 80158fc:	be00      	bkpt	0x0000
 80158fe:	2300      	movs	r3, #0
 8015900:	e026      	b.n	8015950 <usbd_control_xfer_cb+0x18c>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8015902:	79fb      	ldrb	r3, [r7, #7]
 8015904:	2100      	movs	r1, #0
 8015906:	4618      	mov	r0, r3
 8015908:	f001 f980 	bl	8016c0c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 801590c:	79fb      	ldrb	r3, [r7, #7]
 801590e:	2180      	movs	r1, #128	; 0x80
 8015910:	4618      	mov	r0, r3
 8015912:	f001 f97b 	bl	8016c0c <dcd_edpt_stall>
  {
 8015916:	e019      	b.n	801594c <usbd_control_xfer_cb+0x188>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8015918:	79fb      	ldrb	r3, [r7, #7]
 801591a:	4618      	mov	r0, r3
 801591c:	f7ff fe5c 	bl	80155d8 <_data_stage_xact>
 8015920:	4603      	mov	r3, r0
 8015922:	f083 0301 	eor.w	r3, r3, #1
 8015926:	b2db      	uxtb	r3, r3
 8015928:	2b00      	cmp	r3, #0
 801592a:	d010      	beq.n	801594e <usbd_control_xfer_cb+0x18a>
 801592c:	22e3      	movs	r2, #227	; 0xe3
 801592e:	490b      	ldr	r1, [pc, #44]	; (801595c <usbd_control_xfer_cb+0x198>)
 8015930:	480b      	ldr	r0, [pc, #44]	; (8015960 <usbd_control_xfer_cb+0x19c>)
 8015932:	f002 f9ad 	bl	8017c90 <iprintf>
 8015936:	4b0b      	ldr	r3, [pc, #44]	; (8015964 <usbd_control_xfer_cb+0x1a0>)
 8015938:	613b      	str	r3, [r7, #16]
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f003 0301 	and.w	r3, r3, #1
 8015942:	2b00      	cmp	r3, #0
 8015944:	d000      	beq.n	8015948 <usbd_control_xfer_cb+0x184>
 8015946:	be00      	bkpt	0x0000
 8015948:	2300      	movs	r3, #0
 801594a:	e001      	b.n	8015950 <usbd_control_xfer_cb+0x18c>
  {
 801594c:	bf00      	nop
  }

  return true;
 801594e:	2301      	movs	r3, #1
}
 8015950:	4618      	mov	r0, r3
 8015952:	3718      	adds	r7, #24
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}
 8015958:	20009454 	.word	0x20009454
 801595c:	0801b52c 	.word	0x0801b52c
 8015960:	0801a48c 	.word	0x0801a48c
 8015964:	e000edf0 	.word	0xe000edf0
 8015968:	00000000 	.word	0x00000000
 801596c:	20009468 	.word	0x20009468

08015970 <tu_edpt_dir>:
{
 8015970:	b480      	push	{r7}
 8015972:	b083      	sub	sp, #12
 8015974:	af00      	add	r7, sp, #0
 8015976:	4603      	mov	r3, r0
 8015978:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801597a:	79fb      	ldrb	r3, [r7, #7]
 801597c:	09db      	lsrs	r3, r3, #7
 801597e:	b2db      	uxtb	r3, r3
}
 8015980:	4618      	mov	r0, r3
 8015982:	370c      	adds	r7, #12
 8015984:	46bd      	mov	sp, r7
 8015986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598a:	4770      	bx	lr

0801598c <tu_edpt_number>:
{
 801598c:	b480      	push	{r7}
 801598e:	b083      	sub	sp, #12
 8015990:	af00      	add	r7, sp, #0
 8015992:	4603      	mov	r3, r0
 8015994:	71fb      	strb	r3, [r7, #7]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8015996:	79fb      	ldrb	r3, [r7, #7]
 8015998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801599c:	b2db      	uxtb	r3, r3
}
 801599e:	4618      	mov	r0, r3
 80159a0:	370c      	adds	r7, #12
 80159a2:	46bd      	mov	sp, r7
 80159a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a8:	4770      	bx	lr

080159aa <tu_edpt_addr>:
{
 80159aa:	b480      	push	{r7}
 80159ac:	b083      	sub	sp, #12
 80159ae:	af00      	add	r7, sp, #0
 80159b0:	4603      	mov	r3, r0
 80159b2:	460a      	mov	r2, r1
 80159b4:	71fb      	strb	r3, [r7, #7]
 80159b6:	4613      	mov	r3, r2
 80159b8:	71bb      	strb	r3, [r7, #6]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80159ba:	79bb      	ldrb	r3, [r7, #6]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d002      	beq.n	80159c6 <tu_edpt_addr+0x1c>
 80159c0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80159c4:	e000      	b.n	80159c8 <tu_edpt_addr+0x1e>
 80159c6:	2200      	movs	r2, #0
 80159c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159cc:	4313      	orrs	r3, r2
 80159ce:	b25b      	sxtb	r3, r3
 80159d0:	b2db      	uxtb	r3, r3
}
 80159d2:	4618      	mov	r0, r3
 80159d4:	370c      	adds	r7, #12
 80159d6:	46bd      	mov	sp, r7
 80159d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159dc:	4770      	bx	lr

080159de <tu_edpt_packet_size>:
{
 80159de:	b480      	push	{r7}
 80159e0:	b083      	sub	sp, #12
 80159e2:	af00      	add	r7, sp, #0
 80159e4:	6078      	str	r0, [r7, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	889b      	ldrh	r3, [r3, #4]
 80159ea:	b29b      	uxth	r3, r3
 80159ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159f0:	b29b      	uxth	r3, r3
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	370c      	adds	r7, #12
 80159f6:	46bd      	mov	sp, r7
 80159f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fc:	4770      	bx	lr
	...

08015a00 <__NVIC_EnableIRQ>:
{
 8015a00:	b480      	push	{r7}
 8015a02:	b083      	sub	sp, #12
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	4603      	mov	r3, r0
 8015a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	db0b      	blt.n	8015a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015a12:	79fb      	ldrb	r3, [r7, #7]
 8015a14:	f003 021f 	and.w	r2, r3, #31
 8015a18:	4907      	ldr	r1, [pc, #28]	; (8015a38 <__NVIC_EnableIRQ+0x38>)
 8015a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a1e:	095b      	lsrs	r3, r3, #5
 8015a20:	2001      	movs	r0, #1
 8015a22:	fa00 f202 	lsl.w	r2, r0, r2
 8015a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015a2a:	bf00      	nop
 8015a2c:	370c      	adds	r7, #12
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a34:	4770      	bx	lr
 8015a36:	bf00      	nop
 8015a38:	e000e100 	.word	0xe000e100

08015a3c <dwc2_phy_init>:
  while ( count-- ) __NOP();
}

// MCU specific PHY init, called BEFORE core reset
static inline void dwc2_phy_init(dwc2_regs_t * dwc2, uint8_t hs_phy_type)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b083      	sub	sp, #12
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	460b      	mov	r3, r1
 8015a46:	70fb      	strb	r3, [r7, #3]
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
 8015a48:	78fb      	ldrb	r3, [r7, #3]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d106      	bne.n	8015a5c <dwc2_phy_init+0x20>
  {
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	639a      	str	r2, [r3, #56]	; 0x38
      // Enable PLL internal PHY
      USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
#endif
    }
  }
}
 8015a5a:	e005      	b.n	8015a68 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	639a      	str	r2, [r3, #56]	; 0x38
}
 8015a68:	bf00      	nop
 8015a6a:	370c      	adds	r7, #12
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a72:	4770      	bx	lr

08015a74 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t * dwc2, uint8_t hs_phy_type)
{
 8015a74:	b480      	push	{r7}
 8015a76:	b085      	sub	sp, #20
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	460b      	mov	r3, r1
 8015a7e:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if ( hs_phy_type == HS_PHY_TYPE_NONE )
 8015a80:	78fb      	ldrb	r3, [r7, #3]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d152      	bne.n	8015b2c <dwc2_phy_update+0xb8>
  {
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if ( SystemCoreClock >= 32000000u )
 8015a86:	4b2c      	ldr	r3, [pc, #176]	; (8015b38 <dwc2_phy_update+0xc4>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	4a2c      	ldr	r2, [pc, #176]	; (8015b3c <dwc2_phy_update+0xc8>)
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	d302      	bcc.n	8015a96 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8015a90:	2306      	movs	r3, #6
 8015a92:	60fb      	str	r3, [r7, #12]
 8015a94:	e041      	b.n	8015b1a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 27500000u )
 8015a96:	4b28      	ldr	r3, [pc, #160]	; (8015b38 <dwc2_phy_update+0xc4>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	4a29      	ldr	r2, [pc, #164]	; (8015b40 <dwc2_phy_update+0xcc>)
 8015a9c:	4293      	cmp	r3, r2
 8015a9e:	d902      	bls.n	8015aa6 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8015aa0:	2307      	movs	r3, #7
 8015aa2:	60fb      	str	r3, [r7, #12]
 8015aa4:	e039      	b.n	8015b1a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 24000000u )
 8015aa6:	4b24      	ldr	r3, [pc, #144]	; (8015b38 <dwc2_phy_update+0xc4>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	4a26      	ldr	r2, [pc, #152]	; (8015b44 <dwc2_phy_update+0xd0>)
 8015aac:	4293      	cmp	r3, r2
 8015aae:	d302      	bcc.n	8015ab6 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8015ab0:	2308      	movs	r3, #8
 8015ab2:	60fb      	str	r3, [r7, #12]
 8015ab4:	e031      	b.n	8015b1a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 21800000u )
 8015ab6:	4b20      	ldr	r3, [pc, #128]	; (8015b38 <dwc2_phy_update+0xc4>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	4a23      	ldr	r2, [pc, #140]	; (8015b48 <dwc2_phy_update+0xd4>)
 8015abc:	4293      	cmp	r3, r2
 8015abe:	d902      	bls.n	8015ac6 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8015ac0:	2309      	movs	r3, #9
 8015ac2:	60fb      	str	r3, [r7, #12]
 8015ac4:	e029      	b.n	8015b1a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 20000000u )
 8015ac6:	4b1c      	ldr	r3, [pc, #112]	; (8015b38 <dwc2_phy_update+0xc4>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	4a20      	ldr	r2, [pc, #128]	; (8015b4c <dwc2_phy_update+0xd8>)
 8015acc:	4293      	cmp	r3, r2
 8015ace:	d902      	bls.n	8015ad6 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8015ad0:	230a      	movs	r3, #10
 8015ad2:	60fb      	str	r3, [r7, #12]
 8015ad4:	e021      	b.n	8015b1a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 18500000u )
 8015ad6:	4b18      	ldr	r3, [pc, #96]	; (8015b38 <dwc2_phy_update+0xc4>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	4a1d      	ldr	r2, [pc, #116]	; (8015b50 <dwc2_phy_update+0xdc>)
 8015adc:	4293      	cmp	r3, r2
 8015ade:	d902      	bls.n	8015ae6 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8015ae0:	230b      	movs	r3, #11
 8015ae2:	60fb      	str	r3, [r7, #12]
 8015ae4:	e019      	b.n	8015b1a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 17200000u )
 8015ae6:	4b14      	ldr	r3, [pc, #80]	; (8015b38 <dwc2_phy_update+0xc4>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	4a1a      	ldr	r2, [pc, #104]	; (8015b54 <dwc2_phy_update+0xe0>)
 8015aec:	4293      	cmp	r3, r2
 8015aee:	d302      	bcc.n	8015af6 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8015af0:	230c      	movs	r3, #12
 8015af2:	60fb      	str	r3, [r7, #12]
 8015af4:	e011      	b.n	8015b1a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 16000000u )
 8015af6:	4b10      	ldr	r3, [pc, #64]	; (8015b38 <dwc2_phy_update+0xc4>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	4a17      	ldr	r2, [pc, #92]	; (8015b58 <dwc2_phy_update+0xe4>)
 8015afc:	4293      	cmp	r3, r2
 8015afe:	d302      	bcc.n	8015b06 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8015b00:	230d      	movs	r3, #13
 8015b02:	60fb      	str	r3, [r7, #12]
 8015b04:	e009      	b.n	8015b1a <dwc2_phy_update+0xa6>
    else if ( SystemCoreClock >= 15000000u )
 8015b06:	4b0c      	ldr	r3, [pc, #48]	; (8015b38 <dwc2_phy_update+0xc4>)
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	4a14      	ldr	r2, [pc, #80]	; (8015b5c <dwc2_phy_update+0xe8>)
 8015b0c:	4293      	cmp	r3, r2
 8015b0e:	d302      	bcc.n	8015b16 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8015b10:	230e      	movs	r3, #14
 8015b12:	60fb      	str	r3, [r7, #12]
 8015b14:	e001      	b.n	8015b1a <dwc2_phy_update+0xa6>
    else
      turnaround = 0xFu;
 8015b16:	230f      	movs	r3, #15
 8015b18:	60fb      	str	r3, [r7, #12]

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	68db      	ldr	r3, [r3, #12]
 8015b1e:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	029b      	lsls	r3, r3, #10
 8015b26:	431a      	orrs	r2, r3
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	60da      	str	r2, [r3, #12]
  }
}
 8015b2c:	bf00      	nop
 8015b2e:	3714      	adds	r7, #20
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr
 8015b38:	20000000 	.word	0x20000000
 8015b3c:	01e84800 	.word	0x01e84800
 8015b40:	01a39ddf 	.word	0x01a39ddf
 8015b44:	016e3600 	.word	0x016e3600
 8015b48:	014ca43f 	.word	0x014ca43f
 8015b4c:	01312cff 	.word	0x01312cff
 8015b50:	011a499f 	.word	0x011a499f
 8015b54:	01067380 	.word	0x01067380
 8015b58:	00f42400 	.word	0x00f42400
 8015b5c:	00e4e1c0 	.word	0x00e4e1c0

08015b60 <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool     _out_ep_closed;                   // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8015b60:	b480      	push	{r7}
 8015b62:	b083      	sub	sp, #12
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	4603      	mov	r3, r0
 8015b68:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*DWC2_EP_MAX;
 8015b6a:	88fb      	ldrh	r3, [r7, #6]
 8015b6c:	089b      	lsrs	r3, r3, #2
 8015b6e:	b29b      	uxth	r3, r3
 8015b70:	005b      	lsls	r3, r3, #1
 8015b72:	b29b      	uxth	r3, r3
 8015b74:	3317      	adds	r3, #23
 8015b76:	b29b      	uxth	r3, r3
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	370c      	adds	r7, #12
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b82:	4770      	bx	lr

08015b84 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b086      	sub	sp, #24
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8015b8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8015b92:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8015b94:	2300      	movs	r3, #0
 8015b96:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < DWC2_EP_MAX; epnum++)
 8015b98:	2300      	movs	r3, #0
 8015b9a:	757b      	strb	r3, [r7, #21]
 8015b9c:	e013      	b.n	8015bc6 <update_grxfsiz+0x42>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8015b9e:	7d7b      	ldrb	r3, [r7, #21]
 8015ba0:	4a10      	ldr	r2, [pc, #64]	; (8015be4 <update_grxfsiz+0x60>)
 8015ba2:	015b      	lsls	r3, r3, #5
 8015ba4:	4413      	add	r3, r2
 8015ba6:	330a      	adds	r3, #10
 8015ba8:	881a      	ldrh	r2, [r3, #0]
 8015baa:	8afb      	ldrh	r3, [r7, #22]
 8015bac:	81fb      	strh	r3, [r7, #14]
 8015bae:	4613      	mov	r3, r2
 8015bb0:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8015bb2:	89fa      	ldrh	r2, [r7, #14]
 8015bb4:	89bb      	ldrh	r3, [r7, #12]
 8015bb6:	4293      	cmp	r3, r2
 8015bb8:	bf38      	it	cc
 8015bba:	4613      	movcc	r3, r2
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < DWC2_EP_MAX; epnum++)
 8015bc0:	7d7b      	ldrb	r3, [r7, #21]
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	757b      	strb	r3, [r7, #21]
 8015bc6:	7d7b      	ldrb	r3, [r7, #21]
 8015bc8:	2b03      	cmp	r3, #3
 8015bca:	d9e8      	bls.n	8015b9e <update_grxfsiz+0x1a>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_rx_ff_size(max_epsize);
 8015bcc:	8afb      	ldrh	r3, [r7, #22]
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7ff ffc6 	bl	8015b60 <calc_rx_ff_size>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	693b      	ldr	r3, [r7, #16]
 8015bda:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015bdc:	bf00      	nop
 8015bde:	3718      	adds	r7, #24
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}
 8015be4:	200094b0 	.word	0x200094b0

08015be8 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b084      	sub	sp, #16
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	4603      	mov	r3, r0
 8015bf0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8015bf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8015bf6:	60bb      	str	r3, [r7, #8]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8015bf8:	2280      	movs	r2, #128	; 0x80
 8015bfa:	2100      	movs	r1, #0
 8015bfc:	4831      	ldr	r0, [pc, #196]	; (8015cc4 <bus_reset+0xdc>)
 8015bfe:	f001 ffaa 	bl	8017b56 <memset>
  _out_ep_closed = false;
 8015c02:	4b31      	ldr	r3, [pc, #196]	; (8015cc8 <bus_reset+0xe0>)
 8015c04:	2200      	movs	r2, #0
 8015c06:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8015c0e:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8015c12:	68bb      	ldr	r3, [r7, #8]
 8015c14:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // 1. NAK for all OUT endpoints
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 8015c18:	2300      	movs	r3, #0
 8015c1a:	73fb      	strb	r3, [r7, #15]
 8015c1c:	e010      	b.n	8015c40 <bus_reset+0x58>
  {
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8015c1e:	7bfb      	ldrb	r3, [r7, #15]
 8015c20:	68ba      	ldr	r2, [r7, #8]
 8015c22:	3358      	adds	r3, #88	; 0x58
 8015c24:	015b      	lsls	r3, r3, #5
 8015c26:	4413      	add	r3, r2
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	7bfb      	ldrb	r3, [r7, #15]
 8015c2c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8015c30:	68b9      	ldr	r1, [r7, #8]
 8015c32:	3358      	adds	r3, #88	; 0x58
 8015c34:	015b      	lsls	r3, r3, #5
 8015c36:	440b      	add	r3, r1
 8015c38:	601a      	str	r2, [r3, #0]
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 8015c3a:	7bfb      	ldrb	r3, [r7, #15]
 8015c3c:	3301      	adds	r3, #1
 8015c3e:	73fb      	strb	r3, [r7, #15]
 8015c40:	7bfb      	ldrb	r3, [r7, #15]
 8015c42:	2b03      	cmp	r3, #3
 8015c44:	d9eb      	bls.n	8015c1e <bus_reset+0x36>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8015c46:	68bb      	ldr	r3, [r7, #8]
 8015c48:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8015c4c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  dwc2->doepmsk  = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8015c50:	68bb      	ldr	r3, [r7, #8]
 8015c52:	2209      	movs	r2, #9
 8015c54:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  dwc2->diepmsk  = DIEPMSK_TOM   | DIEPMSK_XFRCM;
 8015c58:	68bb      	ldr	r3, [r7, #8]
 8015c5a:	2209      	movs	r2, #9
 8015c5c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  dwc2->grxfsiz = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8015c60:	2040      	movs	r0, #64	; 0x40
 8015c62:	f7ff ff7d 	bl	8015b60 <calc_rx_ff_size>
 8015c66:	4603      	mov	r3, r0
 8015c68:	461a      	mov	r2, r3
 8015c6a:	68bb      	ldr	r3, [r7, #8]
 8015c6c:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 8015c6e:	4b17      	ldr	r3, [pc, #92]	; (8015ccc <bus_reset+0xe4>)
 8015c70:	2210      	movs	r2, #16
 8015c72:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (DWC2_EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8015c74:	4b15      	ldr	r3, [pc, #84]	; (8015ccc <bus_reset+0xe4>)
 8015c76:	881b      	ldrh	r3, [r3, #0]
 8015c78:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8015c7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8015c8a:	f023 0203 	bic.w	r2, r3, #3
 8015c8e:	68bb      	ldr	r3, [r7, #8]
 8015c90:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8015c94:	4b0b      	ldr	r3, [pc, #44]	; (8015cc4 <bus_reset+0xdc>)
 8015c96:	2240      	movs	r2, #64	; 0x40
 8015c98:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN ].max_size = 64;
 8015c9a:	4b0a      	ldr	r3, [pc, #40]	; (8015cc4 <bus_reset+0xdc>)
 8015c9c:	2240      	movs	r2, #64	; 0x40
 8015c9e:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8015ca0:	68bb      	ldr	r3, [r7, #8]
 8015ca2:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	; 0xb10
 8015ca6:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8015caa:	68bb      	ldr	r3, [r7, #8]
 8015cac:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	699b      	ldr	r3, [r3, #24]
 8015cb4:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	619a      	str	r2, [r3, #24]
}
 8015cbc:	bf00      	nop
 8015cbe:	3710      	adds	r7, #16
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	200094b0 	.word	0x200094b0
 8015cc8:	20009536 	.word	0x20009536
 8015ccc:	20009534 	.word	0x20009534

08015cd0 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 8015cd0:	b490      	push	{r4, r7}
 8015cd2:	b08a      	sub	sp, #40	; 0x28
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	4608      	mov	r0, r1
 8015cda:	4611      	mov	r1, r2
 8015cdc:	461a      	mov	r2, r3
 8015cde:	4623      	mov	r3, r4
 8015ce0:	71fb      	strb	r3, [r7, #7]
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	71bb      	strb	r3, [r7, #6]
 8015ce6:	460b      	mov	r3, r1
 8015ce8:	717b      	strb	r3, [r7, #5]
 8015cea:	4613      	mov	r3, r2
 8015cec:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8015cee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8015cf2:	627b      	str	r3, [r7, #36]	; 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if ( epnum == 0 )
 8015cf4:	79bb      	ldrb	r3, [r7, #6]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d121      	bne.n	8015d3e <edpt_schedule_packets+0x6e>
  {
    xfer_ctl_t *const xfer = XFER_CTL_BASE(epnum, dir);
 8015cfa:	79ba      	ldrb	r2, [r7, #6]
 8015cfc:	797b      	ldrb	r3, [r7, #5]
 8015cfe:	0052      	lsls	r2, r2, #1
 8015d00:	4413      	add	r3, r2
 8015d02:	011b      	lsls	r3, r3, #4
 8015d04:	4a6a      	ldr	r2, [pc, #424]	; (8015eb0 <edpt_schedule_packets+0x1e0>)
 8015d06:	4413      	add	r3, r2
 8015d08:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8015d0a:	797b      	ldrb	r3, [r7, #5]
 8015d0c:	4a69      	ldr	r2, [pc, #420]	; (8015eb4 <edpt_schedule_packets+0x1e4>)
 8015d0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8015d12:	6a3b      	ldr	r3, [r7, #32]
 8015d14:	895b      	ldrh	r3, [r3, #10]
 8015d16:	81fa      	strh	r2, [r7, #14]
 8015d18:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8015d1a:	89fa      	ldrh	r2, [r7, #14]
 8015d1c:	89bb      	ldrh	r3, [r7, #12]
 8015d1e:	4293      	cmp	r3, r2
 8015d20:	bf28      	it	cs
 8015d22:	4613      	movcs	r3, r2
 8015d24:	b29b      	uxth	r3, r3
 8015d26:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8015d28:	797b      	ldrb	r3, [r7, #5]
 8015d2a:	4a62      	ldr	r2, [pc, #392]	; (8015eb4 <edpt_schedule_packets+0x1e4>)
 8015d2c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8015d30:	797b      	ldrb	r3, [r7, #5]
 8015d32:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8015d34:	1a8a      	subs	r2, r1, r2
 8015d36:	b291      	uxth	r1, r2
 8015d38:	4a5e      	ldr	r2, [pc, #376]	; (8015eb4 <edpt_schedule_packets+0x1e4>)
 8015d3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if ( dir == TUSB_DIR_IN )
 8015d3e:	797b      	ldrb	r3, [r7, #5]
 8015d40:	2b01      	cmp	r3, #1
 8015d42:	d156      	bne.n	8015df2 <edpt_schedule_packets+0x122>
  {
    dwc2_epin_t* epin = dwc2->epin;
 8015d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d4a:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8015d4c:	887b      	ldrh	r3, [r7, #2]
 8015d4e:	04db      	lsls	r3, r3, #19
 8015d50:	4618      	mov	r0, r3
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 8015d52:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8015d54:	79bb      	ldrb	r3, [r7, #6]
 8015d56:	015b      	lsls	r3, r3, #5
 8015d58:	6979      	ldr	r1, [r7, #20]
 8015d5a:	440b      	add	r3, r1
 8015d5c:	4302      	orrs	r2, r0
 8015d5e:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8015d60:	79bb      	ldrb	r3, [r7, #6]
 8015d62:	015b      	lsls	r3, r3, #5
 8015d64:	697a      	ldr	r2, [r7, #20]
 8015d66:	4413      	add	r3, r2
 8015d68:	681a      	ldr	r2, [r3, #0]
 8015d6a:	79bb      	ldrb	r3, [r7, #6]
 8015d6c:	015b      	lsls	r3, r3, #5
 8015d6e:	6979      	ldr	r1, [r7, #20]
 8015d70:	440b      	add	r3, r1
 8015d72:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8015d76:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ( (epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1 )
 8015d78:	79bb      	ldrb	r3, [r7, #6]
 8015d7a:	015b      	lsls	r3, r3, #5
 8015d7c:	697a      	ldr	r2, [r7, #20]
 8015d7e:	4413      	add	r3, r2
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8015d86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015d8a:	d123      	bne.n	8015dd4 <edpt_schedule_packets+0x104>
 8015d8c:	79ba      	ldrb	r2, [r7, #6]
 8015d8e:	797b      	ldrb	r3, [r7, #5]
 8015d90:	4947      	ldr	r1, [pc, #284]	; (8015eb0 <edpt_schedule_packets+0x1e0>)
 8015d92:	0052      	lsls	r2, r2, #1
 8015d94:	4413      	add	r3, r2
 8015d96:	011b      	lsls	r3, r3, #4
 8015d98:	440b      	add	r3, r1
 8015d9a:	330c      	adds	r3, #12
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d118      	bne.n	8015dd4 <edpt_schedule_packets+0x104>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8015da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8015da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015dac:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8015dae:	79bb      	ldrb	r3, [r7, #6]
 8015db0:	015b      	lsls	r3, r3, #5
 8015db2:	697a      	ldr	r2, [r7, #20]
 8015db4:	4413      	add	r3, r2
 8015db6:	681a      	ldr	r2, [r3, #0]
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d002      	beq.n	8015dc4 <edpt_schedule_packets+0xf4>
 8015dbe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8015dc2:	e001      	b.n	8015dc8 <edpt_schedule_packets+0xf8>
 8015dc4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8015dc8:	79bb      	ldrb	r3, [r7, #6]
 8015dca:	015b      	lsls	r3, r3, #5
 8015dcc:	6978      	ldr	r0, [r7, #20]
 8015dce:	4403      	add	r3, r0
 8015dd0:	430a      	orrs	r2, r1
 8015dd2:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if ( total_bytes != 0 )
 8015dd4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d065      	beq.n	8015ea6 <edpt_schedule_packets+0x1d6>
    {
      dwc2->diepempmsk |= (1 << epnum);
 8015dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ddc:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8015de0:	79ba      	ldrb	r2, [r7, #6]
 8015de2:	2101      	movs	r1, #1
 8015de4:	fa01 f202 	lsl.w	r2, r1, r2
 8015de8:	431a      	orrs	r2, r3
 8015dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dec:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8015df0:	e059      	b.n	8015ea6 <edpt_schedule_packets+0x1d6>
    dwc2_epout_t* epout = dwc2->epout;
 8015df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015df8:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8015dfa:	79bb      	ldrb	r3, [r7, #6]
 8015dfc:	015b      	lsls	r3, r3, #5
 8015dfe:	69fa      	ldr	r2, [r7, #28]
 8015e00:	4413      	add	r3, r2
 8015e02:	691a      	ldr	r2, [r3, #16]
 8015e04:	79bb      	ldrb	r3, [r7, #6]
 8015e06:	015b      	lsls	r3, r3, #5
 8015e08:	69f9      	ldr	r1, [r7, #28]
 8015e0a:	440b      	add	r3, r1
 8015e0c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8015e10:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8015e12:	79bb      	ldrb	r3, [r7, #6]
 8015e14:	015b      	lsls	r3, r3, #5
 8015e16:	69fa      	ldr	r2, [r7, #28]
 8015e18:	4413      	add	r3, r2
 8015e1a:	6919      	ldr	r1, [r3, #16]
 8015e1c:	887b      	ldrh	r3, [r7, #2]
 8015e1e:	04db      	lsls	r3, r3, #19
 8015e20:	461a      	mov	r2, r3
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 8015e22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8015e24:	431a      	orrs	r2, r3
 8015e26:	79bb      	ldrb	r3, [r7, #6]
 8015e28:	015b      	lsls	r3, r3, #5
 8015e2a:	69f8      	ldr	r0, [r7, #28]
 8015e2c:	4403      	add	r3, r0
 8015e2e:	430a      	orrs	r2, r1
 8015e30:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8015e32:	79bb      	ldrb	r3, [r7, #6]
 8015e34:	015b      	lsls	r3, r3, #5
 8015e36:	69fa      	ldr	r2, [r7, #28]
 8015e38:	4413      	add	r3, r2
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	79bb      	ldrb	r3, [r7, #6]
 8015e3e:	015b      	lsls	r3, r3, #5
 8015e40:	69f9      	ldr	r1, [r7, #28]
 8015e42:	440b      	add	r3, r1
 8015e44:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8015e48:	601a      	str	r2, [r3, #0]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8015e4a:	79bb      	ldrb	r3, [r7, #6]
 8015e4c:	015b      	lsls	r3, r3, #5
 8015e4e:	69fa      	ldr	r2, [r7, #28]
 8015e50:	4413      	add	r3, r2
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8015e58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015e5c:	d123      	bne.n	8015ea6 <edpt_schedule_packets+0x1d6>
         XFER_CTL_BASE(epnum, dir)->interval == 1 )
 8015e5e:	79ba      	ldrb	r2, [r7, #6]
 8015e60:	797b      	ldrb	r3, [r7, #5]
 8015e62:	4913      	ldr	r1, [pc, #76]	; (8015eb0 <edpt_schedule_packets+0x1e0>)
 8015e64:	0052      	lsls	r2, r2, #1
 8015e66:	4413      	add	r3, r2
 8015e68:	011b      	lsls	r3, r3, #4
 8015e6a:	440b      	add	r3, r1
 8015e6c:	330c      	adds	r3, #12
 8015e6e:	781b      	ldrb	r3, [r3, #0]
    if ( (epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8015e70:	2b01      	cmp	r3, #1
 8015e72:	d118      	bne.n	8015ea6 <edpt_schedule_packets+0x1d6>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8015e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e76:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8015e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e7e:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8015e80:	79bb      	ldrb	r3, [r7, #6]
 8015e82:	015b      	lsls	r3, r3, #5
 8015e84:	69fa      	ldr	r2, [r7, #28]
 8015e86:	4413      	add	r3, r2
 8015e88:	681a      	ldr	r2, [r3, #0]
 8015e8a:	69bb      	ldr	r3, [r7, #24]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d002      	beq.n	8015e96 <edpt_schedule_packets+0x1c6>
 8015e90:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8015e94:	e001      	b.n	8015e9a <edpt_schedule_packets+0x1ca>
 8015e96:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8015e9a:	79bb      	ldrb	r3, [r7, #6]
 8015e9c:	015b      	lsls	r3, r3, #5
 8015e9e:	69f8      	ldr	r0, [r7, #28]
 8015ea0:	4403      	add	r3, r0
 8015ea2:	430a      	orrs	r2, r1
 8015ea4:	601a      	str	r2, [r3, #0]
}
 8015ea6:	bf00      	nop
 8015ea8:	3728      	adds	r7, #40	; 0x28
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bc90      	pop	{r4, r7}
 8015eae:	4770      	bx	lr
 8015eb0:	200094b0 	.word	0x200094b0
 8015eb4:	20009530 	.word	0x20009530

08015eb8 <print_dwc2_info>:
/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
#if CFG_TUSB_DEBUG >= DWC2_DEBUG
void print_dwc2_info(dwc2_regs_t * dwc2)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b086      	sub	sp, #24
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  dwc2_ghwcfg2_t const * hw_cfg2 = &dwc2->ghwcfg2_bm;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	3348      	adds	r3, #72	; 0x48
 8015ec4:	617b      	str	r3, [r7, #20]
  dwc2_ghwcfg3_t const * hw_cfg3 = &dwc2->ghwcfg3_bm;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	334c      	adds	r3, #76	; 0x4c
 8015eca:	613b      	str	r3, [r7, #16]
  dwc2_ghwcfg4_t const * hw_cfg4 = &dwc2->ghwcfg4_bm;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	3350      	adds	r3, #80	; 0x50
 8015ed0:	60fb      	str	r3, [r7, #12]

//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
  TU_LOG_HEX(DWC2_DEBUG, dwc2->guid);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	48bb      	ldr	r0, [pc, #748]	; (80161c8 <print_dwc2_info+0x310>)
 8015eda:	f001 fed9 	bl	8017c90 <iprintf>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->gsnpsid);
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	48b9      	ldr	r0, [pc, #740]	; (80161cc <print_dwc2_info+0x314>)
 8015ee6:	f001 fed3 	bl	8017c90 <iprintf>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->ghwcfg1);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eee:	4619      	mov	r1, r3
 8015ef0:	48b7      	ldr	r0, [pc, #732]	; (80161d0 <print_dwc2_info+0x318>)
 8015ef2:	f001 fecd 	bl	8017c90 <iprintf>

  // HW configure 2
  TU_LOG(DWC2_DEBUG, "\r\n");
 8015ef6:	48b7      	ldr	r0, [pc, #732]	; (80161d4 <print_dwc2_info+0x31c>)
 8015ef8:	f001 ff66 	bl	8017dc8 <puts>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->ghwcfg2);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015f00:	4619      	mov	r1, r3
 8015f02:	48b5      	ldr	r0, [pc, #724]	; (80161d8 <print_dwc2_info+0x320>)
 8015f04:	f001 fec4 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->op_mode                );
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	781b      	ldrb	r3, [r3, #0]
 8015f0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015f10:	b2db      	uxtb	r3, r3
 8015f12:	4619      	mov	r1, r3
 8015f14:	48b1      	ldr	r0, [pc, #708]	; (80161dc <print_dwc2_info+0x324>)
 8015f16:	f001 febb 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->arch                   );
 8015f1a:	697b      	ldr	r3, [r7, #20]
 8015f1c:	781b      	ldrb	r3, [r3, #0]
 8015f1e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8015f22:	b2db      	uxtb	r3, r3
 8015f24:	4619      	mov	r1, r3
 8015f26:	48ae      	ldr	r0, [pc, #696]	; (80161e0 <print_dwc2_info+0x328>)
 8015f28:	f001 feb2 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->point2point            );
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015f34:	b2db      	uxtb	r3, r3
 8015f36:	4619      	mov	r1, r3
 8015f38:	48aa      	ldr	r0, [pc, #680]	; (80161e4 <print_dwc2_info+0x32c>)
 8015f3a:	f001 fea9 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->hs_phy_type            );
 8015f3e:	697b      	ldr	r3, [r7, #20]
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8015f46:	b2db      	uxtb	r3, r3
 8015f48:	4619      	mov	r1, r3
 8015f4a:	48a7      	ldr	r0, [pc, #668]	; (80161e8 <print_dwc2_info+0x330>)
 8015f4c:	f001 fea0 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->fs_phy_type            );
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	785b      	ldrb	r3, [r3, #1]
 8015f54:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015f58:	b2db      	uxtb	r3, r3
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	48a3      	ldr	r0, [pc, #652]	; (80161ec <print_dwc2_info+0x334>)
 8015f5e:	f001 fe97 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->num_dev_ep             );
 8015f62:	697b      	ldr	r3, [r7, #20]
 8015f64:	785b      	ldrb	r3, [r3, #1]
 8015f66:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8015f6a:	b2db      	uxtb	r3, r3
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	48a0      	ldr	r0, [pc, #640]	; (80161f0 <print_dwc2_info+0x338>)
 8015f70:	f001 fe8e 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->num_host_ch            );
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	785a      	ldrb	r2, [r3, #1]
 8015f78:	0992      	lsrs	r2, r2, #6
 8015f7a:	b2d2      	uxtb	r2, r2
 8015f7c:	789b      	ldrb	r3, [r3, #2]
 8015f7e:	f003 0303 	and.w	r3, r3, #3
 8015f82:	009b      	lsls	r3, r3, #2
 8015f84:	4313      	orrs	r3, r2
 8015f86:	b2db      	uxtb	r3, r3
 8015f88:	4619      	mov	r1, r3
 8015f8a:	489a      	ldr	r0, [pc, #616]	; (80161f4 <print_dwc2_info+0x33c>)
 8015f8c:	f001 fe80 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->period_channel_support );
 8015f90:	697b      	ldr	r3, [r7, #20]
 8015f92:	789b      	ldrb	r3, [r3, #2]
 8015f94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015f98:	b2db      	uxtb	r3, r3
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	4896      	ldr	r0, [pc, #600]	; (80161f8 <print_dwc2_info+0x340>)
 8015f9e:	f001 fe77 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->enable_dynamic_fifo    );
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	789b      	ldrb	r3, [r3, #2]
 8015fa6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015faa:	b2db      	uxtb	r3, r3
 8015fac:	4619      	mov	r1, r3
 8015fae:	4893      	ldr	r0, [pc, #588]	; (80161fc <print_dwc2_info+0x344>)
 8015fb0:	f001 fe6e 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->mul_cpu_int            );
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	789b      	ldrb	r3, [r3, #2]
 8015fb8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015fbc:	b2db      	uxtb	r3, r3
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	488f      	ldr	r0, [pc, #572]	; (8016200 <print_dwc2_info+0x348>)
 8015fc2:	f001 fe65 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->nperiod_tx_q_depth     );
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	789b      	ldrb	r3, [r3, #2]
 8015fca:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8015fce:	b2db      	uxtb	r3, r3
 8015fd0:	4619      	mov	r1, r3
 8015fd2:	488c      	ldr	r0, [pc, #560]	; (8016204 <print_dwc2_info+0x34c>)
 8015fd4:	f001 fe5c 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->host_period_tx_q_depth );
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	78db      	ldrb	r3, [r3, #3]
 8015fdc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015fe0:	b2db      	uxtb	r3, r3
 8015fe2:	4619      	mov	r1, r3
 8015fe4:	4888      	ldr	r0, [pc, #544]	; (8016208 <print_dwc2_info+0x350>)
 8015fe6:	f001 fe53 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->dev_token_q_depth      );
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	78db      	ldrb	r3, [r3, #3]
 8015fee:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8015ff2:	b2db      	uxtb	r3, r3
 8015ff4:	4619      	mov	r1, r3
 8015ff6:	4885      	ldr	r0, [pc, #532]	; (801620c <print_dwc2_info+0x354>)
 8015ff8:	f001 fe4a 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg2->otg_enable_ic_usb      );
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	78db      	ldrb	r3, [r3, #3]
 8016000:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016004:	b2db      	uxtb	r3, r3
 8016006:	4619      	mov	r1, r3
 8016008:	4881      	ldr	r0, [pc, #516]	; (8016210 <print_dwc2_info+0x358>)
 801600a:	f001 fe41 	bl	8017c90 <iprintf>

  // HW configure 3
  TU_LOG(DWC2_DEBUG, "\r\n");
 801600e:	4871      	ldr	r0, [pc, #452]	; (80161d4 <print_dwc2_info+0x31c>)
 8016010:	f001 feda 	bl	8017dc8 <puts>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->ghwcfg3);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016018:	4619      	mov	r1, r3
 801601a:	487e      	ldr	r0, [pc, #504]	; (8016214 <print_dwc2_info+0x35c>)
 801601c:	f001 fe38 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->xfer_size_width          );
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016028:	b2db      	uxtb	r3, r3
 801602a:	4619      	mov	r1, r3
 801602c:	487a      	ldr	r0, [pc, #488]	; (8016218 <print_dwc2_info+0x360>)
 801602e:	f001 fe2f 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->packet_size_width        );
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	781b      	ldrb	r3, [r3, #0]
 8016036:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801603a:	b2db      	uxtb	r3, r3
 801603c:	4619      	mov	r1, r3
 801603e:	4877      	ldr	r0, [pc, #476]	; (801621c <print_dwc2_info+0x364>)
 8016040:	f001 fe26 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->otg_enable               );
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801604c:	b2db      	uxtb	r3, r3
 801604e:	4619      	mov	r1, r3
 8016050:	4873      	ldr	r0, [pc, #460]	; (8016220 <print_dwc2_info+0x368>)
 8016052:	f001 fe1d 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->i2c_enable               );
 8016056:	693b      	ldr	r3, [r7, #16]
 8016058:	785b      	ldrb	r3, [r3, #1]
 801605a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801605e:	b2db      	uxtb	r3, r3
 8016060:	4619      	mov	r1, r3
 8016062:	4870      	ldr	r0, [pc, #448]	; (8016224 <print_dwc2_info+0x36c>)
 8016064:	f001 fe14 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->vendor_ctrl_itf          );
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	785b      	ldrb	r3, [r3, #1]
 801606c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016070:	b2db      	uxtb	r3, r3
 8016072:	4619      	mov	r1, r3
 8016074:	486c      	ldr	r0, [pc, #432]	; (8016228 <print_dwc2_info+0x370>)
 8016076:	f001 fe0b 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->optional_feature_removed );
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	785b      	ldrb	r3, [r3, #1]
 801607e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016082:	b2db      	uxtb	r3, r3
 8016084:	4619      	mov	r1, r3
 8016086:	4869      	ldr	r0, [pc, #420]	; (801622c <print_dwc2_info+0x374>)
 8016088:	f001 fe02 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->synch_reset              );
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	785b      	ldrb	r3, [r3, #1]
 8016090:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016094:	b2db      	uxtb	r3, r3
 8016096:	4619      	mov	r1, r3
 8016098:	4865      	ldr	r0, [pc, #404]	; (8016230 <print_dwc2_info+0x378>)
 801609a:	f001 fdf9 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->otg_adp_support          );
 801609e:	693b      	ldr	r3, [r7, #16]
 80160a0:	785b      	ldrb	r3, [r3, #1]
 80160a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80160a6:	b2db      	uxtb	r3, r3
 80160a8:	4619      	mov	r1, r3
 80160aa:	4862      	ldr	r0, [pc, #392]	; (8016234 <print_dwc2_info+0x37c>)
 80160ac:	f001 fdf0 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->otg_enable_hsic          );
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	785b      	ldrb	r3, [r3, #1]
 80160b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	4619      	mov	r1, r3
 80160bc:	485e      	ldr	r0, [pc, #376]	; (8016238 <print_dwc2_info+0x380>)
 80160be:	f001 fde7 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->battery_charger_support  );
 80160c2:	693b      	ldr	r3, [r7, #16]
 80160c4:	785b      	ldrb	r3, [r3, #1]
 80160c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80160ca:	b2db      	uxtb	r3, r3
 80160cc:	4619      	mov	r1, r3
 80160ce:	485b      	ldr	r0, [pc, #364]	; (801623c <print_dwc2_info+0x384>)
 80160d0:	f001 fdde 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->lpm_mode                 );
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	785b      	ldrb	r3, [r3, #1]
 80160d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80160dc:	b2db      	uxtb	r3, r3
 80160de:	4619      	mov	r1, r3
 80160e0:	4857      	ldr	r0, [pc, #348]	; (8016240 <print_dwc2_info+0x388>)
 80160e2:	f001 fdd5 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg3->total_fifo_size          );
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	885b      	ldrh	r3, [r3, #2]
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	4619      	mov	r1, r3
 80160ee:	4855      	ldr	r0, [pc, #340]	; (8016244 <print_dwc2_info+0x38c>)
 80160f0:	f001 fdce 	bl	8017c90 <iprintf>

  // HW configure 4
  TU_LOG(DWC2_DEBUG, "\r\n");
 80160f4:	4837      	ldr	r0, [pc, #220]	; (80161d4 <print_dwc2_info+0x31c>)
 80160f6:	f001 fe67 	bl	8017dc8 <puts>
  TU_LOG_HEX(DWC2_DEBUG, dwc2->ghwcfg4);
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160fe:	4619      	mov	r1, r3
 8016100:	4851      	ldr	r0, [pc, #324]	; (8016248 <print_dwc2_info+0x390>)
 8016102:	f001 fdc5 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->num_dev_period_in_ep      );
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	781b      	ldrb	r3, [r3, #0]
 801610a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801610e:	b2db      	uxtb	r3, r3
 8016110:	4619      	mov	r1, r3
 8016112:	484e      	ldr	r0, [pc, #312]	; (801624c <print_dwc2_info+0x394>)
 8016114:	f001 fdbc 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->power_optimized           );
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	781b      	ldrb	r3, [r3, #0]
 801611c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8016120:	b2db      	uxtb	r3, r3
 8016122:	4619      	mov	r1, r3
 8016124:	484a      	ldr	r0, [pc, #296]	; (8016250 <print_dwc2_info+0x398>)
 8016126:	f001 fdb3 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->ahb_freq_min              );
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	781b      	ldrb	r3, [r3, #0]
 801612e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016132:	b2db      	uxtb	r3, r3
 8016134:	4619      	mov	r1, r3
 8016136:	4847      	ldr	r0, [pc, #284]	; (8016254 <print_dwc2_info+0x39c>)
 8016138:	f001 fdaa 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->hibernation               );
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8016144:	b2db      	uxtb	r3, r3
 8016146:	4619      	mov	r1, r3
 8016148:	4843      	ldr	r0, [pc, #268]	; (8016258 <print_dwc2_info+0x3a0>)
 801614a:	f001 fda1 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->service_interval_mode     );
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	785b      	ldrb	r3, [r3, #1]
 8016152:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016156:	b2db      	uxtb	r3, r3
 8016158:	4619      	mov	r1, r3
 801615a:	4840      	ldr	r0, [pc, #256]	; (801625c <print_dwc2_info+0x3a4>)
 801615c:	f001 fd98 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->ipg_isoc_en               );
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	785b      	ldrb	r3, [r3, #1]
 8016164:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016168:	b2db      	uxtb	r3, r3
 801616a:	4619      	mov	r1, r3
 801616c:	483c      	ldr	r0, [pc, #240]	; (8016260 <print_dwc2_info+0x3a8>)
 801616e:	f001 fd8f 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->acg_enable                );
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	785b      	ldrb	r3, [r3, #1]
 8016176:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801617a:	b2db      	uxtb	r3, r3
 801617c:	4619      	mov	r1, r3
 801617e:	4839      	ldr	r0, [pc, #228]	; (8016264 <print_dwc2_info+0x3ac>)
 8016180:	f001 fd86 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->utmi_phy_data_width       );
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	785b      	ldrb	r3, [r3, #1]
 8016188:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801618c:	b2db      	uxtb	r3, r3
 801618e:	4619      	mov	r1, r3
 8016190:	4835      	ldr	r0, [pc, #212]	; (8016268 <print_dwc2_info+0x3b0>)
 8016192:	f001 fd7d 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->dev_ctrl_ep_num           );
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	789b      	ldrb	r3, [r3, #2]
 801619a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801619e:	b2db      	uxtb	r3, r3
 80161a0:	4619      	mov	r1, r3
 80161a2:	4832      	ldr	r0, [pc, #200]	; (801626c <print_dwc2_info+0x3b4>)
 80161a4:	f001 fd74 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->iddg_filter_enabled       );
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	789b      	ldrb	r3, [r3, #2]
 80161ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80161b0:	b2db      	uxtb	r3, r3
 80161b2:	4619      	mov	r1, r3
 80161b4:	482e      	ldr	r0, [pc, #184]	; (8016270 <print_dwc2_info+0x3b8>)
 80161b6:	f001 fd6b 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->vbus_valid_filter_enabled );
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	789b      	ldrb	r3, [r3, #2]
 80161be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80161c2:	b2db      	uxtb	r3, r3
 80161c4:	4619      	mov	r1, r3
 80161c6:	e055      	b.n	8016274 <print_dwc2_info+0x3bc>
 80161c8:	0801a4a4 	.word	0x0801a4a4
 80161cc:	0801a4b8 	.word	0x0801a4b8
 80161d0:	0801a4d0 	.word	0x0801a4d0
 80161d4:	0801a4e8 	.word	0x0801a4e8
 80161d8:	0801a4ec 	.word	0x0801a4ec
 80161dc:	0801a504 	.word	0x0801a504
 80161e0:	0801a520 	.word	0x0801a520
 80161e4:	0801a538 	.word	0x0801a538
 80161e8:	0801a558 	.word	0x0801a558
 80161ec:	0801a578 	.word	0x0801a578
 80161f0:	0801a598 	.word	0x0801a598
 80161f4:	0801a5b4 	.word	0x0801a5b4
 80161f8:	0801a5d4 	.word	0x0801a5d4
 80161fc:	0801a5fc 	.word	0x0801a5fc
 8016200:	0801a624 	.word	0x0801a624
 8016204:	0801a644 	.word	0x0801a644
 8016208:	0801a668 	.word	0x0801a668
 801620c:	0801a690 	.word	0x0801a690
 8016210:	0801a6b4 	.word	0x0801a6b4
 8016214:	0801a6d8 	.word	0x0801a6d8
 8016218:	0801a6f0 	.word	0x0801a6f0
 801621c:	0801a714 	.word	0x0801a714
 8016220:	0801a738 	.word	0x0801a738
 8016224:	0801a754 	.word	0x0801a754
 8016228:	0801a770 	.word	0x0801a770
 801622c:	0801a794 	.word	0x0801a794
 8016230:	0801a7c0 	.word	0x0801a7c0
 8016234:	0801a7e0 	.word	0x0801a7e0
 8016238:	0801a804 	.word	0x0801a804
 801623c:	0801a828 	.word	0x0801a828
 8016240:	0801a854 	.word	0x0801a854
 8016244:	0801a870 	.word	0x0801a870
 8016248:	0801a894 	.word	0x0801a894
 801624c:	0801a8ac 	.word	0x0801a8ac
 8016250:	0801a8d4 	.word	0x0801a8d4
 8016254:	0801a8f8 	.word	0x0801a8f8
 8016258:	0801a918 	.word	0x0801a918
 801625c:	0801a938 	.word	0x0801a938
 8016260:	0801a960 	.word	0x0801a960
 8016264:	0801a980 	.word	0x0801a980
 8016268:	0801a99c 	.word	0x0801a99c
 801626c:	0801a9c4 	.word	0x0801a9c4
 8016270:	0801a9e8 	.word	0x0801a9e8
 8016274:	481e      	ldr	r0, [pc, #120]	; (80162f0 <print_dwc2_info+0x438>)
 8016276:	f001 fd0b 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->a_valid_filter_enabled    );
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	789b      	ldrb	r3, [r3, #2]
 801627e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8016282:	b2db      	uxtb	r3, r3
 8016284:	4619      	mov	r1, r3
 8016286:	481b      	ldr	r0, [pc, #108]	; (80162f4 <print_dwc2_info+0x43c>)
 8016288:	f001 fd02 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->b_valid_filter_enabled    );
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	789b      	ldrb	r3, [r3, #2]
 8016290:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016294:	b2db      	uxtb	r3, r3
 8016296:	4619      	mov	r1, r3
 8016298:	4817      	ldr	r0, [pc, #92]	; (80162f8 <print_dwc2_info+0x440>)
 801629a:	f001 fcf9 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->dedicated_fifos           );
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	78db      	ldrb	r3, [r3, #3]
 80162a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80162a6:	b2db      	uxtb	r3, r3
 80162a8:	4619      	mov	r1, r3
 80162aa:	4814      	ldr	r0, [pc, #80]	; (80162fc <print_dwc2_info+0x444>)
 80162ac:	f001 fcf0 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->num_dev_in_eps            );
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	78db      	ldrb	r3, [r3, #3]
 80162b4:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80162b8:	b2db      	uxtb	r3, r3
 80162ba:	4619      	mov	r1, r3
 80162bc:	4810      	ldr	r0, [pc, #64]	; (8016300 <print_dwc2_info+0x448>)
 80162be:	f001 fce7 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->dma_desc_enable           );
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	78db      	ldrb	r3, [r3, #3]
 80162c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	4619      	mov	r1, r3
 80162ce:	480d      	ldr	r0, [pc, #52]	; (8016304 <print_dwc2_info+0x44c>)
 80162d0:	f001 fcde 	bl	8017c90 <iprintf>
  TU_LOG_INT(DWC2_DEBUG, hw_cfg4->dma_dynamic               );
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	78db      	ldrb	r3, [r3, #3]
 80162d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	4619      	mov	r1, r3
 80162e0:	4809      	ldr	r0, [pc, #36]	; (8016308 <print_dwc2_info+0x450>)
 80162e2:	f001 fcd5 	bl	8017c90 <iprintf>
}
 80162e6:	bf00      	nop
 80162e8:	3718      	adds	r7, #24
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}
 80162ee:	bf00      	nop
 80162f0:	0801aa10 	.word	0x0801aa10
 80162f4:	0801aa3c 	.word	0x0801aa3c
 80162f8:	0801aa64 	.word	0x0801aa64
 80162fc:	0801aa8c 	.word	0x0801aa8c
 8016300:	0801aab0 	.word	0x0801aab0
 8016304:	0801aad0 	.word	0x0801aad0
 8016308:	0801aaf4 	.word	0x0801aaf4

0801630c <reset_core>:
#endif

static void reset_core(dwc2_regs_t * dwc2)
{
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	691b      	ldr	r3, [r3, #16]
 8016318:	f043 0201 	orr.w	r2, r3, #1
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	611a      	str	r2, [r3, #16]

  // wait for reset bit is cleared
  // TODO version 4.20a should wait for RESET DONE mask
  while (dwc2->grstctl & GRSTCTL_CSRST) { }
 8016320:	bf00      	nop
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	691b      	ldr	r3, [r3, #16]
 8016326:	f003 0301 	and.w	r3, r3, #1
 801632a:	2b00      	cmp	r3, #0
 801632c:	d1f9      	bne.n	8016322 <reset_core+0x16>

  // wait for AHB master IDLE
  while ( !(dwc2->grstctl & GRSTCTL_AHBIDL) ) { }
 801632e:	bf00      	nop
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	691b      	ldr	r3, [r3, #16]
 8016334:	2b00      	cmp	r3, #0
 8016336:	dafb      	bge.n	8016330 <reset_core+0x24>

  // wait for device mode ?
}
 8016338:	bf00      	nop
 801633a:	bf00      	nop
 801633c:	370c      	adds	r7, #12
 801633e:	46bd      	mov	sp, r7
 8016340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016344:	4770      	bx	lr

08016346 <phy_hs_supported>:

static bool phy_hs_supported(dwc2_regs_t * dwc2)
{
 8016346:	b480      	push	{r7}
 8016348:	b083      	sub	sp, #12
 801634a:	af00      	add	r7, sp, #0
 801634c:	6078      	str	r0, [r7, #4]
  // note: esp32 incorrect report its hs_phy_type as utmi
  return TUD_OPT_HIGH_SPEED && dwc2->ghwcfg2_bm.hs_phy_type != HS_PHY_TYPE_NONE;
 801634e:	2300      	movs	r3, #0
}
 8016350:	4618      	mov	r0, r3
 8016352:	370c      	adds	r7, #12
 8016354:	46bd      	mov	sp, r7
 8016356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635a:	4770      	bx	lr

0801635c <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t * dwc2)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b082      	sub	sp, #8
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_DEBUG, "Fullspeed PHY init\r\n");
 8016364:	4813      	ldr	r0, [pc, #76]	; (80163b4 <phy_fs_init+0x58>)
 8016366:	f001 fd2f 	bl	8017dc8 <puts>

  // Select FS PHY
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, HS_PHY_TYPE_NONE);
 8016376:	2100      	movs	r1, #0
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	f7ff fb5f 	bl	8015a3c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f7ff ffc4 	bl	801630c <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	68db      	ldr	r3, [r3, #12]
 8016388:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 801638c:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, HS_PHY_TYPE_NONE);
 8016394:	2100      	movs	r1, #0
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f7ff fb6c 	bl	8015a74 <dwc2_phy_update>

  // set max speed
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80163a2:	f043 0203 	orr.w	r2, r3, #3
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80163ac:	bf00      	nop
 80163ae:	3708      	adds	r7, #8
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	0801ab14 	.word	0x0801ab14

080163b8 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t * dwc2)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	68db      	ldr	r3, [r3, #12]
 80163c4:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80163cc:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80163d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	2b80      	cmp	r3, #128	; 0x80
 80163dc:	d113      	bne.n	8016406 <phy_hs_init+0x4e>
  {
    TU_LOG(DWC2_DEBUG, "Highspeed ULPI PHY init\r\n");
 80163de:	483a      	ldr	r0, [pc, #232]	; (80164c8 <phy_hs_init+0x110>)
 80163e0:	f001 fcf2 	bl	8017dc8 <puts>

    // Select ULPI
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	f043 0310 	orr.w	r3, r3, #16
 80163ea:	60fb      	str	r3, [r7, #12]

    // ULPI 8-bit interface, single data rate
    gusbcfg &= ~(GUSBCFG_PHYIF16 | GUSBCFG_DDRSEL);
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80163f2:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80163fa:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	f423 2320 	bic.w	r3, r3, #655360	; 0xa0000
 8016402:	60fb      	str	r3, [r7, #12]
 8016404:	e012      	b.n	801642c <phy_hs_init+0x74>
  }else
  {
    TU_LOG(DWC2_DEBUG, "Highspeed UTMI+ PHY init\r\n");
 8016406:	4831      	ldr	r0, [pc, #196]	; (80164cc <phy_hs_init+0x114>)
 8016408:	f001 fcde 	bl	8017dc8 <puts>

    // Select UTMI+ with 8-bit interface
    gusbcfg &= ~(GUSBCFG_ULPI_UTMI_SEL | GUSBCFG_PHYIF16);
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	f023 0318 	bic.w	r3, r3, #24
 8016412:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.utmi_phy_data_width) gusbcfg |= GUSBCFG_PHYIF16;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801641a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801641e:	b2db      	uxtb	r3, r3
 8016420:	2b00      	cmp	r3, #0
 8016422:	d003      	beq.n	801642c <phy_hs_init+0x74>
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	f043 0308 	orr.w	r3, r3, #8
 801642a:	60fb      	str	r3, [r7, #12]
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	68fa      	ldr	r2, [r7, #12]
 8016430:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016438:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801643c:	b2db      	uxtb	r3, r3
 801643e:	4619      	mov	r1, r3
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f7ff fafb 	bl	8015a3c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f7ff ff60 	bl	801630c <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8016452:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.utmi_phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801645a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801645e:	b2db      	uxtb	r3, r3
 8016460:	2b00      	cmp	r3, #0
 8016462:	d002      	beq.n	801646a <phy_hs_init+0xb2>
 8016464:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016468:	e001      	b.n	801646e <phy_hs_init+0xb6>
 801646a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 801646e:	68fa      	ldr	r2, [r7, #12]
 8016470:	4313      	orrs	r3, r2
 8016472:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	68fa      	ldr	r2, [r7, #12]
 8016478:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016480:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8016484:	b2db      	uxtb	r3, r3
 8016486:	4619      	mov	r1, r3
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7ff faf3 	bl	8015a74 <dwc2_phy_update>

  // Set max speed
  uint32_t dcfg = dwc2->dcfg;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8016494:	60bb      	str	r3, [r7, #8]
  dcfg &= ~DCFG_DSPD_Msk;
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	f023 0303 	bic.w	r3, r3, #3
 801649c:	60bb      	str	r3, [r7, #8]
  dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

  // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
  // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) dcfg |= DCFG_XCVRDLY;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80164a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80164a8:	b2db      	uxtb	r3, r3
 80164aa:	2b80      	cmp	r3, #128	; 0x80
 80164ac:	d103      	bne.n	80164b6 <phy_hs_init+0xfe>
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80164b4:	60bb      	str	r3, [r7, #8]

  dwc2->dcfg = dcfg;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	68ba      	ldr	r2, [r7, #8]
 80164ba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80164be:	bf00      	nop
 80164c0:	3710      	adds	r7, #16
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	0801ab28 	.word	0x0801ab28
 80164cc:	0801ab44 	.word	0x0801ab44

080164d0 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t * dwc2)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
#if CFG_TUSB_DEBUG >= DWC2_DEBUG
  print_dwc2_info(dwc2);
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	f7ff fced 	bl	8015eb8 <print_dwc2_info>
//#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
//  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
//  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
//#endif

  return true;
 80164de:	2301      	movs	r3, #1
}
 80164e0:	4618      	mov	r0, r3
 80164e2:	3708      	adds	r7, #8
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}

080164e8 <dcd_init>:

void dcd_init (uint8_t rhport)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b084      	sub	sp, #16
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	4603      	mov	r3, r0
 80164f0:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80164f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80164f6:	60fb      	str	r3, [r7, #12]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_VERIFY(check_dwc2(dwc2), );
 80164f8:	68f8      	ldr	r0, [r7, #12]
 80164fa:	f7ff ffe9 	bl	80164d0 <check_dwc2>
 80164fe:	4603      	mov	r3, r0
 8016500:	f083 0301 	eor.w	r3, r3, #1
 8016504:	b2db      	uxtb	r3, r3
 8016506:	2b00      	cmp	r3, #0
 8016508:	d152      	bne.n	80165b0 <dcd_init+0xc8>

  dcd_disconnect(rhport);
 801650a:	79fb      	ldrb	r3, [r7, #7]
 801650c:	4618      	mov	r0, r3
 801650e:	f000 f89f 	bl	8016650 <dcd_disconnect>

  // max number of endpoints & total_fifo_size are:
  // hw_cfg2->num_dev_ep, hw_cfg2->total_fifo_size

  if( phy_hs_supported(dwc2) )
 8016512:	68f8      	ldr	r0, [r7, #12]
 8016514:	f7ff ff17 	bl	8016346 <phy_hs_supported>
 8016518:	4603      	mov	r3, r0
 801651a:	2b00      	cmp	r3, #0
 801651c:	d003      	beq.n	8016526 <dcd_init+0x3e>
  {
    // Highspeed
    phy_hs_init(dwc2);
 801651e:	68f8      	ldr	r0, [r7, #12]
 8016520:	f7ff ff4a 	bl	80163b8 <phy_hs_init>
 8016524:	e002      	b.n	801652c <dcd_init+0x44>
  }else
  {
    // core does not support highspeed or hs-phy is not present
    phy_fs_init(dwc2);
 8016526:	68f8      	ldr	r0, [r7, #12]
 8016528:	f7ff ff18 	bl	801635c <phy_fs_init>
  }

  // Restart PHY clock
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8016532:	f023 020f 	bic.w	r2, r3, #15
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	 * duration in the core to account for any additional delays
	 * introduced by the PHY. This can be required, because the delay
	 * introduced by the PHY in generating the linestate condition
	 * can vary from one PHY to another.
	 */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	68db      	ldr	r3, [r3, #12]
 8016540:	f043 0207 	orr.w	r2, r3, #7
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	60da      	str	r2, [r3, #12]

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8016550:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8016560:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	601a      	str	r2, [r3, #0]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dwc2->dcfg |= DCFG_NZLSOHSK;
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 801656e:	f043 0204 	orr.w	r2, r3, #4
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // Clear all interrupts
  dwc2->gintsts |= dwc2->gintsts;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	695a      	ldr	r2, [r3, #20]
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	695b      	ldr	r3, [r3, #20]
 8016580:	431a      	orrs	r2, r3
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	615a      	str	r2, [r3, #20]
  dwc2->gotgint |= dwc2->gotgint;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	685a      	ldr	r2, [r3, #4]
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	431a      	orrs	r2, r3
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	605a      	str	r2, [r3, #4]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  dwc2->gintmsk = GINTMSK_OTGINT   | GINTMSK_MMISM  | GINTMSK_RXFLVLM  |
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	4a08      	ldr	r2, [pc, #32]	; (80165b8 <dcd_init+0xd0>)
 8016598:	619a      	str	r2, [r3, #24]
                  GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;

  // Enable global interrupt
  dwc2->gahbcfg |= GAHBCFG_GINT;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	689b      	ldr	r3, [r3, #8]
 801659e:	f043 0201 	orr.w	r2, r3, #1
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	609a      	str	r2, [r3, #8]
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gahbcfg);

  dcd_connect(rhport);
 80165a6:	79fb      	ldrb	r3, [r7, #7]
 80165a8:	4618      	mov	r0, r3
 80165aa:	f000 f83b 	bl	8016624 <dcd_connect>
 80165ae:	e000      	b.n	80165b2 <dcd_init+0xca>
  TU_VERIFY(check_dwc2(dwc2), );
 80165b0:	bf00      	nop
}
 80165b2:	3710      	adds	r7, #16
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}
 80165b8:	80003816 	.word	0x80003816

080165bc <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b084      	sub	sp, #16
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	4603      	mov	r3, r0
 80165c4:	71fb      	strb	r3, [r7, #7]
 80165c6:	79fb      	ldrb	r3, [r7, #7]
 80165c8:	73fb      	strb	r3, [r7, #15]
  NVIC_EnableIRQ(RHPORT_IRQn);
 80165ca:	2043      	movs	r0, #67	; 0x43
 80165cc:	f7ff fa18 	bl	8015a00 <__NVIC_EnableIRQ>
}
 80165d0:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 80165d2:	bf00      	nop
 80165d4:	3710      	adds	r7, #16
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}

080165da <dcd_set_address>:
{
  dwc2_dcd_int_disable(rhport);
}

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 80165da:	b580      	push	{r7, lr}
 80165dc:	b084      	sub	sp, #16
 80165de:	af00      	add	r7, sp, #0
 80165e0:	4603      	mov	r3, r0
 80165e2:	460a      	mov	r2, r1
 80165e4:	71fb      	strb	r3, [r7, #7]
 80165e6:	4613      	mov	r3, r2
 80165e8:	71bb      	strb	r3, [r7, #6]
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80165ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80165ee:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80165f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80165fa:	79ba      	ldrb	r2, [r7, #6]
 80165fc:	0112      	lsls	r2, r2, #4
 80165fe:	431a      	orrs	r2, r3
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8016606:	2101      	movs	r1, #1
 8016608:	2000      	movs	r0, #0
 801660a:	f7ff f9ce 	bl	80159aa <tu_edpt_addr>
 801660e:	4603      	mov	r3, r0
 8016610:	4619      	mov	r1, r3
 8016612:	79f8      	ldrb	r0, [r7, #7]
 8016614:	2300      	movs	r3, #0
 8016616:	2200      	movs	r2, #0
 8016618:	f000 f9a8 	bl	801696c <dcd_edpt_xfer>
}
 801661c:	bf00      	nop
 801661e:	3710      	adds	r7, #16
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <dcd_connect>:

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 8016624:	b480      	push	{r7}
 8016626:	b085      	sub	sp, #20
 8016628:	af00      	add	r7, sp, #0
 801662a:	4603      	mov	r3, r0
 801662c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 801662e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8016632:	60fb      	str	r3, [r7, #12]
  dwc2->dctl &= ~DCTL_SDIS;
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 801663a:	f023 0202 	bic.w	r2, r3, #2
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8016644:	bf00      	nop
 8016646:	3714      	adds	r7, #20
 8016648:	46bd      	mov	sp, r7
 801664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664e:	4770      	bx	lr

08016650 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport)
{
 8016650:	b480      	push	{r7}
 8016652:	b085      	sub	sp, #20
 8016654:	af00      	add	r7, sp, #0
 8016656:	4603      	mov	r3, r0
 8016658:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 801665a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801665e:	60fb      	str	r3, [r7, #12]
  dwc2->dctl |= DCTL_SDIS;
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8016666:	f043 0202 	orr.w	r2, r3, #2
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8016670:	bf00      	nop
 8016672:	3714      	adds	r7, #20
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr

0801667c <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b08c      	sub	sp, #48	; 0x30
 8016680:	af00      	add	r7, sp, #0
 8016682:	4603      	mov	r3, r0
 8016684:	6039      	str	r1, [r7, #0]
 8016686:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8016688:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801668c:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 801668e:	683b      	ldr	r3, [r7, #0]
 8016690:	789b      	ldrb	r3, [r3, #2]
 8016692:	4618      	mov	r0, r3
 8016694:	f7ff f97a 	bl	801598c <tu_edpt_number>
 8016698:	4603      	mov	r3, r0
 801669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	789b      	ldrb	r3, [r3, #2]
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7ff f964 	bl	8015970 <tu_edpt_dir>
 80166a8:	4603      	mov	r3, r0
 80166aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  TU_ASSERT(epnum < DWC2_EP_MAX);
 80166ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80166b2:	2b03      	cmp	r3, #3
 80166b4:	d910      	bls.n	80166d8 <dcd_edpt_open+0x5c>
 80166b6:	f240 2262 	movw	r2, #610	; 0x262
 80166ba:	4986      	ldr	r1, [pc, #536]	; (80168d4 <dcd_edpt_open+0x258>)
 80166bc:	4886      	ldr	r0, [pc, #536]	; (80168d8 <dcd_edpt_open+0x25c>)
 80166be:	f001 fae7 	bl	8017c90 <iprintf>
 80166c2:	4b86      	ldr	r3, [pc, #536]	; (80168dc <dcd_edpt_open+0x260>)
 80166c4:	613b      	str	r3, [r7, #16]
 80166c6:	693b      	ldr	r3, [r7, #16]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	f003 0301 	and.w	r3, r3, #1
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d000      	beq.n	80166d4 <dcd_edpt_open+0x58>
 80166d2:	be00      	bkpt	0x0000
 80166d4:	2300      	movs	r3, #0
 80166d6:	e0f9      	b.n	80168cc <dcd_edpt_open+0x250>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80166d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80166dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80166e0:	0052      	lsls	r2, r2, #1
 80166e2:	4413      	add	r3, r2
 80166e4:	011b      	lsls	r3, r3, #4
 80166e6:	4a7e      	ldr	r2, [pc, #504]	; (80168e0 <dcd_edpt_open+0x264>)
 80166e8:	4413      	add	r3, r2
 80166ea:	627b      	str	r3, [r7, #36]	; 0x24
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 80166ec:	6838      	ldr	r0, [r7, #0]
 80166ee:	f7ff f976 	bl	80159de <tu_edpt_packet_size>
 80166f2:	4603      	mov	r3, r0
 80166f4:	461a      	mov	r2, r3
 80166f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f8:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	799a      	ldrb	r2, [r3, #6]
 80166fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016700:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 8016702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016704:	895b      	ldrh	r3, [r3, #10]
 8016706:	60fb      	str	r3, [r7, #12]
 8016708:	2304      	movs	r3, #4
 801670a:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 801670c:	68fa      	ldr	r2, [r7, #12]
 801670e:	68bb      	ldr	r3, [r7, #8]
 8016710:	4413      	add	r3, r2
 8016712:	1e5a      	subs	r2, r3, #1
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	fbb2 f3f3 	udiv	r3, r2, r3
 801671a:	847b      	strh	r3, [r7, #34]	; 0x22

  if(dir == TUSB_DIR_OUT)
 801671c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016720:	2b00      	cmp	r3, #0
 8016722:	d15c      	bne.n	80167de <dcd_edpt_open+0x162>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 8016724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016726:	009b      	lsls	r3, r3, #2
 8016728:	b29b      	uxth	r3, r3
 801672a:	4618      	mov	r0, r3
 801672c:	f7ff fa18 	bl	8015b60 <calc_rx_ff_size>
 8016730:	4603      	mov	r3, r0
 8016732:	837b      	strh	r3, [r7, #26]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz)
 8016734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016738:	8b7b      	ldrh	r3, [r7, #26]
 801673a:	429a      	cmp	r2, r3
 801673c:	d21a      	bcs.n	8016774 <dcd_edpt_open+0xf8>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= DWC2_EP_FIFO_SIZE/4);
 801673e:	8b7b      	ldrh	r3, [r7, #26]
 8016740:	4a68      	ldr	r2, [pc, #416]	; (80168e4 <dcd_edpt_open+0x268>)
 8016742:	8812      	ldrh	r2, [r2, #0]
 8016744:	4413      	add	r3, r2
 8016746:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801674a:	d910      	bls.n	801676e <dcd_edpt_open+0xf2>
 801674c:	f240 2272 	movw	r2, #626	; 0x272
 8016750:	4960      	ldr	r1, [pc, #384]	; (80168d4 <dcd_edpt_open+0x258>)
 8016752:	4861      	ldr	r0, [pc, #388]	; (80168d8 <dcd_edpt_open+0x25c>)
 8016754:	f001 fa9c 	bl	8017c90 <iprintf>
 8016758:	4b60      	ldr	r3, [pc, #384]	; (80168dc <dcd_edpt_open+0x260>)
 801675a:	617b      	str	r3, [r7, #20]
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	f003 0301 	and.w	r3, r3, #1
 8016764:	2b00      	cmp	r3, #0
 8016766:	d000      	beq.n	801676a <dcd_edpt_open+0xee>
 8016768:	be00      	bkpt	0x0000
 801676a:	2300      	movs	r3, #0
 801676c:	e0ae      	b.n	80168cc <dcd_edpt_open+0x250>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 801676e:	8b7a      	ldrh	r2, [r7, #26]
 8016770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016772:	625a      	str	r2, [r3, #36]	; 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8016774:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801677a:	3358      	adds	r3, #88	; 0x58
 801677c:	015b      	lsls	r3, r3, #5
 801677e:	4413      	add	r3, r2
 8016780:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	78db      	ldrb	r3, [r3, #3]
 8016786:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801678a:	b2db      	uxtb	r3, r3
 801678c:	049b      	lsls	r3, r3, #18
 801678e:	4619      	mov	r1, r3
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	78db      	ldrb	r3, [r3, #3]
 8016794:	f003 0303 	and.w	r3, r3, #3
 8016798:	b2db      	uxtb	r3, r3
 801679a:	2b01      	cmp	r3, #1
 801679c:	d002      	beq.n	80167a4 <dcd_edpt_open+0x128>
 801679e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80167a2:	e000      	b.n	80167a6 <dcd_edpt_open+0x12a>
 80167a4:	2300      	movs	r3, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 80167a6:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 80167a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167aa:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 80167ac:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80167ae:	431a      	orrs	r2, r3
 80167b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80167b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80167b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167ba:	3358      	adds	r3, #88	; 0x58
 80167bc:	015b      	lsls	r3, r3, #5
 80167be:	440b      	add	r3, r1
 80167c0:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 80167c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167c4:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80167c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80167cc:	3310      	adds	r3, #16
 80167ce:	2101      	movs	r1, #1
 80167d0:	fa01 f303 	lsl.w	r3, r1, r3
 80167d4:	431a      	orrs	r2, r3
 80167d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d8:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 80167dc:	e075      	b.n	80168ca <dcd_edpt_open+0x24e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= DWC2_EP_FIFO_SIZE/4);
 80167de:	4b41      	ldr	r3, [pc, #260]	; (80168e4 <dcd_edpt_open+0x268>)
 80167e0:	881b      	ldrh	r3, [r3, #0]
 80167e2:	461a      	mov	r2, r3
 80167e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167e6:	4413      	add	r3, r2
 80167e8:	461a      	mov	r2, r3
 80167ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ee:	4413      	add	r3, r2
 80167f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80167f4:	d910      	bls.n	8016818 <dcd_edpt_open+0x19c>
 80167f6:	f240 2297 	movw	r2, #663	; 0x297
 80167fa:	4936      	ldr	r1, [pc, #216]	; (80168d4 <dcd_edpt_open+0x258>)
 80167fc:	4836      	ldr	r0, [pc, #216]	; (80168d8 <dcd_edpt_open+0x25c>)
 80167fe:	f001 fa47 	bl	8017c90 <iprintf>
 8016802:	4b36      	ldr	r3, [pc, #216]	; (80168dc <dcd_edpt_open+0x260>)
 8016804:	61fb      	str	r3, [r7, #28]
 8016806:	69fb      	ldr	r3, [r7, #28]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	f003 0301 	and.w	r3, r3, #1
 801680e:	2b00      	cmp	r3, #0
 8016810:	d000      	beq.n	8016814 <dcd_edpt_open+0x198>
 8016812:	be00      	bkpt	0x0000
 8016814:	2300      	movs	r3, #0
 8016816:	e059      	b.n	80168cc <dcd_edpt_open+0x250>

    _allocated_fifo_words_tx += fifo_size;
 8016818:	4b32      	ldr	r3, [pc, #200]	; (80168e4 <dcd_edpt_open+0x268>)
 801681a:	881a      	ldrh	r2, [r3, #0]
 801681c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801681e:	4413      	add	r3, r2
 8016820:	b29a      	uxth	r2, r3
 8016822:	4b30      	ldr	r3, [pc, #192]	; (80168e4 <dcd_edpt_open+0x268>)
 8016824:	801a      	strh	r2, [r3, #0]

    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %u", fifo_size*4, DWC2_EP_FIFO_SIZE-_allocated_fifo_words_tx*4);
 8016826:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016828:	009b      	lsls	r3, r3, #2
 801682a:	4a2e      	ldr	r2, [pc, #184]	; (80168e4 <dcd_edpt_open+0x268>)
 801682c:	8812      	ldrh	r2, [r2, #0]
 801682e:	0092      	lsls	r2, r2, #2
 8016830:	f5c2 62a0 	rsb	r2, r2, #1280	; 0x500
 8016834:	4619      	mov	r1, r3
 8016836:	482c      	ldr	r0, [pc, #176]	; (80168e8 <dcd_edpt_open+0x26c>)
 8016838:	f001 fa2a 	bl	8017c90 <iprintf>

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | (DWC2_EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 801683c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801683e:	041b      	lsls	r3, r3, #16
 8016840:	4619      	mov	r1, r3
 8016842:	4b28      	ldr	r3, [pc, #160]	; (80168e4 <dcd_edpt_open+0x268>)
 8016844:	881b      	ldrh	r3, [r3, #0]
 8016846:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 801684a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801684e:	3b01      	subs	r3, #1
 8016850:	430a      	orrs	r2, r1
 8016852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016854:	3340      	adds	r3, #64	; 0x40
 8016856:	009b      	lsls	r3, r3, #2
 8016858:	440b      	add	r3, r1
 801685a:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 801685c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016862:	3348      	adds	r3, #72	; 0x48
 8016864:	015b      	lsls	r3, r3, #5
 8016866:	4413      	add	r3, r2
 8016868:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 801686a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801686e:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8016870:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	78db      	ldrb	r3, [r3, #3]
 8016878:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801687c:	b2db      	uxtb	r3, r3
 801687e:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8016880:	4313      	orrs	r3, r2
 8016882:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	78db      	ldrb	r3, [r3, #3]
 8016888:	f003 0303 	and.w	r3, r3, #3
 801688c:	b2db      	uxtb	r3, r3
 801688e:	2b01      	cmp	r3, #1
 8016890:	d002      	beq.n	8016898 <dcd_edpt_open+0x21c>
 8016892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8016896:	e000      	b.n	801689a <dcd_edpt_open+0x21e>
 8016898:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 801689a:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 801689c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801689e:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 80168a0:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80168a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80168a6:	430a      	orrs	r2, r1
 80168a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80168aa:	3348      	adds	r3, #72	; 0x48
 80168ac:	015b      	lsls	r3, r3, #5
 80168ae:	440b      	add	r3, r1
 80168b0:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 80168b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168b4:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80168b8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80168bc:	2101      	movs	r1, #1
 80168be:	fa01 f202 	lsl.w	r2, r1, r2
 80168c2:	431a      	orrs	r2, r3
 80168c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  }

  return true;
 80168ca:	2301      	movs	r3, #1
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3730      	adds	r7, #48	; 0x30
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	0801b544 	.word	0x0801b544
 80168d8:	0801ab60 	.word	0x0801ab60
 80168dc:	e000edf0 	.word	0xe000edf0
 80168e0:	200094b0 	.word	0x200094b0
 80168e4:	20009534 	.word	0x20009534
 80168e8:	0801ab78 	.word	0x0801ab78

080168ec <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 80168ec:	b480      	push	{r7}
 80168ee:	b085      	sub	sp, #20
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	4603      	mov	r3, r0
 80168f4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 80168f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80168fa:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8016902:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  for(uint8_t n = 1; n < DWC2_EP_MAX; n++)
 8016906:	2301      	movs	r3, #1
 8016908:	73fb      	strb	r3, [r7, #15]
 801690a:	e01e      	b.n	801694a <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    dwc2->epout[n].doepctl = 0;
 801690c:	7bfb      	ldrb	r3, [r7, #15]
 801690e:	68ba      	ldr	r2, [r7, #8]
 8016910:	3358      	adds	r3, #88	; 0x58
 8016912:	015b      	lsls	r3, r3, #5
 8016914:	4413      	add	r3, r2
 8016916:	2200      	movs	r2, #0
 8016918:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 801691a:	7bfb      	ldrb	r3, [r7, #15]
 801691c:	4a11      	ldr	r2, [pc, #68]	; (8016964 <dcd_edpt_close_all+0x78>)
 801691e:	015b      	lsls	r3, r3, #5
 8016920:	4413      	add	r3, r2
 8016922:	330a      	adds	r3, #10
 8016924:	2200      	movs	r2, #0
 8016926:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    dwc2->epin[n].diepctl = 0;
 8016928:	7bfb      	ldrb	r3, [r7, #15]
 801692a:	68ba      	ldr	r2, [r7, #8]
 801692c:	3348      	adds	r3, #72	; 0x48
 801692e:	015b      	lsls	r3, r3, #5
 8016930:	4413      	add	r3, r2
 8016932:	2200      	movs	r2, #0
 8016934:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8016936:	7bfb      	ldrb	r3, [r7, #15]
 8016938:	4a0a      	ldr	r2, [pc, #40]	; (8016964 <dcd_edpt_close_all+0x78>)
 801693a:	015b      	lsls	r3, r3, #5
 801693c:	4413      	add	r3, r2
 801693e:	331a      	adds	r3, #26
 8016940:	2200      	movs	r2, #0
 8016942:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < DWC2_EP_MAX; n++)
 8016944:	7bfb      	ldrb	r3, [r7, #15]
 8016946:	3301      	adds	r3, #1
 8016948:	73fb      	strb	r3, [r7, #15]
 801694a:	7bfb      	ldrb	r3, [r7, #15]
 801694c:	2b03      	cmp	r3, #3
 801694e:	d9dd      	bls.n	801690c <dcd_edpt_close_all+0x20>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8016950:	4b05      	ldr	r3, [pc, #20]	; (8016968 <dcd_edpt_close_all+0x7c>)
 8016952:	2210      	movs	r2, #16
 8016954:	801a      	strh	r2, [r3, #0]
}
 8016956:	bf00      	nop
 8016958:	3714      	adds	r7, #20
 801695a:	46bd      	mov	sp, r7
 801695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop
 8016964:	200094b0 	.word	0x200094b0
 8016968:	20009534 	.word	0x20009534

0801696c <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 801696c:	b590      	push	{r4, r7, lr}
 801696e:	b089      	sub	sp, #36	; 0x24
 8016970:	af02      	add	r7, sp, #8
 8016972:	603a      	str	r2, [r7, #0]
 8016974:	461a      	mov	r2, r3
 8016976:	4603      	mov	r3, r0
 8016978:	71fb      	strb	r3, [r7, #7]
 801697a:	460b      	mov	r3, r1
 801697c:	71bb      	strb	r3, [r7, #6]
 801697e:	4613      	mov	r3, r2
 8016980:	80bb      	strh	r3, [r7, #4]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8016982:	79bb      	ldrb	r3, [r7, #6]
 8016984:	4618      	mov	r0, r3
 8016986:	f7ff f801 	bl	801598c <tu_edpt_number>
 801698a:	4603      	mov	r3, r0
 801698c:	757b      	strb	r3, [r7, #21]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 801698e:	79bb      	ldrb	r3, [r7, #6]
 8016990:	4618      	mov	r0, r3
 8016992:	f7fe ffed 	bl	8015970 <tu_edpt_dir>
 8016996:	4603      	mov	r3, r0
 8016998:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 801699a:	7d7a      	ldrb	r2, [r7, #21]
 801699c:	7d3b      	ldrb	r3, [r7, #20]
 801699e:	0052      	lsls	r2, r2, #1
 80169a0:	4413      	add	r3, r2
 80169a2:	011b      	lsls	r3, r3, #4
 80169a4:	4a22      	ldr	r2, [pc, #136]	; (8016a30 <dcd_edpt_xfer+0xc4>)
 80169a6:	4413      	add	r3, r2
 80169a8:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 80169aa:	693b      	ldr	r3, [r7, #16]
 80169ac:	683a      	ldr	r2, [r7, #0]
 80169ae:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 80169b0:	693b      	ldr	r3, [r7, #16]
 80169b2:	2200      	movs	r2, #0
 80169b4:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 80169b6:	693b      	ldr	r3, [r7, #16]
 80169b8:	88ba      	ldrh	r2, [r7, #4]
 80169ba:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0)
 80169bc:	7d7b      	ldrb	r3, [r7, #21]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d110      	bne.n	80169e4 <dcd_edpt_xfer+0x78>
  {
    ep0_pending[dir] = total_bytes;
 80169c2:	7d3b      	ldrb	r3, [r7, #20]
 80169c4:	491b      	ldr	r1, [pc, #108]	; (8016a34 <dcd_edpt_xfer+0xc8>)
 80169c6:	88ba      	ldrh	r2, [r7, #4]
 80169c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 80169cc:	7d3b      	ldrb	r3, [r7, #20]
 80169ce:	4a19      	ldr	r2, [pc, #100]	; (8016a34 <dcd_edpt_xfer+0xc8>)
 80169d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80169d4:	7d3a      	ldrb	r2, [r7, #20]
 80169d6:	7d79      	ldrb	r1, [r7, #21]
 80169d8:	79f8      	ldrb	r0, [r7, #7]
 80169da:	9300      	str	r3, [sp, #0]
 80169dc:	2301      	movs	r3, #1
 80169de:	f7ff f977 	bl	8015cd0 <edpt_schedule_packets>
 80169e2:	e020      	b.n	8016a26 <dcd_edpt_xfer+0xba>
  }
  else
  {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	895b      	ldrh	r3, [r3, #10]
 80169e8:	88ba      	ldrh	r2, [r7, #4]
 80169ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80169ee:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80169f0:	693b      	ldr	r3, [r7, #16]
 80169f2:	895a      	ldrh	r2, [r3, #10]
 80169f4:	88bb      	ldrh	r3, [r7, #4]
 80169f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80169fa:	fb01 f202 	mul.w	r2, r1, r2
 80169fe:	1a9b      	subs	r3, r3, r2
 8016a00:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ( (short_packet_size > 0) || (total_bytes == 0) ) num_packets++;
 8016a02:	89fb      	ldrh	r3, [r7, #14]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d102      	bne.n	8016a0e <dcd_edpt_xfer+0xa2>
 8016a08:	88bb      	ldrh	r3, [r7, #4]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d102      	bne.n	8016a14 <dcd_edpt_xfer+0xa8>
 8016a0e:	8afb      	ldrh	r3, [r7, #22]
 8016a10:	3301      	adds	r3, #1
 8016a12:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8016a14:	8afc      	ldrh	r4, [r7, #22]
 8016a16:	7d3a      	ldrb	r2, [r7, #20]
 8016a18:	7d79      	ldrb	r1, [r7, #21]
 8016a1a:	79f8      	ldrb	r0, [r7, #7]
 8016a1c:	88bb      	ldrh	r3, [r7, #4]
 8016a1e:	9300      	str	r3, [sp, #0]
 8016a20:	4623      	mov	r3, r4
 8016a22:	f7ff f955 	bl	8015cd0 <edpt_schedule_packets>
  }

  return true;
 8016a26:	2301      	movs	r3, #1
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	371c      	adds	r7, #28
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd90      	pop	{r4, r7, pc}
 8016a30:	200094b0 	.word	0x200094b0
 8016a34:	20009530 	.word	0x20009530

08016a38 <dcd_edpt_disable>:

  return true;
}

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b086      	sub	sp, #24
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	4603      	mov	r3, r0
 8016a40:	71fb      	strb	r3, [r7, #7]
 8016a42:	460b      	mov	r3, r1
 8016a44:	71bb      	strb	r3, [r7, #6]
 8016a46:	4613      	mov	r3, r2
 8016a48:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8016a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8016a4e:	617b      	str	r3, [r7, #20]

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8016a50:	79bb      	ldrb	r3, [r7, #6]
 8016a52:	4618      	mov	r0, r3
 8016a54:	f7fe ff9a 	bl	801598c <tu_edpt_number>
 8016a58:	4603      	mov	r3, r0
 8016a5a:	74fb      	strb	r3, [r7, #19]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8016a5c:	79bb      	ldrb	r3, [r7, #6]
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7fe ff86 	bl	8015970 <tu_edpt_dir>
 8016a64:	4603      	mov	r3, r0
 8016a66:	74bb      	strb	r3, [r7, #18]

  if ( dir == TUSB_DIR_IN )
 8016a68:	7cbb      	ldrb	r3, [r7, #18]
 8016a6a:	2b01      	cmp	r3, #1
 8016a6c:	d16e      	bne.n	8016b4c <dcd_edpt_disable+0x114>
  {
    dwc2_epin_t* epin = dwc2->epin;
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a74:	60bb      	str	r3, [r7, #8]

    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA) )
 8016a76:	7cfb      	ldrb	r3, [r7, #19]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d006      	beq.n	8016a8a <dcd_edpt_disable+0x52>
 8016a7c:	7cfb      	ldrb	r3, [r7, #19]
 8016a7e:	015b      	lsls	r3, r3, #5
 8016a80:	68ba      	ldr	r2, [r7, #8]
 8016a82:	4413      	add	r3, r2
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	db13      	blt.n	8016ab2 <dcd_edpt_disable+0x7a>
    {
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8016a8a:	7cfb      	ldrb	r3, [r7, #19]
 8016a8c:	015b      	lsls	r3, r3, #5
 8016a8e:	68ba      	ldr	r2, [r7, #8]
 8016a90:	4413      	add	r3, r2
 8016a92:	681a      	ldr	r2, [r3, #0]
 8016a94:	797b      	ldrb	r3, [r7, #5]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d002      	beq.n	8016aa0 <dcd_edpt_disable+0x68>
 8016a9a:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8016a9e:	e001      	b.n	8016aa4 <dcd_edpt_disable+0x6c>
 8016aa0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8016aa4:	7cfb      	ldrb	r3, [r7, #19]
 8016aa6:	015b      	lsls	r3, r3, #5
 8016aa8:	68b8      	ldr	r0, [r7, #8]
 8016aaa:	4403      	add	r3, r0
 8016aac:	430a      	orrs	r2, r1
 8016aae:	601a      	str	r2, [r3, #0]
 8016ab0:	e037      	b.n	8016b22 <dcd_edpt_disable+0xea>
    }
    else
    {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 8016ab2:	7cfb      	ldrb	r3, [r7, #19]
 8016ab4:	015b      	lsls	r3, r3, #5
 8016ab6:	68ba      	ldr	r2, [r7, #8]
 8016ab8:	4413      	add	r3, r2
 8016aba:	681a      	ldr	r2, [r3, #0]
 8016abc:	7cfb      	ldrb	r3, [r7, #19]
 8016abe:	015b      	lsls	r3, r3, #5
 8016ac0:	68b9      	ldr	r1, [r7, #8]
 8016ac2:	440b      	add	r3, r1
 8016ac4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8016ac8:	601a      	str	r2, [r3, #0]
      while ( (epin[epnum].diepint & DIEPINT_INEPNE) == 0 ) {}
 8016aca:	bf00      	nop
 8016acc:	7cfb      	ldrb	r3, [r7, #19]
 8016ace:	015b      	lsls	r3, r3, #5
 8016ad0:	68ba      	ldr	r2, [r7, #8]
 8016ad2:	4413      	add	r3, r2
 8016ad4:	689b      	ldr	r3, [r3, #8]
 8016ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d0f6      	beq.n	8016acc <dcd_edpt_disable+0x94>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8016ade:	7cfb      	ldrb	r3, [r7, #19]
 8016ae0:	015b      	lsls	r3, r3, #5
 8016ae2:	68ba      	ldr	r2, [r7, #8]
 8016ae4:	4413      	add	r3, r2
 8016ae6:	681a      	ldr	r2, [r3, #0]
 8016ae8:	797b      	ldrb	r3, [r7, #5]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d001      	beq.n	8016af2 <dcd_edpt_disable+0xba>
 8016aee:	4946      	ldr	r1, [pc, #280]	; (8016c08 <dcd_edpt_disable+0x1d0>)
 8016af0:	e001      	b.n	8016af6 <dcd_edpt_disable+0xbe>
 8016af2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8016af6:	7cfb      	ldrb	r3, [r7, #19]
 8016af8:	015b      	lsls	r3, r3, #5
 8016afa:	68b8      	ldr	r0, [r7, #8]
 8016afc:	4403      	add	r3, r0
 8016afe:	430a      	orrs	r2, r1
 8016b00:	601a      	str	r2, [r3, #0]
      while ( (epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0 ) {}
 8016b02:	bf00      	nop
 8016b04:	7cfb      	ldrb	r3, [r7, #19]
 8016b06:	015b      	lsls	r3, r3, #5
 8016b08:	68ba      	ldr	r2, [r7, #8]
 8016b0a:	4413      	add	r3, r2
 8016b0c:	689b      	ldr	r3, [r3, #8]
 8016b0e:	f003 0302 	and.w	r3, r3, #2
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d0f6      	beq.n	8016b04 <dcd_edpt_disable+0xcc>

      epin[epnum].diepint = DIEPINT_EPDISD;
 8016b16:	7cfb      	ldrb	r3, [r7, #19]
 8016b18:	015b      	lsls	r3, r3, #5
 8016b1a:	68ba      	ldr	r2, [r7, #8]
 8016b1c:	4413      	add	r3, r2
 8016b1e:	2202      	movs	r2, #2
 8016b20:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl |= (epnum << GRSTCTL_TXFNUM_Pos);
 8016b22:	697b      	ldr	r3, [r7, #20]
 8016b24:	691b      	ldr	r3, [r3, #16]
 8016b26:	7cfa      	ldrb	r2, [r7, #19]
 8016b28:	0192      	lsls	r2, r2, #6
 8016b2a:	431a      	orrs	r2, r3
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	611a      	str	r2, [r3, #16]
    dwc2->grstctl |= GRSTCTL_TXFFLSH;
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	691b      	ldr	r3, [r3, #16]
 8016b34:	f043 0220 	orr.w	r2, r3, #32
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	611a      	str	r2, [r3, #16]
    while ( (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0 ) {}
 8016b3c:	bf00      	nop
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	691b      	ldr	r3, [r3, #16]
 8016b42:	f003 0320 	and.w	r3, r3, #32
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d1f9      	bne.n	8016b3e <dcd_edpt_disable+0x106>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 8016b4a:	e059      	b.n	8016c00 <dcd_edpt_disable+0x1c8>
    dwc2_epout_t* epout = dwc2->epout;
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b52:	60fb      	str	r3, [r7, #12]
    if ( (epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA) )
 8016b54:	7cfb      	ldrb	r3, [r7, #19]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d006      	beq.n	8016b68 <dcd_edpt_disable+0x130>
 8016b5a:	7cfb      	ldrb	r3, [r7, #19]
 8016b5c:	015b      	lsls	r3, r3, #5
 8016b5e:	68fa      	ldr	r2, [r7, #12]
 8016b60:	4413      	add	r3, r2
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	db12      	blt.n	8016b8e <dcd_edpt_disable+0x156>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 8016b68:	7cfb      	ldrb	r3, [r7, #19]
 8016b6a:	015b      	lsls	r3, r3, #5
 8016b6c:	68fa      	ldr	r2, [r7, #12]
 8016b6e:	4413      	add	r3, r2
 8016b70:	681a      	ldr	r2, [r3, #0]
 8016b72:	797b      	ldrb	r3, [r7, #5]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d002      	beq.n	8016b7e <dcd_edpt_disable+0x146>
 8016b78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016b7c:	e000      	b.n	8016b80 <dcd_edpt_disable+0x148>
 8016b7e:	2100      	movs	r1, #0
 8016b80:	7cfb      	ldrb	r3, [r7, #19]
 8016b82:	015b      	lsls	r3, r3, #5
 8016b84:	68f8      	ldr	r0, [r7, #12]
 8016b86:	4403      	add	r3, r0
 8016b88:	430a      	orrs	r2, r1
 8016b8a:	601a      	str	r2, [r3, #0]
}
 8016b8c:	e038      	b.n	8016c00 <dcd_edpt_disable+0x1c8>
      dwc2->dctl |= DCTL_SGONAK;
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8016b94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016b98:	697b      	ldr	r3, [r7, #20]
 8016b9a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      while ( (dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0 ) {}
 8016b9e:	bf00      	nop
 8016ba0:	697b      	ldr	r3, [r7, #20]
 8016ba2:	695b      	ldr	r3, [r3, #20]
 8016ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d0f9      	beq.n	8016ba0 <dcd_edpt_disable+0x168>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8016bac:	7cfb      	ldrb	r3, [r7, #19]
 8016bae:	015b      	lsls	r3, r3, #5
 8016bb0:	68fa      	ldr	r2, [r7, #12]
 8016bb2:	4413      	add	r3, r2
 8016bb4:	681a      	ldr	r2, [r3, #0]
 8016bb6:	797b      	ldrb	r3, [r7, #5]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d001      	beq.n	8016bc0 <dcd_edpt_disable+0x188>
 8016bbc:	4912      	ldr	r1, [pc, #72]	; (8016c08 <dcd_edpt_disable+0x1d0>)
 8016bbe:	e001      	b.n	8016bc4 <dcd_edpt_disable+0x18c>
 8016bc0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8016bc4:	7cfb      	ldrb	r3, [r7, #19]
 8016bc6:	015b      	lsls	r3, r3, #5
 8016bc8:	68f8      	ldr	r0, [r7, #12]
 8016bca:	4403      	add	r3, r0
 8016bcc:	430a      	orrs	r2, r1
 8016bce:	601a      	str	r2, [r3, #0]
      while ( (epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0 ) {}
 8016bd0:	bf00      	nop
 8016bd2:	7cfb      	ldrb	r3, [r7, #19]
 8016bd4:	015b      	lsls	r3, r3, #5
 8016bd6:	68fa      	ldr	r2, [r7, #12]
 8016bd8:	4413      	add	r3, r2
 8016bda:	689b      	ldr	r3, [r3, #8]
 8016bdc:	f003 0302 	and.w	r3, r3, #2
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d0f6      	beq.n	8016bd2 <dcd_edpt_disable+0x19a>
      epout[epnum].doepint = DOEPINT_EPDISD;
 8016be4:	7cfb      	ldrb	r3, [r7, #19]
 8016be6:	015b      	lsls	r3, r3, #5
 8016be8:	68fa      	ldr	r2, [r7, #12]
 8016bea:	4413      	add	r3, r2
 8016bec:	2202      	movs	r2, #2
 8016bee:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 8016bf0:	697b      	ldr	r3, [r7, #20]
 8016bf2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8016bf6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8016c00:	bf00      	nop
 8016c02:	3718      	adds	r7, #24
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}
 8016c08:	40200000 	.word	0x40200000

08016c0c <dcd_edpt_stall>:
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b082      	sub	sp, #8
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	4603      	mov	r3, r0
 8016c14:	460a      	mov	r2, r1
 8016c16:	71fb      	strb	r3, [r7, #7]
 8016c18:	4613      	mov	r3, r2
 8016c1a:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8016c1c:	79b9      	ldrb	r1, [r7, #6]
 8016c1e:	79fb      	ldrb	r3, [r7, #7]
 8016c20:	2201      	movs	r2, #1
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7ff ff08 	bl	8016a38 <dcd_edpt_disable>
}
 8016c28:	bf00      	nop
 8016c2a:	3708      	adds	r7, #8
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}

08016c30 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b084      	sub	sp, #16
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	4603      	mov	r3, r0
 8016c38:	460a      	mov	r2, r1
 8016c3a:	71fb      	strb	r3, [r7, #7]
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8016c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8016c44:	60fb      	str	r3, [r7, #12]

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8016c46:	79bb      	ldrb	r3, [r7, #6]
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7fe fe9f 	bl	801598c <tu_edpt_number>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	72fb      	strb	r3, [r7, #11]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8016c52:	79bb      	ldrb	r3, [r7, #6]
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7fe fe8b 	bl	8015970 <tu_edpt_dir>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	72bb      	strb	r3, [r7, #10]

  // Clear stall and reset data toggle
  if ( dir == TUSB_DIR_IN )
 8016c5e:	7abb      	ldrb	r3, [r7, #10]
 8016c60:	2b01      	cmp	r3, #1
 8016c62:	d11c      	bne.n	8016c9e <dcd_edpt_clear_stall+0x6e>
  {
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 8016c64:	7afb      	ldrb	r3, [r7, #11]
 8016c66:	68fa      	ldr	r2, [r7, #12]
 8016c68:	3348      	adds	r3, #72	; 0x48
 8016c6a:	015b      	lsls	r3, r3, #5
 8016c6c:	4413      	add	r3, r2
 8016c6e:	681a      	ldr	r2, [r3, #0]
 8016c70:	7afb      	ldrb	r3, [r7, #11]
 8016c72:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8016c76:	68f9      	ldr	r1, [r7, #12]
 8016c78:	3348      	adds	r3, #72	; 0x48
 8016c7a:	015b      	lsls	r3, r3, #5
 8016c7c:	440b      	add	r3, r1
 8016c7e:	601a      	str	r2, [r3, #0]
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 8016c80:	7afb      	ldrb	r3, [r7, #11]
 8016c82:	68fa      	ldr	r2, [r7, #12]
 8016c84:	3348      	adds	r3, #72	; 0x48
 8016c86:	015b      	lsls	r3, r3, #5
 8016c88:	4413      	add	r3, r2
 8016c8a:	681a      	ldr	r2, [r3, #0]
 8016c8c:	7afb      	ldrb	r3, [r7, #11]
 8016c8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8016c92:	68f9      	ldr	r1, [r7, #12]
 8016c94:	3348      	adds	r3, #72	; 0x48
 8016c96:	015b      	lsls	r3, r3, #5
 8016c98:	440b      	add	r3, r1
 8016c9a:	601a      	str	r2, [r3, #0]
  else
  {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8016c9c:	e01b      	b.n	8016cd6 <dcd_edpt_clear_stall+0xa6>
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 8016c9e:	7afb      	ldrb	r3, [r7, #11]
 8016ca0:	68fa      	ldr	r2, [r7, #12]
 8016ca2:	3358      	adds	r3, #88	; 0x58
 8016ca4:	015b      	lsls	r3, r3, #5
 8016ca6:	4413      	add	r3, r2
 8016ca8:	681a      	ldr	r2, [r3, #0]
 8016caa:	7afb      	ldrb	r3, [r7, #11]
 8016cac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8016cb0:	68f9      	ldr	r1, [r7, #12]
 8016cb2:	3358      	adds	r3, #88	; 0x58
 8016cb4:	015b      	lsls	r3, r3, #5
 8016cb6:	440b      	add	r3, r1
 8016cb8:	601a      	str	r2, [r3, #0]
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 8016cba:	7afb      	ldrb	r3, [r7, #11]
 8016cbc:	68fa      	ldr	r2, [r7, #12]
 8016cbe:	3358      	adds	r3, #88	; 0x58
 8016cc0:	015b      	lsls	r3, r3, #5
 8016cc2:	4413      	add	r3, r2
 8016cc4:	681a      	ldr	r2, [r3, #0]
 8016cc6:	7afb      	ldrb	r3, [r7, #11]
 8016cc8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8016ccc:	68f9      	ldr	r1, [r7, #12]
 8016cce:	3358      	adds	r3, #88	; 0x58
 8016cd0:	015b      	lsls	r3, r3, #5
 8016cd2:	440b      	add	r3, r1
 8016cd4:	601a      	str	r2, [r3, #0]
}
 8016cd6:	bf00      	nop
 8016cd8:	3710      	adds	r7, #16
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}

08016cde <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 8016cde:	b480      	push	{r7}
 8016ce0:	b08d      	sub	sp, #52	; 0x34
 8016ce2:	af00      	add	r7, sp, #0
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	6039      	str	r1, [r7, #0]
 8016ce8:	71fb      	strb	r3, [r7, #7]
 8016cea:	4613      	mov	r3, r2
 8016cec:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8016cee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8016cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile const uint32_t * rx_fifo = dwc2->fifo[0];
 8016cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016cfa:	627b      	str	r3, [r7, #36]	; 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8016cfc:	88bb      	ldrh	r3, [r7, #4]
 8016cfe:	089b      	lsrs	r3, r3, #2
 8016d00:	85fb      	strh	r3, [r7, #46]	; 0x2e
  while(full_words--)
 8016d02:	e00b      	b.n	8016d1c <read_fifo_packet+0x3e>
  {
    tu_unaligned_write32(dst, *rx_fifo);
 8016d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	683a      	ldr	r2, [r7, #0]
 8016d0a:	61ba      	str	r2, [r7, #24]
 8016d0c:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8016d0e:	69bb      	ldr	r3, [r7, #24]
 8016d10:	697a      	ldr	r2, [r7, #20]
 8016d12:	601a      	str	r2, [r3, #0]
 8016d14:	bf00      	nop
    dst += 4;
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	3304      	adds	r3, #4
 8016d1a:	603b      	str	r3, [r7, #0]
  while(full_words--)
 8016d1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016d1e:	1e5a      	subs	r2, r3, #1
 8016d20:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d1ee      	bne.n	8016d04 <read_fifo_packet+0x26>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 8016d26:	88bb      	ldrh	r3, [r7, #4]
 8016d28:	b2db      	uxtb	r3, r3
 8016d2a:	f003 0303 	and.w	r3, r3, #3
 8016d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ( bytes_rem != 0 )
 8016d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d020      	beq.n	8016d7c <read_fifo_packet+0x9e>
  {
    uint32_t const tmp = *rx_fifo;
 8016d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	61fb      	str	r3, [r7, #28]
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8016d44:	693b      	ldr	r3, [r7, #16]
 8016d46:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	701a      	strb	r2, [r3, #0]
    if ( bytes_rem > 1 ) dst[1] = tu_u32_byte1(tmp);
 8016d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016d50:	2b01      	cmp	r3, #1
 8016d52:	d907      	bls.n	8016d64 <read_fifo_packet+0x86>
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	3301      	adds	r3, #1
 8016d58:	69fa      	ldr	r2, [r7, #28]
 8016d5a:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8016d5c:	68fa      	ldr	r2, [r7, #12]
 8016d5e:	0a12      	lsrs	r2, r2, #8
 8016d60:	b2d2      	uxtb	r2, r2
 8016d62:	701a      	strb	r2, [r3, #0]
    if ( bytes_rem > 2 ) dst[2] = tu_u32_byte2(tmp);
 8016d64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016d68:	2b02      	cmp	r3, #2
 8016d6a:	d907      	bls.n	8016d7c <read_fifo_packet+0x9e>
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	3302      	adds	r3, #2
 8016d70:	69fa      	ldr	r2, [r7, #28]
 8016d72:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8016d74:	68ba      	ldr	r2, [r7, #8]
 8016d76:	0c12      	lsrs	r2, r2, #16
 8016d78:	b2d2      	uxtb	r2, r2
 8016d7a:	701a      	strb	r2, [r3, #0]
  }
}
 8016d7c:	bf00      	nop
 8016d7e:	3734      	adds	r7, #52	; 0x34
 8016d80:	46bd      	mov	sp, r7
 8016d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d86:	4770      	bx	lr

08016d88 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const * src, uint16_t len)
{
 8016d88:	b480      	push	{r7}
 8016d8a:	b089      	sub	sp, #36	; 0x24
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	603a      	str	r2, [r7, #0]
 8016d90:	461a      	mov	r2, r3
 8016d92:	4603      	mov	r3, r0
 8016d94:	71fb      	strb	r3, [r7, #7]
 8016d96:	460b      	mov	r3, r1
 8016d98:	71bb      	strb	r3, [r7, #6]
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8016d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8016da2:	617b      	str	r3, [r7, #20]
  volatile uint32_t * tx_fifo = dwc2->fifo[fifo_num];
 8016da4:	79bb      	ldrb	r3, [r7, #6]
 8016da6:	3301      	adds	r3, #1
 8016da8:	031b      	lsls	r3, r3, #12
 8016daa:	697a      	ldr	r2, [r7, #20]
 8016dac:	4413      	add	r3, r2
 8016dae:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 8016db0:	88bb      	ldrh	r3, [r7, #4]
 8016db2:	089b      	lsrs	r3, r3, #2
 8016db4:	83fb      	strh	r3, [r7, #30]
  while(full_words--)
 8016db6:	e008      	b.n	8016dca <write_fifo_packet+0x42>
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8016dbc:	68bb      	ldr	r3, [r7, #8]
 8016dbe:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(src);
 8016dc0:	693b      	ldr	r3, [r7, #16]
 8016dc2:	601a      	str	r2, [r3, #0]
    src += 4;
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	3304      	adds	r3, #4
 8016dc8:	603b      	str	r3, [r7, #0]
  while(full_words--)
 8016dca:	8bfb      	ldrh	r3, [r7, #30]
 8016dcc:	1e5a      	subs	r2, r3, #1
 8016dce:	83fa      	strh	r2, [r7, #30]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d1f1      	bne.n	8016db8 <write_fifo_packet+0x30>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 8016dd4:	88bb      	ldrh	r3, [r7, #4]
 8016dd6:	b2db      	uxtb	r3, r3
 8016dd8:	f003 0303 	and.w	r3, r3, #3
 8016ddc:	73fb      	strb	r3, [r7, #15]
  if ( bytes_rem )
 8016dde:	7bfb      	ldrb	r3, [r7, #15]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d01b      	beq.n	8016e1c <write_fifo_packet+0x94>
  {
    uint32_t tmp_word = src[0];
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	61bb      	str	r3, [r7, #24]
    if ( bytes_rem > 1 ) tmp_word |= (src[1] << 8);
 8016dea:	7bfb      	ldrb	r3, [r7, #15]
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	d907      	bls.n	8016e00 <write_fifo_packet+0x78>
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	3301      	adds	r3, #1
 8016df4:	781b      	ldrb	r3, [r3, #0]
 8016df6:	021b      	lsls	r3, r3, #8
 8016df8:	461a      	mov	r2, r3
 8016dfa:	69bb      	ldr	r3, [r7, #24]
 8016dfc:	4313      	orrs	r3, r2
 8016dfe:	61bb      	str	r3, [r7, #24]
    if ( bytes_rem > 2 ) tmp_word |= (src[2] << 16);
 8016e00:	7bfb      	ldrb	r3, [r7, #15]
 8016e02:	2b02      	cmp	r3, #2
 8016e04:	d907      	bls.n	8016e16 <write_fifo_packet+0x8e>
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	3302      	adds	r3, #2
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	041b      	lsls	r3, r3, #16
 8016e0e:	461a      	mov	r2, r3
 8016e10:	69bb      	ldr	r3, [r7, #24]
 8016e12:	4313      	orrs	r3, r2
 8016e14:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	69ba      	ldr	r2, [r7, #24]
 8016e1a:	601a      	str	r2, [r3, #0]
  }
}
 8016e1c:	bf00      	nop
 8016e1e:	3724      	adds	r7, #36	; 0x24
 8016e20:	46bd      	mov	sp, r7
 8016e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e26:	4770      	bx	lr

08016e28 <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b08c      	sub	sp, #48	; 0x30
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	4603      	mov	r3, r0
 8016e30:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t * dwc2 = DWC2_REG(rhport);
 8016e32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8016e36:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile uint32_t const * rx_fifo = dwc2->fifo[0];
 8016e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e3e:	627b      	str	r3, [r7, #36]	; 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 8016e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e42:	6a1b      	ldr	r3, [r3, #32]
 8016e44:	623b      	str	r3, [r7, #32]
  uint8_t  const pktsts   = (ctl_word & GRXSTSP_PKTSTS_Msk ) >> GRXSTSP_PKTSTS_Pos;
 8016e46:	6a3b      	ldr	r3, [r7, #32]
 8016e48:	0c5b      	lsrs	r3, r3, #17
 8016e4a:	b2db      	uxtb	r3, r3
 8016e4c:	f003 030f 	and.w	r3, r3, #15
 8016e50:	77fb      	strb	r3, [r7, #31]
  uint8_t  const epnum    = (ctl_word & GRXSTSP_EPNUM_Msk  ) >> GRXSTSP_EPNUM_Pos;
 8016e52:	6a3b      	ldr	r3, [r7, #32]
 8016e54:	b2db      	uxtb	r3, r3
 8016e56:	f003 030f 	and.w	r3, r3, #15
 8016e5a:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt     = (ctl_word & GRXSTSP_BCNT_Msk   ) >> GRXSTSP_BCNT_Pos;
 8016e5c:	6a3b      	ldr	r3, [r7, #32]
 8016e5e:	091b      	lsrs	r3, r3, #4
 8016e60:	b29b      	uxth	r3, r3
 8016e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016e66:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 8016e68:	7fbb      	ldrb	r3, [r7, #30]
 8016e6a:	3358      	adds	r3, #88	; 0x58
 8016e6c:	015b      	lsls	r3, r3, #5
 8016e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e70:	4413      	add	r3, r2
 8016e72:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch ( pktsts )
 8016e74:	7ffb      	ldrb	r3, [r7, #31]
 8016e76:	3b01      	subs	r3, #1
 8016e78:	2b05      	cmp	r3, #5
 8016e7a:	d87f      	bhi.n	8016f7c <handle_rxflvl_irq+0x154>
 8016e7c:	a201      	add	r2, pc, #4	; (adr r2, 8016e84 <handle_rxflvl_irq+0x5c>)
 8016e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e82:	bf00      	nop
 8016e84:	08016f91 	.word	0x08016f91
 8016e88:	08016ebd 	.word	0x08016ebd
 8016e8c:	08016f37 	.word	0x08016f37
 8016e90:	08016eaf 	.word	0x08016eaf
 8016e94:	08016f7d 	.word	0x08016f7d
 8016e98:	08016e9d 	.word	0x08016e9d
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 8016e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	4a41      	ldr	r2, [pc, #260]	; (8016fa8 <handle_rxflvl_irq+0x180>)
 8016ea2:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 8016ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	4a3f      	ldr	r2, [pc, #252]	; (8016fa8 <handle_rxflvl_irq+0x180>)
 8016eaa:	6053      	str	r3, [r2, #4]
    break;
 8016eac:	e077      	b.n	8016f9e <handle_rxflvl_irq+0x176>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8016eae:	69bb      	ldr	r3, [r7, #24]
 8016eb0:	691b      	ldr	r3, [r3, #16]
 8016eb2:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8016eb6:	69bb      	ldr	r3, [r7, #24]
 8016eb8:	611a      	str	r2, [r3, #16]
    break;
 8016eba:	e070      	b.n	8016f9e <handle_rxflvl_irq+0x176>

    case GRXSTS_PKTSTS_OUTRX:
    {
      // Out packet received
      xfer_ctl_t *xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8016ebc:	7fbb      	ldrb	r3, [r7, #30]
 8016ebe:	015b      	lsls	r3, r3, #5
 8016ec0:	4a3a      	ldr	r2, [pc, #232]	; (8016fac <handle_rxflvl_irq+0x184>)
 8016ec2:	4413      	add	r3, r2
 8016ec4:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if ( xfer->ff )
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d007      	beq.n	8016ede <handle_rxflvl_irq+0xb6>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 8016ece:	693b      	ldr	r3, [r7, #16]
 8016ed0:	685b      	ldr	r3, [r3, #4]
 8016ed2:	8bba      	ldrh	r2, [r7, #28]
 8016ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7fc fd49 	bl	801396e <tu_fifo_write_n_const_addr_full_words>
 8016edc:	e00c      	b.n	8016ef8 <handle_rxflvl_irq+0xd0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	6819      	ldr	r1, [r3, #0]
 8016ee2:	8bba      	ldrh	r2, [r7, #28]
 8016ee4:	79fb      	ldrb	r3, [r7, #7]
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7ff fef9 	bl	8016cde <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8016eec:	693b      	ldr	r3, [r7, #16]
 8016eee:	681a      	ldr	r2, [r3, #0]
 8016ef0:	8bbb      	ldrh	r3, [r7, #28]
 8016ef2:	441a      	add	r2, r3
 8016ef4:	693b      	ldr	r3, [r7, #16]
 8016ef6:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if ( bcnt < xfer->max_size )
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	895b      	ldrh	r3, [r3, #10]
 8016efc:	8bba      	ldrh	r2, [r7, #28]
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d248      	bcs.n	8016f94 <handle_rxflvl_irq+0x16c>
      {
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 8016f02:	69bb      	ldr	r3, [r7, #24]
 8016f04:	691b      	ldr	r3, [r3, #16]
 8016f06:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	891a      	ldrh	r2, [r3, #8]
 8016f0e:	b28b      	uxth	r3, r1
 8016f10:	1ad3      	subs	r3, r2, r3
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	693b      	ldr	r3, [r7, #16]
 8016f16:	811a      	strh	r2, [r3, #8]
        if ( epnum == 0 )
 8016f18:	7fbb      	ldrb	r3, [r7, #30]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d13a      	bne.n	8016f94 <handle_rxflvl_irq+0x16c>
        {
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	891a      	ldrh	r2, [r3, #8]
 8016f22:	4b23      	ldr	r3, [pc, #140]	; (8016fb0 <handle_rxflvl_irq+0x188>)
 8016f24:	881b      	ldrh	r3, [r3, #0]
 8016f26:	1ad3      	subs	r3, r2, r3
 8016f28:	b29a      	uxth	r2, r3
 8016f2a:	693b      	ldr	r3, [r7, #16]
 8016f2c:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8016f2e:	4b20      	ldr	r3, [pc, #128]	; (8016fb0 <handle_rxflvl_irq+0x188>)
 8016f30:	2200      	movs	r2, #0
 8016f32:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 8016f34:	e02e      	b.n	8016f94 <handle_rxflvl_irq+0x16c>
        // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
        // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
        // XFRC complete is additionally generated when
        // - setup packet is received
        // - complete the data stage of control write is complete
        if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8016f36:	7fbb      	ldrb	r3, [r7, #30]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d12d      	bne.n	8016f98 <handle_rxflvl_irq+0x170>
 8016f3c:	8bbb      	ldrh	r3, [r7, #28]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d12a      	bne.n	8016f98 <handle_rxflvl_irq+0x170>
 8016f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f46:	4a1b      	ldr	r2, [pc, #108]	; (8016fb4 <handle_rxflvl_irq+0x18c>)
 8016f48:	4293      	cmp	r3, r2
 8016f4a:	d925      	bls.n	8016f98 <handle_rxflvl_irq+0x170>
        {
          uint32_t doepint = epout->doepint;
 8016f4c:	69bb      	ldr	r3, [r7, #24]
 8016f4e:	689b      	ldr	r3, [r3, #8]
 8016f50:	617b      	str	r3, [r7, #20]

          if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR))
 8016f52:	697a      	ldr	r2, [r7, #20]
 8016f54:	f248 0320 	movw	r3, #32800	; 0x8020
 8016f58:	4013      	ands	r3, r2
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d01c      	beq.n	8016f98 <handle_rxflvl_irq+0x170>
          {
            // skip this "no-data" transfer complete event
            // Note: STPKTRX will be clear later by setup received handler
            uint32_t clear_flags = DOEPINT_XFRC;
 8016f5e:	2301      	movs	r3, #1
 8016f60:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 8016f62:	697b      	ldr	r3, [r7, #20]
 8016f64:	f003 0320 	and.w	r3, r3, #32
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d003      	beq.n	8016f74 <handle_rxflvl_irq+0x14c>
 8016f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f6e:	f043 0320 	orr.w	r3, r3, #32
 8016f72:	62fb      	str	r3, [r7, #44]	; 0x2c

            epout->doepint = clear_flags;
 8016f74:	69bb      	ldr	r3, [r7, #24]
 8016f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f78:	609a      	str	r2, [r3, #8]

            // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
          }
        }
    break;
 8016f7a:	e00d      	b.n	8016f98 <handle_rxflvl_irq+0x170>

    default:    // Invalid
      TU_BREAKPOINT();
 8016f7c:	4b0e      	ldr	r3, [pc, #56]	; (8016fb8 <handle_rxflvl_irq+0x190>)
 8016f7e:	60fb      	str	r3, [r7, #12]
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	f003 0301 	and.w	r3, r3, #1
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d007      	beq.n	8016f9c <handle_rxflvl_irq+0x174>
 8016f8c:	be00      	bkpt	0x0000
    break;
 8016f8e:	e005      	b.n	8016f9c <handle_rxflvl_irq+0x174>
    case GRXSTS_PKTSTS_GLOBALOUTNAK: break;
 8016f90:	bf00      	nop
 8016f92:	e004      	b.n	8016f9e <handle_rxflvl_irq+0x176>
    break;
 8016f94:	bf00      	nop
 8016f96:	e002      	b.n	8016f9e <handle_rxflvl_irq+0x176>
    break;
 8016f98:	bf00      	nop
 8016f9a:	e000      	b.n	8016f9e <handle_rxflvl_irq+0x176>
    break;
 8016f9c:	bf00      	nop
  }
}
 8016f9e:	bf00      	nop
 8016fa0:	3730      	adds	r7, #48	; 0x30
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	bd80      	pop	{r7, pc}
 8016fa6:	bf00      	nop
 8016fa8:	200094a8 	.word	0x200094a8
 8016fac:	200094b0 	.word	0x200094b0
 8016fb0:	20009530 	.word	0x20009530
 8016fb4:	4f543009 	.word	0x4f543009
 8016fb8:	e000edf0 	.word	0xe000edf0

08016fbc <handle_epout_irq>:

static void handle_epout_irq (uint8_t rhport)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b08a      	sub	sp, #40	; 0x28
 8016fc0:	af02      	add	r7, sp, #8
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8016fc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8016fca:	617b      	str	r3, [r7, #20]

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 8016fcc:	2300      	movs	r3, #0
 8016fce:	77fb      	strb	r3, [r7, #31]
 8016fd0:	e05d      	b.n	801708e <handle_epout_irq+0xd2>
  {
    if ( dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n) )
 8016fd2:	697b      	ldr	r3, [r7, #20]
 8016fd4:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8016fd8:	7ffb      	ldrb	r3, [r7, #31]
 8016fda:	3310      	adds	r3, #16
 8016fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8016fe0:	f003 0301 	and.w	r3, r3, #1
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d04f      	beq.n	8017088 <handle_epout_irq+0xcc>
    {
      dwc2_epout_t* epout = &dwc2->epout[n];
 8016fe8:	7ffb      	ldrb	r3, [r7, #31]
 8016fea:	3358      	adds	r3, #88	; 0x58
 8016fec:	015b      	lsls	r3, r3, #5
 8016fee:	697a      	ldr	r2, [r7, #20]
 8016ff0:	4413      	add	r3, r2
 8016ff2:	613b      	str	r3, [r7, #16]

      uint32_t const doepint = epout->doepint;
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	689b      	ldr	r3, [r3, #8]
 8016ff8:	60fb      	str	r3, [r7, #12]

      // SETUP packet Setup Phase done.
      if ( doepint & DOEPINT_STUP )
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	f003 0308 	and.w	r3, r3, #8
 8017000:	2b00      	cmp	r3, #0
 8017002:	d018      	beq.n	8017036 <handle_epout_irq+0x7a>
      {
        uint32_t clear_flag = DOEPINT_STUP;
 8017004:	2308      	movs	r3, #8
 8017006:	61bb      	str	r3, [r7, #24]

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a))
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801700e:	2b00      	cmp	r3, #0
 8017010:	d008      	beq.n	8017024 <handle_epout_irq+0x68>
 8017012:	697b      	ldr	r3, [r7, #20]
 8017014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017016:	4a22      	ldr	r2, [pc, #136]	; (80170a0 <handle_epout_irq+0xe4>)
 8017018:	4293      	cmp	r3, r2
 801701a:	d903      	bls.n	8017024 <handle_epout_irq+0x68>
        {
          clear_flag |= DOEPINT_STPKTRX;
 801701c:	69bb      	ldr	r3, [r7, #24]
 801701e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017022:	61bb      	str	r3, [r7, #24]
        }

        epout->doepint = clear_flag;
 8017024:	693b      	ldr	r3, [r7, #16]
 8017026:	69ba      	ldr	r2, [r7, #24]
 8017028:	609a      	str	r2, [r3, #8]
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
 801702a:	79fb      	ldrb	r3, [r7, #7]
 801702c:	2201      	movs	r2, #1
 801702e:	491d      	ldr	r1, [pc, #116]	; (80170a4 <handle_epout_irq+0xe8>)
 8017030:	4618      	mov	r0, r3
 8017032:	f7fd ff33 	bl	8014e9c <dcd_event_setup_received>
      }

      // OUT XFER complete
      if ( epout->doepint & DOEPINT_XFRC )
 8017036:	693b      	ldr	r3, [r7, #16]
 8017038:	689b      	ldr	r3, [r3, #8]
 801703a:	f003 0301 	and.w	r3, r3, #1
 801703e:	2b00      	cmp	r3, #0
 8017040:	d022      	beq.n	8017088 <handle_epout_irq+0xcc>
      {
        epout->doepint = DOEPINT_XFRC;
 8017042:	693b      	ldr	r3, [r7, #16]
 8017044:	2201      	movs	r2, #1
 8017046:	609a      	str	r2, [r3, #8]

        xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8017048:	7ffb      	ldrb	r3, [r7, #31]
 801704a:	015b      	lsls	r3, r3, #5
 801704c:	4a16      	ldr	r2, [pc, #88]	; (80170a8 <handle_epout_irq+0xec>)
 801704e:	4413      	add	r3, r2
 8017050:	60bb      	str	r3, [r7, #8]

        // EP0 can only handle one packet
        if ( (n == 0) && ep0_pending[TUSB_DIR_OUT] )
 8017052:	7ffb      	ldrb	r3, [r7, #31]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d10d      	bne.n	8017074 <handle_epout_irq+0xb8>
 8017058:	4b14      	ldr	r3, [pc, #80]	; (80170ac <handle_epout_irq+0xf0>)
 801705a:	881b      	ldrh	r3, [r3, #0]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d009      	beq.n	8017074 <handle_epout_irq+0xb8>
        {
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8017060:	4b12      	ldr	r3, [pc, #72]	; (80170ac <handle_epout_irq+0xf0>)
 8017062:	881b      	ldrh	r3, [r3, #0]
 8017064:	7ff9      	ldrb	r1, [r7, #31]
 8017066:	79f8      	ldrb	r0, [r7, #7]
 8017068:	9300      	str	r3, [sp, #0]
 801706a:	2301      	movs	r3, #1
 801706c:	2200      	movs	r2, #0
 801706e:	f7fe fe2f 	bl	8015cd0 <edpt_schedule_packets>
 8017072:	e009      	b.n	8017088 <handle_epout_irq+0xcc>
        }
        else
        {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8017074:	68bb      	ldr	r3, [r7, #8]
 8017076:	891b      	ldrh	r3, [r3, #8]
 8017078:	461a      	mov	r2, r3
 801707a:	7ff9      	ldrb	r1, [r7, #31]
 801707c:	79f8      	ldrb	r0, [r7, #7]
 801707e:	2301      	movs	r3, #1
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	2300      	movs	r3, #0
 8017084:	f7fd ff2d 	bl	8014ee2 <dcd_event_xfer_complete>
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 8017088:	7ffb      	ldrb	r3, [r7, #31]
 801708a:	3301      	adds	r3, #1
 801708c:	77fb      	strb	r3, [r7, #31]
 801708e:	7ffb      	ldrb	r3, [r7, #31]
 8017090:	2b03      	cmp	r3, #3
 8017092:	d99e      	bls.n	8016fd2 <handle_epout_irq+0x16>
        }
      }
    }
  }
}
 8017094:	bf00      	nop
 8017096:	bf00      	nop
 8017098:	3720      	adds	r7, #32
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}
 801709e:	bf00      	nop
 80170a0:	4f543009 	.word	0x4f543009
 80170a4:	200094a8 	.word	0x200094a8
 80170a8:	200094b0 	.word	0x200094b0
 80170ac:	20009530 	.word	0x20009530

080170b0 <handle_epin_irq>:

static void handle_epin_irq (uint8_t rhport)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b08c      	sub	sp, #48	; 0x30
 80170b4:	af02      	add	r7, sp, #8
 80170b6:	4603      	mov	r3, r0
 80170b8:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 80170ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80170be:	623b      	str	r3, [r7, #32]
  dwc2_epin_t* epin = dwc2->epin;
 80170c0:	6a3b      	ldr	r3, [r7, #32]
 80170c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80170c6:	61fb      	str	r3, [r7, #28]

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 80170c8:	2300      	movs	r3, #0
 80170ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80170ce:	e0cd      	b.n	801726c <handle_epin_irq+0x1bc>
  {
    if ( dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n) )
 80170d0:	6a3b      	ldr	r3, [r7, #32]
 80170d2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80170d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170da:	fa22 f303 	lsr.w	r3, r2, r3
 80170de:	f003 0301 	and.w	r3, r3, #1
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	f000 80bd 	beq.w	8017262 <handle_epin_irq+0x1b2>
    {
      // IN XFER complete (entire xfer).
      xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 80170e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170ec:	015b      	lsls	r3, r3, #5
 80170ee:	3310      	adds	r3, #16
 80170f0:	4a63      	ldr	r2, [pc, #396]	; (8017280 <handle_epin_irq+0x1d0>)
 80170f2:	4413      	add	r3, r2
 80170f4:	61bb      	str	r3, [r7, #24]

      if ( epin[n].diepint & DIEPINT_XFRC )
 80170f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170fa:	015b      	lsls	r3, r3, #5
 80170fc:	69fa      	ldr	r2, [r7, #28]
 80170fe:	4413      	add	r3, r2
 8017100:	689b      	ldr	r3, [r3, #8]
 8017102:	f003 0301 	and.w	r3, r3, #1
 8017106:	2b00      	cmp	r3, #0
 8017108:	d027      	beq.n	801715a <handle_epin_irq+0xaa>
      {
        epin[n].diepint = DIEPINT_XFRC;
 801710a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801710e:	015b      	lsls	r3, r3, #5
 8017110:	69fa      	ldr	r2, [r7, #28]
 8017112:	4413      	add	r3, r2
 8017114:	2201      	movs	r2, #1
 8017116:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ( (n == 0) && ep0_pending[TUSB_DIR_IN] )
 8017118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801711c:	2b00      	cmp	r3, #0
 801711e:	d10e      	bne.n	801713e <handle_epin_irq+0x8e>
 8017120:	4b58      	ldr	r3, [pc, #352]	; (8017284 <handle_epin_irq+0x1d4>)
 8017122:	885b      	ldrh	r3, [r3, #2]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d00a      	beq.n	801713e <handle_epin_irq+0x8e>
        {
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8017128:	4b56      	ldr	r3, [pc, #344]	; (8017284 <handle_epin_irq+0x1d4>)
 801712a:	885b      	ldrh	r3, [r3, #2]
 801712c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8017130:	79f8      	ldrb	r0, [r7, #7]
 8017132:	9300      	str	r3, [sp, #0]
 8017134:	2301      	movs	r3, #1
 8017136:	2201      	movs	r2, #1
 8017138:	f7fe fdca 	bl	8015cd0 <edpt_schedule_packets>
 801713c:	e00d      	b.n	801715a <handle_epin_irq+0xaa>
        }
        else
        {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 801713e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017142:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017146:	b2d9      	uxtb	r1, r3
 8017148:	69bb      	ldr	r3, [r7, #24]
 801714a:	891b      	ldrh	r3, [r3, #8]
 801714c:	461a      	mov	r2, r3
 801714e:	79f8      	ldrb	r0, [r7, #7]
 8017150:	2301      	movs	r3, #1
 8017152:	9300      	str	r3, [sp, #0]
 8017154:	2300      	movs	r3, #0
 8017156:	f7fd fec4 	bl	8014ee2 <dcd_event_xfer_complete>
        }
      }

      // XFER FIFO empty
      if ( (epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n)) )
 801715a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801715e:	015b      	lsls	r3, r3, #5
 8017160:	69fa      	ldr	r2, [r7, #28]
 8017162:	4413      	add	r3, r2
 8017164:	689b      	ldr	r3, [r3, #8]
 8017166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801716a:	2b00      	cmp	r3, #0
 801716c:	d079      	beq.n	8017262 <handle_epin_irq+0x1b2>
 801716e:	6a3b      	ldr	r3, [r7, #32]
 8017170:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8017174:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017178:	2101      	movs	r1, #1
 801717a:	fa01 f202 	lsl.w	r2, r1, r2
 801717e:	4013      	ands	r3, r2
 8017180:	2b00      	cmp	r3, #0
 8017182:	d06e      	beq.n	8017262 <handle_epin_irq+0x1b2>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 8017184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017188:	015b      	lsls	r3, r3, #5
 801718a:	69fa      	ldr	r2, [r7, #28]
 801718c:	4413      	add	r3, r2
 801718e:	691b      	ldr	r3, [r3, #16]
 8017190:	0cdb      	lsrs	r3, r3, #19
 8017192:	b29b      	uxth	r3, r3
 8017194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017198:	82fb      	strh	r3, [r7, #22]

        // Process every single packet (only whole packets can be written to fifo)
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 801719a:	2300      	movs	r3, #0
 801719c:	84bb      	strh	r3, [r7, #36]	; 0x24
 801719e:	e043      	b.n	8017228 <handle_epin_irq+0x178>
        {
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 80171a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171a4:	015b      	lsls	r3, r3, #5
 80171a6:	69fa      	ldr	r2, [r7, #28]
 80171a8:	4413      	add	r3, r2
 80171aa:	691b      	ldr	r3, [r3, #16]
 80171ac:	82bb      	strh	r3, [r7, #20]

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 80171ae:	69bb      	ldr	r3, [r7, #24]
 80171b0:	895a      	ldrh	r2, [r3, #10]
 80171b2:	8abb      	ldrh	r3, [r7, #20]
 80171b4:	817b      	strh	r3, [r7, #10]
 80171b6:	4613      	mov	r3, r2
 80171b8:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80171ba:	897a      	ldrh	r2, [r7, #10]
 80171bc:	893b      	ldrh	r3, [r7, #8]
 80171be:	4293      	cmp	r3, r2
 80171c0:	bf28      	it	cs
 80171c2:	4613      	movcs	r3, r2
 80171c4:	b29b      	uxth	r3, r3
 80171c6:	827b      	strh	r3, [r7, #18]

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 80171c8:	8a7a      	ldrh	r2, [r7, #18]
 80171ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171ce:	015b      	lsls	r3, r3, #5
 80171d0:	69f9      	ldr	r1, [r7, #28]
 80171d2:	440b      	add	r3, r1
 80171d4:	699b      	ldr	r3, [r3, #24]
 80171d6:	0099      	lsls	r1, r3, #2
 80171d8:	4b2b      	ldr	r3, [pc, #172]	; (8017288 <handle_epin_irq+0x1d8>)
 80171da:	400b      	ands	r3, r1
 80171dc:	429a      	cmp	r2, r3
 80171de:	d828      	bhi.n	8017232 <handle_epin_irq+0x182>

          // Push packet to Tx-FIFO
          if ( xfer->ff )
 80171e0:	69bb      	ldr	r3, [r7, #24]
 80171e2:	685b      	ldr	r3, [r3, #4]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d00e      	beq.n	8017206 <handle_epin_irq+0x156>
          {
            volatile uint32_t *tx_fifo = dwc2->fifo[n];
 80171e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171ec:	3301      	adds	r3, #1
 80171ee:	031b      	lsls	r3, r3, #12
 80171f0:	6a3a      	ldr	r2, [r7, #32]
 80171f2:	4413      	add	r3, r2
 80171f4:	60fb      	str	r3, [r7, #12]
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 80171f6:	69bb      	ldr	r3, [r7, #24]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	8a7a      	ldrh	r2, [r7, #18]
 80171fc:	68f9      	ldr	r1, [r7, #12]
 80171fe:	4618      	mov	r0, r3
 8017200:	f7fc fb91 	bl	8013926 <tu_fifo_read_n_const_addr_full_words>
 8017204:	e00d      	b.n	8017222 <handle_epin_irq+0x172>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8017206:	69bb      	ldr	r3, [r7, #24]
 8017208:	681a      	ldr	r2, [r3, #0]
 801720a:	8a7b      	ldrh	r3, [r7, #18]
 801720c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8017210:	79f8      	ldrb	r0, [r7, #7]
 8017212:	f7ff fdb9 	bl	8016d88 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8017216:	69bb      	ldr	r3, [r7, #24]
 8017218:	681a      	ldr	r2, [r3, #0]
 801721a:	8a7b      	ldrh	r3, [r7, #18]
 801721c:	441a      	add	r2, r3
 801721e:	69bb      	ldr	r3, [r7, #24]
 8017220:	601a      	str	r2, [r3, #0]
        for ( uint16_t i = 0; i < remaining_packets; i++ )
 8017222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017224:	3301      	adds	r3, #1
 8017226:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017228:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801722a:	8afb      	ldrh	r3, [r7, #22]
 801722c:	429a      	cmp	r2, r3
 801722e:	d3b7      	bcc.n	80171a0 <handle_epin_irq+0xf0>
 8017230:	e000      	b.n	8017234 <handle_epin_irq+0x184>
          if ( packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2) ) break;
 8017232:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if ( ((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0 )
 8017234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017238:	015b      	lsls	r3, r3, #5
 801723a:	69fa      	ldr	r2, [r7, #28]
 801723c:	4413      	add	r3, r2
 801723e:	691b      	ldr	r3, [r3, #16]
 8017240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017244:	2b00      	cmp	r3, #0
 8017246:	d10c      	bne.n	8017262 <handle_epin_irq+0x1b2>
        {
          dwc2->diepempmsk &= ~(1 << n);
 8017248:	6a3b      	ldr	r3, [r7, #32]
 801724a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 801724e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017252:	2101      	movs	r1, #1
 8017254:	fa01 f202 	lsl.w	r2, r1, r2
 8017258:	43d2      	mvns	r2, r2
 801725a:	401a      	ands	r2, r3
 801725c:	6a3b      	ldr	r3, [r7, #32]
 801725e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  for ( uint8_t n = 0; n < DWC2_EP_MAX; n++ )
 8017262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017266:	3301      	adds	r3, #1
 8017268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801726c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017270:	2b03      	cmp	r3, #3
 8017272:	f67f af2d 	bls.w	80170d0 <handle_epin_irq+0x20>
        }
      }
    }
  }
}
 8017276:	bf00      	nop
 8017278:	bf00      	nop
 801727a:	3728      	adds	r7, #40	; 0x28
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	200094b0 	.word	0x200094b0
 8017284:	20009530 	.word	0x20009530
 8017288:	0003fffc 	.word	0x0003fffc

0801728c <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af00      	add	r7, sp, #0
 8017292:	4603      	mov	r3, r0
 8017294:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8017296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801729a:	613b      	str	r3, [r7, #16]

  uint32_t const int_status = dwc2->gintsts & dwc2->gintmsk;
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	695a      	ldr	r2, [r3, #20]
 80172a0:	693b      	ldr	r3, [r7, #16]
 80172a2:	699b      	ldr	r3, [r3, #24]
 80172a4:	4013      	ands	r3, r2
 80172a6:	60fb      	str	r3, [r7, #12]

  if(int_status & GINTSTS_USBRST)
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d007      	beq.n	80172c2 <dcd_int_handler+0x36>
  {
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 80172b2:	693b      	ldr	r3, [r7, #16]
 80172b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80172b8:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 80172ba:	79fb      	ldrb	r3, [r7, #7]
 80172bc:	4618      	mov	r0, r3
 80172be:	f7fe fc93 	bl	8015be8 <bus_reset>
  }

  if(int_status & GINTSTS_ENUMDNE)
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d01d      	beq.n	8017308 <dcd_int_handler+0x7c>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    dwc2->gintsts = GINTSTS_ENUMDNE;
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80172d2:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos)
 80172d4:	693b      	ldr	r3, [r7, #16]
 80172d6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80172da:	085b      	lsrs	r3, r3, #1
 80172dc:	f003 0303 	and.w	r3, r3, #3
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d002      	beq.n	80172ea <dcd_int_handler+0x5e>
 80172e4:	2b02      	cmp	r3, #2
 80172e6:	d003      	beq.n	80172f0 <dcd_int_handler+0x64>
 80172e8:	e005      	b.n	80172f6 <dcd_int_handler+0x6a>
    {
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 80172ea:	2302      	movs	r3, #2
 80172ec:	75fb      	strb	r3, [r7, #23]
      break;
 80172ee:	e005      	b.n	80172fc <dcd_int_handler+0x70>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 80172f0:	2301      	movs	r3, #1
 80172f2:	75fb      	strb	r3, [r7, #23]
      break;
 80172f4:	e002      	b.n	80172fc <dcd_int_handler+0x70>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 80172f6:	2300      	movs	r3, #0
 80172f8:	75fb      	strb	r3, [r7, #23]
      break;
 80172fa:	bf00      	nop
    }

    dcd_event_bus_reset(rhport, speed, true);
 80172fc:	7df9      	ldrb	r1, [r7, #23]
 80172fe:	79fb      	ldrb	r3, [r7, #7]
 8017300:	2201      	movs	r2, #1
 8017302:	4618      	mov	r0, r3
 8017304:	f7fd fdaa 	bl	8014e5c <dcd_event_bus_reset>
  }

  if(int_status & GINTSTS_USBSUSP)
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801730e:	2b00      	cmp	r3, #0
 8017310:	d009      	beq.n	8017326 <dcd_int_handler+0x9a>
  {
    dwc2->gintsts = GINTSTS_USBSUSP;
 8017312:	693b      	ldr	r3, [r7, #16]
 8017314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017318:	615a      	str	r2, [r3, #20]
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
 801731a:	79fb      	ldrb	r3, [r7, #7]
 801731c:	2201      	movs	r2, #1
 801731e:	2104      	movs	r1, #4
 8017320:	4618      	mov	r0, r3
 8017322:	f7fd fd7d 	bl	8014e20 <dcd_event_bus_signal>
  }

  if(int_status & GINTSTS_WKUINT)
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	2b00      	cmp	r3, #0
 801732a:	da09      	bge.n	8017340 <dcd_int_handler+0xb4>
  {
    dwc2->gintsts = GINTSTS_WKUINT;
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017332:	615a      	str	r2, [r3, #20]
    dcd_event_bus_signal(rhport, DCD_EVENT_RESUME, true);
 8017334:	79fb      	ldrb	r3, [r7, #7]
 8017336:	2201      	movs	r2, #1
 8017338:	2105      	movs	r1, #5
 801733a:	4618      	mov	r0, r3
 801733c:	f7fd fd70 	bl	8014e20 <dcd_event_bus_signal>
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if(int_status & GINTSTS_OTGINT)
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	f003 0304 	and.w	r3, r3, #4
 8017346:	2b00      	cmp	r3, #0
 8017348:	d010      	beq.n	801736c <dcd_int_handler+0xe0>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 801734a:	693b      	ldr	r3, [r7, #16]
 801734c:	685b      	ldr	r3, [r3, #4]
 801734e:	60bb      	str	r3, [r7, #8]

    if (otg_int & GOTGINT_SEDET)
 8017350:	68bb      	ldr	r3, [r7, #8]
 8017352:	f003 0304 	and.w	r3, r3, #4
 8017356:	2b00      	cmp	r3, #0
 8017358:	d005      	beq.n	8017366 <dcd_int_handler+0xda>
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
 801735a:	79fb      	ldrb	r3, [r7, #7]
 801735c:	2201      	movs	r2, #1
 801735e:	2102      	movs	r1, #2
 8017360:	4618      	mov	r0, r3
 8017362:	f7fd fd5d 	bl	8014e20 <dcd_event_bus_signal>
    }

    dwc2->gotgint = otg_int;
 8017366:	693b      	ldr	r3, [r7, #16]
 8017368:	68ba      	ldr	r2, [r7, #8]
 801736a:	605a      	str	r2, [r3, #4]
  }

  if(int_status & GINTSTS_SOF)
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	f003 0308 	and.w	r3, r3, #8
 8017372:	2b00      	cmp	r3, #0
 8017374:	d00e      	beq.n	8017394 <dcd_int_handler+0x108>
  {
    dwc2->gotgint = GINTSTS_SOF;
 8017376:	693b      	ldr	r3, [r7, #16]
 8017378:	2208      	movs	r2, #8
 801737a:	605a      	str	r2, [r3, #4]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 801737c:	693b      	ldr	r3, [r7, #16]
 801737e:	699b      	ldr	r3, [r3, #24]
 8017380:	f023 0208 	bic.w	r2, r3, #8
 8017384:	693b      	ldr	r3, [r7, #16]
 8017386:	619a      	str	r2, [r3, #24]

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
 8017388:	79fb      	ldrb	r3, [r7, #7]
 801738a:	2201      	movs	r2, #1
 801738c:	2103      	movs	r1, #3
 801738e:	4618      	mov	r0, r3
 8017390:	f7fd fd46 	bl	8014e20 <dcd_event_bus_signal>
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & GINTSTS_RXFLVL)
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	f003 0310 	and.w	r3, r3, #16
 801739a:	2b00      	cmp	r3, #0
 801739c:	d020      	beq.n	80173e0 <dcd_int_handler+0x154>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 801739e:	693b      	ldr	r3, [r7, #16]
 80173a0:	699b      	ldr	r3, [r3, #24]
 80173a2:	f023 0210 	bic.w	r2, r3, #16
 80173a6:	693b      	ldr	r3, [r7, #16]
 80173a8:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_irq(rhport);
 80173aa:	79fb      	ldrb	r3, [r7, #7]
 80173ac:	4618      	mov	r0, r3
 80173ae:	f7ff fd3b 	bl	8016e28 <handle_rxflvl_irq>
    } while(dwc2->gotgint & GINTSTS_RXFLVL);
 80173b2:	693b      	ldr	r3, [r7, #16]
 80173b4:	685b      	ldr	r3, [r3, #4]
 80173b6:	f003 0310 	and.w	r3, r3, #16
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d1f5      	bne.n	80173aa <dcd_int_handler+0x11e>

    // Manage RX FIFO size
    if (_out_ep_closed)
 80173be:	4b13      	ldr	r3, [pc, #76]	; (801740c <dcd_int_handler+0x180>)
 80173c0:	781b      	ldrb	r3, [r3, #0]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d006      	beq.n	80173d4 <dcd_int_handler+0x148>
    {
      update_grxfsiz(rhport);
 80173c6:	79fb      	ldrb	r3, [r7, #7]
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7fe fbdb 	bl	8015b84 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 80173ce:	4b0f      	ldr	r3, [pc, #60]	; (801740c <dcd_int_handler+0x180>)
 80173d0:	2200      	movs	r2, #0
 80173d2:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 80173d4:	693b      	ldr	r3, [r7, #16]
 80173d6:	699b      	ldr	r3, [r3, #24]
 80173d8:	f043 0210 	orr.w	r2, r3, #16
 80173dc:	693b      	ldr	r3, [r7, #16]
 80173de:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & GINTSTS_OEPINT)
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d003      	beq.n	80173f2 <dcd_int_handler+0x166>
  {
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 80173ea:	79fb      	ldrb	r3, [r7, #7]
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7ff fde5 	bl	8016fbc <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if(int_status & GINTSTS_IEPINT)
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d003      	beq.n	8017404 <dcd_int_handler+0x178>
  {
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 80173fc:	79fb      	ldrb	r3, [r7, #7]
 80173fe:	4618      	mov	r0, r3
 8017400:	f7ff fe56 	bl	80170b0 <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 8017404:	bf00      	nop
 8017406:	3718      	adds	r7, #24
 8017408:	46bd      	mov	sp, r7
 801740a:	bd80      	pop	{r7, pc}
 801740c:	20009536 	.word	0x20009536

08017410 <tu_edpt_dir>:
// Endpoint helper
//--------------------------------------------------------------------+

// Get direction from Endpoint address
static inline tusb_dir_t tu_edpt_dir(uint8_t addr)
{
 8017410:	b480      	push	{r7}
 8017412:	b083      	sub	sp, #12
 8017414:	af00      	add	r7, sp, #0
 8017416:	4603      	mov	r3, r0
 8017418:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801741a:	79fb      	ldrb	r3, [r7, #7]
 801741c:	09db      	lsrs	r3, r3, #7
 801741e:	b2db      	uxtb	r3, r3
}
 8017420:	4618      	mov	r0, r3
 8017422:	370c      	adds	r7, #12
 8017424:	46bd      	mov	sp, r7
 8017426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742a:	4770      	bx	lr

0801742c <tu_edpt_number>:

// Get Endpoint number from address
static inline uint8_t tu_edpt_number(uint8_t addr)
{
 801742c:	b480      	push	{r7}
 801742e:	b083      	sub	sp, #12
 8017430:	af00      	add	r7, sp, #0
 8017432:	4603      	mov	r3, r0
 8017434:	71fb      	strb	r3, [r7, #7]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8017436:	79fb      	ldrb	r3, [r7, #7]
 8017438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801743c:	b2db      	uxtb	r3, r3
}
 801743e:	4618      	mov	r0, r3
 8017440:	370c      	adds	r7, #12
 8017442:	46bd      	mov	sp, r7
 8017444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017448:	4770      	bx	lr

0801744a <tu_edpt_packet_size>:
{
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
 801744a:	b480      	push	{r7}
 801744c:	b083      	sub	sp, #12
 801744e:	af00      	add	r7, sp, #0
 8017450:	6078      	str	r0, [r7, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	889b      	ldrh	r3, [r3, #4]
 8017456:	b29b      	uxth	r3, r3
 8017458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801745c:	b29b      	uxth	r3, r3
}
 801745e:	4618      	mov	r0, r3
 8017460:	370c      	adds	r7, #12
 8017462:	46bd      	mov	sp, r7
 8017464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017468:	4770      	bx	lr

0801746a <tu_desc_next>:

//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
 801746a:	b480      	push	{r7}
 801746c:	b085      	sub	sp, #20
 801746e:	af00      	add	r7, sp, #0
 8017470:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	781b      	ldrb	r3, [r3, #0]
 801747a:	461a      	mov	r2, r3
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	4413      	add	r3, r2
}
 8017480:	4618      	mov	r0, r3
 8017482:	3714      	adds	r7, #20
 8017484:	46bd      	mov	sp, r7
 8017486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748a:	4770      	bx	lr

0801748c <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
 801748c:	b480      	push	{r7}
 801748e:	b083      	sub	sp, #12
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	3301      	adds	r3, #1
 8017498:	781b      	ldrb	r3, [r3, #0]
}
 801749a:	4618      	mov	r0, r3
 801749c:	370c      	adds	r7, #12
 801749e:	46bd      	mov	sp, r7
 80174a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a4:	4770      	bx	lr
	...

080174a8 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b082      	sub	sp, #8
 80174ac:	af00      	add	r7, sp, #0
#if TUSB_OPT_DEVICE_ENABLED
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) ); // init device stack
 80174ae:	2000      	movs	r0, #0
 80174b0:	f7fc fc74 	bl	8013d9c <tud_init>
 80174b4:	4603      	mov	r3, r0
 80174b6:	f083 0301 	eor.w	r3, r3, #1
 80174ba:	b2db      	uxtb	r3, r3
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d00f      	beq.n	80174e0 <tusb_init+0x38>
 80174c0:	2229      	movs	r2, #41	; 0x29
 80174c2:	490a      	ldr	r1, [pc, #40]	; (80174ec <tusb_init+0x44>)
 80174c4:	480a      	ldr	r0, [pc, #40]	; (80174f0 <tusb_init+0x48>)
 80174c6:	f000 fbe3 	bl	8017c90 <iprintf>
 80174ca:	4b0a      	ldr	r3, [pc, #40]	; (80174f4 <tusb_init+0x4c>)
 80174cc:	607b      	str	r3, [r7, #4]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	f003 0301 	and.w	r3, r3, #1
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d000      	beq.n	80174dc <tusb_init+0x34>
 80174da:	be00      	bkpt	0x0000
 80174dc:	2300      	movs	r3, #0
 80174de:	e000      	b.n	80174e2 <tusb_init+0x3a>

#if TUSB_OPT_HOST_ENABLED
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) ); // init host stack
#endif

  return true;
 80174e0:	2301      	movs	r3, #1
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3708      	adds	r7, #8
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}
 80174ea:	bf00      	nop
 80174ec:	0801b554 	.word	0x0801b554
 80174f0:	0801ab9c 	.word	0x0801ab9c
 80174f4:	e000edf0 	.word	0xe000edf0

080174f8 <tusb_inited>:

bool tusb_inited(void)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b082      	sub	sp, #8
 80174fc:	af00      	add	r7, sp, #0
  bool ret = false;
 80174fe:	2300      	movs	r3, #0
 8017500:	71fb      	strb	r3, [r7, #7]

#if TUSB_OPT_DEVICE_ENABLED
  ret = ret || tud_inited();
 8017502:	79fb      	ldrb	r3, [r7, #7]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d104      	bne.n	8017512 <tusb_inited+0x1a>
 8017508:	f7fc fc3c 	bl	8013d84 <tud_inited>
 801750c:	4603      	mov	r3, r0
 801750e:	2b00      	cmp	r3, #0
 8017510:	d001      	beq.n	8017516 <tusb_inited+0x1e>
 8017512:	2301      	movs	r3, #1
 8017514:	e000      	b.n	8017518 <tusb_inited+0x20>
 8017516:	2300      	movs	r3, #0
 8017518:	71fb      	strb	r3, [r7, #7]
 801751a:	79fb      	ldrb	r3, [r7, #7]
 801751c:	f003 0301 	and.w	r3, r3, #1
 8017520:	71fb      	strb	r3, [r7, #7]

#if TUSB_OPT_HOST_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
 8017522:	79fb      	ldrb	r3, [r7, #7]
}
 8017524:	4618      	mov	r0, r3
 8017526:	3708      	adds	r7, #8
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}

0801752c <tu_edpt_validate>:
//--------------------------------------------------------------------+
// Internal Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b088      	sub	sp, #32
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	460b      	mov	r3, r1
 8017536:	70fb      	strb	r3, [r7, #3]
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f7ff ff86 	bl	801744a <tu_edpt_packet_size>
 801753e:	4603      	mov	r3, r0
 8017540:	83fb      	strh	r3, [r7, #30]
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	789b      	ldrb	r3, [r3, #2]
 8017546:	4619      	mov	r1, r3
 8017548:	8bfb      	ldrh	r3, [r7, #30]
 801754a:	461a      	mov	r2, r3
 801754c:	483f      	ldr	r0, [pc, #252]	; (801764c <tu_edpt_validate+0x120>)
 801754e:	f000 fb9f 	bl	8017c90 <iprintf>

  switch (desc_ep->bmAttributes.xfer)
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	78db      	ldrb	r3, [r3, #3]
 8017556:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801755a:	b2db      	uxtb	r3, r3
 801755c:	2b03      	cmp	r3, #3
 801755e:	d04d      	beq.n	80175fc <tu_edpt_validate+0xd0>
 8017560:	2b03      	cmp	r3, #3
 8017562:	dc67      	bgt.n	8017634 <tu_edpt_validate+0x108>
 8017564:	2b01      	cmp	r3, #1
 8017566:	d002      	beq.n	801756e <tu_edpt_validate+0x42>
 8017568:	2b02      	cmp	r3, #2
 801756a:	d01d      	beq.n	80175a8 <tu_edpt_validate+0x7c>
 801756c:	e062      	b.n	8017634 <tu_edpt_validate+0x108>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 801756e:	78fb      	ldrb	r3, [r7, #3]
 8017570:	2b02      	cmp	r3, #2
 8017572:	d102      	bne.n	801757a <tu_edpt_validate+0x4e>
 8017574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017578:	e001      	b.n	801757e <tu_edpt_validate+0x52>
 801757a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801757e:	81fb      	strh	r3, [r7, #14]
      TU_ASSERT(max_packet_size <= spec_size);
 8017580:	8bfa      	ldrh	r2, [r7, #30]
 8017582:	89fb      	ldrh	r3, [r7, #14]
 8017584:	429a      	cmp	r2, r3
 8017586:	d957      	bls.n	8017638 <tu_edpt_validate+0x10c>
 8017588:	2250      	movs	r2, #80	; 0x50
 801758a:	4931      	ldr	r1, [pc, #196]	; (8017650 <tu_edpt_validate+0x124>)
 801758c:	4831      	ldr	r0, [pc, #196]	; (8017654 <tu_edpt_validate+0x128>)
 801758e:	f000 fb7f 	bl	8017c90 <iprintf>
 8017592:	4b31      	ldr	r3, [pc, #196]	; (8017658 <tu_edpt_validate+0x12c>)
 8017594:	60bb      	str	r3, [r7, #8]
 8017596:	68bb      	ldr	r3, [r7, #8]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f003 0301 	and.w	r3, r3, #1
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d000      	beq.n	80175a4 <tu_edpt_validate+0x78>
 80175a2:	be00      	bkpt	0x0000
 80175a4:	2300      	movs	r3, #0
 80175a6:	e04d      	b.n	8017644 <tu_edpt_validate+0x118>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 80175a8:	78fb      	ldrb	r3, [r7, #3]
 80175aa:	2b02      	cmp	r3, #2
 80175ac:	d113      	bne.n	80175d6 <tu_edpt_validate+0xaa>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 80175ae:	8bfb      	ldrh	r3, [r7, #30]
 80175b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175b4:	d042      	beq.n	801763c <tu_edpt_validate+0x110>
 80175b6:	2258      	movs	r2, #88	; 0x58
 80175b8:	4925      	ldr	r1, [pc, #148]	; (8017650 <tu_edpt_validate+0x124>)
 80175ba:	4826      	ldr	r0, [pc, #152]	; (8017654 <tu_edpt_validate+0x128>)
 80175bc:	f000 fb68 	bl	8017c90 <iprintf>
 80175c0:	4b25      	ldr	r3, [pc, #148]	; (8017658 <tu_edpt_validate+0x12c>)
 80175c2:	613b      	str	r3, [r7, #16]
 80175c4:	693b      	ldr	r3, [r7, #16]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	f003 0301 	and.w	r3, r3, #1
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d000      	beq.n	80175d2 <tu_edpt_validate+0xa6>
 80175d0:	be00      	bkpt	0x0000
 80175d2:	2300      	movs	r3, #0
 80175d4:	e036      	b.n	8017644 <tu_edpt_validate+0x118>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 80175d6:	8bfb      	ldrh	r3, [r7, #30]
 80175d8:	2b40      	cmp	r3, #64	; 0x40
 80175da:	d92f      	bls.n	801763c <tu_edpt_validate+0x110>
 80175dc:	225c      	movs	r2, #92	; 0x5c
 80175de:	491c      	ldr	r1, [pc, #112]	; (8017650 <tu_edpt_validate+0x124>)
 80175e0:	481c      	ldr	r0, [pc, #112]	; (8017654 <tu_edpt_validate+0x128>)
 80175e2:	f000 fb55 	bl	8017c90 <iprintf>
 80175e6:	4b1c      	ldr	r3, [pc, #112]	; (8017658 <tu_edpt_validate+0x12c>)
 80175e8:	617b      	str	r3, [r7, #20]
 80175ea:	697b      	ldr	r3, [r7, #20]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	f003 0301 	and.w	r3, r3, #1
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d000      	beq.n	80175f8 <tu_edpt_validate+0xcc>
 80175f6:	be00      	bkpt	0x0000
 80175f8:	2300      	movs	r3, #0
 80175fa:	e023      	b.n	8017644 <tu_edpt_validate+0x118>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80175fc:	78fb      	ldrb	r3, [r7, #3]
 80175fe:	2b02      	cmp	r3, #2
 8017600:	d102      	bne.n	8017608 <tu_edpt_validate+0xdc>
 8017602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017606:	e000      	b.n	801760a <tu_edpt_validate+0xde>
 8017608:	2340      	movs	r3, #64	; 0x40
 801760a:	83bb      	strh	r3, [r7, #28]
      TU_ASSERT(max_packet_size <= spec_size);
 801760c:	8bfa      	ldrh	r2, [r7, #30]
 801760e:	8bbb      	ldrh	r3, [r7, #28]
 8017610:	429a      	cmp	r2, r3
 8017612:	d915      	bls.n	8017640 <tu_edpt_validate+0x114>
 8017614:	2263      	movs	r2, #99	; 0x63
 8017616:	490e      	ldr	r1, [pc, #56]	; (8017650 <tu_edpt_validate+0x124>)
 8017618:	480e      	ldr	r0, [pc, #56]	; (8017654 <tu_edpt_validate+0x128>)
 801761a:	f000 fb39 	bl	8017c90 <iprintf>
 801761e:	4b0e      	ldr	r3, [pc, #56]	; (8017658 <tu_edpt_validate+0x12c>)
 8017620:	61bb      	str	r3, [r7, #24]
 8017622:	69bb      	ldr	r3, [r7, #24]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	f003 0301 	and.w	r3, r3, #1
 801762a:	2b00      	cmp	r3, #0
 801762c:	d000      	beq.n	8017630 <tu_edpt_validate+0x104>
 801762e:	be00      	bkpt	0x0000
 8017630:	2300      	movs	r3, #0
 8017632:	e007      	b.n	8017644 <tu_edpt_validate+0x118>
    }
    break;

    default: return false;
 8017634:	2300      	movs	r3, #0
 8017636:	e005      	b.n	8017644 <tu_edpt_validate+0x118>
    break;
 8017638:	bf00      	nop
 801763a:	e002      	b.n	8017642 <tu_edpt_validate+0x116>
    break;
 801763c:	bf00      	nop
 801763e:	e000      	b.n	8017642 <tu_edpt_validate+0x116>
    break;
 8017640:	bf00      	nop
  }

  return true;
 8017642:	2301      	movs	r3, #1
}
 8017644:	4618      	mov	r0, r3
 8017646:	3720      	adds	r7, #32
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}
 801764c:	0801abb4 	.word	0x0801abb4
 8017650:	0801b560 	.word	0x0801b560
 8017654:	0801ab9c 	.word	0x0801ab9c
 8017658:	e000edf0 	.word	0xe000edf0

0801765c <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 801765c:	b590      	push	{r4, r7, lr}
 801765e:	b089      	sub	sp, #36	; 0x24
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	4611      	mov	r1, r2
 8017668:	461a      	mov	r2, r3
 801766a:	460b      	mov	r3, r1
 801766c:	80fb      	strh	r3, [r7, #6]
 801766e:	4613      	mov	r3, r2
 8017670:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8017672:	68bb      	ldr	r3, [r7, #8]
 8017674:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc_end = p_desc + desc_len;
 8017676:	88fb      	ldrh	r3, [r7, #6]
 8017678:	69fa      	ldr	r2, [r7, #28]
 801767a:	4413      	add	r3, r2
 801767c:	61bb      	str	r3, [r7, #24]

  while( p_desc < desc_end )
 801767e:	e022      	b.n	80176c6 <tu_edpt_bind_driver+0x6a>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8017680:	69f8      	ldr	r0, [r7, #28]
 8017682:	f7ff ff03 	bl	801748c <tu_desc_type>
 8017686:	4603      	mov	r3, r0
 8017688:	2b05      	cmp	r3, #5
 801768a:	d118      	bne.n	80176be <tu_edpt_bind_driver+0x62>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 801768c:	69fb      	ldr	r3, [r7, #28]
 801768e:	789b      	ldrb	r3, [r3, #2]
 8017690:	75fb      	strb	r3, [r7, #23]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
 8017692:	7dfb      	ldrb	r3, [r7, #23]
 8017694:	797a      	ldrb	r2, [r7, #5]
 8017696:	4619      	mov	r1, r3
 8017698:	480f      	ldr	r0, [pc, #60]	; (80176d8 <tu_edpt_bind_driver+0x7c>)
 801769a:	f000 faf9 	bl	8017c90 <iprintf>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 801769e:	7dfb      	ldrb	r3, [r7, #23]
 80176a0:	4618      	mov	r0, r3
 80176a2:	f7ff fec3 	bl	801742c <tu_edpt_number>
 80176a6:	4603      	mov	r3, r0
 80176a8:	005b      	lsls	r3, r3, #1
 80176aa:	68fa      	ldr	r2, [r7, #12]
 80176ac:	18d4      	adds	r4, r2, r3
 80176ae:	7dfb      	ldrb	r3, [r7, #23]
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7ff fead 	bl	8017410 <tu_edpt_dir>
 80176b6:	4603      	mov	r3, r0
 80176b8:	461a      	mov	r2, r3
 80176ba:	797b      	ldrb	r3, [r7, #5]
 80176bc:	54a3      	strb	r3, [r4, r2]
    }

    p_desc = tu_desc_next(p_desc);
 80176be:	69f8      	ldr	r0, [r7, #28]
 80176c0:	f7ff fed3 	bl	801746a <tu_desc_next>
 80176c4:	61f8      	str	r0, [r7, #28]
  while( p_desc < desc_end )
 80176c6:	69fa      	ldr	r2, [r7, #28]
 80176c8:	69bb      	ldr	r3, [r7, #24]
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d3d8      	bcc.n	8017680 <tu_edpt_bind_driver+0x24>
  }
}
 80176ce:	bf00      	nop
 80176d0:	bf00      	nop
 80176d2:	3724      	adds	r7, #36	; 0x24
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd90      	pop	{r4, r7, pc}
 80176d8:	0801abd4 	.word	0x0801abd4

080176dc <dump_str_line>:
#include <ctype.h>

char const* const tusb_strerr[TUSB_ERROR_COUNT] = { ERROR_TABLE(ERROR_STRING) };

static void dump_str_line(uint8_t const* buf, uint16_t count)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b084      	sub	sp, #16
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
 80176e4:	460b      	mov	r3, r1
 80176e6:	807b      	strh	r3, [r7, #2]
  tu_printf("  |");
 80176e8:	4813      	ldr	r0, [pc, #76]	; (8017738 <dump_str_line+0x5c>)
 80176ea:	f000 fad1 	bl	8017c90 <iprintf>

  // each line is 16 bytes
  for(uint16_t i=0; i<count; i++)
 80176ee:	2300      	movs	r3, #0
 80176f0:	81fb      	strh	r3, [r7, #14]
 80176f2:	e016      	b.n	8017722 <dump_str_line+0x46>
  {
    const char ch = buf[i];
 80176f4:	89fb      	ldrh	r3, [r7, #14]
 80176f6:	687a      	ldr	r2, [r7, #4]
 80176f8:	4413      	add	r3, r2
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	737b      	strb	r3, [r7, #13]
    tu_printf("%c", isprint(ch) ? ch : '.');
 80176fe:	7b7b      	ldrb	r3, [r7, #13]
 8017700:	3301      	adds	r3, #1
 8017702:	4a0e      	ldr	r2, [pc, #56]	; (801773c <dump_str_line+0x60>)
 8017704:	4413      	add	r3, r2
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	f003 0397 	and.w	r3, r3, #151	; 0x97
 801770c:	2b00      	cmp	r3, #0
 801770e:	d001      	beq.n	8017714 <dump_str_line+0x38>
 8017710:	7b7b      	ldrb	r3, [r7, #13]
 8017712:	e000      	b.n	8017716 <dump_str_line+0x3a>
 8017714:	232e      	movs	r3, #46	; 0x2e
 8017716:	4618      	mov	r0, r3
 8017718:	f000 fad2 	bl	8017cc0 <putchar>
  for(uint16_t i=0; i<count; i++)
 801771c:	89fb      	ldrh	r3, [r7, #14]
 801771e:	3301      	adds	r3, #1
 8017720:	81fb      	strh	r3, [r7, #14]
 8017722:	89fa      	ldrh	r2, [r7, #14]
 8017724:	887b      	ldrh	r3, [r7, #2]
 8017726:	429a      	cmp	r2, r3
 8017728:	d3e4      	bcc.n	80176f4 <dump_str_line+0x18>
  }

  tu_printf("|\r\n");
 801772a:	4805      	ldr	r0, [pc, #20]	; (8017740 <dump_str_line+0x64>)
 801772c:	f000 fb4c 	bl	8017dc8 <puts>
}
 8017730:	bf00      	nop
 8017732:	3710      	adds	r7, #16
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}
 8017738:	0801ad2c 	.word	0x0801ad2c
 801773c:	0801b571 	.word	0x0801b571
 8017740:	0801ad30 	.word	0x0801ad30

08017744 <tu_print_mem>:
 *  - buf   : buffer
 *  - count : number of item
 *  - indent: prefix spaces on every line
 */
void tu_print_mem(void const *buf, uint32_t count, uint8_t indent)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b08e      	sub	sp, #56	; 0x38
 8017748:	af00      	add	r7, sp, #0
 801774a:	60f8      	str	r0, [r7, #12]
 801774c:	60b9      	str	r1, [r7, #8]
 801774e:	4613      	mov	r3, r2
 8017750:	71fb      	strb	r3, [r7, #7]
  uint8_t const size = 1; // fixed 1 byte for now
 8017752:	2301      	movs	r3, #1
 8017754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if ( !buf || !count )
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d002      	beq.n	8017764 <tu_print_mem+0x20>
 801775e:	68bb      	ldr	r3, [r7, #8]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d103      	bne.n	801776c <tu_print_mem+0x28>
  {
    tu_printf("NULL\r\n");
 8017764:	4853      	ldr	r0, [pc, #332]	; (80178b4 <tu_print_mem+0x170>)
 8017766:	f000 fb2f 	bl	8017dc8 <puts>
 801776a:	e0a0      	b.n	80178ae <tu_print_mem+0x16a>
    return;
  }

  uint8_t const *buf8 = (uint8_t const *) buf;
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	637b      	str	r3, [r7, #52]	; 0x34

  char format[] = "%00X";
 8017770:	4a51      	ldr	r2, [pc, #324]	; (80178b8 <tu_print_mem+0x174>)
 8017772:	f107 0314 	add.w	r3, r7, #20
 8017776:	e892 0003 	ldmia.w	r2, {r0, r1}
 801777a:	6018      	str	r0, [r3, #0]
 801777c:	3304      	adds	r3, #4
 801777e:	7019      	strb	r1, [r3, #0]
  format[2] += 2*size;
 8017780:	7dba      	ldrb	r2, [r7, #22]
 8017782:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017786:	005b      	lsls	r3, r3, #1
 8017788:	b2db      	uxtb	r3, r3
 801778a:	4413      	add	r3, r2
 801778c:	b2db      	uxtb	r3, r3
 801778e:	75bb      	strb	r3, [r7, #22]

  const uint8_t item_per_line  = 16 / size;
 8017790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017794:	2210      	movs	r2, #16
 8017796:	fb92 f3f3 	sdiv	r3, r2, r3
 801779a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  for(unsigned int i=0; i<count; i++)
 801779e:	2300      	movs	r3, #0
 80177a0:	633b      	str	r3, [r7, #48]	; 0x30
 80177a2:	e049      	b.n	8017838 <tu_print_mem+0xf4>
  {
    unsigned int value=0;
 80177a4:	2300      	movs	r3, #0
 80177a6:	613b      	str	r3, [r7, #16]

    if ( i%item_per_line == 0 )
 80177a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80177ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80177b2:	fb01 f202 	mul.w	r2, r1, r2
 80177b6:	1a9b      	subs	r3, r3, r2
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d123      	bne.n	8017804 <tu_print_mem+0xc0>
    {
      // Print Ascii
      if ( i != 0 )
 80177bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d005      	beq.n	80177ce <tu_print_mem+0x8a>
      {
        dump_str_line(buf8-16, 16);
 80177c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177c4:	3b10      	subs	r3, #16
 80177c6:	2110      	movs	r1, #16
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7ff ff87 	bl	80176dc <dump_str_line>
      }

      for(uint8_t s=0; s < indent; s++) tu_printf(" ");
 80177ce:	2300      	movs	r3, #0
 80177d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80177d4:	e007      	b.n	80177e6 <tu_print_mem+0xa2>
 80177d6:	2020      	movs	r0, #32
 80177d8:	f000 fa72 	bl	8017cc0 <putchar>
 80177dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80177e0:	3301      	adds	r3, #1
 80177e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80177e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80177ea:	79fb      	ldrb	r3, [r7, #7]
 80177ec:	429a      	cmp	r2, r3
 80177ee:	d3f2      	bcc.n	80177d6 <tu_print_mem+0x92>

      // print offset or absolute address
      tu_printf("%04X: ", 16*i/item_per_line);
 80177f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f2:	011a      	lsls	r2, r3, #4
 80177f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80177f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80177fc:	4619      	mov	r1, r3
 80177fe:	482f      	ldr	r0, [pc, #188]	; (80178bc <tu_print_mem+0x178>)
 8017800:	f000 fa46 	bl	8017c90 <iprintf>
    }

    memcpy(&value, buf8, size);
 8017804:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8017808:	f107 0310 	add.w	r3, r7, #16
 801780c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801780e:	4618      	mov	r0, r3
 8017810:	f000 f979 	bl	8017b06 <memcpy>
    buf8 += size;
 8017814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801781a:	4413      	add	r3, r2
 801781c:	637b      	str	r3, [r7, #52]	; 0x34

    tu_printf(" ");
 801781e:	2020      	movs	r0, #32
 8017820:	f000 fa4e 	bl	8017cc0 <putchar>
    tu_printf(format, value);
 8017824:	693a      	ldr	r2, [r7, #16]
 8017826:	f107 0314 	add.w	r3, r7, #20
 801782a:	4611      	mov	r1, r2
 801782c:	4618      	mov	r0, r3
 801782e:	f000 fa2f 	bl	8017c90 <iprintf>
  for(unsigned int i=0; i<count; i++)
 8017832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017834:	3301      	adds	r3, #1
 8017836:	633b      	str	r3, [r7, #48]	; 0x30
 8017838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801783a:	68bb      	ldr	r3, [r7, #8]
 801783c:	429a      	cmp	r2, r3
 801783e:	d3b1      	bcc.n	80177a4 <tu_print_mem+0x60>
  }

  // fill up last row to 16 for printing ascii
  const uint32_t remain = count%16;
 8017840:	68bb      	ldr	r3, [r7, #8]
 8017842:	f003 030f 	and.w	r3, r3, #15
 8017846:	61fb      	str	r3, [r7, #28]
  uint8_t nback = (remain ? remain : 16);
 8017848:	69fb      	ldr	r3, [r7, #28]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d002      	beq.n	8017854 <tu_print_mem+0x110>
 801784e:	69fb      	ldr	r3, [r7, #28]
 8017850:	b2db      	uxtb	r3, r3
 8017852:	e000      	b.n	8017856 <tu_print_mem+0x112>
 8017854:	2310      	movs	r3, #16
 8017856:	76fb      	strb	r3, [r7, #27]

  if ( remain )
 8017858:	69fb      	ldr	r3, [r7, #28]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d01d      	beq.n	801789a <tu_print_mem+0x156>
  {
    for(uint32_t i=0; i< 16-remain; i++)
 801785e:	2300      	movs	r3, #0
 8017860:	62bb      	str	r3, [r7, #40]	; 0x28
 8017862:	e014      	b.n	801788e <tu_print_mem+0x14a>
    {
      tu_printf(" ");
 8017864:	2020      	movs	r0, #32
 8017866:	f000 fa2b 	bl	8017cc0 <putchar>
      for(int j=0; j<2*size; j++) tu_printf(" ");
 801786a:	2300      	movs	r3, #0
 801786c:	627b      	str	r3, [r7, #36]	; 0x24
 801786e:	e005      	b.n	801787c <tu_print_mem+0x138>
 8017870:	2020      	movs	r0, #32
 8017872:	f000 fa25 	bl	8017cc0 <putchar>
 8017876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017878:	3301      	adds	r3, #1
 801787a:	627b      	str	r3, [r7, #36]	; 0x24
 801787c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017880:	005b      	lsls	r3, r3, #1
 8017882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017884:	429a      	cmp	r2, r3
 8017886:	dbf3      	blt.n	8017870 <tu_print_mem+0x12c>
    for(uint32_t i=0; i< 16-remain; i++)
 8017888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801788a:	3301      	adds	r3, #1
 801788c:	62bb      	str	r3, [r7, #40]	; 0x28
 801788e:	69fb      	ldr	r3, [r7, #28]
 8017890:	f1c3 0310 	rsb	r3, r3, #16
 8017894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017896:	429a      	cmp	r2, r3
 8017898:	d3e4      	bcc.n	8017864 <tu_print_mem+0x120>
    }
  }

  dump_str_line(buf8-nback, nback);
 801789a:	7efb      	ldrb	r3, [r7, #27]
 801789c:	425b      	negs	r3, r3
 801789e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80178a0:	4413      	add	r3, r2
 80178a2:	7efa      	ldrb	r2, [r7, #27]
 80178a4:	b292      	uxth	r2, r2
 80178a6:	4611      	mov	r1, r2
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7ff ff17 	bl	80176dc <dump_str_line>
}
 80178ae:	3738      	adds	r7, #56	; 0x38
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}
 80178b4:	0801ad34 	.word	0x0801ad34
 80178b8:	0801ad44 	.word	0x0801ad44
 80178bc:	0801ad3c 	.word	0x0801ad3c

080178c0 <__errno>:
 80178c0:	4b01      	ldr	r3, [pc, #4]	; (80178c8 <__errno+0x8>)
 80178c2:	6818      	ldr	r0, [r3, #0]
 80178c4:	4770      	bx	lr
 80178c6:	bf00      	nop
 80178c8:	200001bc 	.word	0x200001bc

080178cc <std>:
 80178cc:	2300      	movs	r3, #0
 80178ce:	b510      	push	{r4, lr}
 80178d0:	4604      	mov	r4, r0
 80178d2:	e9c0 3300 	strd	r3, r3, [r0]
 80178d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80178da:	6083      	str	r3, [r0, #8]
 80178dc:	8181      	strh	r1, [r0, #12]
 80178de:	6643      	str	r3, [r0, #100]	; 0x64
 80178e0:	81c2      	strh	r2, [r0, #14]
 80178e2:	6183      	str	r3, [r0, #24]
 80178e4:	4619      	mov	r1, r3
 80178e6:	2208      	movs	r2, #8
 80178e8:	305c      	adds	r0, #92	; 0x5c
 80178ea:	f000 f934 	bl	8017b56 <memset>
 80178ee:	4b05      	ldr	r3, [pc, #20]	; (8017904 <std+0x38>)
 80178f0:	6263      	str	r3, [r4, #36]	; 0x24
 80178f2:	4b05      	ldr	r3, [pc, #20]	; (8017908 <std+0x3c>)
 80178f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80178f6:	4b05      	ldr	r3, [pc, #20]	; (801790c <std+0x40>)
 80178f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80178fa:	4b05      	ldr	r3, [pc, #20]	; (8017910 <std+0x44>)
 80178fc:	6224      	str	r4, [r4, #32]
 80178fe:	6323      	str	r3, [r4, #48]	; 0x30
 8017900:	bd10      	pop	{r4, pc}
 8017902:	bf00      	nop
 8017904:	08017f0d 	.word	0x08017f0d
 8017908:	08017f2f 	.word	0x08017f2f
 801790c:	08017f67 	.word	0x08017f67
 8017910:	08017f8b 	.word	0x08017f8b

08017914 <_cleanup_r>:
 8017914:	4901      	ldr	r1, [pc, #4]	; (801791c <_cleanup_r+0x8>)
 8017916:	f000 b8af 	b.w	8017a78 <_fwalk_reent>
 801791a:	bf00      	nop
 801791c:	08018291 	.word	0x08018291

08017920 <__sfmoreglue>:
 8017920:	b570      	push	{r4, r5, r6, lr}
 8017922:	2268      	movs	r2, #104	; 0x68
 8017924:	1e4d      	subs	r5, r1, #1
 8017926:	4355      	muls	r5, r2
 8017928:	460e      	mov	r6, r1
 801792a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801792e:	f000 f93b 	bl	8017ba8 <_malloc_r>
 8017932:	4604      	mov	r4, r0
 8017934:	b140      	cbz	r0, 8017948 <__sfmoreglue+0x28>
 8017936:	2100      	movs	r1, #0
 8017938:	e9c0 1600 	strd	r1, r6, [r0]
 801793c:	300c      	adds	r0, #12
 801793e:	60a0      	str	r0, [r4, #8]
 8017940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017944:	f000 f907 	bl	8017b56 <memset>
 8017948:	4620      	mov	r0, r4
 801794a:	bd70      	pop	{r4, r5, r6, pc}

0801794c <__sfp_lock_acquire>:
 801794c:	4801      	ldr	r0, [pc, #4]	; (8017954 <__sfp_lock_acquire+0x8>)
 801794e:	f000 b8d8 	b.w	8017b02 <__retarget_lock_acquire_recursive>
 8017952:	bf00      	nop
 8017954:	20009538 	.word	0x20009538

08017958 <__sfp_lock_release>:
 8017958:	4801      	ldr	r0, [pc, #4]	; (8017960 <__sfp_lock_release+0x8>)
 801795a:	f000 b8d3 	b.w	8017b04 <__retarget_lock_release_recursive>
 801795e:	bf00      	nop
 8017960:	20009538 	.word	0x20009538

08017964 <__sinit_lock_acquire>:
 8017964:	4801      	ldr	r0, [pc, #4]	; (801796c <__sinit_lock_acquire+0x8>)
 8017966:	f000 b8cc 	b.w	8017b02 <__retarget_lock_acquire_recursive>
 801796a:	bf00      	nop
 801796c:	20009539 	.word	0x20009539

08017970 <__sinit_lock_release>:
 8017970:	4801      	ldr	r0, [pc, #4]	; (8017978 <__sinit_lock_release+0x8>)
 8017972:	f000 b8c7 	b.w	8017b04 <__retarget_lock_release_recursive>
 8017976:	bf00      	nop
 8017978:	20009539 	.word	0x20009539

0801797c <__sinit>:
 801797c:	b510      	push	{r4, lr}
 801797e:	4604      	mov	r4, r0
 8017980:	f7ff fff0 	bl	8017964 <__sinit_lock_acquire>
 8017984:	69a3      	ldr	r3, [r4, #24]
 8017986:	b11b      	cbz	r3, 8017990 <__sinit+0x14>
 8017988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801798c:	f7ff bff0 	b.w	8017970 <__sinit_lock_release>
 8017990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017994:	6523      	str	r3, [r4, #80]	; 0x50
 8017996:	4b13      	ldr	r3, [pc, #76]	; (80179e4 <__sinit+0x68>)
 8017998:	4a13      	ldr	r2, [pc, #76]	; (80179e8 <__sinit+0x6c>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	62a2      	str	r2, [r4, #40]	; 0x28
 801799e:	42a3      	cmp	r3, r4
 80179a0:	bf04      	itt	eq
 80179a2:	2301      	moveq	r3, #1
 80179a4:	61a3      	streq	r3, [r4, #24]
 80179a6:	4620      	mov	r0, r4
 80179a8:	f000 f820 	bl	80179ec <__sfp>
 80179ac:	6060      	str	r0, [r4, #4]
 80179ae:	4620      	mov	r0, r4
 80179b0:	f000 f81c 	bl	80179ec <__sfp>
 80179b4:	60a0      	str	r0, [r4, #8]
 80179b6:	4620      	mov	r0, r4
 80179b8:	f000 f818 	bl	80179ec <__sfp>
 80179bc:	2200      	movs	r2, #0
 80179be:	60e0      	str	r0, [r4, #12]
 80179c0:	2104      	movs	r1, #4
 80179c2:	6860      	ldr	r0, [r4, #4]
 80179c4:	f7ff ff82 	bl	80178cc <std>
 80179c8:	68a0      	ldr	r0, [r4, #8]
 80179ca:	2201      	movs	r2, #1
 80179cc:	2109      	movs	r1, #9
 80179ce:	f7ff ff7d 	bl	80178cc <std>
 80179d2:	68e0      	ldr	r0, [r4, #12]
 80179d4:	2202      	movs	r2, #2
 80179d6:	2112      	movs	r1, #18
 80179d8:	f7ff ff78 	bl	80178cc <std>
 80179dc:	2301      	movs	r3, #1
 80179de:	61a3      	str	r3, [r4, #24]
 80179e0:	e7d2      	b.n	8017988 <__sinit+0xc>
 80179e2:	bf00      	nop
 80179e4:	0801b6d4 	.word	0x0801b6d4
 80179e8:	08017915 	.word	0x08017915

080179ec <__sfp>:
 80179ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179ee:	4607      	mov	r7, r0
 80179f0:	f7ff ffac 	bl	801794c <__sfp_lock_acquire>
 80179f4:	4b1e      	ldr	r3, [pc, #120]	; (8017a70 <__sfp+0x84>)
 80179f6:	681e      	ldr	r6, [r3, #0]
 80179f8:	69b3      	ldr	r3, [r6, #24]
 80179fa:	b913      	cbnz	r3, 8017a02 <__sfp+0x16>
 80179fc:	4630      	mov	r0, r6
 80179fe:	f7ff ffbd 	bl	801797c <__sinit>
 8017a02:	3648      	adds	r6, #72	; 0x48
 8017a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017a08:	3b01      	subs	r3, #1
 8017a0a:	d503      	bpl.n	8017a14 <__sfp+0x28>
 8017a0c:	6833      	ldr	r3, [r6, #0]
 8017a0e:	b30b      	cbz	r3, 8017a54 <__sfp+0x68>
 8017a10:	6836      	ldr	r6, [r6, #0]
 8017a12:	e7f7      	b.n	8017a04 <__sfp+0x18>
 8017a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017a18:	b9d5      	cbnz	r5, 8017a50 <__sfp+0x64>
 8017a1a:	4b16      	ldr	r3, [pc, #88]	; (8017a74 <__sfp+0x88>)
 8017a1c:	60e3      	str	r3, [r4, #12]
 8017a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017a22:	6665      	str	r5, [r4, #100]	; 0x64
 8017a24:	f000 f86c 	bl	8017b00 <__retarget_lock_init_recursive>
 8017a28:	f7ff ff96 	bl	8017958 <__sfp_lock_release>
 8017a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017a34:	6025      	str	r5, [r4, #0]
 8017a36:	61a5      	str	r5, [r4, #24]
 8017a38:	2208      	movs	r2, #8
 8017a3a:	4629      	mov	r1, r5
 8017a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017a40:	f000 f889 	bl	8017b56 <memset>
 8017a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a50:	3468      	adds	r4, #104	; 0x68
 8017a52:	e7d9      	b.n	8017a08 <__sfp+0x1c>
 8017a54:	2104      	movs	r1, #4
 8017a56:	4638      	mov	r0, r7
 8017a58:	f7ff ff62 	bl	8017920 <__sfmoreglue>
 8017a5c:	4604      	mov	r4, r0
 8017a5e:	6030      	str	r0, [r6, #0]
 8017a60:	2800      	cmp	r0, #0
 8017a62:	d1d5      	bne.n	8017a10 <__sfp+0x24>
 8017a64:	f7ff ff78 	bl	8017958 <__sfp_lock_release>
 8017a68:	230c      	movs	r3, #12
 8017a6a:	603b      	str	r3, [r7, #0]
 8017a6c:	e7ee      	b.n	8017a4c <__sfp+0x60>
 8017a6e:	bf00      	nop
 8017a70:	0801b6d4 	.word	0x0801b6d4
 8017a74:	ffff0001 	.word	0xffff0001

08017a78 <_fwalk_reent>:
 8017a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a7c:	4606      	mov	r6, r0
 8017a7e:	4688      	mov	r8, r1
 8017a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017a84:	2700      	movs	r7, #0
 8017a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8017a8e:	d505      	bpl.n	8017a9c <_fwalk_reent+0x24>
 8017a90:	6824      	ldr	r4, [r4, #0]
 8017a92:	2c00      	cmp	r4, #0
 8017a94:	d1f7      	bne.n	8017a86 <_fwalk_reent+0xe>
 8017a96:	4638      	mov	r0, r7
 8017a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a9c:	89ab      	ldrh	r3, [r5, #12]
 8017a9e:	2b01      	cmp	r3, #1
 8017aa0:	d907      	bls.n	8017ab2 <_fwalk_reent+0x3a>
 8017aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017aa6:	3301      	adds	r3, #1
 8017aa8:	d003      	beq.n	8017ab2 <_fwalk_reent+0x3a>
 8017aaa:	4629      	mov	r1, r5
 8017aac:	4630      	mov	r0, r6
 8017aae:	47c0      	blx	r8
 8017ab0:	4307      	orrs	r7, r0
 8017ab2:	3568      	adds	r5, #104	; 0x68
 8017ab4:	e7e9      	b.n	8017a8a <_fwalk_reent+0x12>
	...

08017ab8 <__libc_init_array>:
 8017ab8:	b570      	push	{r4, r5, r6, lr}
 8017aba:	4d0d      	ldr	r5, [pc, #52]	; (8017af0 <__libc_init_array+0x38>)
 8017abc:	4c0d      	ldr	r4, [pc, #52]	; (8017af4 <__libc_init_array+0x3c>)
 8017abe:	1b64      	subs	r4, r4, r5
 8017ac0:	10a4      	asrs	r4, r4, #2
 8017ac2:	2600      	movs	r6, #0
 8017ac4:	42a6      	cmp	r6, r4
 8017ac6:	d109      	bne.n	8017adc <__libc_init_array+0x24>
 8017ac8:	4d0b      	ldr	r5, [pc, #44]	; (8017af8 <__libc_init_array+0x40>)
 8017aca:	4c0c      	ldr	r4, [pc, #48]	; (8017afc <__libc_init_array+0x44>)
 8017acc:	f001 f9ea 	bl	8018ea4 <_init>
 8017ad0:	1b64      	subs	r4, r4, r5
 8017ad2:	10a4      	asrs	r4, r4, #2
 8017ad4:	2600      	movs	r6, #0
 8017ad6:	42a6      	cmp	r6, r4
 8017ad8:	d105      	bne.n	8017ae6 <__libc_init_array+0x2e>
 8017ada:	bd70      	pop	{r4, r5, r6, pc}
 8017adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ae0:	4798      	blx	r3
 8017ae2:	3601      	adds	r6, #1
 8017ae4:	e7ee      	b.n	8017ac4 <__libc_init_array+0xc>
 8017ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8017aea:	4798      	blx	r3
 8017aec:	3601      	adds	r6, #1
 8017aee:	e7f2      	b.n	8017ad6 <__libc_init_array+0x1e>
 8017af0:	0801b714 	.word	0x0801b714
 8017af4:	0801b714 	.word	0x0801b714
 8017af8:	0801b714 	.word	0x0801b714
 8017afc:	0801b718 	.word	0x0801b718

08017b00 <__retarget_lock_init_recursive>:
 8017b00:	4770      	bx	lr

08017b02 <__retarget_lock_acquire_recursive>:
 8017b02:	4770      	bx	lr

08017b04 <__retarget_lock_release_recursive>:
 8017b04:	4770      	bx	lr

08017b06 <memcpy>:
 8017b06:	440a      	add	r2, r1
 8017b08:	4291      	cmp	r1, r2
 8017b0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017b0e:	d100      	bne.n	8017b12 <memcpy+0xc>
 8017b10:	4770      	bx	lr
 8017b12:	b510      	push	{r4, lr}
 8017b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b1c:	4291      	cmp	r1, r2
 8017b1e:	d1f9      	bne.n	8017b14 <memcpy+0xe>
 8017b20:	bd10      	pop	{r4, pc}

08017b22 <memmove>:
 8017b22:	4288      	cmp	r0, r1
 8017b24:	b510      	push	{r4, lr}
 8017b26:	eb01 0402 	add.w	r4, r1, r2
 8017b2a:	d902      	bls.n	8017b32 <memmove+0x10>
 8017b2c:	4284      	cmp	r4, r0
 8017b2e:	4623      	mov	r3, r4
 8017b30:	d807      	bhi.n	8017b42 <memmove+0x20>
 8017b32:	1e43      	subs	r3, r0, #1
 8017b34:	42a1      	cmp	r1, r4
 8017b36:	d008      	beq.n	8017b4a <memmove+0x28>
 8017b38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b40:	e7f8      	b.n	8017b34 <memmove+0x12>
 8017b42:	4402      	add	r2, r0
 8017b44:	4601      	mov	r1, r0
 8017b46:	428a      	cmp	r2, r1
 8017b48:	d100      	bne.n	8017b4c <memmove+0x2a>
 8017b4a:	bd10      	pop	{r4, pc}
 8017b4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017b54:	e7f7      	b.n	8017b46 <memmove+0x24>

08017b56 <memset>:
 8017b56:	4402      	add	r2, r0
 8017b58:	4603      	mov	r3, r0
 8017b5a:	4293      	cmp	r3, r2
 8017b5c:	d100      	bne.n	8017b60 <memset+0xa>
 8017b5e:	4770      	bx	lr
 8017b60:	f803 1b01 	strb.w	r1, [r3], #1
 8017b64:	e7f9      	b.n	8017b5a <memset+0x4>
	...

08017b68 <sbrk_aligned>:
 8017b68:	b570      	push	{r4, r5, r6, lr}
 8017b6a:	4e0e      	ldr	r6, [pc, #56]	; (8017ba4 <sbrk_aligned+0x3c>)
 8017b6c:	460c      	mov	r4, r1
 8017b6e:	6831      	ldr	r1, [r6, #0]
 8017b70:	4605      	mov	r5, r0
 8017b72:	b911      	cbnz	r1, 8017b7a <sbrk_aligned+0x12>
 8017b74:	f000 f99a 	bl	8017eac <_sbrk_r>
 8017b78:	6030      	str	r0, [r6, #0]
 8017b7a:	4621      	mov	r1, r4
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	f000 f995 	bl	8017eac <_sbrk_r>
 8017b82:	1c43      	adds	r3, r0, #1
 8017b84:	d00a      	beq.n	8017b9c <sbrk_aligned+0x34>
 8017b86:	1cc4      	adds	r4, r0, #3
 8017b88:	f024 0403 	bic.w	r4, r4, #3
 8017b8c:	42a0      	cmp	r0, r4
 8017b8e:	d007      	beq.n	8017ba0 <sbrk_aligned+0x38>
 8017b90:	1a21      	subs	r1, r4, r0
 8017b92:	4628      	mov	r0, r5
 8017b94:	f000 f98a 	bl	8017eac <_sbrk_r>
 8017b98:	3001      	adds	r0, #1
 8017b9a:	d101      	bne.n	8017ba0 <sbrk_aligned+0x38>
 8017b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8017ba0:	4620      	mov	r0, r4
 8017ba2:	bd70      	pop	{r4, r5, r6, pc}
 8017ba4:	20009540 	.word	0x20009540

08017ba8 <_malloc_r>:
 8017ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bac:	1ccd      	adds	r5, r1, #3
 8017bae:	f025 0503 	bic.w	r5, r5, #3
 8017bb2:	3508      	adds	r5, #8
 8017bb4:	2d0c      	cmp	r5, #12
 8017bb6:	bf38      	it	cc
 8017bb8:	250c      	movcc	r5, #12
 8017bba:	2d00      	cmp	r5, #0
 8017bbc:	4607      	mov	r7, r0
 8017bbe:	db01      	blt.n	8017bc4 <_malloc_r+0x1c>
 8017bc0:	42a9      	cmp	r1, r5
 8017bc2:	d905      	bls.n	8017bd0 <_malloc_r+0x28>
 8017bc4:	230c      	movs	r3, #12
 8017bc6:	603b      	str	r3, [r7, #0]
 8017bc8:	2600      	movs	r6, #0
 8017bca:	4630      	mov	r0, r6
 8017bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bd0:	4e2e      	ldr	r6, [pc, #184]	; (8017c8c <_malloc_r+0xe4>)
 8017bd2:	f000 fc11 	bl	80183f8 <__malloc_lock>
 8017bd6:	6833      	ldr	r3, [r6, #0]
 8017bd8:	461c      	mov	r4, r3
 8017bda:	bb34      	cbnz	r4, 8017c2a <_malloc_r+0x82>
 8017bdc:	4629      	mov	r1, r5
 8017bde:	4638      	mov	r0, r7
 8017be0:	f7ff ffc2 	bl	8017b68 <sbrk_aligned>
 8017be4:	1c43      	adds	r3, r0, #1
 8017be6:	4604      	mov	r4, r0
 8017be8:	d14d      	bne.n	8017c86 <_malloc_r+0xde>
 8017bea:	6834      	ldr	r4, [r6, #0]
 8017bec:	4626      	mov	r6, r4
 8017bee:	2e00      	cmp	r6, #0
 8017bf0:	d140      	bne.n	8017c74 <_malloc_r+0xcc>
 8017bf2:	6823      	ldr	r3, [r4, #0]
 8017bf4:	4631      	mov	r1, r6
 8017bf6:	4638      	mov	r0, r7
 8017bf8:	eb04 0803 	add.w	r8, r4, r3
 8017bfc:	f000 f956 	bl	8017eac <_sbrk_r>
 8017c00:	4580      	cmp	r8, r0
 8017c02:	d13a      	bne.n	8017c7a <_malloc_r+0xd2>
 8017c04:	6821      	ldr	r1, [r4, #0]
 8017c06:	3503      	adds	r5, #3
 8017c08:	1a6d      	subs	r5, r5, r1
 8017c0a:	f025 0503 	bic.w	r5, r5, #3
 8017c0e:	3508      	adds	r5, #8
 8017c10:	2d0c      	cmp	r5, #12
 8017c12:	bf38      	it	cc
 8017c14:	250c      	movcc	r5, #12
 8017c16:	4629      	mov	r1, r5
 8017c18:	4638      	mov	r0, r7
 8017c1a:	f7ff ffa5 	bl	8017b68 <sbrk_aligned>
 8017c1e:	3001      	adds	r0, #1
 8017c20:	d02b      	beq.n	8017c7a <_malloc_r+0xd2>
 8017c22:	6823      	ldr	r3, [r4, #0]
 8017c24:	442b      	add	r3, r5
 8017c26:	6023      	str	r3, [r4, #0]
 8017c28:	e00e      	b.n	8017c48 <_malloc_r+0xa0>
 8017c2a:	6822      	ldr	r2, [r4, #0]
 8017c2c:	1b52      	subs	r2, r2, r5
 8017c2e:	d41e      	bmi.n	8017c6e <_malloc_r+0xc6>
 8017c30:	2a0b      	cmp	r2, #11
 8017c32:	d916      	bls.n	8017c62 <_malloc_r+0xba>
 8017c34:	1961      	adds	r1, r4, r5
 8017c36:	42a3      	cmp	r3, r4
 8017c38:	6025      	str	r5, [r4, #0]
 8017c3a:	bf18      	it	ne
 8017c3c:	6059      	strne	r1, [r3, #4]
 8017c3e:	6863      	ldr	r3, [r4, #4]
 8017c40:	bf08      	it	eq
 8017c42:	6031      	streq	r1, [r6, #0]
 8017c44:	5162      	str	r2, [r4, r5]
 8017c46:	604b      	str	r3, [r1, #4]
 8017c48:	4638      	mov	r0, r7
 8017c4a:	f104 060b 	add.w	r6, r4, #11
 8017c4e:	f000 fbd9 	bl	8018404 <__malloc_unlock>
 8017c52:	f026 0607 	bic.w	r6, r6, #7
 8017c56:	1d23      	adds	r3, r4, #4
 8017c58:	1af2      	subs	r2, r6, r3
 8017c5a:	d0b6      	beq.n	8017bca <_malloc_r+0x22>
 8017c5c:	1b9b      	subs	r3, r3, r6
 8017c5e:	50a3      	str	r3, [r4, r2]
 8017c60:	e7b3      	b.n	8017bca <_malloc_r+0x22>
 8017c62:	6862      	ldr	r2, [r4, #4]
 8017c64:	42a3      	cmp	r3, r4
 8017c66:	bf0c      	ite	eq
 8017c68:	6032      	streq	r2, [r6, #0]
 8017c6a:	605a      	strne	r2, [r3, #4]
 8017c6c:	e7ec      	b.n	8017c48 <_malloc_r+0xa0>
 8017c6e:	4623      	mov	r3, r4
 8017c70:	6864      	ldr	r4, [r4, #4]
 8017c72:	e7b2      	b.n	8017bda <_malloc_r+0x32>
 8017c74:	4634      	mov	r4, r6
 8017c76:	6876      	ldr	r6, [r6, #4]
 8017c78:	e7b9      	b.n	8017bee <_malloc_r+0x46>
 8017c7a:	230c      	movs	r3, #12
 8017c7c:	603b      	str	r3, [r7, #0]
 8017c7e:	4638      	mov	r0, r7
 8017c80:	f000 fbc0 	bl	8018404 <__malloc_unlock>
 8017c84:	e7a1      	b.n	8017bca <_malloc_r+0x22>
 8017c86:	6025      	str	r5, [r4, #0]
 8017c88:	e7de      	b.n	8017c48 <_malloc_r+0xa0>
 8017c8a:	bf00      	nop
 8017c8c:	2000953c 	.word	0x2000953c

08017c90 <iprintf>:
 8017c90:	b40f      	push	{r0, r1, r2, r3}
 8017c92:	4b0a      	ldr	r3, [pc, #40]	; (8017cbc <iprintf+0x2c>)
 8017c94:	b513      	push	{r0, r1, r4, lr}
 8017c96:	681c      	ldr	r4, [r3, #0]
 8017c98:	b124      	cbz	r4, 8017ca4 <iprintf+0x14>
 8017c9a:	69a3      	ldr	r3, [r4, #24]
 8017c9c:	b913      	cbnz	r3, 8017ca4 <iprintf+0x14>
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	f7ff fe6c 	bl	801797c <__sinit>
 8017ca4:	ab05      	add	r3, sp, #20
 8017ca6:	9a04      	ldr	r2, [sp, #16]
 8017ca8:	68a1      	ldr	r1, [r4, #8]
 8017caa:	9301      	str	r3, [sp, #4]
 8017cac:	4620      	mov	r0, r4
 8017cae:	f000 fd81 	bl	80187b4 <_vfiprintf_r>
 8017cb2:	b002      	add	sp, #8
 8017cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cb8:	b004      	add	sp, #16
 8017cba:	4770      	bx	lr
 8017cbc:	200001bc 	.word	0x200001bc

08017cc0 <putchar>:
 8017cc0:	4b09      	ldr	r3, [pc, #36]	; (8017ce8 <putchar+0x28>)
 8017cc2:	b513      	push	{r0, r1, r4, lr}
 8017cc4:	681c      	ldr	r4, [r3, #0]
 8017cc6:	4601      	mov	r1, r0
 8017cc8:	b134      	cbz	r4, 8017cd8 <putchar+0x18>
 8017cca:	69a3      	ldr	r3, [r4, #24]
 8017ccc:	b923      	cbnz	r3, 8017cd8 <putchar+0x18>
 8017cce:	9001      	str	r0, [sp, #4]
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	f7ff fe53 	bl	801797c <__sinit>
 8017cd6:	9901      	ldr	r1, [sp, #4]
 8017cd8:	68a2      	ldr	r2, [r4, #8]
 8017cda:	4620      	mov	r0, r4
 8017cdc:	b002      	add	sp, #8
 8017cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ce2:	f001 b82b 	b.w	8018d3c <_putc_r>
 8017ce6:	bf00      	nop
 8017ce8:	200001bc 	.word	0x200001bc

08017cec <_puts_r>:
 8017cec:	b570      	push	{r4, r5, r6, lr}
 8017cee:	460e      	mov	r6, r1
 8017cf0:	4605      	mov	r5, r0
 8017cf2:	b118      	cbz	r0, 8017cfc <_puts_r+0x10>
 8017cf4:	6983      	ldr	r3, [r0, #24]
 8017cf6:	b90b      	cbnz	r3, 8017cfc <_puts_r+0x10>
 8017cf8:	f7ff fe40 	bl	801797c <__sinit>
 8017cfc:	69ab      	ldr	r3, [r5, #24]
 8017cfe:	68ac      	ldr	r4, [r5, #8]
 8017d00:	b913      	cbnz	r3, 8017d08 <_puts_r+0x1c>
 8017d02:	4628      	mov	r0, r5
 8017d04:	f7ff fe3a 	bl	801797c <__sinit>
 8017d08:	4b2c      	ldr	r3, [pc, #176]	; (8017dbc <_puts_r+0xd0>)
 8017d0a:	429c      	cmp	r4, r3
 8017d0c:	d120      	bne.n	8017d50 <_puts_r+0x64>
 8017d0e:	686c      	ldr	r4, [r5, #4]
 8017d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017d12:	07db      	lsls	r3, r3, #31
 8017d14:	d405      	bmi.n	8017d22 <_puts_r+0x36>
 8017d16:	89a3      	ldrh	r3, [r4, #12]
 8017d18:	0598      	lsls	r0, r3, #22
 8017d1a:	d402      	bmi.n	8017d22 <_puts_r+0x36>
 8017d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017d1e:	f7ff fef0 	bl	8017b02 <__retarget_lock_acquire_recursive>
 8017d22:	89a3      	ldrh	r3, [r4, #12]
 8017d24:	0719      	lsls	r1, r3, #28
 8017d26:	d51d      	bpl.n	8017d64 <_puts_r+0x78>
 8017d28:	6923      	ldr	r3, [r4, #16]
 8017d2a:	b1db      	cbz	r3, 8017d64 <_puts_r+0x78>
 8017d2c:	3e01      	subs	r6, #1
 8017d2e:	68a3      	ldr	r3, [r4, #8]
 8017d30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017d34:	3b01      	subs	r3, #1
 8017d36:	60a3      	str	r3, [r4, #8]
 8017d38:	bb39      	cbnz	r1, 8017d8a <_puts_r+0x9e>
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	da38      	bge.n	8017db0 <_puts_r+0xc4>
 8017d3e:	4622      	mov	r2, r4
 8017d40:	210a      	movs	r1, #10
 8017d42:	4628      	mov	r0, r5
 8017d44:	f000 f93c 	bl	8017fc0 <__swbuf_r>
 8017d48:	3001      	adds	r0, #1
 8017d4a:	d011      	beq.n	8017d70 <_puts_r+0x84>
 8017d4c:	250a      	movs	r5, #10
 8017d4e:	e011      	b.n	8017d74 <_puts_r+0x88>
 8017d50:	4b1b      	ldr	r3, [pc, #108]	; (8017dc0 <_puts_r+0xd4>)
 8017d52:	429c      	cmp	r4, r3
 8017d54:	d101      	bne.n	8017d5a <_puts_r+0x6e>
 8017d56:	68ac      	ldr	r4, [r5, #8]
 8017d58:	e7da      	b.n	8017d10 <_puts_r+0x24>
 8017d5a:	4b1a      	ldr	r3, [pc, #104]	; (8017dc4 <_puts_r+0xd8>)
 8017d5c:	429c      	cmp	r4, r3
 8017d5e:	bf08      	it	eq
 8017d60:	68ec      	ldreq	r4, [r5, #12]
 8017d62:	e7d5      	b.n	8017d10 <_puts_r+0x24>
 8017d64:	4621      	mov	r1, r4
 8017d66:	4628      	mov	r0, r5
 8017d68:	f000 f98e 	bl	8018088 <__swsetup_r>
 8017d6c:	2800      	cmp	r0, #0
 8017d6e:	d0dd      	beq.n	8017d2c <_puts_r+0x40>
 8017d70:	f04f 35ff 	mov.w	r5, #4294967295
 8017d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017d76:	07da      	lsls	r2, r3, #31
 8017d78:	d405      	bmi.n	8017d86 <_puts_r+0x9a>
 8017d7a:	89a3      	ldrh	r3, [r4, #12]
 8017d7c:	059b      	lsls	r3, r3, #22
 8017d7e:	d402      	bmi.n	8017d86 <_puts_r+0x9a>
 8017d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017d82:	f7ff febf 	bl	8017b04 <__retarget_lock_release_recursive>
 8017d86:	4628      	mov	r0, r5
 8017d88:	bd70      	pop	{r4, r5, r6, pc}
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	da04      	bge.n	8017d98 <_puts_r+0xac>
 8017d8e:	69a2      	ldr	r2, [r4, #24]
 8017d90:	429a      	cmp	r2, r3
 8017d92:	dc06      	bgt.n	8017da2 <_puts_r+0xb6>
 8017d94:	290a      	cmp	r1, #10
 8017d96:	d004      	beq.n	8017da2 <_puts_r+0xb6>
 8017d98:	6823      	ldr	r3, [r4, #0]
 8017d9a:	1c5a      	adds	r2, r3, #1
 8017d9c:	6022      	str	r2, [r4, #0]
 8017d9e:	7019      	strb	r1, [r3, #0]
 8017da0:	e7c5      	b.n	8017d2e <_puts_r+0x42>
 8017da2:	4622      	mov	r2, r4
 8017da4:	4628      	mov	r0, r5
 8017da6:	f000 f90b 	bl	8017fc0 <__swbuf_r>
 8017daa:	3001      	adds	r0, #1
 8017dac:	d1bf      	bne.n	8017d2e <_puts_r+0x42>
 8017dae:	e7df      	b.n	8017d70 <_puts_r+0x84>
 8017db0:	6823      	ldr	r3, [r4, #0]
 8017db2:	250a      	movs	r5, #10
 8017db4:	1c5a      	adds	r2, r3, #1
 8017db6:	6022      	str	r2, [r4, #0]
 8017db8:	701d      	strb	r5, [r3, #0]
 8017dba:	e7db      	b.n	8017d74 <_puts_r+0x88>
 8017dbc:	0801b694 	.word	0x0801b694
 8017dc0:	0801b6b4 	.word	0x0801b6b4
 8017dc4:	0801b674 	.word	0x0801b674

08017dc8 <puts>:
 8017dc8:	4b02      	ldr	r3, [pc, #8]	; (8017dd4 <puts+0xc>)
 8017dca:	4601      	mov	r1, r0
 8017dcc:	6818      	ldr	r0, [r3, #0]
 8017dce:	f7ff bf8d 	b.w	8017cec <_puts_r>
 8017dd2:	bf00      	nop
 8017dd4:	200001bc 	.word	0x200001bc

08017dd8 <cleanup_glue>:
 8017dd8:	b538      	push	{r3, r4, r5, lr}
 8017dda:	460c      	mov	r4, r1
 8017ddc:	6809      	ldr	r1, [r1, #0]
 8017dde:	4605      	mov	r5, r0
 8017de0:	b109      	cbz	r1, 8017de6 <cleanup_glue+0xe>
 8017de2:	f7ff fff9 	bl	8017dd8 <cleanup_glue>
 8017de6:	4621      	mov	r1, r4
 8017de8:	4628      	mov	r0, r5
 8017dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dee:	f000 bb0f 	b.w	8018410 <_free_r>
	...

08017df4 <_reclaim_reent>:
 8017df4:	4b2c      	ldr	r3, [pc, #176]	; (8017ea8 <_reclaim_reent+0xb4>)
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4283      	cmp	r3, r0
 8017dfa:	b570      	push	{r4, r5, r6, lr}
 8017dfc:	4604      	mov	r4, r0
 8017dfe:	d051      	beq.n	8017ea4 <_reclaim_reent+0xb0>
 8017e00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017e02:	b143      	cbz	r3, 8017e16 <_reclaim_reent+0x22>
 8017e04:	68db      	ldr	r3, [r3, #12]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d14a      	bne.n	8017ea0 <_reclaim_reent+0xac>
 8017e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e0c:	6819      	ldr	r1, [r3, #0]
 8017e0e:	b111      	cbz	r1, 8017e16 <_reclaim_reent+0x22>
 8017e10:	4620      	mov	r0, r4
 8017e12:	f000 fafd 	bl	8018410 <_free_r>
 8017e16:	6961      	ldr	r1, [r4, #20]
 8017e18:	b111      	cbz	r1, 8017e20 <_reclaim_reent+0x2c>
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f000 faf8 	bl	8018410 <_free_r>
 8017e20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017e22:	b111      	cbz	r1, 8017e2a <_reclaim_reent+0x36>
 8017e24:	4620      	mov	r0, r4
 8017e26:	f000 faf3 	bl	8018410 <_free_r>
 8017e2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017e2c:	b111      	cbz	r1, 8017e34 <_reclaim_reent+0x40>
 8017e2e:	4620      	mov	r0, r4
 8017e30:	f000 faee 	bl	8018410 <_free_r>
 8017e34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017e36:	b111      	cbz	r1, 8017e3e <_reclaim_reent+0x4a>
 8017e38:	4620      	mov	r0, r4
 8017e3a:	f000 fae9 	bl	8018410 <_free_r>
 8017e3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017e40:	b111      	cbz	r1, 8017e48 <_reclaim_reent+0x54>
 8017e42:	4620      	mov	r0, r4
 8017e44:	f000 fae4 	bl	8018410 <_free_r>
 8017e48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017e4a:	b111      	cbz	r1, 8017e52 <_reclaim_reent+0x5e>
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f000 fadf 	bl	8018410 <_free_r>
 8017e52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017e54:	b111      	cbz	r1, 8017e5c <_reclaim_reent+0x68>
 8017e56:	4620      	mov	r0, r4
 8017e58:	f000 fada 	bl	8018410 <_free_r>
 8017e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e5e:	b111      	cbz	r1, 8017e66 <_reclaim_reent+0x72>
 8017e60:	4620      	mov	r0, r4
 8017e62:	f000 fad5 	bl	8018410 <_free_r>
 8017e66:	69a3      	ldr	r3, [r4, #24]
 8017e68:	b1e3      	cbz	r3, 8017ea4 <_reclaim_reent+0xb0>
 8017e6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017e6c:	4620      	mov	r0, r4
 8017e6e:	4798      	blx	r3
 8017e70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017e72:	b1b9      	cbz	r1, 8017ea4 <_reclaim_reent+0xb0>
 8017e74:	4620      	mov	r0, r4
 8017e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e7a:	f7ff bfad 	b.w	8017dd8 <cleanup_glue>
 8017e7e:	5949      	ldr	r1, [r1, r5]
 8017e80:	b941      	cbnz	r1, 8017e94 <_reclaim_reent+0xa0>
 8017e82:	3504      	adds	r5, #4
 8017e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e86:	2d80      	cmp	r5, #128	; 0x80
 8017e88:	68d9      	ldr	r1, [r3, #12]
 8017e8a:	d1f8      	bne.n	8017e7e <_reclaim_reent+0x8a>
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	f000 fabf 	bl	8018410 <_free_r>
 8017e92:	e7ba      	b.n	8017e0a <_reclaim_reent+0x16>
 8017e94:	680e      	ldr	r6, [r1, #0]
 8017e96:	4620      	mov	r0, r4
 8017e98:	f000 faba 	bl	8018410 <_free_r>
 8017e9c:	4631      	mov	r1, r6
 8017e9e:	e7ef      	b.n	8017e80 <_reclaim_reent+0x8c>
 8017ea0:	2500      	movs	r5, #0
 8017ea2:	e7ef      	b.n	8017e84 <_reclaim_reent+0x90>
 8017ea4:	bd70      	pop	{r4, r5, r6, pc}
 8017ea6:	bf00      	nop
 8017ea8:	200001bc 	.word	0x200001bc

08017eac <_sbrk_r>:
 8017eac:	b538      	push	{r3, r4, r5, lr}
 8017eae:	4d06      	ldr	r5, [pc, #24]	; (8017ec8 <_sbrk_r+0x1c>)
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	4608      	mov	r0, r1
 8017eb6:	602b      	str	r3, [r5, #0]
 8017eb8:	f7e9 f92a 	bl	8001110 <_sbrk>
 8017ebc:	1c43      	adds	r3, r0, #1
 8017ebe:	d102      	bne.n	8017ec6 <_sbrk_r+0x1a>
 8017ec0:	682b      	ldr	r3, [r5, #0]
 8017ec2:	b103      	cbz	r3, 8017ec6 <_sbrk_r+0x1a>
 8017ec4:	6023      	str	r3, [r4, #0]
 8017ec6:	bd38      	pop	{r3, r4, r5, pc}
 8017ec8:	20009544 	.word	0x20009544

08017ecc <siprintf>:
 8017ecc:	b40e      	push	{r1, r2, r3}
 8017ece:	b500      	push	{lr}
 8017ed0:	b09c      	sub	sp, #112	; 0x70
 8017ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8017ed4:	9002      	str	r0, [sp, #8]
 8017ed6:	9006      	str	r0, [sp, #24]
 8017ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017edc:	4809      	ldr	r0, [pc, #36]	; (8017f04 <siprintf+0x38>)
 8017ede:	9107      	str	r1, [sp, #28]
 8017ee0:	9104      	str	r1, [sp, #16]
 8017ee2:	4909      	ldr	r1, [pc, #36]	; (8017f08 <siprintf+0x3c>)
 8017ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ee8:	9105      	str	r1, [sp, #20]
 8017eea:	6800      	ldr	r0, [r0, #0]
 8017eec:	9301      	str	r3, [sp, #4]
 8017eee:	a902      	add	r1, sp, #8
 8017ef0:	f000 fb36 	bl	8018560 <_svfiprintf_r>
 8017ef4:	9b02      	ldr	r3, [sp, #8]
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	701a      	strb	r2, [r3, #0]
 8017efa:	b01c      	add	sp, #112	; 0x70
 8017efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f00:	b003      	add	sp, #12
 8017f02:	4770      	bx	lr
 8017f04:	200001bc 	.word	0x200001bc
 8017f08:	ffff0208 	.word	0xffff0208

08017f0c <__sread>:
 8017f0c:	b510      	push	{r4, lr}
 8017f0e:	460c      	mov	r4, r1
 8017f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f14:	f000 ff5a 	bl	8018dcc <_read_r>
 8017f18:	2800      	cmp	r0, #0
 8017f1a:	bfab      	itete	ge
 8017f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8017f20:	181b      	addge	r3, r3, r0
 8017f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017f26:	bfac      	ite	ge
 8017f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8017f2a:	81a3      	strhlt	r3, [r4, #12]
 8017f2c:	bd10      	pop	{r4, pc}

08017f2e <__swrite>:
 8017f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f32:	461f      	mov	r7, r3
 8017f34:	898b      	ldrh	r3, [r1, #12]
 8017f36:	05db      	lsls	r3, r3, #23
 8017f38:	4605      	mov	r5, r0
 8017f3a:	460c      	mov	r4, r1
 8017f3c:	4616      	mov	r6, r2
 8017f3e:	d505      	bpl.n	8017f4c <__swrite+0x1e>
 8017f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f44:	2302      	movs	r3, #2
 8017f46:	2200      	movs	r2, #0
 8017f48:	f000 f9de 	bl	8018308 <_lseek_r>
 8017f4c:	89a3      	ldrh	r3, [r4, #12]
 8017f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017f56:	81a3      	strh	r3, [r4, #12]
 8017f58:	4632      	mov	r2, r6
 8017f5a:	463b      	mov	r3, r7
 8017f5c:	4628      	mov	r0, r5
 8017f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f62:	f000 b87f 	b.w	8018064 <_write_r>

08017f66 <__sseek>:
 8017f66:	b510      	push	{r4, lr}
 8017f68:	460c      	mov	r4, r1
 8017f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f6e:	f000 f9cb 	bl	8018308 <_lseek_r>
 8017f72:	1c43      	adds	r3, r0, #1
 8017f74:	89a3      	ldrh	r3, [r4, #12]
 8017f76:	bf15      	itete	ne
 8017f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8017f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017f82:	81a3      	strheq	r3, [r4, #12]
 8017f84:	bf18      	it	ne
 8017f86:	81a3      	strhne	r3, [r4, #12]
 8017f88:	bd10      	pop	{r4, pc}

08017f8a <__sclose>:
 8017f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f8e:	f000 b8e9 	b.w	8018164 <_close_r>

08017f92 <strstr>:
 8017f92:	780a      	ldrb	r2, [r1, #0]
 8017f94:	b570      	push	{r4, r5, r6, lr}
 8017f96:	b96a      	cbnz	r2, 8017fb4 <strstr+0x22>
 8017f98:	bd70      	pop	{r4, r5, r6, pc}
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d109      	bne.n	8017fb2 <strstr+0x20>
 8017f9e:	460c      	mov	r4, r1
 8017fa0:	4605      	mov	r5, r0
 8017fa2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d0f6      	beq.n	8017f98 <strstr+0x6>
 8017faa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017fae:	429e      	cmp	r6, r3
 8017fb0:	d0f7      	beq.n	8017fa2 <strstr+0x10>
 8017fb2:	3001      	adds	r0, #1
 8017fb4:	7803      	ldrb	r3, [r0, #0]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d1ef      	bne.n	8017f9a <strstr+0x8>
 8017fba:	4618      	mov	r0, r3
 8017fbc:	e7ec      	b.n	8017f98 <strstr+0x6>
	...

08017fc0 <__swbuf_r>:
 8017fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fc2:	460e      	mov	r6, r1
 8017fc4:	4614      	mov	r4, r2
 8017fc6:	4605      	mov	r5, r0
 8017fc8:	b118      	cbz	r0, 8017fd2 <__swbuf_r+0x12>
 8017fca:	6983      	ldr	r3, [r0, #24]
 8017fcc:	b90b      	cbnz	r3, 8017fd2 <__swbuf_r+0x12>
 8017fce:	f7ff fcd5 	bl	801797c <__sinit>
 8017fd2:	4b21      	ldr	r3, [pc, #132]	; (8018058 <__swbuf_r+0x98>)
 8017fd4:	429c      	cmp	r4, r3
 8017fd6:	d12b      	bne.n	8018030 <__swbuf_r+0x70>
 8017fd8:	686c      	ldr	r4, [r5, #4]
 8017fda:	69a3      	ldr	r3, [r4, #24]
 8017fdc:	60a3      	str	r3, [r4, #8]
 8017fde:	89a3      	ldrh	r3, [r4, #12]
 8017fe0:	071a      	lsls	r2, r3, #28
 8017fe2:	d52f      	bpl.n	8018044 <__swbuf_r+0x84>
 8017fe4:	6923      	ldr	r3, [r4, #16]
 8017fe6:	b36b      	cbz	r3, 8018044 <__swbuf_r+0x84>
 8017fe8:	6923      	ldr	r3, [r4, #16]
 8017fea:	6820      	ldr	r0, [r4, #0]
 8017fec:	1ac0      	subs	r0, r0, r3
 8017fee:	6963      	ldr	r3, [r4, #20]
 8017ff0:	b2f6      	uxtb	r6, r6
 8017ff2:	4283      	cmp	r3, r0
 8017ff4:	4637      	mov	r7, r6
 8017ff6:	dc04      	bgt.n	8018002 <__swbuf_r+0x42>
 8017ff8:	4621      	mov	r1, r4
 8017ffa:	4628      	mov	r0, r5
 8017ffc:	f000 f948 	bl	8018290 <_fflush_r>
 8018000:	bb30      	cbnz	r0, 8018050 <__swbuf_r+0x90>
 8018002:	68a3      	ldr	r3, [r4, #8]
 8018004:	3b01      	subs	r3, #1
 8018006:	60a3      	str	r3, [r4, #8]
 8018008:	6823      	ldr	r3, [r4, #0]
 801800a:	1c5a      	adds	r2, r3, #1
 801800c:	6022      	str	r2, [r4, #0]
 801800e:	701e      	strb	r6, [r3, #0]
 8018010:	6963      	ldr	r3, [r4, #20]
 8018012:	3001      	adds	r0, #1
 8018014:	4283      	cmp	r3, r0
 8018016:	d004      	beq.n	8018022 <__swbuf_r+0x62>
 8018018:	89a3      	ldrh	r3, [r4, #12]
 801801a:	07db      	lsls	r3, r3, #31
 801801c:	d506      	bpl.n	801802c <__swbuf_r+0x6c>
 801801e:	2e0a      	cmp	r6, #10
 8018020:	d104      	bne.n	801802c <__swbuf_r+0x6c>
 8018022:	4621      	mov	r1, r4
 8018024:	4628      	mov	r0, r5
 8018026:	f000 f933 	bl	8018290 <_fflush_r>
 801802a:	b988      	cbnz	r0, 8018050 <__swbuf_r+0x90>
 801802c:	4638      	mov	r0, r7
 801802e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018030:	4b0a      	ldr	r3, [pc, #40]	; (801805c <__swbuf_r+0x9c>)
 8018032:	429c      	cmp	r4, r3
 8018034:	d101      	bne.n	801803a <__swbuf_r+0x7a>
 8018036:	68ac      	ldr	r4, [r5, #8]
 8018038:	e7cf      	b.n	8017fda <__swbuf_r+0x1a>
 801803a:	4b09      	ldr	r3, [pc, #36]	; (8018060 <__swbuf_r+0xa0>)
 801803c:	429c      	cmp	r4, r3
 801803e:	bf08      	it	eq
 8018040:	68ec      	ldreq	r4, [r5, #12]
 8018042:	e7ca      	b.n	8017fda <__swbuf_r+0x1a>
 8018044:	4621      	mov	r1, r4
 8018046:	4628      	mov	r0, r5
 8018048:	f000 f81e 	bl	8018088 <__swsetup_r>
 801804c:	2800      	cmp	r0, #0
 801804e:	d0cb      	beq.n	8017fe8 <__swbuf_r+0x28>
 8018050:	f04f 37ff 	mov.w	r7, #4294967295
 8018054:	e7ea      	b.n	801802c <__swbuf_r+0x6c>
 8018056:	bf00      	nop
 8018058:	0801b694 	.word	0x0801b694
 801805c:	0801b6b4 	.word	0x0801b6b4
 8018060:	0801b674 	.word	0x0801b674

08018064 <_write_r>:
 8018064:	b538      	push	{r3, r4, r5, lr}
 8018066:	4d07      	ldr	r5, [pc, #28]	; (8018084 <_write_r+0x20>)
 8018068:	4604      	mov	r4, r0
 801806a:	4608      	mov	r0, r1
 801806c:	4611      	mov	r1, r2
 801806e:	2200      	movs	r2, #0
 8018070:	602a      	str	r2, [r5, #0]
 8018072:	461a      	mov	r2, r3
 8018074:	f7e8 fffc 	bl	8001070 <_write>
 8018078:	1c43      	adds	r3, r0, #1
 801807a:	d102      	bne.n	8018082 <_write_r+0x1e>
 801807c:	682b      	ldr	r3, [r5, #0]
 801807e:	b103      	cbz	r3, 8018082 <_write_r+0x1e>
 8018080:	6023      	str	r3, [r4, #0]
 8018082:	bd38      	pop	{r3, r4, r5, pc}
 8018084:	20009544 	.word	0x20009544

08018088 <__swsetup_r>:
 8018088:	4b32      	ldr	r3, [pc, #200]	; (8018154 <__swsetup_r+0xcc>)
 801808a:	b570      	push	{r4, r5, r6, lr}
 801808c:	681d      	ldr	r5, [r3, #0]
 801808e:	4606      	mov	r6, r0
 8018090:	460c      	mov	r4, r1
 8018092:	b125      	cbz	r5, 801809e <__swsetup_r+0x16>
 8018094:	69ab      	ldr	r3, [r5, #24]
 8018096:	b913      	cbnz	r3, 801809e <__swsetup_r+0x16>
 8018098:	4628      	mov	r0, r5
 801809a:	f7ff fc6f 	bl	801797c <__sinit>
 801809e:	4b2e      	ldr	r3, [pc, #184]	; (8018158 <__swsetup_r+0xd0>)
 80180a0:	429c      	cmp	r4, r3
 80180a2:	d10f      	bne.n	80180c4 <__swsetup_r+0x3c>
 80180a4:	686c      	ldr	r4, [r5, #4]
 80180a6:	89a3      	ldrh	r3, [r4, #12]
 80180a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80180ac:	0719      	lsls	r1, r3, #28
 80180ae:	d42c      	bmi.n	801810a <__swsetup_r+0x82>
 80180b0:	06dd      	lsls	r5, r3, #27
 80180b2:	d411      	bmi.n	80180d8 <__swsetup_r+0x50>
 80180b4:	2309      	movs	r3, #9
 80180b6:	6033      	str	r3, [r6, #0]
 80180b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80180bc:	81a3      	strh	r3, [r4, #12]
 80180be:	f04f 30ff 	mov.w	r0, #4294967295
 80180c2:	e03e      	b.n	8018142 <__swsetup_r+0xba>
 80180c4:	4b25      	ldr	r3, [pc, #148]	; (801815c <__swsetup_r+0xd4>)
 80180c6:	429c      	cmp	r4, r3
 80180c8:	d101      	bne.n	80180ce <__swsetup_r+0x46>
 80180ca:	68ac      	ldr	r4, [r5, #8]
 80180cc:	e7eb      	b.n	80180a6 <__swsetup_r+0x1e>
 80180ce:	4b24      	ldr	r3, [pc, #144]	; (8018160 <__swsetup_r+0xd8>)
 80180d0:	429c      	cmp	r4, r3
 80180d2:	bf08      	it	eq
 80180d4:	68ec      	ldreq	r4, [r5, #12]
 80180d6:	e7e6      	b.n	80180a6 <__swsetup_r+0x1e>
 80180d8:	0758      	lsls	r0, r3, #29
 80180da:	d512      	bpl.n	8018102 <__swsetup_r+0x7a>
 80180dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80180de:	b141      	cbz	r1, 80180f2 <__swsetup_r+0x6a>
 80180e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180e4:	4299      	cmp	r1, r3
 80180e6:	d002      	beq.n	80180ee <__swsetup_r+0x66>
 80180e8:	4630      	mov	r0, r6
 80180ea:	f000 f991 	bl	8018410 <_free_r>
 80180ee:	2300      	movs	r3, #0
 80180f0:	6363      	str	r3, [r4, #52]	; 0x34
 80180f2:	89a3      	ldrh	r3, [r4, #12]
 80180f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80180f8:	81a3      	strh	r3, [r4, #12]
 80180fa:	2300      	movs	r3, #0
 80180fc:	6063      	str	r3, [r4, #4]
 80180fe:	6923      	ldr	r3, [r4, #16]
 8018100:	6023      	str	r3, [r4, #0]
 8018102:	89a3      	ldrh	r3, [r4, #12]
 8018104:	f043 0308 	orr.w	r3, r3, #8
 8018108:	81a3      	strh	r3, [r4, #12]
 801810a:	6923      	ldr	r3, [r4, #16]
 801810c:	b94b      	cbnz	r3, 8018122 <__swsetup_r+0x9a>
 801810e:	89a3      	ldrh	r3, [r4, #12]
 8018110:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018118:	d003      	beq.n	8018122 <__swsetup_r+0x9a>
 801811a:	4621      	mov	r1, r4
 801811c:	4630      	mov	r0, r6
 801811e:	f000 f92b 	bl	8018378 <__smakebuf_r>
 8018122:	89a0      	ldrh	r0, [r4, #12]
 8018124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018128:	f010 0301 	ands.w	r3, r0, #1
 801812c:	d00a      	beq.n	8018144 <__swsetup_r+0xbc>
 801812e:	2300      	movs	r3, #0
 8018130:	60a3      	str	r3, [r4, #8]
 8018132:	6963      	ldr	r3, [r4, #20]
 8018134:	425b      	negs	r3, r3
 8018136:	61a3      	str	r3, [r4, #24]
 8018138:	6923      	ldr	r3, [r4, #16]
 801813a:	b943      	cbnz	r3, 801814e <__swsetup_r+0xc6>
 801813c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018140:	d1ba      	bne.n	80180b8 <__swsetup_r+0x30>
 8018142:	bd70      	pop	{r4, r5, r6, pc}
 8018144:	0781      	lsls	r1, r0, #30
 8018146:	bf58      	it	pl
 8018148:	6963      	ldrpl	r3, [r4, #20]
 801814a:	60a3      	str	r3, [r4, #8]
 801814c:	e7f4      	b.n	8018138 <__swsetup_r+0xb0>
 801814e:	2000      	movs	r0, #0
 8018150:	e7f7      	b.n	8018142 <__swsetup_r+0xba>
 8018152:	bf00      	nop
 8018154:	200001bc 	.word	0x200001bc
 8018158:	0801b694 	.word	0x0801b694
 801815c:	0801b6b4 	.word	0x0801b6b4
 8018160:	0801b674 	.word	0x0801b674

08018164 <_close_r>:
 8018164:	b538      	push	{r3, r4, r5, lr}
 8018166:	4d06      	ldr	r5, [pc, #24]	; (8018180 <_close_r+0x1c>)
 8018168:	2300      	movs	r3, #0
 801816a:	4604      	mov	r4, r0
 801816c:	4608      	mov	r0, r1
 801816e:	602b      	str	r3, [r5, #0]
 8018170:	f7e8 ff9a 	bl	80010a8 <_close>
 8018174:	1c43      	adds	r3, r0, #1
 8018176:	d102      	bne.n	801817e <_close_r+0x1a>
 8018178:	682b      	ldr	r3, [r5, #0]
 801817a:	b103      	cbz	r3, 801817e <_close_r+0x1a>
 801817c:	6023      	str	r3, [r4, #0]
 801817e:	bd38      	pop	{r3, r4, r5, pc}
 8018180:	20009544 	.word	0x20009544

08018184 <__sflush_r>:
 8018184:	898a      	ldrh	r2, [r1, #12]
 8018186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801818a:	4605      	mov	r5, r0
 801818c:	0710      	lsls	r0, r2, #28
 801818e:	460c      	mov	r4, r1
 8018190:	d458      	bmi.n	8018244 <__sflush_r+0xc0>
 8018192:	684b      	ldr	r3, [r1, #4]
 8018194:	2b00      	cmp	r3, #0
 8018196:	dc05      	bgt.n	80181a4 <__sflush_r+0x20>
 8018198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801819a:	2b00      	cmp	r3, #0
 801819c:	dc02      	bgt.n	80181a4 <__sflush_r+0x20>
 801819e:	2000      	movs	r0, #0
 80181a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80181a6:	2e00      	cmp	r6, #0
 80181a8:	d0f9      	beq.n	801819e <__sflush_r+0x1a>
 80181aa:	2300      	movs	r3, #0
 80181ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80181b0:	682f      	ldr	r7, [r5, #0]
 80181b2:	602b      	str	r3, [r5, #0]
 80181b4:	d032      	beq.n	801821c <__sflush_r+0x98>
 80181b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80181b8:	89a3      	ldrh	r3, [r4, #12]
 80181ba:	075a      	lsls	r2, r3, #29
 80181bc:	d505      	bpl.n	80181ca <__sflush_r+0x46>
 80181be:	6863      	ldr	r3, [r4, #4]
 80181c0:	1ac0      	subs	r0, r0, r3
 80181c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80181c4:	b10b      	cbz	r3, 80181ca <__sflush_r+0x46>
 80181c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80181c8:	1ac0      	subs	r0, r0, r3
 80181ca:	2300      	movs	r3, #0
 80181cc:	4602      	mov	r2, r0
 80181ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80181d0:	6a21      	ldr	r1, [r4, #32]
 80181d2:	4628      	mov	r0, r5
 80181d4:	47b0      	blx	r6
 80181d6:	1c43      	adds	r3, r0, #1
 80181d8:	89a3      	ldrh	r3, [r4, #12]
 80181da:	d106      	bne.n	80181ea <__sflush_r+0x66>
 80181dc:	6829      	ldr	r1, [r5, #0]
 80181de:	291d      	cmp	r1, #29
 80181e0:	d82c      	bhi.n	801823c <__sflush_r+0xb8>
 80181e2:	4a2a      	ldr	r2, [pc, #168]	; (801828c <__sflush_r+0x108>)
 80181e4:	40ca      	lsrs	r2, r1
 80181e6:	07d6      	lsls	r6, r2, #31
 80181e8:	d528      	bpl.n	801823c <__sflush_r+0xb8>
 80181ea:	2200      	movs	r2, #0
 80181ec:	6062      	str	r2, [r4, #4]
 80181ee:	04d9      	lsls	r1, r3, #19
 80181f0:	6922      	ldr	r2, [r4, #16]
 80181f2:	6022      	str	r2, [r4, #0]
 80181f4:	d504      	bpl.n	8018200 <__sflush_r+0x7c>
 80181f6:	1c42      	adds	r2, r0, #1
 80181f8:	d101      	bne.n	80181fe <__sflush_r+0x7a>
 80181fa:	682b      	ldr	r3, [r5, #0]
 80181fc:	b903      	cbnz	r3, 8018200 <__sflush_r+0x7c>
 80181fe:	6560      	str	r0, [r4, #84]	; 0x54
 8018200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018202:	602f      	str	r7, [r5, #0]
 8018204:	2900      	cmp	r1, #0
 8018206:	d0ca      	beq.n	801819e <__sflush_r+0x1a>
 8018208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801820c:	4299      	cmp	r1, r3
 801820e:	d002      	beq.n	8018216 <__sflush_r+0x92>
 8018210:	4628      	mov	r0, r5
 8018212:	f000 f8fd 	bl	8018410 <_free_r>
 8018216:	2000      	movs	r0, #0
 8018218:	6360      	str	r0, [r4, #52]	; 0x34
 801821a:	e7c1      	b.n	80181a0 <__sflush_r+0x1c>
 801821c:	6a21      	ldr	r1, [r4, #32]
 801821e:	2301      	movs	r3, #1
 8018220:	4628      	mov	r0, r5
 8018222:	47b0      	blx	r6
 8018224:	1c41      	adds	r1, r0, #1
 8018226:	d1c7      	bne.n	80181b8 <__sflush_r+0x34>
 8018228:	682b      	ldr	r3, [r5, #0]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d0c4      	beq.n	80181b8 <__sflush_r+0x34>
 801822e:	2b1d      	cmp	r3, #29
 8018230:	d001      	beq.n	8018236 <__sflush_r+0xb2>
 8018232:	2b16      	cmp	r3, #22
 8018234:	d101      	bne.n	801823a <__sflush_r+0xb6>
 8018236:	602f      	str	r7, [r5, #0]
 8018238:	e7b1      	b.n	801819e <__sflush_r+0x1a>
 801823a:	89a3      	ldrh	r3, [r4, #12]
 801823c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018240:	81a3      	strh	r3, [r4, #12]
 8018242:	e7ad      	b.n	80181a0 <__sflush_r+0x1c>
 8018244:	690f      	ldr	r7, [r1, #16]
 8018246:	2f00      	cmp	r7, #0
 8018248:	d0a9      	beq.n	801819e <__sflush_r+0x1a>
 801824a:	0793      	lsls	r3, r2, #30
 801824c:	680e      	ldr	r6, [r1, #0]
 801824e:	bf08      	it	eq
 8018250:	694b      	ldreq	r3, [r1, #20]
 8018252:	600f      	str	r7, [r1, #0]
 8018254:	bf18      	it	ne
 8018256:	2300      	movne	r3, #0
 8018258:	eba6 0807 	sub.w	r8, r6, r7
 801825c:	608b      	str	r3, [r1, #8]
 801825e:	f1b8 0f00 	cmp.w	r8, #0
 8018262:	dd9c      	ble.n	801819e <__sflush_r+0x1a>
 8018264:	6a21      	ldr	r1, [r4, #32]
 8018266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018268:	4643      	mov	r3, r8
 801826a:	463a      	mov	r2, r7
 801826c:	4628      	mov	r0, r5
 801826e:	47b0      	blx	r6
 8018270:	2800      	cmp	r0, #0
 8018272:	dc06      	bgt.n	8018282 <__sflush_r+0xfe>
 8018274:	89a3      	ldrh	r3, [r4, #12]
 8018276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801827a:	81a3      	strh	r3, [r4, #12]
 801827c:	f04f 30ff 	mov.w	r0, #4294967295
 8018280:	e78e      	b.n	80181a0 <__sflush_r+0x1c>
 8018282:	4407      	add	r7, r0
 8018284:	eba8 0800 	sub.w	r8, r8, r0
 8018288:	e7e9      	b.n	801825e <__sflush_r+0xda>
 801828a:	bf00      	nop
 801828c:	20400001 	.word	0x20400001

08018290 <_fflush_r>:
 8018290:	b538      	push	{r3, r4, r5, lr}
 8018292:	690b      	ldr	r3, [r1, #16]
 8018294:	4605      	mov	r5, r0
 8018296:	460c      	mov	r4, r1
 8018298:	b913      	cbnz	r3, 80182a0 <_fflush_r+0x10>
 801829a:	2500      	movs	r5, #0
 801829c:	4628      	mov	r0, r5
 801829e:	bd38      	pop	{r3, r4, r5, pc}
 80182a0:	b118      	cbz	r0, 80182aa <_fflush_r+0x1a>
 80182a2:	6983      	ldr	r3, [r0, #24]
 80182a4:	b90b      	cbnz	r3, 80182aa <_fflush_r+0x1a>
 80182a6:	f7ff fb69 	bl	801797c <__sinit>
 80182aa:	4b14      	ldr	r3, [pc, #80]	; (80182fc <_fflush_r+0x6c>)
 80182ac:	429c      	cmp	r4, r3
 80182ae:	d11b      	bne.n	80182e8 <_fflush_r+0x58>
 80182b0:	686c      	ldr	r4, [r5, #4]
 80182b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d0ef      	beq.n	801829a <_fflush_r+0xa>
 80182ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80182bc:	07d0      	lsls	r0, r2, #31
 80182be:	d404      	bmi.n	80182ca <_fflush_r+0x3a>
 80182c0:	0599      	lsls	r1, r3, #22
 80182c2:	d402      	bmi.n	80182ca <_fflush_r+0x3a>
 80182c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182c6:	f7ff fc1c 	bl	8017b02 <__retarget_lock_acquire_recursive>
 80182ca:	4628      	mov	r0, r5
 80182cc:	4621      	mov	r1, r4
 80182ce:	f7ff ff59 	bl	8018184 <__sflush_r>
 80182d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80182d4:	07da      	lsls	r2, r3, #31
 80182d6:	4605      	mov	r5, r0
 80182d8:	d4e0      	bmi.n	801829c <_fflush_r+0xc>
 80182da:	89a3      	ldrh	r3, [r4, #12]
 80182dc:	059b      	lsls	r3, r3, #22
 80182de:	d4dd      	bmi.n	801829c <_fflush_r+0xc>
 80182e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182e2:	f7ff fc0f 	bl	8017b04 <__retarget_lock_release_recursive>
 80182e6:	e7d9      	b.n	801829c <_fflush_r+0xc>
 80182e8:	4b05      	ldr	r3, [pc, #20]	; (8018300 <_fflush_r+0x70>)
 80182ea:	429c      	cmp	r4, r3
 80182ec:	d101      	bne.n	80182f2 <_fflush_r+0x62>
 80182ee:	68ac      	ldr	r4, [r5, #8]
 80182f0:	e7df      	b.n	80182b2 <_fflush_r+0x22>
 80182f2:	4b04      	ldr	r3, [pc, #16]	; (8018304 <_fflush_r+0x74>)
 80182f4:	429c      	cmp	r4, r3
 80182f6:	bf08      	it	eq
 80182f8:	68ec      	ldreq	r4, [r5, #12]
 80182fa:	e7da      	b.n	80182b2 <_fflush_r+0x22>
 80182fc:	0801b694 	.word	0x0801b694
 8018300:	0801b6b4 	.word	0x0801b6b4
 8018304:	0801b674 	.word	0x0801b674

08018308 <_lseek_r>:
 8018308:	b538      	push	{r3, r4, r5, lr}
 801830a:	4d07      	ldr	r5, [pc, #28]	; (8018328 <_lseek_r+0x20>)
 801830c:	4604      	mov	r4, r0
 801830e:	4608      	mov	r0, r1
 8018310:	4611      	mov	r1, r2
 8018312:	2200      	movs	r2, #0
 8018314:	602a      	str	r2, [r5, #0]
 8018316:	461a      	mov	r2, r3
 8018318:	f7e8 feed 	bl	80010f6 <_lseek>
 801831c:	1c43      	adds	r3, r0, #1
 801831e:	d102      	bne.n	8018326 <_lseek_r+0x1e>
 8018320:	682b      	ldr	r3, [r5, #0]
 8018322:	b103      	cbz	r3, 8018326 <_lseek_r+0x1e>
 8018324:	6023      	str	r3, [r4, #0]
 8018326:	bd38      	pop	{r3, r4, r5, pc}
 8018328:	20009544 	.word	0x20009544

0801832c <__swhatbuf_r>:
 801832c:	b570      	push	{r4, r5, r6, lr}
 801832e:	460e      	mov	r6, r1
 8018330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018334:	2900      	cmp	r1, #0
 8018336:	b096      	sub	sp, #88	; 0x58
 8018338:	4614      	mov	r4, r2
 801833a:	461d      	mov	r5, r3
 801833c:	da08      	bge.n	8018350 <__swhatbuf_r+0x24>
 801833e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018342:	2200      	movs	r2, #0
 8018344:	602a      	str	r2, [r5, #0]
 8018346:	061a      	lsls	r2, r3, #24
 8018348:	d410      	bmi.n	801836c <__swhatbuf_r+0x40>
 801834a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801834e:	e00e      	b.n	801836e <__swhatbuf_r+0x42>
 8018350:	466a      	mov	r2, sp
 8018352:	f000 fd4d 	bl	8018df0 <_fstat_r>
 8018356:	2800      	cmp	r0, #0
 8018358:	dbf1      	blt.n	801833e <__swhatbuf_r+0x12>
 801835a:	9a01      	ldr	r2, [sp, #4]
 801835c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018364:	425a      	negs	r2, r3
 8018366:	415a      	adcs	r2, r3
 8018368:	602a      	str	r2, [r5, #0]
 801836a:	e7ee      	b.n	801834a <__swhatbuf_r+0x1e>
 801836c:	2340      	movs	r3, #64	; 0x40
 801836e:	2000      	movs	r0, #0
 8018370:	6023      	str	r3, [r4, #0]
 8018372:	b016      	add	sp, #88	; 0x58
 8018374:	bd70      	pop	{r4, r5, r6, pc}
	...

08018378 <__smakebuf_r>:
 8018378:	898b      	ldrh	r3, [r1, #12]
 801837a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801837c:	079d      	lsls	r5, r3, #30
 801837e:	4606      	mov	r6, r0
 8018380:	460c      	mov	r4, r1
 8018382:	d507      	bpl.n	8018394 <__smakebuf_r+0x1c>
 8018384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018388:	6023      	str	r3, [r4, #0]
 801838a:	6123      	str	r3, [r4, #16]
 801838c:	2301      	movs	r3, #1
 801838e:	6163      	str	r3, [r4, #20]
 8018390:	b002      	add	sp, #8
 8018392:	bd70      	pop	{r4, r5, r6, pc}
 8018394:	ab01      	add	r3, sp, #4
 8018396:	466a      	mov	r2, sp
 8018398:	f7ff ffc8 	bl	801832c <__swhatbuf_r>
 801839c:	9900      	ldr	r1, [sp, #0]
 801839e:	4605      	mov	r5, r0
 80183a0:	4630      	mov	r0, r6
 80183a2:	f7ff fc01 	bl	8017ba8 <_malloc_r>
 80183a6:	b948      	cbnz	r0, 80183bc <__smakebuf_r+0x44>
 80183a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183ac:	059a      	lsls	r2, r3, #22
 80183ae:	d4ef      	bmi.n	8018390 <__smakebuf_r+0x18>
 80183b0:	f023 0303 	bic.w	r3, r3, #3
 80183b4:	f043 0302 	orr.w	r3, r3, #2
 80183b8:	81a3      	strh	r3, [r4, #12]
 80183ba:	e7e3      	b.n	8018384 <__smakebuf_r+0xc>
 80183bc:	4b0d      	ldr	r3, [pc, #52]	; (80183f4 <__smakebuf_r+0x7c>)
 80183be:	62b3      	str	r3, [r6, #40]	; 0x28
 80183c0:	89a3      	ldrh	r3, [r4, #12]
 80183c2:	6020      	str	r0, [r4, #0]
 80183c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183c8:	81a3      	strh	r3, [r4, #12]
 80183ca:	9b00      	ldr	r3, [sp, #0]
 80183cc:	6163      	str	r3, [r4, #20]
 80183ce:	9b01      	ldr	r3, [sp, #4]
 80183d0:	6120      	str	r0, [r4, #16]
 80183d2:	b15b      	cbz	r3, 80183ec <__smakebuf_r+0x74>
 80183d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183d8:	4630      	mov	r0, r6
 80183da:	f000 fd1b 	bl	8018e14 <_isatty_r>
 80183de:	b128      	cbz	r0, 80183ec <__smakebuf_r+0x74>
 80183e0:	89a3      	ldrh	r3, [r4, #12]
 80183e2:	f023 0303 	bic.w	r3, r3, #3
 80183e6:	f043 0301 	orr.w	r3, r3, #1
 80183ea:	81a3      	strh	r3, [r4, #12]
 80183ec:	89a0      	ldrh	r0, [r4, #12]
 80183ee:	4305      	orrs	r5, r0
 80183f0:	81a5      	strh	r5, [r4, #12]
 80183f2:	e7cd      	b.n	8018390 <__smakebuf_r+0x18>
 80183f4:	08017915 	.word	0x08017915

080183f8 <__malloc_lock>:
 80183f8:	4801      	ldr	r0, [pc, #4]	; (8018400 <__malloc_lock+0x8>)
 80183fa:	f7ff bb82 	b.w	8017b02 <__retarget_lock_acquire_recursive>
 80183fe:	bf00      	nop
 8018400:	20009537 	.word	0x20009537

08018404 <__malloc_unlock>:
 8018404:	4801      	ldr	r0, [pc, #4]	; (801840c <__malloc_unlock+0x8>)
 8018406:	f7ff bb7d 	b.w	8017b04 <__retarget_lock_release_recursive>
 801840a:	bf00      	nop
 801840c:	20009537 	.word	0x20009537

08018410 <_free_r>:
 8018410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018412:	2900      	cmp	r1, #0
 8018414:	d044      	beq.n	80184a0 <_free_r+0x90>
 8018416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801841a:	9001      	str	r0, [sp, #4]
 801841c:	2b00      	cmp	r3, #0
 801841e:	f1a1 0404 	sub.w	r4, r1, #4
 8018422:	bfb8      	it	lt
 8018424:	18e4      	addlt	r4, r4, r3
 8018426:	f7ff ffe7 	bl	80183f8 <__malloc_lock>
 801842a:	4a1e      	ldr	r2, [pc, #120]	; (80184a4 <_free_r+0x94>)
 801842c:	9801      	ldr	r0, [sp, #4]
 801842e:	6813      	ldr	r3, [r2, #0]
 8018430:	b933      	cbnz	r3, 8018440 <_free_r+0x30>
 8018432:	6063      	str	r3, [r4, #4]
 8018434:	6014      	str	r4, [r2, #0]
 8018436:	b003      	add	sp, #12
 8018438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801843c:	f7ff bfe2 	b.w	8018404 <__malloc_unlock>
 8018440:	42a3      	cmp	r3, r4
 8018442:	d908      	bls.n	8018456 <_free_r+0x46>
 8018444:	6825      	ldr	r5, [r4, #0]
 8018446:	1961      	adds	r1, r4, r5
 8018448:	428b      	cmp	r3, r1
 801844a:	bf01      	itttt	eq
 801844c:	6819      	ldreq	r1, [r3, #0]
 801844e:	685b      	ldreq	r3, [r3, #4]
 8018450:	1949      	addeq	r1, r1, r5
 8018452:	6021      	streq	r1, [r4, #0]
 8018454:	e7ed      	b.n	8018432 <_free_r+0x22>
 8018456:	461a      	mov	r2, r3
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	b10b      	cbz	r3, 8018460 <_free_r+0x50>
 801845c:	42a3      	cmp	r3, r4
 801845e:	d9fa      	bls.n	8018456 <_free_r+0x46>
 8018460:	6811      	ldr	r1, [r2, #0]
 8018462:	1855      	adds	r5, r2, r1
 8018464:	42a5      	cmp	r5, r4
 8018466:	d10b      	bne.n	8018480 <_free_r+0x70>
 8018468:	6824      	ldr	r4, [r4, #0]
 801846a:	4421      	add	r1, r4
 801846c:	1854      	adds	r4, r2, r1
 801846e:	42a3      	cmp	r3, r4
 8018470:	6011      	str	r1, [r2, #0]
 8018472:	d1e0      	bne.n	8018436 <_free_r+0x26>
 8018474:	681c      	ldr	r4, [r3, #0]
 8018476:	685b      	ldr	r3, [r3, #4]
 8018478:	6053      	str	r3, [r2, #4]
 801847a:	4421      	add	r1, r4
 801847c:	6011      	str	r1, [r2, #0]
 801847e:	e7da      	b.n	8018436 <_free_r+0x26>
 8018480:	d902      	bls.n	8018488 <_free_r+0x78>
 8018482:	230c      	movs	r3, #12
 8018484:	6003      	str	r3, [r0, #0]
 8018486:	e7d6      	b.n	8018436 <_free_r+0x26>
 8018488:	6825      	ldr	r5, [r4, #0]
 801848a:	1961      	adds	r1, r4, r5
 801848c:	428b      	cmp	r3, r1
 801848e:	bf04      	itt	eq
 8018490:	6819      	ldreq	r1, [r3, #0]
 8018492:	685b      	ldreq	r3, [r3, #4]
 8018494:	6063      	str	r3, [r4, #4]
 8018496:	bf04      	itt	eq
 8018498:	1949      	addeq	r1, r1, r5
 801849a:	6021      	streq	r1, [r4, #0]
 801849c:	6054      	str	r4, [r2, #4]
 801849e:	e7ca      	b.n	8018436 <_free_r+0x26>
 80184a0:	b003      	add	sp, #12
 80184a2:	bd30      	pop	{r4, r5, pc}
 80184a4:	2000953c 	.word	0x2000953c

080184a8 <__ssputs_r>:
 80184a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184ac:	688e      	ldr	r6, [r1, #8]
 80184ae:	429e      	cmp	r6, r3
 80184b0:	4682      	mov	sl, r0
 80184b2:	460c      	mov	r4, r1
 80184b4:	4690      	mov	r8, r2
 80184b6:	461f      	mov	r7, r3
 80184b8:	d838      	bhi.n	801852c <__ssputs_r+0x84>
 80184ba:	898a      	ldrh	r2, [r1, #12]
 80184bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80184c0:	d032      	beq.n	8018528 <__ssputs_r+0x80>
 80184c2:	6825      	ldr	r5, [r4, #0]
 80184c4:	6909      	ldr	r1, [r1, #16]
 80184c6:	eba5 0901 	sub.w	r9, r5, r1
 80184ca:	6965      	ldr	r5, [r4, #20]
 80184cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80184d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80184d4:	3301      	adds	r3, #1
 80184d6:	444b      	add	r3, r9
 80184d8:	106d      	asrs	r5, r5, #1
 80184da:	429d      	cmp	r5, r3
 80184dc:	bf38      	it	cc
 80184de:	461d      	movcc	r5, r3
 80184e0:	0553      	lsls	r3, r2, #21
 80184e2:	d531      	bpl.n	8018548 <__ssputs_r+0xa0>
 80184e4:	4629      	mov	r1, r5
 80184e6:	f7ff fb5f 	bl	8017ba8 <_malloc_r>
 80184ea:	4606      	mov	r6, r0
 80184ec:	b950      	cbnz	r0, 8018504 <__ssputs_r+0x5c>
 80184ee:	230c      	movs	r3, #12
 80184f0:	f8ca 3000 	str.w	r3, [sl]
 80184f4:	89a3      	ldrh	r3, [r4, #12]
 80184f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184fa:	81a3      	strh	r3, [r4, #12]
 80184fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018504:	6921      	ldr	r1, [r4, #16]
 8018506:	464a      	mov	r2, r9
 8018508:	f7ff fafd 	bl	8017b06 <memcpy>
 801850c:	89a3      	ldrh	r3, [r4, #12]
 801850e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018516:	81a3      	strh	r3, [r4, #12]
 8018518:	6126      	str	r6, [r4, #16]
 801851a:	6165      	str	r5, [r4, #20]
 801851c:	444e      	add	r6, r9
 801851e:	eba5 0509 	sub.w	r5, r5, r9
 8018522:	6026      	str	r6, [r4, #0]
 8018524:	60a5      	str	r5, [r4, #8]
 8018526:	463e      	mov	r6, r7
 8018528:	42be      	cmp	r6, r7
 801852a:	d900      	bls.n	801852e <__ssputs_r+0x86>
 801852c:	463e      	mov	r6, r7
 801852e:	6820      	ldr	r0, [r4, #0]
 8018530:	4632      	mov	r2, r6
 8018532:	4641      	mov	r1, r8
 8018534:	f7ff faf5 	bl	8017b22 <memmove>
 8018538:	68a3      	ldr	r3, [r4, #8]
 801853a:	1b9b      	subs	r3, r3, r6
 801853c:	60a3      	str	r3, [r4, #8]
 801853e:	6823      	ldr	r3, [r4, #0]
 8018540:	4433      	add	r3, r6
 8018542:	6023      	str	r3, [r4, #0]
 8018544:	2000      	movs	r0, #0
 8018546:	e7db      	b.n	8018500 <__ssputs_r+0x58>
 8018548:	462a      	mov	r2, r5
 801854a:	f000 fc73 	bl	8018e34 <_realloc_r>
 801854e:	4606      	mov	r6, r0
 8018550:	2800      	cmp	r0, #0
 8018552:	d1e1      	bne.n	8018518 <__ssputs_r+0x70>
 8018554:	6921      	ldr	r1, [r4, #16]
 8018556:	4650      	mov	r0, sl
 8018558:	f7ff ff5a 	bl	8018410 <_free_r>
 801855c:	e7c7      	b.n	80184ee <__ssputs_r+0x46>
	...

08018560 <_svfiprintf_r>:
 8018560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018564:	4698      	mov	r8, r3
 8018566:	898b      	ldrh	r3, [r1, #12]
 8018568:	061b      	lsls	r3, r3, #24
 801856a:	b09d      	sub	sp, #116	; 0x74
 801856c:	4607      	mov	r7, r0
 801856e:	460d      	mov	r5, r1
 8018570:	4614      	mov	r4, r2
 8018572:	d50e      	bpl.n	8018592 <_svfiprintf_r+0x32>
 8018574:	690b      	ldr	r3, [r1, #16]
 8018576:	b963      	cbnz	r3, 8018592 <_svfiprintf_r+0x32>
 8018578:	2140      	movs	r1, #64	; 0x40
 801857a:	f7ff fb15 	bl	8017ba8 <_malloc_r>
 801857e:	6028      	str	r0, [r5, #0]
 8018580:	6128      	str	r0, [r5, #16]
 8018582:	b920      	cbnz	r0, 801858e <_svfiprintf_r+0x2e>
 8018584:	230c      	movs	r3, #12
 8018586:	603b      	str	r3, [r7, #0]
 8018588:	f04f 30ff 	mov.w	r0, #4294967295
 801858c:	e0d1      	b.n	8018732 <_svfiprintf_r+0x1d2>
 801858e:	2340      	movs	r3, #64	; 0x40
 8018590:	616b      	str	r3, [r5, #20]
 8018592:	2300      	movs	r3, #0
 8018594:	9309      	str	r3, [sp, #36]	; 0x24
 8018596:	2320      	movs	r3, #32
 8018598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801859c:	f8cd 800c 	str.w	r8, [sp, #12]
 80185a0:	2330      	movs	r3, #48	; 0x30
 80185a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801874c <_svfiprintf_r+0x1ec>
 80185a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80185aa:	f04f 0901 	mov.w	r9, #1
 80185ae:	4623      	mov	r3, r4
 80185b0:	469a      	mov	sl, r3
 80185b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185b6:	b10a      	cbz	r2, 80185bc <_svfiprintf_r+0x5c>
 80185b8:	2a25      	cmp	r2, #37	; 0x25
 80185ba:	d1f9      	bne.n	80185b0 <_svfiprintf_r+0x50>
 80185bc:	ebba 0b04 	subs.w	fp, sl, r4
 80185c0:	d00b      	beq.n	80185da <_svfiprintf_r+0x7a>
 80185c2:	465b      	mov	r3, fp
 80185c4:	4622      	mov	r2, r4
 80185c6:	4629      	mov	r1, r5
 80185c8:	4638      	mov	r0, r7
 80185ca:	f7ff ff6d 	bl	80184a8 <__ssputs_r>
 80185ce:	3001      	adds	r0, #1
 80185d0:	f000 80aa 	beq.w	8018728 <_svfiprintf_r+0x1c8>
 80185d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80185d6:	445a      	add	r2, fp
 80185d8:	9209      	str	r2, [sp, #36]	; 0x24
 80185da:	f89a 3000 	ldrb.w	r3, [sl]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f000 80a2 	beq.w	8018728 <_svfiprintf_r+0x1c8>
 80185e4:	2300      	movs	r3, #0
 80185e6:	f04f 32ff 	mov.w	r2, #4294967295
 80185ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80185ee:	f10a 0a01 	add.w	sl, sl, #1
 80185f2:	9304      	str	r3, [sp, #16]
 80185f4:	9307      	str	r3, [sp, #28]
 80185f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80185fa:	931a      	str	r3, [sp, #104]	; 0x68
 80185fc:	4654      	mov	r4, sl
 80185fe:	2205      	movs	r2, #5
 8018600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018604:	4851      	ldr	r0, [pc, #324]	; (801874c <_svfiprintf_r+0x1ec>)
 8018606:	f7e7 fdfb 	bl	8000200 <memchr>
 801860a:	9a04      	ldr	r2, [sp, #16]
 801860c:	b9d8      	cbnz	r0, 8018646 <_svfiprintf_r+0xe6>
 801860e:	06d0      	lsls	r0, r2, #27
 8018610:	bf44      	itt	mi
 8018612:	2320      	movmi	r3, #32
 8018614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018618:	0711      	lsls	r1, r2, #28
 801861a:	bf44      	itt	mi
 801861c:	232b      	movmi	r3, #43	; 0x2b
 801861e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018622:	f89a 3000 	ldrb.w	r3, [sl]
 8018626:	2b2a      	cmp	r3, #42	; 0x2a
 8018628:	d015      	beq.n	8018656 <_svfiprintf_r+0xf6>
 801862a:	9a07      	ldr	r2, [sp, #28]
 801862c:	4654      	mov	r4, sl
 801862e:	2000      	movs	r0, #0
 8018630:	f04f 0c0a 	mov.w	ip, #10
 8018634:	4621      	mov	r1, r4
 8018636:	f811 3b01 	ldrb.w	r3, [r1], #1
 801863a:	3b30      	subs	r3, #48	; 0x30
 801863c:	2b09      	cmp	r3, #9
 801863e:	d94e      	bls.n	80186de <_svfiprintf_r+0x17e>
 8018640:	b1b0      	cbz	r0, 8018670 <_svfiprintf_r+0x110>
 8018642:	9207      	str	r2, [sp, #28]
 8018644:	e014      	b.n	8018670 <_svfiprintf_r+0x110>
 8018646:	eba0 0308 	sub.w	r3, r0, r8
 801864a:	fa09 f303 	lsl.w	r3, r9, r3
 801864e:	4313      	orrs	r3, r2
 8018650:	9304      	str	r3, [sp, #16]
 8018652:	46a2      	mov	sl, r4
 8018654:	e7d2      	b.n	80185fc <_svfiprintf_r+0x9c>
 8018656:	9b03      	ldr	r3, [sp, #12]
 8018658:	1d19      	adds	r1, r3, #4
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	9103      	str	r1, [sp, #12]
 801865e:	2b00      	cmp	r3, #0
 8018660:	bfbb      	ittet	lt
 8018662:	425b      	neglt	r3, r3
 8018664:	f042 0202 	orrlt.w	r2, r2, #2
 8018668:	9307      	strge	r3, [sp, #28]
 801866a:	9307      	strlt	r3, [sp, #28]
 801866c:	bfb8      	it	lt
 801866e:	9204      	strlt	r2, [sp, #16]
 8018670:	7823      	ldrb	r3, [r4, #0]
 8018672:	2b2e      	cmp	r3, #46	; 0x2e
 8018674:	d10c      	bne.n	8018690 <_svfiprintf_r+0x130>
 8018676:	7863      	ldrb	r3, [r4, #1]
 8018678:	2b2a      	cmp	r3, #42	; 0x2a
 801867a:	d135      	bne.n	80186e8 <_svfiprintf_r+0x188>
 801867c:	9b03      	ldr	r3, [sp, #12]
 801867e:	1d1a      	adds	r2, r3, #4
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	9203      	str	r2, [sp, #12]
 8018684:	2b00      	cmp	r3, #0
 8018686:	bfb8      	it	lt
 8018688:	f04f 33ff 	movlt.w	r3, #4294967295
 801868c:	3402      	adds	r4, #2
 801868e:	9305      	str	r3, [sp, #20]
 8018690:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801875c <_svfiprintf_r+0x1fc>
 8018694:	7821      	ldrb	r1, [r4, #0]
 8018696:	2203      	movs	r2, #3
 8018698:	4650      	mov	r0, sl
 801869a:	f7e7 fdb1 	bl	8000200 <memchr>
 801869e:	b140      	cbz	r0, 80186b2 <_svfiprintf_r+0x152>
 80186a0:	2340      	movs	r3, #64	; 0x40
 80186a2:	eba0 000a 	sub.w	r0, r0, sl
 80186a6:	fa03 f000 	lsl.w	r0, r3, r0
 80186aa:	9b04      	ldr	r3, [sp, #16]
 80186ac:	4303      	orrs	r3, r0
 80186ae:	3401      	adds	r4, #1
 80186b0:	9304      	str	r3, [sp, #16]
 80186b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186b6:	4826      	ldr	r0, [pc, #152]	; (8018750 <_svfiprintf_r+0x1f0>)
 80186b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80186bc:	2206      	movs	r2, #6
 80186be:	f7e7 fd9f 	bl	8000200 <memchr>
 80186c2:	2800      	cmp	r0, #0
 80186c4:	d038      	beq.n	8018738 <_svfiprintf_r+0x1d8>
 80186c6:	4b23      	ldr	r3, [pc, #140]	; (8018754 <_svfiprintf_r+0x1f4>)
 80186c8:	bb1b      	cbnz	r3, 8018712 <_svfiprintf_r+0x1b2>
 80186ca:	9b03      	ldr	r3, [sp, #12]
 80186cc:	3307      	adds	r3, #7
 80186ce:	f023 0307 	bic.w	r3, r3, #7
 80186d2:	3308      	adds	r3, #8
 80186d4:	9303      	str	r3, [sp, #12]
 80186d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186d8:	4433      	add	r3, r6
 80186da:	9309      	str	r3, [sp, #36]	; 0x24
 80186dc:	e767      	b.n	80185ae <_svfiprintf_r+0x4e>
 80186de:	fb0c 3202 	mla	r2, ip, r2, r3
 80186e2:	460c      	mov	r4, r1
 80186e4:	2001      	movs	r0, #1
 80186e6:	e7a5      	b.n	8018634 <_svfiprintf_r+0xd4>
 80186e8:	2300      	movs	r3, #0
 80186ea:	3401      	adds	r4, #1
 80186ec:	9305      	str	r3, [sp, #20]
 80186ee:	4619      	mov	r1, r3
 80186f0:	f04f 0c0a 	mov.w	ip, #10
 80186f4:	4620      	mov	r0, r4
 80186f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186fa:	3a30      	subs	r2, #48	; 0x30
 80186fc:	2a09      	cmp	r2, #9
 80186fe:	d903      	bls.n	8018708 <_svfiprintf_r+0x1a8>
 8018700:	2b00      	cmp	r3, #0
 8018702:	d0c5      	beq.n	8018690 <_svfiprintf_r+0x130>
 8018704:	9105      	str	r1, [sp, #20]
 8018706:	e7c3      	b.n	8018690 <_svfiprintf_r+0x130>
 8018708:	fb0c 2101 	mla	r1, ip, r1, r2
 801870c:	4604      	mov	r4, r0
 801870e:	2301      	movs	r3, #1
 8018710:	e7f0      	b.n	80186f4 <_svfiprintf_r+0x194>
 8018712:	ab03      	add	r3, sp, #12
 8018714:	9300      	str	r3, [sp, #0]
 8018716:	462a      	mov	r2, r5
 8018718:	4b0f      	ldr	r3, [pc, #60]	; (8018758 <_svfiprintf_r+0x1f8>)
 801871a:	a904      	add	r1, sp, #16
 801871c:	4638      	mov	r0, r7
 801871e:	f3af 8000 	nop.w
 8018722:	1c42      	adds	r2, r0, #1
 8018724:	4606      	mov	r6, r0
 8018726:	d1d6      	bne.n	80186d6 <_svfiprintf_r+0x176>
 8018728:	89ab      	ldrh	r3, [r5, #12]
 801872a:	065b      	lsls	r3, r3, #25
 801872c:	f53f af2c 	bmi.w	8018588 <_svfiprintf_r+0x28>
 8018730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018732:	b01d      	add	sp, #116	; 0x74
 8018734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018738:	ab03      	add	r3, sp, #12
 801873a:	9300      	str	r3, [sp, #0]
 801873c:	462a      	mov	r2, r5
 801873e:	4b06      	ldr	r3, [pc, #24]	; (8018758 <_svfiprintf_r+0x1f8>)
 8018740:	a904      	add	r1, sp, #16
 8018742:	4638      	mov	r0, r7
 8018744:	f000 f9d4 	bl	8018af0 <_printf_i>
 8018748:	e7eb      	b.n	8018722 <_svfiprintf_r+0x1c2>
 801874a:	bf00      	nop
 801874c:	0801b6d8 	.word	0x0801b6d8
 8018750:	0801b6e2 	.word	0x0801b6e2
 8018754:	00000000 	.word	0x00000000
 8018758:	080184a9 	.word	0x080184a9
 801875c:	0801b6de 	.word	0x0801b6de

08018760 <__sfputc_r>:
 8018760:	6893      	ldr	r3, [r2, #8]
 8018762:	3b01      	subs	r3, #1
 8018764:	2b00      	cmp	r3, #0
 8018766:	b410      	push	{r4}
 8018768:	6093      	str	r3, [r2, #8]
 801876a:	da08      	bge.n	801877e <__sfputc_r+0x1e>
 801876c:	6994      	ldr	r4, [r2, #24]
 801876e:	42a3      	cmp	r3, r4
 8018770:	db01      	blt.n	8018776 <__sfputc_r+0x16>
 8018772:	290a      	cmp	r1, #10
 8018774:	d103      	bne.n	801877e <__sfputc_r+0x1e>
 8018776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801877a:	f7ff bc21 	b.w	8017fc0 <__swbuf_r>
 801877e:	6813      	ldr	r3, [r2, #0]
 8018780:	1c58      	adds	r0, r3, #1
 8018782:	6010      	str	r0, [r2, #0]
 8018784:	7019      	strb	r1, [r3, #0]
 8018786:	4608      	mov	r0, r1
 8018788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801878c:	4770      	bx	lr

0801878e <__sfputs_r>:
 801878e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018790:	4606      	mov	r6, r0
 8018792:	460f      	mov	r7, r1
 8018794:	4614      	mov	r4, r2
 8018796:	18d5      	adds	r5, r2, r3
 8018798:	42ac      	cmp	r4, r5
 801879a:	d101      	bne.n	80187a0 <__sfputs_r+0x12>
 801879c:	2000      	movs	r0, #0
 801879e:	e007      	b.n	80187b0 <__sfputs_r+0x22>
 80187a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187a4:	463a      	mov	r2, r7
 80187a6:	4630      	mov	r0, r6
 80187a8:	f7ff ffda 	bl	8018760 <__sfputc_r>
 80187ac:	1c43      	adds	r3, r0, #1
 80187ae:	d1f3      	bne.n	8018798 <__sfputs_r+0xa>
 80187b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080187b4 <_vfiprintf_r>:
 80187b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b8:	460d      	mov	r5, r1
 80187ba:	b09d      	sub	sp, #116	; 0x74
 80187bc:	4614      	mov	r4, r2
 80187be:	4698      	mov	r8, r3
 80187c0:	4606      	mov	r6, r0
 80187c2:	b118      	cbz	r0, 80187cc <_vfiprintf_r+0x18>
 80187c4:	6983      	ldr	r3, [r0, #24]
 80187c6:	b90b      	cbnz	r3, 80187cc <_vfiprintf_r+0x18>
 80187c8:	f7ff f8d8 	bl	801797c <__sinit>
 80187cc:	4b89      	ldr	r3, [pc, #548]	; (80189f4 <_vfiprintf_r+0x240>)
 80187ce:	429d      	cmp	r5, r3
 80187d0:	d11b      	bne.n	801880a <_vfiprintf_r+0x56>
 80187d2:	6875      	ldr	r5, [r6, #4]
 80187d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187d6:	07d9      	lsls	r1, r3, #31
 80187d8:	d405      	bmi.n	80187e6 <_vfiprintf_r+0x32>
 80187da:	89ab      	ldrh	r3, [r5, #12]
 80187dc:	059a      	lsls	r2, r3, #22
 80187de:	d402      	bmi.n	80187e6 <_vfiprintf_r+0x32>
 80187e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187e2:	f7ff f98e 	bl	8017b02 <__retarget_lock_acquire_recursive>
 80187e6:	89ab      	ldrh	r3, [r5, #12]
 80187e8:	071b      	lsls	r3, r3, #28
 80187ea:	d501      	bpl.n	80187f0 <_vfiprintf_r+0x3c>
 80187ec:	692b      	ldr	r3, [r5, #16]
 80187ee:	b9eb      	cbnz	r3, 801882c <_vfiprintf_r+0x78>
 80187f0:	4629      	mov	r1, r5
 80187f2:	4630      	mov	r0, r6
 80187f4:	f7ff fc48 	bl	8018088 <__swsetup_r>
 80187f8:	b1c0      	cbz	r0, 801882c <_vfiprintf_r+0x78>
 80187fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187fc:	07dc      	lsls	r4, r3, #31
 80187fe:	d50e      	bpl.n	801881e <_vfiprintf_r+0x6a>
 8018800:	f04f 30ff 	mov.w	r0, #4294967295
 8018804:	b01d      	add	sp, #116	; 0x74
 8018806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801880a:	4b7b      	ldr	r3, [pc, #492]	; (80189f8 <_vfiprintf_r+0x244>)
 801880c:	429d      	cmp	r5, r3
 801880e:	d101      	bne.n	8018814 <_vfiprintf_r+0x60>
 8018810:	68b5      	ldr	r5, [r6, #8]
 8018812:	e7df      	b.n	80187d4 <_vfiprintf_r+0x20>
 8018814:	4b79      	ldr	r3, [pc, #484]	; (80189fc <_vfiprintf_r+0x248>)
 8018816:	429d      	cmp	r5, r3
 8018818:	bf08      	it	eq
 801881a:	68f5      	ldreq	r5, [r6, #12]
 801881c:	e7da      	b.n	80187d4 <_vfiprintf_r+0x20>
 801881e:	89ab      	ldrh	r3, [r5, #12]
 8018820:	0598      	lsls	r0, r3, #22
 8018822:	d4ed      	bmi.n	8018800 <_vfiprintf_r+0x4c>
 8018824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018826:	f7ff f96d 	bl	8017b04 <__retarget_lock_release_recursive>
 801882a:	e7e9      	b.n	8018800 <_vfiprintf_r+0x4c>
 801882c:	2300      	movs	r3, #0
 801882e:	9309      	str	r3, [sp, #36]	; 0x24
 8018830:	2320      	movs	r3, #32
 8018832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018836:	f8cd 800c 	str.w	r8, [sp, #12]
 801883a:	2330      	movs	r3, #48	; 0x30
 801883c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018a00 <_vfiprintf_r+0x24c>
 8018840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018844:	f04f 0901 	mov.w	r9, #1
 8018848:	4623      	mov	r3, r4
 801884a:	469a      	mov	sl, r3
 801884c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018850:	b10a      	cbz	r2, 8018856 <_vfiprintf_r+0xa2>
 8018852:	2a25      	cmp	r2, #37	; 0x25
 8018854:	d1f9      	bne.n	801884a <_vfiprintf_r+0x96>
 8018856:	ebba 0b04 	subs.w	fp, sl, r4
 801885a:	d00b      	beq.n	8018874 <_vfiprintf_r+0xc0>
 801885c:	465b      	mov	r3, fp
 801885e:	4622      	mov	r2, r4
 8018860:	4629      	mov	r1, r5
 8018862:	4630      	mov	r0, r6
 8018864:	f7ff ff93 	bl	801878e <__sfputs_r>
 8018868:	3001      	adds	r0, #1
 801886a:	f000 80aa 	beq.w	80189c2 <_vfiprintf_r+0x20e>
 801886e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018870:	445a      	add	r2, fp
 8018872:	9209      	str	r2, [sp, #36]	; 0x24
 8018874:	f89a 3000 	ldrb.w	r3, [sl]
 8018878:	2b00      	cmp	r3, #0
 801887a:	f000 80a2 	beq.w	80189c2 <_vfiprintf_r+0x20e>
 801887e:	2300      	movs	r3, #0
 8018880:	f04f 32ff 	mov.w	r2, #4294967295
 8018884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018888:	f10a 0a01 	add.w	sl, sl, #1
 801888c:	9304      	str	r3, [sp, #16]
 801888e:	9307      	str	r3, [sp, #28]
 8018890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018894:	931a      	str	r3, [sp, #104]	; 0x68
 8018896:	4654      	mov	r4, sl
 8018898:	2205      	movs	r2, #5
 801889a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801889e:	4858      	ldr	r0, [pc, #352]	; (8018a00 <_vfiprintf_r+0x24c>)
 80188a0:	f7e7 fcae 	bl	8000200 <memchr>
 80188a4:	9a04      	ldr	r2, [sp, #16]
 80188a6:	b9d8      	cbnz	r0, 80188e0 <_vfiprintf_r+0x12c>
 80188a8:	06d1      	lsls	r1, r2, #27
 80188aa:	bf44      	itt	mi
 80188ac:	2320      	movmi	r3, #32
 80188ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188b2:	0713      	lsls	r3, r2, #28
 80188b4:	bf44      	itt	mi
 80188b6:	232b      	movmi	r3, #43	; 0x2b
 80188b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188bc:	f89a 3000 	ldrb.w	r3, [sl]
 80188c0:	2b2a      	cmp	r3, #42	; 0x2a
 80188c2:	d015      	beq.n	80188f0 <_vfiprintf_r+0x13c>
 80188c4:	9a07      	ldr	r2, [sp, #28]
 80188c6:	4654      	mov	r4, sl
 80188c8:	2000      	movs	r0, #0
 80188ca:	f04f 0c0a 	mov.w	ip, #10
 80188ce:	4621      	mov	r1, r4
 80188d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188d4:	3b30      	subs	r3, #48	; 0x30
 80188d6:	2b09      	cmp	r3, #9
 80188d8:	d94e      	bls.n	8018978 <_vfiprintf_r+0x1c4>
 80188da:	b1b0      	cbz	r0, 801890a <_vfiprintf_r+0x156>
 80188dc:	9207      	str	r2, [sp, #28]
 80188de:	e014      	b.n	801890a <_vfiprintf_r+0x156>
 80188e0:	eba0 0308 	sub.w	r3, r0, r8
 80188e4:	fa09 f303 	lsl.w	r3, r9, r3
 80188e8:	4313      	orrs	r3, r2
 80188ea:	9304      	str	r3, [sp, #16]
 80188ec:	46a2      	mov	sl, r4
 80188ee:	e7d2      	b.n	8018896 <_vfiprintf_r+0xe2>
 80188f0:	9b03      	ldr	r3, [sp, #12]
 80188f2:	1d19      	adds	r1, r3, #4
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	9103      	str	r1, [sp, #12]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	bfbb      	ittet	lt
 80188fc:	425b      	neglt	r3, r3
 80188fe:	f042 0202 	orrlt.w	r2, r2, #2
 8018902:	9307      	strge	r3, [sp, #28]
 8018904:	9307      	strlt	r3, [sp, #28]
 8018906:	bfb8      	it	lt
 8018908:	9204      	strlt	r2, [sp, #16]
 801890a:	7823      	ldrb	r3, [r4, #0]
 801890c:	2b2e      	cmp	r3, #46	; 0x2e
 801890e:	d10c      	bne.n	801892a <_vfiprintf_r+0x176>
 8018910:	7863      	ldrb	r3, [r4, #1]
 8018912:	2b2a      	cmp	r3, #42	; 0x2a
 8018914:	d135      	bne.n	8018982 <_vfiprintf_r+0x1ce>
 8018916:	9b03      	ldr	r3, [sp, #12]
 8018918:	1d1a      	adds	r2, r3, #4
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	9203      	str	r2, [sp, #12]
 801891e:	2b00      	cmp	r3, #0
 8018920:	bfb8      	it	lt
 8018922:	f04f 33ff 	movlt.w	r3, #4294967295
 8018926:	3402      	adds	r4, #2
 8018928:	9305      	str	r3, [sp, #20]
 801892a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018a10 <_vfiprintf_r+0x25c>
 801892e:	7821      	ldrb	r1, [r4, #0]
 8018930:	2203      	movs	r2, #3
 8018932:	4650      	mov	r0, sl
 8018934:	f7e7 fc64 	bl	8000200 <memchr>
 8018938:	b140      	cbz	r0, 801894c <_vfiprintf_r+0x198>
 801893a:	2340      	movs	r3, #64	; 0x40
 801893c:	eba0 000a 	sub.w	r0, r0, sl
 8018940:	fa03 f000 	lsl.w	r0, r3, r0
 8018944:	9b04      	ldr	r3, [sp, #16]
 8018946:	4303      	orrs	r3, r0
 8018948:	3401      	adds	r4, #1
 801894a:	9304      	str	r3, [sp, #16]
 801894c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018950:	482c      	ldr	r0, [pc, #176]	; (8018a04 <_vfiprintf_r+0x250>)
 8018952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018956:	2206      	movs	r2, #6
 8018958:	f7e7 fc52 	bl	8000200 <memchr>
 801895c:	2800      	cmp	r0, #0
 801895e:	d03f      	beq.n	80189e0 <_vfiprintf_r+0x22c>
 8018960:	4b29      	ldr	r3, [pc, #164]	; (8018a08 <_vfiprintf_r+0x254>)
 8018962:	bb1b      	cbnz	r3, 80189ac <_vfiprintf_r+0x1f8>
 8018964:	9b03      	ldr	r3, [sp, #12]
 8018966:	3307      	adds	r3, #7
 8018968:	f023 0307 	bic.w	r3, r3, #7
 801896c:	3308      	adds	r3, #8
 801896e:	9303      	str	r3, [sp, #12]
 8018970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018972:	443b      	add	r3, r7
 8018974:	9309      	str	r3, [sp, #36]	; 0x24
 8018976:	e767      	b.n	8018848 <_vfiprintf_r+0x94>
 8018978:	fb0c 3202 	mla	r2, ip, r2, r3
 801897c:	460c      	mov	r4, r1
 801897e:	2001      	movs	r0, #1
 8018980:	e7a5      	b.n	80188ce <_vfiprintf_r+0x11a>
 8018982:	2300      	movs	r3, #0
 8018984:	3401      	adds	r4, #1
 8018986:	9305      	str	r3, [sp, #20]
 8018988:	4619      	mov	r1, r3
 801898a:	f04f 0c0a 	mov.w	ip, #10
 801898e:	4620      	mov	r0, r4
 8018990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018994:	3a30      	subs	r2, #48	; 0x30
 8018996:	2a09      	cmp	r2, #9
 8018998:	d903      	bls.n	80189a2 <_vfiprintf_r+0x1ee>
 801899a:	2b00      	cmp	r3, #0
 801899c:	d0c5      	beq.n	801892a <_vfiprintf_r+0x176>
 801899e:	9105      	str	r1, [sp, #20]
 80189a0:	e7c3      	b.n	801892a <_vfiprintf_r+0x176>
 80189a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80189a6:	4604      	mov	r4, r0
 80189a8:	2301      	movs	r3, #1
 80189aa:	e7f0      	b.n	801898e <_vfiprintf_r+0x1da>
 80189ac:	ab03      	add	r3, sp, #12
 80189ae:	9300      	str	r3, [sp, #0]
 80189b0:	462a      	mov	r2, r5
 80189b2:	4b16      	ldr	r3, [pc, #88]	; (8018a0c <_vfiprintf_r+0x258>)
 80189b4:	a904      	add	r1, sp, #16
 80189b6:	4630      	mov	r0, r6
 80189b8:	f3af 8000 	nop.w
 80189bc:	4607      	mov	r7, r0
 80189be:	1c78      	adds	r0, r7, #1
 80189c0:	d1d6      	bne.n	8018970 <_vfiprintf_r+0x1bc>
 80189c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80189c4:	07d9      	lsls	r1, r3, #31
 80189c6:	d405      	bmi.n	80189d4 <_vfiprintf_r+0x220>
 80189c8:	89ab      	ldrh	r3, [r5, #12]
 80189ca:	059a      	lsls	r2, r3, #22
 80189cc:	d402      	bmi.n	80189d4 <_vfiprintf_r+0x220>
 80189ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80189d0:	f7ff f898 	bl	8017b04 <__retarget_lock_release_recursive>
 80189d4:	89ab      	ldrh	r3, [r5, #12]
 80189d6:	065b      	lsls	r3, r3, #25
 80189d8:	f53f af12 	bmi.w	8018800 <_vfiprintf_r+0x4c>
 80189dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189de:	e711      	b.n	8018804 <_vfiprintf_r+0x50>
 80189e0:	ab03      	add	r3, sp, #12
 80189e2:	9300      	str	r3, [sp, #0]
 80189e4:	462a      	mov	r2, r5
 80189e6:	4b09      	ldr	r3, [pc, #36]	; (8018a0c <_vfiprintf_r+0x258>)
 80189e8:	a904      	add	r1, sp, #16
 80189ea:	4630      	mov	r0, r6
 80189ec:	f000 f880 	bl	8018af0 <_printf_i>
 80189f0:	e7e4      	b.n	80189bc <_vfiprintf_r+0x208>
 80189f2:	bf00      	nop
 80189f4:	0801b694 	.word	0x0801b694
 80189f8:	0801b6b4 	.word	0x0801b6b4
 80189fc:	0801b674 	.word	0x0801b674
 8018a00:	0801b6d8 	.word	0x0801b6d8
 8018a04:	0801b6e2 	.word	0x0801b6e2
 8018a08:	00000000 	.word	0x00000000
 8018a0c:	0801878f 	.word	0x0801878f
 8018a10:	0801b6de 	.word	0x0801b6de

08018a14 <_printf_common>:
 8018a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a18:	4616      	mov	r6, r2
 8018a1a:	4699      	mov	r9, r3
 8018a1c:	688a      	ldr	r2, [r1, #8]
 8018a1e:	690b      	ldr	r3, [r1, #16]
 8018a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018a24:	4293      	cmp	r3, r2
 8018a26:	bfb8      	it	lt
 8018a28:	4613      	movlt	r3, r2
 8018a2a:	6033      	str	r3, [r6, #0]
 8018a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018a30:	4607      	mov	r7, r0
 8018a32:	460c      	mov	r4, r1
 8018a34:	b10a      	cbz	r2, 8018a3a <_printf_common+0x26>
 8018a36:	3301      	adds	r3, #1
 8018a38:	6033      	str	r3, [r6, #0]
 8018a3a:	6823      	ldr	r3, [r4, #0]
 8018a3c:	0699      	lsls	r1, r3, #26
 8018a3e:	bf42      	ittt	mi
 8018a40:	6833      	ldrmi	r3, [r6, #0]
 8018a42:	3302      	addmi	r3, #2
 8018a44:	6033      	strmi	r3, [r6, #0]
 8018a46:	6825      	ldr	r5, [r4, #0]
 8018a48:	f015 0506 	ands.w	r5, r5, #6
 8018a4c:	d106      	bne.n	8018a5c <_printf_common+0x48>
 8018a4e:	f104 0a19 	add.w	sl, r4, #25
 8018a52:	68e3      	ldr	r3, [r4, #12]
 8018a54:	6832      	ldr	r2, [r6, #0]
 8018a56:	1a9b      	subs	r3, r3, r2
 8018a58:	42ab      	cmp	r3, r5
 8018a5a:	dc26      	bgt.n	8018aaa <_printf_common+0x96>
 8018a5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018a60:	1e13      	subs	r3, r2, #0
 8018a62:	6822      	ldr	r2, [r4, #0]
 8018a64:	bf18      	it	ne
 8018a66:	2301      	movne	r3, #1
 8018a68:	0692      	lsls	r2, r2, #26
 8018a6a:	d42b      	bmi.n	8018ac4 <_printf_common+0xb0>
 8018a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018a70:	4649      	mov	r1, r9
 8018a72:	4638      	mov	r0, r7
 8018a74:	47c0      	blx	r8
 8018a76:	3001      	adds	r0, #1
 8018a78:	d01e      	beq.n	8018ab8 <_printf_common+0xa4>
 8018a7a:	6823      	ldr	r3, [r4, #0]
 8018a7c:	68e5      	ldr	r5, [r4, #12]
 8018a7e:	6832      	ldr	r2, [r6, #0]
 8018a80:	f003 0306 	and.w	r3, r3, #6
 8018a84:	2b04      	cmp	r3, #4
 8018a86:	bf08      	it	eq
 8018a88:	1aad      	subeq	r5, r5, r2
 8018a8a:	68a3      	ldr	r3, [r4, #8]
 8018a8c:	6922      	ldr	r2, [r4, #16]
 8018a8e:	bf0c      	ite	eq
 8018a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018a94:	2500      	movne	r5, #0
 8018a96:	4293      	cmp	r3, r2
 8018a98:	bfc4      	itt	gt
 8018a9a:	1a9b      	subgt	r3, r3, r2
 8018a9c:	18ed      	addgt	r5, r5, r3
 8018a9e:	2600      	movs	r6, #0
 8018aa0:	341a      	adds	r4, #26
 8018aa2:	42b5      	cmp	r5, r6
 8018aa4:	d11a      	bne.n	8018adc <_printf_common+0xc8>
 8018aa6:	2000      	movs	r0, #0
 8018aa8:	e008      	b.n	8018abc <_printf_common+0xa8>
 8018aaa:	2301      	movs	r3, #1
 8018aac:	4652      	mov	r2, sl
 8018aae:	4649      	mov	r1, r9
 8018ab0:	4638      	mov	r0, r7
 8018ab2:	47c0      	blx	r8
 8018ab4:	3001      	adds	r0, #1
 8018ab6:	d103      	bne.n	8018ac0 <_printf_common+0xac>
 8018ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8018abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ac0:	3501      	adds	r5, #1
 8018ac2:	e7c6      	b.n	8018a52 <_printf_common+0x3e>
 8018ac4:	18e1      	adds	r1, r4, r3
 8018ac6:	1c5a      	adds	r2, r3, #1
 8018ac8:	2030      	movs	r0, #48	; 0x30
 8018aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018ace:	4422      	add	r2, r4
 8018ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018ad8:	3302      	adds	r3, #2
 8018ada:	e7c7      	b.n	8018a6c <_printf_common+0x58>
 8018adc:	2301      	movs	r3, #1
 8018ade:	4622      	mov	r2, r4
 8018ae0:	4649      	mov	r1, r9
 8018ae2:	4638      	mov	r0, r7
 8018ae4:	47c0      	blx	r8
 8018ae6:	3001      	adds	r0, #1
 8018ae8:	d0e6      	beq.n	8018ab8 <_printf_common+0xa4>
 8018aea:	3601      	adds	r6, #1
 8018aec:	e7d9      	b.n	8018aa2 <_printf_common+0x8e>
	...

08018af0 <_printf_i>:
 8018af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018af4:	7e0f      	ldrb	r7, [r1, #24]
 8018af6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018af8:	2f78      	cmp	r7, #120	; 0x78
 8018afa:	4691      	mov	r9, r2
 8018afc:	4680      	mov	r8, r0
 8018afe:	460c      	mov	r4, r1
 8018b00:	469a      	mov	sl, r3
 8018b02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018b06:	d807      	bhi.n	8018b18 <_printf_i+0x28>
 8018b08:	2f62      	cmp	r7, #98	; 0x62
 8018b0a:	d80a      	bhi.n	8018b22 <_printf_i+0x32>
 8018b0c:	2f00      	cmp	r7, #0
 8018b0e:	f000 80d8 	beq.w	8018cc2 <_printf_i+0x1d2>
 8018b12:	2f58      	cmp	r7, #88	; 0x58
 8018b14:	f000 80a3 	beq.w	8018c5e <_printf_i+0x16e>
 8018b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018b20:	e03a      	b.n	8018b98 <_printf_i+0xa8>
 8018b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018b26:	2b15      	cmp	r3, #21
 8018b28:	d8f6      	bhi.n	8018b18 <_printf_i+0x28>
 8018b2a:	a101      	add	r1, pc, #4	; (adr r1, 8018b30 <_printf_i+0x40>)
 8018b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018b30:	08018b89 	.word	0x08018b89
 8018b34:	08018b9d 	.word	0x08018b9d
 8018b38:	08018b19 	.word	0x08018b19
 8018b3c:	08018b19 	.word	0x08018b19
 8018b40:	08018b19 	.word	0x08018b19
 8018b44:	08018b19 	.word	0x08018b19
 8018b48:	08018b9d 	.word	0x08018b9d
 8018b4c:	08018b19 	.word	0x08018b19
 8018b50:	08018b19 	.word	0x08018b19
 8018b54:	08018b19 	.word	0x08018b19
 8018b58:	08018b19 	.word	0x08018b19
 8018b5c:	08018ca9 	.word	0x08018ca9
 8018b60:	08018bcd 	.word	0x08018bcd
 8018b64:	08018c8b 	.word	0x08018c8b
 8018b68:	08018b19 	.word	0x08018b19
 8018b6c:	08018b19 	.word	0x08018b19
 8018b70:	08018ccb 	.word	0x08018ccb
 8018b74:	08018b19 	.word	0x08018b19
 8018b78:	08018bcd 	.word	0x08018bcd
 8018b7c:	08018b19 	.word	0x08018b19
 8018b80:	08018b19 	.word	0x08018b19
 8018b84:	08018c93 	.word	0x08018c93
 8018b88:	682b      	ldr	r3, [r5, #0]
 8018b8a:	1d1a      	adds	r2, r3, #4
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	602a      	str	r2, [r5, #0]
 8018b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018b98:	2301      	movs	r3, #1
 8018b9a:	e0a3      	b.n	8018ce4 <_printf_i+0x1f4>
 8018b9c:	6820      	ldr	r0, [r4, #0]
 8018b9e:	6829      	ldr	r1, [r5, #0]
 8018ba0:	0606      	lsls	r6, r0, #24
 8018ba2:	f101 0304 	add.w	r3, r1, #4
 8018ba6:	d50a      	bpl.n	8018bbe <_printf_i+0xce>
 8018ba8:	680e      	ldr	r6, [r1, #0]
 8018baa:	602b      	str	r3, [r5, #0]
 8018bac:	2e00      	cmp	r6, #0
 8018bae:	da03      	bge.n	8018bb8 <_printf_i+0xc8>
 8018bb0:	232d      	movs	r3, #45	; 0x2d
 8018bb2:	4276      	negs	r6, r6
 8018bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018bb8:	485e      	ldr	r0, [pc, #376]	; (8018d34 <_printf_i+0x244>)
 8018bba:	230a      	movs	r3, #10
 8018bbc:	e019      	b.n	8018bf2 <_printf_i+0x102>
 8018bbe:	680e      	ldr	r6, [r1, #0]
 8018bc0:	602b      	str	r3, [r5, #0]
 8018bc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018bc6:	bf18      	it	ne
 8018bc8:	b236      	sxthne	r6, r6
 8018bca:	e7ef      	b.n	8018bac <_printf_i+0xbc>
 8018bcc:	682b      	ldr	r3, [r5, #0]
 8018bce:	6820      	ldr	r0, [r4, #0]
 8018bd0:	1d19      	adds	r1, r3, #4
 8018bd2:	6029      	str	r1, [r5, #0]
 8018bd4:	0601      	lsls	r1, r0, #24
 8018bd6:	d501      	bpl.n	8018bdc <_printf_i+0xec>
 8018bd8:	681e      	ldr	r6, [r3, #0]
 8018bda:	e002      	b.n	8018be2 <_printf_i+0xf2>
 8018bdc:	0646      	lsls	r6, r0, #25
 8018bde:	d5fb      	bpl.n	8018bd8 <_printf_i+0xe8>
 8018be0:	881e      	ldrh	r6, [r3, #0]
 8018be2:	4854      	ldr	r0, [pc, #336]	; (8018d34 <_printf_i+0x244>)
 8018be4:	2f6f      	cmp	r7, #111	; 0x6f
 8018be6:	bf0c      	ite	eq
 8018be8:	2308      	moveq	r3, #8
 8018bea:	230a      	movne	r3, #10
 8018bec:	2100      	movs	r1, #0
 8018bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018bf2:	6865      	ldr	r5, [r4, #4]
 8018bf4:	60a5      	str	r5, [r4, #8]
 8018bf6:	2d00      	cmp	r5, #0
 8018bf8:	bfa2      	ittt	ge
 8018bfa:	6821      	ldrge	r1, [r4, #0]
 8018bfc:	f021 0104 	bicge.w	r1, r1, #4
 8018c00:	6021      	strge	r1, [r4, #0]
 8018c02:	b90e      	cbnz	r6, 8018c08 <_printf_i+0x118>
 8018c04:	2d00      	cmp	r5, #0
 8018c06:	d04d      	beq.n	8018ca4 <_printf_i+0x1b4>
 8018c08:	4615      	mov	r5, r2
 8018c0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8018c0e:	fb03 6711 	mls	r7, r3, r1, r6
 8018c12:	5dc7      	ldrb	r7, [r0, r7]
 8018c14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018c18:	4637      	mov	r7, r6
 8018c1a:	42bb      	cmp	r3, r7
 8018c1c:	460e      	mov	r6, r1
 8018c1e:	d9f4      	bls.n	8018c0a <_printf_i+0x11a>
 8018c20:	2b08      	cmp	r3, #8
 8018c22:	d10b      	bne.n	8018c3c <_printf_i+0x14c>
 8018c24:	6823      	ldr	r3, [r4, #0]
 8018c26:	07de      	lsls	r6, r3, #31
 8018c28:	d508      	bpl.n	8018c3c <_printf_i+0x14c>
 8018c2a:	6923      	ldr	r3, [r4, #16]
 8018c2c:	6861      	ldr	r1, [r4, #4]
 8018c2e:	4299      	cmp	r1, r3
 8018c30:	bfde      	ittt	le
 8018c32:	2330      	movle	r3, #48	; 0x30
 8018c34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018c38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018c3c:	1b52      	subs	r2, r2, r5
 8018c3e:	6122      	str	r2, [r4, #16]
 8018c40:	f8cd a000 	str.w	sl, [sp]
 8018c44:	464b      	mov	r3, r9
 8018c46:	aa03      	add	r2, sp, #12
 8018c48:	4621      	mov	r1, r4
 8018c4a:	4640      	mov	r0, r8
 8018c4c:	f7ff fee2 	bl	8018a14 <_printf_common>
 8018c50:	3001      	adds	r0, #1
 8018c52:	d14c      	bne.n	8018cee <_printf_i+0x1fe>
 8018c54:	f04f 30ff 	mov.w	r0, #4294967295
 8018c58:	b004      	add	sp, #16
 8018c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c5e:	4835      	ldr	r0, [pc, #212]	; (8018d34 <_printf_i+0x244>)
 8018c60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018c64:	6829      	ldr	r1, [r5, #0]
 8018c66:	6823      	ldr	r3, [r4, #0]
 8018c68:	f851 6b04 	ldr.w	r6, [r1], #4
 8018c6c:	6029      	str	r1, [r5, #0]
 8018c6e:	061d      	lsls	r5, r3, #24
 8018c70:	d514      	bpl.n	8018c9c <_printf_i+0x1ac>
 8018c72:	07df      	lsls	r7, r3, #31
 8018c74:	bf44      	itt	mi
 8018c76:	f043 0320 	orrmi.w	r3, r3, #32
 8018c7a:	6023      	strmi	r3, [r4, #0]
 8018c7c:	b91e      	cbnz	r6, 8018c86 <_printf_i+0x196>
 8018c7e:	6823      	ldr	r3, [r4, #0]
 8018c80:	f023 0320 	bic.w	r3, r3, #32
 8018c84:	6023      	str	r3, [r4, #0]
 8018c86:	2310      	movs	r3, #16
 8018c88:	e7b0      	b.n	8018bec <_printf_i+0xfc>
 8018c8a:	6823      	ldr	r3, [r4, #0]
 8018c8c:	f043 0320 	orr.w	r3, r3, #32
 8018c90:	6023      	str	r3, [r4, #0]
 8018c92:	2378      	movs	r3, #120	; 0x78
 8018c94:	4828      	ldr	r0, [pc, #160]	; (8018d38 <_printf_i+0x248>)
 8018c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018c9a:	e7e3      	b.n	8018c64 <_printf_i+0x174>
 8018c9c:	0659      	lsls	r1, r3, #25
 8018c9e:	bf48      	it	mi
 8018ca0:	b2b6      	uxthmi	r6, r6
 8018ca2:	e7e6      	b.n	8018c72 <_printf_i+0x182>
 8018ca4:	4615      	mov	r5, r2
 8018ca6:	e7bb      	b.n	8018c20 <_printf_i+0x130>
 8018ca8:	682b      	ldr	r3, [r5, #0]
 8018caa:	6826      	ldr	r6, [r4, #0]
 8018cac:	6961      	ldr	r1, [r4, #20]
 8018cae:	1d18      	adds	r0, r3, #4
 8018cb0:	6028      	str	r0, [r5, #0]
 8018cb2:	0635      	lsls	r5, r6, #24
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	d501      	bpl.n	8018cbc <_printf_i+0x1cc>
 8018cb8:	6019      	str	r1, [r3, #0]
 8018cba:	e002      	b.n	8018cc2 <_printf_i+0x1d2>
 8018cbc:	0670      	lsls	r0, r6, #25
 8018cbe:	d5fb      	bpl.n	8018cb8 <_printf_i+0x1c8>
 8018cc0:	8019      	strh	r1, [r3, #0]
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	6123      	str	r3, [r4, #16]
 8018cc6:	4615      	mov	r5, r2
 8018cc8:	e7ba      	b.n	8018c40 <_printf_i+0x150>
 8018cca:	682b      	ldr	r3, [r5, #0]
 8018ccc:	1d1a      	adds	r2, r3, #4
 8018cce:	602a      	str	r2, [r5, #0]
 8018cd0:	681d      	ldr	r5, [r3, #0]
 8018cd2:	6862      	ldr	r2, [r4, #4]
 8018cd4:	2100      	movs	r1, #0
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	f7e7 fa92 	bl	8000200 <memchr>
 8018cdc:	b108      	cbz	r0, 8018ce2 <_printf_i+0x1f2>
 8018cde:	1b40      	subs	r0, r0, r5
 8018ce0:	6060      	str	r0, [r4, #4]
 8018ce2:	6863      	ldr	r3, [r4, #4]
 8018ce4:	6123      	str	r3, [r4, #16]
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018cec:	e7a8      	b.n	8018c40 <_printf_i+0x150>
 8018cee:	6923      	ldr	r3, [r4, #16]
 8018cf0:	462a      	mov	r2, r5
 8018cf2:	4649      	mov	r1, r9
 8018cf4:	4640      	mov	r0, r8
 8018cf6:	47d0      	blx	sl
 8018cf8:	3001      	adds	r0, #1
 8018cfa:	d0ab      	beq.n	8018c54 <_printf_i+0x164>
 8018cfc:	6823      	ldr	r3, [r4, #0]
 8018cfe:	079b      	lsls	r3, r3, #30
 8018d00:	d413      	bmi.n	8018d2a <_printf_i+0x23a>
 8018d02:	68e0      	ldr	r0, [r4, #12]
 8018d04:	9b03      	ldr	r3, [sp, #12]
 8018d06:	4298      	cmp	r0, r3
 8018d08:	bfb8      	it	lt
 8018d0a:	4618      	movlt	r0, r3
 8018d0c:	e7a4      	b.n	8018c58 <_printf_i+0x168>
 8018d0e:	2301      	movs	r3, #1
 8018d10:	4632      	mov	r2, r6
 8018d12:	4649      	mov	r1, r9
 8018d14:	4640      	mov	r0, r8
 8018d16:	47d0      	blx	sl
 8018d18:	3001      	adds	r0, #1
 8018d1a:	d09b      	beq.n	8018c54 <_printf_i+0x164>
 8018d1c:	3501      	adds	r5, #1
 8018d1e:	68e3      	ldr	r3, [r4, #12]
 8018d20:	9903      	ldr	r1, [sp, #12]
 8018d22:	1a5b      	subs	r3, r3, r1
 8018d24:	42ab      	cmp	r3, r5
 8018d26:	dcf2      	bgt.n	8018d0e <_printf_i+0x21e>
 8018d28:	e7eb      	b.n	8018d02 <_printf_i+0x212>
 8018d2a:	2500      	movs	r5, #0
 8018d2c:	f104 0619 	add.w	r6, r4, #25
 8018d30:	e7f5      	b.n	8018d1e <_printf_i+0x22e>
 8018d32:	bf00      	nop
 8018d34:	0801b6e9 	.word	0x0801b6e9
 8018d38:	0801b6fa 	.word	0x0801b6fa

08018d3c <_putc_r>:
 8018d3c:	b570      	push	{r4, r5, r6, lr}
 8018d3e:	460d      	mov	r5, r1
 8018d40:	4614      	mov	r4, r2
 8018d42:	4606      	mov	r6, r0
 8018d44:	b118      	cbz	r0, 8018d4e <_putc_r+0x12>
 8018d46:	6983      	ldr	r3, [r0, #24]
 8018d48:	b90b      	cbnz	r3, 8018d4e <_putc_r+0x12>
 8018d4a:	f7fe fe17 	bl	801797c <__sinit>
 8018d4e:	4b1c      	ldr	r3, [pc, #112]	; (8018dc0 <_putc_r+0x84>)
 8018d50:	429c      	cmp	r4, r3
 8018d52:	d124      	bne.n	8018d9e <_putc_r+0x62>
 8018d54:	6874      	ldr	r4, [r6, #4]
 8018d56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d58:	07d8      	lsls	r0, r3, #31
 8018d5a:	d405      	bmi.n	8018d68 <_putc_r+0x2c>
 8018d5c:	89a3      	ldrh	r3, [r4, #12]
 8018d5e:	0599      	lsls	r1, r3, #22
 8018d60:	d402      	bmi.n	8018d68 <_putc_r+0x2c>
 8018d62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d64:	f7fe fecd 	bl	8017b02 <__retarget_lock_acquire_recursive>
 8018d68:	68a3      	ldr	r3, [r4, #8]
 8018d6a:	3b01      	subs	r3, #1
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	60a3      	str	r3, [r4, #8]
 8018d70:	da05      	bge.n	8018d7e <_putc_r+0x42>
 8018d72:	69a2      	ldr	r2, [r4, #24]
 8018d74:	4293      	cmp	r3, r2
 8018d76:	db1c      	blt.n	8018db2 <_putc_r+0x76>
 8018d78:	b2eb      	uxtb	r3, r5
 8018d7a:	2b0a      	cmp	r3, #10
 8018d7c:	d019      	beq.n	8018db2 <_putc_r+0x76>
 8018d7e:	6823      	ldr	r3, [r4, #0]
 8018d80:	1c5a      	adds	r2, r3, #1
 8018d82:	6022      	str	r2, [r4, #0]
 8018d84:	701d      	strb	r5, [r3, #0]
 8018d86:	b2ed      	uxtb	r5, r5
 8018d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d8a:	07da      	lsls	r2, r3, #31
 8018d8c:	d405      	bmi.n	8018d9a <_putc_r+0x5e>
 8018d8e:	89a3      	ldrh	r3, [r4, #12]
 8018d90:	059b      	lsls	r3, r3, #22
 8018d92:	d402      	bmi.n	8018d9a <_putc_r+0x5e>
 8018d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d96:	f7fe feb5 	bl	8017b04 <__retarget_lock_release_recursive>
 8018d9a:	4628      	mov	r0, r5
 8018d9c:	bd70      	pop	{r4, r5, r6, pc}
 8018d9e:	4b09      	ldr	r3, [pc, #36]	; (8018dc4 <_putc_r+0x88>)
 8018da0:	429c      	cmp	r4, r3
 8018da2:	d101      	bne.n	8018da8 <_putc_r+0x6c>
 8018da4:	68b4      	ldr	r4, [r6, #8]
 8018da6:	e7d6      	b.n	8018d56 <_putc_r+0x1a>
 8018da8:	4b07      	ldr	r3, [pc, #28]	; (8018dc8 <_putc_r+0x8c>)
 8018daa:	429c      	cmp	r4, r3
 8018dac:	bf08      	it	eq
 8018dae:	68f4      	ldreq	r4, [r6, #12]
 8018db0:	e7d1      	b.n	8018d56 <_putc_r+0x1a>
 8018db2:	4629      	mov	r1, r5
 8018db4:	4622      	mov	r2, r4
 8018db6:	4630      	mov	r0, r6
 8018db8:	f7ff f902 	bl	8017fc0 <__swbuf_r>
 8018dbc:	4605      	mov	r5, r0
 8018dbe:	e7e3      	b.n	8018d88 <_putc_r+0x4c>
 8018dc0:	0801b694 	.word	0x0801b694
 8018dc4:	0801b6b4 	.word	0x0801b6b4
 8018dc8:	0801b674 	.word	0x0801b674

08018dcc <_read_r>:
 8018dcc:	b538      	push	{r3, r4, r5, lr}
 8018dce:	4d07      	ldr	r5, [pc, #28]	; (8018dec <_read_r+0x20>)
 8018dd0:	4604      	mov	r4, r0
 8018dd2:	4608      	mov	r0, r1
 8018dd4:	4611      	mov	r1, r2
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	602a      	str	r2, [r5, #0]
 8018dda:	461a      	mov	r2, r3
 8018ddc:	f7e8 f92b 	bl	8001036 <_read>
 8018de0:	1c43      	adds	r3, r0, #1
 8018de2:	d102      	bne.n	8018dea <_read_r+0x1e>
 8018de4:	682b      	ldr	r3, [r5, #0]
 8018de6:	b103      	cbz	r3, 8018dea <_read_r+0x1e>
 8018de8:	6023      	str	r3, [r4, #0]
 8018dea:	bd38      	pop	{r3, r4, r5, pc}
 8018dec:	20009544 	.word	0x20009544

08018df0 <_fstat_r>:
 8018df0:	b538      	push	{r3, r4, r5, lr}
 8018df2:	4d07      	ldr	r5, [pc, #28]	; (8018e10 <_fstat_r+0x20>)
 8018df4:	2300      	movs	r3, #0
 8018df6:	4604      	mov	r4, r0
 8018df8:	4608      	mov	r0, r1
 8018dfa:	4611      	mov	r1, r2
 8018dfc:	602b      	str	r3, [r5, #0]
 8018dfe:	f7e8 f95f 	bl	80010c0 <_fstat>
 8018e02:	1c43      	adds	r3, r0, #1
 8018e04:	d102      	bne.n	8018e0c <_fstat_r+0x1c>
 8018e06:	682b      	ldr	r3, [r5, #0]
 8018e08:	b103      	cbz	r3, 8018e0c <_fstat_r+0x1c>
 8018e0a:	6023      	str	r3, [r4, #0]
 8018e0c:	bd38      	pop	{r3, r4, r5, pc}
 8018e0e:	bf00      	nop
 8018e10:	20009544 	.word	0x20009544

08018e14 <_isatty_r>:
 8018e14:	b538      	push	{r3, r4, r5, lr}
 8018e16:	4d06      	ldr	r5, [pc, #24]	; (8018e30 <_isatty_r+0x1c>)
 8018e18:	2300      	movs	r3, #0
 8018e1a:	4604      	mov	r4, r0
 8018e1c:	4608      	mov	r0, r1
 8018e1e:	602b      	str	r3, [r5, #0]
 8018e20:	f7e8 f95e 	bl	80010e0 <_isatty>
 8018e24:	1c43      	adds	r3, r0, #1
 8018e26:	d102      	bne.n	8018e2e <_isatty_r+0x1a>
 8018e28:	682b      	ldr	r3, [r5, #0]
 8018e2a:	b103      	cbz	r3, 8018e2e <_isatty_r+0x1a>
 8018e2c:	6023      	str	r3, [r4, #0]
 8018e2e:	bd38      	pop	{r3, r4, r5, pc}
 8018e30:	20009544 	.word	0x20009544

08018e34 <_realloc_r>:
 8018e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e38:	4680      	mov	r8, r0
 8018e3a:	4614      	mov	r4, r2
 8018e3c:	460e      	mov	r6, r1
 8018e3e:	b921      	cbnz	r1, 8018e4a <_realloc_r+0x16>
 8018e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e44:	4611      	mov	r1, r2
 8018e46:	f7fe beaf 	b.w	8017ba8 <_malloc_r>
 8018e4a:	b92a      	cbnz	r2, 8018e58 <_realloc_r+0x24>
 8018e4c:	f7ff fae0 	bl	8018410 <_free_r>
 8018e50:	4625      	mov	r5, r4
 8018e52:	4628      	mov	r0, r5
 8018e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e58:	f000 f81b 	bl	8018e92 <_malloc_usable_size_r>
 8018e5c:	4284      	cmp	r4, r0
 8018e5e:	4607      	mov	r7, r0
 8018e60:	d802      	bhi.n	8018e68 <_realloc_r+0x34>
 8018e62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018e66:	d812      	bhi.n	8018e8e <_realloc_r+0x5a>
 8018e68:	4621      	mov	r1, r4
 8018e6a:	4640      	mov	r0, r8
 8018e6c:	f7fe fe9c 	bl	8017ba8 <_malloc_r>
 8018e70:	4605      	mov	r5, r0
 8018e72:	2800      	cmp	r0, #0
 8018e74:	d0ed      	beq.n	8018e52 <_realloc_r+0x1e>
 8018e76:	42bc      	cmp	r4, r7
 8018e78:	4622      	mov	r2, r4
 8018e7a:	4631      	mov	r1, r6
 8018e7c:	bf28      	it	cs
 8018e7e:	463a      	movcs	r2, r7
 8018e80:	f7fe fe41 	bl	8017b06 <memcpy>
 8018e84:	4631      	mov	r1, r6
 8018e86:	4640      	mov	r0, r8
 8018e88:	f7ff fac2 	bl	8018410 <_free_r>
 8018e8c:	e7e1      	b.n	8018e52 <_realloc_r+0x1e>
 8018e8e:	4635      	mov	r5, r6
 8018e90:	e7df      	b.n	8018e52 <_realloc_r+0x1e>

08018e92 <_malloc_usable_size_r>:
 8018e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018e96:	1f18      	subs	r0, r3, #4
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	bfbc      	itt	lt
 8018e9c:	580b      	ldrlt	r3, [r1, r0]
 8018e9e:	18c0      	addlt	r0, r0, r3
 8018ea0:	4770      	bx	lr
	...

08018ea4 <_init>:
 8018ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ea6:	bf00      	nop
 8018ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eaa:	bc08      	pop	{r3}
 8018eac:	469e      	mov	lr, r3
 8018eae:	4770      	bx	lr

08018eb0 <_fini>:
 8018eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eb2:	bf00      	nop
 8018eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eb6:	bc08      	pop	{r3}
 8018eb8:	469e      	mov	lr, r3
 8018eba:	4770      	bx	lr
